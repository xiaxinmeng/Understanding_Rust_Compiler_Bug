{"sha": "f101fd8ff62431927d19c70a06a68483cce37c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMDFmZDhmZjYyNDMxOTI3ZDE5YzcwYTA2YTY4NDgzY2NlMzdjMWY=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-02T23:39:40Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-03T17:50:12Z"}, "message": "Fixed cross-crate generic call test to compile lib and bin separately\n\nThe original test produced a single crate with two mods, which was not\nthe goal of the test.", "tree": {"sha": "cd8c4ca6b0ee69df183ed7a0b5b6b7cc23f341d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd8c4ca6b0ee69df183ed7a0b5b6b7cc23f341d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f101fd8ff62431927d19c70a06a68483cce37c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f101fd8ff62431927d19c70a06a68483cce37c1f", "html_url": "https://github.com/rust-lang/rust/commit/f101fd8ff62431927d19c70a06a68483cce37c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f101fd8ff62431927d19c70a06a68483cce37c1f/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0c140a55b589680bbcd76d18fae9f411a7af0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c140a55b589680bbcd76d18fae9f411a7af0c5", "html_url": "https://github.com/rust-lang/rust/commit/b0c140a55b589680bbcd76d18fae9f411a7af0c5"}], "stats": {"total": 2040, "additions": 1390, "deletions": 650}, "files": [{"sha": "89d5974d73c3b00f7496e7a5ede759768cda8dcd", "filename": "src/test/run-make-fulldeps/coverage-reports/Makefile", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2FMakefile?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -67,7 +67,7 @@ DEBUG_FLAG=--debug\n endif\n \n ifeq ($(LLVM_VERSION_11_PLUS),true)\n-all: $(patsubst $(SOURCEDIR)/%.rs,%,$(wildcard $(SOURCEDIR)/*.rs))\n+all: $(patsubst $(SOURCEDIR)/lib/%.rs,%,$(wildcard $(SOURCEDIR)/lib/*.rs)) $(patsubst $(SOURCEDIR)/%.rs,%,$(wildcard $(SOURCEDIR)/*.rs))\n else\n $(info Rust option `-Z instrument-coverage` requires LLVM 11 or higher. Test skipped.)\n all:\n@@ -84,12 +84,22 @@ endif\n \n -include clear_expected_if_blessed\n \n+%: $(SOURCEDIR)/lib/%.rs\n+\t# Compile the test library with coverage instrumentation\n+\t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n+\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/lib/$@.rs && \\\n+\t\t\t\techo \"--edition=2018\" \\\n+\t\t\t) \\\n+\t\t\t--crate-type rlib \\\n+\t\t\t-Zinstrument-coverage\n+\n %: $(SOURCEDIR)/%.rs\n-\t# Compile the test program with coverage instrumentation and generate relevant MIR.\n+\t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && \\\n \t\t\t\techo \"--edition=2018\" \\\n \t\t\t) \\\n+\t\t\t-L \"$(TMPDIR)\" \\\n \t\t\t-Zinstrument-coverage\n \n \t# Run it in order to generate some profiling data,\n@@ -142,8 +152,17 @@ else\n \t# Compare the show coverage output (`--bless` refreshes `typical` files)\n \t# Note `llvm-cov show` output for some programs can vary, but can be ignored\n \t# by inserting `// ignore-llvm-cov-show-diffs` at the top of the source file.\n-\n-\t$(DIFF) expected_show_coverage.$@.txt \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n+\t#\n+\t# FIXME(richkadel): It looks like most past variations seem to have been mitigated. None of the\n+\t# Rust test source samples have the `// ignore-llvm-cov-show-diffs` anymore. The main variation\n+\t# I had seen (and is still present in the new `coverage/lib/used_crate.rs`) is the `llvm-cov show`\n+\t# reporting of multiple instantiations of a generic function with different type substitutions.\n+\t# For some reason, `llvm-cov show` can report these in a non-deterministic order, breaking the\n+\t# `diff` comparision. I was able to work around the problem with `diff --ignore-matching-lines=RE`\n+\t# to ignore each line prefixing each generic instantiation coverage code region.\n+\n+\t$(DIFF) --ignore-matching-lines='::<.*>.*:$$' \\\n+\t\texpected_show_coverage.$@.txt \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t\t( grep -q '^\\/\\/ ignore-llvm-cov-show-diffs' $(SOURCEDIR)/$@.rs && \\\n \t\t\t>&2 echo 'diff failed, but suppressed with `// ignore-llvm-cov-show-diffs` in $(SOURCEDIR)/$@.rs' \\\n \t\t) || \\\n@@ -177,6 +196,10 @@ endif\n \t\t\t$(call BIN,\"$(TMPDIR)\"/$@) \\\n \t\t| \"$(PYTHON)\" $(BASEDIR)/prettify_json.py \\\n \t\t> \"$(TMPDIR)\"/actual_export_coverage.$@.json\n+\t# FIXME(richkadel): With the addition of `--ignore-matching-lines=RE` to ignore the\n+\t# non-deterministically-ordered coverage results for multiple instantiations of generics with\n+\t# differing type substitutions, I probably don't need the `.json` files anymore (and may not\n+\t# need `prettify_json.py` either).\n \n ifdef RUSTC_BLESS_TEST\n \tcp \"$(TMPDIR)\"/actual_export_coverage.$@.json expected_export_coverage.$@.json"}, {"sha": "35ddd58fc437a55ef4d4cf010aabe6010943dc95", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.uses_crate.json", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.uses_crate.json", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.uses_crate.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.uses_crate.json?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -3,53 +3,53 @@\n     {\n       \"files\": [\n         {\n-          \"filename\": \"../coverage/used_crate/mod.rs\",\n+          \"filename\": \"../coverage/lib/used_crate.rs\",\n           \"summary\": {\n             \"functions\": {\n-              \"count\": 3,\n-              \"covered\": 3,\n-              \"percent\": 100\n+              \"count\": 6,\n+              \"covered\": 5,\n+              \"percent\": 83.33333333333334\n             },\n             \"instantiations\": {\n-              \"count\": 4,\n-              \"covered\": 4,\n-              \"percent\": 100\n+              \"count\": 10,\n+              \"covered\": 8,\n+              \"percent\": 80\n             },\n             \"lines\": {\n-              \"count\": 31,\n-              \"covered\": 14,\n-              \"percent\": 45.16129032258064\n+              \"count\": 46,\n+              \"covered\": 26,\n+              \"percent\": 56.52173913043478\n             },\n             \"regions\": {\n-              \"count\": 16,\n-              \"covered\": 6,\n-              \"notcovered\": 10,\n-              \"percent\": 37.5\n+              \"count\": 19,\n+              \"covered\": 8,\n+              \"notcovered\": 11,\n+              \"percent\": 42.10526315789473\n             }\n           }\n         }\n       ],\n       \"totals\": {\n         \"functions\": {\n-          \"count\": 3,\n-          \"covered\": 3,\n-          \"percent\": 100\n+          \"count\": 6,\n+          \"covered\": 5,\n+          \"percent\": 83.33333333333334\n         },\n         \"instantiations\": {\n-          \"count\": 4,\n-          \"covered\": 4,\n-          \"percent\": 100\n+          \"count\": 10,\n+          \"covered\": 8,\n+          \"percent\": 80\n         },\n         \"lines\": {\n-          \"count\": 31,\n-          \"covered\": 14,\n-          \"percent\": 45.16129032258064\n+          \"count\": 46,\n+          \"covered\": 26,\n+          \"percent\": 56.52173913043478\n         },\n         \"regions\": {\n-          \"count\": 16,\n-          \"covered\": 6,\n-          \"notcovered\": 10,\n-          \"percent\": 37.5\n+          \"count\": 19,\n+          \"covered\": 8,\n+          \"notcovered\": 11,\n+          \"percent\": 42.10526315789473\n         }\n       }\n     }"}, {"sha": "824bddaa4015534e10b612eacb2f859e5553581f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-    1|       |#![allow(unused_assignments)]\n+    1|       |#![allow(unused_assignments, dead_code)]\n     2|       |\n     3|       |// require-rust-edition-2018\n     4|       |"}, {"sha": "4285d31868689e7fd896bcb20711a9948bc9853a", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.if_else.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.if_else.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-    1|       |#![allow(unused_assignments)]\n+    1|       |#![allow(unused_assignments, unused_variables)]\n     2|       |\n     3|      1|fn main() {\n     4|      1|    // Initialize test constants in a way that cannot be determined at compile time, to ensure"}, {"sha": "f5b5184044f65dccc327989669afe153a77edfb3", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.inner_items.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inner_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inner_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.inner_items.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-    1|       |#![allow(unused_assignments, unused_variables)]\n+    1|       |#![allow(unused_assignments, unused_variables, dead_code)]\n     2|       |\n     3|      1|fn main() {\n     4|       |    // Initialize test constants in a way that cannot be determined at compile time, to ensure"}, {"sha": "022fe4c596207ffe63b5523cbc8bff52fa77a215", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.loop_break_value.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loop_break_value.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loop_break_value.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loop_break_value.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-    1|       |#![allow(unused_assignments)]\n+    1|       |#![allow(unused_assignments, unused_variables)]\n     2|       |\n     3|      1|fn main() {\n     4|      1|    let result"}, {"sha": "474f02b70073420a3d96cf403ba311bd90948d54", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.loops_branches.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.loops_branches.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-    1|       |#![allow(unused_assignments)]\n+    1|       |#![allow(unused_assignments, unused_variables, while_true)]\n     2|       |\n     3|       |// This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n     4|       |// structure of this `fmt` function."}, {"sha": "81b4c090a46c0e7bfd18d2910f02699831b43d7c", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.simple_match.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.simple_match.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.simple_match.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.simple_match.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-    1|       |#![allow(unused_assignments)]\n+    1|       |#![allow(unused_assignments, unused_variables)]\n     2|       |\n     3|      1|fn main() {\n     4|      1|    // Initialize test constants in a way that cannot be determined at compile time, to ensure"}, {"sha": "e14e733fff6d4cbe55f76924985cb802434c4a49", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 108, "deletions": 22, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -12,45 +12,131 @@\n    12|      1|        countdown = 10;\n    13|      1|    }\n                    ^0\n-   14|      1|    used_twice_generic_function(\"some str\");\n+   14|      1|    use_this_lib_crate();\n    15|      1|}\n    16|       |\n-   17|      1|pub fn used_generic_function<T: Debug>(arg: T) {\n-   18|      1|    println!(\"used_generic_function with {:?}\", arg);\n-   19|      1|}\n+   17|      2|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+   18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+   19|      2|}\n+  ------------------\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   19|      1|}\n+  ------------------\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   19|      1|}\n+  ------------------\n    20|       |\n-   21|      2|pub fn used_twice_generic_function<T: Debug>(arg: T) {\n-   22|      2|    println!(\"used_twice_generic_function with {:?}\", arg);\n+   21|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+   22|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    23|      2|}\n   ------------------\n-  | uses_crate::used_crate::used_twice_generic_function::<alloc::vec::Vec<i32>>:\n-  |   21|      1|pub fn used_twice_generic_function<T: Debug>(arg: T) {\n-  |   22|      1|    println!(\"used_twice_generic_function with {:?}\", arg);\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n   ------------------\n-  | uses_crate::used_crate::used_twice_generic_function::<&str>:\n-  |   21|      1|pub fn used_twice_generic_function<T: Debug>(arg: T) {\n-  |   22|      1|    println!(\"used_twice_generic_function with {:?}\", arg);\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n   ------------------\n    24|       |\n-   25|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n-   26|      0|    println!(\"unused_generic_function with {:?}\", arg);\n-   27|      0|}\n+   25|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   26|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   27|      2|}\n+  ------------------\n+  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  |   25|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   26|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   27|      1|}\n+  ------------------\n+  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  |   25|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   26|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   27|      1|}\n+  ------------------\n    28|       |\n-   29|      0|pub fn unused_function() {\n-   30|      0|    let is_true = std::env::args().len() == 1;\n-   31|      0|    let mut countdown = 2;\n-   32|      0|    if !is_true {\n-   33|      0|        countdown = 20;\n-   34|      0|    }\n+   29|      2|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   30|      2|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   31|      2|}\n+   32|       |\n+   33|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n+   34|      0|    println!(\"unused_generic_function with {:?}\", arg);\n    35|      0|}\n    36|       |\n-   37|      0|fn unused_private_function() {\n+   37|      0|pub fn unused_function() {\n    38|      0|    let is_true = std::env::args().len() == 1;\n    39|      0|    let mut countdown = 2;\n    40|      0|    if !is_true {\n    41|      0|        countdown = 20;\n    42|      0|    }\n    43|      0|}\n+   44|       |\n+   45|      0|fn unused_private_function() {\n+   46|      0|    let is_true = std::env::args().len() == 1;\n+   47|      0|    let mut countdown = 2;\n+   48|      0|    if !is_true {\n+   49|      0|        countdown = 20;\n+   50|      0|    }\n+   51|      0|}\n+   52|       |\n+   53|      1|fn use_this_lib_crate() {\n+   54|      1|    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n+   55|      1|    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n+   56|      1|        \"used from library used_crate.rs\",\n+   57|      1|    );\n+   58|      1|    let some_vec = vec![5, 6, 7, 8];\n+   59|      1|    used_only_from_this_lib_crate_generic_function(some_vec);\n+   60|      1|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n+   61|      1|}\n+  ------------------\n+  | Unexecuted instantiation: used_crate::use_this_lib_crate\n+  ------------------\n+   62|       |\n+   63|       |// FIXME(#79651): `used_from_bin_crate_and_lib_crate_generic_function()` is covered and executed\n+   64|       |// `2` times, but the coverage output also shows (at the bottom of the coverage report):\n+   65|       |//  ------------------\n+   66|       |//  | Unexecuted instantiation: <some function name here>\n+   67|       |//  ------------------\n+   68|       |//\n+   69|       |// Note, the function name shown in the error seems to change depending on the structure of the\n+   70|       |// code, for some reason, including:\n+   71|       |//\n+   72|       |// * used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>\n+   73|       |// * used_crate::use_this_lib_crate\n+   74|       |//\n+   75|       |// The `Unexecuted instantiation` error may be related to more than one generic function. Since the\n+   76|       |// reporting is not consistent, it may not be obvious if there are multiple problems here; however,\n+   77|       |// `used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>` (which I have seen\n+   78|       |// with this error) is the only generic function missing instantiaion coverage counts.\n+   79|       |//\n+   80|       |// The `&str` variant was called from within this `lib` crate, and the `bin` crate also calls this\n+   81|       |// function, but with `T` type `&Vec<i32>`.\n+   82|       |//\n+   83|       |// I believe the reason is that one or both crates are generating `Zero` counters for what it\n+   84|       |// believes are \"Unreachable\" instantiations, but those instantiations are counted from the\n+   85|       |// coverage map in the other crate.\n+   86|       |//\n+   87|       |// See `add_unreachable_coverage()` in `mapgen.rs` for more on how these `Zero` counters are added\n+   88|       |// for what the funciton believes are `DefId`s that did not get codegenned. I suspect the issue\n+   89|       |// may be related to this process, but this needs to be confirmed. It may not be possible to know\n+   90|       |// for sure if a function is truly unused and should be reported with `Zero` coverage if it may\n+   91|       |// still get used from an external crate. (Something to look at: If the `DefId` in MIR corresponds\n+   92|       |// _only_ to the generic function without type parameters, is the `DefId` in the codegenned set,\n+   93|       |// instantiated with one of the type parameters (in either or both crates) a *different* `DefId`?\n+   94|       |// If so, `add_unreachable_coverage()` would assume the MIR `DefId` was uncovered, and would add\n+   95|       |// unreachable coverage.\n+   96|       |//\n+   97|       |// I didn't think they could be different, but if they can, we would need to find the `DefId` for\n+   98|       |// the generic function MIR and include it in the set of \"codegenned\" DefIds if any instantiation\n+   99|       |// of that generic function does exist.\n+  100|       |//\n+  101|       |// Note, however, for `used_with_same_type_from_bin_crate_and_lib_crate_generic_function()` both\n+  102|       |// crates use this function with the same type variant. The function does not have multiple\n+  103|       |// instantiations, so the coverage analysis is not confused. No \"Unexecuted instantiations\" errors\n+  104|       |// are reported.\n "}, {"sha": "82a4457b6ef1eb39c3eb4155101ce550fccc97a4", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.async.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -28,16 +28,18 @@ Counter in file 0 79:14 -> 79:16, 0\n Counter in file 0 81:1 -> 81:2, 0\n Counter in file 0 91:25 -> 91:34, 0\n Counter in file 0 5:1 -> 5:25, #1\n-Counter in file 0 5:25 -> 6:14, #1\n-Counter in file 0 7:9 -> 7:10, #2\n-Counter in file 0 9:9 -> 9:10, (#1 - #2)\n-Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n Counter in file 0 21:1 -> 21:23, #1\n+Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 67:5 -> 67:23, #1\n Counter in file 0 38:1 -> 38:19, #1\n+Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 29:1 -> 29:22, #1\n Counter in file 0 93:1 -> 101:2, #1\n Counter in file 0 91:1 -> 91:25, #1\n+Counter in file 0 5:25 -> 6:14, #1\n+Counter in file 0 7:9 -> 7:10, #2\n+Counter in file 0 9:9 -> 9:10, (#1 - #2)\n+Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n Counter in file 0 38:19 -> 42:12, #1\n Counter in file 0 43:9 -> 43:10, #3\n Counter in file 0 43:14 -> 43:18, (#1 + 0)\n@@ -53,7 +55,6 @@ Counter in file 0 51:5 -> 52:18, #1\n Counter in file 0 53:13 -> 53:14, #2\n Counter in file 0 63:13 -> 63:14, (#1 - #2)\n Counter in file 0 65:5 -> 65:6, (#2 + (#1 - #2))\n-Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 49:1 -> 68:12, #1\n Counter in file 0 69:9 -> 69:10, #2\n Counter in file 0 69:14 -> 69:27, (#1 + 0)\n@@ -69,7 +70,6 @@ Counter in file 0 86:14 -> 86:16, #2\n Counter in file 0 87:14 -> 87:16, #3\n Counter in file 0 89:1 -> 89:2, (#3 + (#2 + (#1 - (#3 + #2))))\n Counter in file 0 17:1 -> 17:20, #1\n-Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 66:5 -> 66:23, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 17:9 -> 17:10, #1"}, {"sha": "b0319cd9e189679630ee4c6c182a9a55ca42ea0e", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.uses_crate.txt", "status": "modified", "additions": 63, "deletions": 28, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.uses_crate.txt?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,39 +1,48 @@\n Counter in file 0 17:1 -> 19:2, #1\n-Counter in file 0 25:1 -> 27:2, 0\n-Counter in file 0 29:1 -> 32:16, 0\n-Counter in file 0 32:17 -> 34:6, 0\n-Counter in file 0 34:6 -> 34:7, 0\n-Counter in file 0 35:1 -> 35:2, 0\n-Counter in file 0 37:1 -> 40:16, 0\n-Counter in file 0 40:17 -> 42:6, 0\n-Counter in file 0 42:6 -> 42:7, 0\n-Counter in file 0 43:1 -> 43:2, 0\n+Counter in file 0 25:1 -> 27:2, #1\n+Counter in file 0 17:1 -> 19:2, #1\n+Counter in file 0 5:1 -> 12:2, #1\n+Counter in file 0 17:1 -> 19:2, 0\n+Counter in file 0 33:1 -> 35:2, 0\n+Counter in file 0 45:1 -> 48:16, 0\n+Counter in file 0 48:17 -> 50:6, 0\n+Counter in file 0 50:6 -> 50:7, 0\n+Counter in file 0 51:1 -> 51:2, 0\n+Counter in file 0 53:1 -> 61:2, #1\n+Counter in file 0 25:1 -> 27:2, #1\n+Counter in file 0 29:1 -> 31:2, #1\n+Counter in file 0 21:1 -> 23:2, #1\n Counter in file 0 5:1 -> 5:24, #1\n Counter in file 0 9:9 -> 11:15, (#1 + 0)\n Counter in file 0 11:16 -> 13:6, #2\n Counter in file 0 13:6 -> 13:7, (#1 - #2)\n Counter in file 0 14:5 -> 15:2, (#2 + (#1 - #2))\n Counter in file 0 21:1 -> 23:2, #1\n-Counter in file 0 21:1 -> 23:2, #1\n-Counter in file 0 5:1 -> 10:2, #1\n-Emitting segments for file: ../coverage/used_crate/mod.rs\n+Counter in file 0 37:1 -> 40:16, #1\n+Counter in file 0 40:17 -> 42:6, #2\n+Counter in file 0 42:6 -> 42:7, (#1 - #2)\n+Counter in file 0 43:1 -> 43:2, (#2 + (#1 - #2))\n+Emitting segments for file: ../coverage/lib/used_crate.rs\n Combined regions:\n   5:1 -> 5:24 (count=1)\n   9:9 -> 11:15 (count=1)\n   11:16 -> 13:6 (count=1)\n   13:6 -> 13:7 (count=0)\n   14:5 -> 15:2 (count=1)\n-  17:1 -> 19:2 (count=1)\n+  17:1 -> 19:2 (count=2)\n   21:1 -> 23:2 (count=2)\n-  25:1 -> 27:2 (count=0)\n-  29:1 -> 32:16 (count=0)\n-  32:17 -> 34:6 (count=0)\n-  34:6 -> 34:7 (count=0)\n-  35:1 -> 35:2 (count=0)\n+  25:1 -> 27:2 (count=2)\n+  29:1 -> 31:2 (count=2)\n+  33:1 -> 35:2 (count=0)\n   37:1 -> 40:16 (count=0)\n   40:17 -> 42:6 (count=0)\n   42:6 -> 42:7 (count=0)\n   43:1 -> 43:2 (count=0)\n+  45:1 -> 48:16 (count=0)\n+  48:17 -> 50:6 (count=0)\n+  50:6 -> 50:7 (count=0)\n+  51:1 -> 51:2 (count=0)\n+  53:1 -> 61:2 (count=1)\n Segment at 5:1 (count = 1), RegionEntry\n Segment at 5:24 (count = 0), Skipped\n Segment at 9:9 (count = 1), RegionEntry\n@@ -43,18 +52,15 @@ Segment at 13:6 (count = 0), RegionEntry\n Segment at 13:7 (count = 0), Skipped\n Segment at 14:5 (count = 1), RegionEntry\n Segment at 15:2 (count = 0), Skipped\n-Segment at 17:1 (count = 1), RegionEntry\n+Segment at 17:1 (count = 2), RegionEntry\n Segment at 19:2 (count = 0), Skipped\n Segment at 21:1 (count = 2), RegionEntry\n Segment at 23:2 (count = 0), Skipped\n-Segment at 25:1 (count = 0), RegionEntry\n+Segment at 25:1 (count = 2), RegionEntry\n Segment at 27:2 (count = 0), Skipped\n-Segment at 29:1 (count = 0), RegionEntry\n-Segment at 32:16 (count = 0), Skipped\n-Segment at 32:17 (count = 0), RegionEntry\n-Segment at 34:6 (count = 0), RegionEntry\n-Segment at 34:7 (count = 0), Skipped\n-Segment at 35:1 (count = 0), RegionEntry\n+Segment at 29:1 (count = 2), RegionEntry\n+Segment at 31:2 (count = 0), Skipped\n+Segment at 33:1 (count = 0), RegionEntry\n Segment at 35:2 (count = 0), Skipped\n Segment at 37:1 (count = 0), RegionEntry\n Segment at 40:16 (count = 0), Skipped\n@@ -63,13 +69,42 @@ Segment at 42:6 (count = 0), RegionEntry\n Segment at 42:7 (count = 0), Skipped\n Segment at 43:1 (count = 0), RegionEntry\n Segment at 43:2 (count = 0), Skipped\n-Emitting segments for function: _RINvNtCs4fqI2P2rA04_10uses_crate10used_crate27used_twice_generic_functionINtNtCs3QflaznQylx_5alloc3vec3VeclEEB4_\n+Segment at 45:1 (count = 0), RegionEntry\n+Segment at 48:16 (count = 0), Skipped\n+Segment at 48:17 (count = 0), RegionEntry\n+Segment at 50:6 (count = 0), RegionEntry\n+Segment at 50:7 (count = 0), Skipped\n+Segment at 51:1 (count = 0), RegionEntry\n+Segment at 51:2 (count = 0), Skipped\n+Segment at 53:1 (count = 1), RegionEntry\n+Segment at 61:2 (count = 0), Skipped\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate41used_only_from_bin_crate_generic_functionReECs4fqI2P2rA04_10uses_crate\n+Combined regions:\n+  17:1 -> 19:2 (count=1)\n+Segment at 17:1 (count = 1), RegionEntry\n+Segment at 19:2 (count = 0), Skipped\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate41used_only_from_bin_crate_generic_functionRINtNtCs3QflaznQylx_5alloc3vec3VeclEECs4fqI2P2rA04_10uses_crate\n+Combined regions:\n+  17:1 -> 19:2 (count=1)\n+Segment at 17:1 (count = 1), RegionEntry\n+Segment at 19:2 (count = 0), Skipped\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate46used_only_from_this_lib_crate_generic_functionINtNtCs3QflaznQylx_5alloc3vec3VeclEEB2_\n Combined regions:\n   21:1 -> 23:2 (count=1)\n Segment at 21:1 (count = 1), RegionEntry\n Segment at 23:2 (count = 0), Skipped\n-Emitting segments for function: _RINvNtCs4fqI2P2rA04_10uses_crate10used_crate27used_twice_generic_functionReEB4_\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate46used_only_from_this_lib_crate_generic_functionReEB2_\n Combined regions:\n   21:1 -> 23:2 (count=1)\n Segment at 21:1 (count = 1), RegionEntry\n Segment at 23:2 (count = 0), Skipped\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate50used_from_bin_crate_and_lib_crate_generic_functionINtNtCs3QflaznQylx_5alloc3vec3VeclEECs4fqI2P2rA04_10uses_crate\n+Combined regions:\n+  25:1 -> 27:2 (count=1)\n+Segment at 25:1 (count = 1), RegionEntry\n+Segment at 27:2 (count = 0), Skipped\n+Emitting segments for function: _RINvCsbDqzXfLQacH_10used_crate50used_from_bin_crate_and_lib_crate_generic_functionReEB2_\n+Combined regions:\n+  25:1 -> 27:2 (count=1)\n+Segment at 25:1 (count = 1), RegionEntry\n+Segment at 27:2 (count = 0), Skipped"}, {"sha": "84b5d0e522f8cacff53788e60f64b7815906e0f5", "filename": "src/test/run-make-fulldeps/coverage-spanview/Makefile", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2FMakefile?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -21,7 +21,7 @@ endef\n export SPANVIEW_HEADER\n \n ifeq ($(LLVM_VERSION_11_PLUS),true)\n-all: $(patsubst $(SOURCEDIR)/%.rs,%,$(wildcard $(SOURCEDIR)/*.rs))\n+all: $(patsubst $(SOURCEDIR)/lib/%.rs,%,$(wildcard $(SOURCEDIR)/lib/*.rs)) $(patsubst $(SOURCEDIR)/%.rs,%,$(wildcard $(SOURCEDIR)/*.rs))\n else\n $(info Rust option `-Z instrument-coverage` requires LLVM 11 or higher. Test skipped.)\n all:\n@@ -36,12 +36,47 @@ endif\n \n -include clear_expected_if_blessed\n \n+# FIXME(richkadel): The actions for these two types of targets (libraries and binaries) should be\n+# combined.\n+\n+%: $(SOURCEDIR)/lib/%.rs\n+\t# Compile the test library with coverage instrumentation\n+\t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n+\t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/lib/$@.rs && \\\n+\t\t\t\techo \"--edition=2018\" \\\n+\t\t\t) \\\n+\t\t\t--crate-type rlib \\\n+\t\t\t-Zinstrument-coverage \\\n+\t\t\t-Zdump-mir=InstrumentCoverage \\\n+\t\t\t-Zdump-mir-spanview \\\n+\t\t\t-Zdump-mir-dir=\"$(TMPDIR)\"/mir_dump.$@\n+\n+\tfor path in \"$(TMPDIR)\"/mir_dump.$@/*; do \\\n+\t\tfile=\"$$(basename \"$$path\")\"; \\\n+\t\turlescaped=\"$$(\"$(PYTHON)\" $(BASEDIR)/escape_url.py $$file)\" || exit $$?; \\\n+\t\tprintf \"$$SPANVIEW_HEADER\\n\" \"$@\" \"$$urlescaped\" > \"$$path\".modified; \\\n+\t\ttail -n +2 \"$$path\" >> \"$$path\".modified; \\\n+\t\tmv \"$$path\".modified \"$$path\"; \\\n+\tdone && true # for/done ends in non-zero status\n+\n+ifdef RUSTC_BLESS_TEST\n+\tmkdir -p expected_mir_dump.$@\n+\tcp \"$(TMPDIR)\"/mir_dump.$@/*InstrumentCoverage.0.html expected_mir_dump.$@/\n+else\n+\t# Check that the selected `mir_dump` files match what we expect (`--bless` refreshes `expected`)\n+\tmkdir -p \"$(TMPDIR)\"/actual_mir_dump.$@\n+\trm -f \"$(TMPDIR)\"/actual_mir_dump.$@/*\n+\tcp \"$(TMPDIR)\"/mir_dump.$@/*InstrumentCoverage.0.html \"$(TMPDIR)\"/actual_mir_dump.$@/\n+\t$(DIFF) -r expected_mir_dump.$@/ \"$(TMPDIR)\"/actual_mir_dump.$@/\n+endif\n+\n %: $(SOURCEDIR)/%.rs\n-\t# Compile the test program with coverage instrumentation and generate relevant MIR.\n+\t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( grep -q '^\\/\\/ require-rust-edition-2018' $(SOURCEDIR)/$@.rs && \\\n \t\t\t\techo \"--edition=2018\" \\\n \t\t\t) \\\n+\t\t\t-L \"$(TMPDIR)\" \\\n \t\t\t-Zinstrument-coverage \\\n \t\t\t-Zdump-mir=InstrumentCoverage \\\n \t\t\t-Zdump-mir-spanview \\"}, {"sha": "47fe96eebd19fca9f9c3d8115f9f53c314ba521c", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_function.-------.InstrumentCoverage.0.html", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -2,7 +2,7 @@\n <!--\n \n Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_private_function.-------.InstrumentCoverage.0.html\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_function.-------.InstrumentCoverage.0.html\n \n For revisions in Pull Requests (PR):\n   * Replace \"rust-lang\" with the github PR author\n@@ -11,7 +11,7 @@\n -->\n <html>\n <head>\n-<title>uses_crate.used_crate-unused_private_function - Coverage Spans</title>\n+<title>used_crate.unused_function - Coverage Spans</title>\n <style>\n     .line {\n         counter-increment: line;\n@@ -78,7 +78,7 @@\n 39:9-39:22: @3[3]: FakeRead(ForLet, _5)\n 40:9-40:16: @3[6]: _7 = _1\n 40:8-40:16: @3[7]: _6 = Not(move _7)\n-40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_private_function() {</span></span>\n+40:8-40:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_function() {</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"38:19-38:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n 38:19-38:35: @1[0]: _3 = &amp;_4\n 38:19-38:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]", "previous_filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_private_function.-------.InstrumentCoverage.0.html"}, {"sha": "6b0ce85c4606f255cd4c28cc026c9968013bcf5f", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_generic_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_crate.unused_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 32\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:14-34:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+34:14-34:49: @0[7]: _7 = &amp;(*_19)\n+34:14-34:49: @0[8]: _6 = &amp;(*_7)\n+34:14-34:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+34:51-34:54: @0[17]: _14 = &amp;_1\n+34:5-34:56: @0[18]: _13 = (move _14,)\n+34:5-34:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+34:5-34:56: @0[22]: _15 = (_13.0: &amp;T)\n+34:5-34:56: @0[25]: _17 = &amp;(*_15)\n+34:5-34:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+34:5-34:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+34:5-34:56: @1[2]: _12 = [move _16]\n+34:5-34:56: @1[5]: _11 = &amp;_12\n+34:5-34:56: @1[6]: _10 = &amp;(*_11)\n+34:5-34:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+34:5-34:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+34:5-34:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+34:5-34:56: @3[6]: _2 = const ()\n+33:50-35:2: @3[8]: _0 = const ()\n+35:2-35:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn unused_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"34:14-34:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+34:14-34:49: @0[7]: _7 = &amp;(*_19)\n+34:14-34:49: @0[8]: _6 = &amp;(*_7)\n+34:14-34:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+34:51-34:54: @0[17]: _14 = &amp;_1\n+34:5-34:56: @0[18]: _13 = (move _14,)\n+34:5-34:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+34:5-34:56: @0[22]: _15 = (_13.0: &amp;T)\n+34:5-34:56: @0[25]: _17 = &amp;(*_15)\n+34:5-34:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+34:5-34:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+34:5-34:56: @1[2]: _12 = [move _16]\n+34:5-34:56: @1[5]: _11 = &amp;_12\n+34:5-34:56: @1[6]: _10 = &amp;(*_11)\n+34:5-34:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+34:5-34:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+34:5-34:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+34:5-34:56: @3[6]: _2 = const ()\n+33:50-35:2: @3[8]: _0 = const ()\n+35:2-35:2: @4.Return: return\">    println!(\"unused_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"34:14-34:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n+34:14-34:49: @0[7]: _7 = &amp;(*_19)\n+34:14-34:49: @0[8]: _6 = &amp;(*_7)\n+34:14-34:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+34:51-34:54: @0[17]: _14 = &amp;_1\n+34:5-34:56: @0[18]: _13 = (move _14,)\n+34:5-34:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n+34:5-34:56: @0[22]: _15 = (_13.0: &amp;T)\n+34:5-34:56: @0[25]: _17 = &amp;(*_15)\n+34:5-34:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+34:5-34:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+34:5-34:56: @1[2]: _12 = [move _16]\n+34:5-34:56: @1[5]: _11 = &amp;_12\n+34:5-34:56: @1[6]: _10 = &amp;(*_11)\n+34:5-34:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+34:5-34:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+34:5-34:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+34:5-34:56: @3[6]: _2 = const ()\n+33:50-35:2: @3[8]: _0 = const ()\n+35:2-35:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "361c57930229aa6428279300cd8b686803d33d6e", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_private_function.-------.InstrumentCoverage.0.html", "status": "renamed", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_private_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_private_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.unused_private_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -2,7 +2,7 @@\n <!--\n \n Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_function.-------.InstrumentCoverage.0.html\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.unused_private_function.-------.InstrumentCoverage.0.html\n \n For revisions in Pull Requests (PR):\n   * Replace \"rust-lang\" with the github PR author\n@@ -11,7 +11,7 @@\n -->\n <html>\n <head>\n-<title>uses_crate.used_crate-unused_function - Coverage Spans</title>\n+<title>used_crate.unused_private_function - Coverage Spans</title>\n <style>\n     .line {\n         counter-increment: line;\n@@ -69,51 +69,51 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 28\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n-30:19-30:35: @1[0]: _3 = &amp;_4\n-30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n-30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n-30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n-31:25-31:26: @3[2]: _5 = const 2_i32\n-31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n-32:9-32:16: @3[6]: _7 = _1\n-32:8-32:16: @3[7]: _6 = Not(move _7)\n-32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>pub fn unused_function() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n-30:19-30:35: @1[0]: _3 = &amp;_4\n-30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n-30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n-30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n-31:25-31:26: @3[2]: _5 = const 2_i32\n-31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n-32:9-32:16: @3[6]: _7 = _1\n-32:8-32:16: @3[7]: _6 = Not(move _7)\n-32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n-30:19-30:35: @1[0]: _3 = &amp;_4\n-30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n-30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n-30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n-31:25-31:26: @3[2]: _5 = const 2_i32\n-31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n-32:9-32:16: @3[6]: _7 = _1\n-32:8-32:16: @3[7]: _6 = Not(move _7)\n-32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 2;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:19-30:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n-30:19-30:35: @1[0]: _3 = &amp;_4\n-30:19-30:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n-30:19-30:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n-30:9-30:16: @2[3]: FakeRead(ForLet, _1)\n-31:25-31:26: @3[2]: _5 = const 2_i32\n-31:9-31:22: @3[3]: FakeRead(ForLet, _5)\n-32:9-32:16: @3[6]: _7 = _1\n-32:8-32:16: @3[7]: _6 = Not(move _7)\n-32:8-32:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:9-33:23: @6[0]: _5 = const 20_i32\n-32:17-34:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"33:9-33:23: @6[0]: _5 = const 20_i32\n-32:17-34:6: @6[1]: _0 = const ()\">        countdown = 20;</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"33:9-33:23: @6[0]: _5 = const 20_i32\n-32:17-34:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:6-34:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+<div class=\"code\" style=\"counter-reset: line 44\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+46:19-46:35: @1[0]: _3 = &amp;_4\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n+47:25-47:26: @3[2]: _5 = const 2_i32\n+47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n+48:9-48:16: @3[6]: _7 = _1\n+48:8-48:16: @3[7]: _6 = Not(move _7)\n+48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn unused_private_function() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+46:19-46:35: @1[0]: _3 = &amp;_4\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n+47:25-47:26: @3[2]: _5 = const 2_i32\n+47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n+48:9-48:16: @3[6]: _7 = _1\n+48:8-48:16: @3[7]: _6 = Not(move _7)\n+48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+46:19-46:35: @1[0]: _3 = &amp;_4\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n+47:25-47:26: @3[2]: _5 = const 2_i32\n+47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n+48:9-48:16: @3[6]: _7 = _1\n+48:8-48:16: @3[7]: _6 = Not(move _7)\n+48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    let mut countdown = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"46:19-46:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb9]\n+46:19-46:35: @1[0]: _3 = &amp;_4\n+46:19-46:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb8]\n+46:19-46:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+46:9-46:16: @2[3]: FakeRead(ForLet, _1)\n+47:25-47:26: @3[2]: _5 = const 2_i32\n+47:9-47:22: @3[3]: FakeRead(ForLet, _5)\n+48:9-48:16: @3[6]: _7 = _1\n+48:8-48:16: @3[7]: _6 = Not(move _7)\n+48:8-48:16: @3[9]: FakeRead(ForMatchedPlace, _6)\">    if !is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @6[0]: _5 = const 20_i32\n+48:17-50:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @6[0]: _5 = const 20_i32\n+48:17-50:6: @6[1]: _0 = const ()\">        countdown = 20;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:9-49:23: @6[0]: _5 = const 20_i32\n+48:17-50:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"50:6-50:6: @5[0]: _0 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"51:2-51:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n </body>\n </html>", "previous_filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_function.-------.InstrumentCoverage.0.html"}, {"sha": "bed5e7bb7ce888f49489df085f81d52a8e85412a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -0,0 +1,190 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.use_this_lib_crate.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_crate.use_this_lib_crate - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 52\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8\u298a</span>fn use_this_lib_crate() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">        \"used from library used_crate.rs\",</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">    );</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">    let some_vec = vec![5, 6, 7, 8];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">    used_only_from_this_lib_crate_generic_function(some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"54:5-54:90: @0.Call: _1 = used_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb1, unwind: bb13]\n+55:5-57:6: @1.Call: _2 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from library used_crate.rs&quot;) -&gt; [return: bb2, unwind: bb13]\n+58:20-58:36: @2[5]: _6 = Box([i32; 4])\n+58:20-58:36: @2[6]: (*_6) = [const 5_i32, const 6_i32, const 7_i32, const 8_i32]\n+58:20-58:36: @2[7]: _5 = move _6\n+58:20-58:36: @2[8]: _4 = move _5 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+58:20-58:36: @4.Call: _3 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _4) -&gt; [return: bb5, unwind: bb12]\n+58:9-58:17: @5[1]: FakeRead(ForLet, _3)\n+59:52-59:60: @5[4]: _8 = move _3\n+59:5-59:61: @5.Call: _7 = used_only_from_this_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _8) -&gt; [return: bb6, unwind: bb9]\n+60:5-60:91: @6.Call: _9 = used_only_from_this_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;used ONLY from library used_crate.rs&quot;) -&gt; [return: bb7, unwind: bb10]\n+53:25-61:2: @7[1]: _0 = const ()\n+61:2-61:2: @8.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "8b994a6962b8355544b01108d8f78987cd491f3c", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_crate.used_from_bin_crate_and_lib_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 24\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:76: @0[6]: _19 = const used_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+26:14-26:76: @0[7]: _7 = &amp;(*_19)\n+26:14-26:76: @0[8]: _6 = &amp;(*_7)\n+26:14-26:76: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+26:78-26:81: @0[17]: _14 = &amp;_1\n+26:5-26:83: @0[18]: _13 = (move _14,)\n+26:5-26:83: @0[20]: FakeRead(ForMatchedPlace, _13)\n+26:5-26:83: @0[22]: _15 = (_13.0: &amp;T)\n+26:5-26:83: @0[25]: _17 = &amp;(*_15)\n+26:5-26:83: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+26:5-26:83: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+26:5-26:83: @1[2]: _12 = [move _16]\n+26:5-26:83: @1[5]: _11 = &amp;_12\n+26:5-26:83: @1[6]: _10 = &amp;(*_11)\n+26:5-26:83: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+26:5-26:83: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+26:5-26:83: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+26:5-26:83: @3[6]: _2 = const ()\n+25:77-27:2: @3[8]: _0 = const ()\n+27:2-27:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_from_bin_crate_and_lib_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:76: @0[6]: _19 = const used_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+26:14-26:76: @0[7]: _7 = &amp;(*_19)\n+26:14-26:76: @0[8]: _6 = &amp;(*_7)\n+26:14-26:76: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+26:78-26:81: @0[17]: _14 = &amp;_1\n+26:5-26:83: @0[18]: _13 = (move _14,)\n+26:5-26:83: @0[20]: FakeRead(ForMatchedPlace, _13)\n+26:5-26:83: @0[22]: _15 = (_13.0: &amp;T)\n+26:5-26:83: @0[25]: _17 = &amp;(*_15)\n+26:5-26:83: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+26:5-26:83: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+26:5-26:83: @1[2]: _12 = [move _16]\n+26:5-26:83: @1[5]: _11 = &amp;_12\n+26:5-26:83: @1[6]: _10 = &amp;(*_11)\n+26:5-26:83: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+26:5-26:83: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+26:5-26:83: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+26:5-26:83: @3[6]: _2 = const ()\n+25:77-27:2: @3[8]: _0 = const ()\n+27:2-27:2: @4.Return: return\">    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:76: @0[6]: _19 = const used_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+26:14-26:76: @0[7]: _7 = &amp;(*_19)\n+26:14-26:76: @0[8]: _6 = &amp;(*_7)\n+26:14-26:76: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+26:78-26:81: @0[17]: _14 = &amp;_1\n+26:5-26:83: @0[18]: _13 = (move _14,)\n+26:5-26:83: @0[20]: FakeRead(ForMatchedPlace, _13)\n+26:5-26:83: @0[22]: _15 = (_13.0: &amp;T)\n+26:5-26:83: @0[25]: _17 = &amp;(*_15)\n+26:5-26:83: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+26:5-26:83: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+26:5-26:83: @1[2]: _12 = [move _16]\n+26:5-26:83: @1[5]: _11 = &amp;_12\n+26:5-26:83: @1[6]: _10 = &amp;(*_11)\n+26:5-26:83: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+26:5-26:83: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+26:5-26:83: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+26:5-26:83: @3[6]: _2 = const ()\n+25:77-27:2: @3[8]: _0 = const ()\n+27:2-27:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "2ffd9bfb8238651735f1ea58f28b5cbe344a1b2e", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_function.-------.InstrumentCoverage.0.html", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -2,7 +2,7 @@\n <!--\n \n Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_function.-------.InstrumentCoverage.0.html\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_function.-------.InstrumentCoverage.0.html\n \n For revisions in Pull Requests (PR):\n   * Replace \"rust-lang\" with the github PR author\n@@ -11,7 +11,7 @@\n -->\n <html>\n <head>\n-<title>uses_crate.used_crate-used_function - Coverage Spans</title>\n+<title>used_crate.used_function - Coverage Spans</title>\n <style>\n     .line {\n         counter-increment: line;\n@@ -105,9 +105,9 @@\n 11:16-13:6: @6[1]: _6 = const ()\">        countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:23: @6[0]: _5 = const 10_i32\n 11:16-13:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:6-13:6: @5[0]: _6 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:44: @7.Call: _8 = used_twice_generic_function::&lt;&amp;str&gt;(const &quot;some str&quot;) -&gt; [return: bb8, unwind: bb10]\n-15:2-15:2: @8.Return: return\"><span class=\"annotation\">@7,8\u298a</span>used_twice_generic_function(\"some str\");</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:44: @7.Call: _8 = used_twice_generic_function::&lt;&amp;str&gt;(const &quot;some str&quot;) -&gt; [return: bb8, unwind: bb10]\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:25: @7.Call: _8 = use_this_lib_crate() -&gt; [return: bb8, unwind: bb10]\n+15:2-15:2: @8.Return: return\"><span class=\"annotation\">@7,8\u298a</span>use_this_lib_crate();</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:5-14:25: @7.Call: _8 = use_this_lib_crate() -&gt; [return: bb8, unwind: bb10]\n 15:2-15:2: @8.Return: return\">}<span class=\"annotation\">\u2989@7,8</span></span></span></span></div>\n </body>\n </html>", "previous_filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_function.-------.InstrumentCoverage.0.html"}, {"sha": "29fe03382c7f0970e9a0ff935683407bc8e821ed", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_only_from_bin_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_crate.used_only_from_bin_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 16\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:67: @0[6]: _19 = const used_only_from_bin_crate_generic_function::&lt;T&gt;::promoted[0]\n+18:14-18:67: @0[7]: _7 = &amp;(*_19)\n+18:14-18:67: @0[8]: _6 = &amp;(*_7)\n+18:14-18:67: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+18:69-18:72: @0[17]: _14 = &amp;_1\n+18:5-18:74: @0[18]: _13 = (move _14,)\n+18:5-18:74: @0[20]: FakeRead(ForMatchedPlace, _13)\n+18:5-18:74: @0[22]: _15 = (_13.0: &amp;T)\n+18:5-18:74: @0[25]: _17 = &amp;(*_15)\n+18:5-18:74: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+18:5-18:74: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+18:5-18:74: @1[2]: _12 = [move _16]\n+18:5-18:74: @1[5]: _11 = &amp;_12\n+18:5-18:74: @1[6]: _10 = &amp;(*_11)\n+18:5-18:74: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+18:5-18:74: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+18:5-18:74: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+18:5-18:74: @3[6]: _2 = const ()\n+17:68-19:2: @3[8]: _0 = const ()\n+19:2-19:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_only_from_bin_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:67: @0[6]: _19 = const used_only_from_bin_crate_generic_function::&lt;T&gt;::promoted[0]\n+18:14-18:67: @0[7]: _7 = &amp;(*_19)\n+18:14-18:67: @0[8]: _6 = &amp;(*_7)\n+18:14-18:67: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+18:69-18:72: @0[17]: _14 = &amp;_1\n+18:5-18:74: @0[18]: _13 = (move _14,)\n+18:5-18:74: @0[20]: FakeRead(ForMatchedPlace, _13)\n+18:5-18:74: @0[22]: _15 = (_13.0: &amp;T)\n+18:5-18:74: @0[25]: _17 = &amp;(*_15)\n+18:5-18:74: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+18:5-18:74: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+18:5-18:74: @1[2]: _12 = [move _16]\n+18:5-18:74: @1[5]: _11 = &amp;_12\n+18:5-18:74: @1[6]: _10 = &amp;(*_11)\n+18:5-18:74: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+18:5-18:74: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+18:5-18:74: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+18:5-18:74: @3[6]: _2 = const ()\n+17:68-19:2: @3[8]: _0 = const ()\n+19:2-19:2: @4.Return: return\">    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:67: @0[6]: _19 = const used_only_from_bin_crate_generic_function::&lt;T&gt;::promoted[0]\n+18:14-18:67: @0[7]: _7 = &amp;(*_19)\n+18:14-18:67: @0[8]: _6 = &amp;(*_7)\n+18:14-18:67: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+18:69-18:72: @0[17]: _14 = &amp;_1\n+18:5-18:74: @0[18]: _13 = (move _14,)\n+18:5-18:74: @0[20]: FakeRead(ForMatchedPlace, _13)\n+18:5-18:74: @0[22]: _15 = (_13.0: &amp;T)\n+18:5-18:74: @0[25]: _17 = &amp;(*_15)\n+18:5-18:74: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+18:5-18:74: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+18:5-18:74: @1[2]: _12 = [move _16]\n+18:5-18:74: @1[5]: _11 = &amp;_12\n+18:5-18:74: @1[6]: _10 = &amp;(*_11)\n+18:5-18:74: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+18:5-18:74: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+18:5-18:74: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+18:5-18:74: @3[6]: _2 = const ()\n+17:68-19:2: @3[8]: _0 = const ()\n+19:2-19:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "76bc057dd00a9ff5b132898729ce9a03bf28b6b9", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_only_from_this_lib_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_crate.used_only_from_this_lib_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 20\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:72: @0[6]: _19 = const used_only_from_this_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+22:14-22:72: @0[7]: _7 = &amp;(*_19)\n+22:14-22:72: @0[8]: _6 = &amp;(*_7)\n+22:14-22:72: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+22:74-22:77: @0[17]: _14 = &amp;_1\n+22:5-22:79: @0[18]: _13 = (move _14,)\n+22:5-22:79: @0[20]: FakeRead(ForMatchedPlace, _13)\n+22:5-22:79: @0[22]: _15 = (_13.0: &amp;T)\n+22:5-22:79: @0[25]: _17 = &amp;(*_15)\n+22:5-22:79: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+22:5-22:79: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+22:5-22:79: @1[2]: _12 = [move _16]\n+22:5-22:79: @1[5]: _11 = &amp;_12\n+22:5-22:79: @1[6]: _10 = &amp;(*_11)\n+22:5-22:79: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+22:5-22:79: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+22:5-22:79: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+22:5-22:79: @3[6]: _2 = const ()\n+21:73-23:2: @3[8]: _0 = const ()\n+23:2-23:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_only_from_this_lib_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:72: @0[6]: _19 = const used_only_from_this_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+22:14-22:72: @0[7]: _7 = &amp;(*_19)\n+22:14-22:72: @0[8]: _6 = &amp;(*_7)\n+22:14-22:72: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+22:74-22:77: @0[17]: _14 = &amp;_1\n+22:5-22:79: @0[18]: _13 = (move _14,)\n+22:5-22:79: @0[20]: FakeRead(ForMatchedPlace, _13)\n+22:5-22:79: @0[22]: _15 = (_13.0: &amp;T)\n+22:5-22:79: @0[25]: _17 = &amp;(*_15)\n+22:5-22:79: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+22:5-22:79: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+22:5-22:79: @1[2]: _12 = [move _16]\n+22:5-22:79: @1[5]: _11 = &amp;_12\n+22:5-22:79: @1[6]: _10 = &amp;(*_11)\n+22:5-22:79: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+22:5-22:79: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+22:5-22:79: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+22:5-22:79: @3[6]: _2 = const ()\n+21:73-23:2: @3[8]: _0 = const ()\n+23:2-23:2: @4.Return: return\">    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:72: @0[6]: _19 = const used_only_from_this_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+22:14-22:72: @0[7]: _7 = &amp;(*_19)\n+22:14-22:72: @0[8]: _6 = &amp;(*_7)\n+22:14-22:72: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+22:74-22:77: @0[17]: _14 = &amp;_1\n+22:5-22:79: @0[18]: _13 = (move _14,)\n+22:5-22:79: @0[20]: FakeRead(ForMatchedPlace, _13)\n+22:5-22:79: @0[22]: _15 = (_13.0: &amp;T)\n+22:5-22:79: @0[25]: _17 = &amp;(*_15)\n+22:5-22:79: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+22:5-22:79: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+22:5-22:79: @1[2]: _12 = [move _16]\n+22:5-22:79: @1[5]: _11 = &amp;_12\n+22:5-22:79: @1[6]: _10 = &amp;(*_11)\n+22:5-22:79: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+22:5-22:79: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+22:5-22:79: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+22:5-22:79: @3[6]: _2 = const ()\n+21:73-23:2: @3[8]: _0 = const ()\n+23:2-23:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a2f4b7e19ebdd10ddbc1703750b4741ca6cd2ab2", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.used_crate%2Fused_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -0,0 +1,133 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.used_crate/used_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>used_crate.used_with_same_type_from_bin_crate_and_lib_crate_generic_function - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 28\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:14-30:91: @0[6]: _19 = const used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+30:14-30:91: @0[7]: _7 = &amp;(*_19)\n+30:14-30:91: @0[8]: _6 = &amp;(*_7)\n+30:14-30:91: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+30:93-30:96: @0[17]: _14 = &amp;_1\n+30:5-30:98: @0[18]: _13 = (move _14,)\n+30:5-30:98: @0[20]: FakeRead(ForMatchedPlace, _13)\n+30:5-30:98: @0[22]: _15 = (_13.0: &amp;T)\n+30:5-30:98: @0[25]: _17 = &amp;(*_15)\n+30:5-30:98: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+30:5-30:98: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+30:5-30:98: @1[2]: _12 = [move _16]\n+30:5-30:98: @1[5]: _11 = &amp;_12\n+30:5-30:98: @1[6]: _10 = &amp;(*_11)\n+30:5-30:98: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+30:5-30:98: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+30:5-30:98: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+30:5-30:98: @3[6]: _2 = const ()\n+29:92-31:2: @3[8]: _0 = const ()\n+31:2-31:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:14-30:91: @0[6]: _19 = const used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+30:14-30:91: @0[7]: _7 = &amp;(*_19)\n+30:14-30:91: @0[8]: _6 = &amp;(*_7)\n+30:14-30:91: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+30:93-30:96: @0[17]: _14 = &amp;_1\n+30:5-30:98: @0[18]: _13 = (move _14,)\n+30:5-30:98: @0[20]: FakeRead(ForMatchedPlace, _13)\n+30:5-30:98: @0[22]: _15 = (_13.0: &amp;T)\n+30:5-30:98: @0[25]: _17 = &amp;(*_15)\n+30:5-30:98: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+30:5-30:98: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+30:5-30:98: @1[2]: _12 = [move _16]\n+30:5-30:98: @1[5]: _11 = &amp;_12\n+30:5-30:98: @1[6]: _10 = &amp;(*_11)\n+30:5-30:98: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+30:5-30:98: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+30:5-30:98: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+30:5-30:98: @3[6]: _2 = const ()\n+29:92-31:2: @3[8]: _0 = const ()\n+31:2-31:2: @4.Return: return\">    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:14-30:91: @0[6]: _19 = const used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;T&gt;::promoted[0]\n+30:14-30:91: @0[7]: _7 = &amp;(*_19)\n+30:14-30:91: @0[8]: _6 = &amp;(*_7)\n+30:14-30:91: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+30:93-30:96: @0[17]: _14 = &amp;_1\n+30:5-30:98: @0[18]: _13 = (move _14,)\n+30:5-30:98: @0[20]: FakeRead(ForMatchedPlace, _13)\n+30:5-30:98: @0[22]: _15 = (_13.0: &amp;T)\n+30:5-30:98: @0[25]: _17 = &amp;(*_15)\n+30:5-30:98: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+30:5-30:98: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n+30:5-30:98: @1[2]: _12 = [move _16]\n+30:5-30:98: @1[5]: _11 = &amp;_12\n+30:5-30:98: @1[6]: _10 = &amp;(*_11)\n+30:5-30:98: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+30:5-30:98: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n+30:5-30:98: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n+30:5-30:98: @3[6]: _2 = const ()\n+29:92-31:2: @3[8]: _0 = const ()\n+31:2-31:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "acb2c7d63f51b3b383a83d59579298852f66d8d0", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 90, "deletions": 48, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.main.-------.InstrumentCoverage.0.html?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -69,83 +69,125 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+<div class=\"code\" style=\"counter-reset: line 4\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n 7:20-7:36: @1[5]: _5 = Box([i32; 4])\n 7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n 7:20-7:36: @1[7]: _4 = move _5\n 7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n-7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n 7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n-8:39-8:48: @4[4]: _7 = &amp;_2\n-8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n-9:45-9:53: @5[4]: _9 = move _2\n-9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n-5:11-10:2: @6[2]: _0 = const ()\n-10:2-10:2: @7.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7\u298a</span>fn main() {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8,9\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n 7:20-7:36: @1[5]: _5 = Box([i32; 4])\n 7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n 7:20-7:36: @1[7]: _4 = move _5\n 7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n-7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n 7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n-8:39-8:48: @4[4]: _7 = &amp;_2\n-8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n-9:45-9:53: @5[4]: _9 = move _2\n-9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n-5:11-10:2: @6[2]: _0 = const ()\n-10:2-10:2: @7.Return: return\">    used_crate::used_function();</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\">    used_crate::used_function();</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n 7:20-7:36: @1[5]: _5 = Box([i32; 4])\n 7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n 7:20-7:36: @1[7]: _4 = move _5\n 7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n-7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n 7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n-8:39-8:48: @4[4]: _7 = &amp;_2\n-8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n-9:45-9:53: @5[4]: _9 = move _2\n-9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n-5:11-10:2: @6[2]: _0 = const ()\n-10:2-10:2: @7.Return: return\">    let some_vec = vec![1, 2, 3, 4];</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\">    let some_vec = vec![1, 2, 3, 4];</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n 7:20-7:36: @1[5]: _5 = Box([i32; 4])\n 7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n 7:20-7:36: @1[7]: _4 = move _5\n 7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n-7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n 7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n-8:39-8:48: @4[4]: _7 = &amp;_2\n-8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n-9:45-9:53: @5[4]: _9 = move _2\n-9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n-5:11-10:2: @6[2]: _0 = const ()\n-10:2-10:2: @7.Return: return\">    used_crate::used_generic_function(&amp;some_vec);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\">    used_crate::used_only_from_bin_crate_generic_function(&amp;some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n 7:20-7:36: @1[5]: _5 = Box([i32; 4])\n 7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n 7:20-7:36: @1[7]: _4 = move _5\n 7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n-7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n 7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n-8:39-8:48: @4[4]: _7 = &amp;_2\n-8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n-9:45-9:53: @5[4]: _9 = move _2\n-9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n-5:11-10:2: @6[2]: _0 = const ()\n-10:2-10:2: @7.Return: return\">    used_crate::used_twice_generic_function(some_vec);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb12]\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\">    used_crate::used_only_from_bin_crate_generic_function(\"used from bin uses_crate.rs\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n 7:20-7:36: @1[5]: _5 = Box([i32; 4])\n 7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n 7:20-7:36: @1[7]: _4 = move _5\n 7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n-7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb11]\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n 7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n-8:39-8:48: @4[4]: _7 = &amp;_2\n-8:5-8:49: @4.Call: _6 = used_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb9]\n-9:45-9:53: @5[4]: _9 = move _2\n-9:5-9:54: @5.Call: _8 = used_twice_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _9) -&gt; [return: bb6, unwind: bb8]\n-5:11-10:2: @6[2]: _0 = const ()\n-10:2-10:2: @7.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7</span></span></span></span></div>\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\">    used_crate::used_from_bin_crate_and_lib_crate_generic_function(some_vec);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\">    used_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\"interesting?\");</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:5-6:32: @0.Call: _1 = used_function() -&gt; [return: bb1, unwind: bb14]\n+7:20-7:36: @1[5]: _5 = Box([i32; 4])\n+7:20-7:36: @1[6]: (*_5) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]\n+7:20-7:36: @1[7]: _4 = move _5\n+7:20-7:36: @1[8]: _3 = move _4 as std::boxed::Box&lt;[i32]&gt; (Pointer(Unsize))\n+7:20-7:36: @3.Call: _2 = slice::&lt;impl [i32]&gt;::into_vec::&lt;std::alloc::Global&gt;(move _3) -&gt; [return: bb4, unwind: bb13]\n+7:9-7:17: @4[1]: FakeRead(ForLet, _2)\n+8:59-8:68: @4[4]: _7 = &amp;_2\n+8:5-8:69: @4.Call: _6 = used_only_from_bin_crate_generic_function::&lt;&amp;Vec&lt;i32&gt;&gt;(move _7) -&gt; [return: bb5, unwind: bb11]\n+9:5-9:89: @5.Call: _8 = used_only_from_bin_crate_generic_function::&lt;&amp;str&gt;(const &quot;used from bin uses_crate.rs&quot;) -&gt; [return: bb6, unwind: bb11]\n+10:68-10:76: @6[3]: _10 = move _2\n+10:5-10:77: @6.Call: _9 = used_from_bin_crate_and_lib_crate_generic_function::&lt;Vec&lt;i32&gt;&gt;(move _10) -&gt; [return: bb7, unwind: bb10]\n+11:5-11:98: @7.Call: _11 = used_with_same_type_from_bin_crate_and_lib_crate_generic_function::&lt;&amp;str&gt;(const &quot;interesting?&quot;) -&gt; [return: bb8, unwind: bb11]\n+5:11-12:2: @8[1]: _0 = const ()\n+12:2-12:2: @9.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8,9</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "d89963a32ce6c7174c5580f2cf89e39a6ae2f58d", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html?ref=b0c140a55b589680bbcd76d18fae9f411a7af0c5", "patch": "@@ -1,133 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-unused_generic_function.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>uses_crate.used_crate-unused_generic_function - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 24\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n-26:14-26:49: @0[7]: _7 = &amp;(*_19)\n-26:14-26:49: @0[8]: _6 = &amp;(*_7)\n-26:14-26:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-26:51-26:54: @0[17]: _14 = &amp;_1\n-26:5-26:56: @0[18]: _13 = (move _14,)\n-26:5-26:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n-26:5-26:56: @0[22]: _15 = (_13.0: &amp;T)\n-26:5-26:56: @0[25]: _17 = &amp;(*_15)\n-26:5-26:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-26:5-26:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-26:5-26:56: @1[2]: _12 = [move _16]\n-26:5-26:56: @1[5]: _11 = &amp;_12\n-26:5-26:56: @1[6]: _10 = &amp;(*_11)\n-26:5-26:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-26:5-26:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-26:5-26:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-26:5-26:56: @3[6]: _2 = const ()\n-25:50-27:2: @3[8]: _0 = const ()\n-27:2-27:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn unused_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n-26:14-26:49: @0[7]: _7 = &amp;(*_19)\n-26:14-26:49: @0[8]: _6 = &amp;(*_7)\n-26:14-26:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-26:51-26:54: @0[17]: _14 = &amp;_1\n-26:5-26:56: @0[18]: _13 = (move _14,)\n-26:5-26:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n-26:5-26:56: @0[22]: _15 = (_13.0: &amp;T)\n-26:5-26:56: @0[25]: _17 = &amp;(*_15)\n-26:5-26:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-26:5-26:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-26:5-26:56: @1[2]: _12 = [move _16]\n-26:5-26:56: @1[5]: _11 = &amp;_12\n-26:5-26:56: @1[6]: _10 = &amp;(*_11)\n-26:5-26:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-26:5-26:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-26:5-26:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-26:5-26:56: @3[6]: _2 = const ()\n-25:50-27:2: @3[8]: _0 = const ()\n-27:2-27:2: @4.Return: return\">    println!(\"unused_generic_function with {:?}\", arg);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"26:14-26:49: @0[6]: _19 = const unused_generic_function::&lt;T&gt;::promoted[0]\n-26:14-26:49: @0[7]: _7 = &amp;(*_19)\n-26:14-26:49: @0[8]: _6 = &amp;(*_7)\n-26:14-26:49: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-26:51-26:54: @0[17]: _14 = &amp;_1\n-26:5-26:56: @0[18]: _13 = (move _14,)\n-26:5-26:56: @0[20]: FakeRead(ForMatchedPlace, _13)\n-26:5-26:56: @0[22]: _15 = (_13.0: &amp;T)\n-26:5-26:56: @0[25]: _17 = &amp;(*_15)\n-26:5-26:56: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-26:5-26:56: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-26:5-26:56: @1[2]: _12 = [move _16]\n-26:5-26:56: @1[5]: _11 = &amp;_12\n-26:5-26:56: @1[6]: _10 = &amp;(*_11)\n-26:5-26:56: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-26:5-26:56: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-26:5-26:56: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-26:5-26:56: @3[6]: _2 = const ()\n-25:50-27:2: @3[8]: _0 = const ()\n-27:2-27:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n-</body>\n-</html>"}, {"sha": "e47ed0b3817869225df17daff919c3b63a9fc5b2", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html?ref=b0c140a55b589680bbcd76d18fae9f411a7af0c5", "patch": "@@ -1,133 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_generic_function.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>uses_crate.used_crate-used_generic_function - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 16\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:47: @0[6]: _19 = const used_generic_function::&lt;T&gt;::promoted[0]\n-18:14-18:47: @0[7]: _7 = &amp;(*_19)\n-18:14-18:47: @0[8]: _6 = &amp;(*_7)\n-18:14-18:47: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-18:49-18:52: @0[17]: _14 = &amp;_1\n-18:5-18:54: @0[18]: _13 = (move _14,)\n-18:5-18:54: @0[20]: FakeRead(ForMatchedPlace, _13)\n-18:5-18:54: @0[22]: _15 = (_13.0: &amp;T)\n-18:5-18:54: @0[25]: _17 = &amp;(*_15)\n-18:5-18:54: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-18:5-18:54: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-18:5-18:54: @1[2]: _12 = [move _16]\n-18:5-18:54: @1[5]: _11 = &amp;_12\n-18:5-18:54: @1[6]: _10 = &amp;(*_11)\n-18:5-18:54: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-18:5-18:54: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-18:5-18:54: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-18:5-18:54: @3[6]: _2 = const ()\n-17:48-19:2: @3[8]: _0 = const ()\n-19:2-19:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:47: @0[6]: _19 = const used_generic_function::&lt;T&gt;::promoted[0]\n-18:14-18:47: @0[7]: _7 = &amp;(*_19)\n-18:14-18:47: @0[8]: _6 = &amp;(*_7)\n-18:14-18:47: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-18:49-18:52: @0[17]: _14 = &amp;_1\n-18:5-18:54: @0[18]: _13 = (move _14,)\n-18:5-18:54: @0[20]: FakeRead(ForMatchedPlace, _13)\n-18:5-18:54: @0[22]: _15 = (_13.0: &amp;T)\n-18:5-18:54: @0[25]: _17 = &amp;(*_15)\n-18:5-18:54: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-18:5-18:54: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-18:5-18:54: @1[2]: _12 = [move _16]\n-18:5-18:54: @1[5]: _11 = &amp;_12\n-18:5-18:54: @1[6]: _10 = &amp;(*_11)\n-18:5-18:54: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-18:5-18:54: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-18:5-18:54: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-18:5-18:54: @3[6]: _2 = const ()\n-17:48-19:2: @3[8]: _0 = const ()\n-19:2-19:2: @4.Return: return\">    println!(\"used_generic_function with {:?}\", arg);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"18:14-18:47: @0[6]: _19 = const used_generic_function::&lt;T&gt;::promoted[0]\n-18:14-18:47: @0[7]: _7 = &amp;(*_19)\n-18:14-18:47: @0[8]: _6 = &amp;(*_7)\n-18:14-18:47: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-18:49-18:52: @0[17]: _14 = &amp;_1\n-18:5-18:54: @0[18]: _13 = (move _14,)\n-18:5-18:54: @0[20]: FakeRead(ForMatchedPlace, _13)\n-18:5-18:54: @0[22]: _15 = (_13.0: &amp;T)\n-18:5-18:54: @0[25]: _17 = &amp;(*_15)\n-18:5-18:54: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-18:5-18:54: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-18:5-18:54: @1[2]: _12 = [move _16]\n-18:5-18:54: @1[5]: _11 = &amp;_12\n-18:5-18:54: @1[6]: _10 = &amp;(*_11)\n-18:5-18:54: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-18:5-18:54: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-18:5-18:54: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-18:5-18:54: @3[6]: _2 = const ()\n-17:48-19:2: @3[8]: _0 = const ()\n-19:2-19:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n-</body>\n-</html>"}, {"sha": "ef63db45cc07b990f30c1b1b8c83f73a9ec7db06", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.uses_crate%2Fuses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html?ref=b0c140a55b589680bbcd76d18fae9f411a7af0c5", "patch": "@@ -1,133 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.uses_crate/uses_crate.used_crate-used_twice_generic_function.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>uses_crate.used_crate-used_twice_generic_function - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 20\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:53: @0[6]: _19 = const used_twice_generic_function::&lt;T&gt;::promoted[0]\n-22:14-22:53: @0[7]: _7 = &amp;(*_19)\n-22:14-22:53: @0[8]: _6 = &amp;(*_7)\n-22:14-22:53: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-22:55-22:58: @0[17]: _14 = &amp;_1\n-22:5-22:60: @0[18]: _13 = (move _14,)\n-22:5-22:60: @0[20]: FakeRead(ForMatchedPlace, _13)\n-22:5-22:60: @0[22]: _15 = (_13.0: &amp;T)\n-22:5-22:60: @0[25]: _17 = &amp;(*_15)\n-22:5-22:60: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-22:5-22:60: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-22:5-22:60: @1[2]: _12 = [move _16]\n-22:5-22:60: @1[5]: _11 = &amp;_12\n-22:5-22:60: @1[6]: _10 = &amp;(*_11)\n-22:5-22:60: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-22:5-22:60: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-22:5-22:60: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-22:5-22:60: @3[6]: _2 = const ()\n-21:54-23:2: @3[8]: _0 = const ()\n-23:2-23:2: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>pub fn used_twice_generic_function&lt;T: Debug&gt;(arg: T) {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:53: @0[6]: _19 = const used_twice_generic_function::&lt;T&gt;::promoted[0]\n-22:14-22:53: @0[7]: _7 = &amp;(*_19)\n-22:14-22:53: @0[8]: _6 = &amp;(*_7)\n-22:14-22:53: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-22:55-22:58: @0[17]: _14 = &amp;_1\n-22:5-22:60: @0[18]: _13 = (move _14,)\n-22:5-22:60: @0[20]: FakeRead(ForMatchedPlace, _13)\n-22:5-22:60: @0[22]: _15 = (_13.0: &amp;T)\n-22:5-22:60: @0[25]: _17 = &amp;(*_15)\n-22:5-22:60: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-22:5-22:60: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-22:5-22:60: @1[2]: _12 = [move _16]\n-22:5-22:60: @1[5]: _11 = &amp;_12\n-22:5-22:60: @1[6]: _10 = &amp;(*_11)\n-22:5-22:60: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-22:5-22:60: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-22:5-22:60: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-22:5-22:60: @3[6]: _2 = const ()\n-21:54-23:2: @3[8]: _0 = const ()\n-23:2-23:2: @4.Return: return\">    println!(\"used_twice_generic_function with {:?}\", arg);</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:14-22:53: @0[6]: _19 = const used_twice_generic_function::&lt;T&gt;::promoted[0]\n-22:14-22:53: @0[7]: _7 = &amp;(*_19)\n-22:14-22:53: @0[8]: _6 = &amp;(*_7)\n-22:14-22:53: @0[9]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n-22:55-22:58: @0[17]: _14 = &amp;_1\n-22:5-22:60: @0[18]: _13 = (move _14,)\n-22:5-22:60: @0[20]: FakeRead(ForMatchedPlace, _13)\n-22:5-22:60: @0[22]: _15 = (_13.0: &amp;T)\n-22:5-22:60: @0[25]: _17 = &amp;(*_15)\n-22:5-22:60: @0[27]: _18 = &lt;T as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r T, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-22:5-22:60: @0.Call: _16 = ArgumentV1::new::&lt;T&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb5]\n-22:5-22:60: @1[2]: _12 = [move _16]\n-22:5-22:60: @1[5]: _11 = &amp;_12\n-22:5-22:60: @1[6]: _10 = &amp;(*_11)\n-22:5-22:60: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-22:5-22:60: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb5]\n-22:5-22:60: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb5]\n-22:5-22:60: @3[6]: _2 = const ()\n-21:54-23:2: @3[8]: _0 = const ()\n-23:2-23:2: @4.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n-</body>\n-</html>"}, {"sha": "5553af92465ca6207ec0d80a43cf1a723b0d7ada", "filename": "src/test/run-make-fulldeps/coverage/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fasync.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_assignments)]\n+#![allow(unused_assignments, dead_code)]\n \n // require-rust-edition-2018\n "}, {"sha": "3244e1e3afd2b3ccffba539227bd78c71ae3e501", "filename": "src/test/run-make-fulldeps/coverage/if_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fif_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fif_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fif_else.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_assignments)]\n+#![allow(unused_assignments, unused_variables)]\n \n fn main() {\n     // Initialize test constants in a way that cannot be determined at compile time, to ensure"}, {"sha": "bcb62b3031cd984da36b46c261277f9523d1ba1c", "filename": "src/test/run-make-fulldeps/coverage/inner_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finner_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finner_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Finner_items.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_assignments, unused_variables)]\n+#![allow(unused_assignments, unused_variables, dead_code)]\n \n fn main() {\n     // Initialize test constants in a way that cannot be determined at compile time, to ensure"}, {"sha": "e5555f9193576579fe91e9f147adbe8378da5646", "filename": "src/test/run-make-fulldeps/coverage/lib/used_crate.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_crate.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -0,0 +1,104 @@\n+#![allow(unused_assignments, unused_variables)]\n+\n+use std::fmt::Debug;\n+\n+pub fn used_function() {\n+    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    // dependent conditions.\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 0;\n+    if is_true {\n+        countdown = 10;\n+    }\n+    use_this_lib_crate();\n+}\n+\n+pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+}\n+\n+pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+}\n+\n+pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+}\n+\n+pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+}\n+\n+pub fn unused_generic_function<T: Debug>(arg: T) {\n+    println!(\"unused_generic_function with {:?}\", arg);\n+}\n+\n+pub fn unused_function() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 2;\n+    if !is_true {\n+        countdown = 20;\n+    }\n+}\n+\n+fn unused_private_function() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 2;\n+    if !is_true {\n+        countdown = 20;\n+    }\n+}\n+\n+fn use_this_lib_crate() {\n+    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n+    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n+        \"used from library used_crate.rs\",\n+    );\n+    let some_vec = vec![5, 6, 7, 8];\n+    used_only_from_this_lib_crate_generic_function(some_vec);\n+    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n+}\n+\n+// FIXME(#79651): `used_from_bin_crate_and_lib_crate_generic_function()` is covered and executed\n+// `2` times, but the coverage output also shows (at the bottom of the coverage report):\n+//  ------------------\n+//  | Unexecuted instantiation: <some function name here>\n+//  ------------------\n+//\n+// Note, the function name shown in the error seems to change depending on the structure of the\n+// code, for some reason, including:\n+//\n+// * used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>\n+// * used_crate::use_this_lib_crate\n+//\n+// The `Unexecuted instantiation` error may be related to more than one generic function. Since the\n+// reporting is not consistent, it may not be obvious if there are multiple problems here; however,\n+// `used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>` (which I have seen\n+// with this error) is the only generic function missing instantiaion coverage counts.\n+//\n+// The `&str` variant was called from within this `lib` crate, and the `bin` crate also calls this\n+// function, but with `T` type `&Vec<i32>`.\n+//\n+// I believe the reason is that one or both crates are generating `Zero` counters for what it\n+// believes are \"Unreachable\" instantiations, but those instantiations are counted from the\n+// coverage map in the other crate.\n+//\n+// See `add_unreachable_coverage()` in `mapgen.rs` for more on how these `Zero` counters are added\n+// for what the funciton believes are `DefId`s that did not get codegenned. I suspect the issue\n+// may be related to this process, but this needs to be confirmed. It may not be possible to know\n+// for sure if a function is truly unused and should be reported with `Zero` coverage if it may\n+// still get used from an external crate. (Something to look at: If the `DefId` in MIR corresponds\n+// _only_ to the generic function without type parameters, is the `DefId` in the codegenned set,\n+// instantiated with one of the type parameters (in either or both crates) a *different* `DefId`?\n+// If so, `add_unreachable_coverage()` would assume the MIR `DefId` was uncovered, and would add\n+// unreachable coverage.\n+//\n+// I didn't think they could be different, but if they can, we would need to find the `DefId` for\n+// the generic function MIR and include it in the set of \"codegenned\" DefIds if any instantiation\n+// of that generic function does exist.\n+//\n+// Note, however, for `used_with_same_type_from_bin_crate_and_lib_crate_generic_function()` both\n+// crates use this function with the same type variant. The function does not have multiple\n+// instantiations, so the coverage analysis is not confused. No \"Unexecuted instantiations\" errors\n+// are reported."}, {"sha": "dbc4fad7a2316e7ae2cba9504601f2d48df115d7", "filename": "src/test/run-make-fulldeps/coverage/loop_break_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floop_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floop_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floop_break_value.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_assignments)]\n+#![allow(unused_assignments, unused_variables)]\n \n fn main() {\n     let result"}, {"sha": "938421d32e7a5725fe6be25c8825128b18390c79", "filename": "src/test/run-make-fulldeps/coverage/loops_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_assignments)]\n+#![allow(unused_assignments, unused_variables, while_true)]\n \n // This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n // structure of this `fmt` function."}, {"sha": "be99e59a826852ec2561af87e00c89546931681f", "filename": "src/test/run-make-fulldeps/coverage/simple_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fsimple_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fsimple_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fsimple_match.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_assignments)]\n+#![allow(unused_assignments, unused_variables)]\n \n fn main() {\n     // Initialize test constants in a way that cannot be determined at compile time, to ensure"}, {"sha": "825eff4d352487641af03c7d3662632ffbac405e", "filename": "src/test/run-make-fulldeps/coverage/used_crate/mod.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fused_crate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c140a55b589680bbcd76d18fae9f411a7af0c5/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fused_crate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fused_crate%2Fmod.rs?ref=b0c140a55b589680bbcd76d18fae9f411a7af0c5", "patch": "@@ -1,43 +0,0 @@\n-#![allow(unused_assignments, unused_variables)]\n-\n-use std::fmt::Debug;\n-\n-pub fn used_function() {\n-    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n-    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n-    // dependent conditions.\n-    let is_true = std::env::args().len() == 1;\n-    let mut countdown = 0;\n-    if is_true {\n-        countdown = 10;\n-    }\n-    used_twice_generic_function(\"some str\");\n-}\n-\n-pub fn used_generic_function<T: Debug>(arg: T) {\n-    println!(\"used_generic_function with {:?}\", arg);\n-}\n-\n-pub fn used_twice_generic_function<T: Debug>(arg: T) {\n-    println!(\"used_twice_generic_function with {:?}\", arg);\n-}\n-\n-pub fn unused_generic_function<T: Debug>(arg: T) {\n-    println!(\"unused_generic_function with {:?}\", arg);\n-}\n-\n-pub fn unused_function() {\n-    let is_true = std::env::args().len() == 1;\n-    let mut countdown = 2;\n-    if !is_true {\n-        countdown = 20;\n-    }\n-}\n-\n-fn unused_private_function() {\n-    let is_true = std::env::args().len() == 1;\n-    let mut countdown = 2;\n-    if !is_true {\n-        countdown = 20;\n-    }\n-}"}, {"sha": "8d24b1ca3e67b231e576444dd1b024152c7b5256", "filename": "src/test/run-make-fulldeps/coverage/uses_crate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f101fd8ff62431927d19c70a06a68483cce37c1f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fuses_crate.rs?ref=f101fd8ff62431927d19c70a06a68483cce37c1f", "patch": "@@ -1,10 +1,12 @@\n #![allow(unused_assignments, unused_variables)]\n \n-mod used_crate;\n+extern crate used_crate;\n \n fn main() {\n     used_crate::used_function();\n     let some_vec = vec![1, 2, 3, 4];\n-    used_crate::used_generic_function(&some_vec);\n-    used_crate::used_twice_generic_function(some_vec);\n+    used_crate::used_only_from_bin_crate_generic_function(&some_vec);\n+    used_crate::used_only_from_bin_crate_generic_function(\"used from bin uses_crate.rs\");\n+    used_crate::used_from_bin_crate_and_lib_crate_generic_function(some_vec);\n+    used_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\"interesting?\");\n }"}]}