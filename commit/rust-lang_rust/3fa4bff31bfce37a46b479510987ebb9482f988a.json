{"sha": "3fa4bff31bfce37a46b479510987ebb9482f988a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYTRiZmYzMWJmY2UzN2E0NmI0Nzk1MTA5ODdlYmI5NDgyZjk4OGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:29Z"}, "message": "Rollup merge of #48635 - scottmcm:faster-zip-nth, r=kennytm\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "6165097db7649fb859eb1960e5777dab9bb9bd6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6165097db7649fb859eb1960e5777dab9bb9bd6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fa4bff31bfce37a46b479510987ebb9482f988a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlqaOjkACgkQO79NPi73\nn5gSyg//ZP7lnTtpoCfcISVkzsDCDwQPQHLozlFXncKCXWvfQateTS63crua5FV2\nY1gItSbfy9kcTXEG4Ij+NWIJUQ5V90tkXB5/VAJaEZZ3RzDjiafgg5tGr9iQM4XF\neg5HhMinA2sd4K9XkJFUxrZsxGj5FxwKMLYLJ0YAx6+rYVOJ+DY4uLIB6sOth1dh\nXNqDVkuB33RW//YEkPUxcdUUECDz6HT7gtO31YirpjD3TvUVNvsCM3SAR8gCDGhZ\n6H4yE1MYr0bV05dR8LgSzu5vat07pP8fOg11DkgTV5qgxRRVSjqRL6dQfCRj386b\n6IUduk1pwayw3z9dzCdmJ9NdItFHjNW/znA54c1qLEUXYokg0h9atIcjOYU9a739\nn7sbxAyugLsiyeFxA3yS1dOeNi4s2yjIXv64lSTwhgBWJ2LE14F9KW5PipOnHsrV\nkl9LaaeZz76Kb2U/xUDn4VfuZRUvTyGW55hfRZ4VAUJ5H0w6VxvQ3Y2ls2Rx9Pzj\nSUlZSaJb6rZXOGJIRDTJqhyf+h1VB5UUCpQDAu4PEZJUIhXEqG9Exyrx9In7KAX6\ngKkqHYDtsL7ZS6VsFmh32doLoF2sSODypMI2cGPyr1TRRj12bDlUwN6Mw70VTfzM\nxKlnkvPF8Yq7tEHZGcXHDpAY2OCVi7frQjszCfgyv0FNC1dI8fc=\n=3Imn\n-----END PGP SIGNATURE-----", "payload": "tree 6165097db7649fb859eb1960e5777dab9bb9bd6b\nparent 6fa14f0e5f8fd251898157d3d1583a2af7db4ff8\nparent 5105fc1681bb5be631850a6ae699dd97f929dd76\nauthor Manish Goregaokar <manishsmail@gmail.com> 1520056889 -0800\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1520056889 -0800\n\nRollup merge of #48635 - scottmcm:faster-zip-nth, r=kennytm\n\nFixes #47311.\nr? @nrc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa4bff31bfce37a46b479510987ebb9482f988a", "html_url": "https://github.com/rust-lang/rust/commit/3fa4bff31bfce37a46b479510987ebb9482f988a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fa4bff31bfce37a46b479510987ebb9482f988a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa14f0e5f8fd251898157d3d1583a2af7db4ff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa14f0e5f8fd251898157d3d1583a2af7db4ff8", "html_url": "https://github.com/rust-lang/rust/commit/6fa14f0e5f8fd251898157d3d1583a2af7db4ff8"}, {"sha": "5105fc1681bb5be631850a6ae699dd97f929dd76", "url": "https://api.github.com/repos/rust-lang/rust/commits/5105fc1681bb5be631850a6ae699dd97f929dd76", "html_url": "https://github.com/rust-lang/rust/commit/5105fc1681bb5be631850a6ae699dd97f929dd76"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "6c597301ac2045cfeea0158268455c9d6eb19364", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3fa4bff31bfce37a46b479510987ebb9482f988a/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa4bff31bfce37a46b479510987ebb9482f988a/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=3fa4bff31bfce37a46b479510987ebb9482f988a", "patch": "@@ -281,3 +281,32 @@ bench_sums! {\n     bench_take_while_chain_ref_sum,\n     (0i64..1000000).chain(1000000..).take_while(|&x| x < 1111111)\n }\n+\n+// Checks whether Skip<Zip<A,B>> is as fast as Zip<Skip<A>, Skip<B>>, from\n+// https://users.rust-lang.org/t/performance-difference-between-iterator-zip-and-skip-order/15743\n+#[bench]\n+fn bench_zip_then_skip(b: &mut Bencher) {\n+    let v: Vec<_> = (0..100_000).collect();\n+    let t: Vec<_> = (0..100_000).collect();\n+\n+    b.iter(|| {\n+        let s = v.iter().zip(t.iter()).skip(10000)\n+            .take_while(|t| *t.0 < 10100)\n+            .map(|(a, b)| *a + *b)\n+            .sum::<u64>();\n+        assert_eq!(s, 2009900);\n+    });\n+}\n+#[bench]\n+fn bench_skip_then_zip(b: &mut Bencher) {\n+    let v: Vec<_> = (0..100_000).collect();\n+    let t: Vec<_> = (0..100_000).collect();\n+\n+    b.iter(|| {\n+        let s = v.iter().skip(10000).zip(t.iter().skip(10000))\n+            .take_while(|t| *t.0 < 10100)\n+            .map(|(a, b)| *a + *b)\n+            .sum::<u64>();\n+        assert_eq!(s, 2009900);\n+    });\n+}"}, {"sha": "257d7d6caaaf85f074377944ba286aedd30c8a9a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3fa4bff31bfce37a46b479510987ebb9482f988a/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa4bff31bfce37a46b479510987ebb9482f988a/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=3fa4bff31bfce37a46b479510987ebb9482f988a", "patch": "@@ -1045,6 +1045,11 @@ impl<A, B> Iterator for Zip<A, B> where A: Iterator, B: Iterator\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         ZipImpl::size_hint(self)\n     }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        ZipImpl::nth(self, n)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1065,6 +1070,14 @@ trait ZipImpl<A, B> {\n     fn new(a: A, b: B) -> Self;\n     fn next(&mut self) -> Option<Self::Item>;\n     fn size_hint(&self) -> (usize, Option<usize>);\n+    fn nth(&mut self, n: usize) -> Option<Self::Item>;\n+    fn super_nth(&mut self, mut n: usize) -> Option<Self::Item> {\n+        while let Some(x) = self.next() {\n+            if n == 0 { return Some(x) }\n+            n -= 1;\n+        }\n+        None\n+    }\n     fn next_back(&mut self) -> Option<Self::Item>\n         where A: DoubleEndedIterator + ExactSizeIterator,\n               B: DoubleEndedIterator + ExactSizeIterator;\n@@ -1094,6 +1107,11 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         })\n     }\n \n+    #[inline]\n+    default fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        self.super_nth(n)\n+    }\n+\n     #[inline]\n     default fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n         where A: DoubleEndedIterator + ExactSizeIterator,\n@@ -1174,6 +1192,24 @@ impl<A, B> ZipImpl<A, B> for Zip<A, B>\n         (len, Some(len))\n     }\n \n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+        let delta = cmp::min(n, self.len - self.index);\n+        let end = self.index + delta;\n+        while self.index < end {\n+            let i = self.index;\n+            self.index += 1;\n+            if A::may_have_side_effect() {\n+                unsafe { self.a.get_unchecked(i); }\n+            }\n+            if B::may_have_side_effect() {\n+                unsafe { self.b.get_unchecked(i); }\n+            }\n+        }\n+\n+        self.super_nth(n - delta)\n+    }\n+\n     #[inline]\n     fn next_back(&mut self) -> Option<(A::Item, B::Item)>\n         where A: DoubleEndedIterator + ExactSizeIterator,"}, {"sha": "a962efadd64e9aed3cca29088bd9cee74ec2823c", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3fa4bff31bfce37a46b479510987ebb9482f988a/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa4bff31bfce37a46b479510987ebb9482f988a/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=3fa4bff31bfce37a46b479510987ebb9482f988a", "patch": "@@ -144,6 +144,43 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.next(), None);\n }\n \n+#[test]\n+fn test_zip_nth() {\n+    let xs = [0, 1, 2, 4, 5];\n+    let ys = [10, 11, 12];\n+\n+    let mut it = xs.iter().zip(&ys);\n+    assert_eq!(it.nth(0), Some((&0, &10)));\n+    assert_eq!(it.nth(1), Some((&2, &12)));\n+    assert_eq!(it.nth(0), None);\n+\n+    let mut it = xs.iter().zip(&ys);\n+    assert_eq!(it.nth(3), None);\n+\n+    let mut it = ys.iter().zip(&xs);\n+    assert_eq!(it.nth(3), None);\n+}\n+\n+#[test]\n+fn test_zip_nth_side_effects() {\n+    let mut a = Vec::new();\n+    let mut b = Vec::new();\n+    let value = [1, 2, 3, 4, 5, 6].iter().cloned()\n+        .map(|n| {\n+            a.push(n);\n+            n * 10\n+        })\n+        .zip([2, 3, 4, 5, 6, 7, 8].iter().cloned().map(|n| {\n+            b.push(n * 100);\n+            n * 1000\n+        }))\n+        .skip(1)\n+        .nth(3);\n+    assert_eq!(value, Some((50, 6000)));\n+    assert_eq!(a, vec![1, 2, 3, 4, 5]);\n+    assert_eq!(b, vec![200, 300, 400, 500, 600]);\n+}\n+\n #[test]\n fn test_iterator_step_by() {\n     // Identity"}]}