{"sha": "977e151b9a74af6cdb92b7afb57a4dbacc799841", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3N2UxNTFiOWE3NGFmNmNkYjkyYjdhZmI1N2E0ZGJhY2M3OTk4NDE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T22:22:50Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:14Z"}, "message": "typeck: remove remaining boxed closures", "tree": {"sha": "858c915791c04b3e6eeb8909442ff186aef7462a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/858c915791c04b3e6eeb8909442ff186aef7462a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977e151b9a74af6cdb92b7afb57a4dbacc799841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977e151b9a74af6cdb92b7afb57a4dbacc799841", "html_url": "https://github.com/rust-lang/rust/commit/977e151b9a74af6cdb92b7afb57a4dbacc799841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977e151b9a74af6cdb92b7afb57a4dbacc799841/comments", "author": null, "committer": null, "parents": [{"sha": "8570f0acc7f7002b745968d9df57daa49befcc3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8570f0acc7f7002b745968d9df57daa49befcc3b", "html_url": "https://github.com/rust-lang/rust/commit/8570f0acc7f7002b745968d9df57daa49befcc3b"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "beb51590b4159249338029abcf52a678e6149b2f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/977e151b9a74af6cdb92b7afb57a4dbacc799841/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977e151b9a74af6cdb92b7afb57a4dbacc799841/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=977e151b9a74af6cdb92b7afb57a4dbacc799841", "patch": "@@ -387,14 +387,18 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n     // Do a search through a list of bounds, using a callback to actually\n     // create the candidates.\n-    fn elaborate_bounds(\n+    fn elaborate_bounds<F>(\n         &mut self,\n         bounds: &[ty::PolyTraitRef<'tcx>],\n         num_includes_types: bool,\n-        mk_cand: for<'b> |this: &mut ProbeContext<'b, 'tcx>,\n-                          tr: ty::PolyTraitRef<'tcx>,\n-                          m: Rc<ty::Method<'tcx>>,\n-                          method_num: uint|)\n+        mut mk_cand: F,\n+    ) where\n+        F: for<'b> FnMut(\n+            &mut ProbeContext<'b, 'tcx>,\n+            ty::PolyTraitRef<'tcx>,\n+            Rc<ty::Method<'tcx>>,\n+            uint,\n+        ),\n     {\n         debug!(\"elaborate_bounds(bounds={})\", bounds.repr(self.tcx()));\n "}, {"sha": "d4a5bda5f97f9e930f5c8f5055e45d08c9408070", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/977e151b9a74af6cdb92b7afb57a4dbacc799841/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977e151b9a74af6cdb92b7afb57a4dbacc799841/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=977e151b9a74af6cdb92b7afb57a4dbacc799841", "patch": "@@ -81,10 +81,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         }\n     }\n \n-    fn with_fcx(&mut self,\n-                item: &ast::Item,\n-                f: for<'fcx> |&mut CheckTypeWellFormedVisitor<'ccx, 'tcx>,\n-                              &FnCtxt<'fcx, 'tcx>|) {\n+    fn with_fcx<F>(&mut self, item: &ast::Item, mut f: F) where\n+        F: for<'fcx> FnMut(&mut CheckTypeWellFormedVisitor<'ccx, 'tcx>, &FnCtxt<'fcx, 'tcx>),\n+    {\n         let ccx = self.ccx;\n         let item_def_id = local_def(item.id);\n         let polytype = ty::lookup_item_type(ccx.tcx, item_def_id);\n@@ -100,10 +99,8 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     }\n \n     /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n-    fn check_type_defn(&mut self,\n-                       item: &ast::Item,\n-                       lookup_fields: for<'fcx> |&FnCtxt<'fcx, 'tcx>|\n-                                                 -> Vec<AdtVariant<'tcx>>)\n+    fn check_type_defn<F>(&mut self, item: &ast::Item, mut lookup_fields: F) where\n+        F: for<'fcx> FnMut(&FnCtxt<'fcx, 'tcx>) -> Vec<AdtVariant<'tcx>>,\n     {\n         self.with_fcx(item, |this, fcx| {\n             let variants = lookup_fields(fcx);"}]}