{"sha": "96e1cf3b0693e5724797abd566bd4913be4f6d79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTFjZjNiMDY5M2U1NzI0Nzk3YWJkNTY2YmQ0OTEzYmU0ZjZkNzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-07T10:01:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-07T10:01:20Z"}, "message": "address review comments", "tree": {"sha": "aa37b4b529499dc0f8a3a90a8479cf8778ac7f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa37b4b529499dc0f8a3a90a8479cf8778ac7f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e1cf3b0693e5724797abd566bd4913be4f6d79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e1cf3b0693e5724797abd566bd4913be4f6d79", "html_url": "https://github.com/rust-lang/rust/commit/96e1cf3b0693e5724797abd566bd4913be4f6d79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e1cf3b0693e5724797abd566bd4913be4f6d79/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46eef9cf3bf2f1a4ca5448c7f02e3c749e73bd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46eef9cf3bf2f1a4ca5448c7f02e3c749e73bd9", "html_url": "https://github.com/rust-lang/rust/commit/d46eef9cf3bf2f1a4ca5448c7f02e3c749e73bd9"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "d532ad38d04eedeb97a8a61f5586746d78e49d97", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/96e1cf3b0693e5724797abd566bd4913be4f6d79/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e1cf3b0693e5724797abd566bd4913be4f6d79/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=96e1cf3b0693e5724797abd566bd4913be4f6d79", "patch": "@@ -139,17 +139,14 @@ impl<'a> Registry<'a> {\n \n     /// Register an attribute with an attribute type\n     ///\n-    /// Registered attributes will bypass the `custom_attribute` feature gate\n-    ///\n+    /// Registered attributes will bypass the `custom_attribute` feature gate.\n     /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`\n-    /// lint\n-    ///\n-    /// `CrateLevel` attributes will not be allowed on anything other than a crate\n+    /// lint. `CrateLevel` attributes will not be allowed on anything other than a crate.\n     pub fn register_attribute(&mut self, name: String, ty: AttributeType) {\n         if let AttributeType::Gated(..) = ty {\n-            self.sess.err(\"plugin tried to register a gated attribute. \\\n-                           Only `Normal`, `Whitelisted`, and `CrateLevel` \\\n-                           attributes are allowed\");\n+            self.sess.span_err(self.krate_span, \"plugin tried to register a gated \\\n+                                                 attribute. Only `Normal`, `Whitelisted`, \\\n+                                                 and `CrateLevel` attributes are allowed\");\n         }\n         self.attributes.push((name, ty));\n     }"}, {"sha": "27c7021315173a026bfd8afbc4326f8630cc2c13", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96e1cf3b0693e5724797abd566bd4913be4f6d79/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e1cf3b0693e5724797abd566bd4913be4f6d79/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=96e1cf3b0693e5724797abd566bd4913be4f6d79", "patch": "@@ -653,11 +653,17 @@ impl LintPass for UnusedAttributes {\n \n         if !attr::is_used(attr) {\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n-            if KNOWN_ATTRIBUTES.contains(&(&attr.name(), AttributeType::CrateLevel)) ||\n-               plugin_attributes.iter()\n-                                .find(|&&(ref x, t)| &*attr.name() == &*x &&\n-                                                     AttributeType::CrateLevel == t)\n-                                .is_some() {\n+            // Is it a builtin attribute that must be used at the crate level?\n+            let known_crate = KNOWN_ATTRIBUTES.contains(&(&attr.name(),\n+                                                          AttributeType::CrateLevel));\n+            // Has a plugin registered this attribute as one which must be used at\n+            // the crate level?\n+            let plugin_crate = plugin_attributes.iter()\n+                                                .find(|&&(ref x, t)| {\n+                                                        &*attr.name() == &*x &&\n+                                                        AttributeType::CrateLevel == t\n+                                                    }).is_some();\n+            if  known_crate || plugin_crate {\n                 let msg = match attr.node.style {\n                     ast::AttrOuter => \"crate-level attribute should be an inner \\\n                                        attribute: add an exclamation mark: #![foo]\","}]}