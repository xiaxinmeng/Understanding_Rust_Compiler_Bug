{"sha": "2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNTBlZTc1YjJjYzljM2Q4Y2ZiYmI4ZDk1MDAxMjY3ODkxM2I5MmQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-13T11:00:45Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-30T22:28:17Z"}, "message": "single_char_push_str lint using insert_str() on single-char literals and suggest insert()\n\nchangelog: single_char_push_str: lint using string.insert_str() with single char literals and suggests string.insert() with a char\n\nFixes #6026", "tree": {"sha": "a7cb1302460618d724d79f3275b044de08346d8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cb1302460618d724d79f3275b044de08346d8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "html_url": "https://github.com/rust-lang/rust/commit/2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7387b87bb98627962c3871e56b2bdeb73737c397", "url": "https://api.github.com/repos/rust-lang/rust/commits/7387b87bb98627962c3871e56b2bdeb73737c397", "html_url": "https://github.com/rust-lang/rust/commit/7387b87bb98627962c3871e56b2bdeb73737c397"}], "stats": {"total": 102, "additions": 100, "deletions": 2}, "files": [{"sha": "86e7c57afae28571bae0c996949c40ff8ff51a59", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "patch": "@@ -1290,8 +1290,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns when using `push_str` with a single-character string literal,\n-    /// and `push` with a `char` would work fine.\n+    /// **What it does:** Warns when using `push_str` with a single-character string literal\n+    /// where `push` with a `char` would work fine.\n     ///\n     /// **Why is this bad?** It's less clear that we are pushing a single character.\n     ///\n@@ -1521,6 +1521,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n                         lint_single_char_push_string(cx, expr, args);\n+                    } else if match_def_path(cx, fn_def_id, &paths::INSERT_STR) {\n+                        lint_single_char_insert_string(cx, expr, args);\n                     }\n                 }\n \n@@ -3255,6 +3257,25 @@ fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args\n     }\n }\n \n+/// lint for length-1 `str`s as argument for `insert_str`\n+fn lint_single_char_insert_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[2], &mut applicability) {\n+        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+        let pos_arg = snippet(cx, args[1].span, \"..\");\n+        let sugg = format!(\"{}.insert({}, {})\", base_string_snippet, pos_arg, extension_string);\n+        span_lint_and_sugg(\n+            cx,\n+            SINGLE_CHAR_PUSH_STR,\n+            expr.span,\n+            \"calling `insert_str()` using a single-character string literal\",\n+            \"consider using `insert` with a character literal\",\n+            sugg,\n+            applicability,\n+        );\n+    }\n+}\n+\n /// Checks for the `USELESS_ASREF` lint.\n fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_ref_args: &[hir::Expr<'_>]) {\n     // when we get here, we've already checked that the call name is \"as_ref\" or \"as_mut\""}, {"sha": "34d5c8d2eb7ab3e56b6dedf128fd4c42d7859f0e", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "patch": "@@ -52,6 +52,7 @@ pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entr\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n+pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];"}, {"sha": "c3416720ec30faa21c810cfe2498109f6e55bf75", "filename": "tests/ui/single_char_insert_str.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/tests%2Fui%2Fsingle_char_insert_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/tests%2Fui%2Fsingle_char_insert_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_insert_str.fixed?ref=2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![warn(clippy::single_char_push_str)]\n+\n+fn main() {\n+    let mut string = String::new();\n+    string.insert(0, 'R');\n+    string.insert(1, '\\'');\n+\n+    string.insert(0, 'u');\n+    string.insert_str(2, \"st\");\n+    string.insert_str(0, \"\");\n+    string.insert(0, '\\x52');\n+    string.insert(0, '\\u{0052}');\n+    let x: usize = 2;\n+    string.insert(x, 'a');\n+    const Y: usize = 1;\n+    string.insert(Y, 'a');\n+}"}, {"sha": "2295669e81df63d0236b93c4b12d053dd17c5ae1", "filename": "tests/ui/single_char_insert_str.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/tests%2Fui%2Fsingle_char_insert_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/tests%2Fui%2Fsingle_char_insert_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_insert_str.rs?ref=2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+#![warn(clippy::single_char_push_str)]\n+\n+fn main() {\n+    let mut string = String::new();\n+    string.insert_str(0, \"R\");\n+    string.insert_str(1, \"'\");\n+\n+    string.insert(0, 'u');\n+    string.insert_str(2, \"st\");\n+    string.insert_str(0, \"\");\n+    string.insert_str(0, \"\\x52\");\n+    string.insert_str(0, \"\\u{0052}\");\n+    let x: usize = 2;\n+    string.insert_str(x, r##\"a\"##);\n+    const Y: usize = 1;\n+    string.insert_str(Y, r##\"a\"##);\n+}"}, {"sha": "65dc8a69d69d1a5654f02e694def89f8910d5f7f", "filename": "tests/ui/single_char_insert_str.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/tests%2Fui%2Fsingle_char_insert_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2350ee75b2cc9c3d8cfbbb8d950012678913b92d/tests%2Fui%2Fsingle_char_insert_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_insert_str.stderr?ref=2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "patch": "@@ -0,0 +1,40 @@\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_insert_str.rs:6:5\n+   |\n+LL |     string.insert_str(0, \"R\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, 'R')`\n+   |\n+   = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_insert_str.rs:7:5\n+   |\n+LL |     string.insert_str(1, \"'\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(1, '/'')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_insert_str.rs:12:5\n+   |\n+LL |     string.insert_str(0, \"/x52\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/x52')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_insert_str.rs:13:5\n+   |\n+LL |     string.insert_str(0, \"/u{0052}\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/u{0052}')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_insert_str.rs:15:5\n+   |\n+LL |     string.insert_str(x, r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(x, 'a')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_insert_str.rs:17:5\n+   |\n+LL |     string.insert_str(Y, r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(Y, 'a')`\n+\n+error: aborting due to 6 previous errors\n+"}]}