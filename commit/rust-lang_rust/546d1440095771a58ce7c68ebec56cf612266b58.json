{"sha": "546d1440095771a58ce7c68ebec56cf612266b58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NmQxNDQwMDk1NzcxYTU4Y2U3YzY4ZWJlYzU2Y2Y2MTIyNjZiNTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-22T01:06:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-22T01:06:20Z"}, "message": "Teach AST, parser, folder about iter items.", "tree": {"sha": "59e81d937fa92dce8249c6960ef51b6969403f3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e81d937fa92dce8249c6960ef51b6969403f3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/546d1440095771a58ce7c68ebec56cf612266b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/546d1440095771a58ce7c68ebec56cf612266b58", "html_url": "https://github.com/rust-lang/rust/commit/546d1440095771a58ce7c68ebec56cf612266b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/546d1440095771a58ce7c68ebec56cf612266b58/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37805518780d612ded2a2124fe9df1400123af0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/37805518780d612ded2a2124fe9df1400123af0d", "html_url": "https://github.com/rust-lang/rust/commit/37805518780d612ded2a2124fe9df1400123af0d"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "bdd6fa0771d138ad29c4277b554821fab8940f9c", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=546d1440095771a58ce7c68ebec56cf612266b58", "patch": "@@ -200,6 +200,7 @@ tag ty_ {\n \n type arg = rec(mode mode, @ty ty, ident ident, def_id id);\n type _fn = rec(effect effect,\n+               bool is_iter,\n                vec[arg] inputs,\n                @ty output,\n                block body);"}, {"sha": "406e989234def2417934fda828662947b6b0fe47", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=546d1440095771a58ce7c68ebec56cf612266b58", "patch": "@@ -1403,7 +1403,7 @@ impure fn parse_ty_params(parser p) -> vec[ast.ty_param] {\n     ret ty_params;\n }\n \n-impure fn parse_fn(parser p, ast.effect eff) -> ast._fn {\n+impure fn parse_fn(parser p, ast.effect eff, bool is_iter) -> ast._fn {\n     auto pf = parse_arg;\n     let util.common.spanned[vec[ast.arg]] inputs =\n         // FIXME: passing parse_arg as an lval doesn't work at the\n@@ -1425,18 +1425,25 @@ impure fn parse_fn(parser p, ast.effect eff) -> ast._fn {\n     auto body = parse_block(p);\n \n     ret rec(effect = eff,\n+            is_iter = is_iter,\n             inputs = inputs.node,\n             output = output,\n             body = body);\n }\n \n-impure fn parse_item_fn(parser p, ast.effect eff) -> @ast.item {\n+impure fn parse_item_fn_or_iter(parser p, ast.effect eff,\n+                                bool is_iter) -> @ast.item {\n     auto lo = p.get_span();\n-    expect(p, token.FN);\n+    if (is_iter) {\n+        expect(p, token.ITER);\n+    } else {\n+        expect(p, token.FN);\n+    }\n     auto id = parse_ident(p);\n     auto ty_params = parse_ty_params(p);\n-    auto f = parse_fn(p, eff);\n-    auto item = ast.item_fn(id, f, ty_params, p.next_def_id(), ast.ann_none);\n+    auto f = parse_fn(p, eff, is_iter);\n+    auto item = ast.item_fn(id, f, ty_params,\n+                            p.next_def_id(), ast.ann_none);\n     ret @spanned(lo, f.body.span, item);\n }\n \n@@ -1450,9 +1457,14 @@ impure fn parse_obj_field(parser p) -> ast.obj_field {\n impure fn parse_method(parser p) -> @ast.method {\n     auto lo = p.get_span();\n     auto eff = parse_effect(p);\n-    expect(p, token.FN);\n+    auto is_iter = false;\n+    alt (p.peek()) {\n+        case (token.FN) { p.bump(); }\n+        case (token.ITER) { p.bump(); is_iter = true; }\n+        case (?t) { unexpected(p, t); }\n+    }\n     auto ident = parse_ident(p);\n-    auto f = parse_fn(p, eff);\n+    auto f = parse_fn(p, eff, is_iter);\n     auto meth = rec(ident=ident, meth=f,\n                     id=p.next_def_id(), ann=ast.ann_none);\n     ret @spanned(lo, f.body.span, meth);\n@@ -1655,7 +1667,11 @@ impure fn parse_item(parser p) -> @ast.item {\n \n         case (token.FN) {\n             check (lyr == ast.layer_value);\n-            ret parse_item_fn(p, eff);\n+            ret parse_item_fn_or_iter(p, eff, false);\n+        }\n+        case (token.ITER) {\n+            check (lyr == ast.layer_value);\n+            ret parse_item_fn_or_iter(p, eff, true);\n         }\n         case (token.MOD) {\n             check (eff == ast.eff_pure);"}, {"sha": "7862c7ca712d181ea4b505159438bbb5f0865505", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=546d1440095771a58ce7c68ebec56cf612266b58", "patch": "@@ -221,6 +221,7 @@ type ast_fold[ENV] =\n          &ast.block_) -> block)                   fold_block,\n \n      (fn(&ENV e, ast.effect effect,\n+         bool is_iter,\n          vec[arg] inputs,\n          @ty output, &block body) -> ast._fn)     fold_fn,\n \n@@ -671,7 +672,7 @@ fn fold_fn[ENV](&ENV env, ast_fold[ENV] fld, &ast._fn f) -> ast._fn {\n     auto output = fold_ty[ENV](env, fld, f.output);\n     auto body = fold_block[ENV](env, fld, f.body);\n \n-    ret fld.fold_fn(env, f.effect, inputs, output, body);\n+    ret fld.fold_fn(env, f.effect, f.is_iter, inputs, output, body);\n }\n \n \n@@ -1129,10 +1130,12 @@ fn identity_fold_block[ENV](&ENV e, &span sp, &ast.block_ blk) -> block {\n \n fn identity_fold_fn[ENV](&ENV e,\n                          ast.effect effect,\n+                         bool is_iter,\n                          vec[arg] inputs,\n                          @ast.ty output,\n                          &block body) -> ast._fn {\n-    ret rec(effect=effect, inputs=inputs, output=output, body=body);\n+    ret rec(effect=effect, is_iter=is_iter, inputs=inputs,\n+            output=output, body=body);\n }\n \n fn identity_fold_mod[ENV](&ENV e, &ast._mod m) -> ast._mod {\n@@ -1271,7 +1274,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n              bind identity_fold_view_item_import[ENV](_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n-         fold_fn = bind identity_fold_fn[ENV](_,_,_,_,_),\n+         fold_fn = bind identity_fold_fn[ENV](_,_,_,_,_,_),\n          fold_mod = bind identity_fold_mod[ENV](_,_),\n          fold_crate = bind identity_fold_crate[ENV](_,_,_),\n          fold_obj = bind identity_fold_obj[ENV](_,_,_),"}, {"sha": "6ce899f6fdf147e32954f52b9e55290d592573ef", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546d1440095771a58ce7c68ebec56cf612266b58/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=546d1440095771a58ce7c68ebec56cf612266b58", "patch": "@@ -1590,7 +1590,7 @@ fn check_const(&@crate_ctxt ccx, &span sp, ast.ident ident, @ast.ty t,\n }\n \n fn check_fn(&@crate_ctxt ccx, ast.effect effect,\n-            vec[ast.arg] inputs,\n+            bool is_iter, vec[ast.arg] inputs,\n             @ast.ty output, &ast.block body) -> ast._fn {\n     auto local_ty_table = @common.new_def_hash[@ty.t]();\n \n@@ -1618,8 +1618,8 @@ fn check_fn(&@crate_ctxt ccx, ast.effect effect,\n     auto block_t = check_block(fcx, body);\n     auto block_wb = writeback(fcx, block_t);\n \n-    auto fn_t = rec(effect=effect, inputs=inputs, output=output,\n-                    body=block_wb);\n+    auto fn_t = rec(effect=effect, is_iter=is_iter,\n+                    inputs=inputs, output=output, body=block_wb);\n     ret fn_t;\n }\n \n@@ -1670,7 +1670,7 @@ fn check_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n     auto fld = fold.new_identity_fold[@crate_ctxt]();\n \n     fld = @rec(update_env_for_item = bind update_obj_fields(_, _),\n-               fold_fn      = bind check_fn(_,_,_,_,_),\n+               fold_fn      = bind check_fn(_,_,_,_,_,_),\n                fold_item_fn = bind check_item_fn(_,_,_,_,_,_,_)\n                with *fld);\n     ret fold.fold_crate[@crate_ctxt](ccx, fld, result._0);"}]}