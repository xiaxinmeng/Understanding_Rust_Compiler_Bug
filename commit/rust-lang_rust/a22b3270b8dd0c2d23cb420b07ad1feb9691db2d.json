{"sha": "a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMmIzMjcwYjhkZDBjMmQyM2NiNDIwYjA3YWQxZmViOTY5MWRiMmQ=", "commit": {"author": {"name": "Shmuale Mark", "email": "shm.mark@gmail.com", "date": "2015-05-12T14:47:14Z"}, "committer": {"name": "Shmuale Mark", "email": "shmmark@gmail.com", "date": "2015-05-12T15:58:07Z"}, "message": "book: typo fixes, wording improvements.\n\nThe text in iterators.md wasn't wrong, but it read awkwardly to my ear.", "tree": {"sha": "4f77ef325ff31206ebb54b1386d67eb907ffac87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f77ef325ff31206ebb54b1386d67eb907ffac87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "html_url": "https://github.com/rust-lang/rust/commit/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/comments", "author": {"login": "wheals", "id": 6370042, "node_id": "MDQ6VXNlcjYzNzAwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6370042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wheals", "html_url": "https://github.com/wheals", "followers_url": "https://api.github.com/users/wheals/followers", "following_url": "https://api.github.com/users/wheals/following{/other_user}", "gists_url": "https://api.github.com/users/wheals/gists{/gist_id}", "starred_url": "https://api.github.com/users/wheals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wheals/subscriptions", "organizations_url": "https://api.github.com/users/wheals/orgs", "repos_url": "https://api.github.com/users/wheals/repos", "events_url": "https://api.github.com/users/wheals/events{/privacy}", "received_events_url": "https://api.github.com/users/wheals/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wheals", "id": 6370042, "node_id": "MDQ6VXNlcjYzNzAwNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6370042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wheals", "html_url": "https://github.com/wheals", "followers_url": "https://api.github.com/users/wheals/followers", "following_url": "https://api.github.com/users/wheals/following{/other_user}", "gists_url": "https://api.github.com/users/wheals/gists{/gist_id}", "starred_url": "https://api.github.com/users/wheals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wheals/subscriptions", "organizations_url": "https://api.github.com/users/wheals/orgs", "repos_url": "https://api.github.com/users/wheals/repos", "events_url": "https://api.github.com/users/wheals/events{/privacy}", "received_events_url": "https://api.github.com/users/wheals/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67dfc177f3c3236a73c7273dd0bf8be80bf1f5b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/67dfc177f3c3236a73c7273dd0bf8be80bf1f5b0", "html_url": "https://github.com/rust-lang/rust/commit/67dfc177f3c3236a73c7273dd0bf8be80bf1f5b0"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "dade9044fdbe85276d86012ed8d7f31534cb2c0f", "filename": "src/doc/trpl/enums.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fenums.md", "raw_url": "https://github.com/rust-lang/rust/raw/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fenums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fenums.md?ref=a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "patch": "@@ -56,7 +56,8 @@ Character::Digit(10);\n Hand::Digit;\n ```\n \n-Both variants are named `Digit`, but since they\u2019re scoped to the `enum` name,\n+Both variants are named `Digit`, but since they\u2019re scoped to the `enum` name\n+there's no ambiguity.\n \n Not supporting these operations may seem rather limiting, but it\u2019s a limitation\n which we can overcome. There are two ways: by implementing equality ourselves,"}, {"sha": "b3689968b7fd1cacfb2e6ec79616e884c5ad6a2e", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "patch": "@@ -204,7 +204,7 @@ Because these kinds of situations are relatively rare, use panics sparingly.\n \n In certain circumstances, even though a function may fail, we may want to treat\n it as a panic instead. For example, `io::stdin().read_line(&mut buffer)` returns\n-an `Result<usize>`, when there is an error reading the line. This allows us to\n+a `Result<usize>`, when there is an error reading the line. This allows us to\n handle and possibly recover from error.\n \n If we don't want to handle this error, and would rather just abort the program,"}, {"sha": "e0cc45c254b9974c32538223cf568f7dafe8d8ef", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "patch": "@@ -212,9 +212,9 @@ see why consumers matter.\n As we've said before, an iterator is something that we can call the\n `.next()` method on repeatedly, and it gives us a sequence of things.\n Because you need to call the method, this means that iterators\n-are *lazy* and don't need to generate all of the values upfront.\n-This code, for example, does not actually generate the numbers\n-`1-100`, and just creates a value that represents the sequence:\n+can be *lazy* and not generate all of the values upfront. This code,\n+for example, does not actually generate the numbers `1-100`, instead\n+creating a value that merely represents the sequence:\n \n ```rust\n let nums = 1..100;"}, {"sha": "40def201dcc944ee53bb25432d17cded4ce59b17", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "patch": "@@ -41,7 +41,7 @@ With that in mind, let\u2019s learn about lifetimes.\n # Lifetimes\n \n Lending out a reference to a resource that someone else owns can be\n-complicated, however. For example, imagine this set of operations:\n+complicated. For example, imagine this set of operations:\n \n - I acquire a handle to some kind of resource.\n - I lend you a reference to the resource."}, {"sha": "2dabfa917fbd0a283da9e8dd68e743aa6261e218", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "patch": "@@ -108,7 +108,7 @@ println!(\"v[0] is: {}\", v[0]);\n \n Same error: \u201cuse of moved value.\u201d When we transfer ownership to something else,\n we say that we\u2019ve \u2018moved\u2019 the thing we refer to. You don\u2019t need some sort of\n-special annotation here, it\u2019s the default thing that Rust does.\n+special annotation here; it\u2019s the default thing that Rust does.\n \n ## The details\n "}, {"sha": "fc307413c5effb1beaaedfd44f713a9082cfcad7", "filename": "src/doc/trpl/primitive-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/a22b3270b8dd0c2d23cb420b07ad1feb9691db2d/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fprimitive-types.md?ref=a22b3270b8dd0c2d23cb420b07ad1feb9691db2d", "patch": "@@ -82,7 +82,7 @@ Let\u2019s go over them by category:\n Integer types come in two varieties: signed and unsigned. To understand the\n difference, let\u2019s consider a number with four bits of size. A signed, four-bit\n number would let you store numbers from `-8` to `+7`. Signed numbers use\n-\u201ctwo\u2019s compliment representation\u201d. An unsigned four bit number, since it does\n+\u201ctwo\u2019s complement representation\u201d. An unsigned four bit number, since it does\n not need to store negatives, can store values from `0` to `+15`.\n \n Unsigned types use a `u` for their category, and signed types use `i`. The `i`"}]}