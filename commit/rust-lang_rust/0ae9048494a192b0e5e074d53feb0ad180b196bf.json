{"sha": "0ae9048494a192b0e5e074d53feb0ad180b196bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZTkwNDg0OTRhMTkyYjBlNWUwNzRkNTNmZWIwYWQxODBiMTk2YmY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-18T15:29:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-18T15:29:53Z"}, "message": "Rollup merge of #62764 - fakenine:normalize_use_of_backticks_compiler_messages_p7, r=alexreg\n\nnormalize use of backticks in compiler messages for librustc/lint\n\nhttps://github.com/rust-lang/rust/issues/60532", "tree": {"sha": "59f0e47e9096405e22cfb863c20ad6eabbd75de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f0e47e9096405e22cfb863c20ad6eabbd75de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ae9048494a192b0e5e074d53feb0ad180b196bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdMJByCRBK7hj4Ov3rIwAAdHIIAEIr6e0LtNb9XbM9JJdIWygL\nRX5qR3wtQQSBuOBWp3KOFBJ8Q6z9iU4W9aMo5EjTrqgn+sP1qqcsJFi7mqsYIFIi\nlkAhzpf6O4T1/irFQ06ofKeqmwdZlC00GBPOzu35L0z+/mpzLDtZyhoIm8ZY2xAr\n3OSIQvyEyMT386D2q7IefnrEkpURgtNl6TyHlWufbzMdJCK/FqICvDY81UmGakt/\nCWJaYFHSiZQNwCfajLzh7/m4VMQ3i2c6ndDqLX488aKuyN9bQizZyYEPdomrhPJ8\n2jJKGA7Kszmdfno8D3h3iq9WmXGrzqhVqP2L/me+J01hW+L5OkmaPha1S2SeeHw=\n=BDzV\n-----END PGP SIGNATURE-----\n", "payload": "tree 59f0e47e9096405e22cfb863c20ad6eabbd75de2\nparent c4977ef217d37e257504469d9d5782821fb34af3\nparent e5e1397adb755761393bc8e23671d0259a381d16\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563463793 -0400\ncommitter GitHub <noreply@github.com> 1563463793 -0400\n\nRollup merge of #62764 - fakenine:normalize_use_of_backticks_compiler_messages_p7, r=alexreg\n\nnormalize use of backticks in compiler messages for librustc/lint\n\nhttps://github.com/rust-lang/rust/issues/60532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae9048494a192b0e5e074d53feb0ad180b196bf", "html_url": "https://github.com/rust-lang/rust/commit/0ae9048494a192b0e5e074d53feb0ad180b196bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ae9048494a192b0e5e074d53feb0ad180b196bf/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4977ef217d37e257504469d9d5782821fb34af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4977ef217d37e257504469d9d5782821fb34af3", "html_url": "https://github.com/rust-lang/rust/commit/c4977ef217d37e257504469d9d5782821fb34af3"}, {"sha": "e5e1397adb755761393bc8e23671d0259a381d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e1397adb755761393bc8e23671d0259a381d16", "html_url": "https://github.com/rust-lang/rust/commit/e5e1397adb755761393bc8e23671d0259a381d16"}], "stats": {"total": 354, "additions": 177, "deletions": 177}, "files": [{"sha": "3b66b07c2f4ae4c2cd6e03b71df72d23aecdf885", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -94,19 +94,19 @@ declare_lint! {\n declare_lint! {\n     pub UNUSED_FEATURES,\n     Warn,\n-    \"unused features found in crate-level #[feature] directives\"\n+    \"unused features found in crate-level `#[feature]` directives\"\n }\n \n declare_lint! {\n     pub STABLE_FEATURES,\n     Warn,\n-    \"stable features found in #[feature] directive\"\n+    \"stable features found in `#[feature]` directive\"\n }\n \n declare_lint! {\n     pub UNKNOWN_CRATE_TYPES,\n     Deny,\n-    \"unknown crate type found in #[crate_type] directive\"\n+    \"unknown crate type found in `#[crate_type]` directive\"\n }\n \n declare_lint! {"}, {"sha": "3683a3759948b664fd185c519766eb5e3620497d", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -671,7 +671,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             sess.diag_note_once(\n                 &mut err,\n                 DiagnosticMessageId::from(lint),\n-                &format!(\"#[{}({})] on by default\", level.as_str(), name));\n+                &format!(\"`#[{}({})]` on by default\", level.as_str(), name));\n         }\n         LintSource::CommandLine(lint_flag_val) => {\n             let flag = match level {\n@@ -706,7 +706,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n                 sess.diag_note_once(&mut err, DiagnosticMessageId::from(lint),\n-                                    &format!(\"#[{}({})] implied by #[{}({})]\",\n+                                    &format!(\"`#[{}({})]` implied by `#[{}({})]`\",\n                                              level_str, name, level_str, lint_attr_name));\n             }\n         }"}, {"sha": "f90eb933d3fd8a7fbf1259ffab9e41104f9997be", "filename": "src/test/run-pass/extern/extern-prelude-core.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-core.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer\n LL | #![feature(extern_prelude, lang_items, start)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(stable_features)] on by default\n+   = note: `#[warn(stable_features)]` on by default\n "}, {"sha": "73b1dcfd5e1b830b0847722e16746a36b8681b72", "filename": "src/test/run-pass/extern/extern-prelude-std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-std.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer\n LL | #![feature(extern_prelude)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(stable_features)] on by default\n+   = note: `#[warn(stable_features)]` on by default\n "}, {"sha": "7c02f835685e1d15c552778e01e6cbd6b55f1a72", "filename": "src/test/run-pass/if-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-ret.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: unreachable block in `if` expression\n LL | fn foo() { if (return) { } }\n    |                        ^^^\n    |\n-   = note: #[warn(unreachable_code)] on by default\n+   = note: `#[warn(unreachable_code)]` on by default\n "}, {"sha": "ce12a539541f137a0d89db69b539e4f2fa7d89d5", "filename": "src/test/run-pass/macros/macro-use-all-and-none.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-use-all-and-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-use-all-and-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-use-all-and-none.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: unused attribute\n LL | #[macro_use()]\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(unused_attributes)] on by default\n+   = note: `#[warn(unused_attributes)]` on by default\n "}, {"sha": "12f799f6e472c8a46fbb9e1750fd9ecc37c5ba72", "filename": "src/test/run-pass/rfcs/rfc-2126-crate-paths/crate-path-absolute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-absolute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-absolute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-absolute.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: the feature `crate_in_paths` has been stable since 1.30.0 and no longer\n LL | #![feature(crate_in_paths)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(stable_features)] on by default\n+   = note: `#[warn(stable_features)]` on by default\n "}, {"sha": "23a0e544554547089d8cbe32364db2ab62e48dc2", "filename": "src/test/run-pass/rfcs/rfc-2126-crate-paths/crate-path-visibility-ambiguity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: the feature `crate_in_paths` has been stable since 1.30.0 and no longer\n LL | #![feature(crate_in_paths)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(stable_features)] on by default\n+   = note: `#[warn(stable_features)]` on by default\n "}, {"sha": "720f2106e3dc282ee1f3159d2372d575322c2aca", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: `[error]` cannot be resolved, ignoring it...\n LL | /// [error]\n    |      ^^^^^ cannot be resolved, ignoring\n    |\n-   = note: #[warn(intra_doc_link_resolution_failure)] on by default\n+   = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n    = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[error1]` cannot be resolved, ignoring it..."}, {"sha": "dac564b304143356724fc06a0806cc2b7505c5dd", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: `[Foo::baz]` cannot be resolved, ignoring it...\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                       ^^^^^^^^ cannot be resolved, ignoring\n    |\n-   = note: #[warn(intra_doc_link_resolution_failure)] on by default\n+   = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n    = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n warning: `[Bar::foo]` cannot be resolved, ignoring it..."}, {"sha": "cd523b227deb18d24c067e84efca35ab82bc6f55", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -13,7 +13,7 @@ note: lint level defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: #[deny(private_doc_tests)] implied by #[deny(rustdoc)]\n+   = note: `#[deny(private_doc_tests)]` implied by `#[deny(rustdoc)]`\n \n error: `[error]` cannot be resolved, ignoring it...\n   --> $DIR/lint-group.rs:9:29\n@@ -26,7 +26,7 @@ note: lint level defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: #[deny(intra_doc_link_resolution_failure)] implied by #[deny(rustdoc)]\n+   = note: `#[deny(intra_doc_link_resolution_failure)]` implied by `#[deny(rustdoc)]`\n    = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n error: Missing code example in this documentation\n@@ -40,7 +40,7 @@ note: lint level defined here\n    |\n LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n-   = note: #[deny(missing_doc_code_examples)] implied by #[deny(rustdoc)]\n+   = note: `#[deny(missing_doc_code_examples)]` implied by `#[deny(rustdoc)]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "efaf82d9be1652767e2dc5528b3e2201fd5071f5", "filename": "src/test/ui-fulldeps/deprecated-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: use of deprecated item 'Encodable': derive(Encodable) is deprecated in\n LL | #[derive(Encodable)]\n    |          ^^^^^^^^^\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "1af34b306e3a3295faaf7176b0c7d9cf240fe7cc", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,13 +4,13 @@ warning: item is named 'lintme'\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(test_lint)] on by default\n+   = note: `#[warn(test_lint)]` on by default\n \n warning: item is named 'pleaselintme'\n   --> $DIR/lint-group-plugin.rs:10:1\n    |\n LL | fn pleaselintme() { }\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(please_lint)] on by default\n+   = note: `#[warn(please_lint)]` on by default\n "}, {"sha": "c731796d4824d20276863ac65f95a7792a34a87f", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,5 +9,5 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(dead_code)] implied by #[warn(unused)]\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n "}, {"sha": "5a6b35433ac98cc2d40b35958bb4d6055df084ad", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: item is named 'lintme'\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(test_lint)] on by default\n+   = note: `#[warn(test_lint)]` on by default\n "}, {"sha": "beea00ba453673e94eb9ab0c1a0a234ead94bc98", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: item is named 'lintme'\n LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(test_lint)] on by default\n+   = note: `#[warn(test_lint)]` on by default\n "}, {"sha": "b4919bc339d28cd64ef334f16853e822802be17c", "filename": "src/test/ui-fulldeps/lint-tool-cmdline-allow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -8,7 +8,7 @@ warning: item is named 'lintme'\n LL | fn lintme() {}\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(clippy::test_lint)] on by default\n+   = note: `#[warn(clippy::test_lint)]` on by default\n \n warning: function is never used: `lintme`\n   --> $DIR/lint-tool-cmdline-allow.rs:10:1\n@@ -21,5 +21,5 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(dead_code)] implied by #[warn(unused)]\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n "}, {"sha": "16fe6f6613b3f369b68748609d49f8f07ce5e189", "filename": "src/test/ui-fulldeps/lint-tool-test.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: lint name `test_lint` is deprecated and may not have an effect in the f\n LL | #![cfg_attr(foo, warn(test_lint))]\n    |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n    |\n-   = note: #[warn(renamed_and_removed_lints)] on by default\n+   = note: `#[warn(renamed_and_removed_lints)]` on by default\n \n warning: lint name `clippy_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n   --> $DIR/lint-tool-test.rs:11:9\n@@ -24,7 +24,7 @@ warning: unknown lint: `this_lint_does_not_exist`\n LL | #[deny(this_lint_does_not_exist)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(unknown_lints)] on by default\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: lint name `test_lint` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n   --> $DIR/lint-tool-test.rs:8:23\n@@ -43,7 +43,7 @@ note: lint level defined here\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^\n-   = note: #[deny(clippy::test_lint)] implied by #[deny(clippy::group)]\n+   = note: `#[deny(clippy::test_lint)]` implied by `#[deny(clippy::group)]`\n \n error: item is named 'lintmetoo'\n   --> $DIR/lint-tool-test.rs:22:5\n@@ -56,7 +56,7 @@ note: lint level defined here\n    |\n LL | #![deny(clippy_group)]\n    |         ^^^^^^^^^^^^\n-   = note: #[deny(clippy::test_group)] implied by #[deny(clippy::group)]\n+   = note: `#[deny(clippy::test_group)]` implied by `#[deny(clippy::group)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "16ebc4a5775a05fcf82687c89e73e44ea62fdb92", "filename": "src/test/ui/array_const_index-0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const B: i32 = (&A)[1];\n    |                |\n    |                index out of bounds: the len is 0 but the index is 1\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "98a64eaadcf5745a1941d9fc5109beb8f23f9027", "filename": "src/test/ui/array_const_index-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const B: i32 = A[1];\n    |                |\n    |                index out of bounds: the len is 0 but the index is 1\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "a3fa97f54e385c863f343916923008ee74da54ee", "filename": "src/test/ui/associated-type-bounds/type-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: where clauses are not enforced in type aliases\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(type_alias_bounds)] on by default\n+   = note: `#[warn(type_alias_bounds)]` on by default\n    = help: the clause will not be checked when the type alias is used, and should be removed\n \n warning: where clauses are not enforced in type aliases"}, {"sha": "75e257893fa80a3279d2c4c24b3ccdbeea39311d", "filename": "src/test/ui/bad/bad-lint-cap2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[deny(unused_imports)] implied by #[deny(warnings)]\n+   = note: `#[deny(unused_imports)]` implied by `#[deny(warnings)]`\n \n error: aborting due to previous error\n "}, {"sha": "96b40c98c0ed8900c30982207fb09aa3954c3dfa", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,5 +9,5 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[warn(unused_imports)] implied by #[warn(warnings)]\n+   = note: `#[warn(unused_imports)]` implied by `#[warn(warnings)]`\n "}, {"sha": "44f62875ef1c4071ab119122418d84cc1c5e39ef", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: denote infinite loops with `loop { ... }`\n LL |     while true {\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9"}, {"sha": "daee1a0d5cff99ce846aae3b704b0851ddd1a1ac", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: denote infinite loops with `loop { ... }`\n LL |         while true {\n    |         ^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:10:25"}, {"sha": "565e433f77361977ead9ac480359b0b321ce018a", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -31,7 +31,7 @@ LL |     v.push(shared.len());\n    |     |\n    |     mutable borrow occurs here\n    |\n-   = note: #[warn(mutable_borrow_reservation_conflict)] on by default\n+   = note: `#[warn(mutable_borrow_reservation_conflict)]` on by default\n    = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n    = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n "}, {"sha": "565e433f77361977ead9ac480359b0b321ce018a", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -31,7 +31,7 @@ LL |     v.push(shared.len());\n    |     |\n    |     mutable borrow occurs here\n    |\n-   = note: #[warn(mutable_borrow_reservation_conflict)] on by default\n+   = note: `#[warn(mutable_borrow_reservation_conflict)]` on by default\n    = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n    = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n "}, {"sha": "cc1a80bc07456d7f34254484570f0884778f74fb", "filename": "src/test/ui/codemap_tests/unicode_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: denote infinite loops with `loop { ... }`\n LL |     let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n    |                       ^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n "}, {"sha": "046defd5561aeb613592f1667baf0027079e4218", "filename": "src/test/ui/conditional-compilation/cfg-attr-empty-is-unused.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n-   = note: #[deny(unused_attributes)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_attributes)]` implied by `#[deny(unused)]`\n \n error: unused attribute\n   --> $DIR/cfg-attr-empty-is-unused.rs:10:1"}, {"sha": "f55671f6bba81edb7bea25a258776f391335b0a8", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: use of deprecated item 'MustUseDeprecated'\n LL | impl MustUseDeprecated {\n    |      ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated item 'MustUseDeprecated'\n   --> $DIR/cfg-attr-multi-true.rs:19:5"}, {"sha": "18a09fdda7be4ca740d5929cb9ba62c7fba56814", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: index out of bounds: the len is 3 but the index is 4\n LL |     &{[1, 2, 3][4]};\n    |       ^^^^^^^^^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: this expression will panic at runtime\n   --> $DIR/array-literal-index-oob.rs:2:5"}, {"sha": "73aca911531f1277a709c4608df668f6c8edf6b2", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -14,7 +14,7 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:30:45"}, {"sha": "8a51d8aa882f83ba2d7aef7fa4e79966b26a69fc", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | pub const Z: () = panic!(\"cheese\");\n    |                   |\n    |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:19\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error"}, {"sha": "e76446f1015baa24ae770d9baffb9dccfab62254", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:5:15\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error"}, {"sha": "22d173ad0c7bfe0ecc7afb85a6d9b10021cae242", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:9:15\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: any use of this value will cause an error"}, {"sha": "a12575b3975b6145a965a16f473e74401cf5f6aa", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n    |                          |\n    |                          \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:12:28"}, {"sha": "f330f9caaa2f774564506a2fb5fe82042595f0e1", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: index out of bounds: the len is 1 but the index is 1\n LL |     array[1];\n    |     ^^^^^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "7a4bba8daa70b5a4a09ac5a818c0afd4ebb4a4c6", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const X: u64 = *wat(42);\n    |                |\n    |                dangling pointer was dereferenced\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "d68f72d36e2f73c5fd92f85c1e854b53ff2f43c6", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |                        |\n    |                        index out of bounds: the len is 3 but the index is 42\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-50814-2.rs:16:5"}, {"sha": "707dfee7cd5b89c96b2128a858a80a5ebf91ef64", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    |                     |\n    |                     attempt to add with overflow\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-50814.rs:17:5"}, {"sha": "a13cb877888bd01e50b86d0641e224db0544477a", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const FOO: i32 = [][0];\n    |                  |\n    |                  index out of bounds: the len is 0 but the index is 0\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "bf338e40107f875a12db27c97df16c98367d0a19", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n    |                             |\n    |                             Overflowing shift by 8 in unchecked_shl\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:16:31"}, {"sha": "150d3eb525d5ebebf9aacdf6dde28f92b9f8c8de", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const LEN: usize = ONE - TWO;\n    |                    |\n    |                    attempt to subtract with overflow\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-separate-spans.rs:11:17"}, {"sha": "4b3880198bf2ddcc938fd39146a06571fdb72170", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: index out of bounds: the len is 3 but the index is 3\n LL |     [0; 3][3u64 as usize];\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "dc17876eae4e825424559aede44a041aeabba603", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: index out of bounds: the len is 1 but the index is 1\n LL |     println!(\"{}\", xs[Enum::One as usize]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "7e191a6336144e92fe37c2bbc6baa786844f574e", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const BAR: u32 = FOO[5];\n    |                  |\n    |                  index out of bounds: the len is 3 but the index is 5\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "bac9f555d271bdd4c2ace1c970aa1c506f0a6754", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -7,7 +7,7 @@ LL | |     unsafe { Foo { y: &y }.long_live_the_unit }\n LL | | };\n    | |__^ type validation failed: encountered dangling pointer in final constant\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "4748be37dffcfe2332ee771522dfff66ba9155b2", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -7,7 +7,7 @@ LL | |     &x\n LL | | };\n    | |__^ type validation failed: encountered dangling pointer in final constant\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "e317bdf103c3656132fc81baec7fb8e53df22686", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -11,7 +11,7 @@ LL |     fake_type()\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n    |     ---------------------------------------------\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error[E0080]: erroneous constant used\n   --> $DIR/uninhabited-const-issue-61744.rs:18:10"}, {"sha": "16db00b6e853a6bc3da11fb39edb963994c58f5a", "filename": "src/test/ui/deprecation/atomic_initializers.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: use of deprecated item 'std::sync::atomic::ATOMIC_ISIZE_INIT': the `new\n LL | static FOO: AtomicIsize = ATOMIC_ISIZE_INIT;\n    |                           ^^^^^^^^^^^^^^^^^ help: replace the use of the deprecated item: `AtomicIsize::new(0)`\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "4268680e9d9e05811d25a3a6001634e42f3e4a8f", "filename": "src/test/ui/deprecation/deprecation-in-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: use of deprecated item 'deprecated_future': text\n LL |     deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "b5d3670b5f39ea5bc6904c21f7b45072bff2dd89", "filename": "src/test/ui/derives/deriving-meta-empty-trait-list.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n-   = note: #[deny(unused_attributes)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_attributes)]` implied by `#[deny(unused)]`\n \n error: aborting due to previous error\n "}, {"sha": "947ea6c24a3458a3ed91639bde7863cb010c259a", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -16,7 +16,7 @@ LL |\n LL |         (&mut self).bar();\n    |         ----------------- recursive call site\n    |\n-   = note: #[warn(unconditional_recursion)] on by default\n+   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable"}, {"sha": "45b46794be2040ed89b9630e7f0aa79b12da59a7", "filename": "src/test/ui/editions/edition-extern-crate-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-extern-crate-allowed.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,5 +9,5 @@ note: lint level defined here\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n+   = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n "}, {"sha": "6a8861ba67bb95399654ed11eb2ffb5bc67498c3", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n-   = note: #[deny(tyvar_behind_raw_pointer)] implied by #[deny(warnings)]\n+   = note: `#[deny(tyvar_behind_raw_pointer)]` implied by `#[deny(warnings)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n "}, {"sha": "7222f87da248f32732f3b206a2c103b43b545751", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    |                            |\n    |                            a memory access tried to interpret some bytes as a pointer\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "f987cb97d1a4b6b7c1cd06850fcdfc1361dfb196", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -192,7 +192,7 @@ warning: the feature `rust1` has been stable since 1.0.0 and no longer requires\n LL | #![feature(rust1)]\n    |            ^^^^^\n    |\n-   = note: #[warn(stable_features)] on by default\n+   = note: `#[warn(stable_features)]` on by default\n \n warning: unused attribute\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:180:5"}, {"sha": "4310a0c7d588eae1965972c9ff7a7b22efaa0038", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n LL |     #[inline = \"2100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(ill_formed_attribute_input)] on by default\n+   = note: `#[warn(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n "}, {"sha": "f13803b80f30818307f183cdb62757cc943c2f80", "filename": "src/test/ui/feature-gates/feature-gate-default_type_parameter_fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-default_type_parameter_fallback.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: defaults for type parameters are only allowed in `struct`, `enum`, `type`\n LL | fn avg<T=i32>(_: T) {}\n    |        ^\n    |\n-   = note: #[deny(invalid_type_param_default)] on by default\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n "}, {"sha": "24e3a077ae6e3a3d61c764a1f9272b602f388911", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(future_incompatible)]\n    |         ^^^^^^^^^^^^^^^^^^^\n-   = note: #[deny(anonymous_parameters)] implied by #[deny(future_incompatible)]\n+   = note: `#[deny(anonymous_parameters)]` implied by `#[deny(future_incompatible)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n "}, {"sha": "6d1ef24b2dccd320844f7192979c784f4915449b", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -11,7 +11,7 @@ LL | |     no_hrtb(&mut t);\n LL | | }\n    | |_^ cannot return without recursing\n    |\n-   = note: #[warn(unconditional_recursion)] on by default\n+   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n warning: function cannot return without recursing"}, {"sha": "cd40df16ba7d1329ba16d4c1a528fb9dd4c51658", "filename": "src/test/ui/hygiene/dollar-crate-modern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: the feature `crate_in_paths` has been stable since 1.30.0 and no longer\n LL | #![feature(decl_macro, crate_in_paths)]\n    |                        ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(stable_features)] on by default\n+   = note: `#[warn(stable_features)]` on by default\n "}, {"sha": "f105098b74cf2e76f9d7ef1ba96eb41e99dc7049", "filename": "src/test/ui/if/if-let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n    |\n-   = note: #[warn(irrefutable_let_patterns)] on by default\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: irrefutable if-let pattern\n   --> $DIR/if-let.rs:6:13"}, {"sha": "5272d2a319faa16d1d5533832d065eeb441453d4", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: macro-expanded `macro_export` macros from the current crate cannot be ref\n LL |     use exported;\n    |         ^^^^^^^^\n    |\n-   = note: #[deny(macro_expanded_macro_exports_accessed_by_absolute_paths)] on by default\n+   = note: `#[deny(macro_expanded_macro_exports_accessed_by_absolute_paths)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #52234 <https://github.com/rust-lang/rust/issues/52234>\n note: the macro is defined here"}, {"sha": "b7fb532c67ccefc95622271d69cb0a5106fca5e1", "filename": "src/test/ui/imports/unused-macro-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fimports%2Funused-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fimports%2Funused-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused-macro-use.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n-   = note: #[deny(unused_imports)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_imports)]` implied by `#[deny(unused)]`\n \n error: unused `#[macro_use]` import\n   --> $DIR/unused-macro-use.rs:7:5"}, {"sha": "0366b52ef6a5aed7a2d3fb55152a0138aa93b439", "filename": "src/test/ui/imports/unused.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fimports%2Funused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fimports%2Funused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n-   = note: #[deny(unused_imports)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_imports)]` implied by `#[deny(unused)]`\n \n error: aborting due to previous error\n "}, {"sha": "b5b885e233fe0cb08475f454a0552df4a36b3143", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: type annotations needed\n LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n-   = note: #[warn(tyvar_behind_raw_pointer)] on by default\n+   = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n "}, {"sha": "1f5cc8b13fb464fdfff1cbbbb1ca3d263179191f", "filename": "src/test/ui/inference/inference_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: a method with this name may be added to the standard library in the fut\n LL |     assert_eq!('x'.ipu_flatten(), 1);\n    |                    ^^^^^^^^^^^\n    |\n-   = note: #[warn(unstable_name_collisions)] on by default\n+   = note: `#[warn(unstable_name_collisions)]` on by default\n    = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method"}, {"sha": "59d5d7bc9bbf0c7381356400e92510e80bd60a7f", "filename": "src/test/ui/invalid/invalid-crate-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-crate-type.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: invalid `crate_type` value\n LL | #![crate_type=\"foo\"]\n    |               ^^^^^\n    |\n-   = note: #[deny(unknown_crate_types)] on by default\n+   = note: `#[deny(unknown_crate_types)]` on by default\n \n error: invalid `crate_type` value\n   --> $DIR/invalid-crate-type.rs:6:15"}, {"sha": "f3686e82b05a4885049d2e7d45871e4681f4c9d3", "filename": "src/test/ui/issues/issue-16250.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16250.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[deny(improper_ctypes)] implied by #[deny(warnings)]\n+   = note: `#[deny(improper_ctypes)]` implied by `#[deny(warnings)]`\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n note: type defined here\n   --> $DIR/issue-16250.rs:3:1"}, {"sha": "1fe1821292c08a18ca97fba4f2fb31e82ef1adee", "filename": "src/test/ui/issues/issue-17718-const-naming.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-naming.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[deny(dead_code)] implied by #[deny(warnings)]\n+   = note: `#[deny(dead_code)]` implied by `#[deny(warnings)]`\n \n error: constant `foo` should have an upper case name\n   --> $DIR/issue-17718-const-naming.rs:4:7\n@@ -22,7 +22,7 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[deny(non_upper_case_globals)] implied by #[deny(warnings)]\n+   = note: `#[deny(non_upper_case_globals)]` implied by `#[deny(warnings)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4beb752854b9c386687900c028ae7ce3a928924a", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | |\n LL | |         while true { break }; // but here we cite the whole loop\n    | |____________________________^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:6:16"}, {"sha": "6fc8b810745aa440563e0a3934e1d96fe8d0a661", "filename": "src/test/ui/issues/issue-30079.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-30079.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-30079.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30079.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: private type `m1::Priv` in public interface (error E0446)\n LL |         pub fn f(_: Priv) {}\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(private_in_public)] on by default\n+   = note: `#[warn(private_in_public)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n "}, {"sha": "fcbab77b0073bb2144bdc6733a64e89ccedfe8ba", "filename": "src/test/ui/issues/issue-30730.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30730.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[deny(unused_imports)] implied by #[deny(warnings)]\n+   = note: `#[deny(unused_imports)]` implied by `#[deny(warnings)]`\n \n error: aborting due to previous error\n "}, {"sha": "4a580b09bf37275342fe5ef5cb9bbaa10c27f0b3", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: parenthesized type parameters may only be used with a `Fn` trait\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n    |                            ^^\n    |\n-   = note: #[deny(parenthesized_params_in_types_and_modules)] on by default\n+   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n "}, {"sha": "59d93ece067428b879e08a44b0e0b39577ea080f", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: parenthesized type parameters may only be used with a `Fn` trait\n LL |     let x: usize() = 1;\n    |                 ^^\n    |\n-   = note: #[deny(parenthesized_params_in_types_and_modules)] on by default\n+   = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n "}, {"sha": "f084095969847558dbe33a7ef558af9216dd860a", "filename": "src/test/ui/issues/issue-37515.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37515.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,5 +9,5 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(dead_code)] implied by #[warn(unused)]\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n "}, {"sha": "02b96d2d2449c5fb93def086f08f00e84bbd1638", "filename": "src/test/ui/issues/issue-38715.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38715.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: a macro named `foo` has already been exported\n LL | macro_rules! foo { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `foo` already exported\n    |\n-   = note: #[deny(duplicate_macro_exports)] on by default\n+   = note: `#[deny(duplicate_macro_exports)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #35896 <https://github.com/rust-lang/rust/issues/35896>\n note: previous macro export is now shadowed"}, {"sha": "d2f2a823c2a6b47af00eb8b0d3aed999abb2831a", "filename": "src/test/ui/issues/issue-39404.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-39404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-39404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39404.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: missing fragment specifier\n LL | macro_rules! m { ($i) => {} }\n    |                   ^^\n    |\n-   = note: #[deny(missing_fragment_specifier)] on by default\n+   = note: `#[deny(missing_fragment_specifier)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #40107 <https://github.com/rust-lang/rust/issues/40107>\n "}, {"sha": "e3609c57dcec524a1a7313f4546abdd87a795f96", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -12,7 +12,7 @@ LL | const NUM: u8 = xyz();\n    |                 |\n    |                 calling non-const function `xyz`\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: could not evaluate constant pattern\n   --> $DIR/issue-43105.rs:9:9"}, {"sha": "e6e33aa85c375608b8a6ce2641b89f43de7ab94c", "filename": "src/test/ui/issues/issue-45562.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | #[no_mangle] pub const RAH: usize = 5;\n    |              |\n    |              help: try a static value: `pub static`\n    |\n-   = note: #[deny(no_mangle_const_items)] on by default\n+   = note: `#[deny(no_mangle_const_items)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "fa77bd6fd77973777265f9315d26ac86907eb4fc", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: index out of bounds: the len is 1 but the index is 1\n LL |     [1][1.5 as usize];\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: index out of bounds: the len is 1 but the index is 1\n   --> $DIR/issue-54348.rs:4:5"}, {"sha": "da0ae1541bb8f269357a9a4d3ebd63b6b2938774", "filename": "src/test/ui/issues/issue-60622.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -12,7 +12,7 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[deny(late_bound_lifetime_arguments)] implied by #[deny(warnings)]\n+   = note: `#[deny(late_bound_lifetime_arguments)]` implied by `#[deny(warnings)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n "}, {"sha": "df01f42ce26a79a4a584e99f4100f01c52ff92d3", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -6,7 +6,7 @@ LL | fn generic<T>() {\n LL |     generic::<Option<T>>();\n    |     ---------------------- recursive call site\n    |\n-   = note: #[warn(unconditional_recursion)] on by default\n+   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n error: reached the recursion limit while instantiating `generic::<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<i32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`"}, {"sha": "7f59495023e260ad5f1ddf444b2f457e5fb174b2", "filename": "src/test/ui/lint/deny-overflowing-literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdeny-overflowing-literals.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: literal out of range for `u8`\n LL |     let x: u8 = 256;\n    |                 ^^^\n    |\n-   = note: #[deny(overflowing_literals)] on by default\n+   = note: `#[deny(overflowing_literals)]` on by default\n \n error: range endpoint is out of range for `u8`\n   --> $DIR/deny-overflowing-literals.rs:5:14"}, {"sha": "a0b34d220c8d930f1e44f94580f02a8d8b00086c", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    |         ^^^^^^\n-   = note: #[warn(unused_variables)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `mut_unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:13\n@@ -54,7 +54,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    |         ^^^^^^\n-   = note: #[warn(unused_assignments)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `fire`\n@@ -112,7 +112,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    |         ^^^^^^\n-   = note: #[warn(unused_mut)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_mut)]` implied by `#[warn(unused)]`\n \n warning: variable does not need to be mutable\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:35:10"}, {"sha": "817d9a46e83a65fb95e21f776670ff8af4ebe958", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -11,7 +11,7 @@ note: lint level defined here\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n-   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: unused variable: `x`\n   --> $DIR/issue-54180-unused-ref-field.rs:29:45"}, {"sha": "336cb7ea84f0c85ef67378001adc9022db073198", "filename": "src/test/ui/lint/lint-change-warnings.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-change-warnings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-change-warnings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-change-warnings.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,15 +9,15 @@ note: lint level defined here\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^\n-   = note: #[deny(while_true)] implied by #[deny(warnings)]\n+   = note: `#[deny(while_true)]` implied by `#[deny(warnings)]`\n \n warning: denote infinite loops with `loop { ... }`\n   --> $DIR/lint-change-warnings.rs:15:5\n    |\n LL |     while true {}\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n error: denote infinite loops with `loop { ... }`\n   --> $DIR/lint-change-warnings.rs:20:5\n@@ -30,7 +30,7 @@ note: lint level defined here\n    |\n LL | #[forbid(warnings)]\n    |          ^^^^^^^^\n-   = note: #[forbid(while_true)] implied by #[forbid(warnings)]\n+   = note: `#[forbid(while_true)]` implied by `#[forbid(warnings)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1cc973d32c2d3c88d016e2e0dff9490a8255c8e2", "filename": "src/test/ui/lint/lint-group-nonstandard-style.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL |         #![warn(nonstandard_style)]\n    |                 ^^^^^^^^^^^^^^^^^\n-   = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n+   = note: `#[warn(non_camel_case_types)]` implied by `#[warn(nonstandard_style)]`\n \n error: function `CamelCase` should have a snake case name\n   --> $DIR/lint-group-nonstandard-style.rs:4:4\n@@ -22,7 +22,7 @@ note: lint level defined here\n    |\n LL | #![deny(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: #[deny(non_snake_case)] implied by #[deny(nonstandard_style)]\n+   = note: `#[deny(non_snake_case)]` implied by `#[deny(nonstandard_style)]`\n \n error: function `CamelCase` should have a snake case name\n   --> $DIR/lint-group-nonstandard-style.rs:12:12\n@@ -35,7 +35,7 @@ note: lint level defined here\n    |\n LL |     #[forbid(nonstandard_style)]\n    |              ^^^^^^^^^^^^^^^^^\n-   = note: #[forbid(non_snake_case)] implied by #[forbid(nonstandard_style)]\n+   = note: `#[forbid(non_snake_case)]` implied by `#[forbid(nonstandard_style)]`\n \n error: static variable `bad` should have an upper case name\n   --> $DIR/lint-group-nonstandard-style.rs:14:16\n@@ -48,7 +48,7 @@ note: lint level defined here\n    |\n LL |     #[forbid(nonstandard_style)]\n    |              ^^^^^^^^^^^^^^^^^\n-   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(nonstandard_style)]\n+   = note: `#[forbid(non_upper_case_globals)]` implied by `#[forbid(nonstandard_style)]`\n \n warning: function `CamelCase` should have a snake case name\n   --> $DIR/lint-group-nonstandard-style.rs:20:12\n@@ -61,7 +61,7 @@ note: lint level defined here\n    |\n LL |         #![warn(nonstandard_style)]\n    |                 ^^^^^^^^^^^^^^^^^\n-   = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n+   = note: `#[warn(non_snake_case)]` implied by `#[warn(nonstandard_style)]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5308bba440e06c07daac92dd0ff795c22adaba07", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | impl Foo for dyn Send + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n    |\n-   = note: #[deny(order_dependent_trait_objects)] on by default\n+   = note: `#[deny(order_dependent_trait_objects)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n "}, {"sha": "fcaf01488ab24f1c0bc83e64c82188fbaa7d61dc", "filename": "src/test/ui/lint/lint-output-format-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-output-format-2.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: use of deprecated item 'lint_output_format::foo': text\n LL | use lint_output_format::{foo, bar};\n    |                          ^^^\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated item 'lint_output_format::foo': text\n   --> $DIR/lint-output-format-2.rs:12:14"}, {"sha": "69b0d2675c22d663991b6012ca1f203943ea5b43", "filename": "src/test/ui/lint/lint-removed-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -13,7 +13,7 @@ note: lint level defined here\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n-   = note: #[deny(unused_variables)] implied by #[deny(warnings)]\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(warnings)]`\n \n error: aborting due to previous error\n "}, {"sha": "060ba31bced9ac3969db2bdb50e9b547dfc64d4c", "filename": "src/test/ui/lint/lint-removed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: lint `raw_pointer_derive` has been removed: `using derive with raw poin\n LL | #[deny(raw_pointer_derive)]\n    |        ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(renamed_and_removed_lints)] on by default\n+   = note: `#[warn(renamed_and_removed_lints)]` on by default\n \n error: unused variable: `unused`\n   --> $DIR/lint-removed.rs:8:17"}, {"sha": "1d984cb8287ff10d76c3e57a91fe617051bca209", "filename": "src/test/ui/lint/lint-renamed-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #[deny(unused)]\n    |        ^^^^^^\n-   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: aborting due to previous error\n "}, {"sha": "c978981a5c2ed0c879867b3935ddaa50b9224d8c", "filename": "src/test/ui/lint/lint-renamed-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -13,7 +13,7 @@ note: lint level defined here\n    |\n LL | #[deny(unused)]\n    |        ^^^^^^\n-   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: aborting due to previous error\n "}, {"sha": "ba8eadf23aca56cc98b1f8cd6ac9bfd469ee1bcf", "filename": "src/test/ui/lint/lint-renamed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: lint `bare_trait_object` has been renamed to `bare_trait_objects`\n LL | #[deny(bare_trait_object)]\n    |        ^^^^^^^^^^^^^^^^^ help: use the new name: `bare_trait_objects`\n    |\n-   = note: #[warn(renamed_and_removed_lints)] on by default\n+   = note: `#[warn(renamed_and_removed_lints)]` on by default\n \n error: unused variable: `unused`\n   --> $DIR/lint-renamed.rs:4:17\n@@ -17,7 +17,7 @@ note: lint level defined here\n    |\n LL | #[deny(unused)]\n    |        ^^^^^^\n-   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: aborting due to previous error\n "}, {"sha": "83b247a4a60534ef7b8bc4aca0a0349367735e19", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -40,7 +40,7 @@ warning: denote infinite loops with `loop { ... }`\n LL |     while (true) {}\n    |     ^^^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n error: unnecessary parentheses around `match` head expression\n   --> $DIR/lint-unnecessary-parens.rs:23:11"}, {"sha": "9ea3795f89e6ca3b0e93ff07880fe1e9f5e416cc", "filename": "src/test/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -15,7 +15,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unused_variables)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n error: structure field `X` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:10:5"}, {"sha": "70d49a4e69ca0c4c5ce2e3845d22f720d180904e", "filename": "src/test/ui/lint/not_found.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: unknown lint: `FOO_BAR`\n LL | #[allow(FOO_BAR)]\n    |         ^^^^^^^\n    |\n-   = note: #[warn(unknown_lints)] on by default\n+   = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `DEAD_CODE`\n   --> $DIR/not_found.rs:8:8"}, {"sha": "21c2ddd5ef7ce2c051980d174e88fe4a9d1ff0d6", "filename": "src/test/ui/lint/reasons-erroneous.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -23,6 +23,6 @@\n //~| NOTE reason in lint attribute must come last\n #![warn(missing_copy_implementations, reason)]\n //~^ WARN unknown lint\n-//~| NOTE #[warn(unknown_lints)] on by default\n+//~| NOTE `#[warn(unknown_lints)]` on by default\n \n fn main() {}"}, {"sha": "3f925f19ef18e7e9bf32cdde70de06173b65e057", "filename": "src/test/ui/lint/reasons-erroneous.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -46,7 +46,7 @@ warning: unknown lint: `reason`\n LL | #![warn(missing_copy_implementations, reason)]\n    |                                       ^^^^^^\n    |\n-   = note: #[warn(unknown_lints)] on by default\n+   = note: `#[warn(unknown_lints)]` on by default\n \n error: aborting due to 7 previous errors\n "}, {"sha": "cb5f4ddf47b6318e75f0459ef8179384d7e6e693", "filename": "src/test/ui/lint/reasons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -24,5 +24,5 @@ note: lint level defined here\n    |\n LL |     nonstandard_style,\n    |     ^^^^^^^^^^^^^^^^^\n-   = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n+   = note: `#[warn(non_snake_case)]` implied by `#[warn(nonstandard_style)]`\n "}, {"sha": "eb1e95dcdc52c375a6e1ffb918b9d9224836caea", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: denote infinite loops with `loop { ... }`\n LL |     while true {\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n warning: unnecessary parentheses around assigned value\n   --> $DIR/suggestions.rs:49:31\n@@ -24,7 +24,7 @@ warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was\n LL | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n \n warning: variable does not need to be mutable\n   --> $DIR/suggestions.rs:49:13\n@@ -60,7 +60,7 @@ LL | #[no_mangle] const DISCOVERY: usize = 1;\n    |              |\n    |              help: try a static value: `pub static`\n    |\n-   = note: #[deny(no_mangle_const_items)] on by default\n+   = note: `#[deny(no_mangle_const_items)]` on by default\n \n warning: functions generic over types or consts must be mangled\n   --> $DIR/suggestions.rs:12:1\n@@ -71,7 +71,7 @@ LL |\n LL | pub fn defiant<T>(_t: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(no_mangle_generic_items)] on by default\n+   = note: `#[warn(no_mangle_generic_items)]` on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n   --> $DIR/suggestions.rs:61:23\n@@ -81,7 +81,7 @@ LL |             Equinox { warp_factor: warp_factor } => {}\n    |                       |\n    |                       help: remove this\n    |\n-   = note: #[warn(non_shorthand_field_patterns)] on by default\n+   = note: `#[warn(non_shorthand_field_patterns)]` on by default\n \n error: const items should never be #[no_mangle]\n   --> $DIR/suggestions.rs:22:18"}, {"sha": "8350f2708eae0e03d539b7fdf4dc8f0c2c7cd66d", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: denote infinite loops with `loop { ... }`\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n    |         ^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n warning: denote infinite loops with `loop { ... }`\n   --> $DIR/liveness-move-in-while.rs:8:22"}, {"sha": "40a677c08f2b01e4922106a16b4c9a680a84da85", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unreachable_code)] implied by #[warn(unused)]\n+   = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:8:7"}, {"sha": "1e167905ec8d7e2f29377e020916724d8dd97066", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: denote infinite loops with `loop { ... }`\n LL |     'while_loop: while true {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n    |\n-   = note: #[warn(while_true)] on by default\n+   = note: `#[warn(while_true)]` on by default\n \n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:28:9"}, {"sha": "75915b9091006fd05b375026c746091e3d3733f2", "filename": "src/test/ui/macros/macro-deprecation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-deprecation.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: use of deprecated item 'local_deprecated': local deprecation note\n LL |     local_deprecated!();\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated item 'deprecated_macro': deprecation note\n   --> $DIR/macro-deprecation.rs:12:5"}, {"sha": "c6e7fd77cd91496cd9002ce57bf5aed9ec6f3d3f", "filename": "src/test/ui/macros/macro-path-prelude-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,5 +4,5 @@ warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer\n LL | #![feature(extern_prelude)]\n    |            ^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(stable_features)] on by default\n+   = note: `#[warn(stable_features)]` on by default\n "}, {"sha": "d357314d84c3e63030c0c0f6041463f1bd928b26", "filename": "src/test/ui/macros/macro-stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -28,7 +28,7 @@ warning: use of deprecated item 'deprecated_macro': deprecation reason\n LL |     deprecated_macro!();\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(deprecated)] on by default\n+   = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated item 'local_deprecated': local deprecation reason\n   --> $DIR/macro-stability.rs:26:5"}, {"sha": "eebb6f0623fbfaf795526080b18b3c3453fcd951", "filename": "src/test/ui/malformed/malformed-regressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: attribute must be of the form `#[doc(hidden|inline|...)]` or `#[doc = \"\n LL | #[doc]\n    | ^^^^^^\n    |\n-   = note: #[warn(ill_formed_attribute_input)] on by default\n+   = note: `#[warn(ill_formed_attribute_input)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n "}, {"sha": "d0ff4930a45195bfe84a189f78248e5195bc4e2c", "filename": "src/test/ui/match/match-range-fail-dominate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -34,7 +34,7 @@ warning: floating-point types cannot be used in patterns\n LL |       0.01f64 ..= 6.5f64 => {}\n    |       ^^^^^^^\n    |\n-   = note: #[warn(illegal_floating_point_literal_pattern)] on by default\n+   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n "}, {"sha": "779780a90a81d3a401d2f0f16599ffb7144c9ae5", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unreachable_code)] implied by #[warn(unused)]\n+   = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n \n warning: unreachable expression\n   --> $DIR/never-assign-dead-code.rs:10:5\n@@ -28,5 +28,5 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unused_variables)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n "}, {"sha": "7fa355eabb23021c23a2215e0ae06105be36545e", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |         (&mut self).bar();\n    |         ----------------- recursive call site\n    |\n-   = note: #[warn(unconditional_recursion)] on by default\n+   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable"}, {"sha": "03fb764ee03848cff840eb9b20c8768bcad0166d", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -16,7 +16,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Copy) + (?Sized) + (for<'a> Trait<'a>)`\n    |\n-   = note: #[warn(bare_trait_objects)] on by default\n+   = note: `#[warn(bare_trait_objects)]` on by default\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/trait-object-trait-parens.rs:9:16"}, {"sha": "197848e428a25cddebad5285cf07dfcbfd38ca40", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unused_parens)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_parens)]` implied by `#[warn(unused)]`\n \n warning: function is never used: `with_parens`\n   --> $DIR/path-lookahead.rs:7:1\n@@ -22,7 +22,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(dead_code)] implied by #[warn(unused)]\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n \n warning: function is never used: `no_parens`\n   --> $DIR/path-lookahead.rs:11:1"}, {"sha": "69b6e08befc67985bce241bfd641b5686b8f1be5", "filename": "src/test/ui/privacy/legacy-ctor-visibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: private struct constructors are not usable through re-exports in outer mo\n LL |             S(10);\n    |             ^\n    |\n-   = note: #[deny(legacy_constructor_visibility)] on by default\n+   = note: `#[deny(legacy_constructor_visibility)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #39207 <https://github.com/rust-lang/rust/issues/39207>\n "}, {"sha": "0b32e4cd306f76fdd8a81c981883476d3127a467", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -10,7 +10,7 @@ LL | |         fn infer_exist() -> Self::Exist;\n LL | |     }\n    | |_____^\n    |\n-   = note: #[warn(private_in_public)] on by default\n+   = note: `#[warn(private_in_public)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n "}, {"sha": "4f2a5ea45aa32f1b48b317847e8806786412927e", "filename": "src/test/ui/privacy/private-in-public-non-principal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: private trait `PrivNonPrincipal` in public interface (error E0445)\n LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal> { loop {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(private_in_public)] on by default\n+   = note: `#[warn(private_in_public)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n "}, {"sha": "9741f3b6d0d410e7ee77fe4d297b9cf215c3cae4", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -339,7 +339,7 @@ warning: bounds on generic parameters are not enforced in type aliases\n LL |     pub type Alias<T: PrivTr> = T;\n    |                       ^^^^^^\n    |\n-   = note: #[warn(type_alias_bounds)] on by default\n+   = note: `#[warn(type_alias_bounds)]` on by default\n    = help: the bound will not be checked when the type alias is used, and should be removed\n \n warning: where clauses are not enforced in type aliases"}, {"sha": "0f74f45e102f782d54229cd92a28acec1a16926e", "filename": "src/test/ui/proc-macro/attributes-included.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,5 +9,5 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unused_variables)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n "}, {"sha": "51bbb23da75406f3181deb91634ae33e9962eeef", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -28,7 +28,7 @@ warning: cannot find type `FromOutside` in this scope\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n    |\n-   = note: #[warn(proc_macro_derive_resolution_fallback)] on by default\n+   = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #50504 <https://github.com/rust-lang/rust/issues/50504>\n "}, {"sha": "0b44c5a6525f6d3124bbcb77bccd326f2bd5b0e9", "filename": "src/test/ui/pub/pub-reexport-priv-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-reexport-priv-extern-crate.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: extern crate `core` is private, and cannot be re-exported (error E0365),\n LL | pub use core as reexported_core;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(pub_use_of_private_extern_crate)] on by default\n+   = note: `#[deny(pub_use_of_private_extern_crate)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n "}, {"sha": "c720b26aa03db86052f626665335f81d24ecc03e", "filename": "src/test/ui/regions/region-bound-on-closure-outlives-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |     (|x| f(x))(call_rec(f))\n    |                ----------- recursive call site\n    |\n-   = note: #[warn(unconditional_recursion)] on by default\n+   = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n error[E0505]: cannot move out of `f` because it is borrowed"}, {"sha": "18d0756e9f4e90d9610d7eaf862c49fd961756ca", "filename": "src/test/ui/removing-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n+   = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n \n warning: unused extern crate\n   --> $DIR/removing-extern-crate.rs:10:1"}, {"sha": "c05bb8f19f362bafbaad9ef7574572d796b81193", "filename": "src/test/ui/rfc1445/match-forbidden-without-eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -10,7 +10,7 @@ warning: floating-point types cannot be used in patterns\n LL |         f32::INFINITY => { }\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: #[warn(illegal_floating_point_literal_pattern)] on by default\n+   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n "}, {"sha": "2394bff11816d51ac0a23a3f7a87beac4dc18233", "filename": "src/test/ui/rust-2018/async-ident-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: #[deny(keyword_idents)] implied by #[deny(rust_2018_compatibility)]\n+   = note: `#[deny(keyword_idents)]` implied by `#[deny(rust_2018_compatibility)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n "}, {"sha": "12a6110bfb40647034eb6cf371cddb606bf2d787", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic-in-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic-in-2018.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[deny(unused_extern_crates)] implied by #[deny(rust_2018_idioms)]\n+   = note: `#[deny(unused_extern_crates)]` implied by `#[deny(rust_2018_idioms)]`\n \n error: aborting due to previous error\n "}, {"sha": "957a04cd9804a92c96a3a3a3d3858339b760f9d1", "filename": "src/test/ui/rust-2018/issue-54400-unused-extern-crate-attr-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fissue-54400-unused-extern-crate-attr-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fissue-54400-unused-extern-crate-attr-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fissue-54400-unused-extern-crate-attr-span.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -12,7 +12,7 @@ note: lint level defined here\n    |\n LL | #![deny(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[deny(unused_extern_crates)] implied by #[deny(rust_2018_idioms)]\n+   = note: `#[deny(unused_extern_crates)]` implied by `#[deny(rust_2018_idioms)]`\n \n error: aborting due to previous error\n "}, {"sha": "944b56e9577b6d47aa5d6892c4d5ee351c37458a", "filename": "src/test/ui/rust-2018/macro-use-warned-against.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fmacro-use-warned-against.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -21,5 +21,5 @@ note: lint level defined here\n    |\n LL | #![warn(macro_use_extern_crate, unused)]\n    |                                 ^^^^^^\n-   = note: #[warn(unused_imports)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`\n "}, {"sha": "4777565452a3170c25910d256acc5fb5b07cf5b4", "filename": "src/test/ui/rust-2018/remove-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[warn(unused_extern_crates)] implied by #[warn(rust_2018_idioms)]\n+   = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n \n warning: `extern crate` is not idiomatic in the new edition\n   --> $DIR/remove-extern-crate.rs:32:5"}, {"sha": "5add50e87f78705c4e2b21a417719a46db18bb2e", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: #[warn(absolute_paths_not_starting_with_crate)] implied by #[warn(rust_2018_compatibility)]\n+   = note: `#[warn(absolute_paths_not_starting_with_crate)]` implied by `#[warn(rust_2018_compatibility)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n "}, {"sha": "852e3e5aed64b74a05ce36989d92431a3f6e4614", "filename": "src/test/ui/rust-2018/try-ident.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: #[warn(keyword_idents)] implied by #[warn(rust_2018_compatibility)]\n+   = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n "}, {"sha": "eb65d4150642a47d5293eb272bb5ddeedd07cb84", "filename": "src/test/ui/rust-2018/try-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: #[warn(keyword_idents)] implied by #[warn(rust_2018_compatibility)]\n+   = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n "}, {"sha": "0948fad74e50ea2c88dd10eb1e1180f25270636b", "filename": "src/test/ui/safe-extern-statics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: use of extern static is unsafe and requires unsafe function or block (err\n LL |     let a = A;\n    |             ^\n    |\n-   = note: #[deny(safe_extern_statics)] on by default\n+   = note: `#[deny(safe_extern_statics)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior"}, {"sha": "b2160e66a74d42d8edf658191180b543adcc691f", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,15 +9,15 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unused_variables)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: variable `theTwo` should have a snake case name\n   --> $DIR/issue-24690.rs:12:9\n    |\n LL |     let theTwo = 2;\n    |         ^^^^^^ help: convert the identifier to snake case: `the_two`\n    |\n-   = note: #[warn(non_snake_case)] on by default\n+   = note: `#[warn(non_snake_case)]` on by default\n \n warning: variable `theOtherTwo` should have a snake case name\n   --> $DIR/issue-24690.rs:13:9"}, {"sha": "8b65e798b6ef51e8550c67833d3bddbc72ad59ee", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -12,5 +12,5 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(dead_code)] implied by #[warn(unused)]\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n "}, {"sha": "a54c86cdb0fdfff90865754d4f1ae74cc7d95bfa", "filename": "src/test/ui/span/multispan-import-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultispan-import-lint.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,5 +9,5 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(unused_imports)] implied by #[warn(unused)]\n+   = note: `#[warn(unused_imports)]` implied by `#[warn(unused)]`\n "}, {"sha": "83e2ec1987b476f88cc2ef5d641c80d37478bc4e", "filename": "src/test/ui/span/unused-warning-point-at-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-signature.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n-   = note: #[warn(dead_code)] implied by #[warn(unused)]\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n \n warning: struct is never constructed: `Struct`\n   --> $DIR/unused-warning-point-at-signature.rs:12:1"}, {"sha": "f64e637425d054db53310cde092caf7c17bb66dd", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | fn foo(_x: Foo + Send) {\n    |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n    |\n-   = note: #[warn(bare_trait_objects)] on by default\n+   = note: `#[warn(bare_trait_objects)]` on by default\n \n error[E0277]: the size for values of type `(dyn Foo + std::marker::Send + 'static)` cannot be known at compilation time\n   --> $DIR/trait-bounds-not-on-bare-trait.rs:7:8"}, {"sha": "d323c1a73b772ff0e6d90d50aa5fbfa39fb17b4e", "filename": "src/test/ui/transmute/transmute-imut-to-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Ftransmute-imut-to-mut.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: mutating transmuted &mut T from &T may cause undefined behavior, consider\n LL |     let _a: &mut u8 = unsafe { transmute(&1u8) };\n    |                                ^^^^^^^^^\n    |\n-   = note: #[deny(mutable_transmutes)] on by default\n+   = note: `#[deny(mutable_transmutes)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "af0bad80690f3c72237a4f35bc8f8665946bdb1d", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: Trait bound std::string::String: std::marker::Copy does not depend on a\n LL | fn copy_string(t: String) -> String where String: Copy {\n    |                                                   ^^^^\n    |\n-   = note: #[warn(trivial_bounds)] on by default\n+   = note: `#[warn(trivial_bounds)]` on by default\n \n warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-copy.rs:13:56"}, {"sha": "f2aa482f6dee41ffb98b792b426fd0a45e04ebf1", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: Trait bound B: A does not depend on any type or lifetime parameters\n LL |     B: A\n    |        ^\n    |\n-   = note: #[warn(trivial_bounds)] on by default\n+   = note: `#[warn(trivial_bounds)]` on by default\n \n warning: Trait bound B: A does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-projection.rs:28:8"}, {"sha": "a80ebc173f03706ce2dc0d3bc7d421c69693b6f2", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: Trait bound str: std::marker::Sized does not depend on any type or life\n LL | struct S(str, str) where str: Sized;\n    |                               ^^^^^\n    |\n-   = note: #[warn(trivial_bounds)] on by default\n+   = note: `#[warn(trivial_bounds)]` on by default\n \n warning: Trait bound for<'a> T<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:16:49"}, {"sha": "fdc3ff1d3b59bf60a4629302eac95055f236aaf8", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-well-formed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: Trait bound std::vec::Vec<str>: std::fmt::Debug does not depend on any\n LL | pub fn foo() where Vec<str>: Debug, str: Copy {\n    |                              ^^^^^\n    |\n-   = note: #[warn(trivial_bounds)] on by default\n+   = note: `#[warn(trivial_bounds)]` on by default\n \n warning: Trait bound str: std::marker::Copy does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-well-formed.rs:7:42"}, {"sha": "0eb0769c5707103405a16c596145d1260885defe", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n LL | enum E where i32: Foo { V }\n    |                   ^^^\n    |\n-   = note: #[warn(trivial_bounds)] on by default\n+   = note: `#[warn(trivial_bounds)]` on by default\n \n warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:16:21\n@@ -30,7 +30,7 @@ warning: where clauses are not enforced in type aliases\n LL | type Y where i32: Foo = ();\n    |              ^^^^^^^^\n    |\n-   = note: #[warn(type_alias_bounds)] on by default\n+   = note: `#[warn(type_alias_bounds)]` on by default\n    = help: the clause will not be checked when the type alias is used, and should be removed\n \n warning: Trait bound i32: Foo does not depend on any type or lifetime parameters"}, {"sha": "db8767273b42385cabe8105d68638e6f2de05f67", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-lint-ambiguous_associated_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-lint-ambiguous_associated_items.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ error: ambiguous associated item\n LL |     fn f() -> Self::V { 0 }\n    |               ^^^^^^^ help: use fully-qualified syntax: `<E as Tr>::V`\n    |\n-   = note: #[deny(ambiguous_associated_items)] on by default\n+   = note: `#[deny(ambiguous_associated_items)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57644 <https://github.com/rust-lang/rust/issues/57644>\n note: `V` could refer to variant defined here"}, {"sha": "dbb7b92563ab86c49dc21cbac28480d0e50a3662", "filename": "src/test/ui/type/type-alias-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -4,7 +4,7 @@ warning: bounds on generic parameters are not enforced in type aliases\n LL | type SVec<T: Send + Send> = Vec<T>;\n    |              ^^^^   ^^^^\n    |\n-   = note: #[warn(type_alias_bounds)] on by default\n+   = note: `#[warn(type_alias_bounds)]` on by default\n    = help: the bound will not be checked when the type alias is used, and should be removed\n \n warning: where clauses are not enforced in type aliases"}, {"sha": "56de63da4f979144e2a6aa9869423fc08b2bef65", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -40,7 +40,7 @@ warning: type parameter `\u03b3` should have an upper camel case name\n LL |     \u03b3\n    |     ^ help: convert the identifier to upper camel case: `\u0393`\n    |\n-   = note: #[warn(non_camel_case_types)] on by default\n+   = note: `#[warn(non_camel_case_types)]` on by default\n \n error: aborting due to 4 previous errors\n "}, {"sha": "348925aa9702c906e1671a3dff11323504506b8c", "filename": "src/test/ui/while-let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fwhile-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ae9048494a192b0e5e074d53feb0ad180b196bf/src%2Ftest%2Fui%2Fwhile-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhile-let.stderr?ref=0ae9048494a192b0e5e074d53feb0ad180b196bf", "patch": "@@ -9,7 +9,7 @@ LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n    |\n-   = note: #[warn(irrefutable_let_patterns)] on by default\n+   = note: `#[warn(irrefutable_let_patterns)]` on by default\n \n warning: irrefutable while-let pattern\n   --> $DIR/while-let.rs:6:13"}]}