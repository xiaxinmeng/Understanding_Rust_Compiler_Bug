{"sha": "adfffc7e123a0cca1fefdfc48a7c7860a428c7f4", "node_id": "C_kwDOAAsO6NoAKGFkZmZmYzdlMTIzYTBjY2ExZmVmZGZjNDhhN2M3ODYwYTQyOGM3ZjQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-14T12:10:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-14T12:10:24Z"}, "message": "Simplify implementation.", "tree": {"sha": "a9a730accd4af3a6c629b020e4bc71339314465b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a730accd4af3a6c629b020e4bc71339314465b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adfffc7e123a0cca1fefdfc48a7c7860a428c7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adfffc7e123a0cca1fefdfc48a7c7860a428c7f4", "html_url": "https://github.com/rust-lang/rust/commit/adfffc7e123a0cca1fefdfc48a7c7860a428c7f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adfffc7e123a0cca1fefdfc48a7c7860a428c7f4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40f23587993a3f1afd1405cbcc56bc4324dd378", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40f23587993a3f1afd1405cbcc56bc4324dd378", "html_url": "https://github.com/rust-lang/rust/commit/f40f23587993a3f1afd1405cbcc56bc4324dd378"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "2b404efccc75ada8e841f1d25650460ae163202f", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/adfffc7e123a0cca1fefdfc48a7c7860a428c7f4/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfffc7e123a0cca1fefdfc48a7c7860a428c7f4/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=adfffc7e123a0cca1fefdfc48a7c7860a428c7f4", "patch": "@@ -101,14 +101,15 @@ impl SsaLocals {\n             .retain(|&local| matches!(visitor.assignments[local], Set1::One(_)));\n         debug!(?visitor.assignment_order);\n \n-        let copy_classes = compute_copy_classes(&mut visitor, body);\n-\n-        SsaLocals {\n+        let mut ssa = SsaLocals {\n             assignments: visitor.assignments,\n             assignment_order: visitor.assignment_order,\n             direct_uses: visitor.direct_uses,\n-            copy_classes,\n-        }\n+            // This is filled by `compute_copy_classes`.\n+            copy_classes: IndexVec::default(),\n+        };\n+        compute_copy_classes(&mut ssa, body);\n+        ssa\n     }\n \n     pub fn num_locals(&self) -> usize {\n@@ -261,27 +262,19 @@ impl<'tcx> Visitor<'tcx> for SsaVisitor {\n }\n \n #[instrument(level = \"trace\", skip(ssa, body))]\n-fn compute_copy_classes(ssa: &mut SsaVisitor, body: &Body<'_>) -> IndexVec<Local, Local> {\n+fn compute_copy_classes(ssa: &mut SsaLocals, body: &Body<'_>) {\n+    let mut direct_uses = std::mem::take(&mut ssa.direct_uses);\n     let mut copies = IndexVec::from_fn_n(|l| l, body.local_decls.len());\n \n-    for &local in &ssa.assignment_order {\n-        debug!(?local);\n-\n-        // This is not SSA: mark that we don't know the value.\n-        debug!(assignments = ?ssa.assignments[local]);\n-        let Set1::One(LocationExtended::Plain(loc)) = ssa.assignments[local] else { continue };\n-\n-        // `loc` must point to a direct assignment to `local`.\n-        let Either::Left(stmt) = body.stmt_at(loc) else { bug!() };\n-        let Some((_target, rvalue)) = stmt.kind.as_assign() else { bug!() };\n-        assert_eq!(_target.as_local(), Some(local));\n-\n+    for (local, rvalue, _) in ssa.assignments(body) {\n         let (Rvalue::Use(Operand::Copy(place) | Operand::Move(place)) | Rvalue::CopyForDeref(place))\n             = rvalue\n         else { continue };\n \n         let Some(rhs) = place.as_local() else { continue };\n-        let Set1::One(_) = ssa.assignments[rhs] else { continue };\n+        if !ssa.is_ssa(rhs) {\n+            continue;\n+        }\n \n         // We visit in `assignment_order`, ie. reverse post-order, so `rhs` has been\n         // visited before `local`, and we just have to copy the representing local.\n@@ -302,11 +295,11 @@ fn compute_copy_classes(ssa: &mut SsaVisitor, body: &Body<'_>) -> IndexVec<Local\n         } else {\n             copies[local] = head;\n         }\n-        ssa.direct_uses[rhs] -= 1;\n+        direct_uses[rhs] -= 1;\n     }\n \n     debug!(?copies);\n-    debug!(?ssa.direct_uses);\n+    debug!(?direct_uses);\n \n     // Invariant: `copies` must point to the head of an equivalence class.\n     #[cfg(debug_assertions)]\n@@ -315,7 +308,8 @@ fn compute_copy_classes(ssa: &mut SsaVisitor, body: &Body<'_>) -> IndexVec<Local\n     }\n     debug_assert_eq!(copies[RETURN_PLACE], RETURN_PLACE);\n \n-    copies\n+    ssa.direct_uses = direct_uses;\n+    ssa.copy_classes = copies;\n }\n \n #[derive(Debug)]"}]}