{"sha": "d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "node_id": "C_kwDOAAsO6NoAKGQ5ODQyODcxMWU2ZmUxYjJhN2Y2ZDk2M2Q0YjMzN2JlYWEzZGMyODU", "commit": {"author": {"name": "Sebastian Humenda", "email": "shumenda@gmx.de", "date": "2018-04-03T12:53:13Z"}, "committer": {"name": "Benjamin Lamowski", "email": "benjamin.lamowski@kernkonzept.com", "date": "2022-01-21T15:28:33Z"}, "message": "Add L4Bender as linker variant", "tree": {"sha": "45ec87733933a866c778507b6c7a4ce73afc9090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45ec87733933a866c778507b6c7a4ce73afc9090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "html_url": "https://github.com/rust-lang/rust/commit/d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/comments", "author": {"login": "humenda", "id": 4473821, "node_id": "MDQ6VXNlcjQ0NzM4MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4473821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humenda", "html_url": "https://github.com/humenda", "followers_url": "https://api.github.com/users/humenda/followers", "following_url": "https://api.github.com/users/humenda/following{/other_user}", "gists_url": "https://api.github.com/users/humenda/gists{/gist_id}", "starred_url": "https://api.github.com/users/humenda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humenda/subscriptions", "organizations_url": "https://api.github.com/users/humenda/orgs", "repos_url": "https://api.github.com/users/humenda/repos", "events_url": "https://api.github.com/users/humenda/events{/privacy}", "received_events_url": "https://api.github.com/users/humenda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "atopia", "id": 1710873, "node_id": "MDQ6VXNlcjE3MTA4NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1710873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atopia", "html_url": "https://github.com/atopia", "followers_url": "https://api.github.com/users/atopia/followers", "following_url": "https://api.github.com/users/atopia/following{/other_user}", "gists_url": "https://api.github.com/users/atopia/gists{/gist_id}", "starred_url": "https://api.github.com/users/atopia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atopia/subscriptions", "organizations_url": "https://api.github.com/users/atopia/orgs", "repos_url": "https://api.github.com/users/atopia/repos", "events_url": "https://api.github.com/users/atopia/events{/privacy}", "received_events_url": "https://api.github.com/users/atopia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e918971d643c6a33067d5125214ab800ce5307", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e918971d643c6a33067d5125214ab800ce5307", "html_url": "https://github.com/rust-lang/rust/commit/84e918971d643c6a33067d5125214ab800ce5307"}], "stats": {"total": 200, "additions": 183, "deletions": 17}, "files": [{"sha": "ec9fc22bc4d053739f942d3da6a96164f4ba38b3", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "patch": "@@ -1159,6 +1159,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     LinkerFlavor::Lld(_) => \"lld\",\n                     LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n                     LinkerFlavor::BpfLinker => \"bpf-linker\",\n+                    LinkerFlavor::L4Bender => \"l4-bender\",\n                 }),\n                 flavor,\n             )),"}, {"sha": "e2357eae7c1c0e1cc18f31a39e7906879cea097f", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 171, "deletions": 1, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "patch": "@@ -3,6 +3,7 @@ use super::command::Command;\n use super::symbol_export;\n use rustc_span::symbol::sym;\n \n+use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, File};\n use std::io::prelude::*;\n@@ -126,7 +127,6 @@ pub fn get_linker<'a>(\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n     assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n-\n     match flavor {\n         LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n             Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n@@ -149,6 +149,10 @@ pub fn get_linker<'a>(\n         LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n \n         LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n+\n+        LinkerFlavor::L4Bender => {\n+                Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n+        },\n     }\n }\n \n@@ -1355,6 +1359,172 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n }\n \n+/// Linker shepherd script for L4Re (Fiasco)\n+pub struct L4Bender<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+    hinted_static: bool,\n+}\n+\n+impl<'a> Linker for L4Bender<'a> {\n+    fn link_dylib(&mut self, _lib: Symbol) {\n+        panic!(\"dylibs not supported yet\")\n+    }\n+    fn link_staticlib(&mut self, lib: Symbol) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-PC{}\", lib));\n+    }\n+    fn link_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(lib);\n+    }\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+    fn framework_path(&mut self, _: &Path) {\n+        bug!(\"Frameworks are not supported on L4Re!\");\n+    }\n+    fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n+    fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n+    // not sure about pie on L4Re\n+    fn position_independent_executable(&mut self) { }\n+    fn no_position_independent_executable(&mut self) { }\n+    fn full_relro(&mut self) { self.cmd.arg(\"-z,relro,-z,now\"); }\n+    fn partial_relro(&mut self) { self.cmd.arg(\"-z,relro\"); }\n+    fn no_relro(&mut self) { self.cmd.arg(\"-z,norelro\"); }\n+    fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n+    fn link_rust_dylib(&mut self, _: Symbol, _: &Path) {\n+        panic!(\"Rust dylibs not supported\");\n+    }\n+\n+    fn link_framework(&mut self, _: Symbol) {\n+        bug!(\"Frameworks not supported on L4Re.\");\n+    }\n+\n+    // Here we explicitly ask that the entire archive is included into the\n+    // result artifact. For more details see #15460, but the gist is that\n+    // the linker will strip away any unused objects in the archive if we\n+    // don't otherwise explicitly reference them. This can occur for\n+    // libraries which are just providing bindings, libraries with generic\n+    // functions, etc.\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _: &[PathBuf]) {\n+        self.hint_static();\n+        self.cmd.arg(\"--whole-archive\").arg(format!(\"-l{}\", lib));\n+        self.cmd.arg(\"--no-whole-archive\");\n+    }\n+\n+    fn link_whole_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(\"--whole-archive\").arg(lib).arg(\"--no-whole-archive\");\n+    }\n+\n+    fn gc_sections(&mut self, keep_metadata: bool) {\n+        if !keep_metadata {\n+            self.cmd.arg(\"--gc-sections\");\n+        }\n+    }\n+\n+    fn optimize(&mut self) {\n+        self.cmd.arg(\"-O2\");\n+    }\n+\n+    fn pgo_gen(&mut self) { }\n+\n+    fn debuginfo(&mut self, strip: Strip) {\n+        match strip {\n+            Strip::None => {}\n+            Strip::Debuginfo => {\n+                self.cmd().arg(\"--strip-debug\"); }\n+            Strip::Symbols => {\n+                self.cmd().arg(\"--strip-all\");\n+            }\n+        }\n+    }\n+\n+    fn no_default_libraries(&mut self) {\n+        self.cmd.arg(\"-nostdlib\");\n+    }\n+\n+    fn build_dylib(&mut self, _: &Path) {\n+        bug!(\"not implemented\");\n+    }\n+\n+    fn export_symbols(&mut self, _: &Path, _: CrateType) {\n+        // ToDo, not implemented, copy from GCC\n+        return;\n+    }\n+\n+    fn subsystem(&mut self, subsystem: &str) {\n+        self.cmd.arg(&format!(\"--subsystem,{}\", subsystem));\n+    }\n+\n+    fn finalize(&mut self) {\n+        self.hint_static(); // Reset to default before returning the composed command line.\n+    }\n+\n+    fn group_start(&mut self) { self.cmd.arg(\"--start-group\"); }\n+    fn group_end(&mut self) { self.cmd.arg(\"--end-group\"); }\n+    fn linker_plugin_lto(&mut self) {\n+        // do nothing\n+    }\n+    fn control_flow_guard(&mut self) {\n+        self.sess.warn(\"Windows Control Flow Guard is not supported by this linker.\");\n+    }\n+\n+    fn no_crt_objects(&mut self) { }\n+}\n+\n+impl<'a> L4Bender<'a> {\n+    pub fn new(mut cmd: Command, sess: &'a Session) -> L4Bender<'a> {\n+        if let Ok(l4bender_args) = env::var(\"L4_BENDER_ARGS\") {\n+            L4Bender::split_cmd_args(&mut cmd, &l4bender_args);\n+        }\n+\n+        cmd.arg(\"--\"); // separate direct l4-bender args from linker args\n+\n+        L4Bender {\n+            cmd: cmd,\n+            sess: sess,\n+            hinted_static: false,\n+        }\n+    }\n+\n+    /// This parses a shell-escaped string and unquotes the arguments. It doesn't attempt to\n+    /// completely understand shell, but should instead allow passing arguments like\n+    /// `-Dlinker=\"ld -m x86_64\"`, and a copy without quotes, but spaces preserved, is added as an\n+    /// argument to the given Command. This means that constructs as \\\" are not understood, so\n+    /// quote wisely.\n+    fn split_cmd_args(cmd: &mut Command, shell_args: &str) {\n+        let mut arg = String::new();\n+        let mut quoted = false;\n+        for character in shell_args.chars() {\n+            match character {\n+                ' ' if !quoted => {\n+                    cmd.arg(&arg);\n+                    arg.clear();\n+                },\n+                '\"' | '\\'' => quoted = !quoted,\n+                _ => arg.push(character),\n+            };\n+        }\n+        if arg.len() > 0 {\n+            cmd.arg(&arg);\n+            arg.clear();\n+        }\n+    }\n+\n+    fn hint_static(&mut self) {\n+        if !self.hinted_static {\n+            self.cmd.arg(\"-static\");\n+            self.hinted_static = true;\n+        }\n+    }\n+}\n+\n pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n     if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n         return exports.clone();"}, {"sha": "235df91f41466f0c5259b10a0bf85361101c0271", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "patch": "@@ -1,16 +1,5 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n-//use std::process::Command;\n-\n-// Use GCC to locate code for crt* libraries from the host, not from L4Re. Note\n-// that a few files also come from L4Re, for these, the function shouldn't be\n-// used. This uses GCC for the location of the file, but GCC is required for L4Re anyway.\n-//fn get_path_or(filename: &str) -> String {\n-//    let child = Command::new(\"gcc\")\n-//        .arg(format!(\"-print-file-name={}\", filename)).output()\n-//        .expect(\"Failed to execute GCC\");\n-//    String::from_utf8(child.stdout)\n-//        .expect(\"Couldn't read path from GCC\").trim().into()\n-//}\n+use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -19,9 +8,9 @@ pub fn opts() -> TargetOptions {\n         linker_flavor: LinkerFlavor::Ld,\n         executables: true,\n         panic_strategy: PanicStrategy::Abort,\n-        linker: Some(\"ld\".to_string()),\n-        linker_is_gnu: false,\n-        families: vec![\"unix\".to_string()],\n+        linker: Some(\"l4-bender\".to_string()),\n+        pre_link_args: args,\n+        os_family: Some(\"unix\".to_string()),\n         ..Default::default()\n     }\n }"}, {"sha": "4effb8bacf6d6cfc01e57aa22e48b5330506da98", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "patch": "@@ -90,6 +90,7 @@ mod windows_uwp_msvc_base;\n pub enum LinkerFlavor {\n     Em,\n     Gcc,\n+    L4Bender,\n     Ld,\n     Msvc,\n     Lld(LldFlavor),\n@@ -160,6 +161,7 @@ macro_rules! flavor_mappings {\n flavor_mappings! {\n     ((LinkerFlavor::Em), \"em\"),\n     ((LinkerFlavor::Gcc), \"gcc\"),\n+    ((LinkerFlavor::L4Bender), \"l4-bender\"),\n     ((LinkerFlavor::Ld), \"ld\"),\n     ((LinkerFlavor::Msvc), \"msvc\"),\n     ((LinkerFlavor::PtxLinker), \"ptx-linker\"),"}, {"sha": "6457d7c3efaf112bfbc9e2ceb45b94ce214f030b", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98428711e6fe1b2a7f6d963d4b337beaa3dc285/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=d98428711e6fe1b2a7f6d963d4b337beaa3dc285", "patch": "@@ -11,6 +11,10 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n+        target_os: \"l4re\".to_string(),\n+        target_env: \"uclibc\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::L4Bender,\n         options: base,\n     }\n }"}]}