{"sha": "1999a4c42181b269e9f61a329333069e707604ec", "node_id": "C_kwDOAAsO6NoAKDE5OTlhNGM0MjE4MWIyNjllOWY2MWEzMjkzMzMwNjllNzA3NjA0ZWM", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-28T09:14:10Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:21Z"}, "message": "lint: port unused diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "d25044c82b09e239626ca66d4993d69d8a144f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d25044c82b09e239626ca66d4993d69d8a144f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1999a4c42181b269e9f61a329333069e707604ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1999a4c42181b269e9f61a329333069e707604ec", "html_url": "https://github.com/rust-lang/rust/commit/1999a4c42181b269e9f61a329333069e707604ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1999a4c42181b269e9f61a329333069e707604ec/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0602729c717181ded09169b021de588b42bee8ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0602729c717181ded09169b021de588b42bee8ee", "html_url": "https://github.com/rust-lang/rust/commit/0602729c717181ded09169b021de588b42bee8ee"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "c673ec7785db78e6accc6d1875b9e6be58ebcef4", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1999a4c42181b269e9f61a329333069e707604ec/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1999a4c42181b269e9f61a329333069e707604ec/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=1999a4c42181b269e9f61a329333069e707604ec", "patch": "@@ -251,3 +251,25 @@ lint-atomic-ordering-invalid-fail-success = `{$method}`'s success ordering must\n     .fail-label = `{$fail_ordering}` failure ordering\n     .success-label = `{$success_ordering}` success ordering\n     .suggestion = consider using `{$success_suggestion}` success ordering instead\n+\n+lint-unused-op = unused {$op} that must be used\n+    .label = the {$op} produces a value\n+    .suggestion = use `let _ = ...` to ignore the resulting value\n+\n+lint-unused-result = unused result of type `{$ty}`\n+\n+lint-unused-closure =\n+    unused {$pre}{$count ->\n+        [one] closure\n+        *[other] closures\n+    }{$post} that must be used\n+    .note = closures are lazy and do nothing unless called\n+\n+lint-unused-generator =\n+    unused {$pre}{$count ->\n+        [one] generator\n+        *[other] generator\n+    }{$post} that must be used\n+    .note = generators are lazy and do nothing unless resumed\n+\n+lint-unused-def = unused {$pre}`{$def}`{$post} that must be used"}, {"sha": "d3cb3a70f02e1452d53097bb4359573f3a8e6b06", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1999a4c42181b269e9f61a329333069e707604ec/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1999a4c42181b269e9f61a329333069e707604ec/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=1999a4c42181b269e9f61a329333069e707604ec", "patch": "@@ -3,7 +3,7 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_ast::util::{classify, parser};\n use rustc_ast::{ExprKind, StmtKind};\n-use rustc_errors::{pluralize, Applicability, MultiSpan};\n+use rustc_errors::{fluent, pluralize, Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -155,22 +155,23 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n \n         if let Some(must_use_op) = must_use_op {\n             cx.struct_span_lint(UNUSED_MUST_USE, expr.span, |lint| {\n-                let mut lint = lint.build(&format!(\"unused {} that must be used\", must_use_op));\n-                lint.span_label(expr.span, &format!(\"the {} produces a value\", must_use_op));\n-                lint.span_suggestion_verbose(\n-                    expr.span.shrink_to_lo(),\n-                    \"use `let _ = ...` to ignore the resulting value\",\n-                    \"let _ = \",\n-                    Applicability::MachineApplicable,\n-                );\n-                lint.emit();\n+                lint.build(fluent::lint::unused_op)\n+                    .set_arg(\"op\", must_use_op)\n+                    .span_label(expr.span, fluent::lint::label)\n+                    .span_suggestion_verbose(\n+                        expr.span.shrink_to_lo(),\n+                        fluent::lint::suggestion,\n+                        \"let _ = \",\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n             });\n             op_warned = true;\n         }\n \n         if !(type_permits_lack_of_use || fn_warned || op_warned) {\n             cx.struct_span_lint(UNUSED_RESULTS, s.span, |lint| {\n-                lint.build(&format!(\"unused result of type `{}`\", ty)).emit();\n+                lint.build(fluent::lint::unused_result).set_arg(\"ty\", ty).emit();\n             });\n         }\n \n@@ -267,23 +268,27 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 },\n                 ty::Closure(..) => {\n                     cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                        let mut err = lint.build(&format!(\n-                            \"unused {}closure{}{} that must be used\",\n-                            descr_pre, plural_suffix, descr_post,\n-                        ));\n-                        err.note(\"closures are lazy and do nothing unless called\");\n-                        err.emit();\n+                        // FIXME(davidtwco): this isn't properly translatable becauses of the\n+                        // pre/post strings\n+                        lint.build(fluent::lint::unused_closure)\n+                            .set_arg(\"count\", plural_len)\n+                            .set_arg(\"pre\", descr_pre)\n+                            .set_arg(\"post\", descr_post)\n+                            .note(fluent::lint::note)\n+                            .emit();\n                     });\n                     true\n                 }\n                 ty::Generator(..) => {\n                     cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                        let mut err = lint.build(&format!(\n-                            \"unused {}generator{}{} that must be used\",\n-                            descr_pre, plural_suffix, descr_post,\n-                        ));\n-                        err.note(\"generators are lazy and do nothing unless resumed\");\n-                        err.emit();\n+                        // FIXME(davidtwco): this isn't properly translatable becauses of the\n+                        // pre/post strings\n+                        lint.build(fluent::lint::unused_generator)\n+                            .set_arg(\"count\", plural_len)\n+                            .set_arg(\"pre\", descr_pre)\n+                            .set_arg(\"post\", descr_post)\n+                            .note(fluent::lint::note)\n+                            .emit();\n                     });\n                     true\n                 }\n@@ -305,13 +310,12 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n         ) -> bool {\n             if let Some(attr) = cx.tcx.get_attr(def_id, sym::must_use) {\n                 cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                    let msg = format!(\n-                        \"unused {}`{}`{} that must be used\",\n-                        descr_pre_path,\n-                        cx.tcx.def_path_str(def_id),\n-                        descr_post_path\n-                    );\n-                    let mut err = lint.build(&msg);\n+                    // FIXME(davidtwco): this isn't properly translatable becauses of the pre/post\n+                    // strings\n+                    let mut err = lint.build(fluent::lint::unused_def);\n+                    err.set_arg(\"pre\", descr_pre_path);\n+                    err.set_arg(\"post\", descr_post_path);\n+                    err.set_arg(\"def\", cx.tcx.def_path_str(def_id));\n                     // check for #[must_use = \"...\"]\n                     if let Some(note) = attr.value_str() {\n                         err.note(note.as_str());"}]}