{"sha": "c5d877977a3d89ad9763b734405be41e3a041dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDg3Nzk3N2EzZDg5YWQ5NzYzYjczNDQwNWJlNDFlM2EwNDFkY2M=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-08-03T18:52:20Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-08-03T18:52:20Z"}, "message": "Post merge changes to #27488", "tree": {"sha": "040aca30395d0bc9ca55a6726b396040fb1a7892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040aca30395d0bc9ca55a6726b396040fb1a7892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d877977a3d89ad9763b734405be41e3a041dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d877977a3d89ad9763b734405be41e3a041dcc", "html_url": "https://github.com/rust-lang/rust/commit/c5d877977a3d89ad9763b734405be41e3a041dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d877977a3d89ad9763b734405be41e3a041dcc/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ba3f0dd91719e15cdce8e90aa45f19215a3a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ba3f0dd91719e15cdce8e90aa45f19215a3a3b", "html_url": "https://github.com/rust-lang/rust/commit/76ba3f0dd91719e15cdce8e90aa45f19215a3a3b"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "7e63c8d71f92832d3af3bf702ae1989009e6ce0d", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5d877977a3d89ad9763b734405be41e3a041dcc/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d877977a3d89ad9763b734405be41e3a041dcc/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c5d877977a3d89ad9763b734405be41e3a041dcc", "patch": "@@ -322,20 +322,16 @@ pub unsafe fn dropped<T>() -> T {\n /// println!(\"{:?}\", &data[0]);\n /// ```\n ///\n-/// Hopefully this example emphasizes to you exactly how delicate\n-/// and dangerous doing this is. Note that the `vec!` macro\n-/// *does* let you initialize every element with a value that\n-/// is only `Clone`, so the following is equivalent and vastly\n-/// less dangerous, as long as you can live with an extra heap\n+/// This example emphasizes exactly how delicate and dangerous doing this is.\n+/// Note that the `vec!` macro *does* let you initialize every element with a\n+/// value that is only `Clone`, so the following is semantically equivalent and\n+/// vastly less dangerous, as long as you can live with an extra heap\n /// allocation:\n ///\n /// ```\n /// let data: Vec<Vec<u32>> = vec![Vec::new(); 1000];\n /// println!(\"{:?}\", &data[0]);\n /// ```\n-///\n-/// For large arrays this is probably advisable\n-/// anyway to avoid blowing the stack.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {"}]}