{"sha": "44948d1fdc97a4fd24594be77df673a2c3b40544", "node_id": "C_kwDOAAsO6NoAKDQ0OTQ4ZDFmZGM5N2E0ZmQyNDU5NGJlNzdkZjY3M2EyYzNiNDA1NDQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-04T13:54:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-04T13:54:56Z"}, "message": "Recurse into nested impl-trait when computing variance.", "tree": {"sha": "3c9dbdd0cfa89662bb304af55549a4a4097cd97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9dbdd0cfa89662bb304af55549a4a4097cd97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44948d1fdc97a4fd24594be77df673a2c3b40544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44948d1fdc97a4fd24594be77df673a2c3b40544", "html_url": "https://github.com/rust-lang/rust/commit/44948d1fdc97a4fd24594be77df673a2c3b40544", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44948d1fdc97a4fd24594be77df673a2c3b40544/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "html_url": "https://github.com/rust-lang/rust/commit/cab4fd678c5b148a330f2bf255bf28a67dfea0fc"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "8b2719c2f8aaaef1add2f372c81751f7b6bdc8c2", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/44948d1fdc97a4fd24594be77df673a2c3b40544/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44948d1fdc97a4fd24594be77df673a2c3b40544/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=44948d1fdc97a4fd24594be77df673a2c3b40544", "patch": "@@ -7,7 +7,8 @@ use rustc_arena::DroplessArena;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, CrateVariancesMap, TyCtxt, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{self, CrateVariancesMap, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::{DefIdTree, TypeSuperVisitable, TypeVisitable};\n use std::ops::ControlFlow;\n \n /// Defines the `TermsContext` basically houses an arena where we can\n@@ -75,18 +76,50 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n     // type Foo<'a, 'b, 'c> = impl Trait<'a> + 'b;\n     // ```\n     // we may not use `'c` in the hidden type.\n-    struct OpaqueTypeLifetimeCollector {\n+    struct OpaqueTypeLifetimeCollector<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        root_def_id: DefId,\n         variances: Vec<ty::Variance>,\n     }\n \n-    impl<'tcx> ty::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector {\n+    impl<'tcx> OpaqueTypeLifetimeCollector<'tcx> {\n+        #[instrument(level = \"trace\", skip(self), ret)]\n+        fn visit_opaque(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) -> ControlFlow<!> {\n+            if def_id != self.root_def_id && self.tcx.is_descendant_of(def_id, self.root_def_id) {\n+                let child_variances = self.tcx.variances_of(def_id);\n+                for (a, v) in substs.iter().zip(child_variances) {\n+                    if *v != ty::Bivariant {\n+                        a.visit_with(self)?;\n+                    }\n+                }\n+                ControlFlow::CONTINUE\n+            } else {\n+                substs.visit_with(self)\n+            }\n+        }\n+    }\n+\n+    impl<'tcx> ty::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector<'tcx> {\n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {\n                 self.variances[ebr.index as usize] = ty::Invariant;\n             }\n             r.super_visit_with(self)\n         }\n+\n+        #[instrument(level = \"trace\", skip(self), ret)]\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+            match t.kind() {\n+                ty::Opaque(def_id, substs) => self.visit_opaque(*def_id, substs),\n+                ty::Projection(proj)\n+                    if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+                {\n+                    self.visit_opaque(proj.item_def_id, proj.substs)\n+                }\n+                _ => t.super_visit_with(self),\n+            }\n+        }\n     }\n \n     // By default, RPIT are invariant wrt type and const generics, but they are bivariant wrt\n@@ -111,7 +144,8 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         }\n     }\n \n-    let mut collector = OpaqueTypeLifetimeCollector { variances };\n+    let mut collector =\n+        OpaqueTypeLifetimeCollector { tcx, root_def_id: item_def_id.to_def_id(), variances };\n     let id_substs = ty::InternalSubsts::identity_for_item(tcx, item_def_id.to_def_id());\n     for pred in tcx.bound_explicit_item_bounds(item_def_id.to_def_id()).transpose_iter() {\n         let pred = pred.map_bound(|(pred, _)| *pred).subst(tcx, id_substs);"}, {"sha": "cec70bb1a0d9e5e9530820b574947071ebba9d67", "filename": "src/test/ui/impl-trait/nested-return-type4.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44948d1fdc97a4fd24594be77df673a2c3b40544/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44948d1fdc97a4fd24594be77df673a2c3b40544/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type4.rs?ref=44948d1fdc97a4fd24594be77df673a2c3b40544", "patch": "@@ -0,0 +1,8 @@\n+// edition: 2021\n+\n+fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized> {\n+    async move { let _s = s; }\n+    //~^ ERROR hidden type for `impl Future<Output = impl Sized>` captures lifetime that does not appear in bounds\n+}\n+\n+fn main() {}"}, {"sha": "e761a60e79c2751d5f1193d41fd5da610d8cf3fe", "filename": "src/test/ui/impl-trait/nested-return-type4.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44948d1fdc97a4fd24594be77df673a2c3b40544/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44948d1fdc97a4fd24594be77df673a2c3b40544/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr?ref=44948d1fdc97a4fd24594be77df673a2c3b40544", "patch": "@@ -0,0 +1,20 @@\n+error[E0700]: hidden type for `impl Future<Output = impl Sized>` captures lifetime that does not appear in bounds\n+  --> $DIR/nested-return-type4.rs:4:5\n+   |\n+LL | fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized> {\n+   |         -- hidden type `[async block@$DIR/nested-return-type4.rs:4:5: 4:31]` captures the lifetime `'s` as defined here\n+LL |     async move { let _s = s; }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: to declare that `impl Future<Output = impl Sized>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized> + 's {\n+   |                                                                              ++++\n+help: to declare that `impl Sized` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized + 's> {\n+   |                                                                             ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}]}