{"sha": "f73d0ee439054c7f19c4dced0d0732c2663626e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3M2QwZWU0MzkwNTRjN2YxOWM0ZGNlZDBkMDczMmMyNjYzNjI2ZTY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-08T12:27:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-08T12:27:54Z"}, "message": "Minor cleanup", "tree": {"sha": "408effe09a18df8f663d3bdf7eda1fd08f8c7cac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408effe09a18df8f663d3bdf7eda1fd08f8c7cac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73d0ee439054c7f19c4dced0d0732c2663626e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73d0ee439054c7f19c4dced0d0732c2663626e6", "html_url": "https://github.com/rust-lang/rust/commit/f73d0ee439054c7f19c4dced0d0732c2663626e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73d0ee439054c7f19c4dced0d0732c2663626e6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a1b26b8df3f154d162c3d75b7ca7f7d4ebae5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a1b26b8df3f154d162c3d75b7ca7f7d4ebae5f", "html_url": "https://github.com/rust-lang/rust/commit/64a1b26b8df3f154d162c3d75b7ca7f7d4ebae5f"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "630d72f6e698e5b2af6d2215138618619bc37b35", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f73d0ee439054c7f19c4dced0d0732c2663626e6/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73d0ee439054c7f19c4dced0d0732c2663626e6/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=f73d0ee439054c7f19c4dced0d0732c2663626e6", "patch": "@@ -34,10 +34,10 @@ use rustc_hash::FxHashMap;\n use stdx::impl_from;\n use syntax::SmolStr;\n \n-use super::{DomainGoal, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty};\n use crate::{\n     db::HirDatabase, fold_tys, lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy,\n-    Goal, Interner, Substitution, TyBuilder, TyExt, TyKind,\n+    DomainGoal, Goal, InEnvironment, Interner, ProjectionTy, Substitution, TraitEnvironment,\n+    TraitRef, Ty, TyBuilder, TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details."}, {"sha": "46d1f9afe105e740952f4f63dd7a841279f8656c", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f73d0ee439054c7f19c4dced0d0732c2663626e6/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73d0ee439054c7f19c4dced0d0732c2663626e6/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=f73d0ee439054c7f19c4dced0d0732c2663626e6", "patch": "@@ -10,13 +10,14 @@ use hir_def::{expr::ExprId, lang_item::LangItemTarget};\n \n use crate::{\n     autoderef,\n-    infer::{Adjust, Adjustment, AutoBorrow, InferResult, PointerCast, TypeMismatch},\n-    static_lifetime, Canonical, DomainGoal, FnPointer, FnSig, Interner, Solution, Substitution, Ty,\n-    TyBuilder, TyExt, TyKind,\n+    infer::{\n+        Adjust, Adjustment, AutoBorrow, InferOk, InferResult, InferenceContext, PointerCast,\n+        TypeError, TypeMismatch,\n+    },\n+    static_lifetime, Canonical, DomainGoal, FnPointer, FnSig, InEnvironment, Interner, Solution,\n+    Substitution, Ty, TyBuilder, TyExt, TyKind,\n };\n \n-use super::{InEnvironment, InferOk, InferenceContext, TypeError};\n-\n pub(crate) type CoerceResult = Result<InferOk<(Vec<Adjustment>, Ty)>, TypeError>;\n \n /// Do not require any adjustments, i.e. coerce `x -> x`.\n@@ -36,6 +37,7 @@ fn success(\n ) -> CoerceResult {\n     Ok(InferOk { goals, value: (adj, target) })\n }\n+\n #[derive(Clone, Debug)]\n pub(super) struct CoerceMany {\n     expected_ty: Ty,\n@@ -171,12 +173,8 @@ impl<'a> InferenceContext<'a> {\n \n         // Examine the supertype and consider auto-borrowing.\n         match to_ty.kind(&Interner) {\n-            TyKind::Raw(mt, _) => {\n-                return self.coerce_ptr(from_ty, to_ty, *mt);\n-            }\n-            TyKind::Ref(mt, _, _) => {\n-                return self.coerce_ref(from_ty, to_ty, *mt);\n-            }\n+            TyKind::Raw(mt, _) => return self.coerce_ptr(from_ty, to_ty, *mt),\n+            TyKind::Ref(mt, _, _) => return self.coerce_ref(from_ty, to_ty, *mt),\n             _ => {}\n         }\n \n@@ -337,7 +335,7 @@ impl<'a> InferenceContext<'a> {\n                 return Err(err);\n             }\n         };\n-        // FIXME: record overloarded deref adjustments\n+        // FIXME: record overloaded deref adjustments\n         success(\n             vec![Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(to_mt)), target: ty.clone() }],\n             ty,"}]}