{"sha": "f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDM5NGU1MTg0ZmUzYWY3NjFlYTFlNWJhNzNmOTkzY2ZiMzZkZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-05T11:05:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-05T11:05:18Z"}, "message": "Auto merge of #71916 - Dylan-DPC:rollup-luj7zx3, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #69984 (Add Option to Force Unwind Tables)\n - #71830 (Remove clippy from some leftover lists of \"possibly failing\" tools)\n - #71894 (Suggest removing semicolon in last expression only if it's type is known)\n - #71897 (Improve docs for embed-bitcode and linker-plugin-lto)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6f05bcf46a56c1894b902c1ea90d653b19defbf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f05bcf46a56c1894b902c1ea90d653b19defbf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "html_url": "https://github.com/rust-lang/rust/commit/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de27cd7649e4182c63c770d18a561bda0d88cfc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/de27cd7649e4182c63c770d18a561bda0d88cfc6", "html_url": "https://github.com/rust-lang/rust/commit/de27cd7649e4182c63c770d18a561bda0d88cfc6"}, {"sha": "3efcba693a208cd69c3077cc8d5f1a59ee605f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/3efcba693a208cd69c3077cc8d5f1a59ee605f66", "html_url": "https://github.com/rust-lang/rust/commit/3efcba693a208cd69c3077cc8d5f1a59ee605f66"}], "stats": {"total": 180, "additions": 156, "deletions": 24}, "files": [{"sha": "0cf47d20ead06287d4172e1fbb43b7c6dbb4e88f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -528,7 +528,7 @@ impl Step for Clippy {\n                 host,\n                 \"test\",\n                 \"src/tools/clippy\",\n-                SourceType::Submodule,\n+                SourceType::InTree,\n                 &[],\n             );\n "}, {"sha": "cd8ce4881b1dd7060679e704adb4129d18e4bbe9", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -78,7 +78,6 @@ static STABLE_TOOLS: &[(&str, &str)] = &[\n     (\"edition-guide\", \"src/doc/edition-guide\"),\n     (\"rls\", \"src/tools/rls\"),\n     (\"rustfmt\", \"src/tools/rustfmt\"),\n-    (\"clippy-driver\", \"src/tools/clippy\"),\n ];\n \n // These tools are permitted to not build on the beta/stable channels."}, {"sha": "dbe281be7df74dbf0adec7532e02ef2373121893", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -62,24 +62,40 @@ the linker.\n \n ## embed-bitcode\n \n-This flag controls whether or not the compiler puts LLVM bitcode into generated\n-rlibs. It takes one of the following values:\n+This flag controls whether or not the compiler embeds LLVM bitcode into object\n+files. It takes one of the following values:\n \n * `y`, `yes`, `on`, or no value: put bitcode in rlibs (the default).\n * `n`, `no`, or `off`: omit bitcode from rlibs.\n \n-LLVM bitcode is only needed when link-time optimization (LTO) is being\n-performed, but it is enabled by default for backwards compatibility reasons.\n+LLVM bitcode is required when rustc is performing link-time optimization (LTO).\n+It is also required on some targets like iOS ones where vendors look for LLVM\n+bitcode. Embedded bitcode will appear in rustc-generated object files inside of\n+a section whose name is defined by the target platform. Most of the time this is\n+`.llvmbc`.\n \n The use of `-C embed-bitcode=no` can significantly improve compile times and\n-reduce generated file sizes. For these reasons, Cargo uses `-C\n-embed-bitcode=no` whenever possible. Likewise, if you are building directly\n-with `rustc` we recommend using `-C embed-bitcode=no` whenever you are not\n-using LTO.\n+reduce generated file sizes if your compilation does not actually need bitcode\n+(e.g. if you're not compiling for iOS or you're not performing LTO). For these\n+reasons, Cargo uses `-C embed-bitcode=no` whenever possible. Likewise, if you\n+are building directly with `rustc` we recommend using `-C embed-bitcode=no`\n+whenever you are not using LTO.\n \n If combined with `-C lto`, `-C embed-bitcode=no` will cause `rustc` to abort\n at start-up, because the combination is invalid.\n \n+> **Note**: if you're building Rust code with LTO then you probably don't even\n+> need the `embed-bitcode` option turned on. You'll likely want to use\n+> `-Clinker-plugin-lto` instead which skips generating object files entirely and\n+> simply replaces object files with LLVM bitcode. The only purpose for\n+> `-Cembed-bitcode` is when you're generating an rlib that is both being used\n+> with and without LTO. For example Rust's standard library ships with embedded\n+> bitcode since users link to it both with and without LTO.\n+>\n+> This also may make you wonder why the default is `yes` for this option. The\n+> reason for that is that it's how it was for rustc 1.44 and prior. In 1.45 this\n+> option was added to turn off what had always been the default.\n+\n ## extra-filename\n \n This option allows you to put extra data in each output filename. It takes a\n@@ -98,6 +114,18 @@ values:\n The default behaviour, if frame pointers are not force-enabled, depends on the\n target.\n \n+## force-unwind-tables\n+\n+This flag forces the generation of unwind tables. It takes one of the following\n+values:\n+\n+* `y`, `yes`, `on`, or no value: Unwind tables are forced to be generated.\n+* `n`, `no`, or `off`: Unwind tables are not forced to be generated. If unwind\n+  tables are required by the target or `-C panic=unwind`, an error will be\n+  emitted.\n+\n+The default if not specified depends on the target.\n+\n ## incremental\n \n This flag allows you to enable incremental compilation, which allows `rustc`\n@@ -187,6 +215,18 @@ the following values:\n * `n`, `no`, or `off`: disable linker plugin LTO (the default).\n * A path to the linker plugin.\n \n+More specifically this flag will cause the compiler to replace its typical\n+object file output with LLVM bitcode files. For example an rlib produced with\n+`-Clinker-plugin-lto` will still have `*.o` files in it, but they'll all be LLVM\n+bitcode instead of actual machine code. It is expected that the native platform\n+linker is capable of loading these LLVM bitcode files and generating code at\n+link time (typically after performing optimizations).\n+\n+Note that rustc can also read its own object files produced with\n+`-Clinker-plugin-lto`. If an rlib is only ever going to get used later with a\n+`-Clto` compilation then you can pass `-Clinker-plugin-lto` to speed up\n+compilation and avoid generating object files that aren't used.\n+\n ## llvm-args\n \n This flag can be used to pass a list of arguments directly to LLVM."}, {"sha": "bc1d9e1818c2f63d975787f921d8f2b71789a3b3", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -54,7 +54,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n         if tcx.sess.target.target.options.default_hidden_visibility {\n             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n         }\n-        if tcx.sess.target.target.options.requires_uwtable {\n+        if tcx.sess.must_emit_unwind_tables() {\n             attributes::emit_uwtable(llfn, true);\n         }\n "}, {"sha": "64412843f6def5cf1fa382497b1d2c808d2e23b4", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -13,7 +13,6 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::{OptLevel, Sanitizer};\n use rustc_session::Session;\n-use rustc_target::spec::PanicStrategy;\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n@@ -271,9 +270,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     //\n     // You can also find more info on why Windows is whitelisted here in:\n     //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n-    if cx.sess().panic_strategy() == PanicStrategy::Unwind\n-        || cx.sess().target.target.options.requires_uwtable\n-    {\n+    if cx.sess().must_emit_unwind_tables() {\n         attributes::emit_uwtable(llfn, true);\n     }\n "}, {"sha": "f600b1dbf54ac65f09c08b205ba133ac6b74f7ac", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -415,6 +415,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(debuginfo, 0xdeadbeef);\n     tracked!(embed_bitcode, false);\n     tracked!(force_frame_pointers, Some(false));\n+    tracked!(force_unwind_tables, Some(true));\n     tracked!(inline_threshold, Some(0xf007ba11));\n     tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n     tracked!(llvm_args, vec![String::from(\"1\"), String::from(\"2\")]);"}, {"sha": "984d47956ca59a22cec7b0d415079d2c2fcead15", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -668,6 +668,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"extra data to put in each output filename\"),\n     force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force use of the frame pointers\"),\n+    force_unwind_tables: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"force use of unwind tables\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],"}, {"sha": "48e36fdb3d4999de3bd7e4719ca2271c26ac80bc", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -646,6 +646,33 @@ impl Session {\n         }\n     }\n \n+    pub fn must_emit_unwind_tables(&self) -> bool {\n+        // This is used to control the emission of the `uwtable` attribute on\n+        // LLVM functions.\n+        //\n+        // At the very least, unwind tables are needed when compiling with\n+        // `-C panic=unwind`.\n+        //\n+        // On some targets (including windows), however, exceptions include\n+        // other events such as illegal instructions, segfaults, etc. This means\n+        // that on Windows we end up still needing unwind tables even if the `-C\n+        // panic=abort` flag is passed.\n+        //\n+        // You can also find more info on why Windows needs unwind tables in:\n+        //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n+        //\n+        // If a target requires unwind tables, then they must be emitted.\n+        // Otherwise, we can defer to the `-C force-unwind-tables=<yes/no>`\n+        // value, if it is provided, or disable them, if not.\n+        if self.panic_strategy() == PanicStrategy::Unwind {\n+            true\n+        } else if self.target.target.options.requires_uwtable {\n+            true\n+        } else {\n+            self.opts.cg.force_unwind_tables.unwrap_or(false)\n+        }\n+    }\n+\n     /// Returns the symbol name for the registrar function,\n     /// given the crate `Svh` and the function `DefIndex`.\n     pub fn generate_plugin_registrar_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n@@ -1224,6 +1251,23 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n \n+    // Unwind tables cannot be disabled if the target requires them.\n+    if let Some(include_uwtables) = sess.opts.cg.force_unwind_tables {\n+        if sess.panic_strategy() == PanicStrategy::Unwind && !include_uwtables {\n+            sess.err(\n+                \"panic=unwind requires unwind tables, they cannot be disabled \\\n+                     with `-C force-unwind-tables=no`.\",\n+            );\n+        }\n+\n+        if sess.target.target.options.requires_uwtable && !include_uwtables {\n+            sess.err(\n+                \"target requires unwind tables, they cannot be disabled with \\\n+                     `-C force-unwind-tables=no`.\",\n+            );\n+        }\n+    }\n+\n     // PGO does not work reliably with panic=unwind on Windows. Let's make it\n     // an error to combine the two for now. It always runs into an assertions\n     // if LLVM is built with assertions, but without assertions it sometimes"}, {"sha": "bff1ca2433a83b96881633d9d72940d3d91c4b51", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -5387,7 +5387,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => return None,\n         };\n         let last_expr_ty = self.node_ty(last_expr.hir_id);\n-        if self.can_sub(self.param_env, last_expr_ty, expected_ty).is_err() {\n+        if matches!(last_expr_ty.kind, ty::Error)\n+            || self.can_sub(self.param_env, last_expr_ty, expected_ty).is_err()\n+        {\n             return None;\n         }\n         let original_span = original_sp(last_stmt.span, blk.span);"}, {"sha": "fbaf38d69df7fc2608e92060fe69bdc50b3bcefd", "filename": "src/test/codegen/force-unwind-tables.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -0,0 +1,7 @@\n+// min-llvm-version 8.0\n+// compile-flags: -C no-prepopulate-passes -C force-unwind-tables=y\n+\n+#![crate_type=\"lib\"]\n+\n+// CHECK: attributes #{{.*}} uwtable\n+pub fn foo() {}"}, {"sha": "314d9e778d5ae4c5580a30b915d0a78e00e443ee", "filename": "src/test/compile-fail/unwind-tables-panic-required.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fcompile-fail%2Funwind-tables-panic-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fcompile-fail%2Funwind-tables-panic-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funwind-tables-panic-required.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -0,0 +1,10 @@\n+// Tests that the compiler errors if the user tries to turn off unwind tables\n+// when they are required.\n+//\n+// compile-flags: -C panic=unwind -C force-unwind-tables=no\n+// ignore-tidy-linelength\n+//\n+// error-pattern: panic=unwind requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`.\n+\n+pub fn main() {\n+}"}, {"sha": "14c17893764145d49df5ceec4b9e0939cdaec524", "filename": "src/test/compile-fail/unwind-tables-target-required.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fcompile-fail%2Funwind-tables-target-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fcompile-fail%2Funwind-tables-target-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funwind-tables-target-required.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -0,0 +1,11 @@\n+// Tests that the compiler errors if the user tries to turn off unwind tables\n+// when they are required.\n+//\n+// only-x86_64-windows-msvc\n+// compile-flags: -C force-unwind-tables=no\n+// ignore-tidy-linelength\n+//\n+// error-pattern: target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`.\n+\n+pub fn main() {\n+}"}, {"sha": "a443db40732ac4acdff2001e07e09ea3ae629353", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -17,9 +17,6 @@ LL | fn foo() -> bool {\n    |    ---      ^^^^ expected `bool`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-LL |\n-LL |     break true;\n-   |               - help: consider removing this semicolon\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8bf725cb5ee38129377237df1aafdaf074432f19", "filename": "src/test/ui/typeck/issue-67971.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fui%2Ftypeck%2Fissue-67971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fui%2Ftypeck%2Fissue-67971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-67971.rs?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -0,0 +1,9 @@\n+struct S {}\n+\n+fn foo(ctx: &mut S) -> String { //~ ERROR mismatched types\n+    // Don't suggest to remove semicolon as it won't fix anything\n+    ctx.sleep = 0;\n+    //~^ ERROR no field `sleep` on type `&mut S`\n+}\n+\n+fn main() {}"}, {"sha": "36ad3fcb342a88c0b3c2db172d9476d2fcbeedb8", "filename": "src/test/ui/typeck/issue-67971.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fui%2Ftypeck%2Fissue-67971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftest%2Fui%2Ftypeck%2Fissue-67971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-67971.stderr?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -0,0 +1,18 @@\n+error[E0609]: no field `sleep` on type `&mut S`\n+  --> $DIR/issue-67971.rs:5:9\n+   |\n+LL |     ctx.sleep = 0;\n+   |         ^^^^^ unknown field\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67971.rs:3:24\n+   |\n+LL | fn foo(ctx: &mut S) -> String {\n+   |    ---                 ^^^^^^ expected struct `std::string::String`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0609.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "988a226706dc0debe01b8fc8c092c837ead55ac0", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=f8d394e5184fe3af761ea1e5ba73f993cfb36dfe", "patch": "@@ -25,10 +25,6 @@\n # read privileges on it). CI will fail otherwise.\n MAINTAINERS = {\n     'miri': {'oli-obk', 'RalfJung', 'eddyb'},\n-    'clippy-driver': {\n-        'Manishearth', 'llogiq', 'mcarton', 'oli-obk', 'phansch', 'flip1995',\n-        'yaahc',\n-    },\n     'rls': {'Xanewok'},\n     'rustfmt': {'topecongiro'},\n     'book': {'carols10cents', 'steveklabnik'},\n@@ -45,7 +41,6 @@\n \n REPOS = {\n     'miri': 'https://github.com/rust-lang/miri',\n-    'clippy-driver': 'https://github.com/rust-lang/rust-clippy',\n     'rls': 'https://github.com/rust-lang/rls',\n     'rustfmt': 'https://github.com/rust-lang/rustfmt',\n     'book': 'https://github.com/rust-lang/book',"}]}