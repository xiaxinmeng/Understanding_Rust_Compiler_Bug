{"sha": "435299be3062c67dc3c61b36c5e30bbfa876ee1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTI5OWJlMzA2MmM2N2RjM2M2MWIzNmM1ZTMwYmJmYTg3NmVlMWU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-09T22:26:16Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-09T22:26:16Z"}, "message": "rustfmt tests", "tree": {"sha": "f1543073ab830c23ea10695f7001afebad13628b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1543073ab830c23ea10695f7001afebad13628b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435299be3062c67dc3c61b36c5e30bbfa876ee1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435299be3062c67dc3c61b36c5e30bbfa876ee1e", "html_url": "https://github.com/rust-lang/rust/commit/435299be3062c67dc3c61b36c5e30bbfa876ee1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435299be3062c67dc3c61b36c5e30bbfa876ee1e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1218145bc9490ca156cc7a26e922c86c2afe67f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1218145bc9490ca156cc7a26e922c86c2afe67f0", "html_url": "https://github.com/rust-lang/rust/commit/1218145bc9490ca156cc7a26e922c86c2afe67f0"}], "stats": {"total": 3866, "additions": 1882, "deletions": 1984}, "files": [{"sha": "d5fef5889711c8c2639916237ff85dc23b51f507", "filename": "tests/auxiliary/test_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fauxiliary%2Ftest_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fauxiliary%2Ftest_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fauxiliary%2Ftest_macro.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n pub trait A {}\n \n macro_rules! __implicit_hasher_test_macro {"}, {"sha": "df84009c88901394e87e69200f1588ba7b8872d2", "filename": "tests/run-pass/associated-constant-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fassociated-constant-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fassociated-constant-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fassociated-constant-ice.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n pub trait Trait {\n     const CONSTANT: u8;\n }"}, {"sha": "7e1f13d44609381d8cbdea35496710cb60dcf119", "filename": "tests/run-pass/cc_seme.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fcc_seme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fcc_seme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcc_seme.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[allow(dead_code)]\n enum Baz {\n     One,\n@@ -19,18 +18,15 @@ struct Test {\n     b: Baz,\n }\n \n-fn main() { }\n+fn main() {}\n \n pub fn foo() {\n     use Baz::*;\n     let x = Test { t: Some(0), b: One };\n \n     match x {\n         Test { t: Some(_), b: One } => unreachable!(),\n-        Test {\n-            t: Some(42),\n-            b: Two,\n-        } => unreachable!(),\n+        Test { t: Some(42), b: Two } => unreachable!(),\n         Test { t: None, .. } => unreachable!(),\n         Test { .. } => unreachable!(),\n     }"}, {"sha": "6e64f174e4cede607f36e89b1410a11a6855410e", "filename": "tests/run-pass/enum-glob-import-crate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fenum-glob-import-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fenum-glob-import-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenum-glob-import-crate.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::all)]\n #![allow(unused_imports)]\n \n use std::*;\n \n-fn main() { }\n+fn main() {}"}, {"sha": "87f2afaa60234d5fe06b256f45b895d87372ee44", "filename": "tests/run-pass/ice-1588.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-1588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-1588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1588.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,17 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::all)]\n \n fn main() {\n     match 1 {\n-        1 => {}\n+        1 => {},\n         2 => {\n             [0; 1];\n-        }\n-        _ => {}\n+        },\n+        _ => {},\n     }\n }"}, {"sha": "ddb4367c91400abfb2c738317f1252b302b5b145", "filename": "tests/run-pass/ice-1782.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-1782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-1782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1782.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,20 +7,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(dead_code, unused_variables)]\n \n /// Should not trigger an ICE in `SpanlessEq` / `consts::constant`\n ///\n /// Issue: https://github.com/rust-lang/rust-clippy/issues/1782\n-\n use std::{mem, ptr};\n \n fn spanless_eq_ice() {\n     let txt = \"something\";\n     match txt {\n-        \"something\" => unsafe { ptr::write(ptr::null_mut() as *mut u32, mem::transmute::<[u8; 4], _>([0, 0, 0, 255])) },\n-        _ => unsafe { ptr::write(ptr::null_mut() as *mut u32, mem::transmute::<[u8; 4], _>([13, 246, 24, 255])) },\n+        \"something\" => unsafe {\n+            ptr::write(\n+                ptr::null_mut() as *mut u32,\n+                mem::transmute::<[u8; 4], _>([0, 0, 0, 255]),\n+            )\n+        },\n+        _ => unsafe {\n+            ptr::write(\n+                ptr::null_mut() as *mut u32,\n+                mem::transmute::<[u8; 4], _>([13, 246, 24, 255]),\n+            )\n+        },\n     }\n }\n "}, {"sha": "2a0cdb19fce33a037d8e0f1d1f1896774a40377e", "filename": "tests/run-pass/ice-1969.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-1969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-1969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1969.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::all)]\n \n-fn main() { }\n+fn main() {}\n \n pub trait Convert {\n     type Action: From<*const f64>;"}, {"sha": "804f416800c40fc8e537d2571e36472d2a551b54", "filename": "tests/run-pass/ice-2499.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2499.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(dead_code, clippy::char_lit_as_u8, clippy::needless_bool)]\n \n /// Should not trigger an ICE in `SpanlessHash` / `consts::constant`\n@@ -20,15 +17,17 @@ fn f(s: &[u8]) -> bool {\n     let t = s[0] as char;\n \n     match t {\n-        'E' | 'W' => {}\n-        'T' => if s[0..4] != ['0' as u8; 4] {\n-            return false;\n-        } else {\n-            return true;\n+        'E' | 'W' => {},\n+        'T' => {\n+            if s[0..4] != ['0' as u8; 4] {\n+                return false;\n+            } else {\n+                return true;\n+            }\n         },\n         _ => {\n             return false;\n-        }\n+        },\n     }\n     true\n }"}, {"sha": "e91b71b3a1c7b43cff7027abd9088858421a36c2", "filename": "tests/run-pass/ice-2594.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2594.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(dead_code, unused_variables)]\n \n /// Should not trigger an ICE in `SpanlessHash` / `consts::constant`\n@@ -21,7 +20,7 @@ fn spanless_hash_ice() {\n     match txt {\n         \"something\" => {\n             let mut headers = [empty_header; 1];\n-        }\n+        },\n         \"\" => (),\n         _ => (),\n     }"}, {"sha": "9d00f2bacd0df27136d72c818a9d47e4926b2c53", "filename": "tests/run-pass/ice-2727.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2727.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n pub fn f(new: fn()) {\n     new();\n }"}, {"sha": "533cc3b952a1da9decc2b56bda6dbc6c97b2dcb6", "filename": "tests/run-pass/ice-2760.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2760.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-#![allow(unused_variables, clippy::blacklisted_name,\n-         clippy::needless_pass_by_value, dead_code)]\n+#![allow(\n+    unused_variables,\n+    clippy::blacklisted_name,\n+    clippy::needless_pass_by_value,\n+    dead_code\n+)]\n \n // This should not compile-fail with:\n //"}, {"sha": "ae51f0362079dd3e23cdec6b7b5d10cdbe70afcf", "filename": "tests/run-pass/ice-2774.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2774.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n use std::collections::HashSet;\n \n // See https://github.com/rust-lang/rust-clippy/issues/2774\n@@ -26,18 +23,14 @@ pub struct Foo {}\n // This should not cause a 'cannot relate bound region' ICE\n pub fn add_barfoos_to_foos<'a>(bars: &HashSet<&'a Bar>) {\n     let mut foos = HashSet::new();\n-    foos.extend(\n-        bars.iter().map(|b| &b.foo)\n-    );\n+    foos.extend(bars.iter().map(|b| &b.foo));\n }\n \n #[allow(clippy::implicit_hasher)]\n // Also this should not cause a 'cannot relate bound region' ICE\n pub fn add_barfoos_to_foos2(bars: &HashSet<&Bar>) {\n     let mut foos = HashSet::new();\n-    foos.extend(\n-        bars.iter().map(|b| &b.foo)\n-    );\n+    foos.extend(bars.iter().map(|b| &b.foo));\n }\n \n fn main() {}"}, {"sha": "970ac5bd3a814b675fa6024f7768e783896eb80d", "filename": "tests/run-pass/ice-2865.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-2865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2865.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[allow(dead_code)]\n struct Ice {\n-    size: String\n+    size: String,\n }\n \n impl<'a> From<String> for Ice {"}, {"sha": "7a26f4c3925d16bc19e69e69e0810e3b92d38123", "filename": "tests/run-pass/ice-3151.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-3151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-3151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-3151.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[derive(Clone)]\n pub struct HashMap<V, S> {\n     hash_builder: S,\n@@ -17,7 +16,7 @@ pub struct HashMap<V, S> {\n #[derive(Clone)]\n pub struct RawTable<V> {\n     size: usize,\n-    val: V\n+    val: V,\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "b839ac2a21403826b7e4d983df0323967b9b7f65", "filename": "tests/run-pass/ice-700.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice-700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-700.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::all)]\n \n fn core() {}"}, {"sha": "b2b331bd342cb74eeb6eaa22f79327f37e31fdee", "filename": "tests/run-pass/ice_exacte_size.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice_exacte_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fice_exacte_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice_exacte_size.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::all)]\n \n #[allow(dead_code)]"}, {"sha": "0241d2adcf72f23edd4c8d14fd038a1423bcdf67", "filename": "tests/run-pass/if_same_then_else.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fif_same_then_else.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::if_same_then_else)]\n \n fn main() {}"}, {"sha": "a534249204575ed12db6618f70b62fff36fff1e6", "filename": "tests/run-pass/issue-2862.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fissue-2862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fissue-2862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-2862.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n pub trait FooMap {\n     fn map<B, F: Fn() -> B>(&self, f: F) -> B;\n }"}, {"sha": "9f1195a4ac0b5e4c8dbedab14a873bca2a2b1357", "filename": "tests/run-pass/issue-825.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fissue-825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fissue-825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-825.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(warnings)]\n \n // this should compile in a reasonable amount of time\n fn rust_type_id(name: &str) {\n-    if \"bool\" == &name[..] || \"uint\" == &name[..] || \"u8\" == &name[..] || \"u16\" == &name[..] || \"u32\" == &name[..]\n-        || \"f32\" == &name[..] || \"f64\" == &name[..] || \"i8\" == &name[..] || \"i16\" == &name[..]\n-        || \"i32\" == &name[..] || \"i64\" == &name[..] || \"Self\" == &name[..] || \"str\" == &name[..]\n+    if \"bool\" == &name[..]\n+        || \"uint\" == &name[..]\n+        || \"u8\" == &name[..]\n+        || \"u16\" == &name[..]\n+        || \"u32\" == &name[..]\n+        || \"f32\" == &name[..]\n+        || \"f64\" == &name[..]\n+        || \"i8\" == &name[..]\n+        || \"i16\" == &name[..]\n+        || \"i32\" == &name[..]\n+        || \"i64\" == &name[..]\n+        || \"Self\" == &name[..]\n+        || \"str\" == &name[..]\n     {\n         unreachable!();\n     }"}, {"sha": "a81f8f55dc8844b6fa440c8e27e5de295050d286", "filename": "tests/run-pass/issues_loop_mut_cond.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fissues_loop_mut_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fissues_loop_mut_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissues_loop_mut_cond.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(dead_code)]\n \n /// Issue: https://github.com/rust-lang/rust-clippy/issues/2596"}, {"sha": "661f2ac1dc728f027f08d7887ea54477d45cedc8", "filename": "tests/run-pass/match_same_arms_const.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fmatch_same_arms_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fmatch_same_arms_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmatch_same_arms_const.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::match_same_arms)]\n \n const PRICE_OF_SWEETS: u32 = 5;\n@@ -21,7 +18,7 @@ pub fn price(thing: &str) -> u32 {\n         \"rolo\" => PRICE_OF_SWEETS,\n         \"advice\" => PRICE_OF_KINDNESS,\n         \"juice\" => PRICE_OF_DRINKS,\n-        _ => panic!()\n+        _ => panic!(),\n     }\n }\n "}, {"sha": "f1a2cad3ae73d03ee9eb74882756eff9c402aaa6", "filename": "tests/run-pass/mut_mut_macro.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmut_mut_macro.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::mut_mut, clippy::zero_ptr, clippy::cmp_nan)]\n #![allow(dead_code)]\n "}, {"sha": "81b7785571195e0ff0c2dc7cfbc9c696776119e0", "filename": "tests/run-pass/needless_borrow_fp.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fneedless_borrow_fp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fneedless_borrow_fp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fneedless_borrow_fp.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,16 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #[deny(clippy::all)]\n-\n #[derive(Debug)]\n pub enum Error {\n-    Type(\n-        &'static str,\n-    ),\n+    Type(&'static str),\n }\n \n fn main() {}"}, {"sha": "9648f530c2a8d20b954cb54eca6b0d929e32efac", "filename": "tests/run-pass/needless_lifetimes_impl_trait.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::needless_lifetimes)]\n #![allow(dead_code)]\n "}, {"sha": "9ac47599ea065ce89a2b3ea0aaa2e236192feef1", "filename": "tests/run-pass/procedural_macro.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fprocedural_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fprocedural_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fprocedural_macro.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[macro_use]\n extern crate clippy_mini_macro_test;\n \n@@ -17,6 +16,5 @@ fn main() {\n     println!(\"{:?}\", x);\n }\n \n-\n #[derive(ClippyMiniMacroTest, Debug)]\n-struct Foo;\n\\ No newline at end of file\n+struct Foo;"}, {"sha": "b109eecf624e960a105fed0012cf4edad5e98a4c", "filename": "tests/run-pass/regressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregressions.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::blacklisted_name)]\n \n pub fn foo(bar: *const u8) {"}, {"sha": "045cf001eb23271ce2d3508ddc5545ab3c4f451c", "filename": "tests/run-pass/returns.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Freturns.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[deny(warnings)]\n fn cfg_return() -> i32 {\n-    #[cfg(unix)] return 1;\n-    #[cfg(not(unix))] return 2;\n+    #[cfg(unix)]\n+    return 1;\n+    #[cfg(not(unix))]\n+    return 2;\n }\n \n #[deny(warnings)]"}, {"sha": "80fc88f30df55774df206b6286af796670cd2664", "filename": "tests/run-pass/single-match-else.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fsingle-match-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fsingle-match-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsingle-match-else.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::single_match_else)]\n \n fn main() {"}, {"sha": "8b6c6557b4947e4335ccb641bf1665d5d0401623", "filename": "tests/run-pass/used_underscore_binding_macro.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fused_underscore_binding_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fused_underscore_binding_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fused_underscore_binding_macro.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::useless_attribute)] //issue #2910\n \n #[macro_use]"}, {"sha": "e7f5ddb561fc956b0cde47caf4956d9c6da36623", "filename": "tests/run-pass/whitelist/conf_whitelisted.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fwhitelist%2Fconf_whitelisted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Frun-pass%2Fwhitelist%2Fconf_whitelisted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fwhitelist%2Fconf_whitelisted.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,5 +7,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn main() {}"}, {"sha": "31781277ae8b79ad048e660b1f8b7ae7f0a692b4", "filename": "tests/ui-toml/bad_toml/conf_bad_toml.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // error-pattern: error reading Clippy's configuration file\n \n-\n-\n-\n fn main() {}"}, {"sha": "2307bfff21ca35e6ddecd5be412cad06aeba35fc", "filename": "tests/ui-toml/bad_toml_type/conf_bad_type.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a `Vec < String >` but is a `integer`\n-\n-\n-\n+// error-pattern: error reading Clippy's configuration file: `blacklisted-names` is expected to be a\n+// `Vec < String >` but is a `integer`\n \n fn main() {}"}, {"sha": "b00a21b3f2f7f0a41cf195b2c45dd18779e30907", "filename": "tests/ui-toml/toml_blacklist/conf_french_blacklisted_name.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(dead_code)]\n #![allow(clippy::single_match)]\n #![allow(unused_variables)]"}, {"sha": "39de0de0dc726b9b69d625f8d153eb5ecfd848a7", "filename": "tests/ui-toml/toml_trivially_copy/test.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,8 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![allow(clippy::many_single_char_names)]\n \n #[derive(Copy, Clone)]\n@@ -17,11 +15,9 @@ struct Foo(u8);\n #[derive(Copy, Clone)]\n struct Bar(u32);\n \n-fn good(a: &mut u32, b: u32, c: &Bar, d: &u32) {\n-}\n+fn good(a: &mut u32, b: u32, c: &Bar, d: &u32) {}\n \n-fn bad(x: &u16, y: &Foo) {\n-}\n+fn bad(x: &u16, y: &Foo) {}\n \n fn main() {\n     let (mut a, b, c, d, x, y) = (0, 0, Bar(0), 0, 0, Foo(0));"}, {"sha": "c8e6268e95dc6b498788db973a2ea83339bbaecf", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // error-pattern: error reading Clippy's configuration file: unknown key `foobar`\n \n-\n-\n-\n fn main() {}"}, {"sha": "666c4325706351b9f488b02234a252e3728b4bbc", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -8,7 +8,13 @@\n // except according to those terms.\n \n #![warn(clippy::absurd_extreme_comparisons)]\n-#![allow(unused, clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::needless_pass_by_value)]\n+#![allow(\n+    unused,\n+    clippy::eq_op,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::needless_pass_by_value\n+)]\n \n #[rustfmt::skip]\n fn main() {"}, {"sha": "8eefb6af01d87c1718f51fab4cc43c04c2d4d230", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::approx_constant)]\n #[allow(unused, clippy::shadow_unrelated, clippy::similar_names, clippy::unreadable_literal)]\n fn main() {"}, {"sha": "00de38039a731655bdc14e6454a0a800a14e5967", "filename": "tests/ui/arithmetic.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![warn(clippy::integer_arithmetic, clippy::float_arithmetic)]\n-#![allow(unused, clippy::shadow_reuse, clippy::shadow_unrelated, clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(\n+    unused,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation\n+)]\n \n #[rustfmt::skip]\n fn main() {"}, {"sha": "75cd75438239c7813755fcfb6a397458225c8b21", "filename": "tests/ui/assign_ops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #[allow(dead_code, unused_assignments)]\n #[warn(clippy::assign_op_pattern)]\n fn main() {"}, {"sha": "24d0d77a20dacc6f8b39971445ecf53afc5c3acb", "filename": "tests/ui/assign_ops2.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[allow(unused_assignments)]\n #[warn(clippy::misrefactored_assign_op, clippy::assign_op_pattern)]\n fn main() {\n@@ -65,6 +61,4 @@ fn cow_add_assign() {\n     // this should not as cow<str> Add is not commutative\n     buf = cows + buf;\n     println!(\"{}\", buf);\n-\n }\n-"}, {"sha": "413c30a194532d4ba00ebedfd834d0b587e01d8c", "filename": "tests/ui/attrs.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::inline_always, clippy::deprecated_semver)]\n \n #[inline(always)]\n@@ -30,22 +26,27 @@ fn false_positive_stmt() {\n \n #[inline(always)]\n fn empty_and_false_positive_stmt() {\n-    ;\n     unreachable!();\n }\n \n #[deprecated(since = \"forever\")]\n-pub const SOME_CONST : u8 = 42;\n+pub const SOME_CONST: u8 = 42;\n \n #[deprecated(since = \"1\")]\n-pub const ANOTHER_CONST : u8 = 23;\n+pub const ANOTHER_CONST: u8 = 23;\n \n #[deprecated(since = \"0.1.1\")]\n-pub const YET_ANOTHER_CONST : u8 = 0;\n+pub const YET_ANOTHER_CONST: u8 = 0;\n \n fn main() {\n     test_attr_lint();\n-    if false { false_positive_expr() }\n-    if false { false_positive_stmt() }\n-    if false { empty_and_false_positive_stmt() }\n+    if false {\n+        false_positive_expr()\n+    }\n+    if false {\n+        false_positive_stmt()\n+    }\n+    if false {\n+        empty_and_false_positive_stmt()\n+    }\n }"}, {"sha": "4b7729e23b1f771a23fda87c9434858e23e11f9e", "filename": "tests/ui/author.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n fn main() {\n-\n     #[clippy::author]\n     let x: char = 0x45 as char;\n }"}, {"sha": "40cc0d7a919470eab5e227acb7f335938b475d67", "filename": "tests/ui/author/call.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fcall.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n fn main() {\n     #[clippy::author]\n     let _ = ::std::cmp::min(3, 4);"}, {"sha": "4acd0b452bbb295525ea4e4de668a8d41e748d2e", "filename": "tests/ui/author/for_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(stmt_expr_attributes)]\n \n fn main() {"}, {"sha": "4c220dded8a4f675b967f919d165df14790107e5", "filename": "tests/ui/author/matches.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fauthor%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(tool_attributes)]\n \n fn main() {"}, {"sha": "bda952db723abe2c39e2679648a6fca824f442d6", "filename": "tests/ui/bit_masks.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,15 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n-const THREE_BITS : i64 = 7;\n-const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n+const THREE_BITS: i64 = 7;\n+const EVEN_MORE_REDIRECTION: i64 = THREE_BITS;\n \n #[warn(clippy::bad_bit_mask)]\n-#[allow(clippy::ineffective_bit_mask, clippy::identity_op, clippy::no_effect, clippy::unnecessary_operation)]\n+#[allow(\n+    clippy::ineffective_bit_mask,\n+    clippy::identity_op,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation\n+)]\n fn main() {\n     let x = 5;\n "}, {"sha": "fef73e9d84fc342b64faf1a4dbe48485fb834bae", "filename": "tests/ui/blacklisted_name.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n-#![allow(dead_code, clippy::similar_names, clippy::single_match, clippy::toplevel_ref_arg, unused_mut, unused_variables)]\n+#![allow(\n+    dead_code,\n+    clippy::similar_names,\n+    clippy::single_match,\n+    clippy::toplevel_ref_arg,\n+    unused_mut,\n+    unused_variables\n+)]\n #![warn(clippy::blacklisted_name)]\n \n fn test(foo: ()) {}"}, {"sha": "eaaf5e050bfaf67ea9c402ce24222d9c6ff680c0", "filename": "tests/ui/block_in_if_condition.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,33 +7,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::block_in_if_condition_expr)]\n #![warn(clippy::block_in_if_condition_stmt)]\n #![allow(unused, clippy::let_and_return)]\n #![warn(clippy::nonminimal_bool)]\n \n-\n macro_rules! blocky {\n-    () => {{true}}\n+    () => {{\n+        true\n+    }};\n }\n \n macro_rules! blocky_too {\n     () => {{\n         let r = true;\n         r\n-    }}\n+    }};\n }\n \n fn macro_if() {\n-    if blocky!() {\n-    }\n+    if blocky!() {}\n \n-    if blocky_too!() {\n-    }\n+    if blocky_too!() {}\n }\n \n fn condition_has_block() -> i32 {\n@@ -55,7 +50,7 @@ fn condition_has_block_with_single_expression() -> i32 {\n     }\n }\n \n-fn predicate<F: FnOnce(T) -> bool, T>(pfn: F, val:T) -> bool {\n+fn predicate<F: FnOnce(T) -> bool, T>(pfn: F, val: T) -> bool {\n     pfn(val)\n }\n \n@@ -65,11 +60,24 @@ fn pred_test() {\n     // this is a sneaky case, where the block isn't directly in the condition, but is actually\n     // inside a closure that the condition is using.  same principle applies.  add some extra\n     // expressions to make sure linter isn't confused by them.\n-    if v == 3 && sky == \"blue\" && predicate(|x| { let target = 3; x == target }, v) {\n-    }\n-\n-    if predicate(|x| { let target = 3; x == target }, v) {\n-    }\n+    if v == 3\n+        && sky == \"blue\"\n+        && predicate(\n+            |x| {\n+                let target = 3;\n+                x == target\n+            },\n+            v,\n+        )\n+    {}\n+\n+    if predicate(\n+        |x| {\n+            let target = 3;\n+            x == target\n+        },\n+        v,\n+    ) {}\n }\n \n fn condition_is_normal() -> i32 {\n@@ -82,9 +90,7 @@ fn condition_is_normal() -> i32 {\n }\n \n fn closure_without_block() {\n-    if predicate(|x| x == 3, 6) {\n-\n-    }\n+    if predicate(|x| x == 3, 6) {}\n }\n \n fn condition_is_unsafe_block() {\n@@ -96,8 +102,7 @@ fn condition_is_unsafe_block() {\n     }\n }\n \n-fn main() {\n-}\n+fn main() {}\n \n fn macro_in_closure() {\n     let option = Some(true);"}, {"sha": "30b5acf2d976546b9f56156b7d41c30555c46813", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,19 +7,47 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::bool_comparison)]\n fn main() {\n     let x = true;\n-    if x == true { \"yes\" } else { \"no\" };\n-    if x == false { \"yes\" } else { \"no\" };\n-    if true == x { \"yes\" } else { \"no\" };\n-    if false == x { \"yes\" } else { \"no\" };\n-    if x != true { \"yes\" } else { \"no\" };\n-    if x != false { \"yes\" } else { \"no\" };\n-    if true != x { \"yes\" } else { \"no\" };\n-    if false != x { \"yes\" } else { \"no\" };\n+    if x == true {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if x == false {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if true == x {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if false == x {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if x != true {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if x != false {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if true != x {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n+    if false != x {\n+        \"yes\"\n+    } else {\n+        \"no\"\n+    };\n }"}, {"sha": "8eb1b52577ce12cf41c77081116824c13ece1537", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::nonminimal_bool, clippy::logic_bug)]\n \n #[allow(unused, clippy::many_single_char_names)]\n@@ -71,58 +68,78 @@ fn methods_with_negation() {\n // Simplified versions of https://github.com/rust-lang/rust-clippy/issues/2638\n // clippy::nonminimal_bool should only check the built-in Result and Some type, not\n // any other types like the following.\n-enum CustomResultOk<E> { Ok, Err(E) }\n-enum CustomResultErr<E> { Ok, Err(E) }\n-enum CustomSomeSome<T> { Some(T), None }\n-enum CustomSomeNone<T> { Some(T), None }\n+enum CustomResultOk<E> {\n+    Ok,\n+    Err(E),\n+}\n+enum CustomResultErr<E> {\n+    Ok,\n+    Err(E),\n+}\n+enum CustomSomeSome<T> {\n+    Some(T),\n+    None,\n+}\n+enum CustomSomeNone<T> {\n+    Some(T),\n+    None,\n+}\n \n impl<E> CustomResultOk<E> {\n-    pub fn is_ok(&self) -> bool { true }\n+    pub fn is_ok(&self) -> bool {\n+        true\n+    }\n }\n \n impl<E> CustomResultErr<E> {\n-    pub fn is_err(&self) -> bool { true }\n+    pub fn is_err(&self) -> bool {\n+        true\n+    }\n }\n \n impl<T> CustomSomeSome<T> {\n-    pub fn is_some(&self) -> bool { true }\n+    pub fn is_some(&self) -> bool {\n+        true\n+    }\n }\n \n impl<T> CustomSomeNone<T> {\n-    pub fn is_none(&self) -> bool { true }\n+    pub fn is_none(&self) -> bool {\n+        true\n+    }\n }\n \n fn dont_warn_for_custom_methods_with_negation() {\n     let res = CustomResultOk::Err(\"Error\");\n     // Should not warn and suggest 'is_err()' because the type does not\n     // implement is_err().\n-    if !res.is_ok() { }\n+    if !res.is_ok() {}\n \n     let res = CustomResultErr::Err(\"Error\");\n     // Should not warn and suggest 'is_ok()' because the type does not\n     // implement is_ok().\n-    if !res.is_err() { }\n+    if !res.is_err() {}\n \n     let res = CustomSomeSome::Some(\"thing\");\n     // Should not warn and suggest 'is_none()' because the type does not\n     // implement is_none().\n-    if !res.is_some() { }\n+    if !res.is_some() {}\n \n     let res = CustomSomeNone::Some(\"thing\");\n     // Should not warn and suggest 'is_some()' because the type does not\n     // implement is_some().\n-    if !res.is_none() { }\n+    if !res.is_none() {}\n }\n \n // Only Built-in Result and Some types should suggest the negated alternative\n fn warn_for_built_in_methods_with_negation() {\n     let res: Result<usize, usize> = Ok(1);\n-    if !res.is_ok() { }\n-    if !res.is_err() { }\n+    if !res.is_ok() {}\n+    if !res.is_err() {}\n \n     let res = Some(1);\n-    if !res.is_some() { }\n-    if !res.is_none() { }\n+    if !res.is_some() {}\n+    if !res.is_none() {}\n }\n \n #[allow(clippy::neg_cmp_op_on_partial_ord)]"}, {"sha": "cf204150f8b1b9a51032c4c2bc61bdf57187b200", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![deny(clippy::borrowed_box)]\n #![allow(clippy::blacklisted_name)]\n #![allow(unused_variables)]\n@@ -25,7 +21,7 @@ pub fn test2() {\n }\n \n struct Test3<'a> {\n-    foo: &'a Box<bool>\n+    foo: &'a Box<bool>,\n }\n \n trait Test4 {\n@@ -49,7 +45,7 @@ pub fn test6() {\n }\n \n struct Test7<'a> {\n-    foo: &'a Box<Any>\n+    foo: &'a Box<Any>,\n }\n \n trait Test8 {\n@@ -71,7 +67,7 @@ pub fn test10() {\n }\n \n struct Test11<'a> {\n-    foo: &'a Box<Any + Send>\n+    foo: &'a Box<Any + Send>,\n }\n \n trait Test12 {\n@@ -84,7 +80,7 @@ impl<'a> Test12 for Test11<'a> {\n     }\n }\n \n-fn main(){\n+fn main() {\n     test1(&mut Box::new(false));\n     test2();\n     test5(&mut (Box::new(false) as Box<Any>));"}, {"sha": "48523054097256fa1f7d026de6e4f9b55c99b529", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,18 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n #![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n #![allow(clippy::blacklisted_name)]\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {\n         let _: Box<$x> = Box::new($init);\n-    }\n+    };\n }\n \n fn test_macro() {\n@@ -28,15 +24,16 @@ pub fn test(foo: Box<Vec<bool>>) {\n     println!(\"{:?}\", foo.get(0))\n }\n \n-pub fn test2(foo: Box<Fn(Vec<u32>)>) { // pass if #31 is fixed\n+pub fn test2(foo: Box<Fn(Vec<u32>)>) {\n+    // pass if #31 is fixed\n     foo(vec![1, 2, 3])\n }\n \n pub fn test_local_not_linted() {\n     let _: Box<Vec<bool>>;\n }\n \n-fn main(){\n+fn main() {\n     test(Box::new(Vec::new()));\n     test2(Box::new(|v| println!(\"{:?}\", v)));\n     test_macro();"}, {"sha": "66a7e318f8af5f6f2ce205d70e49b236ad27946d", "filename": "tests/ui/builtin-type-shadow.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbuiltin-type-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbuiltin-type-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,15 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::builtin_type_shadow)]\n \n fn foo<u32>(a: u32) -> u32 {\n     42\n     // ^ rustc's type error\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "6bc9b5ddecd03ee6bd2ddb87eccd77d27a5934d2", "filename": "tests/ui/bytecount.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[deny(clippy::naive_bytecount)]\n fn main() {\n     let x = vec![0_u8; 16];"}, {"sha": "45e878e9d800947f9b12695dfb383f56ef3ae9a4", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n-#[warn(clippy::cast_precision_loss, clippy::cast_possible_truncation, clippy::cast_sign_loss, clippy::cast_possible_wrap, clippy::cast_lossless)]\n+#[warn(\n+    clippy::cast_precision_loss,\n+    clippy::cast_possible_truncation,\n+    clippy::cast_sign_loss,\n+    clippy::cast_possible_wrap,\n+    clippy::cast_lossless\n+)]\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     // Test clippy::cast_precision_loss\n@@ -49,7 +51,7 @@ fn main() {\n     false as bool;\n     &1i32 as &i32;\n     // Should not trigger\n-    let v = vec!(1);\n+    let v = vec![1];\n     &v as &[i32];\n     1.0 as f64;\n     1 as u64;"}, {"sha": "efc56ea2bbc131d9ffda9b59c973ab6a252b14e3", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n //! Test casts for alignment issues\n \n #![feature(libc)]"}, {"sha": "e52a756c003d13de3361699ea47a2454f82c631c", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #[warn(clippy::cast_lossless)]\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {"}, {"sha": "593ffdd276634e5ca0b7aae3943f7d25a8ed76d3", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,8 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #[warn(clippy::cast_lossless)]\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {"}, {"sha": "8f691104c517e6e8f829ee1452ff7d6b5afbe92c", "filename": "tests/ui/cast_size.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcast_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-#[warn(clippy::cast_precision_loss, clippy::cast_possible_truncation, clippy::cast_sign_loss, clippy::cast_possible_wrap, clippy::cast_lossless)]\n+#[warn(\n+    clippy::cast_precision_loss,\n+    clippy::cast_possible_truncation,\n+    clippy::cast_sign_loss,\n+    clippy::cast_possible_wrap,\n+    clippy::cast_lossless\n+)]\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     // Casting from *size"}, {"sha": "663962afeaef491a77af6b663be5636a0e2ab29d", "filename": "tests/ui/char_lit_as_u8.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::char_lit_as_u8)]\n #![allow(unused_variables)]\n fn main() {"}, {"sha": "4d250a80e903affc7f948f99fbc827489ed07830", "filename": "tests/ui/checked_unwrap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fchecked_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fchecked_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n #![allow(clippy::if_same_then_else)]\n \n@@ -43,11 +40,11 @@ fn main() {\n     if x.is_ok() {\n         x = Err(());\n         x.unwrap(); // not unnecessary because of mutation of x\n-        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n+                    // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n     } else {\n         x = Ok(());\n         x.unwrap_err(); // not unnecessary because of mutation of x\n-        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n+                        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n     }\n }\n "}, {"sha": "058cbf7a16cbf0d1ac0bac2b611a3c0374c495fc", "filename": "tests/ui/clone_on_copy_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fclone_on_copy_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fclone_on_copy_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_impl.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use std::marker::PhantomData;\n use std::fmt;\n+use std::marker::PhantomData;\n \n pub struct Key<T> {\n     #[doc(hidden)]"}, {"sha": "82f411d5c9db0bfcbc4129ccb62541543f946d94", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n pub fn dec_read_dec(i: &mut i32) -> i32 {\n     *i -= 1;\n     let ret = *i;"}, {"sha": "d6bdb5894d50f5a9e46b956064ab1f49e42fefeb", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::cmp_nan)]\n #[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {"}, {"sha": "37615c9e1136da7806225210bab5fe92942d5b6e", "filename": "tests/ui/cmp_null.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcmp_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcmp_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,22 +7,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::cmp_null)]\n #![allow(unused_mut)]\n \n use std::ptr;\n \n fn main() {\n     let x = 0;\n-    let p : *const usize = &x;\n+    let p: *const usize = &x;\n     if p == ptr::null() {\n         println!(\"This is surprising!\");\n     }\n     let mut y = 0;\n-    let mut m : *mut usize = &mut y;\n+    let mut m: *mut usize = &mut y;\n     if m == ptr::null_mut() {\n         println!(\"This is surprising, too!\");\n     }"}, {"sha": "53de5136105c143528409205203537f156bb8ab9", "filename": "tests/ui/cmp_owned.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::cmp_owned)]\n #[allow(clippy::unnecessary_operation)]\n fn main() {\n-    fn with_to_string(x : &str) {\n+    fn with_to_string(x: &str) {\n         x != \"foo\".to_string();\n \n         \"foo\".to_string() != x;"}, {"sha": "6828743abf37c629065a13cde5ee05665239c951", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]\n fn main() {"}, {"sha": "9d75de62d74a3e604b0bee0f3a6f81bdca69faee", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::all)]\n #![allow(unused, clippy::needless_pass_by_value)]\n #![feature(associated_type_defaults)]\n@@ -32,19 +29,21 @@ enum E {\n \n impl S {\n     const A: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n-    fn impl_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+    fn impl_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) {}\n }\n \n trait T {\n     const A: Vec<Vec<Box<(u32, u32, u32, u32)>>>;\n     type B = Vec<Vec<Box<(u32, u32, u32, u32)>>>;\n     fn method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>);\n-    fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+    fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) {}\n }\n \n-fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> { vec![] }\n+fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> {\n+    vec![]\n+}\n \n-fn test2(_x: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { }\n+fn test2(_x: Vec<Vec<Box<(u32, u32, u32, u32)>>>) {}\n \n fn test3() {\n     let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n@@ -67,5 +66,4 @@ struct D {\n     ),\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "3e1aa94f96949617bed83f62ffb0c379e42899a8", "filename": "tests/ui/const_static_lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[derive(Debug)]\n struct Foo {}\n "}, {"sha": "00e1d726207ac1344844f504db99cd8e99ae2437", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 82, "deletions": 99, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,13 +7,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(clippy::blacklisted_name, clippy::collapsible_if, clippy::cyclomatic_complexity, clippy::eq_op, clippy::needless_continue,\n-         clippy::needless_return, clippy::never_loop, clippy::no_effect, clippy::zero_divided_by_zero, clippy::unused_unit)]\n-\n-\n+#![allow(\n+    clippy::blacklisted_name,\n+    clippy::collapsible_if,\n+    clippy::cyclomatic_complexity,\n+    clippy::eq_op,\n+    clippy::needless_continue,\n+    clippy::needless_return,\n+    clippy::never_loop,\n+    clippy::no_effect,\n+    clippy::zero_divided_by_zero,\n+    clippy::unused_unit\n+)]\n \n fn bar<T>(_: T) {}\n-fn foo() -> bool { unimplemented!() }\n+fn foo() -> bool {\n+    unimplemented!()\n+}\n \n struct Foo {\n     bar: u8,\n@@ -37,8 +47,8 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         ..10;\n         0..=10;\n         foo();\n-    }\n-    else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         Foo { bar: 42 };\n         0..10;\n         ..;\n@@ -50,30 +60,26 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     if true {\n         Foo { bar: 42 };\n-    }\n-    else {\n+    } else {\n         Foo { bar: 43 };\n     }\n \n     if true {\n         ();\n-    }\n-    else {\n+    } else {\n         ()\n     }\n \n     if true {\n         0..10;\n-    }\n-    else {\n+    } else {\n         0..=10;\n     }\n \n     if true {\n         foo();\n         foo();\n-    }\n-    else {\n+    } else {\n         foo();\n     }\n \n@@ -84,18 +90,19 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n             if true {\n                 a += 7;\n             }\n-            a = -31-a;\n+            a = -31 - a;\n             a\n-        }\n-        _ => { //~ ERROR match arms have same body\n+        },\n+        _ => {\n+            //~ ERROR match arms have same body\n             foo();\n             let mut a = 42 + [23].len() as i32;\n             if true {\n                 a += 7;\n             }\n-            a = -31-a;\n+            a = -31 - a;\n             a\n-        }\n+        },\n     };\n \n     let _ = match Abc::A {\n@@ -110,8 +117,8 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = if true {\n         42\n-    }\n-    else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         42\n     };\n \n@@ -124,8 +131,8 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n                 continue;\n             }\n         }\n-    }\n-    else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         for _ in &[42] {\n             let foo: &Option<_> = &Some::<u8>(42);\n             if true {\n@@ -137,25 +144,19 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n \n     if true {\n-        let bar = if true {\n-            42\n-        }\n-        else {\n-            43\n-        };\n+        let bar = if true { 42 } else { 43 };\n \n-        while foo() { break; }\n-        bar + 1;\n-    }\n-    else { //~ ERROR same body as `if` block\n-        let bar = if true {\n-            42\n+        while foo() {\n+            break;\n         }\n-        else {\n-            43\n-        };\n+        bar + 1;\n+    } else {\n+        //~ ERROR same body as `if` block\n+        let bar = if true { 42 } else { 43 };\n \n-        while foo() { break; }\n+        while foo() {\n+            break;\n+        }\n         bar + 1;\n     }\n \n@@ -166,11 +167,9 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n             10..=15 => 3,\n             _ => 4,\n         };\n-    }\n-    else if false {\n+    } else if false {\n         foo();\n-    }\n-    else if foo() {\n+    } else if foo() {\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n@@ -181,64 +180,57 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     if true {\n         if let Some(a) = Some(42) {}\n-    }\n-    else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         if let Some(a) = Some(42) {}\n     }\n \n     if true {\n         if let (1, .., 3) = (1, 2, 3) {}\n-    }\n-    else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         if let (1, .., 3) = (1, 2, 3) {}\n     }\n \n     if true {\n         if let (1, .., 3) = (1, 2, 3) {}\n-    }\n-    else {\n+    } else {\n         if let (.., 3) = (1, 2, 3) {}\n     }\n \n     if true {\n         if let (1, .., 3) = (1, 2, 3) {}\n-    }\n-    else {\n+    } else {\n         if let (.., 4) = (1, 2, 3) {}\n     }\n \n     if true {\n         if let (1, .., 3) = (1, 2, 3) {}\n-    }\n-    else {\n+    } else {\n         if let (.., 1, 3) = (1, 2, 3) {}\n     }\n \n     if true {\n         if let Some(42) = None {}\n-    }\n-    else {\n+    } else {\n         if let Option::Some(42) = None {}\n     }\n \n     if true {\n         if let Some(42) = None::<u8> {}\n-    }\n-    else {\n+    } else {\n         if let Some(42) = None {}\n     }\n \n     if true {\n         if let Some(42) = None::<u8> {}\n-    }\n-    else {\n+    } else {\n         if let Some(42) = None::<u32> {}\n     }\n \n     if true {\n         if let Some(a) = Some(42) {}\n-    }\n-    else {\n+    } else {\n         if let Some(a) = Some(43) {}\n     }\n \n@@ -290,39 +282,34 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = if true {\n         0.0\n-    } else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         0.0\n     };\n \n     let _ = if true {\n         -0.0\n-    } else { //~ ERROR same body as `if` block\n-        -0.0\n-    };\n-\n-    let _ = if true {\n-        0.0\n     } else {\n+        //~ ERROR same body as `if` block\n         -0.0\n     };\n \n+    let _ = if true { 0.0 } else { -0.0 };\n+\n     // Different NaNs\n-    let _ = if true {\n-        0.0 / 0.0\n-    } else {\n-        std::f32::NAN\n-    };\n+    let _ = if true { 0.0 / 0.0 } else { std::f32::NAN };\n \n     // Same NaNs\n     let _ = if true {\n         std::f32::NAN\n-    } else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         std::f32::NAN\n     };\n \n     let _ = match Some(()) {\n         Some(()) => 0.0,\n-        None => -0.0\n+        None => -0.0,\n     };\n \n     match (Some(42), Some(\"\")) {\n@@ -333,20 +320,18 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     if true {\n         try!(Ok(\"foo\"));\n-    }\n-    else { //~ ERROR same body as `if` block\n+    } else {\n+        //~ ERROR same body as `if` block\n         try!(Ok(\"foo\"));\n     }\n \n     if true {\n         let foo = \"\";\n         return Ok(&foo[0..]);\n-    }\n-    else if false {\n+    } else if false {\n         let foo = \"bar\";\n         return Ok(&foo[0..]);\n-    }\n-    else {\n+    } else {\n         let foo = \"\";\n         return Ok(&foo[0..]);\n     }\n@@ -359,22 +344,20 @@ fn ifs_same_cond() {\n     let b = false;\n \n     if b {\n-    }\n-    else if b { //~ ERROR ifs same condition\n+    } else if b {\n+        //~ ERROR ifs same condition\n     }\n \n     if a == 1 {\n-    }\n-    else if a == 1 { //~ ERROR ifs same condition\n+    } else if a == 1 {\n+        //~ ERROR ifs same condition\n     }\n \n-    if 2*a == 1 {\n-    }\n-    else if 2*a == 2 {\n-    }\n-    else if 2*a == 1 { //~ ERROR ifs same condition\n-    }\n-    else if a == 1 {\n+    if 2 * a == 1 {\n+    } else if 2 * a == 2 {\n+    } else if 2 * a == 1 {\n+        //~ ERROR ifs same condition\n+    } else if a == 1 {\n     }\n \n     // See #659\n@@ -387,14 +370,14 @@ fn ifs_same_cond() {\n     };\n \n     let mut v = vec![1];\n-    if v.pop() == None { // ok, functions\n-    }\n-    else if v.pop() == None {\n+    if v.pop() == None {\n+        // ok, functions\n+    } else if v.pop() == None {\n     }\n \n-    if v.len() == 42 { // ok, functions\n-    }\n-    else if v.len() == 42 {\n+    if v.len() == 42 {\n+        // ok, functions\n+    } else if v.len() == 42 {\n     }\n }\n "}, {"sha": "22d3e138898111c54dd3fd3c255178661229a581", "filename": "tests/ui/copy_iterator.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::copy_iterator)]\n \n #[derive(Copy, Clone)]"}, {"sha": "5fe915a836890bb1d42d344fd2b8fbcad86036bb", "filename": "tests/ui/cstring.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n fn main() {}\n \n #[allow(clippy::result_unwrap_used)]"}, {"sha": "fff677629246cf62417ec531cec57b80083582fb", "filename": "tests/ui/cyclomatic_complexity.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(clippy::all)]\n #![warn(clippy::cyclomatic_complexity)]\n #![allow(unused)]\n@@ -181,8 +180,8 @@ fn bar() {\n \n #[test]\n #[clippy::cyclomatic_complexity = \"0\"]\n-/// Tests are usually complex but simple at the same time. `clippy::cyclomatic_complexity` used to give\n-/// lots of false-positives in tests.\n+/// Tests are usually complex but simple at the same time. `clippy::cyclomatic_complexity` used to\n+/// give lots of false-positives in tests.\n fn dont_warn_on_tests() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -278,7 +277,6 @@ fn cake() {\n     println!(\"whee\");\n }\n \n-\n #[clippy::cyclomatic_complexity = \"0\"]\n pub fn read_file(input_path: &str) -> String {\n     use std::fs::File;\n@@ -288,7 +286,7 @@ pub fn read_file(input_path: &str) -> String {\n         Ok(f) => f,\n         Err(err) => {\n             panic!(\"Can't open {}: {}\", input_path, err);\n-        }\n+        },\n     };\n \n     let mut bytes = Vec::new();\n@@ -297,14 +295,14 @@ pub fn read_file(input_path: &str) -> String {\n         Ok(..) => {},\n         Err(_) => {\n             panic!(\"Can't read {}\", input_path);\n-        }\n+        },\n     };\n \n     match String::from_utf8(bytes) {\n         Ok(contents) => contents,\n         Err(_) => {\n             panic!(\"{} is not UTF-8 encoded\", input_path);\n-        }\n+        },\n     }\n }\n \n@@ -313,8 +311,7 @@ enum Void {}\n #[clippy::cyclomatic_complexity = \"0\"]\n fn void(void: Void) {\n     if true {\n-        match void {\n-        }\n+        match void {}\n     }\n }\n "}, {"sha": "b1da9649f901cf9b3679eba3f5e840f8a64f03ce", "filename": "tests/ui/cyclomatic_complexity_attr_used.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::cyclomatic_complexity)]\n #![warn(unused)]\n "}, {"sha": "c196b27a3a6c49f362dab9eb3fa63901ee053753", "filename": "tests/ui/decimal_literal_representation.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdecimal_literal_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdecimal_literal_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,24 +7,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::decimal_literal_representation)]\n #[allow(unused_variables)]\n fn main() {\n-    let good = (        // Hex:\n-        127,            // 0x7F\n-        256,            // 0x100\n-        511,            // 0x1FF\n-        2048,           // 0x800\n-        4090,           // 0xFFA\n-        16_371,         // 0x3FF3\n-        61_683,         // 0xF0F3\n-        2_131_750_925,  // 0x7F0F_F00D\n+    let good = (\n+        // Hex:\n+        127,           // 0x7F\n+        256,           // 0x100\n+        511,           // 0x1FF\n+        2048,          // 0x800\n+        4090,          // 0xFFA\n+        16_371,        // 0x3FF3\n+        61_683,        // 0xF0F3\n+        2_131_750_925, // 0x7F0F_F00D\n     );\n-    let bad = (        // Hex:\n+    let bad = (\n+        // Hex:\n         32_773,        // 0x8005\n         65_280,        // 0xFF00\n         2_131_750_927, // 0x7F0F_F00F"}, {"sha": "eaa367b0cb3d1c6a43ce38c0ee100800f36f5a2f", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::default_trait_access)]\n \n+use std::default;\n use std::default::Default as D2;\n use std::string;\n-use std::default;\n \n fn main() {\n     let s1: String = Default::default();"}, {"sha": "7a1657424ed58f1c3a6907754e16712755539d63", "filename": "tests/ui/deprecated.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,18 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(str_to_string)]\n-\n #[warn(string_to_string)]\n-\n #[warn(unstable_as_slice)]\n-\n #[warn(unstable_as_mut_slice)]\n-\n #[warn(misaligned_transmute)]\n \n fn main() {}"}, {"sha": "a6020b61337ad05928423afbeece9f2587d9b683", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(untagged_unions)]\n-\n #![allow(dead_code)]\n #![warn(clippy::expl_impl_clone_on_copy)]\n \n@@ -21,21 +17,27 @@ use std::hash::{Hash, Hasher};\n struct Foo;\n \n impl PartialEq<u64> for Foo {\n-    fn eq(&self, _: &u64) -> bool { true }\n+    fn eq(&self, _: &u64) -> bool {\n+        true\n+    }\n }\n \n #[derive(Hash)]\n struct Bar;\n \n impl PartialEq for Bar {\n-    fn eq(&self, _: &Bar) -> bool { true }\n+    fn eq(&self, _: &Bar) -> bool {\n+        true\n+    }\n }\n \n #[derive(Hash)]\n struct Baz;\n \n impl PartialEq<Baz> for Baz {\n-    fn eq(&self, _: &Baz) -> bool { true }\n+    fn eq(&self, _: &Baz) -> bool {\n+        true\n+    }\n }\n \n #[derive(PartialEq)]\n@@ -49,7 +51,9 @@ impl Hash for Bah {\n struct Qux;\n \n impl Clone for Qux {\n-    fn clone(&self) -> Self { Qux }\n+    fn clone(&self) -> Self {\n+        Qux\n+    }\n }\n \n // looks like unions don't support deriving Clone for now\n@@ -60,9 +64,7 @@ union Union {\n \n impl Clone for Union {\n     fn clone(&self) -> Self {\n-        Union {\n-            a: 42,\n-        }\n+        Union { a: 42 }\n     }\n }\n \n@@ -73,7 +75,9 @@ struct Lt<'a> {\n }\n \n impl<'a> Clone for Lt<'a> {\n-    fn clone(&self) -> Self { unimplemented!() }\n+    fn clone(&self) -> Self {\n+        unimplemented!()\n+    }\n }\n \n // Ok, `Clone` cannot be derived because of the big array\n@@ -83,7 +87,9 @@ struct BigArray {\n }\n \n impl Clone for BigArray {\n-    fn clone(&self) -> Self { unimplemented!() }\n+    fn clone(&self) -> Self {\n+        unimplemented!()\n+    }\n }\n \n // Ok, function pointers are not always Clone\n@@ -93,7 +99,9 @@ struct FnPtr {\n }\n \n impl Clone for FnPtr {\n-    fn clone(&self) -> Self { unimplemented!() }\n+    fn clone(&self) -> Self {\n+        unimplemented!()\n+    }\n }\n \n // Ok, generics\n@@ -103,7 +111,9 @@ struct Generic<T> {\n }\n \n impl<T> Clone for Generic<T> {\n-    fn clone(&self) -> Self { unimplemented!() }\n+    fn clone(&self) -> Self {\n+        unimplemented!()\n+    }\n }\n \n fn main() {}"}, {"sha": "3399dba7189658a5521a8d60ce88cbe66b816ebb", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,21 +7,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(never_type)]\n-\n #![warn(clippy::diverging_sub_expression)]\n #![allow(clippy::match_same_arms, clippy::logic_bug)]\n \n #[allow(clippy::empty_loop)]\n-fn diverge() -> ! { loop {} }\n+fn diverge() -> ! {\n+    loop {}\n+}\n \n struct A;\n \n impl A {\n-    fn foo(&self) -> ! { diverge() }\n+    fn foo(&self) -> ! {\n+        diverge()\n+    }\n }\n \n #[allow(unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]"}, {"sha": "dfc8be24a8bdd258b60933c798eac7cd2aa7cc06", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,13 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(alloc)]\n #![feature(associated_type_defaults)]\n-\n-\n #![warn(clippy::linkedlist)]\n #![allow(dead_code, clippy::needless_pass_by_value)]\n \n@@ -23,13 +18,13 @@ use alloc::collections::linked_list::LinkedList;\n trait Foo {\n     type Baz = LinkedList<u8>;\n     fn foo(LinkedList<u8>);\n-    const BAR : Option<LinkedList<u8>>;\n+    const BAR: Option<LinkedList<u8>>;\n }\n \n // ok, we don\u2019t want to warn for implementations, see #605\n impl Foo for LinkedList<u8> {\n     fn foo(_: LinkedList<u8>) {}\n-    const BAR : Option<LinkedList<u8>> = None;\n+    const BAR: Option<LinkedList<u8>> = None;\n }\n \n struct Bar;\n@@ -49,7 +44,7 @@ pub fn test_local_not_linted() {\n     let _: LinkedList<u8>;\n }\n \n-fn main(){\n+fn main() {\n     test(LinkedList::new());\n     test_local_not_linted();\n }"}, {"sha": "70b837a75b68ad4c8ab44669036ef286100a751b", "filename": "tests/ui/double_comparison.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn main() {\n     let x = 1;\n     let y = 2;"}, {"sha": "7d65122cb5e6c1901c044dfe7b7784f4387a91d1", "filename": "tests/ui/double_neg.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::double_neg)]\n fn main() {\n     let x = 1;"}, {"sha": "2ea8954ff59cc792c77d9cb03013bb269b8b21bd", "filename": "tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,29 +7,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::drop_copy, clippy::forget_copy)]\n #![allow(clippy::toplevel_ref_arg, clippy::drop_ref, clippy::forget_ref, unused_mut)]\n \n use std::mem::{drop, forget};\n use std::vec::Vec;\n \n #[derive(Copy, Clone)]\n-struct SomeStruct {\n-}\n+struct SomeStruct {}\n \n struct AnotherStruct {\n     x: u8,\n     y: u8,\n-    z: Vec<u8>\n+    z: Vec<u8>,\n }\n \n impl Clone for AnotherStruct {\n-    fn clone(& self) -> AnotherStruct {\n-        AnotherStruct{x: self.x, y: self.y, z: self.z.clone()}\n+    fn clone(&self) -> AnotherStruct {\n+        AnotherStruct {\n+            x: self.x,\n+            y: self.y,\n+            z: self.z.clone(),\n+        }\n     }\n }\n \n@@ -52,7 +51,11 @@ fn main() {\n     forget(s4);\n     forget(s5);\n \n-    let a1 = AnotherStruct {x: 255, y: 0, z: vec![1, 2, 3]};\n+    let a1 = AnotherStruct {\n+        x: 255,\n+        y: 0,\n+        z: vec![1, 2, 3],\n+    };\n     let a2 = &a1;\n     let mut a3 = a1.clone();\n     let ref a4 = a1;"}, {"sha": "6821d4033227f10ed248ca0d6e5f367cc8f1aa7b", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::drop_ref, clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg, clippy::similar_names, clippy::needless_pass_by_value)]\n "}, {"sha": "da4e2a6dc8abaec569d6c547ae0dece063d5a890", "filename": "tests/ui/duplicate_underscore_argument.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fduplicate_underscore_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fduplicate_underscore_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::duplicate_underscore_argument)]\n #[allow(dead_code, unused)]\n "}, {"sha": "8c2dade34c0fc346148f9f492e36fef83a28c934", "filename": "tests/ui/duration_subsec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::duration_subsec)]\n \n use std::time::Duration;"}, {"sha": "0776eae310c26b2eb7aa1ec12da33aa894399ec1", "filename": "tests/ui/else_if_without_else.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,15 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::all)]\n #![warn(clippy::else_if_without_else)]\n \n-fn bla1() -> bool { unimplemented!() }\n-fn bla2() -> bool { unimplemented!() }\n-fn bla3() -> bool { unimplemented!() }\n+fn bla1() -> bool {\n+    unimplemented!()\n+}\n+fn bla2() -> bool {\n+    unimplemented!()\n+}\n+fn bla3() -> bool {\n+    unimplemented!()\n+}\n \n fn main() {\n     if bla1() {\n@@ -48,15 +51,17 @@ fn main() {\n \n     if bla1() {\n         println!(\"if\");\n-    } else if bla2() { //~ ERROR else if without else\n+    } else if bla2() {\n+        //~ ERROR else if without else\n         println!(\"else if\");\n     }\n \n     if bla1() {\n         println!(\"if\");\n     } else if bla2() {\n         println!(\"else if 1\");\n-    } else if bla3() { //~ ERROR else if without else\n+    } else if bla3() {\n+        //~ ERROR else if without else\n         println!(\"else if 2\");\n     }\n }"}, {"sha": "b47afc822f8cfc24214be738fd552d93334e919b", "filename": "tests/ui/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(dead_code)]\n #![warn(clippy::empty_enum)]\n \n enum Empty {}\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "6c826716650288d25c4b165239c8d015ba2d8d0a", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused, clippy::needless_pass_by_value)]\n-\n #![warn(clippy::map_entry)]\n \n use std::collections::{BTreeMap, HashMap};\n@@ -20,36 +16,65 @@ use std::hash::Hash;\n fn foo() {}\n \n fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) { m.insert(k, v); }\n+    if !m.contains_key(&k) {\n+        m.insert(k, v);\n+    }\n }\n \n fn insert_if_absent1<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) { foo(); m.insert(k, v); }\n+    if !m.contains_key(&k) {\n+        foo();\n+        m.insert(k, v);\n+    }\n }\n \n fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) { m.insert(k, v) } else { None };\n+    if !m.contains_key(&k) {\n+        m.insert(k, v)\n+    } else {\n+        None\n+    };\n }\n \n fn insert_if_present2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if m.contains_key(&k) { None } else { m.insert(k, v) };\n+    if m.contains_key(&k) {\n+        None\n+    } else {\n+        m.insert(k, v)\n+    };\n }\n \n fn insert_if_absent3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+    if !m.contains_key(&k) {\n+        foo();\n+        m.insert(k, v)\n+    } else {\n+        None\n+    };\n }\n \n fn insert_if_present3<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if m.contains_key(&k) { None } else { foo(); m.insert(k, v) };\n+    if m.contains_key(&k) {\n+        None\n+    } else {\n+        foo();\n+        m.insert(k, v)\n+    };\n }\n \n fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+    if !m.contains_key(&k) {\n+        foo();\n+        m.insert(k, v)\n+    } else {\n+        None\n+    };\n }\n \n fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n-    if !m.contains_key(&k) { m.insert(o, v); }\n+    if !m.contains_key(&k) {\n+        m.insert(o, v);\n+    }\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "dde2896e415d50203bdae6a14fd6ea79009a597d", "filename": "tests/ui/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(unused_imports, dead_code, clippy::missing_docs_in_private_items)]\n \n@@ -34,8 +31,7 @@ mod tests {\n }\n \n #[allow(non_snake_case)]\n-mod CamelCaseName {\n-}\n+mod CamelCaseName {}\n \n use CamelCaseName::*;\n "}, {"sha": "0c8f3a36a3d98fd938c9cef81029a3f63794df76", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,19 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(non_ascii_idents)]\n-\n #![warn(clippy::all, clippy::pub_enum_variant_names)]\n \n enum FakeCallType {\n-    CALL, CREATE\n+    CALL,\n+    CREATE,\n }\n \n enum FakeCallType2 {\n-    CALL, CREATELL\n+    CALL,\n+    CREATELL,\n }\n \n enum Foo {\n@@ -49,7 +47,8 @@ enum BadCallType {\n     CallTypeDestroy,\n }\n \n-enum TwoCallType { // no error\n+enum TwoCallType {\n+    // no error\n     CallTypeCall,\n     CallTypeCreate,\n }\n@@ -60,7 +59,8 @@ enum Consts {\n     ConstantLie,\n }\n \n-enum Two { // no error here\n+enum Two {\n+    // no error here\n     ConstantInt,\n     ConstantInfer,\n }"}, {"sha": "9c1cf8e8614a50d5005e5b3d630a96b366fba010", "filename": "tests/ui/enums_clike.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n // ignore-x86\n \n-\n #![warn(clippy::all)]\n-\n #![allow(unused)]\n \n #[repr(usize)]\n@@ -62,5 +57,4 @@ trait Trait {\n }\n */\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "d71662131943384ef1cfb19eccc0b707de04e8be", "filename": "tests/ui/erasing_op.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[allow(clippy::no_effect)]\n #[warn(clippy::erasing_op)]\n fn main() {"}, {"sha": "cc65c6e63066de499aa14c5e35251f1b92da9a34", "filename": "tests/ui/escape_analysis.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -8,15 +8,14 @@\n // except according to those terms.\n \n #![feature(box_syntax)]\n-\n #![allow(clippy::borrowed_box, clippy::needless_pass_by_value, clippy::unused_unit)]\n #![warn(clippy::boxed_local)]\n \n #[derive(Clone)]\n struct A;\n \n impl A {\n-    fn foo(&self){}\n+    fn foo(&self) {}\n }\n \n trait Z {\n@@ -29,8 +28,7 @@ impl Z for A {\n     }\n }\n \n-fn main() {\n-}\n+fn main() {}\n \n fn ok_box_trait(boxed_trait: &Box<Z>) {\n     let boxed_local = boxed_trait;\n@@ -85,11 +83,9 @@ fn nowarn_pass() {\n     take_box(&bx); // fn needs &Box\n }\n \n-\n fn take_box(x: &Box<A>) {}\n fn take_ref(x: &A) {}\n \n-\n fn nowarn_ref_take() {\n     // false positive, should actually warn\n     let x = box A;\n@@ -100,27 +96,28 @@ fn nowarn_ref_take() {\n fn nowarn_match() {\n     let x = box A; // moved into a match\n     match x {\n-        y => drop(y)\n+        y => drop(y),\n     }\n }\n \n fn warn_match() {\n     let x = box A;\n-    match &x { // not moved\n-        ref y => ()\n+    match &x {\n+        // not moved\n+        ref y => (),\n     }\n }\n \n fn nowarn_large_array() {\n     // should not warn, is large array\n     // and should not be on stack\n     let x = box [1; 10000];\n-    match &x { // not moved\n-        ref y => ()\n+    match &x {\n+        // not moved\n+        ref y => (),\n     }\n }\n \n-\n /// ICE regression test\n pub trait Foo {\n     type Item;\n@@ -134,8 +131,7 @@ pub struct PeekableSeekable<I: Foo> {\n     _peeked: I::Item,\n }\n \n-pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {\n-}\n+pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n \n /// Regression for #916, #1123\n ///"}, {"sha": "7b39d1c4054e24553da042bddd14c86a7ad20d30", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-#![allow(unused, clippy::no_effect, clippy::redundant_closure_call, clippy::many_single_char_names, clippy::needless_pass_by_value, clippy::option_map_unit_fn, clippy::trivially_copy_pass_by_ref)]\n+#![allow(\n+    unused,\n+    clippy::no_effect,\n+    clippy::redundant_closure_call,\n+    clippy::many_single_char_names,\n+    clippy::needless_pass_by_value,\n+    clippy::option_map_unit_fn,\n+    clippy::trivially_copy_pass_by_ref\n+)]\n #![warn(clippy::redundant_closure, clippy::needless_borrow)]\n \n fn main() {\n@@ -32,25 +37,31 @@ fn main() {\n         Some(vec![1i32, 2]).map(|v| -> Box<::std::ops::Deref<Target = [i32]>> { Box::new(v) });\n }\n \n-fn meta<F>(f: F) where F: Fn(u8) {\n+fn meta<F>(f: F)\n+where\n+    F: Fn(u8),\n+{\n     f(1u8)\n }\n \n-fn foo(_: u8) {\n-}\n+fn foo(_: u8) {}\n \n fn foo2(_: u8) -> u8 {\n     1u8\n }\n \n fn all<X, F>(x: &[X], y: &X, f: F) -> bool\n-where F: Fn(&X, &X) -> bool {\n+where\n+    F: Fn(&X, &X) -> bool,\n+{\n     x.iter().all(|e| f(e, y))\n }\n \n-fn below(x: &u8, y: &u8) -> bool { x < y }\n+fn below(x: &u8, y: &u8) -> bool {\n+    x < y\n+}\n \n-unsafe fn unsafe_fn(_: u8) { }\n+unsafe fn unsafe_fn(_: u8) {}\n \n fn divergent(_: u8) -> ! {\n     unimplemented!()"}, {"sha": "82110d5e4f39d6d27675932325885093a40d3f7f", "filename": "tests/ui/eval_order_dependence.rs", "status": "modified", "additions": 79, "deletions": 19, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,52 +7,112 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::eval_order_dependence)]\n-#[allow(unused_assignments, unused_variables, clippy::many_single_char_names, clippy::no_effect, dead_code, clippy::blacklisted_name)]\n+#[allow(\n+    unused_assignments,\n+    unused_variables,\n+    clippy::many_single_char_names,\n+    clippy::no_effect,\n+    dead_code,\n+    clippy::blacklisted_name\n+)]\n fn main() {\n     let mut x = 0;\n-    let a = { x = 1; 1 } + x;\n+    let a = {\n+        x = 1;\n+        1\n+    } + x;\n \n     // Example from iss#277\n-    x += { x = 20; 2 };\n+    x += {\n+        x = 20;\n+        2\n+    };\n \n     // Does it work in weird places?\n     // ...in the base for a struct expression?\n-    struct Foo { a: i32, b: i32 };\n+    struct Foo {\n+        a: i32,\n+        b: i32,\n+    };\n     let base = Foo { a: 4, b: 5 };\n-    let foo = Foo { a: x, .. { x = 6; base } };\n+    let foo = Foo {\n+        a: x,\n+        ..{\n+            x = 6;\n+            base\n+        }\n+    };\n     // ...inside a closure?\n     let closure = || {\n         let mut x = 0;\n-        x += { x = 20; 2 };\n+        x += {\n+            x = 20;\n+            2\n+        };\n     };\n     // ...not across a closure?\n     let mut y = 0;\n-    let b = (y, || { y = 1 });\n+    let b = (y, || y = 1);\n \n     // && and || evaluate left-to-right.\n-    let a = { x = 1; true } && (x == 3);\n-    let a = { x = 1; true } || (x == 3);\n+    let a = {\n+        x = 1;\n+        true\n+    } && (x == 3);\n+    let a = {\n+        x = 1;\n+        true\n+    } || (x == 3);\n \n     // Make sure we don't get confused by alpha conversion.\n-    let a = { let mut x = 1; x = 2; 1 } + x;\n+    let a = {\n+        let mut x = 1;\n+        x = 2;\n+        1\n+    } + x;\n \n     // No warning if we don't read the variable...\n-    x = { x = 20; 2 };\n+    x = {\n+        x = 20;\n+        2\n+    };\n     // ...if the assignment is in a closure...\n-    let b = { || { x = 1; }; 1 } + x;\n+    let b = {\n+        || {\n+            x = 1;\n+        };\n+        1\n+    } + x;\n     // ... or the access is under an address.\n-    let b = ({ let p = &x; 1 }, { x = 1; x });\n+    let b = (\n+        {\n+            let p = &x;\n+            1\n+        },\n+        {\n+            x = 1;\n+            x\n+        },\n+    );\n \n     // Limitation: l-values other than simple variables don't trigger\n     // the warning.\n     let mut tup = (0, 0);\n-    let c = { tup.0 = 1; 1 } + tup.0;\n+    let c = {\n+        tup.0 = 1;\n+        1\n+    } + tup.0;\n     // Limitation: you can get away with a read under address-of.\n     let mut z = 0;\n-    let b = (&{ z = x; x }, { x = 3; x });\n+    let b = (\n+        &{\n+            z = x;\n+            x\n+        },\n+        {\n+            x = 3;\n+            x\n+        },\n+    );\n }"}, {"sha": "59b252a3a80a9b013d0bb19396fa9adcf4871573", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,8 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![warn(clippy::excessive_precision)]\n #![allow(clippy::print_literal)]\n "}, {"sha": "8afffa4d84345b03d247444cb51dbebf93d19a16", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -16,7 +16,9 @@ fn expect_fun_call() {\n     struct Foo;\n \n     impl Foo {\n-        fn new() -> Self { Foo }\n+        fn new() -> Self {\n+            Foo\n+        }\n \n         fn expect(&self, msg: &str) {\n             panic!(\"{}\", msg)"}, {"sha": "75d905659d9b1f8e1ed4c635fd11c482de930407", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -26,9 +26,11 @@ fn main() {\n mod issue_1219 {\n     pub fn test() {\n         // should not trigger the lint because variable is used after the loop #473\n-        let vec = vec![1,2,3];\n+        let vec = vec![1, 2, 3];\n         let mut index = 0;\n-        for _v in &vec { index += 1 }\n+        for _v in &vec {\n+            index += 1\n+        }\n         println!(\"index: {}\", index);\n \n         // should not trigger the lint because the count is conditional #1219"}, {"sha": "10a4bca9f492fcd177e64921b46461816f49d6b8", "filename": "tests/ui/explicit_write.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::explicit_write)]\n \n-\n fn stdout() -> String {\n     String::new()\n }"}, {"sha": "0d8c369660b8a61d784da40c929ecb581d8998d5", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::fallible_impl_from)]\n \n // docs example\n@@ -20,7 +17,6 @@ impl From<String> for Foo {\n     }\n }\n \n-\n struct Valid(Vec<u8>);\n \n impl<'a> From<&'a str> for Valid {\n@@ -34,7 +30,6 @@ impl From<usize> for Valid {\n     }\n }\n \n-\n struct Invalid;\n \n impl From<usize> for Invalid {"}, {"sha": "7ca74fd4b99529cd7adb731b5fbf2b7dc6c8bd1b", "filename": "tests/ui/filter_methods.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,31 +7,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {\n-    let _: Vec<_> = vec![5; 6].into_iter()\n-                              .filter(|&x| x == 0)\n-                              .map(|x| x * 2)\n-                              .collect();\n-\n-    let _: Vec<_> = vec![5_i8; 6].into_iter()\n-                                .filter(|&x| x == 0)\n-                                .flat_map(|x| x.checked_mul(2))\n-                                .collect();\n-\n-    let _: Vec<_> = vec![5_i8; 6].into_iter()\n-                                .filter_map(|x| x.checked_mul(2))\n-                                .flat_map(|x| x.checked_mul(2))\n-                                .collect();\n-\n-    let _: Vec<_> = vec![5_i8; 6].into_iter()\n-                                .filter_map(|x| x.checked_mul(2))\n-                                .map(|x| x.checked_mul(2))\n-                                .collect();\n+    let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n+\n+    let _: Vec<_> = vec![5_i8; 6]\n+        .into_iter()\n+        .filter(|&x| x == 0)\n+        .flat_map(|x| x.checked_mul(2))\n+        .collect();\n+\n+    let _: Vec<_> = vec![5_i8; 6]\n+        .into_iter()\n+        .filter_map(|x| x.checked_mul(2))\n+        .flat_map(|x| x.checked_mul(2))\n+        .collect();\n+\n+    let _: Vec<_> = vec![5_i8; 6]\n+        .into_iter()\n+        .filter_map(|x| x.checked_mul(2))\n+        .map(|x| x.checked_mul(2))\n+        .collect();\n }"}, {"sha": "2d55e30a2d3d06319f1cf4fbce3abd14f27979cf", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,31 +7,41 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::float_cmp)]\n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n \n use std::ops::Add;\n \n-const ZERO : f32 = 0.0;\n-const ONE : f32 = ZERO + 1.0;\n+const ZERO: f32 = 0.0;\n+const ONE: f32 = ZERO + 1.0;\n \n-fn twice<T>(x : T) -> T where T : Add<T, Output = T>, T : Copy {\n+fn twice<T>(x: T) -> T\n+where\n+    T: Add<T, Output = T>,\n+    T: Copy,\n+{\n     x + x\n }\n \n fn eq_fl(x: f32, y: f32) -> bool {\n-    if x.is_nan() { y.is_nan() } else { x == y } // no error, inside \"eq\" fn\n+    if x.is_nan() {\n+        y.is_nan()\n+    } else {\n+        x == y\n+    } // no error, inside \"eq\" fn\n }\n \n fn fl_eq(x: f32, y: f32) -> bool {\n-    if x.is_nan() { y.is_nan() } else { x == y } // no error, inside \"eq\" fn\n+    if x.is_nan() {\n+        y.is_nan()\n+    } else {\n+        x == y\n+    } // no error, inside \"eq\" fn\n }\n \n-struct X { val: f32 }\n+struct X {\n+    val: f32,\n+}\n \n impl PartialEq for X {\n     fn eq(&self, o: &X) -> bool {\n@@ -59,7 +69,7 @@ fn main() {\n     ONE as f64 != 2.0;\n     ONE as f64 != 0.0; // no error, comparison with zero is ok\n \n-    let x : f64 = 1.0;\n+    let x: f64 = 1.0;\n \n     x == 1.0;\n     x != 0f64; // no error, comparison with zero is ok\n@@ -71,7 +81,7 @@ fn main() {\n     x <= 0.0;\n     x >= 0.0;\n \n-    let xs : [f32; 1] = [0.0];\n+    let xs: [f32; 1] = [0.0];\n     let a: *const f32 = xs.as_ptr();\n     let b: *const f32 = xs.as_ptr();\n "}, {"sha": "e02671e0dcc15d270d106bc5b2c0e29c5902d8d6", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::float_cmp_const)]\n #![allow(clippy::float_cmp)]\n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n@@ -19,7 +15,11 @@ const ONE: f32 = 1.0;\n const TWO: f32 = 2.0;\n \n fn eq_one(x: f32) -> bool {\n-    if x.is_nan() { false } else { x == ONE } // no error, inside \"eq\" fn\n+    if x.is_nan() {\n+        false\n+    } else {\n+        x == ONE\n+    } // no error, inside \"eq\" fn\n }\n \n fn main() {"}, {"sha": "9b48a965cb31eaf61200b41e91b47f89dffac4c3", "filename": "tests/ui/fn_to_numeric_cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // only-64bit\n \n-\n #![warn(clippy::fn_to_numeric_cast, clippy::fn_to_numeric_cast_with_truncation)]\n \n-fn foo() -> String { String::new() }\n+fn foo() -> String {\n+    String::new()\n+}\n \n fn test_function_to_numeric_cast() {\n     let _ = foo as i8;"}, {"sha": "4747269bccdd175fed7d28d7a98f5bc1028547dc", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -25,10 +25,22 @@ impl Unrelated {\n     }\n }\n \n-#[warn(clippy::needless_range_loop, clippy::explicit_iter_loop, clippy::explicit_into_iter_loop, clippy::iter_next_loop, clippy::reverse_range_loop,\n-       clippy::for_kv_map)]\n+#[warn(\n+    clippy::needless_range_loop,\n+    clippy::explicit_iter_loop,\n+    clippy::explicit_into_iter_loop,\n+    clippy::iter_next_loop,\n+    clippy::reverse_range_loop,\n+    clippy::for_kv_map\n+)]\n #[warn(clippy::unused_collect)]\n-#[allow(clippy::linkedlist, clippy::shadow_unrelated, clippy::unnecessary_mut_passed, clippy::cyclomatic_complexity, clippy::similar_names)]\n+#[allow(\n+    clippy::linkedlist,\n+    clippy::shadow_unrelated,\n+    clippy::unnecessary_mut_passed,\n+    clippy::cyclomatic_complexity,\n+    clippy::similar_names\n+)]\n #[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n fn main() {\n     const MAX_LEN: usize = 42;"}, {"sha": "875a74d25081f0e856369cec12b4d31231796604", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 41, "deletions": 56, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,82 +7,74 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n #![allow(clippy::if_same_then_else)]\n #![allow(clippy::deref_addrof)]\n \n-fn foo() -> bool { true }\n+fn foo() -> bool {\n+    true\n+}\n \n fn main() {\n     // weird `else if` formatting:\n-    if foo() {\n-    } if foo() {\n-    }\n+    if foo() {}\n+    if foo() {}\n \n-    let _ = { // if as the last expression\n+    let _ = {\n+        // if as the last expression\n         let _ = 0;\n \n+        if foo() {}\n         if foo() {\n-        } if foo() {\n-        }\n-        else {\n+        } else {\n         }\n     };\n \n-    let _ = { // if in the middle of a block\n+    let _ = {\n+        // if in the middle of a block\n+        if foo() {}\n         if foo() {\n-        } if foo() {\n-        }\n-        else {\n+        } else {\n         }\n \n         let _ = 0;\n     };\n \n     if foo() {\n-    } else\n-    if foo() { // the span of the above error should continue here\n+    } else if foo() {\n+        // the span of the above error should continue here\n     }\n \n     if foo() {\n-    }\n-    else\n-    if foo() { // the span of the above error should continue here\n+    } else if foo() {\n+        // the span of the above error should continue here\n     }\n \n     // those are ok:\n-    if foo() {\n-    }\n-    if foo() {\n-    }\n+    if foo() {}\n+    if foo() {}\n \n     if foo() {\n     } else if foo() {\n     }\n \n     if foo() {\n-    }\n-    else if foo() {\n+    } else if foo() {\n     }\n \n     if foo() {\n+    } else if foo() {\n     }\n-    else if\n-    foo() {}\n \n     // weird op_eq formatting:\n     let mut a = 42;\n-    a =- 35;\n-    a =* &191;\n+    a = -35;\n+    a = *&191;\n \n     let mut b = true;\n-    b =! false;\n+    b = !false;\n \n     // those are ok:\n     a = -35;\n@@ -91,37 +83,30 @@ fn main() {\n \n     // possible missing comma in an array\n     let _ = &[\n-        -1, -2, -3 // <= no comma here\n-        -4, -5, -6\n+        -1,\n+        -2,\n+        -3 // <= no comma here\n+        -4,\n+        -5,\n+        -6,\n     ];\n     let _ = &[\n-        -1, -2, -3 // <= no comma here\n-        *4, -5, -6\n+        -1,\n+        -2,\n+        -3 // <= no comma here\n+        *4,\n+        -5,\n+        -6,\n     ];\n \n     // those are ok:\n-    let _ = &[\n-        -1, -2, -3,\n-        -4, -5, -6\n-    ];\n-    let _ = &[\n-        -1, -2, -3,\n-        -4, -5, -6,\n-    ];\n-    let _ = &[\n-        1 + 2, 3 +\n-        4, 5 + 6,\n-    ];\n+    let _ = &[-1, -2, -3, -4, -5, -6];\n+    let _ = &[-1, -2, -3, -4, -5, -6];\n+    let _ = &[1 + 2, 3 + 4, 5 + 6];\n \n     // don't lint for bin op without unary equiv\n     // issue 3244\n-    vec![\n-        1\n-        / 2,\n-    ];\n+    vec![1 / 2];\n     // issue 3396\n-    vec![\n-        true\n-        | false,\n-    ];\n+    vec![true | false];\n }"}, {"sha": "419632948157f0b43384600d08b6801c0b9e4632", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,22 +7,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n #![allow(dead_code)]\n #![allow(unused_unsafe)]\n \n // TOO_MANY_ARGUMENTS\n fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}\n \n-fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {\n-}\n+fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n \n // don't lint extern fns\n-extern fn extern_fn(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n+extern \"C\" fn extern_fn(\n+    _one: u32,\n+    _two: u32,\n+    _three: &str,\n+    _four: bool,\n+    _five: f32,\n+    _six: f32,\n+    _seven: bool,\n+    _eight: (),\n+) {\n+}\n \n pub trait Foo {\n     fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool);"}, {"sha": "2299714132f5fdc068b1d518eaa29e8c6ea129db", "filename": "tests/ui/fxhash.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,16 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::default_hash_types)]\n #![feature(rustc_private)]\n \n extern crate rustc_data_structures;\n \n-use std::collections::{HashMap, HashSet};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use std::collections::{HashMap, HashSet};\n \n fn main() {\n     let _map: HashMap<String, String> = HashMap::default();"}, {"sha": "e8789db6fc1a91867fb42ebdd715d4388d9ac80e", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(unused_mut)]\n \n use std::collections::BTreeMap;\n@@ -20,8 +19,12 @@ struct GetFalsePositive {\n }\n \n impl GetFalsePositive {\n-    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n-    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> {\n+        self.arr.get_mut(pos)\n+    }\n }\n \n fn main() {\n@@ -33,7 +36,8 @@ fn main() {\n     let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n     let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n \n-    { // Test `get().unwrap()`\n+    {\n+        // Test `get().unwrap()`\n         let _ = boxed_slice.get(1).unwrap();\n         let _ = some_slice.get(0).unwrap();\n         let _ = some_vec.get(0).unwrap();\n@@ -43,7 +47,8 @@ fn main() {\n         let _ = false_positive.get(0).unwrap();\n     }\n \n-    { // Test `get_mut().unwrap()`\n+    {\n+        // Test `get_mut().unwrap()`\n         *boxed_slice.get_mut(0).unwrap() = 1;\n         *some_slice.get_mut(0).unwrap() = 1;\n         *some_vec.get_mut(0).unwrap() = 1;\n@@ -54,7 +59,8 @@ fn main() {\n         *false_positive.get_mut(0).unwrap() = 1;\n     }\n \n-    { // Test `get().unwrap().foo()` and `get_mut().unwrap().bar()`\n+    {\n+        // Test `get().unwrap().foo()` and `get_mut().unwrap().bar()`\n         let _ = some_vec.get(0..1).unwrap().to_vec();\n         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n     }"}, {"sha": "caf8c89390dd7cc74556ff7016dd58d9e78cca1f", "filename": "tests/ui/ice-2636.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fice-2636.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fice-2636.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fice-2636.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -29,4 +29,3 @@ fn main() {\n     let a = Foo::A;\n     test_hash!(&a, A => 0, B => 1, C => 2);\n }\n-"}, {"sha": "6ba191b0b843acb6baabaa458c15b1ac3bd7f04a", "filename": "tests/ui/identity_conversion.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::identity_conversion)]\n \n fn test_generic<T: Copy>(val: T) -> T {"}, {"sha": "c8874250a0439ee743cb7b59162fbd93857e5e39", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,15 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n-const ONE : i64 = 1;\n-const NEG_ONE : i64 = -1;\n-const ZERO : i64 = 0;\n-\n-#[allow(clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::double_parens)]\n+const ONE: i64 = 1;\n+const NEG_ONE: i64 = -1;\n+const ZERO: i64 = 0;\n+\n+#[allow(\n+    clippy::eq_op,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::double_parens\n+)]\n #[warn(clippy::identity_op)]\n fn main() {\n     let x = 0;\n@@ -25,19 +26,19 @@ fn main() {\n     x + 1;\n     0 + x;\n     1 + x;\n-    x - ZERO;     //no error, as we skip lookups (for now)\n+    x - ZERO; //no error, as we skip lookups (for now)\n     x | (0);\n-    ((ZERO)) | x; //no error, as we skip lookups (for now)\n+    (ZERO) | x; //no error, as we skip lookups (for now)\n \n     x * 1;\n     1 * x;\n-    x / ONE;      //no error, as we skip lookups (for now)\n+    x / ONE; //no error, as we skip lookups (for now)\n \n-    x / 2;        //no false positive\n+    x / 2; //no false positive\n \n-    x & NEG_ONE;  //no error, as we skip lookups (for now)\n+    x & NEG_ONE; //no error, as we skip lookups (for now)\n     -1 & x;\n \n-    let u : u8 = 0;\n+    let u: u8 = 0;\n     u & 255;\n }"}, {"sha": "0179381fdc3d8a42e6eaca351e558aac263f268d", "filename": "tests/ui/if_not_else.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,13 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::all)]\n #![warn(clippy::if_not_else)]\n \n-fn bla() -> bool { unimplemented!() }\n+fn bla() -> bool {\n+    unimplemented!()\n+}\n \n fn main() {\n     if !bla() {"}, {"sha": "398a8ccce44f362b90878aa0da6f1670aeee2fdc", "filename": "tests/ui/impl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(dead_code)]\n #![warn(clippy::multiple_inherent_impl)]\n "}, {"sha": "ddcd8bcd755ae2eb1b14123e60b1a725ebf334a2", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![allow(unused)]\n \n-use std::collections::{HashMap, HashSet};\n use std::cmp::Eq;\n-use std::hash::{Hash, BuildHasher};\n+use std::collections::{HashMap, HashSet};\n+use std::hash::{BuildHasher, Hash};\n \n pub trait Foo<T>: Sized {\n     fn make() -> (Self, Self);\n@@ -49,7 +48,6 @@ impl<S: BuildHasher + Default> Foo<i64> for HashMap<String, String, S> {\n     }\n }\n \n-\n impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n     fn make() -> (Self, Self) {\n         (HashSet::new(), HashSet::with_capacity(10))\n@@ -72,8 +70,7 @@ impl<S: BuildHasher + Default> Foo<i64> for HashSet<String, S> {\n     }\n }\n \n-pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n-}\n+pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n \n macro_rules! gen {\n     (impl) => {\n@@ -85,19 +82,19 @@ macro_rules! gen {\n     };\n \n     (fn $name:ident) => {\n-        pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n-        }\n-    }\n+        pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n+    };\n }\n \n-gen!(impl);\n+gen!(impl );\n gen!(fn bar);\n \n // When the macro is in a different file, the suggestion spans can't be combined properly\n // and should not cause an ICE\n // See #2707\n #[macro_use]\n-#[path = \"../auxiliary/test_macro.rs\"] pub mod test_macro;\n+#[path = \"../auxiliary/test_macro.rs\"]\n+pub mod test_macro;\n __implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::A);\n \n fn main() {}"}, {"sha": "3bff92cf492be6a6f34d16a264102f7be07aa8a9", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::implicit_return)]\n \n fn test_end_of_fn() -> bool {\n@@ -34,9 +30,7 @@ fn test_if_block() -> bool {\n fn test_match(x: bool) -> bool {\n     match x {\n         true => false,\n-        false => {\n-            true\n-        }\n+        false => true,\n     }\n }\n \n@@ -48,9 +42,7 @@ fn test_loop() -> bool {\n }\n \n fn test_closure() {\n-    let _ = || {\n-        true\n-    };\n+    let _ = || true;\n     let _ = || true;\n }\n "}, {"sha": "31e34135bfc9dbc4819287c8194df1b4dc05bd43", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #[warn(clippy::inconsistent_digit_grouping)]\n #[allow(unused_variables)]\n fn main() {\n-    let good = (123, 1_234, 1_2345_6789, 123_f32, 1_234.12_f32, 1_234.123_4_f32, 1.123_456_7_f32);\n+    let good = (\n+        123,\n+        1_234,\n+        1_2345_6789,\n+        123_f32,\n+        1_234.12_f32,\n+        1_234.123_4_f32,\n+        1.123_456_7_f32,\n+    );\n     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n }"}, {"sha": "a9e697e519f87e65eba863b368f91e78ac399d42", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(plugin)]\n #![warn(clippy::indexing_slicing)]\n #![warn(clippy::out_of_bounds_indexing)]"}, {"sha": "37ae19497d18cc6577b5bc5396beb6678d238140", "filename": "tests/ui/infallible_destructuring_match.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(exhaustive_patterns, never_type)]\n #![allow(clippy::let_and_return)]\n "}, {"sha": "8f41e3ae98d9cf67d8012c7dde3ef007594c14cf", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,23 +7,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n use std::iter::repeat;\n #[allow(clippy::trivially_copy_pass_by_ref)]\n-fn square_is_lower_64(x: &u32) -> bool { x * x < 64 }\n+fn square_is_lower_64(x: &u32) -> bool {\n+    x * x < 64\n+}\n \n #[allow(clippy::maybe_infinite_iter)]\n #[deny(clippy::infinite_iter)]\n fn infinite_iters() {\n     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n     (0..8_u64).chain(0..).max(); // infinite iter\n-    (0_usize..).chain([0usize, 1, 2].iter().cloned()).skip_while(|x| *x != 42).min(); // infinite iter\n-    (0..8_u32).rev().cycle().map(|x| x + 1_u32).for_each(|x| println!(\"{}\", x)); // infinite iter\n+    (0_usize..)\n+        .chain([0usize, 1, 2].iter().cloned())\n+        .skip_while(|x| *x != 42)\n+        .min(); // infinite iter\n+    (0..8_u32)\n+        .rev()\n+        .cycle()\n+        .map(|x| x + 1_u32)\n+        .for_each(|x| println!(\"{}\", x)); // infinite iter\n     (0..3_u32).flat_map(|x| x..).sum::<u32>(); // infinite iter\n-    (0_usize..).flat_map(|x| 0..x).product::<usize>();  // infinite iter\n+    (0_usize..).flat_map(|x| 0..x).product::<usize>(); // infinite iter\n     (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n     (0..42_u64).by_ref().last(); // not an infinite, because ranges are double-ended\n     (0..).next(); // iterator is not exhausted\n@@ -33,7 +39,12 @@ fn infinite_iters() {\n fn potential_infinite_iters() {\n     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n-    (1..).scan(0, |state, x| { *state += x; Some(*state) }).min(); // maybe infinite iter\n+    (1..)\n+        .scan(0, |state, x| {\n+            *state += x;\n+            Some(*state)\n+        })\n+        .min(); // maybe infinite iter\n     (0..).find(|x| *x == 24); // maybe infinite iter\n     (0..).position(|x| x == 24); // maybe infinite iter\n     (0..).any(|x| x == 24); // maybe infinite iter"}, {"sha": "f93103215932eaa6b838fa2d5694e1f055a2639e", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,17 +7,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::trivially_copy_pass_by_ref)]\n \n-\n-fn fn_val(i: i32) -> i32 { unimplemented!() }\n-fn fn_constref(i: &i32) -> i32 { unimplemented!() }\n-fn fn_mutref(i: &mut i32) { unimplemented!() }\n-fn fooi() -> i32 { unimplemented!() }\n-fn foob() -> bool { unimplemented!() }\n+fn fn_val(i: i32) -> i32 {\n+    unimplemented!()\n+}\n+fn fn_constref(i: &i32) -> i32 {\n+    unimplemented!()\n+}\n+fn fn_mutref(i: &mut i32) {\n+    unimplemented!()\n+}\n+fn fooi() -> i32 {\n+    unimplemented!()\n+}\n+fn foob() -> bool {\n+    unimplemented!()\n+}\n \n #[allow(clippy::many_single_char_names)]\n fn immutable_condition() {\n@@ -143,12 +149,15 @@ fn consts() {\n \n use std::cell::Cell;\n \n-fn maybe_i_mutate(i: &Cell<bool>) { unimplemented!() }\n+fn maybe_i_mutate(i: &Cell<bool>) {\n+    unimplemented!()\n+}\n \n fn internally_mutable() {\n     let b = Cell::new(true);\n \n-    while b.get() {       // b cannot be silently coerced to `bool`\n+    while b.get() {\n+        // b cannot be silently coerced to `bool`\n         maybe_i_mutate(&b);\n         println!(\"OK - Method call within condition\");\n     }"}, {"sha": "d97e6d69941f150f963ad74fb8229dca64c46720", "filename": "tests/ui/inline_fn_without_body.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,26 +7,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::inline_fn_without_body)]\n #![allow(clippy::inline_always)]\n \n trait Foo {\n     #[inline]\n     fn default_inline();\n \n-    #[inline(always)]fn always_inline();\n+    #[inline(always)]\n+    fn always_inline();\n \n     #[inline(never)]\n     fn never_inline();\n \n     #[inline]\n-    fn has_body() {\n-    }\n+    fn has_body() {}\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "ce6cd7888ee83b9c0fa42c148076a50902f56d08", "filename": "tests/ui/int_plus_one.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n #[warn(clippy::int_plus_one)]\n fn main() {"}, {"sha": "212234f034651f8086c373d937ba99bce4e43d1e", "filename": "tests/ui/into_iter_on_ref.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -5,21 +5,21 @@ struct X;\n use std::collections::*;\n \n fn main() {\n-    for _ in &[1,2,3] {}\n+    for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1,2,3].into_iter() {} //~ ERROR equivalent to .iter()\n+    for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n \n-    let _ = [1,2,3].into_iter(); //~ ERROR equivalent to .iter()\n-    let _ = vec![1,2,3].into_iter();\n-    let _ = (&vec![1,2,3]).into_iter(); //~ WARN equivalent to .iter()\n-    let _ = vec![1,2,3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n+    let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n+    let _ = vec![1, 2, 3].into_iter();\n+    let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n+    let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n \n-    let _ = (&&&&&&&[1,2,3]).into_iter(); //~ ERROR equivalent to .iter()\n-    let _ = (&&&&mut &&&[1,2,3]).into_iter(); //~ ERROR equivalent to .iter()\n-    let _ = (&mut &mut &mut [1,2,3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n+    let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n+    let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n+    let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n \n     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()"}, {"sha": "0ec356280b63f036bfd258f2d4a7b06af70dabe1", "filename": "tests/ui/invalid_ref.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,19 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(unused)]\n #![feature(core_intrinsics)]\n \n extern crate core;\n use std::intrinsics::{init, uninit};\n \n fn main() {\n-    let x = 1; \n-    unsafe { \n+    let x = 1;\n+    unsafe {\n         ref_to_zeroed_std(&x);\n         ref_to_zeroed_core(&x);\n         ref_to_zeroed_intr(&x);\n@@ -34,43 +30,41 @@ fn main() {\n }\n \n unsafe fn ref_to_zeroed_std<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = std::mem::zeroed();     // warning\n+    let ref_zero: &T = std::mem::zeroed(); // warning\n }\n \n unsafe fn ref_to_zeroed_core<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = core::mem::zeroed();   // warning\n+    let ref_zero: &T = core::mem::zeroed(); // warning\n }\n \n unsafe fn ref_to_zeroed_intr<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = std::intrinsics::init();   // warning\n+    let ref_zero: &T = std::intrinsics::init(); // warning\n }\n \n unsafe fn ref_to_uninit_std<T: ?Sized>(t: &T) {\n-    let ref_uninit: &T = std::mem::uninitialized();   // warning\n+    let ref_uninit: &T = std::mem::uninitialized(); // warning\n }\n \n unsafe fn ref_to_uninit_core<T: ?Sized>(t: &T) {\n-    let ref_uninit: &T = core::mem::uninitialized();   // warning\n+    let ref_uninit: &T = core::mem::uninitialized(); // warning\n }\n \n unsafe fn ref_to_uninit_intr<T: ?Sized>(t: &T) {\n-    let ref_uninit: &T = std::intrinsics::uninit();   // warning\n+    let ref_uninit: &T = std::intrinsics::uninit(); // warning\n }\n \n fn some_ref() {\n-    let some_ref = &1; \n+    let some_ref = &1;\n }\n \n unsafe fn std_zeroed_no_ref() {\n-    let mem_zero: usize = std::mem::zeroed();  // no warning\n+    let mem_zero: usize = std::mem::zeroed(); // no warning\n }\n \n unsafe fn core_zeroed_no_ref() {\n-    let mem_zero: usize = core::mem::zeroed();  // no warning\n+    let mem_zero: usize = core::mem::zeroed(); // no warning\n }\n \n unsafe fn intr_init_no_ref() {\n     let mem_zero: usize = std::intrinsics::init(); // no warning\n }\n-\n-"}, {"sha": "60f877b1ebe64f21c2f4eeed3f44899e1a865232", "filename": "tests/ui/invalid_upcast_comparisons.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::invalid_upcast_comparisons)]\n-#![allow(unused, clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n-\n-fn mk_value<T>() -> T { unimplemented!() }\n+#![allow(\n+    unused,\n+    clippy::eq_op,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::cast_lossless\n+)]\n+\n+fn mk_value<T>() -> T {\n+    unimplemented!()\n+}\n \n fn main() {\n     let u32: u32 = mk_value();\n@@ -55,7 +59,6 @@ fn main() {\n     1337 != (u8 as i32);\n     1337 != (u8 as u32);\n \n-\n     // Those are Ok:\n     (u8 as u32) > 20;\n     42 == (u8 as i32);"}, {"sha": "5c6392811b9c32c642cb545f25398bf5ac13dbbf", "filename": "tests/ui/issue-3145.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fissue-3145.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fissue-3145.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue-3145.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn main() {\n     println!(\"{}\" a); //~ERROR expected token: `,`\n }"}, {"sha": "a54da0b6a969084a9fb0c2118da4698ad2294756", "filename": "tests/ui/issue_2356.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fissue_2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fissue_2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_2356.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::while_let_on_iterator)]\n \n use std::iter::Iterator;"}, {"sha": "fca19350558b4e5a7110bee089485abd6bf294f3", "filename": "tests/ui/item_after_statement.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,24 +7,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::items_after_statements)]\n \n fn ok() {\n-    fn foo() { println!(\"foo\"); }\n+    fn foo() {\n+        println!(\"foo\");\n+    }\n     foo();\n }\n \n fn last() {\n     foo();\n-    fn foo() { println!(\"foo\"); }\n+    fn foo() {\n+        println!(\"foo\");\n+    }\n }\n \n fn main() {\n     foo();\n-    fn foo() { println!(\"foo\"); }\n+    fn foo() {\n+        println!(\"foo\");\n+    }\n     foo();\n }\n \n@@ -33,7 +36,9 @@ fn mac() {\n     println!(\"{}\", a);\n     // do not lint this, because it needs to be after `a`\n     macro_rules! b {\n-        () => {{ a = 6 }}\n+        () => {{\n+            a = 6\n+        }};\n     }\n     b!();\n     println!(\"{}\", a);"}, {"sha": "80153efcb93b766244b1b525098563cd02296ba7", "filename": "tests/ui/large_digit_groups.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flarge_digit_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flarge_digit_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #[warn(clippy::large_digit_groups)]\n #[allow(unused_variables)]\n fn main() {\n-    let good = (0b1011_i64, 0o1_234_u32, 0x1_234_567, 1_2345_6789, 1234_f32, 1_234.12_f32, 1_234.123_f32, 1.123_4_f32);\n-    let bad = (0b1_10110_i64, 0x1_23456_78901_usize, 1_23456_f32, 1_23456.12_f32, 1_23456.12345_f32, 1_23456.12345_6_f32);\n+    let good = (\n+        0b1011_i64,\n+        0o1_234_u32,\n+        0x1_234_567,\n+        1_2345_6789,\n+        1234_f32,\n+        1_234.12_f32,\n+        1_234.123_f32,\n+        1.123_4_f32,\n+    );\n+    let bad = (\n+        0b1_10110_i64,\n+        0x1_23456_78901_usize,\n+        1_23456_f32,\n+        1_23456.12_f32,\n+        1_23456.12345_f32,\n+        1_23456.12345_6_f32,\n+    );\n }"}, {"sha": "29a73e68d43d192a2e7ceaa32d2836c0d574216e", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(dead_code)]\n #![allow(unused_variables)]\n #![warn(clippy::large_enum_variant)]"}, {"sha": "7f4ba4f15233e462cfbfb743dae4b7a2f6022460", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::len_without_is_empty, clippy::len_zero)]\n #![allow(dead_code, unused)]\n "}, {"sha": "26fdc46ac17bbbb318002b56dc02c9d92825923e", "filename": "tests/ui/let_if_seq.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,15 +7,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n-#![allow(unused_variables, unused_assignments, clippy::similar_names, clippy::blacklisted_name)]\n+#![allow(\n+    unused_variables,\n+    unused_assignments,\n+    clippy::similar_names,\n+    clippy::blacklisted_name\n+)]\n #![warn(clippy::useless_let_if_seq)]\n \n-fn f() -> bool { true }\n-fn g(x: i32) -> i32 { x + 1 }\n+fn f() -> bool {\n+    true\n+}\n+fn g(x: i32) -> i32 {\n+    x + 1\n+}\n \n fn issue985() -> i32 {\n     let mut x = 42;\n@@ -73,8 +78,7 @@ fn main() {\n     if f() {\n         f();\n         bar = 42;\n-    }\n-    else {\n+    } else {\n         f();\n     }\n "}, {"sha": "eb01213337687026620e992d79296f0b28284e48", "filename": "tests/ui/let_return.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused)]\n-\n #![warn(clippy::let_and_return)]\n \n fn test() -> i32 {\n@@ -52,5 +48,4 @@ fn test_nowarn_4() -> i32 {\n     x\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "89cb190cc96e1f58f7b700954b08c02c73a6dcc6", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,23 +7,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::let_unit_value)]\n #![allow(unused_variables)]\n \n macro_rules! let_and_return {\n     ($n:expr) => {{\n         let ret = $n;\n-    }}\n+    }};\n }\n \n fn main() {\n     let _x = println!(\"x\");\n-    let _y = 1;   // this is fine\n-    let _z = ((), 1);  // this as well\n+    let _y = 1; // this is fine\n+    let _z = ((), 1); // this as well\n     if true {\n         let _a = ();\n     }"}, {"sha": "110868404bda4d80de1b85c87ad988749451c46e", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 118, "deletions": 53, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,63 +7,89 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::needless_lifetimes, clippy::extra_unused_lifetimes)]\n #![allow(dead_code, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n \n-fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n+fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n \n-fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) { }\n+fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) {}\n \n-fn same_lifetime_on_input<'a>(_x: &'a u8, _y: &'a u8) { } // no error, same lifetime on two params\n+fn same_lifetime_on_input<'a>(_x: &'a u8, _y: &'a u8) {} // no error, same lifetime on two params\n \n-fn only_static_on_input(_x: &u8, _y: &u8, _z: &'static u8) { } // no error, static involved\n+fn only_static_on_input(_x: &u8, _y: &u8, _z: &'static u8) {} // no error, static involved\n \n-fn mut_and_static_input(_x: &mut u8, _y: &'static str) { }\n+fn mut_and_static_input(_x: &mut u8, _y: &'static str) {}\n \n-fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 { x }\n+fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 {\n+    x\n+}\n \n-fn multiple_in_and_out_1<'a>(x: &'a u8, _y: &'a u8) -> &'a u8 { x } // no error, multiple input refs\n+fn multiple_in_and_out_1<'a>(x: &'a u8, _y: &'a u8) -> &'a u8 {\n+    x\n+} // no error, multiple input refs\n \n-fn multiple_in_and_out_2<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 { x } // no error, multiple input refs\n+fn multiple_in_and_out_2<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 {\n+    x\n+} // no error, multiple input refs\n \n-fn in_static_and_out<'a>(x: &'a u8, _y: &'static u8) -> &'a u8 { x } // no error, static involved\n+fn in_static_and_out<'a>(x: &'a u8, _y: &'static u8) -> &'a u8 {\n+    x\n+} // no error, static involved\n \n-fn deep_reference_1<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> { Ok(x) } // no error\n+fn deep_reference_1<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> {\n+    Ok(x)\n+} // no error\n \n-fn deep_reference_2<'a>(x: Result<&'a u8, &'a u8>) -> &'a u8 { x.unwrap() } // no error, two input refs\n+fn deep_reference_2<'a>(x: Result<&'a u8, &'a u8>) -> &'a u8 {\n+    x.unwrap()\n+} // no error, two input refs\n \n-fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> { Ok(x) }\n+fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> {\n+    Ok(x)\n+}\n \n // where clause, but without lifetimes\n-fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> where T: Copy { Ok(x) }\n+fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()>\n+where\n+    T: Copy,\n+{\n+    Ok(x)\n+}\n \n type Ref<'r> = &'r u8;\n \n-fn lifetime_param_1<'a>(_x: Ref<'a>, _y: &'a u8) { } // no error, same lifetime on two params\n+fn lifetime_param_1<'a>(_x: Ref<'a>, _y: &'a u8) {} // no error, same lifetime on two params\n \n-fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) { }\n+fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n \n-fn lifetime_param_3<'a, 'b: 'a>(_x: Ref<'a>, _y: &'b u8) { } // no error, bounded lifetime\n+fn lifetime_param_3<'a, 'b: 'a>(_x: Ref<'a>, _y: &'b u8) {} // no error, bounded lifetime\n \n-fn lifetime_param_4<'a, 'b>(_x: Ref<'a>, _y: &'b u8) where 'b: 'a { } // no error, bounded lifetime\n+fn lifetime_param_4<'a, 'b>(_x: Ref<'a>, _y: &'b u8)\n+where\n+    'b: 'a,\n+{\n+} // no error, bounded lifetime\n \n struct Lt<'a, I: 'static> {\n-    x: &'a I\n+    x: &'a I,\n }\n \n fn fn_bound<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n-    where F: Fn(Lt<'a, I>) -> Lt<'a, I>  // no error, fn bound references 'a\n-{ unreachable!() }\n+where\n+    F: Fn(Lt<'a, I>) -> Lt<'a, I>, // no error, fn bound references 'a\n+{\n+    unreachable!()\n+}\n \n fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n-    where for<'x> F: Fn(Lt<'x, I>) -> Lt<'x, I>\n-{ unreachable!() }\n+where\n+    for<'x> F: Fn(Lt<'x, I>) -> Lt<'x, I>,\n+{\n+    unreachable!()\n+}\n \n-fn fn_bound_3<'a, F: FnOnce(&'a i32)>(x: &'a i32, f: F) { // no error, see below\n+fn fn_bound_3<'a, F: FnOnce(&'a i32)>(x: &'a i32, f: F) {\n+    // no error, see below\n     f(x);\n }\n \n@@ -76,21 +102,29 @@ fn fn_bound_3_cannot_elide() {\n \n // no error, multiple input refs\n fn fn_bound_4<'a, F: FnOnce() -> &'a ()>(cond: bool, x: &'a (), f: F) -> &'a () {\n-    if cond { x } else { f() }\n+    if cond {\n+        x\n+    } else {\n+        f()\n+    }\n }\n \n struct X {\n     x: u8,\n }\n \n impl X {\n-    fn self_and_out<'s>(&'s self) -> &'s u8 { &self.x }\n+    fn self_and_out<'s>(&'s self) -> &'s u8 {\n+        &self.x\n+    }\n \n-    fn self_and_in_out<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 { &self.x } // no error, multiple input refs\n+    fn self_and_in_out<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 {\n+        &self.x\n+    } // no error, multiple input refs\n \n-    fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) { }\n+    fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) {}\n \n-    fn self_and_same_in<'s>(&'s self, _x: &'s u8) { } // no error, same lifetimes on two params\n+    fn self_and_same_in<'s>(&'s self, _x: &'s u8) {} // no error, same lifetimes on two params\n }\n \n struct Foo<'a>(&'a u8);\n@@ -104,50 +138,80 @@ fn already_elided<'a>(_: &u8, _: &'a u8) -> &'a u8 {\n     unimplemented!()\n }\n \n-fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str { unimplemented!() }\n+fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str {\n+    unimplemented!()\n+}\n \n // no warning, two input lifetimes (named on the reference, anonymous on Foo)\n-fn struct_with_lt2<'a>(_foo: &'a Foo) -> &'a str { unimplemented!() }\n+fn struct_with_lt2<'a>(_foo: &'a Foo) -> &'a str {\n+    unimplemented!()\n+}\n \n // no warning, two input lifetimes (anonymous on the reference, named on Foo)\n-fn struct_with_lt3<'a>(_foo: &Foo<'a> ) -> &'a str { unimplemented!() }\n+fn struct_with_lt3<'a>(_foo: &Foo<'a>) -> &'a str {\n+    unimplemented!()\n+}\n \n // no warning, two input lifetimes\n-fn struct_with_lt4<'a, 'b>(_foo: &'a Foo<'b> ) -> &'a str { unimplemented!() }\n+fn struct_with_lt4<'a, 'b>(_foo: &'a Foo<'b>) -> &'a str {\n+    unimplemented!()\n+}\n \n trait WithLifetime<'a> {}\n \n type WithLifetimeAlias<'a> = WithLifetime<'a>;\n \n // should not warn because it won't build without the lifetime\n-fn trait_obj_elided<'a>(_arg: &'a WithLifetime) -> &'a str { unimplemented!() }\n+fn trait_obj_elided<'a>(_arg: &'a WithLifetime) -> &'a str {\n+    unimplemented!()\n+}\n \n // this should warn because there is no lifetime on Drop, so this would be\n // unambiguous if we elided the lifetime\n-fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str { unimplemented!() }\n+fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str {\n+    unimplemented!()\n+}\n \n type FooAlias<'a> = Foo<'a>;\n \n-fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str { unimplemented!() }\n+fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str {\n+    unimplemented!()\n+}\n \n // no warning, two input lifetimes (named on the reference, anonymous on Foo)\n-fn alias_with_lt2<'a>(_foo: &'a FooAlias) -> &'a str { unimplemented!() }\n+fn alias_with_lt2<'a>(_foo: &'a FooAlias) -> &'a str {\n+    unimplemented!()\n+}\n \n // no warning, two input lifetimes (anonymous on the reference, named on Foo)\n-fn alias_with_lt3<'a>(_foo: &FooAlias<'a> ) -> &'a str { unimplemented!() }\n+fn alias_with_lt3<'a>(_foo: &FooAlias<'a>) -> &'a str {\n+    unimplemented!()\n+}\n \n // no warning, two input lifetimes\n-fn alias_with_lt4<'a, 'b>(_foo: &'a FooAlias<'b> ) -> &'a str { unimplemented!() }\n+fn alias_with_lt4<'a, 'b>(_foo: &'a FooAlias<'b>) -> &'a str {\n+    unimplemented!()\n+}\n \n-fn named_input_elided_output<'a>(_arg: &'a str) -> &str { unimplemented!() }\n+fn named_input_elided_output<'a>(_arg: &'a str) -> &str {\n+    unimplemented!()\n+}\n \n-fn elided_input_named_output<'a>(_arg: &str) -> &'a str { unimplemented!() }\n+fn elided_input_named_output<'a>(_arg: &str) -> &'a str {\n+    unimplemented!()\n+}\n \n-fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n-fn trait_bound<'a, T: WithLifetime<'a>>(_: &'a u8, _: T) { unimplemented!() }\n+fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) {\n+    unimplemented!()\n+}\n+fn trait_bound<'a, T: WithLifetime<'a>>(_: &'a u8, _: T) {\n+    unimplemented!()\n+}\n \n // don't warn on these, see #292\n-fn trait_bound_bug<'a, T: WithLifetime<'a>>() { unimplemented!() }\n+fn trait_bound_bug<'a, T: WithLifetime<'a>>() {\n+    unimplemented!()\n+}\n \n // #740\n struct Test {\n@@ -160,7 +224,6 @@ impl Test {\n     }\n }\n \n-\n trait LintContext<'a> {}\n \n fn f<'a, T: LintContext<'a>>(_: &T) {}\n@@ -172,9 +235,11 @@ fn test<'a>(x: &'a [u8]) -> u8 {\n \n // #3284 - Give a hint regarding lifetime in return type\n \n-struct Cow<'a> { x: &'a str, }\n-fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> { unimplemented!() }\n-\n-\n-fn main() {\n+struct Cow<'a> {\n+    x: &'a str,\n }\n+fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n+    unimplemented!()\n+}\n+\n+fn main() {}"}, {"sha": "1f2fcd8faf61518e75e78eec54092f4116abef6b", "filename": "tests/ui/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -1,5 +1,4 @@\n #![deny(clippy::internal)]\n-\n #![feature(rustc_private)]\n \n #[macro_use]\n@@ -28,5 +27,4 @@ impl lint::LintPass for Pass {\n     }\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "e6fb37f81205cecc0b92bb8514f13ff8cbcd40b0", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,8 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n "}, {"sha": "99b90a0df79610f9168128c4d4ae100c0ab87348", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,8 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n "}, {"sha": "fe5e94cf45890e3620e25a080be873eee0671667", "filename": "tests/ui/match_bool.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn match_bool() {\n     let test: bool = true;\n \n@@ -24,31 +23,40 @@ fn match_bool() {\n \n     match test {\n         true => (),\n-        false => { println!(\"Noooo!\"); }\n+        false => {\n+            println!(\"Noooo!\");\n+        },\n     };\n \n     match test {\n-        false => { println!(\"Noooo!\"); }\n+        false => {\n+            println!(\"Noooo!\");\n+        },\n         _ => (),\n     };\n \n     match test && test {\n-        false => { println!(\"Noooo!\"); }\n+        false => {\n+            println!(\"Noooo!\");\n+        },\n         _ => (),\n     };\n \n     match test {\n-        false => { println!(\"Noooo!\"); }\n-        true => { println!(\"Yes!\"); }\n+        false => {\n+            println!(\"Noooo!\");\n+        },\n+        true => {\n+            println!(\"Yes!\");\n+        },\n     };\n \n     // Not linted\n     match option {\n-        1 ... 10 => 1,\n-        11 ... 20 => 2,\n+        1...10 => 1,\n+        11...20 => 2,\n         _ => 3,\n     };\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "5350f933ae57ff20fc958fa0f4d896a12b4a57a0", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -14,54 +14,54 @@\n /// Tests for match_overlapping_arm\n \n fn overlapping() {\n-    const FOO : u64 = 2;\n+    const FOO: u64 = 2;\n \n     match 42 {\n-        0 ... 10 => println!(\"0 ... 10\"),\n-        0 ... 11 => println!(\"0 ... 11\"),\n+        0...10 => println!(\"0 ... 10\"),\n+        0...11 => println!(\"0 ... 11\"),\n         _ => (),\n     }\n \n     match 42 {\n-        0 ... 5 => println!(\"0 ... 5\"),\n-        6 ... 7 => println!(\"6 ... 7\"),\n-        FOO ... 11 => println!(\"0 ... 11\"),\n+        0...5 => println!(\"0 ... 5\"),\n+        6...7 => println!(\"6 ... 7\"),\n+        FOO...11 => println!(\"0 ... 11\"),\n         _ => (),\n     }\n \n     match 42 {\n         2 => println!(\"2\"),\n-        0 ... 5 => println!(\"0 ... 5\"),\n+        0...5 => println!(\"0 ... 5\"),\n         _ => (),\n     }\n \n     match 42 {\n         2 => println!(\"2\"),\n-        0 ... 2 => println!(\"0 ... 2\"),\n+        0...2 => println!(\"0 ... 2\"),\n         _ => (),\n     }\n \n     match 42 {\n-        0 ... 10 => println!(\"0 ... 10\"),\n-        11 ... 50 => println!(\"11 ... 50\"),\n+        0...10 => println!(\"0 ... 10\"),\n+        11...50 => println!(\"11 ... 50\"),\n         _ => (),\n     }\n \n     match 42 {\n         2 => println!(\"2\"),\n-        0 .. 2 => println!(\"0 .. 2\"),\n+        0..2 => println!(\"0 .. 2\"),\n         _ => (),\n     }\n \n     match 42 {\n-        0 .. 10 => println!(\"0 .. 10\"),\n-        10 .. 50 => println!(\"10 .. 50\"),\n+        0..10 => println!(\"0 .. 10\"),\n+        10..50 => println!(\"10 .. 50\"),\n         _ => (),\n     }\n \n     match 42 {\n-        0 .. 11 => println!(\"0 .. 11\"),\n-        0 ... 11 => println!(\"0 ... 11\"),\n+        0..11 => println!(\"0 .. 11\"),\n+        0...11 => println!(\"0 ... 11\"),\n         _ => (),\n     }\n "}, {"sha": "8038433c5641d423cb233df22f439efe1a41615e", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,18 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![feature(exclusive_range_pattern)]\n-\n-\n #![warn(clippy::all)]\n #![allow(unused, clippy::redundant_pattern_matching)]\n #![warn(clippy::match_same_arms)]\n \n-\n-fn dummy() {\n-}\n+fn dummy() {}\n \n fn ref_pats() {\n     {\n@@ -27,12 +21,13 @@ fn ref_pats() {\n             &Some(v) => println!(\"{:?}\", v),\n             &None => println!(\"none\"),\n         }\n-        match v {  // this doesn't trigger, we have a different pattern\n+        match v {\n+            // this doesn't trigger, we have a different pattern\n             &Some(v) => println!(\"some\"),\n             other => println!(\"other\"),\n         }\n     }\n-    let tup =& (1, 2);\n+    let tup = &(1, 2);\n     match tup {\n         &(v, 1) => println!(\"{}\", v),\n         _ => println!(\"none\"),\n@@ -66,81 +61,87 @@ fn match_wild_err_arm() {\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => panic!(\"err\")\n+        Err(_) => panic!(\"err\"),\n     }\n \n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => {panic!()}\n+        Err(_) => panic!(),\n     }\n \n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => {panic!();}\n+        Err(_) => {\n+            panic!();\n+        },\n     }\n \n     // allowed when not with `panic!` block\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => println!(\"err\")\n+        Err(_) => println!(\"err\"),\n     }\n \n     // allowed when used with `unreachable!`\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => {unreachable!()}\n+        Err(_) => unreachable!(),\n     }\n \n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => unreachable!()\n+        Err(_) => unreachable!(),\n     }\n \n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => {unreachable!();}\n+        Err(_) => {\n+            unreachable!();\n+        },\n     }\n \n     // no warning because of the guard\n     match x {\n-        Ok(x) if x*x == 64 => println!(\"ok\"),\n+        Ok(x) if x * x == 64 => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => println!(\"err\")\n+        Err(_) => println!(\"err\"),\n     }\n \n     // this used to be a false positive, see #1996\n     match x {\n         Ok(3) => println!(\"ok\"),\n-        Ok(x) if x*x == 64 => println!(\"ok 64\"),\n+        Ok(x) if x * x == 64 => println!(\"ok 64\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => println!(\"err\")\n+        Err(_) => println!(\"err\"),\n     }\n \n     match (x, Some(1i32)) {\n         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n-        _ => println!(\"err\")\n+        _ => println!(\"err\"),\n     }\n \n     // no warning because of the different types for x\n     match (x, Some(1.0f64)) {\n         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n-        _ => println!(\"err\")\n+        _ => println!(\"err\"),\n     }\n \n     // because of a bug, no warning was generated for this case before #2251\n     match x {\n         Ok(_tmp) => println!(\"ok\"),\n         Ok(3) => println!(\"ok\"),\n         Ok(_) => println!(\"ok\"),\n-        Err(_) => {unreachable!();}\n+        Err(_) => {\n+            unreachable!();\n+        },\n     }\n }\n \n@@ -156,8 +157,6 @@ fn match_as_ref() {\n         None => None,\n         Some(ref mut v) => Some(v),\n     };\n-\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "9d2d6f9503a1c9c35b754011e1261e5c9035475c", "filename": "tests/ui/mem_discriminant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![deny(clippy::mem_discriminant_non_enum)]\n \n use std::mem;\n@@ -35,7 +34,9 @@ fn main() {\n     mem::discriminant(&rro);\n \n     macro_rules! mem_discriminant_but_in_a_macro {\n-        ($param:expr) => (mem::discriminant($param))\n+        ($param:expr) => {\n+            mem::discriminant($param)\n+        };\n     }\n \n     mem_discriminant_but_in_a_macro!(&rro);"}, {"sha": "b46f7007cd028db47e9818b013882aa906687a50", "filename": "tests/ui/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,16 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n-\n-use std::sync::Arc;\n use std::rc::Rc;\n+use std::sync::Arc;\n \n-use std::mem::forget as forgetSomething;\n use std::mem as memstuff;\n+use std::mem::forget as forgetSomething;\n \n #[warn(clippy::mem_forget)]\n #[allow(clippy::forget_copy)]"}, {"sha": "edd3c03185713f55d7f0147c48296f4d0908faca", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,8 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n \n use std::mem;"}, {"sha": "cf68bb611008ad8d7c9efbc93e8d4f057a937376", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,17 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n \n-use std::cmp::{min, max};\n-use std::cmp::min as my_min;\n use std::cmp::max as my_max;\n+use std::cmp::min as my_min;\n+use std::cmp::{max, min};\n \n-const LARGE : usize = 3;\n+const LARGE: usize = 3;\n \n fn main() {\n     let x;"}, {"sha": "5de2ada5a41c7de9caeb3732e0b516a80a8cde3e", "filename": "tests/ui/missing-doc.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n /* This file incorporates work covered by the following copyright and\n  * permission notice:\n  *   Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n@@ -23,17 +20,14 @@\n  *   except according to those terms.\n  */\n \n-\n-\n #![warn(clippy::missing_docs_in_private_items)]\n-\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n #![allow(dead_code)]\n #![feature(associated_type_defaults)]\n \n //! Some garbage docs for the crate here\n-#![doc=\"More garbage\"]\n+#![doc = \"More garbage\"]\n \n type Typedef = String;\n pub type PubTypedef = String;\n@@ -61,7 +55,8 @@ pub mod pub_module_no_dox {}\n pub fn foo() {}\n pub fn foo2() {}\n fn foo3() {}\n-#[allow(clippy::missing_docs_in_private_items)] pub fn foo4() {}\n+#[allow(clippy::missing_docs_in_private_items)]\n+pub fn foo4() {}\n \n /// dox\n pub trait A {\n@@ -84,7 +79,7 @@ pub trait C {\n \n #[allow(clippy::missing_docs_in_private_items)]\n pub trait D {\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }\n \n /// dox\n@@ -110,7 +105,8 @@ impl PubFoo {\n     /// dox\n     pub fn foo1() {}\n     fn foo2() {}\n-    #[allow(clippy::missing_docs_in_private_items)] pub fn foo3() {}\n+    #[allow(clippy::missing_docs_in_private_items)]\n+    pub fn foo3() {}\n }\n \n #[allow(clippy::missing_docs_in_private_items)]\n@@ -136,17 +132,12 @@ mod a {\n }\n \n enum Baz {\n-    BazA {\n-        a: isize,\n-        b: isize\n-    },\n-    BarB\n+    BazA { a: isize, b: isize },\n+    BarB,\n }\n \n pub enum PubBaz {\n-    PubBazA {\n-        a: isize,\n-    },\n+    PubBazA { a: isize },\n }\n \n /// dox\n@@ -160,15 +151,12 @@ pub enum PubBaz2 {\n \n #[allow(clippy::missing_docs_in_private_items)]\n pub enum PubBaz3 {\n-    PubBaz3A {\n-        b: isize\n-    },\n+    PubBaz3A { b: isize },\n }\n \n #[doc(hidden)]\n pub fn baz() {}\n \n-\n const FOO: u32 = 0;\n /// dox\n pub const FOO1: u32 = 0;\n@@ -178,7 +166,6 @@ pub const FOO2: u32 = 0;\n pub const FOO3: u32 = 0;\n pub const FOO4: u32 = 0;\n \n-\n static BAR: u32 = 0;\n /// dox\n pub static BAR1: u32 = 0;\n@@ -188,7 +175,6 @@ pub static BAR2: u32 = 0;\n pub static BAR3: u32 = 0;\n pub static BAR4: u32 = 0;\n \n-\n mod internal_impl {\n     /// dox\n     pub fn documented() {}\n@@ -206,9 +192,9 @@ mod internal_impl {\n /// dox\n pub mod public_interface {\n     pub use internal_impl::documented as foo;\n+    pub use internal_impl::globbed::*;\n     pub use internal_impl::undocumented1 as bar;\n     pub use internal_impl::{documented, undocumented2};\n-    pub use internal_impl::globbed::*;\n }\n \n fn main() {}"}, {"sha": "c9e946e14e6564114082da51bdcb1576714d9a00", "filename": "tests/ui/missing_inline.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_inline.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n /* This file incorporates work covered by the following copyright and\n  * permission notice:\n  *   Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n@@ -32,7 +29,7 @@ type Typedef = String;\n pub type PubTypedef = String;\n \n struct Foo {} // ok\n-pub struct PubFoo { } // ok\n+pub struct PubFoo {} // ok\n enum FooE {} // ok\n pub enum PubFooE {} // ok\n \n@@ -41,8 +38,10 @@ pub mod pub_module {} // ok\n \n fn foo() {}\n pub fn pub_foo() {} // missing #[inline]\n-#[inline] pub fn pub_foo_inline() {} // ok\n-#[inline(always)] pub fn pub_foo_inline_always() {} // ok\n+#[inline]\n+pub fn pub_foo_inline() {} // ok\n+#[inline(always)]\n+pub fn pub_foo_inline_always() {} // ok\n \n #[allow(clippy::missing_inline_in_public_items)]\n pub fn pub_foo_no_inline() {}\n@@ -52,11 +51,11 @@ trait Bar {\n     fn Bar_b() {} // ok\n }\n \n-\n pub trait PubBar {\n     fn PubBar_a(); // ok\n     fn PubBar_b() {} // missing #[inline]\n-    #[inline] fn PubBar_c() {} // ok\n+    #[inline]\n+    fn PubBar_c() {} // ok\n }\n \n // none of these need inline because Foo is not exported"}, {"sha": "730055931c4a618fd37ad716dacdd58eb2e7c79b", "filename": "tests/ui/module_inception.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmodule_inception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmodule_inception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::module_inception)]\n \n mod foo {\n@@ -27,8 +24,7 @@ mod foo {\n // No warning. See <https://github.com/rust-lang/rust-clippy/issues/1220>.\n mod bar {\n     #[allow(clippy::module_inception)]\n-    mod bar {\n-    }\n+    mod bar {}\n }\n \n fn main() {}"}, {"sha": "f7c0c16abade7bee868d280def3c5a05899b9cea", "filename": "tests/ui/modulo_one.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::modulo_one)]\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n "}, {"sha": "8a9da42083dfa9cf3ad5a9fb727776683b702025", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused, clippy::trivially_copy_pass_by_ref)]\n #![warn(clippy::mut_from_ref)]\n "}, {"sha": "e8239007cb3c41b531fb783effe6d674ba9c8d93", "filename": "tests/ui/mut_mut.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,26 +7,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n #![warn(clippy::mut_mut)]\n \n-\n-\n-\n-fn fun(x : &mut &mut u32) -> bool {\n+fn fun(x: &mut &mut u32) -> bool {\n     **x > 0\n }\n \n-fn less_fun(x : *mut *mut u32) {\n-  let y = x;\n+fn less_fun(x: *mut *mut u32) {\n+    let y = x;\n }\n \n macro_rules! mut_ptr {\n-    ($p:expr) => { &mut $p }\n+    ($p:expr) => {\n+        &mut $p\n+    };\n }\n \n #[allow(unused_mut, unused_variables)]\n@@ -37,12 +32,12 @@ fn main() {\n     }\n \n     if fun(x) {\n-        let y : &mut &mut u32 = &mut &mut 2;\n+        let y: &mut &mut u32 = &mut &mut 2;\n         **y + **x;\n     }\n \n     if fun(x) {\n-        let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+        let y: &mut &mut &mut u32 = &mut &mut &mut 2;\n         ***y + **x;\n     }\n "}, {"sha": "23dddcdd158da2595d90e8301e19d15718eabc13", "filename": "tests/ui/mut_range_bound.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_range_bound.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(unused)]\n \n fn main() {\n@@ -25,42 +21,52 @@ fn main() {\n \n fn mut_range_bound_upper() {\n     let mut m = 4;\n-    for i in 0..m { m = 5; } // warning\n+    for i in 0..m {\n+        m = 5;\n+    } // warning\n }\n \n fn mut_range_bound_lower() {\n     let mut m = 4;\n-    for i in m..10 { m *= 2; } // warning\n+    for i in m..10 {\n+        m *= 2;\n+    } // warning\n }\n \n fn mut_range_bound_both() {\n     let mut m = 4;\n     let mut n = 6;\n-    for i in m..n { m = 5; n = 7; } // warning (1 for each mutated bound)\n+    for i in m..n {\n+        m = 5;\n+        n = 7;\n+    } // warning (1 for each mutated bound)\n }\n \n fn mut_range_bound_no_mutation() {\n     let mut m = 4;\n-    for i in 0..m { continue; } // no warning\n+    for i in 0..m {\n+        continue;\n+    } // no warning\n }\n \n fn mut_borrow_range_bound() {\n     let mut m = 4;\n     for i in 0..m {\n-        let n = &mut m;  // warning\n+        let n = &mut m; // warning\n         *n += 1;\n     }\n }\n \n fn immut_borrow_range_bound() {\n     let mut m = 4;\n     for i in 0..m {\n-        let n = &m;   // should be no warning?\n+        let n = &m; // should be no warning?\n     }\n }\n \n-\n fn immut_range_bound() {\n     let m = 4;\n-    for i in 0..m { continue; } // no warning\n+    for i in 0..m {\n+        continue;\n+    } // no warning\n }"}, {"sha": "882ed7e1dd326eedf4bb7a0a1d942fa0a5d7fbb1", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(unused_variables, clippy::trivially_copy_pass_by_ref)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n@@ -19,11 +15,9 @@ fn takes_a_mutable_reference(a: &mut i32) {}\n struct MyStruct;\n \n impl MyStruct {\n-    fn takes_an_immutable_reference(&self, a: &i32) {\n-    }\n+    fn takes_an_immutable_reference(&self, a: &i32) {}\n \n-    fn takes_a_mutable_reference(&self, a: &mut i32) {\n-    }\n+    fn takes_a_mutable_reference(&self, a: &mut i32) {}\n }\n \n #[warn(clippy::unnecessary_mut_passed)]\n@@ -37,7 +31,6 @@ fn main() {\n     let my_struct = MyStruct;\n     my_struct.takes_an_immutable_reference(&mut 42);\n \n-\n     // No error\n \n     // Functions"}, {"sha": "5c4e180408cfbacd3c0c6a7374ab1ac21e1b8ff7", "filename": "tests/ui/mutex_atomic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n #![warn(clippy::mutex_integer)]\n "}, {"sha": "c82f102c294e45a76513343178fd1885e3d773f8", "filename": "tests/ui/needless_bool.rs", "status": "modified", "additions": 65, "deletions": 19, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![warn(clippy::needless_bool)]\n \n use std::cell::Cell;\n@@ -38,12 +37,36 @@ macro_rules! bool_comparison_trigger {\n fn main() {\n     let x = true;\n     let y = false;\n-    if x { true } else { true };\n-    if x { false } else { false };\n-    if x { true } else { false };\n-    if x { false } else { true };\n-    if x && y { false } else { true };\n-    if x { x } else { false }; // would also be questionable, but we don't catch this yet\n+    if x {\n+        true\n+    } else {\n+        true\n+    };\n+    if x {\n+        false\n+    } else {\n+        false\n+    };\n+    if x {\n+        true\n+    } else {\n+        false\n+    };\n+    if x {\n+        false\n+    } else {\n+        true\n+    };\n+    if x && y {\n+        false\n+    } else {\n+        true\n+    };\n+    if x {\n+        x\n+    } else {\n+        false\n+    }; // would also be questionable, but we don't catch this yet\n     bool_ret(x);\n     bool_ret2(x);\n     bool_ret3(x);\n@@ -57,50 +80,73 @@ fn main() {\n \n #[allow(clippy::if_same_then_else, clippy::needless_return)]\n fn bool_ret(x: bool) -> bool {\n-    if x { return true } else { return true };\n+    if x {\n+        return true;\n+    } else {\n+        return true;\n+    };\n }\n \n #[allow(clippy::if_same_then_else, clippy::needless_return)]\n fn bool_ret2(x: bool) -> bool {\n-    if x { return false } else { return false };\n+    if x {\n+        return false;\n+    } else {\n+        return false;\n+    };\n }\n \n #[allow(clippy::needless_return)]\n fn bool_ret3(x: bool) -> bool {\n-    if x { return true } else { return false };\n+    if x {\n+        return true;\n+    } else {\n+        return false;\n+    };\n }\n \n #[allow(clippy::needless_return)]\n fn bool_ret5(x: bool, y: bool) -> bool {\n-    if x && y { return true } else { return false };\n+    if x && y {\n+        return true;\n+    } else {\n+        return false;\n+    };\n }\n \n #[allow(clippy::needless_return)]\n fn bool_ret4(x: bool) -> bool {\n-    if x { return false } else { return true };\n+    if x {\n+        return false;\n+    } else {\n+        return true;\n+    };\n }\n \n #[allow(clippy::needless_return)]\n fn bool_ret6(x: bool, y: bool) -> bool {\n-    if x && y { return false } else { return true };\n+    if x && y {\n+        return false;\n+    } else {\n+        return true;\n+    };\n }\n \n fn needless_bool(x: bool) {\n-   if x  == true { };\n+    if x == true {};\n }\n \n fn needless_bool2(x: bool) {\n-   if x  == false { };\n+    if x == false {};\n }\n \n fn needless_bool3(x: bool) {\n-    \n     bool_comparison_trigger! {\n         test_one:   false, false;\n         test_three: false, false;\n         test_two:   true, true;\n     }\n-    \n-    if x == true { };\n-    if x == false { };\n+\n+    if x == true {};\n+    if x == false {};\n }"}, {"sha": "bfc6e82cb558544c07e55ef8f8dbe704eb7b9ba3", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n use std::borrow::Cow;\n \n #[allow(clippy::trivially_copy_pass_by_ref)]\n@@ -41,7 +38,7 @@ fn main() {\n     };\n }\n \n-fn f<T:Copy>(y: &T) -> T {\n+fn f<T: Copy>(y: &T) -> T {\n     *y\n }\n "}, {"sha": "3897c86f53a6eb1f18756e0814c9422718ca3895", "filename": "tests/ui/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::needless_borrowed_reference)]\n #[allow(unused_variables)]\n fn main() {\n@@ -51,8 +47,6 @@ fn foo(a: &Animal, b: &Animal) {\n     match (a, b) {\n         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n         //                  ^    and   ^ should *not* be linted\n-        (&Animal::Dog(ref a), &Animal::Dog(_)) => ()\n-        //              ^ should *not* be linted\n+        (&Animal::Dog(ref a), &Animal::Dog(_)) => (), //              ^ should *not* be linted\n     }\n }\n-"}, {"sha": "df449e3184fe708302648a9fd20a5c772009b55e", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-use std::collections::{HashMap, HashSet, BTreeSet};\n+use std::collections::{BTreeSet, HashMap, HashSet};\n \n #[warn(clippy::needless_collect)]\n #[allow(unused_variables, clippy::iter_cloned_collect)]"}, {"sha": "6d9b9499dce310ec5b768af8e17fb60ebd5d1af2", "filename": "tests/ui/needless_continue.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,16 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n macro_rules! zero {\n-    ($x:expr) => ($x == 0);\n+    ($x:expr) => {\n+        $x == 0\n+    };\n }\n \n macro_rules! nonzero {\n-    ($x:expr) => (!zero!($x));\n+    ($x:expr) => {\n+        !zero!($x)\n+    };\n }\n \n #[warn(clippy::needless_continue)]\n@@ -27,9 +27,9 @@ fn main() {\n \n         if i % 2 == 0 && i % 3 == 0 {\n             println!(\"{}\", i);\n-            println!(\"{}\", i+1);\n+            println!(\"{}\", i + 1);\n             if i % 5 == 0 {\n-                println!(\"{}\", i+2);\n+                println!(\"{}\", i + 2);\n             }\n             let i = 0;\n             println!(\"bar {} \", i);"}, {"sha": "ec9df9fb3d3866b2cc089173e379ec5f8dfecbde", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::needless_pass_by_value)]\n-#![allow(dead_code, clippy::single_match, clippy::redundant_pattern_matching, clippy::many_single_char_names, clippy::option_option)]\n+#![allow(\n+    dead_code,\n+    clippy::single_match,\n+    clippy::redundant_pattern_matching,\n+    clippy::many_single_char_names,\n+    clippy::option_option\n+)]\n \n use std::borrow::Borrow;\n use std::convert::AsRef;\n@@ -92,24 +95,19 @@ struct S<T, U>(T, U);\n \n impl<T: Serialize, U> S<T, U> {\n     fn foo(\n-        self, // taking `self` by value is always allowed\n+        self,\n+        // taking `self` by value is always allowed\n         s: String,\n         t: String,\n     ) -> usize {\n         s.len() + t.capacity()\n     }\n \n-    fn bar(\n-        _t: T, // Ok, since `&T: Serialize` too\n+    fn bar(_t: T // Ok, since `&T: Serialize` too\n     ) {\n     }\n \n-    fn baz(\n-        &self,\n-        _u: U,\n-        _s: Self,\n-    ) {\n-    }\n+    fn baz(&self, _u: U, _s: Self) {}\n }\n \n trait FalsePositive {\n@@ -120,7 +118,9 @@ trait FalsePositive {\n }\n \n // shouldn't warn on extern funcs\n-extern \"C\" fn ext(x: String) -> usize { x.len() }\n+extern \"C\" fn ext(x: String) -> usize {\n+    x.len()\n+}\n \n // whitelist RangeArgument\n fn range<T: ::std::ops::RangeBounds<usize>>(range: T) {"}, {"sha": "28f71d98fe7fb132013e7fea84cbc9a7a707354e", "filename": "tests/ui/needless_pass_by_value_proc_macro.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value_proc_macro.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![crate_type = \"proc-macro\"]\n #![warn(clippy::needless_pass_by_value)]\n \n@@ -18,4 +15,6 @@ extern crate proc_macro;\n use proc_macro::TokenStream;\n \n #[proc_macro_derive(Foo)]\n-pub fn foo(_input: TokenStream) -> TokenStream { unimplemented!() }\n+pub fn foo(_input: TokenStream) -> TokenStream {\n+    unimplemented!()\n+}"}, {"sha": "f3d47eede48b6c750b38f3fbed792536145935b9", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn calc_idx(i: usize) -> usize {\n     (i + i + 20) % 4\n }\n@@ -51,15 +50,15 @@ fn main() {\n     let g = vec![1, 2, 3, 4, 5, 6];\n     let glen = g.len();\n     for i in 0..glen {\n-        let x: u32 = g[i+1..].iter().sum();\n+        let x: u32 = g[i + 1..].iter().sum();\n         println!(\"{}\", g[i] + x);\n     }\n     assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n \n     let mut g = vec![1, 2, 3, 4, 5, 6];\n     let glen = g.len();\n     for i in 0..glen {\n-        g[i] = g[i+1..].iter().sum();\n+        g[i] = g[i + 1..].iter().sum();\n     }\n     assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n \n@@ -77,7 +76,7 @@ fn main() {\n         vec[i] += 1;\n     }\n \n-    let arr = [1,2,3];\n+    let arr = [1, 2, 3];\n \n     for i in 0..3 {\n         println!(\"{}\", arr[i]);"}, {"sha": "101be5946f4c1ad5eafc3b96e38595add3506b9e", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::needless_return)]\n \n fn test_end_of_fn() -> bool {\n@@ -22,7 +18,7 @@ fn test_end_of_fn() -> bool {\n }\n \n fn test_no_semicolon() -> bool {\n-    return true\n+    return true;\n }\n \n fn test_if_block() -> bool {\n@@ -38,7 +34,7 @@ fn test_match(x: bool) -> bool {\n         true => return false,\n         false => {\n             return true;\n-        }\n+        },\n     }\n }\n "}, {"sha": "891c446b0ea30009e00ff59ce4cc8189eacace79", "filename": "tests/ui/needless_update.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::needless_update)]\n #![allow(clippy::no_effect)]\n "}, {"sha": "6c132f85f0a262f630398ed30d23a7bef8a29a59", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n //! This test case utilizes `f64` an easy example for `PartialOrd` only types\n //! but the lint itself actually validates any expression where the left\n //! operand implements `PartialOrd` but not `Ord`.\n@@ -18,13 +15,11 @@ use std::cmp::Ordering;\n \n #[warn(clippy::neg_cmp_op_on_partial_ord)]\n fn main() {\n-\n     let a_value = 1.0;\n     let another_value = 7.0;\n \n     // --- Bad ---\n \n-\n     // Not Less but potentially Greater, Equal or Uncomparable.\n     let _not_less = !(a_value < another_value);\n \n@@ -37,12 +32,10 @@ fn main() {\n     // Not Greater or Equal but potentially Less or Uncomparable.\n     let _not_greater_or_equal = !(a_value >= another_value);\n \n-\n     // --- Good ---\n \n-\n     let _not_less = match a_value.partial_cmp(&another_value) {\n-        None | Some(Ordering::Greater) | Some(Ordering::Equal)  => true,\n+        None | Some(Ordering::Greater) | Some(Ordering::Equal) => true,\n         _ => false,\n     };\n     let _not_less_or_equal = match a_value.partial_cmp(&another_value) {\n@@ -58,10 +51,8 @@ fn main() {\n         _ => false,\n     };\n \n-\n     // --- Should not trigger ---\n \n-\n     let _ = a_value < another_value;\n     let _ = a_value <= another_value;\n     let _ = a_value > another_value;"}, {"sha": "f5f7525922c4da4eaed4454668191c75cc9340d0", "filename": "tests/ui/neg_multiply.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::neg_multiply)]\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n "}, {"sha": "d5a108b0b275a293a3a13ac5f0a31caa9222d8b3", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 41, "deletions": 29, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,17 +7,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-#![allow(clippy::single_match, unused_assignments, unused_variables, clippy::while_immutable_condition)]\n+#![allow(\n+    clippy::single_match,\n+    unused_assignments,\n+    unused_variables,\n+    clippy::while_immutable_condition\n+)]\n \n fn test1() {\n     let mut x = 0;\n-    loop { // clippy::never_loop\n+    loop {\n+        // clippy::never_loop\n         x += 1;\n         if x == 1 {\n-            return\n+            return;\n         }\n         break;\n     }\n@@ -28,16 +31,17 @@ fn test2() {\n     loop {\n         x += 1;\n         if x == 1 {\n-            break\n+            break;\n         }\n     }\n }\n \n fn test3() {\n     let mut x = 0;\n-    loop { // never loops\n+    loop {\n+        // never loops\n         x += 1;\n-        break\n+        break;\n     }\n }\n \n@@ -54,24 +58,29 @@ fn test4() {\n \n fn test5() {\n     let i = 0;\n-\tloop { // never loops\n-        while i == 0 { // never loops\n-            break\n+    loop {\n+        // never loops\n+        while i == 0 {\n+            // never loops\n+            break;\n         }\n-        return\n-\t}\n+        return;\n+    }\n }\n \n fn test6() {\n     let mut x = 0;\n     'outer: loop {\n         x += 1;\n-\t\tloop { // never loops\n-            if x == 5 { break }\n-\t\t\tcontinue 'outer\n-\t\t}\n-\t\treturn\n-\t}\n+        loop {\n+            // never loops\n+            if x == 5 {\n+                break;\n+            }\n+            continue 'outer;\n+        }\n+        return;\n+    }\n }\n \n fn test7() {\n@@ -82,7 +91,7 @@ fn test7() {\n             1 => continue,\n             _ => (),\n         }\n-        return\n+        return;\n     }\n }\n \n@@ -99,13 +108,15 @@ fn test8() {\n \n fn test9() {\n     let x = Some(1);\n-    while let Some(y) = x { // never loops\n-        return\n+    while let Some(y) = x {\n+        // never loops\n+        return;\n     }\n }\n \n fn test10() {\n-    for x in 0..10 { // never loops\n+    for x in 0..10 {\n+        // never loops\n         match x {\n             1 => break,\n             _ => return,\n@@ -118,7 +129,7 @@ fn test11<F: FnMut() -> i32>(mut f: F) {\n         return match f() {\n             1 => continue,\n             _ => (),\n-        }\n+        };\n     }\n }\n \n@@ -138,7 +149,8 @@ pub fn test12(a: bool, b: bool) {\n \n pub fn test13() {\n     let mut a = true;\n-    loop { // infinite loop\n+    loop {\n+        // infinite loop\n         while a {\n             if true {\n                 a = false;\n@@ -151,11 +163,12 @@ pub fn test13() {\n \n pub fn test14() {\n     let mut a = true;\n-    'outer: while a { // never loops\n+    'outer: while a {\n+        // never loops\n         while a {\n             if a {\n                 a = false;\n-                continue\n+                continue;\n             }\n         }\n         break 'outer;\n@@ -187,4 +200,3 @@ fn main() {\n     test13();\n     test14();\n }\n-"}, {"sha": "a31f046c08412625ad161a1d27a1865d7b16b9c0", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -1,7 +1,7 @@\n #![warn(clippy::new_ret_no_self)]\n #![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n \n-fn main(){}\n+fn main() {}\n \n trait R {\n     type Item;\n@@ -96,82 +96,106 @@ struct TupleReturnerOk;\n \n impl TupleReturnerOk {\n     // should not trigger lint\n-    pub fn new() -> (Self, u32) { unimplemented!(); }\n+    pub fn new() -> (Self, u32) {\n+        unimplemented!();\n+    }\n }\n \n struct TupleReturnerOk2;\n \n impl TupleReturnerOk2 {\n     // should not trigger lint (it doesn't matter which element in the tuple is Self)\n-    pub fn new() -> (u32, Self) { unimplemented!(); }\n+    pub fn new() -> (u32, Self) {\n+        unimplemented!();\n+    }\n }\n \n struct TupleReturnerOk3;\n \n impl TupleReturnerOk3 {\n     // should not trigger lint (tuple can contain multiple Self)\n-    pub fn new() -> (Self, Self) { unimplemented!(); }\n+    pub fn new() -> (Self, Self) {\n+        unimplemented!();\n+    }\n }\n \n struct TupleReturnerBad;\n \n impl TupleReturnerBad {\n     // should trigger lint\n-    pub fn new() -> (u32, u32) { unimplemented!(); }\n+    pub fn new() -> (u32, u32) {\n+        unimplemented!();\n+    }\n }\n \n struct MutPointerReturnerOk;\n \n impl MutPointerReturnerOk {\n     // should not trigger lint\n-    pub fn new() -> *mut Self { unimplemented!(); }\n+    pub fn new() -> *mut Self {\n+        unimplemented!();\n+    }\n }\n \n struct MutPointerReturnerOk2;\n \n impl MutPointerReturnerOk2 {\n     // should not trigger lint\n-    pub fn new() -> *const Self { unimplemented!(); }\n+    pub fn new() -> *const Self {\n+        unimplemented!();\n+    }\n }\n \n struct MutPointerReturnerBad;\n \n impl MutPointerReturnerBad {\n     // should trigger lint\n-    pub fn new() -> *mut V { unimplemented!(); }\n+    pub fn new() -> *mut V {\n+        unimplemented!();\n+    }\n }\n \n struct GenericReturnerOk;\n \n impl GenericReturnerOk {\n     // should not trigger lint\n-    pub fn new() -> Option<Self> { unimplemented!(); }\n+    pub fn new() -> Option<Self> {\n+        unimplemented!();\n+    }\n }\n \n struct GenericReturnerBad;\n \n impl GenericReturnerBad {\n     // should trigger lint\n-    pub fn new() -> Option<u32> { unimplemented!(); }\n+    pub fn new() -> Option<u32> {\n+        unimplemented!();\n+    }\n }\n \n struct NestedReturnerOk;\n \n impl NestedReturnerOk {\n     // should not trigger lint\n-    pub fn new() -> (Option<Self>, u32) { unimplemented!(); }\n+    pub fn new() -> (Option<Self>, u32) {\n+        unimplemented!();\n+    }\n }\n \n struct NestedReturnerOk2;\n \n impl NestedReturnerOk2 {\n     // should not trigger lint\n-    pub fn new() -> ((Self, u32), u32) { unimplemented!(); }\n+    pub fn new() -> ((Self, u32), u32) {\n+        unimplemented!();\n+    }\n }\n \n struct NestedReturnerOk3;\n \n impl NestedReturnerOk3 {\n     // should not trigger lint\n-    pub fn new() -> Option<(Self, u32)> { unimplemented!(); }\n+    pub fn new() -> Option<(Self, u32)> {\n+        unimplemented!();\n+    }\n }"}, {"sha": "a1818e037a705d564a91546240f3702093132599", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,92 +7,113 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(const_fn)]\n-\n-\n #![allow(dead_code)]\n #![warn(clippy::new_without_default, clippy::new_without_default_derive)]\n \n pub struct Foo;\n \n impl Foo {\n-    pub fn new() -> Foo { Foo }\n+    pub fn new() -> Foo {\n+        Foo\n+    }\n }\n \n pub struct Bar;\n \n impl Bar {\n-    pub fn new() -> Self { Bar }\n+    pub fn new() -> Self {\n+        Bar\n+    }\n }\n \n pub struct Ok;\n \n impl Ok {\n-    pub fn new() -> Self { Ok }\n+    pub fn new() -> Self {\n+        Ok\n+    }\n }\n \n impl Default for Ok {\n-    fn default() -> Self { Ok }\n+    fn default() -> Self {\n+        Ok\n+    }\n }\n \n pub struct Params;\n \n impl Params {\n-    pub fn new(_: u32) -> Self { Params }\n+    pub fn new(_: u32) -> Self {\n+        Params\n+    }\n }\n \n pub struct GenericsOk<T> {\n     bar: T,\n }\n \n impl<U> Default for GenericsOk<U> {\n-    fn default() -> Self { unimplemented!(); }\n+    fn default() -> Self {\n+        unimplemented!();\n+    }\n }\n \n impl<'c, V> GenericsOk<V> {\n-    pub fn new() -> GenericsOk<V> { unimplemented!() }\n+    pub fn new() -> GenericsOk<V> {\n+        unimplemented!()\n+    }\n }\n \n pub struct LtOk<'a> {\n     foo: &'a bool,\n }\n \n impl<'b> Default for LtOk<'b> {\n-    fn default() -> Self { unimplemented!(); }\n+    fn default() -> Self {\n+        unimplemented!();\n+    }\n }\n \n impl<'c> LtOk<'c> {\n-    pub fn new() -> LtOk<'c> { unimplemented!() }\n+    pub fn new() -> LtOk<'c> {\n+        unimplemented!()\n+    }\n }\n \n pub struct LtKo<'a> {\n     foo: &'a bool,\n }\n \n impl<'c> LtKo<'c> {\n-    pub fn new() -> LtKo<'c> { unimplemented!() }\n+    pub fn new() -> LtKo<'c> {\n+        unimplemented!()\n+    }\n     // FIXME: that suggestion is missing lifetimes\n }\n \n struct Private;\n \n impl Private {\n-    fn new() -> Private { unimplemented!() } // We don't lint private items\n+    fn new() -> Private {\n+        unimplemented!()\n+    } // We don't lint private items\n }\n \n struct Const;\n \n impl Const {\n-    pub const fn new() -> Const { Const } // const fns can't be implemented via Default\n+    pub const fn new() -> Const {\n+        Const\n+    } // const fns can't be implemented via Default\n }\n \n pub struct IgnoreGenericNew;\n \n impl IgnoreGenericNew {\n-    pub fn new<T>() -> Self { IgnoreGenericNew } // the derived Default does not make sense here as the result depends on T\n+    pub fn new<T>() -> Self {\n+        IgnoreGenericNew\n+    } // the derived Default does not make sense here as the result depends on T\n }\n \n pub trait TraitWithNew: Sized {\n@@ -104,7 +125,9 @@ pub trait TraitWithNew: Sized {\n pub struct IgnoreUnsafeNew;\n \n impl IgnoreUnsafeNew {\n-    pub unsafe fn new() -> Self { IgnoreUnsafeNew }\n+    pub unsafe fn new() -> Self {\n+        IgnoreUnsafeNew\n+    }\n }\n \n #[derive(Default)]"}, {"sha": "6b51c50dcde9456455373ea886c5381dec621e9b", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(box_syntax)]\n-\n-\n #![warn(clippy::no_effect)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n@@ -23,7 +18,7 @@\n struct Unit;\n struct Tuple(i32);\n struct Struct {\n-    field: i32\n+    field: i32,\n }\n enum Enum {\n     Tuple(i32),\n@@ -34,7 +29,7 @@ impl Drop for DropUnit {\n     fn drop(&mut self) {}\n }\n struct DropStruct {\n-    field: i32\n+    field: i32,\n }\n impl Drop for DropStruct {\n     fn drop(&mut self) {}\n@@ -58,11 +53,19 @@ union Union {\n     b: f64,\n }\n \n-fn get_number() -> i32 { 0 }\n-fn get_struct() -> Struct { Struct { field: 0 } }\n-fn get_drop_struct() -> DropStruct { DropStruct { field: 0 } }\n+fn get_number() -> i32 {\n+    0\n+}\n+fn get_struct() -> Struct {\n+    Struct { field: 0 }\n+}\n+fn get_drop_struct() -> DropStruct {\n+    DropStruct { field: 0 }\n+}\n \n-unsafe fn unsafe_fn() -> i32 { 0 }\n+unsafe fn unsafe_fn() -> i32 {\n+    0\n+}\n \n fn main() {\n     let s = get_struct();"}, {"sha": "591e1994ee3e10315c8b84f75e2273bf3e78fa1b", "filename": "tests/ui/non_copy_const.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,25 +7,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(const_string_new, const_vec_new)]\n #![allow(clippy::ref_in_deref, dead_code)]\n \n-use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize, Ordering};\n-use std::cell::Cell;\n-use std::sync::Once;\n use std::borrow::Cow;\n+use std::cell::Cell;\n use std::fmt::Display;\n+use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::Once;\n \n const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n //~^ ERROR interior mutable\n \n macro_rules! declare_const {\n-    ($name:ident: $ty:ty = $e:expr) => { const $name: $ty = $e; };\n+    ($name:ident: $ty:ty = $e:expr) => {\n+        const $name: $ty = $e;\n+    };\n }\n declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n \n@@ -136,7 +135,7 @@ fn main() {\n     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n     let _ = ATOMIC_TUPLE.1.into_iter();\n     let _ = ATOMIC_TUPLE.2;\n-    let _ = &{ATOMIC_TUPLE};\n+    let _ = &{ ATOMIC_TUPLE };\n \n     CELL.set(2); //~ ERROR interior mutability\n     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability"}, {"sha": "86c9edc821d7edfc22ece6aea004be93212f8587", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,13 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-#![warn(clippy::all,clippy::similar_names)]\n+#![warn(clippy::all, clippy::similar_names)]\n #![allow(unused, clippy::println_empty_string)]\n \n-\n struct Foo {\n     apple: i32,\n     bpple: i32,\n@@ -29,7 +25,6 @@ fn main() {\n \n     let cpple: i32;\n \n-\n     let a_bar: i32;\n     let b_bar: i32;\n     let c_bar: i32;\n@@ -54,7 +49,6 @@ fn main() {\n     let blubx: i32;\n     let bluby: i32;\n \n-\n     let cake: i32;\n     let cakes: i32;\n     let coke: i32;\n@@ -81,7 +75,6 @@ fn main() {\n     let parsed: i32;\n     let parsee: i32;\n \n-\n     let setter: i32;\n     let getter: i32;\n     let tx1: i32;\n@@ -92,8 +85,10 @@ fn main() {\n \n fn foo() {\n     let Foo { apple, bpple } = unimplemented!();\n-    let Foo { apple: spring,\n-        bpple: sprang } = unimplemented!();\n+    let Foo {\n+        apple: spring,\n+        bpple: sprang,\n+    } = unimplemented!();\n }\n \n #[derive(Clone, Debug)]\n@@ -132,7 +127,6 @@ fn bla() {\n         {\n             let e: i32;\n             let f: i32;\n-\n         }\n         match 5 {\n             1 => println!(\"\"),\n@@ -149,18 +143,18 @@ fn underscores_and_numbers() {\n     let _1 = 1; //~ERROR Consider a more descriptive name\n     let ____1 = 1; //~ERROR Consider a more descriptive name\n     let __1___2 = 12; //~ERROR Consider a more descriptive name\n-    let _1_ok= 1;\n+    let _1_ok = 1;\n }\n \n fn issue2927() {\n-  let args = 1;\n-  format!(\"{:?}\", 2);\n+    let args = 1;\n+    format!(\"{:?}\", 2);\n }\n \n fn issue3078() {\n     match \"a\" {\n         stringify!(a) => {},\n-        _ => {}\n+        _ => {},\n     }\n }\n \n@@ -171,7 +165,7 @@ impl Bar {\n         let _1 = 1;\n         let ____1 = 1;\n         let __1___2 = 12;\n-        let _1_ok= 1;\n+        let _1_ok = 1;\n     }\n }\n "}, {"sha": "b121aae788c3b2364e2abc9b683816e547adb9b0", "filename": "tests/ui/ok_expect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use std::io;\n \n struct MyError(()); // doesn't implement Debug\n \n #[derive(Debug)]\n struct MyErrorWithParam<T> {\n-    x: T\n+    x: T,\n }\n \n fn main() {\n@@ -26,7 +25,7 @@ fn main() {\n     // the error type implements `Debug`\n     let res2: Result<i32, MyError> = Ok(0);\n     res2.ok().expect(\"oh noes!\");\n-    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n+    let res3: Result<u32, MyErrorWithParam<u8>> = Ok(0);\n     res3.ok().expect(\"whoof\");\n     let res4: Result<u32, io::Error> = Ok(0);\n     res4.ok().expect(\"argh\");"}, {"sha": "3ede64ce3aa020e1be078a6cc0d72b2cb9f43e8b", "filename": "tests/ui/ok_if_let.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::if_let_some_result)]\n \n fn str_to_int(x: &str) -> i32 {"}, {"sha": "1112b6794cfeca4811a510033f3786d8ad23034b", "filename": "tests/ui/op_ref.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(unused_variables, clippy::blacklisted_name)]\n \n use std::collections::HashSet;"}, {"sha": "f4d0af94b3fe090fc1e98688d36288eab46df357", "filename": "tests/ui/open_options.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n use std::fs::OpenOptions;\n \n #[allow(unused_must_use)]"}, {"sha": "5200ff694a07feee6e09d9b529d61b71eabd171b", "filename": "tests/ui/option_map_unit_fn.rs", "status": "modified", "additions": 50, "deletions": 29, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Foption_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Foption_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n \n@@ -39,7 +36,7 @@ fn option_map_unit_fn() {\n     let x = HasOption { field: Some(10) };\n \n     x.field.map(plus_one);\n-    let _ : Option<()> = x.field.map(do_nothing);\n+    let _: Option<()> = x.field.map(do_nothing);\n \n     x.field.map(do_nothing);\n \n@@ -48,57 +45,82 @@ fn option_map_unit_fn() {\n     x.field.map(diverge);\n \n     let captured = 10;\n-    if let Some(value) = x.field { do_nothing(value + captured) };\n-    let _ : Option<()> = x.field.map(|value| do_nothing(value + captured));\n+    if let Some(value) = x.field {\n+        do_nothing(value + captured)\n+    };\n+    let _: Option<()> = x.field.map(|value| do_nothing(value + captured));\n \n     x.field.map(|value| x.do_option_nothing(value + captured));\n \n-    x.field.map(|value| { x.do_option_plus_one(value + captured); });\n-\n+    x.field.map(|value| {\n+        x.do_option_plus_one(value + captured);\n+    });\n \n     x.field.map(|value| do_nothing(value + captured));\n \n-    x.field.map(|value| { do_nothing(value + captured) });\n-\n-    x.field.map(|value| { do_nothing(value + captured); });\n+    x.field.map(|value| do_nothing(value + captured));\n \n-    x.field.map(|value| { { do_nothing(value + captured); } });\n+    x.field.map(|value| {\n+        do_nothing(value + captured);\n+    });\n \n+    x.field.map(|value| {\n+        do_nothing(value + captured);\n+    });\n \n     x.field.map(|value| diverge(value + captured));\n \n-    x.field.map(|value| { diverge(value + captured) });\n-\n-    x.field.map(|value| { diverge(value + captured); });\n+    x.field.map(|value| diverge(value + captured));\n \n-    x.field.map(|value| { { diverge(value + captured); } });\n+    x.field.map(|value| {\n+        diverge(value + captured);\n+    });\n \n+    x.field.map(|value| {\n+        diverge(value + captured);\n+    });\n \n     x.field.map(|value| plus_one(value + captured));\n-    x.field.map(|value| { plus_one(value + captured) });\n-    x.field.map(|value| { let y = plus_one(value + captured); });\n-\n-    x.field.map(|value| { plus_one(value + captured); });\n-\n-    x.field.map(|value| { { plus_one(value + captured); } });\n+    x.field.map(|value| plus_one(value + captured));\n+    x.field.map(|value| {\n+        let y = plus_one(value + captured);\n+    });\n \n+    x.field.map(|value| {\n+        plus_one(value + captured);\n+    });\n \n-    x.field.map(|ref value| { do_nothing(value + captured) });\n+    x.field.map(|value| {\n+        plus_one(value + captured);\n+    });\n \n+    x.field.map(|ref value| do_nothing(value + captured));\n \n-    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value)\n+    });\n \n-    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+    x.field.map(|value| {\n+        if value > 0 {\n+            do_nothing(value);\n+            do_nothing(value)\n+        }\n+    });\n \n     // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n     // proper suggestion for these cases\n     x.field.map(|value| {\n         do_nothing(value);\n         do_nothing(value)\n     });\n-    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value);\n+    });\n \n-    // The following should suggest `if let Some(_X) ...` as it's difficult to generate a proper let variable name for them\n+    // The following should suggest `if let Some(_X) ...` as it's difficult to generate a proper let\n+    // variable name for them\n     Some(42).map(diverge);\n     \"12\".parse::<i32>().ok().map(diverge);\n     Some(plus_one(1)).map(do_nothing);\n@@ -108,5 +130,4 @@ fn option_map_unit_fn() {\n     y.map(do_nothing);\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "fcfd4e6ea56d5dcea24d475eb51228374116257f", "filename": "tests/ui/option_option.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-fn input(_: Option<Option<u8>>) {\n-}\n+fn input(_: Option<Option<u8>>) {}\n \n fn output() -> Option<Option<u8>> {\n     None\n@@ -40,7 +38,7 @@ trait Trait {\n \n enum Enum {\n     Tuple(Option<Option<u8>>),\n-    Struct{x: Option<Option<u8>>},\n+    Struct { x: Option<Option<u8>> },\n }\n \n // The lint allows this\n@@ -69,5 +67,3 @@ fn main() {\n     // The lint allows this\n     let expr = Some(Some(true));\n }\n-\n-"}, {"sha": "a5cff3df9d7e39ceb176859742243342318584a6", "filename": "tests/ui/overflow_check_conditional.rs", "status": "modified", "additions": 21, "deletions": 57, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,65 +7,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(clippy::many_single_char_names)]\n #![warn(clippy::overflow_check_conditional)]\n \n fn main() {\n-\tlet a: u32 = 1;\n-\tlet b: u32 = 2;\n-\tlet c: u32 = 3;\n-\tif a + b < a {\n-\n-\t}\n-\tif a > a + b {\n-\n-\t}\n-\tif a + b < b {\n-\n-\t}\n-\tif b > a + b {\n-\n-\t}\n-\tif a - b > b {\n-\n-\t}\n-\tif b < a - b {\n-\n-\t}\n-\tif a - b > a {\n-\n-\t}\n-\tif a < a - b {\n-\n-\t}\n-\tif a + b < c {\n-\n-\t}\n-\tif c > a + b {\n-\n-\t}\n-\tif a - b < c {\n-\n-\t}\n-\tif c > a - b {\n-\n-\t}\n-\tlet i = 1.1;\n-\tlet j = 2.2;\n-\tif i + j < i {\n-\n-\t}\n-\tif i - j < i {\n-\n-\t}\n-\tif i > i + j {\n-\n-\t}\n-\tif i - j < i {\n-\n-\t}\n+    let a: u32 = 1;\n+    let b: u32 = 2;\n+    let c: u32 = 3;\n+    if a + b < a {}\n+    if a > a + b {}\n+    if a + b < b {}\n+    if b > a + b {}\n+    if a - b > b {}\n+    if b < a - b {}\n+    if a - b > a {}\n+    if a < a - b {}\n+    if a + b < c {}\n+    if c > a + b {}\n+    if a - b < c {}\n+    if c > a - b {}\n+    let i = 1.1;\n+    let j = 2.2;\n+    if i + j < i {}\n+    if i - j < i {}\n+    if i > i + j {}\n+    if i - j < i {}\n }"}, {"sha": "93dec197ff5f8dea8897e8ed963eaac87034a8f9", "filename": "tests/ui/panic_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::panic_params, clippy::unimplemented)]\n \n fn missing() {\n@@ -46,7 +42,7 @@ fn ok_bracket() {\n     }\n }\n \n-const ONE : u32= 1;\n+const ONE: u32 = 1;\n \n fn ok_nomsg() {\n     assert!({ 1 == ONE });"}, {"sha": "3f9f91c81b1dd045a548c7d7499389b54eeecc07", "filename": "tests/ui/partialeq_ne_impl.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(dead_code)]\n \n struct Foo;\n \n impl PartialEq for Foo {\n-    fn eq(&self, _: &Foo) -> bool { true }\n-    fn ne(&self, _: &Foo) -> bool { false }\n+    fn eq(&self, _: &Foo) -> bool {\n+        true\n+    }\n+    fn ne(&self, _: &Foo) -> bool {\n+        false\n+    }\n }\n \n fn main() {}"}, {"sha": "e10afdb86b8228ab03e2b2299c2fdcbe4b4a51b0", "filename": "tests/ui/patterns.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,20 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused)]\n #![warn(clippy::all)]\n \n fn main() {\n     let v = Some(true);\n     match v {\n         Some(x) => (),\n-        y @ _   => (),\n+        y @ _ => (),\n     }\n     match v {\n-        Some(x)  => (),\n-        y @ None => (),  // no error\n+        Some(x) => (),\n+        y @ None => (), // no error\n     }\n }"}, {"sha": "82009cd3873ae0e80774bbe7a2efde81e4a7e033", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,21 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::precedence)]\n #[allow(clippy::identity_op)]\n #[allow(clippy::eq_op)]\n \n macro_rules! trip {\n-   ($a:expr) => {\n-    match $a & 0b1111_1111i8 {\n-        0 => println!(\"a is zero ({})\", $a),\n-        _ => println!(\"a is {}\", $a),\n-    }\n-   };\n+    ($a:expr) => {\n+        match $a & 0b1111_1111i8 {\n+            0 => println!(\"a is zero ({})\", $a),\n+            _ => println!(\"a is {}\", $a),\n+        }\n+    };\n }\n \n fn main() {"}, {"sha": "a43482cba626f32cde8c45464256422ad7a20750", "filename": "tests/ui/print.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::print_literal, clippy::write_literal)]\n #![warn(clippy::print_stdout, clippy::use_debug)]\n "}, {"sha": "74756384067adfd5ba6e86c344b6aa8b01bd6010", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::print_literal)]\n \n fn main() {\n@@ -18,17 +15,17 @@ fn main() {\n     println!(\"Hello\");\n     let world = \"world\";\n     println!(\"Hello {}\", world);\n-    println!(\"Hello {world}\", world=world);\n+    println!(\"Hello {world}\", world = world);\n     println!(\"3 in hex is {:X}\", 3);\n     println!(\"2 + 1 = {:.4}\", 3);\n     println!(\"2 + 1 = {:5.4}\", 3);\n     println!(\"Debug test {:?}\", \"hello, world\");\n     println!(\"{0:8} {1:>8}\", \"hello\", \"world\");\n     println!(\"{1:8} {0:>8}\", \"hello\", \"world\");\n-    println!(\"{foo:8} {bar:>8}\", foo=\"hello\", bar=\"world\");\n-    println!(\"{bar:8} {foo:>8}\", foo=\"hello\", bar=\"world\");\n-    println!(\"{number:>width$}\", number=1, width=6);\n-    println!(\"{number:>0width$}\", number=1, width=6);\n+    println!(\"{foo:8} {bar:>8}\", foo = \"hello\", bar = \"world\");\n+    println!(\"{bar:8} {foo:>8}\", foo = \"hello\", bar = \"world\");\n+    println!(\"{number:>width$}\", number = 1, width = 6);\n+    println!(\"{number:>0width$}\", number = 1, width = 6);\n \n     // these should throw warnings\n     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n@@ -45,6 +42,6 @@ fn main() {\n     println!(\"{1} {0}\", \"hello\", \"world\");\n \n     // named args shouldn't change anything either\n-    println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n-    println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+    println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n+    println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n }"}, {"sha": "351fd60bc367976db4f9e77146937a4749e0dd9d", "filename": "tests/ui/print_with_newline.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::print_literal)]\n #![warn(clippy::print_with_newline)]\n "}, {"sha": "19a0389762a643707afd58190164757c39c441bb", "filename": "tests/ui/println_empty_string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprintln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fprintln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprintln_empty_string.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn main() {\n     println!();\n     println!(\"\");"}, {"sha": "0d7a829888e5e7301344a989cae37a0083c7517c", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused, clippy::many_single_char_names)]\n #![warn(clippy::ptr_arg)]\n \n@@ -19,20 +16,21 @@ fn do_vec(x: &Vec<i64>) {\n     //Nothing here\n }\n \n-fn do_vec_mut(x: &mut Vec<i64>) { // no error here\n+fn do_vec_mut(x: &mut Vec<i64>) {\n+    // no error here\n     //Nothing here\n }\n \n fn do_str(x: &String) {\n     //Nothing here either\n }\n \n-fn do_str_mut(x: &mut String) { // no error here\n+fn do_str_mut(x: &mut String) {\n+    // no error here\n     //Nothing here either\n }\n \n-fn main() {\n-}\n+fn main() {}\n \n trait Foo {\n     type Item;\n@@ -62,9 +60,7 @@ fn str_cloned(x: &String) -> String {\n     let a = x.clone();\n     let b = x.clone();\n     let c = b.clone();\n-    let d = a.clone()\n-             .clone()\n-             .clone();\n+    let d = a.clone().clone().clone();\n     x.clone()\n }\n \n@@ -75,13 +71,14 @@ fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n }\n \n fn false_positive_capacity_too(x: &String) -> String {\n-    if x.capacity() > 1024 { panic!(\"Too large!\"); }\n+    if x.capacity() > 1024 {\n+        panic!(\"Too large!\");\n+    }\n     x.clone()\n }\n \n #[allow(dead_code)]\n-fn test_cow_with_ref(c: &Cow<[i32]>) {\n-}\n+fn test_cow_with_ref(c: &Cow<[i32]>) {}\n \n #[allow(dead_code)]\n fn test_cow(c: Cow<[i32]>) {\n@@ -93,4 +90,6 @@ trait Foo2 {\n }\n \n // no error for &self references where self is of type String (#2293)\n-impl Foo2 for String { fn do_string(&self) {} }\n+impl Foo2 for String {\n+    fn do_string(&self) {}\n+}"}, {"sha": "2c9e47d3f328fb9f77f34fc8ba7c7b9c08d31c5b", "filename": "tests/ui/ptr_offset_with_cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_offset_with_cast.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn main() {\n     let vec = vec![b'a', b'b', b'c'];\n     let ptr = vec.as_ptr();"}, {"sha": "7f1d06fbd29e557a200915ba0a6c3d8edb637669", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,18 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn some_func(a: Option<u32>) -> Option<u32> {\n-\tif a.is_none() {\n-\t\treturn None\n-\t}\n+    if a.is_none() {\n+        return None;\n+    }\n \n-\ta\n+    a\n }\n \n pub enum SeemsOption<T> {\n     Some(T),\n-    None\n+    None,\n }\n \n impl<T> SeemsOption<T> {\n@@ -39,25 +38,25 @@ fn returns_something_similar_to_option(a: SeemsOption<u32>) -> SeemsOption<u32>\n }\n \n pub struct SomeStruct {\n-\tpub opt: Option<u32>,\n+    pub opt: Option<u32>,\n }\n \n impl SomeStruct {\n-\tpub fn func(&self) -> Option<u32> {\n-\t\tif (self.opt).is_none() {\n-\t\t\treturn None;\n-\t\t}\n+    pub fn func(&self) -> Option<u32> {\n+        if (self.opt).is_none() {\n+            return None;\n+        }\n \n-\t\tself.opt\n-\t}\n+        self.opt\n+    }\n }\n \n fn main() {\n-\tsome_func(Some(42));\n-\tsome_func(None);\n+    some_func(Some(42));\n+    some_func(None);\n \n-\tlet some_struct = SomeStruct { opt: Some(54) };\n-\tsome_struct.func();\n+    let some_struct = SomeStruct { opt: Some(54) };\n+    some_struct.func();\n \n     let so = SeemsOption::Some(45);\n     returns_something_similar_to_option(so);"}, {"sha": "1eab67e20d0f8364869187bdd17f449d035fec4a", "filename": "tests/ui/range.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n struct NotARange;\n impl NotARange {\n     fn step_by(&self, _: u32) {}\n@@ -31,13 +28,13 @@ fn main() {\n     let y = NotARange;\n     y.step_by(0);\n \n-    let v1 = vec![1,2,3];\n-    let v2 = vec![4,5];\n+    let v1 = vec![1, 2, 3];\n+    let v2 = vec![4, 5];\n     let _x = v1.iter().zip(0..v1.len());\n     let _y = v1.iter().zip(0..v2.len()); // No error\n \n     // check const eval\n-    let _ = v1.iter().step_by(2/3);\n+    let _ = v1.iter().step_by(2 / 3);\n }\n \n #[allow(unused)]"}, {"sha": "d8c955ba73f5f7d815a3bbd205b8c5b42beb8381", "filename": "tests/ui/range_plus_minus_one.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Frange_plus_minus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Frange_plus_minus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,38 +7,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n fn f() -> usize {\n     42\n }\n \n #[warn(clippy::range_plus_one)]\n fn main() {\n-    for _ in 0..2 { }\n-    for _ in 0..=2 { }\n+    for _ in 0..2 {}\n+    for _ in 0..=2 {}\n \n-    for _ in 0..3+1 { }\n-    for _ in 0..=3+1 { }\n+    for _ in 0..3 + 1 {}\n+    for _ in 0..=3 + 1 {}\n \n-    for _ in 0..1+5 { }\n-    for _ in 0..=1+5 { }\n+    for _ in 0..1 + 5 {}\n+    for _ in 0..=1 + 5 {}\n \n-    for _ in 1..1+1 { }\n-    for _ in 1..=1+1 { }\n+    for _ in 1..1 + 1 {}\n+    for _ in 1..=1 + 1 {}\n \n-    for _ in 0..13+13 { }\n-    for _ in 0..=13-7 { }\n+    for _ in 0..13 + 13 {}\n+    for _ in 0..=13 - 7 {}\n \n-    for _ in 0..(1+f()) { }\n-    for _ in 0..=(1+f()) { }\n+    for _ in 0..(1 + f()) {}\n+    for _ in 0..=(1 + f()) {}\n \n-    let _ = ..11-1;\n-    let _ = ..=11-1;\n-    let _ = ..=(11-1);\n-    let _ = (1..11+1);\n-    let _ = (f()+1)..(f()+1);\n+    let _ = ..11 - 1;\n+    let _ = ..=11 - 1;\n+    let _ = ..=(11 - 1);\n+    let _ = (1..11 + 1);\n+    let _ = (f() + 1)..(f() + 1);\n \n     let mut vec: Vec<()> = std::vec::Vec::new();\n     vec.drain(..);"}, {"sha": "d55898748be16e228adbdbacac9662803ab64de2", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -9,8 +9,8 @@\n \n #![warn(clippy::redundant_clone)]\n \n-use std::path::Path;\n use std::ffi::OsString;\n+use std::path::Path;\n \n fn main() {\n     let _ = [\"lorem\", \"ipsum\"].join(\" \").to_string();\n@@ -33,7 +33,8 @@ fn main() {\n     let _ = OsString::new().to_os_string();\n \n     // Check that lint level works\n-    #[allow(clippy::redundant_clone)] let _ = String::new().to_string();\n+    #[allow(clippy::redundant_clone)]\n+    let _ = String::new().to_string();\n }\n \n #[derive(Clone)]"}, {"sha": "46c56922974e011caf0e17f3f52ed761fdfd1bf4", "filename": "tests/ui/redundant_closure_call.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,27 +7,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::redundant_closure_call)]\n \n fn main() {\n-\tlet a = (|| 42)();\n+    let a = (|| 42)();\n \n-\tlet mut i = 1;\n-\tlet mut k = (|m| m+1)(i);\n+    let mut i = 1;\n+    let mut k = (|m| m + 1)(i);\n \n-\tk = (|a,b| a*b)(1,5);\n+    k = (|a, b| a * b)(1, 5);\n \n-\tlet closure = || 32;\n-\ti = closure();\n+    let closure = || 32;\n+    i = closure();\n \n-\tlet closure = |i| i+1;\n-\ti = closure(3);\n+    let closure = |i| i + 1;\n+    i = closure(3);\n \n-\ti = closure(4);\n+    i = closure(4);\n \n     #[allow(clippy::needless_return)]\n     (|| return 2)();"}, {"sha": "68adba92f8a297d0dcc6d4958e3a3535f60f3306", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,17 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::redundant_field_names)]\n #![allow(unused_variables)]\n #![feature(inclusive_range, inclusive_range_fields, inclusive_range_methods)]\n \n #[macro_use]\n extern crate derive_new;\n \n-use std::ops::{Range, RangeFrom, RangeTo, RangeInclusive, RangeToInclusive};\n+use std::ops::{Range, RangeFrom, RangeInclusive, RangeTo, RangeToInclusive};\n \n mod foo {\n     pub const BAR: u8 = 0;\n@@ -46,8 +43,8 @@ fn main() {\n         gender: gender,\n         age: age,\n \n-        name, //should be ok\n-        buzz: fizz, //should be ok\n+        name,          //should be ok\n+        buzz: fizz,    //should be ok\n         foo: foo::BAR, //should be ok\n     };\n "}, {"sha": "3744695a53541638e3fd7edb8616367a504bd872", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,39 +7,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n \n-\n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n \n-    if let Err(_) = Err::<i32, i32>(42) {\n-    }\n+    if let Err(_) = Err::<i32, i32>(42) {}\n \n-    if let None = None::<()> {\n-    }\n+    if let None = None::<()> {}\n \n-    if let Some(_) = Some(42) {\n-    }\n+    if let Some(_) = Some(42) {}\n \n-    if Ok::<i32, i32>(42).is_ok() {\n-    }\n+    if Ok::<i32, i32>(42).is_ok() {}\n \n-    if Err::<i32, i32>(42).is_err() {\n-    }\n+    if Err::<i32, i32>(42).is_err() {}\n \n-    if None::<i32>.is_none() {\n-    }\n+    if None::<i32>.is_none() {}\n \n-    if Some(42).is_some() {\n-    }\n+    if Some(42).is_some() {}\n \n-    if let Ok(x) = Ok::<i32,i32>(42) {\n+    if let Ok(x) = Ok::<i32, i32>(42) {\n         println!(\"{}\", x);\n     }\n "}, {"sha": "583829aae418962139682f83dc2d2e7ba6f680f0", "filename": "tests/ui/reference.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,15 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n fn get_number() -> usize {\n     10\n }\n \n-fn get_reference(n : &usize) -> &usize {\n+fn get_reference(n: &usize) -> &usize {\n     n\n }\n \n@@ -32,7 +28,7 @@ fn main() {\n \n     let b = *get_reference(&a);\n \n-    let bytes : Vec<usize> = vec![1, 2, 3, 4];\n+    let bytes: Vec<usize> = vec![1, 2, 3, 4];\n     let b = *&bytes[1..2][0];\n \n     //This produces a suggestion of 'let b = (a);' which\n@@ -41,7 +37,7 @@ fn main() {\n \n     let b = *(&a);\n \n-    let b = *((&a));\n+    let b = *(&a);\n \n     let b = *&&a;\n "}, {"sha": "2d9c34828500ae27a6f4b8dabf3951e130d749e7", "filename": "tests/ui/regex.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,17 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(unused)]\n #![warn(clippy::invalid_regex, clippy::trivial_regex, clippy::regex_macro)]\n \n extern crate regex;\n \n-use regex::{Regex, RegexSet, RegexBuilder};\n-use regex::bytes::{Regex as BRegex, RegexSet as BRegexSet, RegexBuilder as BRegexBuilder};\n+use regex::bytes::{Regex as BRegex, RegexBuilder as BRegexBuilder, RegexSet as BRegexSet};\n+use regex::{Regex, RegexBuilder, RegexSet};\n \n const OPENING_PAREN: &str = \"(\";\n const NOT_A_REAL_REGEX: &str = \"foobar\";\n@@ -37,24 +33,15 @@ fn syntax_error() {\n     let closing_paren = \")\";\n     let not_linted = Regex::new(closing_paren);\n \n-    let set = RegexSet::new(&[\n-        r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n-        r\"[a-z]+\\.(com|org|net)\",\n-    ]);\n+    let set = RegexSet::new(&[r\"[a-z]+@[a-z]+\\.(com|org|net)\", r\"[a-z]+\\.(com|org|net)\"]);\n     let bset = BRegexSet::new(&[\n         r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n         r\"[a-z]+\\.(com|org|net)\",\n         r\".\", // regression test\n     ]);\n \n-    let set_error = RegexSet::new(&[\n-        OPENING_PAREN,\n-        r\"[a-z]+\\.(com|org|net)\",\n-    ]);\n-    let bset_error = BRegexSet::new(&[\n-        OPENING_PAREN,\n-        r\"[a-z]+\\.(com|org|net)\",\n-    ]);\n+    let set_error = RegexSet::new(&[OPENING_PAREN, r\"[a-z]+\\.(com|org|net)\"]);\n+    let bset_error = BRegexSet::new(&[OPENING_PAREN, r\"[a-z]+\\.(com|org|net)\"]);\n \n     let raw_string_error = Regex::new(r\"[...\\/...]\");\n     let raw_string_error = Regex::new(r#\"[...\\/...]\"#);"}, {"sha": "ca3d3b13edc0f37c51a60bda826cd64c8fbebabb", "filename": "tests/ui/replace_consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,13 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(integer_atomics)]\n #![allow(clippy::blacklisted_name)]\n #![deny(clippy::replace_consts)]\n \n use std::sync::atomic::*;\n-use std::sync::{ONCE_INIT, Once};\n+use std::sync::{Once, ONCE_INIT};\n \n #[rustfmt::skip]\n fn bad() {"}, {"sha": "043b3efd45e7c4cf8546e72bc3ce02ec1576aefd", "filename": "tests/ui/result_map_unit_fn.rs", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fresult_map_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fresult_map_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n #![allow(unused)]\n@@ -40,7 +37,7 @@ fn result_map_unit_fn() {\n     let x = HasResult { field: Ok(10) };\n \n     x.field.map(plus_one);\n-    let _ : Result<(), usize> = x.field.map(do_nothing);\n+    let _: Result<(), usize> = x.field.map(do_nothing);\n \n     x.field.map(do_nothing);\n \n@@ -49,57 +46,82 @@ fn result_map_unit_fn() {\n     x.field.map(diverge);\n \n     let captured = 10;\n-    if let Ok(value) = x.field { do_nothing(value + captured) };\n-    let _ : Result<(), usize> = x.field.map(|value| do_nothing(value + captured));\n+    if let Ok(value) = x.field {\n+        do_nothing(value + captured)\n+    };\n+    let _: Result<(), usize> = x.field.map(|value| do_nothing(value + captured));\n \n     x.field.map(|value| x.do_result_nothing(value + captured));\n \n-    x.field.map(|value| { x.do_result_plus_one(value + captured); });\n-\n+    x.field.map(|value| {\n+        x.do_result_plus_one(value + captured);\n+    });\n \n     x.field.map(|value| do_nothing(value + captured));\n \n-    x.field.map(|value| { do_nothing(value + captured) });\n-\n-    x.field.map(|value| { do_nothing(value + captured); });\n+    x.field.map(|value| do_nothing(value + captured));\n \n-    x.field.map(|value| { { do_nothing(value + captured); } });\n+    x.field.map(|value| {\n+        do_nothing(value + captured);\n+    });\n \n+    x.field.map(|value| {\n+        do_nothing(value + captured);\n+    });\n \n     x.field.map(|value| diverge(value + captured));\n \n-    x.field.map(|value| { diverge(value + captured) });\n-\n-    x.field.map(|value| { diverge(value + captured); });\n+    x.field.map(|value| diverge(value + captured));\n \n-    x.field.map(|value| { { diverge(value + captured); } });\n+    x.field.map(|value| {\n+        diverge(value + captured);\n+    });\n \n+    x.field.map(|value| {\n+        diverge(value + captured);\n+    });\n \n     x.field.map(|value| plus_one(value + captured));\n-    x.field.map(|value| { plus_one(value + captured) });\n-    x.field.map(|value| { let y = plus_one(value + captured); });\n-\n-    x.field.map(|value| { plus_one(value + captured); });\n-\n-    x.field.map(|value| { { plus_one(value + captured); } });\n+    x.field.map(|value| plus_one(value + captured));\n+    x.field.map(|value| {\n+        let y = plus_one(value + captured);\n+    });\n \n+    x.field.map(|value| {\n+        plus_one(value + captured);\n+    });\n \n-    x.field.map(|ref value| { do_nothing(value + captured) });\n+    x.field.map(|value| {\n+        plus_one(value + captured);\n+    });\n \n+    x.field.map(|ref value| do_nothing(value + captured));\n \n-    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value)\n+    });\n \n-    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+    x.field.map(|value| {\n+        if value > 0 {\n+            do_nothing(value);\n+            do_nothing(value)\n+        }\n+    });\n \n     // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n     // proper suggestion for these cases\n     x.field.map(|value| {\n         do_nothing(value);\n         do_nothing(value)\n     });\n-    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value);\n+    });\n \n-    // The following should suggest `if let Ok(_X) ...` as it's difficult to generate a proper let variable name for them\n+    // The following should suggest `if let Ok(_X) ...` as it's difficult to generate a proper let\n+    // variable name for them\n     let res: Result<!, usize> = Ok(42).map(diverge);\n     \"12\".parse::<i32>().map(diverge);\n \n@@ -110,6 +132,4 @@ fn result_map_unit_fn() {\n     y.map(do_nothing);\n }\n \n-fn main() {\n-}\n-\n+fn main() {}"}, {"sha": "c52fd065dbef5093290c9014dae22b7bb8c1567c", "filename": "tests/ui/serde.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::serde_api_misuse)]\n #![allow(dead_code)]\n \n@@ -25,13 +22,15 @@ impl<'de> serde::de::Visitor<'de> for A {\n     }\n \n     fn visit_str<E>(self, _v: &str) -> Result<Self::Value, E>\n-        where E: serde::de::Error,\n+    where\n+        E: serde::de::Error,\n     {\n         unimplemented!()\n     }\n \n     fn visit_string<E>(self, _v: String) -> Result<Self::Value, E>\n-        where E: serde::de::Error,\n+    where\n+        E: serde::de::Error,\n     {\n         unimplemented!()\n     }\n@@ -47,11 +46,11 @@ impl<'de> serde::de::Visitor<'de> for B {\n     }\n \n     fn visit_string<E>(self, _v: String) -> Result<Self::Value, E>\n-        where E: serde::de::Error,\n+    where\n+        E: serde::de::Error,\n     {\n         unimplemented!()\n     }\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "e960a6252be9ccc8df0283e0da0c88fe4f6b74b7", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,16 +7,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n-#![warn(clippy::all, clippy::pedantic, clippy::shadow_same, clippy::shadow_reuse, clippy::shadow_unrelated)]\n+#![warn(\n+    clippy::all,\n+    clippy::pedantic,\n+    clippy::shadow_same,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated\n+)]\n #![allow(unused_parens, unused_variables, clippy::missing_docs_in_private_items)]\n \n-fn id<T>(x: T) -> T { x }\n+fn id<T>(x: T) -> T {\n+    x\n+}\n \n-fn first(x: (isize, isize)) -> isize { x.0 }\n+fn first(x: (isize, isize)) -> isize {\n+    x.0\n+}\n \n fn main() {\n     let mut x = 1;\n@@ -35,7 +41,9 @@ fn main() {\n \n     let o = Some(1_u8);\n \n-    if let Some(p) = o { assert_eq!(1, p); }\n+    if let Some(p) = o {\n+        assert_eq!(1, p);\n+    }\n     match o {\n         Some(p) => p, // no error, because the p above is in its own scope\n         None => 0,"}, {"sha": "efe9920dd88c3dcdbeeb37ad0ba8571d4372cb41", "filename": "tests/ui/short_circuit_statement.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::short_circuit_statement)]\n \n fn main() {"}, {"sha": "5277841fe325cabd9553a0db749a45d4537a1faf", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n use std::collections::HashSet;\n \n fn main() {"}, {"sha": "5a1bde3de3243b7b9eabc8c71aac88163fcc1f6a", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,20 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::single_match)]\n \n-fn dummy() {\n-}\n+fn dummy() {}\n \n-fn single_match(){\n+fn single_match() {\n     let x = Some(1u8);\n \n     match x {\n-        Some(y) => { println!(\"{:?}\", y); }\n-        _ => ()\n+        Some(y) => {\n+            println!(\"{:?}\", y);\n+        },\n+        _ => (),\n     };\n \n     let x = Some(1u8);\n@@ -29,19 +27,19 @@ fn single_match(){\n         // We suggest `if let Some(y) = x { .. }` because the macro\n         // is expanded before we can do anything.\n         Some(y) => println!(\"{:?}\", y),\n-        _ => ()\n+        _ => (),\n     }\n \n-    let z = (1u8,1u8);\n+    let z = (1u8, 1u8);\n     match z {\n         (2...3, 7...9) => dummy(),\n-        _ => {}\n+        _ => {},\n     };\n \n     // Not linted (pattern guards used)\n     match x {\n         Some(y) if y == 0 => println!(\"{:?}\", y),\n-        _ => ()\n+        _ => (),\n     }\n \n     // Not linted (no block with statements in the single arm)\n@@ -51,22 +49,25 @@ fn single_match(){\n     }\n }\n \n-enum Foo { Bar, Baz(u8) }\n-use Foo::*;\n+enum Foo {\n+    Bar,\n+    Baz(u8),\n+}\n use std::borrow::Cow;\n+use Foo::*;\n \n fn single_match_know_enum() {\n     let x = Some(1u8);\n-    let y : Result<_, i8> = Ok(1i8);\n+    let y: Result<_, i8> = Ok(1i8);\n \n     match x {\n         Some(y) => dummy(),\n-        None => ()\n+        None => (),\n     };\n \n     match y {\n         Ok(y) => dummy(),\n-        Err(..) => ()\n+        Err(..) => (),\n     };\n \n     let c = Cow::Borrowed(\"\");\n@@ -89,4 +90,4 @@ fn single_match_know_enum() {\n     }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "18c26f7fc2631158b299191cfb89a3b1d5fa3e60", "filename": "tests/ui/single_match_else.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -20,7 +20,10 @@ static NODE: ExprNode = ExprNode::Unicorns;\n fn unwrap_addr() -> Option<&'static ExprNode> {\n     match ExprNode::Butterflies {\n         ExprNode::ExprAddrOf => Some(&NODE),\n-        _ => { let x = 5; None },\n+        _ => {\n+            let x = 5;\n+            None\n+        },\n     }\n }\n "}, {"sha": "cf11384467c3e67d0e7a27d053c69f05ca4dcd1b", "filename": "tests/ui/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslow_vector_initialization.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -62,13 +62,11 @@ fn resize_vector() {\n     vec1.resize(10, 0);\n }\n \n-fn do_stuff(vec: &mut Vec<u8>) {\n-\n-}\n+fn do_stuff(vec: &mut Vec<u8>) {}\n \n fn extend_vector_with_manipulations_between() {\n     let len = 300;\n-    let mut vec1:Vec<u8> = Vec::with_capacity(len);\n+    let mut vec1: Vec<u8> = Vec::with_capacity(len);\n     do_stuff(&mut vec1);\n     vec1.extend(repeat(0).take(len));\n }"}, {"sha": "529c2487f542b8f265bc32255c1418a38aabcf82", "filename": "tests/ui/starts_ends_with.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstarts_ends_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstarts_ends_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(dead_code)]\n \n fn main() {}\n@@ -22,22 +19,28 @@ fn starts_with() {\n \n fn chars_cmp_with_unwrap() {\n     let s = String::from(\"foo\");\n-    if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+    if s.chars().next().unwrap() == 'f' {\n+        // s.starts_with('f')\n         // Nothing here\n     }\n-    if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+    if s.chars().next_back().unwrap() == 'o' {\n+        // s.ends_with('o')\n         // Nothing here\n     }\n-    if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+    if s.chars().last().unwrap() == 'o' {\n+        // s.ends_with('o')\n         // Nothing here\n     }\n-    if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+    if s.chars().next().unwrap() != 'f' {\n+        // !s.starts_with('f')\n         // Nothing here\n     }\n-    if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+    if s.chars().next_back().unwrap() != 'o' {\n+        // !s.ends_with('o')\n         // Nothing here\n     }\n-    if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+    if s.chars().last().unwrap() != 'o' {\n+        // !s.ends_with('o')\n         // Nothing here\n     }\n }"}, {"sha": "56b466ede20a840ef17333482247af08d611649e", "filename": "tests/ui/string_extend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstring_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstring_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[derive(Copy, Clone)]\n struct HasChars;\n "}, {"sha": "e15e80c1928e77c061cad0b33af3e3fbb56a1231", "filename": "tests/ui/strings.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #[warn(clippy::string_add)]\n #[allow(clippy::string_add_assign)]\n fn add_only() {"}, {"sha": "922487d671d0ec8ccbd2868fa4026a46e47a02e6", "filename": "tests/ui/stutter.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstutter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fstutter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::stutter)]\n #![allow(dead_code)]\n "}, {"sha": "ed845b7647a568b54005e1c6b1330bc3c2f4996f", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,12 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::suspicious_arithmetic_impl)]\n-use std::ops::{Add, AddAssign, Mul, Sub, Div};\n+use std::ops::{Add, AddAssign, Div, Mul, Sub};\n \n #[derive(Copy, Clone)]\n struct Foo(u32);"}, {"sha": "e9f227d47a0708309c652acfc2492ae3d7b62a6a", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n #![allow(clippy::blacklisted_name, unused_assignments)]\n \n@@ -54,7 +50,7 @@ fn main() {\n     a = b;\n     b = a;\n \n-    ; let t = a;\n+;    let t = a;\n     a = b;\n     b = t;\n \n@@ -63,7 +59,7 @@ fn main() {\n     c.0 = a;\n     a = c.0;\n \n-    ; let t = c.0;\n+;    let t = c.0;\n     c.0 = a;\n     a = t;\n }"}, {"sha": "79c090f05722a4b70447392d5f5722c4e5d193f6", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,29 +7,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::temporary_assignment)]\n \n use std::ops::{Deref, DerefMut};\n \n struct Struct {\n-    field: i32\n+    field: i32,\n }\n \n struct Wrapper<'a> {\n-    inner: &'a mut Struct\n+    inner: &'a mut Struct,\n }\n \n impl<'a> Deref for Wrapper<'a> {\n     type Target = Struct;\n-    fn deref(&self) -> &Struct { self.inner }\n+    fn deref(&self) -> &Struct {\n+        self.inner\n+    }\n }\n \n impl<'a> DerefMut for Wrapper<'a> {\n-    fn deref_mut(&mut self) -> &mut Struct { self.inner }\n+    fn deref_mut(&mut self) -> &mut Struct {\n+        self.inner\n+    }\n }\n \n fn main() {"}, {"sha": "b051746bbd49bf115cc613c7739d9e52e0c59274", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,32 +7,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::all)]\n #![allow(unused)]\n \n fn the_answer(ref mut x: u8) {\n-  *x = 42;\n+    *x = 42;\n }\n \n fn main() {\n-  let mut x = 0;\n-  the_answer(x);\n-  // Closures should not warn\n-  let y = |ref x| { println!(\"{:?}\", x) };\n-  y(1u8);\n+    let mut x = 0;\n+    the_answer(x);\n+    // Closures should not warn\n+    let y = |ref x| println!(\"{:?}\", x);\n+    y(1u8);\n \n-  let ref x = 1;\n+    let ref x = 1;\n \n-  let ref y: (&_, u8) = (&1, 2);\n+    let ref y: (&_, u8) = (&1, 2);\n \n-  let ref z = 1 + 2;\n+    let ref z = 1 + 2;\n \n-  let ref mut z = 1 + 2;\n+    let ref mut z = 1 + 2;\n \n-  let (ref x, _) = (1,2); // okay, not top level\n-  println!(\"The answer is {}.\", x);\n+    let (ref x, _) = (1, 2); // okay, not top level\n+    println!(\"The answer is {}.\", x);\n }"}, {"sha": "9afb3399c5946752aa0089178185d3254d410f4e", "filename": "tests/ui/trailing_zeros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftrailing_zeros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftrailing_zeros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zeros.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(stmt_expr_attributes)]\n-\n #![allow(unused_parens)]\n \n fn main() {\n     let x: i32 = 42;\n-    let _ = #[clippy::author] (x & 0b1111 == 0);  // suggest trailing_zeros\n+    let _ = #[clippy::author]\n+    (x & 0b1111 == 0); // suggest trailing_zeros\n     let _ = x & 0b1_1111 == 0; // suggest trailing_zeros\n     let _ = x & 0b1_1010 == 0; // do not lint\n     let _ = x & 1 == 0; // do not lint"}, {"sha": "b27014201cd76510a702fae0847779fc3b4995f8", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(dead_code)]\n \n extern crate core;\n@@ -101,11 +97,11 @@ fn useless() {\n \n         let _: *const usize = std::mem::transmute(5_isize);\n \n-        let _  = 5_isize as *const usize;\n+        let _ = 5_isize as *const usize;\n \n-        let _: *const usize = std::mem::transmute(1+1usize);\n+        let _: *const usize = std::mem::transmute(1 + 1usize);\n \n-        let _  = (1+1_usize) as *const usize;\n+        let _ = (1 + 1_usize) as *const usize;\n     }\n }\n \n@@ -201,9 +197,7 @@ fn transmute_ptr_to_ptr() {\n     let s = \"hello world\".to_owned();\n     let lp = LifetimeParam { s: &s };\n     let _: &LifetimeParam<'static> = unsafe { std::mem::transmute(&lp) };\n-    let _: &GenericParam<&LifetimeParam<'static>> = unsafe {\n-        std::mem::transmute(&GenericParam { t: &lp})\n-    };\n+    let _: &GenericParam<&LifetimeParam<'static>> = unsafe { std::mem::transmute(&GenericParam { t: &lp }) };\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "dd96e2dabe1624ec54caf0f0b22a5e618d08b17a", "filename": "tests/ui/transmute_32bit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftransmute_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftransmute_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_32bit.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,11 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n //ignore-x86_64\n \n-\n-\n #[warn(wrong_transmute)]\n fn main() {\n     unsafe {"}, {"sha": "fbc298e3a062df4b94a3c4e042b7643b92ba2006", "filename": "tests/ui/transmute_64bit.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftransmute_64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftransmute_64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n //ignore-x86\n //no-ignore-x86_64\n \n-\n-\n #[warn(clippy::wrong_transmute)]\n fn main() {\n     unsafe {"}, {"sha": "94e0113e56ca95767a2d0dff2262fb7556f88ffd", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-#![allow(clippy::many_single_char_names, clippy::blacklisted_name, clippy::redundant_field_names)]\n+#![allow(\n+    clippy::many_single_char_names,\n+    clippy::blacklisted_name,\n+    clippy::redundant_field_names\n+)]\n \n #[derive(Copy, Clone)]\n struct Foo(u32);\n@@ -20,7 +21,10 @@ struct Bar([u8; 24]);\n \n #[derive(Copy, Clone)]\n pub struct Color {\n-    pub r: u8, pub g: u8, pub b: u8, pub a: u8,\n+    pub r: u8,\n+    pub g: u8,\n+    pub b: u8,\n+    pub a: u8,\n }\n \n struct FooRef<'a> {\n@@ -29,8 +33,7 @@ struct FooRef<'a> {\n \n type Baz = u32;\n \n-fn good(a: &mut u32, b: u32, c: &Bar) {\n-}\n+fn good(a: &mut u32, b: u32, c: &Bar) {}\n \n fn good_return_implicit_lt_ref(foo: &Foo) -> &u32 {\n     &foo.0\n@@ -42,33 +45,24 @@ fn good_return_explicit_lt_ref<'a>(foo: &'a Foo) -> &'a u32 {\n }\n \n fn good_return_implicit_lt_struct(foo: &Foo) -> FooRef {\n-    FooRef {\n-        foo,\n-    }\n+    FooRef { foo }\n }\n \n #[allow(clippy::needless_lifetimes)]\n fn good_return_explicit_lt_struct<'a>(foo: &'a Foo) -> FooRef<'a> {\n-    FooRef {\n-        foo,\n-    }\n+    FooRef { foo }\n }\n \n-fn bad(x: &u32, y: &Foo, z: &Baz) {\n-}\n+fn bad(x: &u32, y: &Foo, z: &Baz) {}\n \n impl Foo {\n-    fn good(self, a: &mut u32, b: u32, c: &Bar) {\n-    }\n+    fn good(self, a: &mut u32, b: u32, c: &Bar) {}\n \n-    fn good2(&mut self) {\n-    }\n+    fn good2(&mut self) {}\n \n-    fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n-    }\n+    fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n \n-    fn bad2(x: &u32, y: &Foo, z: &Baz) {\n-    }\n+    fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n }\n \n impl AsRef<u32> for Foo {\n@@ -78,11 +72,9 @@ impl AsRef<u32> for Foo {\n }\n \n impl Bar {\n-    fn good(&self, a: &mut u32, b: u32, c: &Bar) {\n-    }\n+    fn good(&self, a: &mut u32, b: u32, c: &Bar) {}\n \n-    fn bad2(x: &u32, y: &Foo, z: &Baz) {\n-    }\n+    fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n }\n \n trait MyTrait {"}, {"sha": "17027306367d95443c6d40f84a9f09209ff62e19", "filename": "tests/ui/ty_fn_sig.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fty_fn_sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fty_fn_sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fty_fn_sig.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Regression test\n \n pub fn retry<F: Fn()>(f: F) {"}, {"sha": "f0ede2fd48c9a00179a491aa873b54f41cd671b6", "filename": "tests/ui/types.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,14 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // should not warn on lossy casting in constant types\n // because not supported yet\n-const C : i32 = 42;\n-const C_I64 : i64 = C as i64;\n+const C: i32 = 42;\n+const C_I64: i64 = C as i64;\n \n fn main() {\n     // should suggest i64::from(c)\n-    let c : i32 = 42;\n-    let c_i64 : i64 = c as i64;\n+    let c: i32 = 42;\n+    let c_i64: i64 = c as i64;\n }"}, {"sha": "0e1200db227f557098d4470aae850c2c5dafee4f", "filename": "tests/ui/unicode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[warn(clippy::zero_width_space)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");"}, {"sha": "571882ced0f7d4985b3918aae4ef5eff93b51dfd", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::unit_arg)]\n #![allow(clippy::no_effect)]\n \n@@ -33,15 +30,19 @@ impl Bar {\n \n fn bad() {\n     foo({});\n-    foo({ 1; });\n+    foo({\n+        1;\n+    });\n     foo(foo(1));\n     foo({\n         foo(1);\n         foo(2);\n     });\n     foo3({}, 2, 2);\n     let b = Bar;\n-    b.bar({ 1; });\n+    b.bar({\n+        1;\n+    });\n }\n \n fn ok() {"}, {"sha": "0bc87f43c15103a5d9462b390df6680837f8a9dc", "filename": "tests/ui/unit_cmp.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::unit_cmp)]\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n@@ -19,13 +15,18 @@ pub struct ContainsUnit(()); // should be fine\n \n fn main() {\n     // this is fine\n-    if true == false {\n-    }\n+    if true == false {}\n \n     // this warns\n-    if { true; } == { false; } {\n-    }\n-\n-    if { true; } > { false; } {\n-    }\n+    if {\n+        true;\n+    } == {\n+        false;\n+    } {}\n+\n+    if {\n+        true;\n+    } > {\n+        false;\n+    } {}\n }"}, {"sha": "e583614a93c86d9df98f9783574cbe9a527d1545", "filename": "tests/ui/unknown_clippy_lints.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funknown_clippy_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funknown_clippy_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_clippy_lints.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -11,6 +11,4 @@\n #![warn(clippy::pedantic)]\n \n #[warn(clippy::if_not_els)]\n-fn main() {\n-\n-}\n+fn main() {}"}, {"sha": "40c4b4961e94cda768569c27f05d78343835015c", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::clone_on_ref_ptr)]\n #![allow(unused)]\n \n@@ -70,14 +67,14 @@ fn clone_on_double_ref() {\n     let y = &&x;\n     let z: &Vec<_> = y.clone();\n \n-    println!(\"{:p} {:p}\",*y, z);\n+    println!(\"{:p} {:p}\", *y, z);\n }\n \n fn iter_clone_collect() {\n-    let v = [1,2,3,4,5];\n-    let v2 : Vec<isize> = v.iter().cloned().collect();\n-    let v3 : HashSet<isize> = v.iter().cloned().collect();\n-    let v4 : VecDeque<isize> = v.iter().cloned().collect();\n+    let v = [1, 2, 3, 4, 5];\n+    let v2: Vec<isize> = v.iter().cloned().collect();\n+    let v3: HashSet<isize> = v.iter().cloned().collect();\n+    let v4: VecDeque<isize> = v.iter().cloned().collect();\n }\n \n mod many_derefs {\n@@ -92,17 +89,21 @@ mod many_derefs {\n         ($src:ident, $dst:ident) => {\n             impl std::ops::Deref for $src {\n                 type Target = $dst;\n-                fn deref(&self) -> &Self::Target { &$dst }\n+                fn deref(&self) -> &Self::Target {\n+                    &$dst\n+                }\n             }\n-        }\n+        };\n     }\n \n     impl_deref!(A, B);\n     impl_deref!(B, C);\n     impl_deref!(C, D);\n     impl std::ops::Deref for D {\n         type Target = &'static E;\n-        fn deref(&self) -> &Self::Target { &&E }\n+        fn deref(&self) -> &Self::Target {\n+            &&E\n+        }\n     }\n \n     fn go1() {"}, {"sha": "a0c183a58ccac5a65b695c4ea3b2f5a001075d97", "filename": "tests/ui/unnecessary_filter_map.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_filter_map.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn main() {\n     let _ = (0..4).filter_map(|x| if x > 1 { Some(x) } else { None });\n-    let _ = (0..4).filter_map(|x| { if x > 1 { return Some(x); }; None });\n+    let _ = (0..4).filter_map(|x| {\n+        if x > 1 {\n+            return Some(x);\n+        };\n+        None\n+    });\n     let _ = (0..4).filter_map(|x| match x {\n         0 | 1 => None,\n         _ => Some(x),"}, {"sha": "4b4a6ee044c082f7ad41f24adf4c0a24b099deec", "filename": "tests/ui/unnecessary_fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,7 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n /// Calls which should trigger the `UNNECESSARY_FOLD` lint\n fn unnecessary_fold() {\n     // Can be replaced by .any"}, {"sha": "34e1112f006741ed806264efd711ac13eed30c59", "filename": "tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -13,14 +13,14 @@\n \n struct Tuple(i32);\n struct Struct {\n-    field: i32\n+    field: i32,\n }\n enum Enum {\n     Tuple(i32),\n     Struct { field: i32 },\n }\n struct DropStruct {\n-    field: i32\n+    field: i32,\n }\n impl Drop for DropStruct {\n     fn drop(&mut self) {}\n@@ -40,9 +40,15 @@ struct FooString {\n     s: String,\n }\n \n-fn get_number() -> i32 { 0 }\n-fn get_struct() -> Struct { Struct { field: 0 } }\n-fn get_drop_struct() -> DropStruct { DropStruct { field: 0 } }\n+fn get_number() -> i32 {\n+    0\n+}\n+fn get_struct() -> Struct {\n+    Struct { field: 0 }\n+}\n+fn get_drop_struct() -> DropStruct {\n+    DropStruct { field: 0 }\n+}\n \n fn main() {\n     Tuple(get_number());\n@@ -63,8 +69,12 @@ fn main() {\n     (42, get_number()).1;\n     [get_number(); 55];\n     [42; 55][get_number() as usize];\n-    {get_number()};\n-    FooString { s: String::from(\"blah\"), };\n+    {\n+        get_number()\n+    };\n+    FooString {\n+        s: String::from(\"blah\"),\n+    };\n \n     // Do not warn\n     DropTuple(get_number());"}, {"sha": "31aa367e50640a177b7ad65993d6b659a8a54a1b", "filename": "tests/ui/unnecessary_ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funnecessary_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_ref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![feature(tool_attributes)]\n #![feature(stmt_expr_attributes)]\n "}, {"sha": "14676c1e76fbcaa12a98ce40eca9b2ca54694900", "filename": "tests/ui/unneeded_field_pattern.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::unneeded_field_pattern)]\n #[allow(dead_code, unused)]\n \n@@ -24,13 +20,12 @@ fn main() {\n     let f = Foo { a: 0, b: 0, c: 0 };\n \n     match f {\n-        Foo { a: _, b: 0, .. } => {}\n-\n-        Foo { a: _, b: _, c: _ } => {}\n+        Foo { a: _, b: 0, .. } => {},\n \n+        Foo { a: _, b: _, c: _ } => {},\n     }\n     match f {\n-        Foo { b: 0, .. } => {} // should be OK\n-        Foo { .. } => {} // and the Force might be with this one\n+        Foo { b: 0, .. } => {}, // should be OK\n+        Foo { .. } => {},       // and the Force might be with this one\n     }\n }"}, {"sha": "ad29fcf8fe411a2d28a50566deafc60f8ae04db7", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,13 +7,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #[warn(clippy::unreadable_literal)]\n #[allow(unused_variables)]\n fn main() {\n-    let good = (0b1011_i64, 0o1_234_u32, 0x1_234_567, 65536, 1_2345_6789, 1234_f32, 1_234.12_f32, 1_234.123_f32, 1.123_4_f32);\n+    let good = (\n+        0b1011_i64,\n+        0o1_234_u32,\n+        0x1_234_567,\n+        65536,\n+        1_2345_6789,\n+        1234_f32,\n+        1_234.12_f32,\n+        1_234.123_f32,\n+        1.123_4_f32,\n+    );\n     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n     let good_sci = 1.1234e1;\n     let bad_sci = 1.123456e1;"}, {"sha": "bfab077375d20ed53ffe0c813f0748e646877639", "filename": "tests/ui/unsafe_removed_from_name.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,23 +7,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused_imports)]\n #![allow(dead_code)]\n #![warn(clippy::unsafe_removed_from_name)]\n \n-use std::cell::{UnsafeCell as TotallySafeCell};\n+use std::cell::UnsafeCell as TotallySafeCell;\n \n use std::cell::UnsafeCell as TotallySafeCellAgain;\n \n // Shouldn't error\n-use std::cell::{UnsafeCell as SuperDangerousUnsafeCell};\n-use std::cell::{UnsafeCell as Dangerunsafe};\n-use std::cell::UnsafeCell as Bombsawayunsafe;\n-use std::cell::{RefCell as ProbablyNotUnsafe};\n+use std::cell::RefCell as ProbablyNotUnsafe;\n use std::cell::RefCell as RefCellThatCantBeUnsafe;\n+use std::cell::UnsafeCell as SuperDangerousUnsafeCell;\n+use std::cell::UnsafeCell as Dangerunsafe;\n+use std::cell::UnsafeCell as Bombsawayunsafe;\n \n mod mod_with_some_unsafe_things {\n     pub struct Safe {}"}, {"sha": "a125d0397af879282650d595f18a2fb9427ff98f", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(dead_code)]\n #![warn(clippy::unused_io_amount)]\n \n@@ -37,5 +33,4 @@ fn unwrap<T: io::Read + io::Write>(s: &mut T) {\n     s.read(&mut buf).unwrap();\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "8db29dcf3fcb12e4ea0b33aee1276ed02288b006", "filename": "tests/ui/unused_labels.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,16 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![allow(dead_code, clippy::items_after_statements, clippy::never_loop)]\n #![warn(clippy::unused_label)]\n \n fn unused_label() {\n     'label: for i in 1..2 {\n-        if i > 4 { continue }\n+        if i > 4 {\n+            continue;\n+        }\n     }\n }\n \n@@ -26,9 +24,10 @@ fn foo() {\n     }\n }\n \n-\n fn bla() {\n-    'a: loop { break }\n+    'a: loop {\n+        break;\n+    }\n     fn blub() {}\n }\n "}, {"sha": "99e80103f1f0db798b3d1e07dfb3ec6ed6e8f358", "filename": "tests/ui/unused_lt.rs", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,25 +7,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-#![allow(unused, dead_code, clippy::needless_lifetimes, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n+#![allow(\n+    unused,\n+    dead_code,\n+    clippy::needless_lifetimes,\n+    clippy::needless_pass_by_value,\n+    clippy::trivially_copy_pass_by_ref\n+)]\n #![warn(clippy::extra_unused_lifetimes)]\n \n-fn empty() {\n-\n-}\n-\n-\n-fn used_lt<'a>(x: &'a u8) {\n-\n-}\n-\n+fn empty() {}\n \n-fn unused_lt<'a>(x: u8) {\n+fn used_lt<'a>(x: &'a u8) {}\n \n-}\n+fn unused_lt<'a>(x: u8) {}\n \n fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n     // 'a is useless here since it's not directly bound\n@@ -39,19 +34,14 @@ fn lt_return_only<'a>() -> &'a u8 {\n     panic!()\n }\n \n-fn unused_lt_blergh<'a>(x: Option<Box<Send+'a>>) {\n-\n-}\n-\n+fn unused_lt_blergh<'a>(x: Option<Box<Send + 'a>>) {}\n \n trait Foo<'a> {\n     fn x(&self, a: &'a u8);\n }\n \n impl<'a> Foo<'a> for u8 {\n-    fn x(&self, a: &'a u8) {\n-\n-    }\n+    fn x(&self, a: &'a u8) {}\n }\n \n struct Bar;\n@@ -61,20 +51,23 @@ impl Bar {\n }\n \n // test for #489 (used lifetimes in bounds)\n-pub fn parse<'a, I: Iterator<Item=&'a str>>(_it: &mut I) {\n+pub fn parse<'a, I: Iterator<Item = &'a str>>(_it: &mut I) {\n     unimplemented!()\n }\n-pub fn parse2<'a, I>(_it: &mut I) where I: Iterator<Item=&'a str>{\n+pub fn parse2<'a, I>(_it: &mut I)\n+where\n+    I: Iterator<Item = &'a str>,\n+{\n     unimplemented!()\n }\n \n-struct X { x: u32 }\n+struct X {\n+    x: u32,\n+}\n \n impl X {\n     fn self_ref_with_lifetime<'a>(&'a self) {}\n     fn explicit_self_with_lifetime<'a>(self: &'a Self) {}\n }\n \n-fn main() {\n-\n-}\n+fn main() {}"}, {"sha": "8573f78d43b7eae353559f588b1fd7ae3e57a23e", "filename": "tests/ui/unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Funwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,16 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![warn(clippy::all)]\n \n fn main() {\n     let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();\n }\n \n fn new_lines() {\n-    let s = Some(String::from(\"test string\"))\n-        .unwrap_or(\"Fail\".to_string())\n-        .len();\n+    let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();\n }"}, {"sha": "c21df403035f78481abec9fb9ea1b9fac4c27fbc", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n #![allow(clippy::should_implement_trait)]\n@@ -57,21 +54,24 @@ mod better {\n //todo the lint does not handle lifetimed struct\n //the following module should trigger the lint on the third method only\n mod lifetimes {\n-    struct Foo<'a>{foo_str: &'a str}\n+    struct Foo<'a> {\n+        foo_str: &'a str,\n+    }\n \n     impl<'a> Foo<'a> {\n-        // Cannot use `Self` as return type, because the function is actually `fn foo<'b>(s: &'b str) -> Foo<'b>`\n+        // Cannot use `Self` as return type, because the function is actually `fn foo<'b>(s: &'b str) ->\n+        // Foo<'b>`\n         fn foo(s: &str) -> Foo {\n             Foo { foo_str: s }\n         }\n         // cannot replace with `Self`, because that's `Foo<'a>`\n         fn bar() -> Foo<'static> {\n-            Foo { foo_str: \"foo\"}\n+            Foo { foo_str: \"foo\" }\n         }\n \n         // `Self` is applicable here\n         fn clone(&self) -> Foo<'a> {\n-            Foo {foo_str: self.foo_str}\n+            Foo { foo_str: self.foo_str }\n         }\n     }\n }\n@@ -105,8 +105,7 @@ mod traits {\n             p1\n         }\n \n-        fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {\n-        }\n+        fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n \n         fn vals(_: Bad) -> Bad {\n             Bad::default()\n@@ -137,8 +136,7 @@ mod traits {\n             p1\n         }\n \n-        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {\n-        }\n+        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n         fn vals(_: Self) -> Self {\n             Self::default()\n@@ -175,8 +173,7 @@ mod traits {\n             p1\n         }\n \n-        fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {\n-        }\n+        fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {}\n \n         fn vals(_: Self) -> Self {\n             Self::default()\n@@ -210,11 +207,11 @@ mod existential {\n     struct Foo;\n \n     impl Foo {\n-        fn bad(foos: &[Self]) -> impl Iterator<Item=&Foo> {\n+        fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n             foos.iter()\n         }\n \n-        fn good(foos: &[Self]) -> impl Iterator<Item=&Self> {\n+        fn good(foos: &[Self]) -> impl Iterator<Item = &Self> {\n             foos.iter()\n         }\n     }\n@@ -239,7 +236,7 @@ mod issue3425 {\n         A,\n     }\n     impl Enum {\n-        fn a () {\n+        fn a() {\n             use self::Enum::*;\n         }\n     }"}, {"sha": "bd20cc5f48a74d29f00d942c819ddc9f0e08b6bf", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,19 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::all)]\n-\n #![allow(clippy::blacklisted_name)]\n #![warn(clippy::used_underscore_binding)]\n \n macro_rules! test_macro {\n     () => {{\n         let _foo = 42;\n         _foo + 1\n-    }}\n+    }};\n }\n \n /// Test that we lint if we use a binding with a single leading underscore\n@@ -74,7 +70,7 @@ fn _fn_test() {}\n struct _StructTest;\n enum _EnumTest {\n     _Empty,\n-    _Value(_StructTest)\n+    _Value(_StructTest),\n }\n \n /// Test that we do not lint for non-variable bindings"}, {"sha": "34c0f5095dbd5526cc69a4f469cf3a011004c276", "filename": "tests/ui/useless_asref.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![deny(clippy::useless_asref)]\n #![allow(clippy::trivially_copy_pass_by_ref)]\n use std::fmt::Debug;\n@@ -18,7 +15,9 @@ struct FakeAsRef;\n \n #[allow(clippy::should_implement_trait)]\n impl FakeAsRef {\n-    fn as_ref(&self) -> &Self { self }\n+    fn as_ref(&self) -> &Self {\n+        self\n+    }\n }\n \n struct MoreRef;\n@@ -29,14 +28,22 @@ impl<'a, 'b, 'c> AsRef<&'a &'b &'c MoreRef> for MoreRef {\n     }\n }\n \n-fn foo_rstr(x: &str) { println!(\"{:?}\", x); }\n-fn foo_rslice(x: &[i32]) { println!(\"{:?}\", x); }\n-fn foo_mrslice(x: &mut [i32]) { println!(\"{:?}\", x); }\n-fn foo_rrrrmr(_: &&&&MoreRef) { println!(\"so many refs\"); }\n+fn foo_rstr(x: &str) {\n+    println!(\"{:?}\", x);\n+}\n+fn foo_rslice(x: &[i32]) {\n+    println!(\"{:?}\", x);\n+}\n+fn foo_mrslice(x: &mut [i32]) {\n+    println!(\"{:?}\", x);\n+}\n+fn foo_rrrrmr(_: &&&&MoreRef) {\n+    println!(\"so many refs\");\n+}\n \n fn not_ok() {\n     let rstr: &str = \"hello\";\n-    let mut mrslice: &mut [i32] = &mut [1,2,3];\n+    let mut mrslice: &mut [i32] = &mut [1, 2, 3];\n \n     {\n         let rslice: &[i32] = &*mrslice;\n@@ -75,8 +82,8 @@ fn not_ok() {\n \n fn ok() {\n     let string = \"hello\".to_owned();\n-    let mut arr = [1,2,3];\n-    let mut vec = vec![1,2,3];\n+    let mut arr = [1, 2, 3];\n+    let mut vec = vec![1, 2, 3];\n \n     {\n         foo_rstr(string.as_ref());\n@@ -109,8 +116,12 @@ fn ok() {\n     generic_ok(&mut arr);\n }\n \n-fn foo_mrt<T: Debug + ?Sized>(t: &mut T) { println!(\"{:?}\", t); }\n-fn foo_rt<T: Debug + ?Sized>(t: &T) { println!(\"{:?}\", t); }\n+fn foo_mrt<T: Debug + ?Sized>(t: &mut T) {\n+    println!(\"{:?}\", t);\n+}\n+fn foo_rt<T: Debug + ?Sized>(t: &T) {\n+    println!(\"{:?}\", t);\n+}\n \n fn generic_not_ok<T: AsMut<T> + AsRef<T> + Debug + ?Sized>(mrt: &mut T) {\n     foo_mrt(mrt.as_mut());"}, {"sha": "4ee6520443d23a3d4829412346d8411f78c049cb", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,15 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::useless_attribute)]\n \n #[allow(dead_code)]\n #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n-#[cfg_attr(feature = \"cargo-clippy\",\n-           allow(dead_code))]\n+#[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n #[allow(unused_imports)]\n #[allow(unused_extern_crates)]\n #[macro_use]\n@@ -26,7 +22,10 @@ extern crate clippy_lints;\n use std::collections;\n \n // don't lint on deprecated for `use` items\n-mod foo { #[deprecated] pub struct Bar; }\n+mod foo {\n+    #[deprecated]\n+    pub struct Bar;\n+}\n #[allow(deprecated)]\n pub use foo::Bar;\n "}, {"sha": "a7ccda375bfd744b4cf41560f57f3064eb986dc4", "filename": "tests/ui/vec.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::useless_vec)]\n \n #[derive(Debug)]\n@@ -37,10 +33,10 @@ fn main() {\n     on_slice(&vec![1, 2]);\n     on_slice(&[1, 2]);\n \n-    on_slice(&vec ![1, 2]);\n+    on_slice(&vec![1, 2]);\n     on_slice(&[1, 2]);\n \n-    on_slice(&vec!(1, 2));\n+    on_slice(&vec![1, 2]);\n     on_slice(&[1, 2]);\n \n     on_slice(&vec![1; 2]);"}, {"sha": "e4c7047df917e9e09fa48f496bd76b41a830d5c5", "filename": "tests/ui/while_loop.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::while_let_loop, clippy::empty_loop, clippy::while_let_on_iterator)]\n #![allow(dead_code, clippy::never_loop, unused, clippy::cyclomatic_complexity)]\n \n@@ -20,10 +16,11 @@ fn main() {\n         if let Some(_x) = y {\n             let _v = 1;\n         } else {\n-            break\n+            break;\n         }\n     }\n-    loop { // no error, break is not in else clause\n+    loop {\n+        // no error, break is not in else clause\n         if let Some(_x) = y {\n             let _v = 1;\n         }\n@@ -32,13 +29,13 @@ fn main() {\n     loop {\n         match y {\n             Some(_x) => true,\n-            None => break\n+            None => break,\n         };\n     }\n     loop {\n         let x = match y {\n             Some(x) => x,\n-            None => break\n+            None => break,\n         };\n         let _x = x;\n         let _str = \"foo\";\n@@ -48,27 +45,33 @@ fn main() {\n             Some(x) => x,\n             None => break,\n         };\n-        { let _a = \"bar\"; };\n-        { let _b = \"foobar\"; }\n+        {\n+            let _a = \"bar\";\n+        };\n+        {\n+            let _b = \"foobar\";\n+        }\n     }\n-    loop { // no error, else branch does something other than break\n+    loop {\n+        // no error, else branch does something other than break\n         match y {\n             Some(_x) => true,\n             _ => {\n                 let _z = 1;\n                 break;\n-            }\n+            },\n         };\n     }\n-    while let Some(x) = y { // no error, obviously\n+    while let Some(x) = y {\n+        // no error, obviously\n         println!(\"{}\", x);\n     }\n \n     // #675, this used to have a wrong suggestion\n     loop {\n         let (e, l) = match \"\".split_whitespace().next() {\n             Some(word) => (word.is_empty(), word.len()),\n-            None => break\n+            None => break,\n         };\n \n         let _ = (e, l);\n@@ -91,7 +94,8 @@ fn main() {\n     while let None = iter.next() {} // this is fine (if nonsensical)\n \n     let mut iter = 1..20;\n-    if let Some(x) = iter.next() { // also fine\n+    if let Some(x) = iter.next() {\n+        // also fine\n         println!(\"{}\", x)\n     }\n \n@@ -109,7 +113,9 @@ fn main() {\n \n     // or this\n     let mut iter = 1u32..20;\n-    while let Some(x) = iter.next() {break;}\n+    while let Some(x) = iter.next() {\n+        break;\n+    }\n     println!(\"Remaining iter {:?}\", iter);\n \n     // or this\n@@ -128,7 +134,7 @@ fn no_panic<T>(slice: &[T]) {\n     loop {\n         let _ = match iter.next() {\n             Some(ele) => ele,\n-            None => break\n+            None => break,\n         };\n         loop {}\n     }\n@@ -143,8 +149,8 @@ fn issue1017() {\n             Err(_) => len = 0,\n             Ok(length) => {\n                 len = length;\n-                break\n-            }\n+                break;\n+            },\n         }\n     }\n }\n@@ -155,20 +161,17 @@ fn refutable() {\n     let mut b = a.iter();\n \n     // consume all the 42s\n-    while let Some(&42) = b.next() {\n-    }\n+    while let Some(&42) = b.next() {}\n \n     let a = [(1, 2, 3)];\n     let mut b = a.iter();\n \n-    while let Some(&(1, 2, 3)) = b.next() {\n-    }\n+    while let Some(&(1, 2, 3)) = b.next() {}\n \n     let a = [Some(42)];\n     let mut b = a.iter();\n \n-    while let Some(&None) = b.next() {\n-    }\n+    while let Some(&None) = b.next() {}\n \n     /* This gives \u201crefutable pattern in `for` loop binding: `&_` not covered\u201d\n     for &42 in b {}\n@@ -177,20 +180,22 @@ fn refutable() {\n     // */\n \n     let mut y = a.iter();\n-    loop { // x is reused, so don't lint here\n-        while let Some(v) = y.next() {\n-        }\n+    loop {\n+        // x is reused, so don't lint here\n+        while let Some(v) = y.next() {}\n     }\n \n     let mut y = a.iter();\n     for _ in 0..2 {\n-        while let Some(v) = y.next() { // y is reused, don't lint\n+        while let Some(v) = y.next() {\n+            // y is reused, don't lint\n         }\n     }\n \n     loop {\n         let mut y = a.iter();\n-        while let Some(v) = y.next() { // use a for loop here\n+        while let Some(v) = y.next() {\n+            // use a for loop here\n         }\n     }\n "}, {"sha": "0ba1943e6d8e14258bbcc11ce882ee8f99b04405", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused_must_use)]\n #![warn(clippy::write_literal)]\n \n@@ -23,17 +20,17 @@ fn main() {\n     writeln!(&mut v, \"Hello\");\n     let world = \"world\";\n     writeln!(&mut v, \"Hello {}\", world);\n-    writeln!(&mut v, \"Hello {world}\", world=world);\n+    writeln!(&mut v, \"Hello {world}\", world = world);\n     writeln!(&mut v, \"3 in hex is {:X}\", 3);\n     writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n     writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);\n     writeln!(&mut v, \"Debug test {:?}\", \"hello, world\");\n     writeln!(&mut v, \"{0:8} {1:>8}\", \"hello\", \"world\");\n     writeln!(&mut v, \"{1:8} {0:>8}\", \"hello\", \"world\");\n-    writeln!(&mut v, \"{foo:8} {bar:>8}\", foo=\"hello\", bar=\"world\");\n-    writeln!(&mut v, \"{bar:8} {foo:>8}\", foo=\"hello\", bar=\"world\");\n-    writeln!(&mut v, \"{number:>width$}\", number=1, width=6);\n-    writeln!(&mut v, \"{number:>0width$}\", number=1, width=6);\n+    writeln!(&mut v, \"{foo:8} {bar:>8}\", foo = \"hello\", bar = \"world\");\n+    writeln!(&mut v, \"{bar:8} {foo:>8}\", foo = \"hello\", bar = \"world\");\n+    writeln!(&mut v, \"{number:>width$}\", number = 1, width = 6);\n+    writeln!(&mut v, \"{number:>0width$}\", number = 1, width = 6);\n \n     // these should throw warnings\n     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n@@ -50,6 +47,6 @@ fn main() {\n     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n \n     // named args shouldn't change anything either\n-    writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n-    writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+    writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n+    writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n }"}, {"sha": "dbfa02d20a1f39d5d5b61acb2fb6ee3524048883", "filename": "tests/ui/write_with_newline.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwrite_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwrite_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(clippy::write_literal)]\n #![warn(clippy::write_with_newline)]\n "}, {"sha": "71b5df48bfaa271381d7b26ada3b575bc06f67f8", "filename": "tests/ui/writeln_empty_string.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwriteln_empty_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwriteln_empty_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwriteln_empty_string.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![allow(unused_must_use)]\n #![warn(clippy::writeln_empty_string)]\n use std::io::Write;\n@@ -27,5 +24,4 @@ fn main() {\n     writeln!(&mut v);\n     writeln!(&mut v, \" \");\n     write!(&mut v, \"\");\n-\n }"}, {"sha": "3c69c9ad03ffcbc4265968a8abb2156abc2a820c", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #![warn(clippy::wrong_self_convention)]\n #![warn(clippy::wrong_pub_self_convention)]\n #![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n@@ -21,7 +17,6 @@ fn main() {}\n struct Foo;\n \n impl Foo {\n-\n     fn as_i32(self) {}\n     fn as_u32(&self) {}\n     fn into_i32(self) {}\n@@ -39,14 +34,13 @@ impl Foo {\n     #[allow(clippy::wrong_self_convention)]\n     pub fn from_cake(self) {}\n \n-    fn as_x<F: AsRef<Self>>(_: F) { }\n-    fn as_y<F: AsRef<Foo>>(_: F) { }\n+    fn as_x<F: AsRef<Self>>(_: F) {}\n+    fn as_y<F: AsRef<Foo>>(_: F) {}\n }\n \n struct Bar;\n \n impl Bar {\n-\n     fn as_i32(self) {}\n     fn as_u32(&self) {}\n     fn into_i32(&self) {}"}, {"sha": "68e9437273f647c2a28e525dc4a2e5444d14bdea", "filename": "tests/ui/zero_div_zero.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,20 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[allow(unused_variables)]\n #[warn(clippy::zero_divided_by_zero)]\n fn main() {\n     let nan = 0.0 / 0.0;\n     let f64_nan = 0.0 / 0.0f64;\n     let other_f64_nan = 0.0f64 / 0.0;\n-    let one_more_f64_nan = 0.0f64/0.0f64;\n+    let one_more_f64_nan = 0.0f64 / 0.0f64;\n     let zero = 0.0;\n     let other_zero = 0.0;\n     let other_nan = zero / other_zero; // fine - this lint doesn't propegate constants.\n-    let not_nan = 2.0/0.0; // not an error: 2/0 = inf\n-    let also_not_nan = 0.0/2.0; // not an error: 0/2 = 0\n+    let not_nan = 2.0 / 0.0; // not an error: 2/0 = inf\n+    let also_not_nan = 0.0 / 2.0; // not an error: 0/2 = 0\n }"}, {"sha": "9930b8a4c6b83f179c3b3d632f489cd161d8a72c", "filename": "tests/ui/zero_ptr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fzero_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435299be3062c67dc3c61b36c5e30bbfa876ee1e/tests%2Fui%2Fzero_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_ptr.rs?ref=435299be3062c67dc3c61b36c5e30bbfa876ee1e", "patch": "@@ -7,10 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n-\n #[allow(unused_variables)]\n fn main() {\n     let x = 0 as *const usize;"}]}