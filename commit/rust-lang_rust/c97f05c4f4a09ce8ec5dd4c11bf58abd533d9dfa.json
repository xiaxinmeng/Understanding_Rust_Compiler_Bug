{"sha": "c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa", "node_id": "C_kwDOAAsO6NoAKGM5N2YwNWM0ZjRhMDljZThlYzVkZDRjMTFiZjU4YWJkNTMzZDlkZmE", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-20T22:44:04Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-02-20T22:44:04Z"}, "message": "compiletest: Print process output info with less whitespace\n\nBefore:\n\n```\nerror: jsondocck failed!\nstatus: exit status: 1\ncommand: \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/jsondocck\" \"--doc-dir\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/test/rustdoc-json/traits/supertrait\" \"--template\" \"/data/ne321/rust/src/test/rustdoc-json/traits/supertrait.rs\"\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nInvalid command: Tried to use the previous path in the first command on line 10\nError: \"Jsondocck failed for /data/ne321/rust/src/test/rustdoc-json/traits/supertrait.rs\"\n\n------------------------------------------\n\nRustdoc Output:\nstatus: exit status: 0\ncommand: \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/stage2/bin/rustdoc\" \"-L\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-L\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/test/rustdoc-json/traits/supertrait/auxiliary\" \"-o\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/test/rustdoc-json/traits/supertrait\" \"--deny\" \"warnings\" \"/data/ne321/rust/src/test/rustdoc-json/traits/supertrait.rs\" \"--output-format\" \"json\" \"-Zunstable-options\"\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n\n------------------------------------------\n\n```\n\nAfter:\n\n```\n\nerror: jsondocck failed!\nstatus: exit status: 1\ncommand: \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/stage0-tools-bin/jsondocck\" \"--doc-dir\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/test/rustdoc-json/traits/supertrait\" \"--template\" \"/data/ne321/rust/src/test/rustdoc-json/traits/supertrait.rs\"\nstdout: none\n--- stderr -------------------------------\nInvalid command: Tried to use the previous path in the first command on line 10\nError: \"Jsondocck failed for /data/ne321/rust/src/test/rustdoc-json/traits/supertrait.rs\"\n------------------------------------------\n\nRustdoc Output:\nstatus: exit status: 0\ncommand: \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/stage2/bin/rustdoc\" \"-L\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-L\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/test/rustdoc-json/traits/supertrait/auxiliary\" \"-o\" \"/data/ne321/rust/build/x86_64-unknown-linux-gnu/test/rustdoc-json/traits/supertrait\" \"--deny\" \"warnings\" \"/data/ne321/rust/src/test/rustdoc-json/traits/supertrait.rs\" \"--output-format\" \"json\" \"-Zunstable-options\"\nstdout: none\nstderr: none\n\n```", "tree": {"sha": "2c723f6ff68ab46644cc2b9a2187a4c7d1fdaf3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c723f6ff68ab46644cc2b9a2187a4c7d1fdaf3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa", "html_url": "https://github.com/rust-lang/rust/commit/c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1aa85475cf5623caf50f7ef3b62903bb084e518", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1aa85475cf5623caf50f7ef3b62903bb084e518", "html_url": "https://github.com/rust-lang/rust/commit/c1aa85475cf5623caf50f7ef3b62903bb084e518"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "3f67a64971b678193185769eee00d9eeab0f96e8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c97f05c4f4a09ce8ec5dd4c11bf58abd533d9dfa", "patch": "@@ -3753,23 +3753,27 @@ pub struct ProcRes {\n \n impl ProcRes {\n     pub fn print_info(&self) {\n-        print!(\n-            \"\\\n-             status: {}\\n\\\n-             command: {}\\n\\\n-             stdout:\\n\\\n-             ------------------------------------------\\n\\\n-             {}\\n\\\n-             ------------------------------------------\\n\\\n-             stderr:\\n\\\n-             ------------------------------------------\\n\\\n-             {}\\n\\\n-             ------------------------------------------\\n\\\n-             \\n\",\n+        fn render(name: &str, contents: &str) -> String {\n+            let contents = json::extract_rendered(contents);\n+            let contents = contents.trim();\n+            if contents.is_empty() {\n+                format!(\"{name}: none\")\n+            } else {\n+                format!(\n+                    \"\\\n+                     --- {name} -------------------------------\\n\\\n+                     {contents}\\n\\\n+                     ------------------------------------------\",\n+                )\n+            }\n+        }\n+\n+        println!(\n+            \"status: {}\\ncommand: {}\\n{}\\n{}\\n\",\n             self.status,\n             self.cmdline,\n-            json::extract_rendered(&self.stdout),\n-            json::extract_rendered(&self.stderr),\n+            render(\"stdout\", &self.stdout),\n+            render(\"stderr\", &self.stderr),\n         );\n     }\n "}]}