{"sha": "67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YWE3YjIzODlhNmRjZWE5N2QzZDVmMDVmZTNiZThlY2UzYWNjNmM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-14T18:23:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-14T18:23:05Z"}, "message": "Implement --unpretty mir", "tree": {"sha": "04ac7063c26e83b789b02a5b1db9803c016d7c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ac7063c26e83b789b02a5b1db9803c016d7c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c", "html_url": "https://github.com/rust-lang/rust/commit/67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3619ce026e3de5d26537de63b7d0cd7710a3b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3619ce026e3de5d26537de63b7d0cd7710a3b96", "html_url": "https://github.com/rust-lang/rust/commit/f3619ce026e3de5d26537de63b7d0cd7710a3b96"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "0517357892161c6ffdb1da1bbeb460841292f88d", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=67aa7b2389a6dcea97d3d5f05fe3be8ece3acc6c", "patch": "@@ -30,6 +30,8 @@ use rustc_borrowck::graphviz as borrowck_dot;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n \n+use rustc_mir::pretty::write_mir_pretty;\n+\n use syntax::ast::{self, BlockCheckMode};\n use syntax::codemap;\n use syntax::fold::{self, Folder};\n@@ -77,6 +79,7 @@ pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmHir(PpSourceMode),\n     PpmFlowGraph(PpFlowGraphMode),\n+    PpmMir,\n }\n \n pub fn parse_pretty(sess: &Session,\n@@ -96,14 +99,15 @@ pub fn parse_pretty(sess: &Session,\n         (\"hir\", true) => PpmHir(PpmNormal),\n         (\"hir,identified\", true) => PpmHir(PpmIdentified),\n         (\"hir,typed\", true) => PpmHir(PpmTyped),\n+        (\"mir\", true) => PpmMir,\n         (\"flowgraph\", true) => PpmFlowGraph(PpFlowGraphMode::Default),\n         (\"flowgraph,unlabelled\", true) => PpmFlowGraph(PpFlowGraphMode::UnlabelledEdges),\n         _ => {\n             if extended {\n                 sess.fatal(&format!(\"argument to `unpretty` must be one of `normal`, \\\n                                      `expanded`, `flowgraph[,unlabelled]=<nodeid>`, \\\n                                      `identified`, `expanded,identified`, `everybody_loops`, \\\n-                                     `hir`, `hir,identified`, or `hir,typed`; got {}\",\n+                                     `hir`, `hir,identified`, `hir,typed`, or `mir`; got {}\",\n                                     name));\n             } else {\n                 sess.fatal(&format!(\"argument to `pretty` must be one of `normal`, `expanded`, \\\n@@ -569,6 +573,7 @@ fn needs_ast_map(ppm: &PpMode, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n         PpmSource(PpmExpandedIdentified) |\n         PpmSource(PpmExpandedHygiene) |\n         PpmHir(_) |\n+        PpmMir |\n         PpmFlowGraph(_) => true,\n         PpmSource(PpmTyped) => panic!(\"invalid state\"),\n     }\n@@ -584,6 +589,7 @@ fn needs_expansion(ppm: &PpMode) -> bool {\n         PpmSource(PpmExpandedIdentified) |\n         PpmSource(PpmExpandedHygiene) |\n         PpmHir(_) |\n+        PpmMir |\n         PpmFlowGraph(_) => true,\n         PpmSource(PpmTyped) => panic!(\"invalid state\"),\n     }\n@@ -801,6 +807,48 @@ pub fn pretty_print_input(sess: Session,\n             })\n         }\n \n+        (PpmMir, None) => {\n+            debug!(\"pretty printing MIR for whole crate\");\n+            let ast_map = ast_map.expect(\"--unpretty mir missing ast_map\");\n+            abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n+                                                             &cstore,\n+                                                             ast_map,\n+                                                             &arenas,\n+                                                             &id,\n+                                                             resolve::MakeGlobMap::No,\n+                                                             |tcx, mir_map, _, _| {\n+                let mir_map = mir_map.unwrap();\n+\n+                for (nodeid, mir) in &mir_map.map {\n+                    try!(writeln!(out, \"MIR for {}\", tcx.map.node_to_string(*nodeid)));\n+                    try!(write_mir_pretty(mir, &mut out));\n+                }\n+\n+                Ok(())\n+            }), &sess)\n+        }\n+\n+        (PpmMir, Some(uii)) => {\n+            debug!(\"pretty printing MIR for {:?}\", uii);\n+            let ast_map = ast_map.expect(\"--unpretty mir missing ast_map\");\n+            let nodeid = uii.to_one_node_id(\"--unpretty\", &sess, &ast_map);\n+\n+            abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n+                                                             &cstore,\n+                                                             ast_map,\n+                                                             &arenas,\n+                                                             &id,\n+                                                             resolve::MakeGlobMap::No,\n+                                                             |tcx, mir_map, _, _| {\n+                let mir_map = mir_map.unwrap();\n+                try!(writeln!(out, \"MIR for {}\", tcx.map.node_to_string(nodeid)));\n+                let mir = mir_map.map.get(&nodeid).unwrap_or_else(|| {\n+                    sess.fatal(&format!(\"no MIR map entry for node {}\", nodeid))\n+                });\n+                write_mir_pretty(mir, &mut out)\n+            }), &sess)\n+        }\n+\n         (PpmFlowGraph(mode), opt_uii) => {\n             debug!(\"pretty printing flow graph for {:?}\", opt_uii);\n             let uii = opt_uii.unwrap_or_else(|| {"}]}