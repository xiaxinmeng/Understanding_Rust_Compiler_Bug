{"sha": "1ee54a86171d70f439b3cf77e566150b78251bc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTU0YTg2MTcxZDcwZjQzOWIzY2Y3N2U1NjYxNTBiNzgyNTFiYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-13T00:28:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-13T00:28:28Z"}, "message": "auto merge of #7725 : msullivan/rust/default-methods, r=pcwalton\n\nr?", "tree": {"sha": "2282c7f350eca0eccf82623dd8a8f5ace1165e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2282c7f350eca0eccf82623dd8a8f5ace1165e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee54a86171d70f439b3cf77e566150b78251bc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee54a86171d70f439b3cf77e566150b78251bc2", "html_url": "https://github.com/rust-lang/rust/commit/1ee54a86171d70f439b3cf77e566150b78251bc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee54a86171d70f439b3cf77e566150b78251bc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96453eb5c524fea0ee48b9a8e4b60c12dd0e9fc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/96453eb5c524fea0ee48b9a8e4b60c12dd0e9fc9", "html_url": "https://github.com/rust-lang/rust/commit/96453eb5c524fea0ee48b9a8e4b60c12dd0e9fc9"}, {"sha": "3fa5203273ad5a88b20b77b83a7a2e42cbcc3602", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa5203273ad5a88b20b77b83a7a2e42cbcc3602", "html_url": "https://github.com/rust-lang/rust/commit/3fa5203273ad5a88b20b77b83a7a2e42cbcc3602"}], "stats": {"total": 306, "additions": 185, "deletions": 121}, "files": [{"sha": "21850048c27b521b3b05ee185296227defece453", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -791,7 +791,7 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     if len > 0u || should_inline {\n         (ecx.encode_inlined_item)(\n            ecx, ebml_w, impl_path,\n-           ii_method(local_def(parent_id), m));\n+           ii_method(local_def(parent_id), false, m));\n     } else {\n         encode_symbol(ecx, ebml_w, m.id);\n     }\n@@ -1123,21 +1123,16 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                 }\n \n                 provided(m) => {\n-                    // This is obviously a bogus assert but I don't think this\n-                    // ever worked before anyhow...near as I can tell, before\n-                    // we would emit two items.\n-                    if method_ty.explicit_self == sty_static {\n-                        tcx.sess.span_unimpl(\n-                            item.span,\n-                            fmt!(\"Method %s is both provided and static\",\n-                                 token::ident_to_str(&method_ty.ident)));\n+                    // If this is a static method, we've already encoded\n+                    // this.\n+                    if method_ty.explicit_self != sty_static {\n+                        encode_type_param_bounds(ebml_w, ecx,\n+                                                 &m.generics.ty_params);\n                     }\n-                    encode_type_param_bounds(ebml_w, ecx,\n-                                             &m.generics.ty_params);\n                     encode_method_sort(ebml_w, 'p');\n                     (ecx.encode_inlined_item)(\n                         ecx, ebml_w, path,\n-                        ii_method(local_def(item.id), m));\n+                        ii_method(local_def(item.id), true, m));\n                 }\n             }\n "}, {"sha": "2e0090f7dda04321c4500fa17bab21d11bed7afa", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -319,7 +319,8 @@ fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n     match *ii {\n         //hack: we're not dropping items\n         ast::ii_item(i) => ast::ii_item(fld.fold_item(i).get()),\n-        ast::ii_method(d, m) => ast::ii_method(d, fld.fold_method(m)),\n+        ast::ii_method(d, is_provided, m) =>\n+          ast::ii_method(d, is_provided, fld.fold_method(m)),\n         ast::ii_foreign(i) => ast::ii_foreign(fld.fold_foreign_item(i))\n     }\n }\n@@ -340,7 +341,8 @@ fn renumber_ast(xcx: @ExtendedDecodeContext, ii: ast::inlined_item)\n \n     match ii {\n         ast::ii_item(i) => ast::ii_item(fld.fold_item(i).get()),\n-        ast::ii_method(d, m) => ast::ii_method(xcx.tr_def_id(d), fld.fold_method(m)),\n+        ast::ii_method(d, is_provided, m) =>\n+          ast::ii_method(xcx.tr_def_id(d), is_provided, fld.fold_method(m)),\n         ast::ii_foreign(i) => ast::ii_foreign(fld.fold_foreign_item(i)),\n     }\n }"}, {"sha": "0afa1c162450e32b0cbb17b735cd3e42ea4a18ac", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -244,7 +244,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n      LintSpec {\n         lint: default_methods,\n         desc: \"allow default methods\",\n-        default: deny\n+        default: allow\n      }),\n \n     (\"unused_unsafe\","}, {"sha": "f5024f7973c5e491ef0e232342f1c14c43097dea", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -1185,7 +1185,7 @@ impl cmt_ {\n     }\n }\n \n-impl Repr for cmt {\n+impl Repr for cmt_ {\n     fn repr(&self, tcx: ty::ctxt) -> ~str {\n         fmt!(\"{%s id:%d m:%? ty:%s}\",\n              self.cat.repr(tcx),"}, {"sha": "c0336c8e60d52ee501bcd519dfd01734a379f88f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -520,7 +520,7 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n     let _icx = push_ctxt(\"trans_res_dtor\");\n     if !substs.is_empty() {\n         let did = if did.crate != ast::local_crate {\n-            inline::maybe_instantiate_inline(ccx, did, true)\n+            inline::maybe_instantiate_inline(ccx, did)\n         } else {\n             did\n         };"}, {"sha": "01bd69f24fc95d331e9ed8a12ab5b62d2c1fbfac", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -250,7 +250,7 @@ pub fn trans_fn_ref_with_vtables(\n         def_id: ast::def_id,   // def id of fn\n         ref_id: ast::node_id,  // node id of use of fn; may be zero if N/A\n         type_params: &[ty::t], // values for fn's ty params\n-        vtables: Option<typeck::vtable_res>)\n+        vtables: Option<typeck::vtable_res>) // vtables for the call\n      -> FnData {\n     //!\n     //\n@@ -361,8 +361,7 @@ pub fn trans_fn_ref_with_vtables(\n     // def_id to the local id of the inlined copy.\n     let def_id = {\n         if def_id.crate != ast::local_crate {\n-            let may_translate = opt_impl_did.is_none();\n-            inline::maybe_instantiate_inline(ccx, def_id, may_translate)\n+            inline::maybe_instantiate_inline(ccx, def_id)\n         } else {\n             def_id\n         }"}, {"sha": "1a45ce36af2f3c662ffec3acb7888951d92de012", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -154,12 +154,6 @@ impl Repr for param_substs {\n     }\n }\n \n-impl Repr for @param_substs {\n-    fn repr(&self, tcx: ty::ctxt) -> ~str {\n-        param_substs_to_str(*self, tcx)\n-    }\n-}\n-\n // Function context.  Every LLVM function we create will have one of\n // these.\n pub struct fn_ctxt_ {"}, {"sha": "69c8331bc9fba5bfd0373b49259df25f9adbb0c7", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -159,7 +159,7 @@ pub fn get_const_val(cx: @mut CrateContext, mut def_id: ast::def_id) -> ValueRef\n     let contains_key = cx.const_values.contains_key(&def_id.node);\n     if !ast_util::is_local(def_id) || !contains_key {\n         if !ast_util::is_local(def_id) {\n-            def_id = inline::maybe_instantiate_inline(cx, def_id, true);\n+            def_id = inline::maybe_instantiate_inline(cx, def_id);\n         }\n         match cx.tcx.items.get_copy(&def_id.node) {\n             ast_map::node_item(@ast::item {"}, {"sha": "0f5ff6bfa9bd9c14ec19ec49517160d1875f91bc", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -956,7 +956,7 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                 fn get_did(ccx: @mut CrateContext, did: ast::def_id)\n                     -> ast::def_id {\n                     if did.crate != ast::local_crate {\n-                        inline::maybe_instantiate_inline(ccx, did, true)\n+                        inline::maybe_instantiate_inline(ccx, did)\n                     } else {\n                         did\n                     }"}, {"sha": "e2d84473e2354953a76d6402fbaf36b2e4fd6f4d", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -22,11 +22,7 @@ use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n \n-// `translate` will be true if this function is allowed to translate the\n-// item and false otherwise. Currently, this parameter is set to false when\n-// translating default methods.\n-pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n-                                translate: bool)\n+pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id)\n     -> ast::def_id {\n     let _icx = push_ctxt(\"maybe_instantiate_inline\");\n     match ccx.external.find(&fn_id) {\n@@ -59,7 +55,7 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n         csearch::found(ast::ii_item(item)) => {\n             ccx.external.insert(fn_id, Some(item.id));\n             ccx.stats.n_inlines += 1;\n-            if translate { trans_item(ccx, item); }\n+            trans_item(ccx, item);\n             local_def(item.id)\n         }\n         csearch::found(ast::ii_foreign(item)) => {\n@@ -81,19 +77,19 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n             _ => ccx.sess.bug(\"maybe_instantiate_inline: item has a \\\n                                non-enum parent\")\n           }\n-          if translate { trans_item(ccx, item); }\n+          trans_item(ccx, item);\n           local_def(my_id)\n         }\n         csearch::found_parent(_, _) => {\n             ccx.sess.bug(\"maybe_get_item_ast returned a found_parent \\\n              with a non-item parent\");\n         }\n-        csearch::found(ast::ii_method(impl_did, mth)) => {\n+        csearch::found(ast::ii_method(impl_did, is_provided, mth)) => {\n           ccx.stats.n_inlines += 1;\n           ccx.external.insert(fn_id, Some(mth.id));\n           // If this is a default method, we can't look up the\n           // impl type. But we aren't going to translate anyways, so don't.\n-          if !translate { return local_def(mth.id); }\n+          if is_provided { return local_def(mth.id); }\n \n             let impl_tpt = ty::lookup_item_type(ccx.tcx, impl_did);\n             let num_type_params ="}, {"sha": "78e0c3989ecd0023505b7aecafe8deaa601ff544", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -63,24 +63,26 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     assert!(real_substs.tps.iter().all(|t| !ty::type_needs_infer(*t)));\n     let _icx = push_ctxt(\"monomorphic_fn\");\n     let mut must_cast = false;\n-    let substs = real_substs.tps.iter().transform(|t| {\n+\n+    let do_normalize = |t: &ty::t| {\n         match normalize_for_monomorphization(ccx.tcx, *t) {\n           Some(t) => { must_cast = true; t }\n           None => *t\n         }\n-    }).collect::<~[ty::t]>();\n-\n-    for real_substs.tps.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n-    for substs.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n-    let param_uses = type_use::type_uses_for(ccx, fn_id, substs.len());\n+    };\n \n     let psubsts = @param_substs {\n-        tys: substs,\n+        tys: real_substs.tps.map(|x| do_normalize(x)),\n         vtables: vtables,\n-        self_ty: real_substs.self_ty,\n+        self_ty: real_substs.self_ty.map(|x| do_normalize(x)),\n         self_vtable: self_vtable\n     };\n \n+    for real_substs.tps.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n+    for psubsts.tys.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n+    let param_uses = type_use::type_uses_for(ccx, fn_id, psubsts.tys.len());\n+\n+\n     let hash_id = make_mono_id(ccx, fn_id, impl_did_opt,\n                                &*psubsts,\n                                Some(param_uses));\n@@ -109,6 +111,10 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     let tpt = ty::lookup_item_type(ccx.tcx, fn_id);\n     let llitem_ty = tpt.ty;\n \n+    // We need to do special handling of the substitutions if we are\n+    // calling a static provided method. This is sort of unfortunate.\n+    let mut is_static_provided = None;\n+\n     let map_node = session::expect(\n         ccx.sess,\n         ccx.tcx.items.find_copy(&fn_id.node),\n@@ -127,6 +133,12 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n         return (get_item_val(ccx, fn_id.node), true);\n       }\n       ast_map::node_trait_method(@ast::provided(m), _, pt) => {\n+        // If this is a static provided method, indicate that\n+        // and stash the number of params on the method.\n+        if m.explicit_self.node == ast::sty_static {\n+            is_static_provided = Some(m.generics.ty_params.len());\n+        }\n+\n         (pt, m.ident, m.span)\n       }\n       ast_map::node_trait_method(@ast::required(_), _, _) => {\n@@ -151,8 +163,36 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       ast_map::node_struct_ctor(_, i, pt) => (pt, i.ident, i.span)\n     };\n \n-    let mono_ty = ty::subst_tps(ccx.tcx, psubsts.tys,\n-                                psubsts.self_ty, llitem_ty);\n+    debug!(\"monomorphic_fn about to subst into %s\", llitem_ty.repr(ccx.tcx));\n+    let mono_ty = match is_static_provided {\n+        None => ty::subst_tps(ccx.tcx, psubsts.tys,\n+                              psubsts.self_ty, llitem_ty),\n+        Some(num_method_ty_params) => {\n+            // Static default methods are a little unfortunate, in\n+            // that the \"internal\" and \"external\" type of them differ.\n+            // Internally, the method body can refer to Self, but the\n+            // externally visable type of the method has a type param\n+            // inserted in between the trait type params and the\n+            // method type params. The substs that we are given are\n+            // the proper substs *internally* to the method body, so\n+            // we have to use those when compiling it.\n+            //\n+            // In order to get the proper substitution to use on the\n+            // type of the method, we pull apart the substitution and\n+            // stick a substitution for the self type in.\n+            // This is a bit unfortunate.\n+\n+            let idx = psubsts.tys.len() - num_method_ty_params;\n+            let substs =\n+                (psubsts.tys.slice(0, idx) +\n+                 &[psubsts.self_ty.get()] +\n+                 psubsts.tys.tailn(idx));\n+            debug!(\"static default: changed substitution to %s\",\n+                   substs.repr(ccx.tcx));\n+\n+            ty::subst_tps(ccx.tcx, substs, None, llitem_ty)\n+        }\n+    };\n     let llfty = type_of_fn_from_ty(ccx, mono_ty);\n \n     ccx.stats.n_monos += 1;"}, {"sha": "eda8f8530710d94e6330e50867765c35eb7af5ad", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -49,6 +49,8 @@ pub type type_uses = uint; // Bitmask\n pub static use_repr: uint = 1;   /* Dependency on size/alignment/mode and\n                                      take/drop glue */\n pub static use_tydesc: uint = 2; /* Takes the tydesc, or compares */\n+pub static use_all: uint = use_repr|use_tydesc;\n+\n \n pub struct Context {\n     ccx: @mut CrateContext,\n@@ -57,6 +59,14 @@ pub struct Context {\n \n pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n     -> @~[type_uses] {\n+\n+    fn store_type_uses(cx: Context, fn_id: def_id) -> @~[type_uses] {\n+        let Context { uses, ccx } = cx;\n+        let uses = @copy *uses; // freeze\n+        ccx.type_use_cache.insert(fn_id, uses);\n+        uses\n+    }\n+\n     match ccx.type_use_cache.find(&fn_id) {\n       Some(uses) => return *uses,\n       None => ()\n@@ -65,32 +75,29 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n     let fn_id_loc = if fn_id.crate == local_crate {\n         fn_id\n     } else {\n-        inline::maybe_instantiate_inline(ccx, fn_id, true)\n+        inline::maybe_instantiate_inline(ccx, fn_id)\n     };\n \n     // Conservatively assume full use for recursive loops\n-    ccx.type_use_cache.insert(fn_id, @vec::from_elem(n_tps, 3u));\n+    ccx.type_use_cache.insert(fn_id, @vec::from_elem(n_tps, use_all));\n \n     let cx = Context {\n         ccx: ccx,\n         uses: @mut vec::from_elem(n_tps, 0)\n     };\n-    match ty::get(ty::lookup_item_type(cx.ccx.tcx, fn_id).ty).sty {\n-        ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, _}) |\n-        ty::ty_closure(ty::ClosureTy {sig: ref sig, _}) => {\n-            for sig.inputs.iter().advance |arg| {\n-                type_needs(&cx, use_repr, *arg);\n-            }\n-        }\n-        _ => ()\n-    }\n \n-    if fn_id_loc.crate != local_crate {\n-        let Context { uses, _ } = cx;\n-        let uses = @copy *uses; // freeze\n-        ccx.type_use_cache.insert(fn_id, uses);\n-        return uses;\n+    // If the method is a default method, we mark all of the types as\n+    // used.  This is imprecise, but simple. Getting it right is\n+    // tricky because the substs on the call and the substs on the\n+    // default method differ, because of substs on the trait/impl.\n+    let is_default = ccx.tcx.provided_method_sources.contains_key(&fn_id_loc);\n+    // We also mark all of the params as used if it is an extern thing\n+    // that we haven't been able to inline yet.\n+    if is_default || fn_id_loc.crate != local_crate {\n+        for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_all; }\n+        return store_type_uses(cx, fn_id);\n     }\n+\n     let map_node = match ccx.tcx.items.find(&fn_id_loc.node) {\n         Some(x) => (/*bad*/copy *x),\n         None    => ccx.sess.bug(fmt!(\"type_uses_for: unbound item ID %?\",\n@@ -106,7 +113,10 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n         // This will be a static trait method. For now, we just assume\n         // it fully depends on all of the type information. (Doing\n         // otherwise would require finding the actual implementation).\n-        for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_repr|use_tydesc;}\n+        for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_all;}\n+        // We need to return early, before the arguments are processed,\n+        // because of difficulties in the handling of Self.\n+        return store_type_uses(cx, fn_id);\n       }\n       ast_map::node_variant(_, _, _) => {\n         for uint::range(0u, n_tps) |n| { cx.uses[n] |= use_repr;}\n@@ -171,10 +181,19 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n                                 token::get_ident_interner())));\n       }\n     }\n-    let Context { uses, _ } = cx;\n-    let uses = @copy *uses; // freeze\n-    ccx.type_use_cache.insert(fn_id, uses);\n-    uses\n+\n+    // Now handle arguments\n+    match ty::get(ty::lookup_item_type(cx.ccx.tcx, fn_id).ty).sty {\n+        ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, _}) |\n+        ty::ty_closure(ty::ClosureTy {sig: ref sig, _}) => {\n+            for sig.inputs.iter().advance |arg| {\n+                type_needs(&cx, use_repr, *arg);\n+            }\n+        }\n+        _ => ()\n+    }\n+\n+    store_type_uses(cx, fn_id)\n }\n \n pub fn type_needs(cx: &Context, use_: uint, ty: ty::t) {"}, {"sha": "4caf0b62a546d1b76a11b79b64055079b38fefd8", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -3327,11 +3327,15 @@ pub fn instantiate_path(fcx: @mut FnCtxt,\n         fcx.infcx().next_ty_vars(ty_param_count)\n     } else if ty_substs_len > ty_param_count {\n         fcx.ccx.tcx.sess.span_err\n-            (span, \"too many type parameters provided for this item\");\n+            (span,\n+             fmt!(\"too many type parameters provided: expected %u, found %u\",\n+                  ty_param_count, ty_substs_len));\n         fcx.infcx().next_ty_vars(ty_param_count)\n     } else if ty_substs_len < ty_param_count {\n         fcx.ccx.tcx.sess.span_err\n-            (span, \"not enough type parameters provided for this item\");\n+            (span,\n+             fmt!(\"not enough type parameters provided: expected %u, found %u\",\n+                  ty_param_count, ty_substs_len));\n         fcx.infcx().next_ty_vars(ty_param_count)\n     } else {\n         pth.types.map(|aty| fcx.to_ty(aty))"}, {"sha": "ec384543deac10a5837f7018680bfadb8e01bf49", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -278,7 +278,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n         // Represents [A',B',C']\n         let num_trait_bounds = trait_ty_generics.type_param_defs.len();\n         let non_shifted_trait_tps = do vec::from_fn(num_trait_bounds) |i| {\n-            ty::mk_param(tcx, i, dummy_defid)\n+            ty::mk_param(tcx, i, trait_ty_generics.type_param_defs[i].def_id)\n         };\n \n         // Represents [D']\n@@ -288,7 +288,8 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n         // Represents [E',F',G']\n         let num_method_bounds = m.generics.type_param_defs.len();\n         let shifted_method_tps = do vec::from_fn(num_method_bounds) |i| {\n-            ty::mk_param(tcx, i + 1, dummy_defid)\n+            ty::mk_param(tcx, i + num_trait_bounds + 1,\n+                         m.generics.type_param_defs[i].def_id)\n         };\n \n         // build up the substitution from"}, {"sha": "84f20d70bf0087aeb4dc3fa0031c848a24d695eb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -512,9 +512,6 @@ impl<T:Repr> Repr for Option<T> {\n     }\n }\n \n-/*\n-Annoyingly, these conflict with @ast::expr.\n-\n impl<T:Repr> Repr for @T {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         (&**self).repr(tcx)\n@@ -526,7 +523,6 @@ impl<T:Repr> Repr for ~T {\n         (&**self).repr(tcx)\n     }\n }\n-*/\n \n fn repr_vec<T:Repr>(tcx: ctxt, v: &[T]) -> ~str {\n     fmt!(\"[%s]\", v.map(|t| t.repr(tcx)).connect(\",\"))\n@@ -538,11 +534,11 @@ impl<'self, T:Repr> Repr for &'self [T] {\n     }\n }\n \n-// This is necessary to handle types like Option<@~[T]>, for which\n+// This is necessary to handle types like Option<~[T]>, for which\n // autoderef cannot convert the &[T] handler\n-impl<T:Repr> Repr for @~[T] {\n+impl<T:Repr> Repr for ~[T] {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        repr_vec(tcx, **self)\n+        repr_vec(tcx, *self)\n     }\n }\n \n@@ -593,19 +589,19 @@ impl Repr for ty::TraitRef {\n     }\n }\n \n-impl Repr for @ast::expr {\n+impl Repr for ast::expr {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         fmt!(\"expr(%d: %s)\",\n              self.id,\n-             pprust::expr_to_str(*self, tcx.sess.intr()))\n+             pprust::expr_to_str(self, tcx.sess.intr()))\n     }\n }\n \n-impl Repr for @ast::pat {\n+impl Repr for ast::pat {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         fmt!(\"pat(%d: %s)\",\n              self.id,\n-             pprust::pat_to_str(*self, tcx.sess.intr()))\n+             pprust::pat_to_str(self, tcx.sess.intr()))\n     }\n }\n "}, {"sha": "b9593d845a4cbc9ddf460c2f9cd04ee57babf141", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -17,7 +17,7 @@ implementing the `Iterator` trait.\n \n */\n \n-#[allow(default_methods)]; // solid enough for the use case here\n+#[allow(default_methods)]; // still off by default in stage0\n \n use cmp;\n use iter::Times;"}, {"sha": "b6275ed186c82be830b0244bc957b529d6ef5c3d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -1033,7 +1033,7 @@ pub enum foreign_item_ {\n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub enum inlined_item {\n     ii_item(@item),\n-    ii_method(def_id /* impl id */, @method),\n+    ii_method(def_id /* impl id */, bool /* is provided */, @method),\n     ii_foreign(@foreign_item),\n }\n "}, {"sha": "e7eedcaa62e55314cb297a56033c848792c7debd", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -165,8 +165,8 @@ pub fn map_decoded_item(diag: @span_handler,\n                                               i.vis,    // Wrong but OK\n                                               @path));\n       }\n-      ii_method(impl_did, m) => {\n-        map_method(impl_did, @path, m, cx);\n+      ii_method(impl_did, is_provided, m) => {\n+        map_method(impl_did, @path, m, is_provided, cx);\n       }\n     }\n \n@@ -207,8 +207,11 @@ pub fn map_pat(pat: @pat, (cx,v): (@mut Ctx, visit::vt<@mut Ctx>)) {\n }\n \n pub fn map_method(impl_did: def_id, impl_path: @path,\n-                  m: @method, cx: @mut Ctx) {\n-    cx.map.insert(m.id, node_method(m, impl_did, impl_path));\n+                  m: @method, is_provided: bool, cx: @mut Ctx) {\n+    let entry = if is_provided {\n+        node_trait_method(@provided(m), impl_did, impl_path)\n+    } else { node_method(m, impl_did, impl_path) };\n+    cx.map.insert(m.id, entry);\n     cx.map.insert(m.self_id, node_local(special_idents::self_));\n }\n \n@@ -219,7 +222,7 @@ pub fn map_item(i: @item, (cx, v): (@mut Ctx, visit::vt<@mut Ctx>)) {\n         item_impl(_, _, _, ref ms) => {\n             let impl_did = ast_util::local_def(i.id);\n             for ms.iter().advance |m| {\n-                map_method(impl_did, extend(cx, i.ident), *m, cx);\n+                map_method(impl_did, extend(cx, i.ident), *m, false, cx);\n             }\n         }\n         item_enum(ref enum_definition, _) => {"}, {"sha": "7567dc0000be1dfdc705860495adc339cd68d1a9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -298,23 +298,23 @@ impl inlined_item_utils for inlined_item {\n         match *self {\n             ii_item(i) => /* FIXME (#2543) */ copy i.ident,\n             ii_foreign(i) => /* FIXME (#2543) */ copy i.ident,\n-            ii_method(_, m) => /* FIXME (#2543) */ copy m.ident,\n+            ii_method(_, _, m) => /* FIXME (#2543) */ copy m.ident,\n         }\n     }\n \n     fn id(&self) -> ast::node_id {\n         match *self {\n             ii_item(i) => i.id,\n             ii_foreign(i) => i.id,\n-            ii_method(_, m) => m.id,\n+            ii_method(_, _, m) => m.id,\n         }\n     }\n \n     fn accept<E: Copy>(&self, e: E, v: visit::vt<E>) {\n         match *self {\n             ii_item(i) => (v.visit_item)(i, (e, v)),\n             ii_foreign(i) => (v.visit_foreign_item)(i, (e, v)),\n-            ii_method(_, m) => visit::visit_method_helper(m, (e, v)),\n+            ii_method(_, _, m) => visit::visit_method_helper(m, (e, v)),\n         }\n     }\n }"}, {"sha": "1e56dab1559c7b0333030b760f22b0ac169819a1", "filename": "src/test/auxiliary/issue_3979_traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Fauxiliary%2Fissue_3979_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Fauxiliary%2Fissue_3979_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3979_traits.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -18,7 +18,6 @@ trait Positioned {\n   fn X(&self) -> int;\n }\n \n-#[allow(default_methods)]\n trait Movable: Positioned {\n   fn translate(&self, dx: int) {\n     self.SetX(self.X() + dx);"}, {"sha": "4d910385cd6833aedbc17bd28c212bca904831af", "filename": "src/test/auxiliary/trait_default_method_xc_aux.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -1,11 +1,11 @@\n-#[allow(default_methods)];\n \n pub struct Something { x: int }\n \n pub trait A {\n     fn f(&self) -> int;\n     fn g(&self) -> int { 10 }\n-    fn h(&self) -> int { 10 }\n+    fn h(&self) -> int { 11 }\n+    fn lurr(x: &Self, y: &Self) -> int { x.g() + y.h() }\n }\n \n \n@@ -19,6 +19,7 @@ impl A for Something {\n \n trait B<T> {\n     fn thing<U>(&self, x: T, y: U) -> (T, U) { (x, y) }\n+    fn staticthing<U>(z: &Self, x: T, y: U) -> (T, U) { (x, y) }\n }\n \n impl<T> B<T> for int { }"}, {"sha": "52264da2e80b6c5a689d5b51433caa177b19113d", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)]\n trait Speak {\n     fn say(&self, s:&str) -> ~str;\n     fn hi(&self) -> ~str { hello(self) }"}, {"sha": "2a1a0e35c56ed8f8457d01cffd8d5400cddc1871", "filename": "src/test/run-pass/bug-7295.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7295.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n pub trait Foo<T> {\n     pub fn func1<U>(&self, t: U);\n "}, {"sha": "4072d1d2bb83639ff7e150596809f9237820c07a", "filename": "src/test/run-pass/default-method-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait Foo {\n     fn f(&self) {"}, {"sha": "a4e592872a714c9cab1472a4944031af68962191", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait vec_utils<T> {\n+    fn map_<U:Copy>(x: &Self, f: &fn(&T) -> U) -> ~[U];\n+}\n+\n+impl<T> vec_utils<T> for ~[T] {\n+    fn map_<U:Copy>(x: &~[T], f: &fn(&T) -> U) -> ~[U] {\n+        let mut r = ~[];\n+        for x.iter().advance |elt| {\n+            r.push(f(elt));\n+        }\n+        r\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(vec_utils::map_(&~[1,2,3], |&x| x+1), ~[2,3,4]);\n+}"}, {"sha": "0b49e43235ae496a84bc399e5a3770bfe9ffb57b", "filename": "src/test/run-pass/issue-3563-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3563-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3563-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-2.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)]\n trait Canvas {\n     fn add_point(&self, point: &int);\n     fn add_points(&self, shapes: &[int]) {"}, {"sha": "2465cd3dd59236e77b15c457d3a0a3735e4d370b", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -113,7 +113,6 @@ impl ToStr for AsciiArt {\n \n // This is similar to an interface in other languages: it defines a protocol which\n // developers can implement for arbitrary concrete types.\n-#[allow(default_methods)]\n trait Canvas {\n     fn add_point(&mut self, shape: Point);\n     fn add_rect(&mut self, shape: Rect);"}, {"sha": "aa7fa0cb5f04763173d885600e448e0659b73754", "filename": "src/test/run-pass/issue-3683.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3683.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait Foo {\n     fn a(&self) -> int;"}, {"sha": "2a1ded96827db6a2f55ec356ec5598e2bd6c5ab9", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -14,7 +14,6 @@ trait Positioned<S> {\n   fn X(&self) -> S;\n }\n \n-#[allow(default_methods)]\n trait Movable<S, T>: Positioned<T> {\n   fn translate(&self, dx: T) {\n     self.SetX(self.X() + dx);"}, {"sha": "fe10dd5af53d821f1d01491be67a4b5c83aeeb27", "filename": "src/test/run-pass/issue-3979.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -16,7 +16,6 @@ trait Positioned {\n   fn X(&self) -> int;\n }\n \n-#[allow(default_methods)]\n trait Movable: Positioned {\n   fn translate(&mut self, dx: int) {\n     let x = self.X();"}, {"sha": "ff0c23b2eed778339361d3d712a24964b1e34604", "filename": "src/test/run-pass/trait-default-method-bound-subst.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait A<T> {\n     fn g<U>(&self, x: T, y: U) -> (T, U) { (x, y) }"}, {"sha": "1ea3879e7faf88e1f52a62205c5a0f1a2dd573b4", "filename": "src/test/run-pass/trait-default-method-bound-subst2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait A<T> {\n     fn g(&self, x: T) -> T { x }"}, {"sha": "aff20ffe962a2323203a3e5e8f3867e6886960e2", "filename": "src/test/run-pass/trait-default-method-bound-subst3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait A {\n     fn g<T>(&self, x: T, y: T) -> (T, T) { (x, y) }"}, {"sha": "4804dc273479b8856b4b0ac0ca22b339e3207bf0", "filename": "src/test/run-pass/trait-default-method-bound-subst4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait A<T> {\n     fn g(&self, x: uint) -> uint { x }"}, {"sha": "8a2f1b1743b09f779d843baa4f4341a7d5b65709", "filename": "src/test/run-pass/trait-default-method-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait A {\n     fn g(&self) -> int { 10 }"}, {"sha": "38b386838a1b4816aa57228762006cc53b2df4e5", "filename": "src/test/run-pass/trait-default-method-xc.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -1,16 +1,19 @@\n // xfail-fast\n // aux-build:trait_default_method_xc_aux.rs\n \n-#[allow(default_methods)];\n \n extern mod aux(name = \"trait_default_method_xc_aux\");\n-use aux::{A, B, TestEquality, Something};\n-\n+use aux::{A, TestEquality, Something};\n+use aux::B;\n \n fn f<T: aux::A>(i: T) {\n     assert_eq!(i.g(), 10);\n }\n \n+fn welp<T>(i: int, x: &T) -> int {\n+    i.g()\n+}\n+\n mod stuff {\n     pub struct thing { x: int }\n }\n@@ -43,23 +46,26 @@ fn main () {\n     // Some tests of random things\n     f(0);\n \n+    assert_eq!(A::lurr(&0, &1), 21);\n+\n     let a = stuff::thing { x: 0 };\n     let b = stuff::thing { x: 1 };\n     let c = Something { x: 1 };\n \n     assert_eq!(0i.g(), 10);\n     assert_eq!(a.g(), 10);\n-    assert_eq!(a.h(), 10);\n-    assert_eq!(c.h(), 10);\n+    assert_eq!(a.h(), 11);\n+    assert_eq!(c.h(), 11);\n \n-    0i.thing(3.14, 1);\n     assert_eq!(0i.thing(3.14, 1), (3.14, 1));\n+    assert_eq!(B::staticthing(&0i, 3.14, 1), (3.14, 1));\n+    assert_eq!(B::staticthing::<float, int, int>(&0i, 3.14, 1), (3.14, 1));\n \n     assert_eq!(g(0i, 3.14, 1), (3.14, 1));\n     assert_eq!(g(false, 3.14, 1), (3.14, 1));\n \n     let obj = @0i as @A;\n-    assert_eq!(obj.h(), 10);\n+    assert_eq!(obj.h(), 11);\n \n \n     // Trying out a real one"}, {"sha": "689df437fb4ba1bc5857c90a990f6fca37e215a6", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -15,7 +15,6 @@ pub trait Clone2 {\n     fn clone(&self) -> Self;\n }\n \n-#[allow(default_methods)]\n trait Getter<T: Clone> {\n     fn do_get(&self) -> T;\n "}, {"sha": "a78177ea892d25e00f8f5197d201ae68858e0cb7", "filename": "src/test/run-pass/traits-default-method-macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait Foo {\n     fn bar(&self) -> ~str {"}, {"sha": "fee766464582ce0e2ba7b55ec9ac701f22ae7e1f", "filename": "src/test/run-pass/traits-default-method-mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait Foo {\n     fn foo(&self, mut v: int) { v = 1; }"}, {"sha": "1027008624a24545c906602649296e98e38c524d", "filename": "src/test/run-pass/traits-default-method-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-self.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait Cat {\n     fn meow(&self) -> bool;"}, {"sha": "c6a7ab5ba49677ee8d259003e4633e89387d2d84", "filename": "src/test/run-pass/traits-default-method-trivial.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee54a86171d70f439b3cf77e566150b78251bc2/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-trivial.rs?ref=1ee54a86171d70f439b3cf77e566150b78251bc2", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(default_methods)];\n \n trait Cat {\n     fn meow(&self) -> bool;"}]}