{"sha": "55f76cdb2f4d01cf87e47148c706c53a129fa45e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Zjc2Y2RiMmY0ZDAxY2Y4N2U0NzE0OGM3MDZjNTNhMTI5ZmE0NWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-28T02:46:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T04:25:31Z"}, "message": "syntax: use distinct FloatTy from rustc_target.\n\nWe also sever syntax's dependency on rustc_target as a result.\nThis should slightly improve pipe-lining.\n\nMoreover, some cleanup is done in related code.", "tree": {"sha": "2d7d13cc5d9c3ccea097ee12df06556b2d1afde4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d7d13cc5d9c3ccea097ee12df06556b2d1afde4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f76cdb2f4d01cf87e47148c706c53a129fa45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f76cdb2f4d01cf87e47148c706c53a129fa45e", "html_url": "https://github.com/rust-lang/rust/commit/55f76cdb2f4d01cf87e47148c706c53a129fa45e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f76cdb2f4d01cf87e47148c706c53a129fa45e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bffc3d807394ad5ac8eab7af4c6d227b2870f534", "url": "https://api.github.com/repos/rust-lang/rust/commits/bffc3d807394ad5ac8eab7af4c6d227b2870f534", "html_url": "https://github.com/rust-lang/rust/commit/bffc3d807394ad5ac8eab7af4c6d227b2870f534"}], "stats": {"total": 281, "additions": 123, "deletions": 158}, "files": [{"sha": "0f770f3eadbea34a6df31f41aaa9e8e98a84c01c", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -3762,7 +3762,6 @@ dependencies = [\n  \"rustc\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n- \"rustc_target\",\n  \"serde_json\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -4362,7 +4361,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n- \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n@@ -4380,7 +4378,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n- \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\","}, {"sha": "2201c4b0980b3ba07c81f92771f17134ef311832", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -124,7 +124,6 @@ for ::syntax::attr::StabilityLevel {\n \n impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason, suggestion });\n \n-\n impl_stable_hash_for!(enum ::syntax::attr::IntType {\n     SignedInt(int_ty),\n     UnsignedInt(uint_ty)\n@@ -136,6 +135,11 @@ impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n     Unsuffixed\n });\n \n+impl_stable_hash_for!(enum ::syntax::ast::LitFloatType {\n+    Suffixed(float_ty),\n+    Unsuffixed\n+});\n+\n impl_stable_hash_for!(struct ::syntax::ast::Lit {\n     kind,\n     token,\n@@ -148,8 +152,7 @@ impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Byte(value),\n     Char(value),\n     Int(value, lit_int_type),\n-    Float(value, float_ty),\n-    FloatUnsuffixed(value),\n+    Float(value, lit_float_type),\n     Bool(value),\n     Err(value)\n });\n@@ -159,6 +162,7 @@ impl_stable_hash_for_spanned!(::syntax::ast::LitKind);\n impl_stable_hash_for!(enum ::syntax::ast::IntTy { Isize, I8, I16, I32, I64, I128 });\n impl_stable_hash_for!(enum ::syntax::ast::UintTy { Usize, U8, U16, U32, U64, U128 });\n impl_stable_hash_for!(enum ::syntax::ast::FloatTy { F32, F64 });\n+impl_stable_hash_for!(enum ::rustc_target::abi::FloatTy { F32, F64 });\n impl_stable_hash_for!(enum ::syntax::ast::Unsafety { Unsafe, Normal });\n impl_stable_hash_for!(enum ::syntax::ast::Constness { Const, NotConst });\n impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });"}, {"sha": "60aab6b6aa924b380c687c193368de220cd32960", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -538,7 +538,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Uint(ity) => {\n                 scalar(Int(Integer::from_attr(dl, attr::UnsignedInt(ity)), false))\n             }\n-            ty::Float(fty) => scalar(Float(fty)),\n+            ty::Float(fty) => scalar(Float(match fty {\n+                ast::FloatTy::F32 => FloatTy::F32,\n+                ast::FloatTy::F64 => FloatTy::F64,\n+            })),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range = 1..=*ptr.valid_range.end();"}, {"sha": "d25f302cf889eb7940537a7da6cac104445463f8", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -12,7 +12,6 @@ use rustc::ty::{self, Const, Instance, Ty, TyCtxt};\n use rustc::{bug, hir};\n use std::fmt::Write;\n use std::iter;\n-use syntax::ast;\n \n /// Same as `unique_type_name()` but with the result pushed onto the given\n /// `output` parameter.\n@@ -39,20 +38,9 @@ impl DefPathBasedNames<'tcx> {\n             ty::Char => output.push_str(\"char\"),\n             ty::Str => output.push_str(\"str\"),\n             ty::Never => output.push_str(\"!\"),\n-            ty::Int(ast::IntTy::Isize) => output.push_str(\"isize\"),\n-            ty::Int(ast::IntTy::I8) => output.push_str(\"i8\"),\n-            ty::Int(ast::IntTy::I16) => output.push_str(\"i16\"),\n-            ty::Int(ast::IntTy::I32) => output.push_str(\"i32\"),\n-            ty::Int(ast::IntTy::I64) => output.push_str(\"i64\"),\n-            ty::Int(ast::IntTy::I128) => output.push_str(\"i128\"),\n-            ty::Uint(ast::UintTy::Usize) => output.push_str(\"usize\"),\n-            ty::Uint(ast::UintTy::U8) => output.push_str(\"u8\"),\n-            ty::Uint(ast::UintTy::U16) => output.push_str(\"u16\"),\n-            ty::Uint(ast::UintTy::U32) => output.push_str(\"u32\"),\n-            ty::Uint(ast::UintTy::U64) => output.push_str(\"u64\"),\n-            ty::Uint(ast::UintTy::U128) => output.push_str(\"u128\"),\n-            ty::Float(ast::FloatTy::F32) => output.push_str(\"f32\"),\n-            ty::Float(ast::FloatTy::F64) => output.push_str(\"f64\"),\n+            ty::Int(ty) => output.push_str(ty.name_str()),\n+            ty::Uint(ty) => output.push_str(ty.name_str()),\n+            ty::Float(ty) => output.push_str(ty.name_str()),\n             ty::Adt(adt_def, substs) => {\n                 self.push_def_path(adt_def.did, output);\n                 self.push_generic_params(substs, iter::empty(), output, debug);"}, {"sha": "4d1fece2cb9c9149b476998bf62a534aae834809", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -466,9 +466,9 @@ pub trait PrettyPrinter<'tcx>:\n         match ty.kind {\n             ty::Bool => p!(write(\"bool\")),\n             ty::Char => p!(write(\"char\")),\n-            ty::Int(t) => p!(write(\"{}\", t.ty_to_string())),\n-            ty::Uint(t) => p!(write(\"{}\", t.ty_to_string())),\n-            ty::Float(t) => p!(write(\"{}\", t.ty_to_string())),\n+            ty::Int(t) => p!(write(\"{}\", t.name_str())),\n+            ty::Uint(t) => p!(write(\"{}\", t.name_str())),\n+            ty::Float(t) => p!(write(\"{}\", t.name_str())),\n             ty::RawPtr(ref tm) => {\n                 p!(write(\"*{} \", match tm.mutbl {\n                     hir::MutMutable => \"mut\",\n@@ -895,10 +895,11 @@ pub trait PrettyPrinter<'tcx>:\n                 let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(*ui)).size();\n                 let max = truncate(u128::max_value(), bit_size);\n \n+                let ui_str = ui.name_str();\n                 if data == max {\n-                    p!(write(\"std::{}::MAX\", ui))\n+                    p!(write(\"std::{}::MAX\", ui_str))\n                 } else {\n-                    p!(write(\"{}{}\", data, ui))\n+                    p!(write(\"{}{}\", data, ui_str))\n                 };\n             },\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Int(i)) => {\n@@ -911,10 +912,11 @@ pub trait PrettyPrinter<'tcx>:\n                 let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n                     .unwrap()\n                     .size;\n+                let i_str = i.name_str();\n                 match data {\n-                    d if d == min => p!(write(\"std::{}::MIN\", i)),\n-                    d if d == max => p!(write(\"std::{}::MAX\", i)),\n-                    _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i))\n+                    d if d == min => p!(write(\"std::{}::MIN\", i_str)),\n+                    d if d == max => p!(write(\"std::{}::MAX\", i_str)),\n+                    _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i_str))\n                 }\n             },\n             (ConstValue::Scalar(Scalar::Raw { data, .. }), ty::Char) =>"}, {"sha": "5f18bb1700c1445b6809cdbf30dacb4c6b83c61f", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -843,13 +843,13 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         ty::Bool => (\"bool\", DW_ATE_boolean),\n         ty::Char => (\"char\", DW_ATE_unsigned_char),\n         ty::Int(int_ty) => {\n-            (int_ty.ty_to_string(), DW_ATE_signed)\n+            (int_ty.name_str(), DW_ATE_signed)\n         },\n         ty::Uint(uint_ty) => {\n-            (uint_ty.ty_to_string(), DW_ATE_unsigned)\n+            (uint_ty.name_str(), DW_ATE_unsigned)\n         },\n         ty::Float(float_ty) => {\n-            (float_ty.ty_to_string(), DW_ATE_float)\n+            (float_ty.name_str(), DW_ATE_float)\n         },\n         _ => bug!(\"debuginfo::basic_type_metadata - t is invalid type\")\n     };"}, {"sha": "a4c3b42f51e9e5e2e4b73b862e907e6f9022ab0f", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -18,8 +18,8 @@ use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, Primitive};\n use rustc::mir::interpret::GlobalId;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n-use syntax::ast::{self, FloatTy};\n-use rustc_target::abi::HasDataLayout;\n+use rustc_target::abi::{FloatTy, HasDataLayout};\n+use syntax::ast;\n \n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::traits::*;\n@@ -1335,7 +1335,7 @@ fn generic_simd_intrinsic(\n             },\n             ty::Float(f) => {\n                 return_error!(\"unsupported element type `{}` of floating-point vector `{}`\",\n-                              f, in_ty);\n+                              f.name_str(), in_ty);\n             },\n             _ => {\n                 return_error!(\"`{}` is not a floating-point type\", in_ty);"}, {"sha": "372aefacb95f205a1734cb6d8adcbaeb3e04ae36", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -37,9 +37,9 @@ pub fn push_debuginfo_type_name<'tcx>(\n         ty::Char => output.push_str(\"char\"),\n         ty::Str => output.push_str(\"str\"),\n         ty::Never => output.push_str(\"!\"),\n-        ty::Int(int_ty) => output.push_str(int_ty.ty_to_string()),\n-        ty::Uint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n-        ty::Float(float_ty) => output.push_str(float_ty.ty_to_string()),\n+        ty::Int(int_ty) => output.push_str(int_ty.name_str()),\n+        ty::Uint(uint_ty) => output.push_str(uint_ty.name_str()),\n+        ty::Float(float_ty) => output.push_str(float_ty.name_str()),\n         ty::Foreign(def_id) => push_item_name(tcx, def_id, qualified, output),\n         ty::Adt(def, substs) => {\n             push_item_name(tcx, def.did, qualified, output);"}, {"sha": "35b93db1d6590db12d7ffec982d186a77e18277b", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -27,7 +27,6 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_passes = { path = \"../librustc_passes\" }\n-rustc_target = { path = \"../librustc_target\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_errors = { path = \"../librustc_errors\" }\n@@ -36,3 +35,6 @@ rustc_privacy = { path = \"../librustc_privacy\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n tempfile = \"3.0.5\"\n once_cell = \"1\"\n+\n+[dev-dependencies]\n+rustc_target = { path = \"../librustc_target\" }"}, {"sha": "65e0940920bd741a3babfa0f4e7027c83aca450a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -68,7 +68,7 @@ fn lint_overflowing_range_endpoint<'a, 'tcx>(\n     max: u128,\n     expr: &'tcx hir::Expr,\n     parent_expr: &'tcx hir::Expr,\n-    ty: impl std::fmt::Debug,\n+    ty: &str,\n ) -> bool {\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n@@ -83,15 +83,15 @@ fn lint_overflowing_range_endpoint<'a, 'tcx>(\n             let mut err = cx.struct_span_lint(\n                 OVERFLOWING_LITERALS,\n                 parent_expr.span,\n-                &format!(\"range endpoint is out of range for `{:?}`\", ty),\n+                &format!(\"range endpoint is out of range for `{}`\", ty),\n             );\n             if let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) {\n                 use ast::{LitKind, LitIntType};\n                 // We need to preserve the literal's suffix,\n                 // as it may determine typing information.\n                 let suffix = match lit.node {\n-                    LitKind::Int(_, LitIntType::Signed(s)) => format!(\"{}\", s),\n-                    LitKind::Int(_, LitIntType::Unsigned(s)) => format!(\"{}\", s),\n+                    LitKind::Int(_, LitIntType::Signed(s)) => format!(\"{}\", s.name_str()),\n+                    LitKind::Int(_, LitIntType::Unsigned(s)) => format!(\"{}\", s.name_str()),\n                     LitKind::Int(_, LitIntType::Unsuffixed) => \"\".to_owned(),\n                     _ => bug!(),\n                 };\n@@ -161,11 +161,11 @@ fn report_bin_hex_error(\n     let (t, actually) = match ty {\n         attr::IntType::SignedInt(t) => {\n             let actually = sign_extend(val, size) as i128;\n-            (format!(\"{:?}\", t), actually.to_string())\n+            (t.name_str(), actually.to_string())\n         }\n         attr::IntType::UnsignedInt(t) => {\n             let actually = truncate(val, size);\n-            (format!(\"{:?}\", t), actually.to_string())\n+            (t.name_str(), actually.to_string())\n         }\n     };\n     let mut err = cx.struct_span_lint(\n@@ -204,7 +204,7 @@ fn report_bin_hex_error(\n //  - `uX` => `uY`\n //\n // No suggestion for: `isize`, `usize`.\n-fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n+fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<&'static str> {\n     use syntax::ast::IntTy::*;\n     use syntax::ast::UintTy::*;\n     macro_rules! find_fit {\n@@ -215,10 +215,10 @@ fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n                 match $ty {\n                     $($type => {\n                         $(if !negative && val <= uint_ty_range($utypes).1 {\n-                            return Some(format!(\"{:?}\", $utypes))\n+                            return Some($utypes.name_str())\n                         })*\n                         $(if val <= int_ty_range($itypes).1 as u128 + _neg {\n-                            return Some(format!(\"{:?}\", $itypes))\n+                            return Some($itypes.name_str())\n                         })*\n                         None\n                     },)+\n@@ -281,7 +281,7 @@ fn lint_int_literal<'a, 'tcx>(\n         if let Node::Expr(par_e) = cx.tcx.hir().get(par_id) {\n             if let hir::ExprKind::Struct(..) = par_e.kind {\n                 if is_range_literal(cx.sess(), par_e)\n-                    && lint_overflowing_range_endpoint(cx, lit, v, max, e, par_e, t)\n+                    && lint_overflowing_range_endpoint(cx, lit, v, max, e, par_e, t.name_str())\n                 {\n                     // The overflowing literal lint was overridden.\n                     return;\n@@ -292,7 +292,7 @@ fn lint_int_literal<'a, 'tcx>(\n         cx.span_lint(\n             OVERFLOWING_LITERALS,\n             e.span,\n-            &format!(\"literal out of range for `{:?}`\", t),\n+            &format!(\"literal out of range for `{}`\", t.name_str()),\n         );\n     }\n }\n@@ -338,6 +338,7 @@ fn lint_uint_literal<'a, 'tcx>(\n                 }\n                 hir::ExprKind::Struct(..)\n                     if is_range_literal(cx.sess(), par_e) => {\n+                        let t = t.name_str();\n                         if lint_overflowing_range_endpoint(cx, lit, lit_val, max, e, par_e, t) {\n                             // The overflowing literal lint was overridden.\n                             return;\n@@ -353,7 +354,7 @@ fn lint_uint_literal<'a, 'tcx>(\n         cx.span_lint(\n             OVERFLOWING_LITERALS,\n             e.span,\n-            &format!(\"literal out of range for `{:?}`\", t),\n+            &format!(\"literal out of range for `{}`\", t.name_str()),\n         );\n     }\n }\n@@ -379,8 +380,7 @@ fn lint_literal<'a, 'tcx>(\n         }\n         ty::Float(t) => {\n             let is_infinite = match lit.node {\n-                ast::LitKind::Float(v, _) |\n-                ast::LitKind::FloatUnsuffixed(v) => {\n+                ast::LitKind::Float(v, _) => {\n                     match t {\n                         ast::FloatTy::F32 => v.as_str().parse().map(f32::is_infinite),\n                         ast::FloatTy::F64 => v.as_str().parse().map(f64::is_infinite),\n@@ -389,9 +389,11 @@ fn lint_literal<'a, 'tcx>(\n                 _ => bug!(),\n             };\n             if is_infinite == Ok(true) {\n-                cx.span_lint(OVERFLOWING_LITERALS,\n-                             e.span,\n-                             &format!(\"literal out of range for `{:?}`\", t));\n+                cx.span_lint(\n+                    OVERFLOWING_LITERALS,\n+                    e.span,\n+                    &format!(\"literal out of range for `{}`\", t.name_str()),\n+                );\n             }\n         }\n         _ => {}"}, {"sha": "b9e75a576cad877ba5c03b27488e29fb2ad2f75a", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -45,10 +45,7 @@ crate fn lit_to_const<'tcx>(\n             trunc(n as u128)?\n         },\n         LitKind::Int(n, _) => trunc(n)?,\n-        LitKind::Float(n, fty) => {\n-            parse_float(n, fty, neg).map_err(|_| LitToConstError::UnparseableFloat)?\n-        }\n-        LitKind::FloatUnsuffixed(n) => {\n+        LitKind::Float(n, _) => {\n             let fty = match ty.kind {\n                 ty::Float(fty) => fty,\n                 _ => bug!()"}, {"sha": "2d93585e50ee471a47a8883a4fc3e7fe82554b17", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -13,7 +13,6 @@ log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n-rustc_target = { path = \"../librustc_target\" }\n serde_json = \"1\"\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "e58caed0c99dda623a4ec0f0d0fa1ddb9b1b8067", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -3,11 +3,9 @@ pub use Primitive::*;\n \n use crate::spec::Target;\n \n-use std::fmt;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n use rustc_index::vec::{Idx, IndexVec};\n-use syntax_pos::symbol::{sym, Symbol};\n use syntax_pos::Span;\n \n pub mod call;\n@@ -534,49 +532,13 @@ impl Integer {\n     }\n }\n \n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy,\n-         PartialOrd, Ord)]\n+         PartialOrd, Ord, Debug)]\n pub enum FloatTy {\n     F32,\n     F64,\n }\n \n-impl fmt::Debug for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for FloatTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl FloatTy {\n-    pub fn ty_to_string(self) -> &'static str {\n-        match self {\n-            FloatTy::F32 => \"f32\",\n-            FloatTy::F64 => \"f64\",\n-        }\n-    }\n-\n-    pub fn to_symbol(self) -> Symbol {\n-        match self {\n-            FloatTy::F32 => sym::f32,\n-            FloatTy::F64 => sym::f64,\n-        }\n-    }\n-\n-    pub fn bit_width(self) -> usize {\n-        match self {\n-            FloatTy::F32 => 32,\n-            FloatTy::F64 => 64,\n-        }\n-    }\n-}\n-\n /// Fundamental unit of memory access and layout.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Primitive {"}, {"sha": "a297a0b014f6111f98f19c49e6dc0b2f87f97bee", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -3660,8 +3660,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 });\n                 opt_ty.unwrap_or_else(|| self.next_int_var())\n             }\n-            ast::LitKind::Float(_, t) => tcx.mk_mach_float(t),\n-            ast::LitKind::FloatUnsuffixed(_) => {\n+            ast::LitKind::Float(_, ast::LitFloatType::Suffixed(t)) => tcx.mk_mach_float(t),\n+            ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) => {\n                 let opt_ty = expected.to_option(self).and_then(|ty| {\n                     match ty.kind {\n                         ty::Float(_) => Some(ty),"}, {"sha": "3e17e7949ea990b0ab461de0ca64cf2978ebd460", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -20,5 +20,4 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n-rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "67d1acbccfbe5beca1ca9dadde9cdf375899e67e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -22,7 +22,6 @@ pub use GenericArgs::*;\n pub use UnsafeSource::*;\n pub use crate::util::parser::ExprPrecedence;\n \n-pub use rustc_target::abi::FloatTy;\n pub use syntax_pos::symbol::{Ident, Symbol as Name};\n \n use crate::parse::token::{self, DelimToken};\n@@ -1400,7 +1399,7 @@ pub struct Lit {\n \n // Clippy uses Hash and PartialEq\n /// Type of the integer literal based on provided suffix.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, PartialEq)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n pub enum LitIntType {\n     /// e.g. `42_i32`.\n     Signed(IntTy),\n@@ -1410,6 +1409,15 @@ pub enum LitIntType {\n     Unsuffixed,\n }\n \n+/// Type of the float literal based on provided suffix.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n+pub enum LitFloatType {\n+    /// A float literal with a suffix (`1f32` or `1E10f32`).\n+    Suffixed(FloatTy),\n+    /// A float literal without a suffix (`1.0 or 1.0E10`).\n+    Unsuffixed,\n+}\n+\n /// Literal kind.\n ///\n /// E.g., `\"foo\"`, `42`, `12.34`, or `bool`.\n@@ -1427,9 +1435,7 @@ pub enum LitKind {\n     /// An integer literal (`1`).\n     Int(u128, LitIntType),\n     /// A float literal (`1f64` or `1E10f64`).\n-    Float(Symbol, FloatTy),\n-    /// A float literal without a suffix (`1.0 or 1.0E10`).\n-    FloatUnsuffixed(Symbol),\n+    Float(Symbol, LitFloatType),\n     /// A boolean literal.\n     Bool(bool),\n     /// Placeholder for a literal that wasn't well-formed in some way.\n@@ -1456,7 +1462,7 @@ impl LitKind {\n     /// Returns `true` if this is a numeric literal.\n     pub fn is_numeric(&self) -> bool {\n         match *self {\n-            LitKind::Int(..) | LitKind::Float(..) | LitKind::FloatUnsuffixed(..) => true,\n+            LitKind::Int(..) | LitKind::Float(..) => true,\n             _ => false,\n         }\n     }\n@@ -1473,14 +1479,14 @@ impl LitKind {\n             // suffixed variants\n             LitKind::Int(_, LitIntType::Signed(..))\n             | LitKind::Int(_, LitIntType::Unsigned(..))\n-            | LitKind::Float(..) => true,\n+            | LitKind::Float(_, LitFloatType::Suffixed(..)) => true,\n             // unsuffixed variants\n             LitKind::Str(..)\n             | LitKind::ByteStr(..)\n             | LitKind::Byte(..)\n             | LitKind::Char(..)\n             | LitKind::Int(_, LitIntType::Unsuffixed)\n-            | LitKind::FloatUnsuffixed(..)\n+            | LitKind::Float(_, LitFloatType::Unsuffixed)\n             | LitKind::Bool(..)\n             | LitKind::Err(..) => false,\n         }\n@@ -1552,7 +1558,36 @@ pub enum ImplItemKind {\n     Macro(Mac),\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+pub enum FloatTy {\n+    F32,\n+    F64,\n+}\n+\n+impl FloatTy {\n+    pub fn name_str(self) -> &'static str {\n+        match self {\n+            FloatTy::F32 => \"f32\",\n+            FloatTy::F64 => \"f64\",\n+        }\n+    }\n+\n+    pub fn name(self) -> Symbol {\n+        match self {\n+            FloatTy::F32 => sym::f32,\n+            FloatTy::F64 => sym::f64,\n+        }\n+    }\n+\n+    pub fn bit_width(self) -> usize {\n+        match self {\n+            FloatTy::F32 => 32,\n+            FloatTy::F64 => 64,\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -1562,20 +1597,8 @@ pub enum IntTy {\n     I128,\n }\n \n-impl fmt::Debug for IntTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for IntTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n impl IntTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n+    pub fn name_str(&self) -> &'static str {\n         match *self {\n             IntTy::Isize => \"isize\",\n             IntTy::I8 => \"i8\",\n@@ -1586,7 +1609,7 @@ impl IntTy {\n         }\n     }\n \n-    pub fn to_symbol(&self) -> Symbol {\n+    pub fn name(&self) -> Symbol {\n         match *self {\n             IntTy::Isize => sym::isize,\n             IntTy::I8 => sym::i8,\n@@ -1601,7 +1624,7 @@ impl IntTy {\n         // Cast to a `u128` so we can correctly print `INT128_MIN`. All integral types\n         // are parsed as `u128`, so we wouldn't want to print an extra negative\n         // sign.\n-        format!(\"{}{}\", val as u128, self.ty_to_string())\n+        format!(\"{}{}\", val as u128, self.name_str())\n     }\n \n     pub fn bit_width(&self) -> Option<usize> {\n@@ -1616,7 +1639,7 @@ impl IntTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy, Debug)]\n pub enum UintTy {\n     Usize,\n     U8,\n@@ -1627,7 +1650,7 @@ pub enum UintTy {\n }\n \n impl UintTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n+    pub fn name_str(&self) -> &'static str {\n         match *self {\n             UintTy::Usize => \"usize\",\n             UintTy::U8 => \"u8\",\n@@ -1638,7 +1661,7 @@ impl UintTy {\n         }\n     }\n \n-    pub fn to_symbol(&self) -> Symbol {\n+    pub fn name(&self) -> Symbol {\n         match *self {\n             UintTy::Usize => sym::usize,\n             UintTy::U8 => sym::u8,\n@@ -1650,7 +1673,7 @@ impl UintTy {\n     }\n \n     pub fn val_to_string(&self, val: u128) -> String {\n-        format!(\"{}{}\", val, self.ty_to_string())\n+        format!(\"{}{}\", val, self.name_str())\n     }\n \n     pub fn bit_width(&self) -> Option<usize> {\n@@ -1665,18 +1688,6 @@ impl UintTy {\n     }\n }\n \n-impl fmt::Debug for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self, f)\n-    }\n-}\n-\n-impl fmt::Display for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n /// A constraint on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or\n /// `A: TraitA + TraitB` in `Foo<A: TraitA + TraitB>`).\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "a8eeac59954f14efcf6a3880e481561ab325605c", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -157,17 +157,18 @@ impl LitKind {\n             }\n             LitKind::Int(n, ty) => {\n                 let suffix = match ty {\n-                    ast::LitIntType::Unsigned(ty) => Some(ty.to_symbol()),\n-                    ast::LitIntType::Signed(ty) => Some(ty.to_symbol()),\n+                    ast::LitIntType::Unsigned(ty) => Some(ty.name()),\n+                    ast::LitIntType::Signed(ty) => Some(ty.name()),\n                     ast::LitIntType::Unsuffixed => None,\n                 };\n                 (token::Integer, sym::integer(n), suffix)\n             }\n             LitKind::Float(symbol, ty) => {\n-                (token::Float, symbol, Some(ty.to_symbol()))\n-            }\n-            LitKind::FloatUnsuffixed(symbol) => {\n-                (token::Float, symbol, None)\n+                let suffix = match ty {\n+                    ast::LitFloatType::Suffixed(ty) => Some(ty.name()),\n+                    ast::LitFloatType::Unsuffixed => None,\n+                };\n+                (token::Float, symbol, suffix)\n             }\n             LitKind::Bool(value) => {\n                 let symbol = if value { kw::True } else { kw::False };\n@@ -244,12 +245,12 @@ fn filtered_float_lit(symbol: Symbol, suffix: Option<Symbol>, base: u32)\n         return Err(LitError::NonDecimalFloat(base));\n     }\n     Ok(match suffix {\n-        Some(suf) => match suf {\n-            sym::f32 => LitKind::Float(symbol, ast::FloatTy::F32),\n-            sym::f64 => LitKind::Float(symbol, ast::FloatTy::F64),\n+        Some(suf) => LitKind::Float(symbol, ast::LitFloatType::Suffixed(match suf {\n+            sym::f32 => ast::FloatTy::F32,\n+            sym::f64 => ast::FloatTy::F64,\n             _ => return Err(LitError::InvalidFloatSuffix),\n-        }\n-        None => LitKind::FloatUnsuffixed(symbol)\n+        })),\n+        None => LitKind::Float(symbol, ast::LitFloatType::Unsuffixed)\n     })\n }\n "}, {"sha": "02c711bc387e31f95c781a186e0023ebd1207ce7", "filename": "src/libsyntax_expand/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -21,6 +21,5 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n-rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "4bf13f37711022663d3b6f8a3f7a444f4f2e1521", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f76cdb2f4d01cf87e47148c706c53a129fa45e/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=55f76cdb2f4d01cf87e47148c706c53a129fa45e", "patch": "@@ -21,8 +21,7 @@ pub fn expand_concat(\n         match e.kind {\n             ast::ExprKind::Lit(ref lit) => match lit.kind {\n                 ast::LitKind::Str(ref s, _)\n-                | ast::LitKind::Float(ref s, _)\n-                | ast::LitKind::FloatUnsuffixed(ref s) => {\n+                | ast::LitKind::Float(ref s, _) => {\n                     accumulator.push_str(&s.as_str());\n                 }\n                 ast::LitKind::Char(c) => {"}]}