{"sha": "f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YjFiYTZlOTBhZmUxY2Q1YmM0NmJhZTRlZTk3ZDk4OWM3MWFkYmY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-08T21:16:35Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-06-09T12:24:46Z"}, "message": "use the type name as the pass name", "tree": {"sha": "abdd17d9ed55f174773d66f98b8fb121eac0ed0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abdd17d9ed55f174773d66f98b8fb121eac0ed0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "html_url": "https://github.com/rust-lang/rust/commit/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "065a2649761e00d9a025e1efcf6ff09e291264aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/065a2649761e00d9a025e1efcf6ff09e291264aa", "html_url": "https://github.com/rust-lang/rust/commit/065a2649761e00d9a025e1efcf6ff09e291264aa"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "fc2d68d7262e68e07bd437be85df4b9e2407573e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -28,6 +28,7 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(const_fn)]\n+#![feature(core_intrinsics)]\n #![feature(enumset)]\n #![feature(iter_arith)]\n #![feature(libc)]"}, {"sha": "f17984d380459cd4564da0e2edfd59f565f43cb4", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -76,7 +76,9 @@ pub trait Pass {\n     fn dep_node(&self, def_id: DefId) -> DepNode<DefId> {\n         DepNode::MirPass(def_id)\n     }\n-    fn name(&self) -> &str;\n+    fn name(&self) -> &str {\n+        unsafe { ::std::intrinsics::type_name::<Self>() }\n+    }\n     fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> { None }\n }\n "}, {"sha": "362d6ce2acafc6587dce5a4281e79ebf2b31bdc5", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -69,9 +69,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n     }\n }\n \n-impl Pass for ElaborateDrops {\n-    fn name(&self) -> &str { \"elaborate-drops\" }\n-}\n+impl Pass for ElaborateDrops {}\n \n struct InitializationData {\n     live: IdxSetBuf<MovePathIndex>,"}, {"sha": "ce132a0487079404e034f3f3b390369873a3c123", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -1059,7 +1059,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\"));\n \n         passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n-        passes.push_pass(box mir::transform::dump_mir::Marker(\"pre-trans\"));\n+        passes.push_pass(box mir::transform::dump_mir::Marker(\"PreTrans\"));\n \n         passes.run_passes(tcx, &mut mir_map);\n     });"}, {"sha": "63e975128c79240e2de29f889df5ebee7e9f7986", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -82,6 +82,4 @@ impl<'tcx> MirPass<'tcx> for AddCallGuards {\n     }\n }\n \n-impl Pass for AddCallGuards {\n-    fn name(&self) -> &str { \"add-call-guards\" }\n-}\n+impl Pass for AddCallGuards {}"}, {"sha": "642adeee5cd63632b0fccd965d8e25293ea7be0c", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -70,6 +70,4 @@ impl<'tcx> MirPassHook<'tcx> for DumpMir {\n     }\n }\n \n-impl<'b> Pass for DumpMir {\n-    fn name(&self) -> &str { \"dump-mir\" }\n-}\n+impl<'b> Pass for DumpMir {}"}, {"sha": "485ca3ea84a7e8d2f093e58464781a0ed92522ec", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -43,9 +43,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n \n pub struct EraseRegions;\n \n-impl Pass for EraseRegions {\n-    fn name(&self) -> &str { \"erase-regions\" }\n-}\n+impl Pass for EraseRegions {}\n \n impl<'tcx> MirPass<'tcx> for EraseRegions {\n     fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "818f060ed445ccff0404d04554de1508991a515b", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -50,6 +50,4 @@ impl<'tcx> MirPass<'tcx> for NoLandingPads {\n     }\n }\n \n-impl Pass for NoLandingPads {\n-    fn name(&self) -> &str { \"no-landing-pads\" }\n-}\n+impl Pass for NoLandingPads {}"}, {"sha": "784ddc1ede4f1d4fd32c1529c68a8d8182b1ff0c", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -906,9 +906,7 @@ fn qualify_const_item_cached<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub struct QualifyAndPromoteConstants;\n \n-impl Pass for QualifyAndPromoteConstants {\n-    fn name(&self) -> &str { \"qualify-consts\" }\n-}\n+impl Pass for QualifyAndPromoteConstants {}\n \n impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n     fn run_pass<'a>(&mut self,"}, {"sha": "f93de6ca382bb61298cf758a4519acde6a9e2ab7", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -57,7 +57,6 @@ impl<'l, 'tcx> MirPass<'tcx> for SimplifyBranches<'l> {\n }\n \n impl<'l> Pass for SimplifyBranches<'l> {\n-    fn name(&self) -> &str { \"simplify-branches\" }\n     fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> {\n         Some(Box::new(self.label))\n     }"}, {"sha": "8bbcc3fe2d70f60ac3a2a9a50f7e18c02c993be7", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -59,7 +59,6 @@ impl<'l, 'tcx> MirPass<'tcx> for SimplifyCfg<'l> {\n }\n \n impl<'l> Pass for SimplifyCfg<'l> {\n-    fn name(&self) -> &str { \"simplify-cfg\" }\n     fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> {\n         Some(Box::new(self.label))\n     }"}, {"sha": "e4398fcab316326bcaf67f0517e3ae4f6651fda5", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -717,6 +717,4 @@ impl Pass for TypeckMir {\n     fn dep_node(&self, def_id: DefId) -> DepNode<DefId> {\n         DepNode::MirTypeck(def_id)\n     }\n-\n-    fn name(&self) -> &str { \"typeck-mir\" }\n }"}, {"sha": "604933d40a12c688d4ee26a13033dbbc8eb2c24c", "filename": "src/test/run-pass-fulldeps/auxiliary/dummy_mir_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs?ref=f5b1ba6e90afe1cd5bc46bae4ee97d989c71adbf", "patch": "@@ -28,9 +28,7 @@ use rustc_plugin::Registry;\n \n struct Pass;\n \n-impl transform::Pass for Pass {\n-    fn name(&self) -> &str { \"dummy-mir-pass\" }\n-}\n+impl transform::Pass for Pass {}\n \n impl<'tcx> MirPass<'tcx> for Pass {\n     fn run_pass<'a>(&mut self, _: TyCtxt<'a, 'tcx, 'tcx>,"}]}