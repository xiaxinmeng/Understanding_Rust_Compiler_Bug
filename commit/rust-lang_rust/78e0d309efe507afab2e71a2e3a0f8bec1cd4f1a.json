{"sha": "78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZTBkMzA5ZWZlNTA3YWZhYjJlNzFhMmUzYTBmOGJlYzFjZDRmMWE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T18:48:59Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T19:07:45Z"}, "message": "Avoid early return after handles are removed", "tree": {"sha": "852fc30962c0c5af1bab237a2d7b390573bbf9de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/852fc30962c0c5af1bab237a2d7b390573bbf9de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a", "html_url": "https://github.com/rust-lang/rust/commit/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a05c04c857538a60cd006455686124162f736dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a05c04c857538a60cd006455686124162f736dc", "html_url": "https://github.com/rust-lang/rust/commit/5a05c04c857538a60cd006455686124162f736dc"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "49ad06e0dffcd3f13a7925e652f00c968dd5c685", "filename": "src/shims/io.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a", "patch": "@@ -1,6 +1,6 @@\n use std::collections::HashMap;\n-use std::fs::{ File, OpenOptions };\n-use std::io::{ Read, Write };\n+use std::fs::{File, OpenOptions};\n+use std::io::{Read, Write};\n \n use rustc::ty::layout::Size;\n \n@@ -130,10 +130,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n-        this.remove_handle_and(\n-            fd,\n-            |handle, this| this.consume_result(handle.file.sync_all().map(|_| 0i32)),\n-        )\n+        this.remove_handle_and(fd, |handle, this| {\n+            this.consume_result(handle.file.sync_all().map(|_| 0i32))\n+        })\n     }\n \n     fn read(\n@@ -155,22 +154,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n         // Remove the file handle to avoid borrowing issues\n-        this.remove_handle_and(\n-            fd,\n-            |mut handle, this| {\n-                let bytes = handle\n-                    .file\n-                    .read(this.memory_mut().get_mut(buf.alloc_id)?.get_bytes_mut(\n-                        tcx,\n-                        buf,\n-                        Size::from_bytes(count),\n-                    )?)\n-                    .map(|bytes| bytes as i64);\n-                // Reinsert the file handle\n-                this.machine.file_handler.handles.insert(fd, handle);\n-                this.consume_result(bytes)\n-            },\n-        )\n+        this.remove_handle_and(fd, |mut handle, this| {\n+            // Don't use `?` to avoid returning before reinserting the handle\n+            let bytes = this\n+                .memory_mut()\n+                .get_mut(buf.alloc_id).and_then(|alloc|\n+                    alloc.get_bytes_mut(tcx, buf, Size::from_bytes(count))\n+                    .map(|buffer| handle.file.read(buffer).map(|bytes| bytes as i64))\n+                );\n+            // Reinsert the file handle\n+            this.machine.file_handler.handles.insert(fd, handle);\n+            this.consume_result(bytes?)\n+        })\n     }\n \n     fn write(\n@@ -191,13 +186,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n-        // `to_vec` is needed to avoid borrowing issues when writing to the file.\n-        let bytes = this.memory().get(buf.alloc_id)?.get_bytes(tcx, buf, Size::from_bytes(count))?.to_vec();\n-\n         this.remove_handle_and(fd, |mut handle, this| {\n-            let bytes = handle.file.write(&bytes).map(|bytes| bytes as i64);\n+            let bytes = this.memory().get(buf.alloc_id).and_then(|alloc| {\n+                alloc\n+                    .get_bytes(tcx, buf, Size::from_bytes(count))\n+                    .map(|bytes| handle.file.write(bytes).map(|bytes| bytes as i64))\n+            });\n             this.machine.file_handler.handles.insert(fd, handle);\n-            this.consume_result(bytes)\n+            this.consume_result(bytes?)\n         })\n     }\n \n@@ -251,7 +247,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n     /// functions return different integer types (like `read`, that returns an `i64`)\n-    fn consume_result<T: From<i32>>(&mut self, result: std::io::Result<T>) -> InterpResult<'tcx, T> {\n+    fn consume_result<T: From<i32>>(\n+        &mut self,\n+        result: std::io::Result<T>,\n+    ) -> InterpResult<'tcx, T> {\n         match result {\n             Ok(ok) => Ok(ok),\n             Err(e) => {"}]}