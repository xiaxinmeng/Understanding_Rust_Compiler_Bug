{"sha": "88e9af0375ba31d91523143b45088f5a481cb76e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZTlhZjAzNzViYTMxZDkxNTIzMTQzYjQ1MDg4ZjVhNDgxY2I3NmU=", "commit": {"author": {"name": "Felix Rabe", "email": "felix@rabe.io", "date": "2018-07-15T17:10:47Z"}, "committer": {"name": "Felix Rabe", "email": "felix@rabe.io", "date": "2018-07-17T12:10:11Z"}, "message": "Fix doc link\n\nThe link for comparison:\n\n-   https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized (broken)\n\n-   https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized (fixed)\n\nThis commit is the result of (first) searching via:\n\n    find src -type f -print0 | xargs -0 fgrep -l dynamically-sized-types--sized\n\nand then replacing all relevant occurrences via:\n\n    find src/{libcore,test/ui} -type f -print0 | xargs -0 sed -i.bak \\\n      s/dynamically-sized-types--sized/dynamically-sized-types-and-sized/g\n    find src/{libcore,test/ui} -type f -name '*.bak' -print0 | xargs -0 rm\n\n(Note: Commands run on macOS 10.13 (BSD).  `sed -i.bak` should work on\nGNU/Linux as well, but not tested.)", "tree": {"sha": "e0e16be6f8f397000357f40f68a7ded5e9ec4233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e16be6f8f397000357f40f68a7ded5e9ec4233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e9af0375ba31d91523143b45088f5a481cb76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e9af0375ba31d91523143b45088f5a481cb76e", "html_url": "https://github.com/rust-lang/rust/commit/88e9af0375ba31d91523143b45088f5a481cb76e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e9af0375ba31d91523143b45088f5a481cb76e/comments", "author": {"login": "felixrabe", "id": 400795, "node_id": "MDQ6VXNlcjQwMDc5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/400795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixrabe", "html_url": "https://github.com/felixrabe", "followers_url": "https://api.github.com/users/felixrabe/followers", "following_url": "https://api.github.com/users/felixrabe/following{/other_user}", "gists_url": "https://api.github.com/users/felixrabe/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixrabe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixrabe/subscriptions", "organizations_url": "https://api.github.com/users/felixrabe/orgs", "repos_url": "https://api.github.com/users/felixrabe/repos", "events_url": "https://api.github.com/users/felixrabe/events{/privacy}", "received_events_url": "https://api.github.com/users/felixrabe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "felixrabe", "id": 400795, "node_id": "MDQ6VXNlcjQwMDc5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/400795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixrabe", "html_url": "https://github.com/felixrabe", "followers_url": "https://api.github.com/users/felixrabe/followers", "following_url": "https://api.github.com/users/felixrabe/following{/other_user}", "gists_url": "https://api.github.com/users/felixrabe/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixrabe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixrabe/subscriptions", "organizations_url": "https://api.github.com/users/felixrabe/orgs", "repos_url": "https://api.github.com/users/felixrabe/repos", "events_url": "https://api.github.com/users/felixrabe/events{/privacy}", "received_events_url": "https://api.github.com/users/felixrabe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0", "html_url": "https://github.com/rust-lang/rust/commit/2ddc0cbd56ff1695f24b4f5daa14642bd21e4af0"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "4f37b462583d12b42717b58970700e03888c427f", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -95,7 +95,7 @@ impl<T: ?Sized> !Send for *mut T { }\n     message=\"the size for values of type `{Self}` cannot be known at compilation time\",\n     label=\"doesn't have a size known at compile-time\",\n     note=\"to learn more, visit <https://doc.rust-lang.org/book/second-edition/\\\n-          ch19-04-advanced-types.html#dynamically-sized-types--sized>\",\n+          ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\",\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n pub trait Sized {"}, {"sha": "4103ea02f2eaad6e096a978ceda9d0f2593b09f6", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: constant expressions must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -15,7 +15,7 @@ LL | const CONST_FOO: str = *\"foo\";\n    |                        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: constant expressions must have a statically known size\n \n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n@@ -25,7 +25,7 @@ LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: constant expressions must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -35,7 +35,7 @@ LL | static STATIC_BAR: str = *\"bar\";\n    |                          ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: constant expressions must have a statically known size\n \n error: aborting due to 4 previous errors"}, {"sha": "3f934b60f06bbfbaddcdc7410abbd85e56c0f96f", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL | fn f(p: Path) { }\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n "}, {"sha": "02b2f99d99277515d4460a02e6e8406984d4b5e8", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -94,7 +94,7 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n@@ -107,7 +107,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n@@ -121,7 +121,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n "}, {"sha": "953268ec30ff9d1b05c2b6bcded9efa6b4329098", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -9,7 +9,7 @@ LL | |    };\n    | |____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: the yield type of a generator must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -19,7 +19,7 @@ LL |    unsafe { gen.resume(); }\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ff61ef0bde3445170f23b25b32ce648792aff6d4", "filename": "src/test/ui/issue-14366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-14366.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     let _x = \"test\" as &::std::any::Any;\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required for the cast to the object type `dyn std::any::Any`\n \n error: aborting due to previous error"}, {"sha": "cea201816ec810bc140595ad6770c5f4cf690bff", "filename": "src/test/ui/issue-15756.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-15756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-15756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-15756.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     &mut something\n    |          ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: all local variables must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "7b7e5b5f07ed707678656a7baaee82a69bbd5d45", "filename": "src/test/ui/issue-17651.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17651.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |         ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required by `<std::boxed::Box<T>>::new`\n \n error: aborting due to previous error"}, {"sha": "6fa9fb6f0165f68fa342e23f5f5d660084f2b168", "filename": "src/test/ui/issue-18107.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-18107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-18107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18107.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     AbstractRenderer\n    |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn AbstractRenderer + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "f9a098ba29034658e9ea62b153ef3725e0f98286", "filename": "src/test/ui/issue-18919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18919.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -7,7 +7,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required by `std::option::Option`\n \n error: aborting due to previous error"}, {"sha": "645dcb1a9dc07c4e76df23be1afbffd244498b96", "filename": "src/test/ui/issue-20005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20005.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -9,7 +9,7 @@ LL | |     }\n    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n note: required by `From`\n   --> $DIR/issue-20005.rs:11:1"}, {"sha": "5e8bf2858bf342bdadf0e8909bf79539d1f6136f", "filename": "src/test/ui/issue-20433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20433.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     fn iceman(c: Vec<[i32]>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required by `std::vec::Vec`\n \n error: aborting due to previous error"}, {"sha": "e85ea873e680ecbdb278ea7a3511ab255530a6f7", "filename": "src/test/ui/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20605.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item=&mut u8>`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error: aborting due to previous error"}, {"sha": "a8144dc6dad92eeacf356e8fe5c8deb3e8bdfe63", "filename": "src/test/ui/issue-22874.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-22874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-22874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22874.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     rows: [[String]],\n    |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::string::String]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "c7391ad8b5fa655009c60eda1e01746c7f0b9b3e", "filename": "src/test/ui/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23281.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn function(funs: Vec<Fn() -> ()>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required by `std::vec::Vec`\n \n error: aborting due to previous error"}, {"sha": "8614fc647dd30b98c613af61741b9e4cb8373722", "filename": "src/test/ui/issue-24446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24446.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -24,7 +24,7 @@ LL | |     };\n    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() -> u32 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: constant expressions must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "7961b1720f32989f4a7627657c1dd4ac203e0433", "filename": "src/test/ui/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27060-2.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     data: T, //~ ERROR the size for values of type\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n "}, {"sha": "dcfd82fec0bef52fffed4561df2c2ae525a72488", "filename": "src/test/ui/issue-27078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27078.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n "}, {"sha": "38a9409b6a0ab89511d4db92ad474febe46093f1", "filename": "src/test/ui/issue-35988.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-35988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-35988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35988.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     V([Box<E>]),\n    |       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::boxed::Box<E>]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error: aborting due to previous error"}, {"sha": "714ab00b00c7879a559d580ef3eab8effd5a4740", "filename": "src/test/ui/issue-38954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38954.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL | fn _test(ref _p: str) {}\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n \n error: aborting due to previous error\n "}, {"sha": "d8933a3dfab124f52465fc025f7bd1887de6a235", "filename": "src/test/ui/issue-41229-ref-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41229-ref-str.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL | pub fn example(ref s: str) {}\n    |                            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n \n error: aborting due to previous error\n "}, {"sha": "8c7d5d8828ff9eef5a18ed52ffe67f7b5d6b2478", "filename": "src/test/ui/issue-42312.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42312.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |                             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where <Self as std::ops::Deref>::Target: std::marker::Sized` bound\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n@@ -15,7 +15,7 @@ LL | pub fn f(_: ToString) {}\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8dfeaa7f8889124c83a529f594e565c87071646b", "filename": "src/test/ui/issue-5883.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-5883.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL | fn new_struct(r: A+'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: all local variables must have a statically known size\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n@@ -15,7 +15,7 @@ LL |     -> Struct { //~^ ERROR the size for values of type\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Struct`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required because it appears within the type `Struct`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "d3b9adeff406f889ac1a5f266d1932a27965e02e", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -223,7 +223,7 @@ LL |     let _ = fat_v as *const Foo; //~ ERROR the size for values of type\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -233,7 +233,7 @@ LL |     let _ = a as *const Foo; //~ ERROR the size for values of type\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid"}, {"sha": "21c0a620f69311acf0a9cfd33dd1dbf2979ddf68", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: all local variables must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "7a774cab38e40231e5d64c9707eca8ab1ac1b7c4", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -28,7 +28,7 @@ LL |   let v = s[..2];\n    |       doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: all local variables must have a statically known size\n \n error[E0308]: mismatched types"}, {"sha": "f50644042bbd058a29dd2ce81114b3a795de2dc4", "filename": "src/test/ui/trait-suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     mem::size_of::<U>();\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required by `std::mem::size_of`\n \n@@ -16,7 +16,7 @@ LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required because it appears within the type `Misc<U>`\n    = note: required by `std::mem::size_of`\n@@ -54,7 +54,7 @@ LL |     mem::size_of::<[T]>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required by `std::mem::size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n@@ -64,7 +64,7 @@ LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[&U]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required by `std::mem::size_of`\n \n error: aborting due to 7 previous errors"}, {"sha": "5510b9f2874e3fbf378a2ad62dc3405d6d08a3a3", "filename": "src/test/ui/trivial-bounds-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL | fn cant_return_str() -> str { //~ ERROR\n    |                         ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: the return type of a function must have a statically known size\n \n error[E0599]: no method named `test` found for type `i32` in the current scope"}, {"sha": "75a6542fe23afc013d1efbde6c33677e34927bfc", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n "}, {"sha": "bd97978ea64b23fc8df106e09481589d48b24167", "filename": "src/test/ui/unsized-enum2.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9af0375ba31d91523143b45088f5a481cb76e/src%2Ftest%2Fui%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.stderr?ref=88e9af0375ba31d91523143b45088f5a481cb76e", "patch": "@@ -5,7 +5,7 @@ LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     VB{x: X},\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -38,7 +38,7 @@ LL |     VD{u: isize, x: Z},\n    |                  ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -49,7 +49,7 @@ LL |     VE([u8]),\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -59,7 +59,7 @@ LL |     VF{x: str},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n@@ -69,7 +69,7 @@ LL |     VG(isize, [f32]),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n@@ -79,7 +79,7 @@ LL |     VH{u: isize, x: [u32]},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n@@ -89,7 +89,7 @@ LL |     VM(Foo),\n    |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn Bar + 'static)` cannot be known at compilation time\n@@ -99,7 +99,7 @@ LL |     VN{x: Bar},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n@@ -109,7 +109,7 @@ LL |     VO(isize, FooBar),\n    |               ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n@@ -119,7 +119,7 @@ LL |     VP{u: isize, x: BarFoo},\n    |                  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[i8]` cannot be known at compilation time\n@@ -129,7 +129,7 @@ LL |     VQ(<&'static [i8] as Deref>::Target),\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[char]` cannot be known at compilation time\n@@ -139,7 +139,7 @@ LL |     VR{x: <&'static [char] as Deref>::Target},\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[f64]` cannot be known at compilation time\n@@ -149,7 +149,7 @@ LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n@@ -159,7 +159,7 @@ LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n@@ -169,7 +169,7 @@ LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -180,7 +180,7 @@ LL |     VJ{x: Path2},\n    |        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -191,7 +191,7 @@ LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -202,7 +202,7 @@ LL |     VL{u: isize, x: Path4},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-sized>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type\n "}]}