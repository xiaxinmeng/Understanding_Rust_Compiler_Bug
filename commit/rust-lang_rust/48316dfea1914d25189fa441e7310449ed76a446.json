{"sha": "48316dfea1914d25189fa441e7310449ed76a446", "node_id": "C_kwDOAAsO6NoAKDQ4MzE2ZGZlYTE5MTRkMjUxODlmYTQ0MWU3MzEwNDQ5ZWQ3NmE0NDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-28T01:11:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-28T01:11:10Z"}, "message": "Auto merge of #99182 - RalfJung:mitigate-uninit, r=scottmcm\n\nmem::uninitialized: mitigate many incorrect uses of this function\n\nAlternative to https://github.com/rust-lang/rust/pull/98966: fill memory with `0x01` rather than leaving it uninit. This is definitely bitewise valid for all `bool` and nonnull types, and also those `Option<&T>` that we started putting `noundef` on. However it is still invalid for `char` and some enums, and on references the `dereferenceable` attribute is still violated, so the generated LLVM IR still has UB -- but in fewer cases, and `dereferenceable` is hopefully less likely to cause problems than clearly incorrect range annotations.\n\nThis can make using `mem::uninitialized` a lot slower, but that function has been deprecated for years and we keep telling everyone to move to `MaybeUninit` because it is basically impossible to use `mem::uninitialized` correctly. For the cases where that hasn't helped (and all the old code out there that nobody will ever update), we can at least mitigate the effect of using this API. Note that this is *not* in any way a stable guarantee -- it is still UB to call `mem::uninitialized::<bool>()`, and Miri will call it out as such.\n\nThis is somewhat similar to https://github.com/rust-lang/rust/pull/87032, which proposed to make `uninitialized` return a buffer filled with 0x00. However\n- That PR also proposed to reduce the situations in which we panic, which I don't think we should do at this time.\n- The 0x01 bit pattern means that nonnull requirements are satisfied, which (due to references) is the most common validity invariant.\n\n`@5225225` I hope I am using `cfg(sanitize)` the right way; I was not sure for which ones to test here.\nCc https://github.com/rust-lang/rust/issues/66151\nFixes https://github.com/rust-lang/rust/issues/87675", "tree": {"sha": "e2f3111e4059b72bb6dc6a087f083916affc6bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2f3111e4059b72bb6dc6a087f083916affc6bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48316dfea1914d25189fa441e7310449ed76a446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48316dfea1914d25189fa441e7310449ed76a446", "html_url": "https://github.com/rust-lang/rust/commit/48316dfea1914d25189fa441e7310449ed76a446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48316dfea1914d25189fa441e7310449ed76a446/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada80a13b97a01176a1660453060e296a72cf1bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada80a13b97a01176a1660453060e296a72cf1bb", "html_url": "https://github.com/rust-lang/rust/commit/ada80a13b97a01176a1660453060e296a72cf1bb"}, {"sha": "7b4149474b2fdf8b30cb99fdd17303b94746ebce", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4149474b2fdf8b30cb99fdd17303b94746ebce", "html_url": "https://github.com/rust-lang/rust/commit/7b4149474b2fdf8b30cb99fdd17303b94746ebce"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "24742bb49b9a5ec82996388639b70b98369f4908", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48316dfea1914d25189fa441e7310449ed76a446/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48316dfea1914d25189fa441e7310449ed76a446/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=48316dfea1914d25189fa441e7310449ed76a446", "patch": "@@ -164,6 +164,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n+#![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]\n #![feature(const_fn_floating_point_arithmetic)]"}, {"sha": "6351e6fbd13748536f0680dccc6efab24daba8f3", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48316dfea1914d25189fa441e7310449ed76a446/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48316dfea1914d25189fa441e7310449ed76a446/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=48316dfea1914d25189fa441e7310449ed76a446", "patch": "@@ -654,6 +654,8 @@ pub unsafe fn zeroed<T>() -> T {\n /// produce a value of type `T`, while doing nothing at all.\n ///\n /// **This function is deprecated.** Use [`MaybeUninit<T>`] instead.\n+/// It also might be slower than using `MaybeUninit<T>` due to mitigations that were put in place to\n+/// limit the potential harm caused by incorrect use of this function in legacy code.\n ///\n /// The reason for deprecation is that the function basically cannot be used\n /// correctly: it has the same effect as [`MaybeUninit::uninit().assume_init()`][uninit].\n@@ -683,7 +685,15 @@ pub unsafe fn uninitialized<T>() -> T {\n     // SAFETY: the caller must guarantee that an uninitialized value is valid for `T`.\n     unsafe {\n         intrinsics::assert_uninit_valid::<T>();\n-        MaybeUninit::uninit().assume_init()\n+        let mut val = MaybeUninit::<T>::uninit();\n+\n+        // Fill memory with 0x01, as an imperfect mitigation for old code that uses this function on\n+        // bool, nonnull, and noundef types. But don't do this if we actively want to detect UB.\n+        if !cfg!(any(miri, sanitize = \"memory\")) {\n+            val.as_mut_ptr().write_bytes(0x01, 1);\n+        }\n+\n+        val.assume_init()\n     }\n }\n "}]}