{"sha": "1b81f08d4cc817548f0b503f33c8b665455d60a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiODFmMDhkNGNjODE3NTQ4ZjBiNTAzZjMzYzhiNjY1NDU1ZDYwYTY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-13T02:05:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-13T02:05:36Z"}, "message": "Rollup merge of #79940 - matthiaskrgr:cl15ppy, r=Dylan-DPC\n\nfix more clippy::complexity findings\n\nfix clippy::unnecessary_filter_map\nuse if let Some(x) = ..  instead of ...map(|x|) to conditionally run fns that return () (clippy::option_map_unit_fn)\nfix clippy::{needless_bool, manual_unwrap_or}\ndon't clone types that are copy (clippy::clone_on_copy)\ndon't convert types into identical types with .into() (clippy::useless_conversion)\nuse strip_prefix over slicing (clippy::manual_strip)\n\nr? ``@Dylan-DPC``", "tree": {"sha": "9bb0dbecafcdd4a2ab298161e946fa4d8e46887d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb0dbecafcdd4a2ab298161e946fa4d8e46887d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b81f08d4cc817548f0b503f33c8b665455d60a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf1XbxCRBK7hj4Ov3rIwAAdHIIAIh6W6KmwfsDU3tGT/U263nA\nI+rOxV+GDQA8zEIoRy9eu26ShHxvLlh68tSJbuJq9p1Hz7eZMsnHngNilRzVcGqr\ntKts3S6Nfc2fkV0FIdOhw9GJ+LuA/tvdg0gP5Jp5gb0aJVOtTbpkYbFbwchUMrhi\nj2PgJbzmEFe5vUeoS/uQEqOMm4ijPmKbT8WcAzi/0ZGY+yLinGA6m9TVd8p4rMen\nYMWx7eALSd79fg7Sw56UMlRBRpXWFX72sRF7w7HEyHF7zf16osuziv2r2sLG5njE\n+Lp4z5BX7Z8p2yPJjEG+tRkt+WXGmqXhu52zHtILcNV7+m1OZU5Rkjewgyj2gTU=\n=jkML\n-----END PGP SIGNATURE-----\n", "payload": "tree 9bb0dbecafcdd4a2ab298161e946fa4d8e46887d\nparent f80c6aeb87abdf79e370de012a56245cbb91f6b9\nparent cf10a0abf23850018b32ed9a15b1bce6a1e71c93\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1607825136 +0900\ncommitter GitHub <noreply@github.com> 1607825136 +0900\n\nRollup merge of #79940 - matthiaskrgr:cl15ppy, r=Dylan-DPC\n\nfix more clippy::complexity findings\n\nfix clippy::unnecessary_filter_map\nuse if let Some(x) = ..  instead of ...map(|x|) to conditionally run fns that return () (clippy::option_map_unit_fn)\nfix clippy::{needless_bool, manual_unwrap_or}\ndon't clone types that are copy (clippy::clone_on_copy)\ndon't convert types into identical types with .into() (clippy::useless_conversion)\nuse strip_prefix over slicing (clippy::manual_strip)\n\nr? ``@Dylan-DPC``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b81f08d4cc817548f0b503f33c8b665455d60a6", "html_url": "https://github.com/rust-lang/rust/commit/1b81f08d4cc817548f0b503f33c8b665455d60a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b81f08d4cc817548f0b503f33c8b665455d60a6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f80c6aeb87abdf79e370de012a56245cbb91f6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f80c6aeb87abdf79e370de012a56245cbb91f6b9", "html_url": "https://github.com/rust-lang/rust/commit/f80c6aeb87abdf79e370de012a56245cbb91f6b9"}, {"sha": "cf10a0abf23850018b32ed9a15b1bce6a1e71c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf10a0abf23850018b32ed9a15b1bce6a1e71c93", "html_url": "https://github.com/rust-lang/rust/commit/cf10a0abf23850018b32ed9a15b1bce6a1e71c93"}], "stats": {"total": 156, "additions": 70, "deletions": 86}, "files": [{"sha": "68c11868af8885e65c8dc16af5fd04f7d07b113d", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -597,10 +597,7 @@ impl<'a> TraitDef<'a> {\n \n             let mut ty_params = params\n                 .iter()\n-                .filter_map(|param| match param.kind {\n-                    ast::GenericParamKind::Type { .. } => Some(param),\n-                    _ => None,\n-                })\n+                .filter(|param| matches!(param.kind,  ast::GenericParamKind::Type{..}))\n                 .peekable();\n \n             if ty_params.peek().is_some() {"}, {"sha": "bf0d499e6c4919b433095c08e9e41dc716301c9f", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -854,8 +854,8 @@ fn generic_simd_intrinsic(\n         ));\n     }\n \n-    if name_str.starts_with(\"simd_shuffle\") {\n-        let n: u64 = name_str[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_| {\n+    if let Some(stripped) = name_str.strip_prefix(\"simd_shuffle\") {\n+        let n: u64 = stripped.parse().unwrap_or_else(|_| {\n             span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n         });\n "}, {"sha": "621363bed80e1ea2c989a6580da34ee1c82c66a6", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -201,10 +201,10 @@ fn main() {\n     cmd.args(&components);\n \n     for lib in output(&mut cmd).split_whitespace() {\n-        let name = if lib.starts_with(\"-l\") {\n-            &lib[2..]\n-        } else if lib.starts_with('-') {\n-            &lib[1..]\n+        let name = if let Some(stripped) = lib.strip_prefix(\"-l\") {\n+            stripped\n+        } else if let Some(stripped) = lib.strip_prefix('-') {\n+            stripped\n         } else if Path::new(lib).exists() {\n             // On MSVC llvm-config will print the full name to libraries, but\n             // we're only interested in the name part\n@@ -241,17 +241,17 @@ fn main() {\n     cmd.arg(llvm_link_arg).arg(\"--ldflags\");\n     for lib in output(&mut cmd).split_whitespace() {\n         if is_crossed {\n-            if lib.starts_with(\"-LIBPATH:\") {\n-                println!(\"cargo:rustc-link-search=native={}\", lib[9..].replace(&host, &target));\n-            } else if lib.starts_with(\"-L\") {\n-                println!(\"cargo:rustc-link-search=native={}\", lib[2..].replace(&host, &target));\n+            if let Some(stripped) = lib.strip_prefix(\"-LIBPATH:\") {\n+                println!(\"cargo:rustc-link-search=native={}\", stripped.replace(&host, &target));\n+            } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n+                println!(\"cargo:rustc-link-search=native={}\", stripped.replace(&host, &target));\n             }\n-        } else if lib.starts_with(\"-LIBPATH:\") {\n-            println!(\"cargo:rustc-link-search=native={}\", &lib[9..]);\n-        } else if lib.starts_with(\"-l\") {\n-            println!(\"cargo:rustc-link-lib={}\", &lib[2..]);\n-        } else if lib.starts_with(\"-L\") {\n-            println!(\"cargo:rustc-link-search=native={}\", &lib[2..]);\n+        } else if let Some(stripped) = lib.strip_prefix(\"-LIBPATH:\") {\n+            println!(\"cargo:rustc-link-search=native={}\", stripped);\n+        } else if let Some(stripped) = lib.strip_prefix(\"-l\") {\n+            println!(\"cargo:rustc-link-lib={}\", stripped);\n+        } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n+            println!(\"cargo:rustc-link-search=native={}\", stripped);\n         }\n     }\n \n@@ -262,10 +262,10 @@ fn main() {\n     let llvm_linker_flags = tracked_env_var_os(\"LLVM_LINKER_FLAGS\");\n     if let Some(s) = llvm_linker_flags {\n         for lib in s.into_string().unwrap().split_whitespace() {\n-            if lib.starts_with(\"-l\") {\n-                println!(\"cargo:rustc-link-lib={}\", &lib[2..]);\n-            } else if lib.starts_with(\"-L\") {\n-                println!(\"cargo:rustc-link-search=native={}\", &lib[2..]);\n+            if let Some(stripped) = lib.strip_prefix(\"-l\") {\n+                println!(\"cargo:rustc-link-lib={}\", stripped);\n+            } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n+                println!(\"cargo:rustc-link-search=native={}\", stripped);\n             }\n         }\n     }"}, {"sha": "b66e37436a663bfe0a8f161803a95968836f588d", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -285,7 +285,7 @@ impl DebugCounters {\n                 ),\n             };\n             counters\n-                .insert(id.into(), DebugCounter::new(counter_kind.clone(), some_block_label))\n+                .insert(id, DebugCounter::new(counter_kind.clone(), some_block_label))\n                 .expect_none(\n                     \"attempt to add the same counter_kind to DebugCounters more than once\",\n                 );\n@@ -340,7 +340,7 @@ impl DebugCounters {\n         if self.some_counters.is_some() && (counter_format.block || !counter_format.id) {\n             let counters = self.some_counters.as_ref().unwrap();\n             if let Some(DebugCounter { some_block_label: Some(block_label), .. }) =\n-                counters.get(&id.into())\n+                counters.get(&id)\n             {\n                 return if counter_format.id {\n                     format!(\"{}#{}\", block_label, id.index())"}, {"sha": "6fbcc140978a7039e7886a0d3730dd3fbaa74041", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -216,9 +216,10 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n         let discr = self.find_switch_discriminant_info(bb, switch)?;\n \n         // go through each target, finding a discriminant read, and a switch\n-        let results = discr.targets_with_values.iter().map(|(value, target)| {\n-            self.find_discriminant_switch_pairing(&discr, target.clone(), value.clone())\n-        });\n+        let results = discr\n+            .targets_with_values\n+            .iter()\n+            .map(|(value, target)| self.find_discriminant_switch_pairing(&discr, *target, *value));\n \n         // if the optimization did not apply for one of the targets, then abort\n         if results.clone().any(|x| x.is_none()) || results.len() == 0 {"}, {"sha": "0edd44d4bf1eb9d3c7df00bc6981440b474e0968", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -616,8 +616,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n                 self.block_context.push(BlockFrame::SubExpr);\n                 unpack!(block = self.into(destination, dest_scope, block, value));\n-                dest_scope\n-                    .map(|scope| self.unschedule_drop(scope, destination.as_local().unwrap()));\n+                if let Some(scope) = dest_scope {\n+                    self.unschedule_drop(scope, destination.as_local().unwrap())\n+                };\n                 self.block_context.pop();\n             } else {\n                 self.cfg.push_assign_unit(block, source_info, destination, self.hir.tcx())"}, {"sha": "75faab12e3e127bfca1823c6a6e1a20261861191", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -1109,10 +1109,7 @@ impl Session {\n     }\n \n     pub fn link_dead_code(&self) -> bool {\n-        match self.opts.cg.link_dead_code {\n-            Some(explicitly_set) => explicitly_set,\n-            None => false,\n-        }\n+        self.opts.cg.link_dead_code.unwrap_or(false)\n     }\n \n     pub fn mark_attr_known(&self, attr: &Attribute) {"}, {"sha": "5c185dc4a9f1aa24b4ca10f3c0b26e1d32e03f3d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -1448,31 +1448,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             });\n         };\n \n-        typeck_results\n+        if let Some(cause) = typeck_results\n             .generator_interior_types\n             .iter()\n             .find(|ty::GeneratorInteriorTypeCause { ty, .. }| ty_matches(ty))\n-            .map(|cause| {\n-                // Check to see if any awaited expressions have the target type.\n-                let from_awaited_ty = visitor\n-                    .awaits\n-                    .into_iter()\n-                    .map(|id| hir.expect_expr(id))\n-                    .find(|await_expr| {\n-                        let ty = typeck_results.expr_ty_adjusted(&await_expr);\n-                        debug!(\n-                            \"maybe_note_obligation_cause_for_async_await: await_expr={:?}\",\n-                            await_expr\n-                        );\n-                        ty_matches(ty)\n-                    })\n-                    .map(|expr| expr.span);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n-                    cause;\n+        {\n+            // Check to see if any awaited expressions have the target type.\n+            let from_awaited_ty = visitor\n+                .awaits\n+                .into_iter()\n+                .map(|id| hir.expect_expr(id))\n+                .find(|await_expr| {\n+                    let ty = typeck_results.expr_ty_adjusted(&await_expr);\n+                    debug!(\n+                        \"maybe_note_obligation_cause_for_async_await: await_expr={:?}\",\n+                        await_expr\n+                    );\n+                    ty_matches(ty)\n+                })\n+                .map(|expr| expr.span);\n+            let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } = cause;\n \n-                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n-                interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n-            });\n+            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n+            interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n+        };\n \n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: interior_or_upvar={:?} \\"}, {"sha": "ed22d5849e2b1d4e30944cccb3f25b3cf9c80909", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -447,7 +447,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 nested.push(Obligation::new(\n                     obligation.cause.clone(),\n-                    obligation.param_env.clone(),\n+                    obligation.param_env,\n                     normalized_super_trait,\n                 ));\n             }\n@@ -485,7 +485,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 nested.push(Obligation::new(\n                     obligation.cause.clone(),\n-                    obligation.param_env.clone(),\n+                    obligation.param_env,\n                     normalized_bound,\n                 ));\n             }"}, {"sha": "0f084c5c11f399ce2badd708da29eb2fa3f62f24", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -294,17 +294,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     closure_captures.insert(*var_hir_id, upvar_id);\n \n-                    let new_capture_kind = if let Some(capture_kind) =\n-                        upvar_capture_map.get(&upvar_id)\n-                    {\n-                        // upvar_capture_map only stores the UpvarCapture (CaptureKind),\n-                        // so we create a fake capture info with no expression.\n-                        let fake_capture_info =\n-                            ty::CaptureInfo { expr_id: None, capture_kind: capture_kind.clone() };\n-                        determine_capture_info(fake_capture_info, capture_info).capture_kind\n-                    } else {\n-                        capture_info.capture_kind\n-                    };\n+                    let new_capture_kind =\n+                        if let Some(capture_kind) = upvar_capture_map.get(&upvar_id) {\n+                            // upvar_capture_map only stores the UpvarCapture (CaptureKind),\n+                            // so we create a fake capture info with no expression.\n+                            let fake_capture_info =\n+                                ty::CaptureInfo { expr_id: None, capture_kind: *capture_kind };\n+                            determine_capture_info(fake_capture_info, capture_info).capture_kind\n+                        } else {\n+                            capture_info.capture_kind\n+                        };\n                     upvar_capture_map.insert(upvar_id, new_capture_kind);\n                 }\n             }"}, {"sha": "c70554cc6272580d144d3e701ef2d7a771b53d33", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -2141,13 +2141,8 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             // * It must be an associated type for this trait (*not* a\n             //   supertrait).\n             if let ty::Projection(projection) = ty.kind() {\n-                if projection.substs == trait_identity_substs\n+                projection.substs == trait_identity_substs\n                     && tcx.associated_item(projection.item_def_id).container.id() == def_id\n-                {\n-                    true\n-                } else {\n-                    false\n-                }\n             } else {\n                 false\n             }"}, {"sha": "360e51ed2bb2a8886420ade12ccabe61c58feeda", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -1186,7 +1186,7 @@ pub fn sanitize_sh(path: &Path) -> String {\n     return change_drive(unc_to_lfs(&path)).unwrap_or(path);\n \n     fn unc_to_lfs(s: &str) -> &str {\n-        if s.starts_with(\"//?/\") { &s[4..] } else { s }\n+        s.strip_prefix(\"//?/\").unwrap_or(s)\n     }\n \n     fn change_drive(s: &str) -> Option<String> {"}, {"sha": "85b4a73439d906ef4815c120d783139574e18923", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -159,11 +159,7 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        build\n-            .config\n-            .target_config\n-            .entry(target.clone())\n-            .or_insert(Target::from_triple(&target.triple));\n+        build.config.target_config.entry(*target).or_insert(Target::from_triple(&target.triple));\n \n         if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n             if build.no_std(*target) == Some(false) {\n@@ -176,7 +172,7 @@ pub fn check(build: &mut Build) {\n             // If this is a native target (host is also musl) and no musl-root is given,\n             // fall back to the system toolchain in /usr before giving up\n             if build.musl_root(*target).is_none() && build.config.build == *target {\n-                let target = build.config.target_config.entry(target.clone()).or_default();\n+                let target = build.config.target_config.entry(*target).or_default();\n                 target.musl_root = Some(\"/usr\".into());\n             }\n             match build.musl_libdir(*target) {"}, {"sha": "22096203d4ce63855857d297bf173bb4299c6daa", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -139,9 +139,9 @@ fn map_line(s: &str) -> Line<'_> {\n     let trimmed = s.trim();\n     if trimmed.starts_with(\"##\") {\n         Line::Shown(Cow::Owned(s.replacen(\"##\", \"#\", 1)))\n-    } else if trimmed.starts_with(\"# \") {\n+    } else if let Some(stripped) = trimmed.strip_prefix(\"# \") {\n         // # text\n-        Line::Hidden(&trimmed[2..])\n+        Line::Hidden(&stripped)\n     } else if trimmed == \"#\" {\n         // We cannot handle '#text' because it could be #[attr].\n         Line::Hidden(\"\")"}, {"sha": "7358eae6edc907cbc4aa143749f5d70410b3d77e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b81f08d4cc817548f0b503f33c8b665455d60a6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1b81f08d4cc817548f0b503f33c8b665455d60a6", "patch": "@@ -1012,15 +1012,14 @@ impl LinkCollector<'_, '_> {\n         } else {\n             // This is a bug.\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);\n-            let err_kind = ResolutionFailure::NoParentItem.into();\n             resolution_failure(\n                 self,\n                 &item,\n                 path_str,\n                 disambiguator,\n                 dox,\n                 link_range,\n-                smallvec![err_kind],\n+                smallvec![ResolutionFailure::NoParentItem],\n             );\n             return None;\n         };"}]}