{"sha": "a7ecde33238f46ae473ceb63db95068f1ce6cffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZWNkZTMzMjM4ZjQ2YWU0NzNjZWI2M2RiOTUwNjhmMWNlNmNmZmQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-18T16:14:11Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-10-18T17:09:57Z"}, "message": "libcore: minor code cleanup.\n\nThis is minor and probably completely inconsequential to performance,\nbut I find vec::map to be more clear than vec::each and a push.", "tree": {"sha": "957aa88a448120578a5e503c874a9b7fa90e5e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/957aa88a448120578a5e503c874a9b7fa90e5e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7ecde33238f46ae473ceb63db95068f1ce6cffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ecde33238f46ae473ceb63db95068f1ce6cffd", "html_url": "https://github.com/rust-lang/rust/commit/a7ecde33238f46ae473ceb63db95068f1ce6cffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7ecde33238f46ae473ceb63db95068f1ce6cffd/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95423d28f221ac67bad7e7c6396b983705a056ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/95423d28f221ac67bad7e7c6396b983705a056ae", "html_url": "https://github.com/rust-lang/rust/commit/95423d28f221ac67bad7e7c6396b983705a056ae"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "77f7b5023dfa97839cba366780738bbc51b3d750", "filename": "src/libcore/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -119,8 +119,8 @@ impl<T: Reader> T : ReaderUtil {\n             }\n             return (i, 0);\n         }\n-        let mut bytes: ~[u8] = ~[];\n-        let mut chars: ~[char] = ~[];\n+        let mut bytes = ~[];\n+        let mut chars = ~[];\n         // might need more bytes, but reading n will never over-read\n         let mut nbread = n;\n         while nbread > 0 {"}, {"sha": "958d1ac56ea78101e7911f5f542c7b28b90ac6cd", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -32,7 +32,7 @@ pub fn console_off() {\n #[cfg(notest)]\n #[lang=\"log_type\"]\n pub fn log_type<T>(level: u32, object: &T) {\n-    let bytes = do io::with_bytes_writer() |writer| {\n+    let bytes = do io::with_bytes_writer |writer| {\n         repr::write_repr(writer, object);\n     };\n     unsafe {"}, {"sha": "b246adcb1d7cddb6bc0a452c2596239ac80d5fd7", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -559,7 +559,7 @@ impl ReprPrinter {\n         unsafe {\n             self.align(sys::min_align_of::<T>());\n             let value_addr: &T = transmute(copy self.ptr);\n-            (*value_addr).write_repr(self.writer);\n+            value_addr.write_repr(self.writer);\n             self.bump(sys::size_of::<T>());\n             true\n         }"}, {"sha": "4bd1679600ffbe917029aad14cbcfa3c8e47a4b4", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -90,9 +90,7 @@ fn attr_meta(attr: ast::attribute) -> @ast::meta_item { @attr.node.value }\n \n // Get the meta_items from inside a vector of attributes\n fn attr_metas(attrs: ~[ast::attribute]) -> ~[@ast::meta_item] {\n-    let mut mitems = ~[];\n-    for attrs.each |a| { mitems.push(attr_meta(*a)); }\n-    return mitems;\n+    do attrs.map |a| { attr_meta(*a) }\n }\n \n fn desugar_doc_attr(attr: &ast::attribute) -> ast::attribute {"}, {"sha": "45e7cd4e9d45a47496e9e8ea92a04254ea83643f", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -27,8 +27,7 @@ fn declare_upcalls(targ_cfg: @session::config,\n     fn decl(llmod: ModuleRef, prefix: ~str, name: ~str,\n             tys: ~[TypeRef], rv: TypeRef) ->\n        ValueRef {\n-        let mut arg_tys: ~[TypeRef] = ~[];\n-        for tys.each |t| { arg_tys.push(*t); }\n+        let arg_tys = tys.map(|t| *t);\n         let fn_ty = T_fn(arg_tys, rv);\n         return base::decl_cdecl_fn(llmod, prefix + name, fn_ty);\n     }"}, {"sha": "1656efbd9668430bdd675309ce0db5fa19c629d0", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -598,13 +598,12 @@ fn get_enum_variants(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n         let ctor_ty = item_type({crate: cdata.cnum, node: id}, item,\n                                 tcx, cdata);\n         let name = item_name(intr, item);\n-        let mut arg_tys: ~[ty::t] = ~[];\n-        match ty::get(ctor_ty).sty {\n-          ty::ty_fn(f) => {\n-            for f.sig.inputs.each |a| { arg_tys.push(a.ty); }\n-          }\n-          _ => { /* Nullary enum variant. */ }\n-        }\n+        let arg_tys = match ty::get(ctor_ty).sty {\n+          ty::ty_fn(f) => f.sig.inputs.map(|a| a.ty),\n+\n+          // Nullary enum variant.\n+          _ => ~[],\n+        };\n         match variant_disr_val(item) {\n           Some(val) => { disr_val = val; }\n           _         => { /* empty */ }"}, {"sha": "123905adba11b7ffaba7424967a53ebe8a15a408", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -34,9 +34,7 @@ type flag = HashMap<~str, ()>;\n fn field_expr(f: ast::field) -> @ast::expr { return f.node.expr; }\n \n fn field_exprs(fields: ~[ast::field]) -> ~[@ast::expr] {\n-    let mut es = ~[];\n-    for fields.each |f| { es.push(f.node.expr); }\n-    return es;\n+    fields.map(|f| f.node.expr)\n }\n \n // Takes a predicate p, returns true iff p is true for any subexpressions"}, {"sha": "8207082cf20e69d87142b07ad409d52da04b9272", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ecde33238f46ae473ceb63db95068f1ce6cffd/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=a7ecde33238f46ae473ceb63db95068f1ce6cffd", "patch": "@@ -282,8 +282,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n           _ => { }\n         }\n         s += ~\"(\";\n-        let mut strs = ~[];\n-        for inputs.each |a| { strs.push(fn_input_to_str(cx, *a)); }\n+        let strs = inputs.map(|a| fn_input_to_str(cx, *a));\n         s += str::connect(strs, ~\", \");\n         s += ~\")\";\n         if ty::get(output).sty != ty_nil {\n@@ -338,13 +337,11 @@ fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_unboxed_vec(tm) => { ~\"unboxed_vec<\" + mt_to_str(cx, tm) + ~\">\" }\n       ty_type => ~\"type\",\n       ty_rec(elems) => {\n-        let mut strs: ~[~str] = ~[];\n-        for elems.each |fld| { strs.push(field_to_str(cx, *fld)); }\n+        let strs = elems.map(|fld| field_to_str(cx, *fld));\n         ~\"{\" + str::connect(strs, ~\",\") + ~\"}\"\n       }\n       ty_tup(elems) => {\n-        let mut strs = ~[];\n-        for elems.each |elem| { strs.push(ty_to_str(cx, *elem)); }\n+        let strs = elems.map(|elem| ty_to_str(cx, *elem));\n         ~\"(\" + str::connect(strs, ~\",\") + ~\")\"\n       }\n       ty_fn(ref f) => {"}]}