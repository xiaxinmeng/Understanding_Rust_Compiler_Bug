{"sha": "9f447ad522a2e7464d827d5b51cdeb53a90c91f5", "node_id": "C_kwDOAAsO6NoAKDlmNDQ3YWQ1MjJhMmU3NDY0ZDgyN2Q1YjUxY2RlYjUzYTkwYzkxZjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-26T02:59:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-26T02:59:07Z"}, "message": "Merge #10865\n\n10865: internal: Use the right `ItemTree` when re-resolving attr r=jonas-schievink a=jonas-schievink\n\nFollowup to https://github.com/rust-analyzer/rust-analyzer/pull/10863, which caused a panic when analyzing diesel\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "857e302094d9e14180e44143e4045084f5f31576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/857e302094d9e14180e44143e4045084f5f31576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f447ad522a2e7464d827d5b51cdeb53a90c91f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhoE17CRBK7hj4Ov3rIwAA7soIAAcOGqbjv9Tq1NiYjeD+9HFs\nTj+NTDE6VHT+chZW0JPCf7wNbqQ1APYKWSLznpbxMXv1dhijoYSB3SSuampeRp9u\nt6rDMvQaHcxSGU9KIZTF4quhhyZuT+1f5L8uLdqopqKwAbTFVYtYL8KoIH6FOsHe\na70wLRIWm89i5oElGvJSJ9/lVnlAykLfuqKMnJW25LUgdtTysht01IFrqYVKWMfL\nSGqsY0iJk1U6P55AJ1JBmzUIQ15n4+CbJoNpqqcMob096rZovmnFe/nFmu4J32nM\nTZxl+Zn4577ZEywdGcCyhQZzfS770uQz5UokBOiwbuEWK/jv+YHEnpxxEeznQf4=\n=GNfv\n-----END PGP SIGNATURE-----\n", "payload": "tree 857e302094d9e14180e44143e4045084f5f31576\nparent 5ea8a9cd20b57453b7bbbdc5b15530a59fead492\nparent c291e5e2843e2fe2be9c90ce0bc69bd05c620eb1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637895547 +0000\ncommitter GitHub <noreply@github.com> 1637895547 +0000\n\nMerge #10865\n\n10865: internal: Use the right `ItemTree` when re-resolving attr r=jonas-schievink a=jonas-schievink\n\nFollowup to https://github.com/rust-analyzer/rust-analyzer/pull/10863, which caused a panic when analyzing diesel\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f447ad522a2e7464d827d5b51cdeb53a90c91f5", "html_url": "https://github.com/rust-lang/rust/commit/9f447ad522a2e7464d827d5b51cdeb53a90c91f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f447ad522a2e7464d827d5b51cdeb53a90c91f5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea8a9cd20b57453b7bbbdc5b15530a59fead492", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea8a9cd20b57453b7bbbdc5b15530a59fead492", "html_url": "https://github.com/rust-lang/rust/commit/5ea8a9cd20b57453b7bbbdc5b15530a59fead492"}, {"sha": "c291e5e2843e2fe2be9c90ce0bc69bd05c620eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c291e5e2843e2fe2be9c90ce0bc69bd05c620eb1", "html_url": "https://github.com/rust-lang/rust/commit/c291e5e2843e2fe2be9c90ce0bc69bd05c620eb1"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "a0210bc5032b504fbd49f5cc97cf43fd4e8bb70f", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f447ad522a2e7464d827d5b51cdeb53a90c91f5/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f447ad522a2e7464d827d5b51cdeb53a90c91f5/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=9f447ad522a2e7464d827d5b51cdeb53a90c91f5", "patch": "@@ -219,7 +219,7 @@ struct MacroDirective {\n enum MacroDirectiveKind {\n     FnLike { ast_id: AstIdWithPath<ast::MacroCall>, expand_to: ExpandTo },\n     Derive { ast_id: AstIdWithPath<ast::Item>, derive_attr: AttrId },\n-    Attr { ast_id: AstIdWithPath<ast::Item>, attr: Attr, mod_item: ModItem },\n+    Attr { ast_id: AstIdWithPath<ast::Item>, attr: Attr, mod_item: ModItem, tree: TreeId },\n }\n \n /// Walks the tree of module recursively\n@@ -420,17 +420,16 @@ impl DefCollector<'_> {\n \n         let mut unresolved_macros = std::mem::take(&mut self.unresolved_macros);\n         let pos = unresolved_macros.iter().position(|directive| {\n-            if let MacroDirectiveKind::Attr { ast_id, mod_item, attr } = &directive.kind {\n+            if let MacroDirectiveKind::Attr { ast_id, mod_item, attr, tree } = &directive.kind {\n                 self.skip_attrs.insert(ast_id.ast_id.with_value(*mod_item), attr.id);\n \n-                let file_id = ast_id.ast_id.file_id;\n-                let item_tree = self.db.file_item_tree(file_id);\n+                let item_tree = tree.item_tree(self.db);\n                 let mod_dir = self.mod_dirs[&directive.module_id].clone();\n                 ModCollector {\n                     def_collector: self,\n                     macro_depth: directive.depth,\n                     module_id: directive.module_id,\n-                    tree_id: TreeId::new(file_id, None),\n+                    tree_id: *tree,\n                     item_tree: &item_tree,\n                     mod_dir,\n                 }\n@@ -1076,20 +1075,22 @@ impl DefCollector<'_> {\n                         return false;\n                     }\n                 }\n-                MacroDirectiveKind::Attr { ast_id: file_ast_id, mod_item, attr } => {\n+                MacroDirectiveKind::Attr { ast_id: file_ast_id, mod_item, attr, tree } => {\n                     let &AstIdWithPath { ast_id, ref path } = file_ast_id;\n                     let file_id = ast_id.file_id;\n \n-                    let mut recollect_without = |collector: &mut Self, item_tree| {\n+                    let mut recollect_without = |collector: &mut Self| {\n                         // Remove the original directive since we resolved it.\n                         let mod_dir = collector.mod_dirs[&directive.module_id].clone();\n                         collector.skip_attrs.insert(InFile::new(file_id, *mod_item), attr.id);\n+\n+                        let item_tree = tree.item_tree(self.db);\n                         ModCollector {\n                             def_collector: collector,\n                             macro_depth: directive.depth,\n                             module_id: directive.module_id,\n-                            tree_id: TreeId::new(file_id, None),\n-                            item_tree,\n+                            tree_id: *tree,\n+                            item_tree: &item_tree,\n                             mod_dir,\n                         }\n                         .collect(&[*mod_item]);\n@@ -1103,8 +1104,7 @@ impl DefCollector<'_> {\n                                 cov_mark::hit!(resolved_derive_helper);\n                                 // Resolved to derive helper. Collect the item's attributes again,\n                                 // starting after the derive helper.\n-                                let item_tree = self.db.file_item_tree(file_id);\n-                                return recollect_without(self, &item_tree);\n+                                return recollect_without(self);\n                             }\n                         }\n                     }\n@@ -1116,7 +1116,6 @@ impl DefCollector<'_> {\n                         if expander.is_derive()\n                     ) {\n                         // Resolved to `#[derive]`\n-                        let item_tree = self.db.file_item_tree(file_id);\n \n                         match mod_item {\n                             ModItem::Struct(_) | ModItem::Union(_) | ModItem::Enum(_) => (),\n@@ -1127,7 +1126,7 @@ impl DefCollector<'_> {\n                                     attr.id,\n                                 );\n                                 self.def_map.diagnostics.push(diag);\n-                                return recollect_without(self, &item_tree);\n+                                return recollect_without(self);\n                             }\n                         }\n \n@@ -1155,7 +1154,7 @@ impl DefCollector<'_> {\n                             }\n                         }\n \n-                        return recollect_without(self, &item_tree);\n+                        return recollect_without(self);\n                     }\n \n                     if !self.db.enable_proc_attr_macros() {\n@@ -1175,8 +1174,7 @@ impl DefCollector<'_> {\n                                 MacroDefKind::BuiltInAttr(expander, _)\n                                 if expander.is_test() || expander.is_bench()\n                             ) {\n-                                let item_tree = self.db.file_item_tree(file_id);\n-                                return recollect_without(self, &item_tree);\n+                                return recollect_without(self);\n                             }\n \n                             if let MacroDefKind::ProcMacro(exp, ..) = loc.def.kind {\n@@ -1190,8 +1188,7 @@ impl DefCollector<'_> {\n                                         ),\n                                     );\n \n-                                    let item_tree = self.db.file_item_tree(file_id);\n-                                    return recollect_without(self, &item_tree);\n+                                    return recollect_without(self);\n                                 }\n                             }\n \n@@ -1771,7 +1768,12 @@ impl ModCollector<'_, '_> {\n             self.def_collector.unresolved_macros.push(MacroDirective {\n                 module_id: self.module_id,\n                 depth: self.macro_depth + 1,\n-                kind: MacroDirectiveKind::Attr { ast_id, attr: attr.clone(), mod_item },\n+                kind: MacroDirectiveKind::Attr {\n+                    ast_id,\n+                    attr: attr.clone(),\n+                    mod_item,\n+                    tree: self.tree_id,\n+                },\n             });\n \n             return Err(());"}]}