{"sha": "46d16b66e0b017430eb50b247926ea447c60ef07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZDE2YjY2ZTBiMDE3NDMwZWI1MGIyNDc5MjZlYTQ0N2M2MGVmMDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-06T21:22:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-13T14:04:24Z"}, "message": "std: Avoid allocating panic message unless needed\n\nThis commit removes allocation of the panic message in instances like\n`panic!(\"foo: {}\", \"bar\")` if we don't actually end up needing the message. We\ndon't need it in the case of wasm32 right now, and in general it's not needed\nfor panic=abort instances that use the default panic hook.\n\nFor now this commit only solves the wasm use case where with LTO the allocation\nis entirely removed, but the panic=abort use case can be implemented at a later\ndate if needed.", "tree": {"sha": "d477d01e863fd24a68c7158bb4a6a931ec0f1330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d477d01e863fd24a68c7158bb4a6a931ec0f1330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46d16b66e0b017430eb50b247926ea447c60ef07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46d16b66e0b017430eb50b247926ea447c60ef07", "html_url": "https://github.com/rust-lang/rust/commit/46d16b66e0b017430eb50b247926ea447c60ef07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46d16b66e0b017430eb50b247926ea447c60ef07/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bb5b5c07c5cd015c567ce86eae07e92db07bb8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb5b5c07c5cd015c567ce86eae07e92db07bb8a", "html_url": "https://github.com/rust-lang/rust/commit/2bb5b5c07c5cd015c567ce86eae07e92db07bb8a"}], "stats": {"total": 153, "additions": 103, "deletions": 50}, "files": [{"sha": "27ec4aaac75dec3a9ed09cc4f268a880f97f3896", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=46d16b66e0b017430eb50b247926ea447c60ef07", "patch": "@@ -49,11 +49,17 @@ impl<'a> PanicInfo<'a> {\n                           and related macros\",\n                 issue = \"0\")]\n     #[doc(hidden)]\n-    pub fn internal_constructor(payload: &'a (Any + Send),\n-                                message: Option<&'a fmt::Arguments<'a>>,\n+    #[inline]\n+    pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n                                 location: Location<'a>)\n                                 -> Self {\n-        PanicInfo { payload, location, message }\n+        PanicInfo { payload: &(), location, message }\n+    }\n+\n+    #[doc(hidden)]\n+    #[inline]\n+    pub fn set_payload(&mut self, info: &'a (Any + Send)) {\n+        self.payload = info;\n     }\n \n     /// Returns the payload associated with the panic.\n@@ -259,5 +265,5 @@ impl<'a> fmt::Display for Location<'a> {\n #[doc(hidden)]\n pub unsafe trait BoxMeUp {\n     fn box_me_up(&mut self) -> *mut (Any + Send);\n-    fn get(&self) -> &(Any + Send);\n+    fn get(&mut self) -> &(Any + Send);\n }"}, {"sha": "24eae6a4c821e1db50005be285519f85510a2eb3", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 73, "deletions": 45, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=46d16b66e0b017430eb50b247926ea447c60ef07", "patch": "@@ -165,12 +165,6 @@ fn default_hook(info: &PanicInfo) {\n     #[cfg(feature = \"backtrace\")]\n     use sys_common::backtrace;\n \n-    // Some platforms know that printing to stderr won't ever actually print\n-    // anything, and if that's the case we can skip everything below.\n-    if stderr_prints_nothing() {\n-        return\n-    }\n-\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n     #[cfg(feature = \"backtrace\")]\n@@ -185,9 +179,6 @@ fn default_hook(info: &PanicInfo) {\n     };\n \n     let location = info.location().unwrap();  // The current implementation always returns Some\n-    let file = location.file();\n-    let line = location.line();\n-    let col = location.column();\n \n     let msg = match info.payload().downcast_ref::<&'static str>() {\n         Some(s) => *s,\n@@ -201,8 +192,8 @@ fn default_hook(info: &PanicInfo) {\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n \n     let write = |err: &mut ::io::Write| {\n-        let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}:{}\",\n-                         name, msg, file, line, col);\n+        let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n+                         name, msg, location);\n \n         #[cfg(feature = \"backtrace\")]\n         {\n@@ -350,9 +341,38 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n     // panic + OOM properly anyway (see comment in begin_panic\n     // below).\n \n-    let mut s = String::new();\n-    let _ = s.write_fmt(*msg);\n-    rust_panic_with_hook(&mut PanicPayload::new(s), Some(msg), file_line_col)\n+    rust_panic_with_hook(&mut PanicPayload::new(msg), Some(msg), file_line_col);\n+\n+    struct PanicPayload<'a> {\n+        inner: &'a fmt::Arguments<'a>,\n+        string: Option<String>,\n+    }\n+\n+    impl<'a> PanicPayload<'a> {\n+        fn new(inner: &'a fmt::Arguments<'a>) -> PanicPayload<'a> {\n+            PanicPayload { inner, string: None }\n+        }\n+\n+        fn fill(&mut self) -> &mut String {\n+            let inner = self.inner;\n+            self.string.get_or_insert_with(|| {\n+                let mut s = String::new();\n+                drop(s.write_fmt(*inner));\n+                s\n+            })\n+        }\n+    }\n+\n+    unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n+        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+            let contents = mem::replace(self.fill(), String::new());\n+            Box::into_raw(Box::new(contents))\n+        }\n+\n+        fn get(&mut self) -> &(Any + Send) {\n+            self.fill()\n+        }\n+    }\n }\n \n /// This is the entry point of panicking for panic!() and assert!().\n@@ -368,42 +388,41 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n     // be performed in the parent of this thread instead of the thread that's\n     // panicking.\n \n-    rust_panic_with_hook(&mut PanicPayload::new(msg), None, file_line_col)\n-}\n-\n-struct PanicPayload<A> {\n-    inner: Option<A>,\n-}\n+    rust_panic_with_hook(&mut PanicPayload::new(msg), None, file_line_col);\n \n-impl<A: Send + 'static> PanicPayload<A> {\n-    fn new(inner: A) -> PanicPayload<A> {\n-        PanicPayload { inner: Some(inner) }\n+    struct PanicPayload<A> {\n+        inner: Option<A>,\n     }\n-}\n \n-unsafe impl<A: Send + 'static> BoxMeUp for PanicPayload<A> {\n-    fn box_me_up(&mut self) -> *mut (Any + Send) {\n-        let data = match self.inner.take() {\n-            Some(a) => Box::new(a) as Box<Any + Send>,\n-            None => Box::new(()),\n-        };\n-        Box::into_raw(data)\n+    impl<A: Send + 'static> PanicPayload<A> {\n+        fn new(inner: A) -> PanicPayload<A> {\n+            PanicPayload { inner: Some(inner) }\n+        }\n     }\n \n-    fn get(&self) -> &(Any + Send) {\n-        match self.inner {\n-            Some(ref a) => a,\n-            None => &(),\n+    unsafe impl<A: Send + 'static> BoxMeUp for PanicPayload<A> {\n+        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+            let data = match self.inner.take() {\n+                Some(a) => Box::new(a) as Box<Any + Send>,\n+                None => Box::new(()),\n+            };\n+            Box::into_raw(data)\n+        }\n+\n+        fn get(&mut self) -> &(Any + Send) {\n+            match self.inner {\n+                Some(ref a) => a,\n+                None => &(),\n+            }\n         }\n     }\n }\n \n-/// Executes the primary logic for a panic, including checking for recursive\n-/// panics and panic hooks.\n+/// Central point for dispatching panics.\n ///\n-/// This is the entry point or panics from libcore, formatted panics, and\n-/// `Box<Any>` panics. Here we'll verify that we're not panicking recursively,\n-/// run panic hooks, and then delegate to the actual implementation of panics.\n+/// Executes the primary logic for a panic, including checking for recursive\n+/// panics, panic hooks, and finally dispatching to the panic runtime to either\n+/// abort or unwind.\n fn rust_panic_with_hook(payload: &mut BoxMeUp,\n                         message: Option<&fmt::Arguments>,\n                         file_line_col: &(&'static str, u32, u32)) -> ! {\n@@ -423,15 +442,24 @@ fn rust_panic_with_hook(payload: &mut BoxMeUp,\n     }\n \n     unsafe {\n-        let info = PanicInfo::internal_constructor(\n-            payload.get(),\n+        let mut info = PanicInfo::internal_constructor(\n             message,\n             Location::internal_constructor(file, line, col),\n         );\n         HOOK_LOCK.read();\n         match HOOK {\n-            Hook::Default => default_hook(&info),\n-            Hook::Custom(ptr) => (*ptr)(&info),\n+            // Some platforms know that printing to stderr won't ever actually\n+            // print anything, and if that's the case we can skip the default\n+            // hook.\n+            Hook::Default if stderr_prints_nothing() => {}\n+            Hook::Default => {\n+                info.set_payload(payload.get());\n+                default_hook(&info);\n+            }\n+            Hook::Custom(ptr) => {\n+                info.set_payload(payload.get());\n+                (*ptr)(&info);\n+            }\n         }\n         HOOK_LOCK.read_unlock();\n     }\n@@ -460,7 +488,7 @@ pub fn update_count_then_panic(msg: Box<Any + Send>) -> ! {\n             Box::into_raw(mem::replace(&mut self.0, Box::new(())))\n         }\n \n-        fn get(&self) -> &(Any + Send) {\n+        fn get(&mut self) -> &(Any + Send) {\n             &*self.0\n         }\n     }"}, {"sha": "330ae300c445ee4334e67ed60e88ad53fe383243", "filename": "src/test/run-make/wasm-panic-small/Makefile", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile?ref=46d16b66e0b017430eb50b247926ea447c60ef07", "patch": "@@ -2,9 +2,15 @@\n \n ifeq ($(TARGET),wasm32-unknown-unknown)\n all:\n-\t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown\n+\t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg a\n \twc -c < $(TMPDIR)/foo.wasm\n \t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"1024\" ]\n+\t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg b\n+\twc -c < $(TMPDIR)/foo.wasm\n+\t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"5120\" ]\n+\t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg c\n+\twc -c < $(TMPDIR)/foo.wasm\n+\t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"5120\" ]\n else\n all:\n endif"}, {"sha": "1ea724ca94d477951407704d3b4ae957d43d0429", "filename": "src/test/run-make/wasm-panic-small/foo.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46d16b66e0b017430eb50b247926ea447c60ef07/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs?ref=46d16b66e0b017430eb50b247926ea447c60ef07", "patch": "@@ -11,6 +11,19 @@\n #![crate_type = \"cdylib\"]\n \n #[no_mangle]\n+#[cfg(a)]\n pub fn foo() {\n     panic!(\"test\");\n }\n+\n+#[no_mangle]\n+#[cfg(b)]\n+pub fn foo() {\n+    panic!(\"{}\", 1);\n+}\n+\n+#[no_mangle]\n+#[cfg(c)]\n+pub fn foo() {\n+    panic!(\"{}\", \"a\");\n+}"}]}