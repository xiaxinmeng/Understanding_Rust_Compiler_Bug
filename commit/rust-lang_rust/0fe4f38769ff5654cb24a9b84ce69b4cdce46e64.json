{"sha": "0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZTRmMzg3NjlmZjU2NTRjYjI0YTliODRjZTY5YjRjZGNlNDZlNjQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-02-22T14:34:23Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:19:17Z"}, "message": "Intern valtree field vector", "tree": {"sha": "1f9d6ec12c36f39203e60b9f819de190e9b5d9f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f9d6ec12c36f39203e60b9f819de190e9b5d9f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "html_url": "https://github.com/rust-lang/rust/commit/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fbac163e7291b052fa5ec64f14cc0a52932ff4", "html_url": "https://github.com/rust-lang/rust/commit/a4fbac163e7291b052fa5ec64f14cc0a52932ff4"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "49ab1084e583f83aaecd87687bee880aec10ef62", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "patch": "@@ -789,7 +789,7 @@ rustc_queries! {\n     /// return `None` if that is not possible.\n     query const_to_valtree(\n         key: ty::ParamEnvAnd<'tcx, ConstAlloc<'tcx>>\n-    ) -> Option<ty::ValTree> {\n+    ) -> Option<ty::ValTree<'tcx>> {\n         desc { \"destructure constant\" }\n     }\n "}, {"sha": "f796534c2e1188d62f86a41a32ac5a60d521bdc0", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "patch": "@@ -333,6 +333,16 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::Const<'tcx> {\n     }\n }\n \n+impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [ty::ValTree<'tcx>] {\n+    fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n+        Ok(decoder.tcx().arena.alloc_from_iter(\n+            (0..decoder.read_usize()?)\n+                .map(|_| Decodable::decode(decoder))\n+                .collect::<Result<Vec<_>, _>>()?,\n+        ))\n+    }\n+}\n+\n impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for Allocation {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         Ok(decoder.tcx().intern_const_alloc(Decodable::decode(decoder)?))"}, {"sha": "6c8eea8c768158738cbcd2378014b9777e1f5be5", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "patch": "@@ -1,15 +1,15 @@\n use super::ScalarInt;\n use rustc_macros::HashStable;\n \n-#[derive(Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(Copy, Clone, Debug, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]\n #[derive(HashStable)]\n-pub enum ValTree {\n+pub enum ValTree<'tcx> {\n     Leaf(ScalarInt),\n-    Branch(Vec<ValTree>),\n+    Branch(&'tcx [ValTree<'tcx>]),\n }\n \n-impl ValTree {\n+impl ValTree<'tcx> {\n     pub fn zst() -> Self {\n-        Self::Branch(Vec::new())\n+        Self::Branch(&[])\n     }\n }"}, {"sha": "5e77cc9daf38ac19f5f1a20a75fd6ec3bd826171", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe4f38769ff5654cb24a9b84ce69b4cdce46e64/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=0fe4f38769ff5654cb24a9b84ce69b4cdce46e64", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn const_to_valtree<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     raw: ConstAlloc<'tcx>,\n-) -> Option<ty::ValTree> {\n+) -> Option<ty::ValTree<'tcx>> {\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n     let place = ecx.raw_const_to_mplace(raw).unwrap();\n     const_to_valtree_inner(&ecx, &place)\n@@ -52,7 +52,7 @@ pub(crate) fn const_to_valtree<'tcx>(\n fn const_to_valtree_inner<'tcx>(\n     ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n     place: &MPlaceTy<'tcx>,\n-) -> Option<ty::ValTree> {\n+) -> Option<ty::ValTree<'tcx>> {\n     let branches = |n, variant| {\n         let place = match variant {\n             Some(variant) => ecx.mplace_downcast(&place, variant).unwrap(),\n@@ -64,7 +64,11 @@ fn const_to_valtree_inner<'tcx>(\n             let field = ecx.mplace_field(&place, i).unwrap();\n             const_to_valtree_inner(ecx, &field)\n         });\n-        Some(ty::ValTree::Branch(variant.into_iter().chain(fields).collect::<Option<_>>()?))\n+        Some(ty::ValTree::Branch(\n+            ecx.tcx\n+                .arena\n+                .alloc_from_iter(variant.into_iter().chain(fields).collect::<Option<Vec<_>>>()?),\n+        ))\n     };\n     match place.layout.ty.kind() {\n         ty::FnDef(..) => Some(ty::ValTree::zst()),"}]}