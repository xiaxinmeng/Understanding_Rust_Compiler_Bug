{"sha": "a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "node_id": "C_kwDOAAsO6NoAKGE2NDYyNmQ5OWU2NTZjZDJiMjI5ZDllMGRmY2VmYjk2ZTU4ZGQ5ZjI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-02T06:52:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-02T06:59:40Z"}, "message": "Highlight closure captures when cursor is on pipe", "tree": {"sha": "8397cd867215b7b96bc82bd803ece6b12a529f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8397cd867215b7b96bc82bd803ece6b12a529f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "html_url": "https://github.com/rust-lang/rust/commit/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0c13ec8e47cfe487f46136b394c0372e957968", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0c13ec8e47cfe487f46136b394c0372e957968", "html_url": "https://github.com/rust-lang/rust/commit/9c0c13ec8e47cfe487f46136b394c0372e957968"}], "stats": {"total": 217, "additions": 149, "deletions": 68}, "files": [{"sha": "2c3e54bf191d73fe11e4c93ee0b9000352ca6192", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -115,9 +115,10 @@ impl InferenceContext<'_> {\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub(crate) struct HirPlace {\n-    pub(crate) local: BindingId,\n+    pub local: BindingId,\n     pub(crate) projections: Vec<ProjectionElem<Infallible, Ty>>,\n }\n+\n impl HirPlace {\n     fn ty(&self, ctx: &mut InferenceContext<'_>) -> Ty {\n         let mut ty = ctx.table.resolve_completely(ctx.result[self.local].clone());\n@@ -161,6 +162,10 @@ pub struct CapturedItem {\n }\n \n impl CapturedItem {\n+    pub fn local(&self) -> BindingId {\n+        self.place.local\n+    }\n+\n     pub fn display_kind(&self) -> &'static str {\n         match self.kind {\n             CaptureKind::ByRef(k) => match k {"}, {"sha": "f955b74d0e5d0d3f5fef5518c31f86170fbe6f05", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -3209,11 +3209,11 @@ impl Closure {\n         self.clone().as_ty().display(db).with_closure_style(ClosureStyle::ImplFn).to_string()\n     }\n \n-    pub fn captured_items(&self, db: &dyn HirDatabase) -> Vec<hir_ty::CapturedItem> {\n+    pub fn captured_items(&self, db: &dyn HirDatabase) -> Vec<ClosureCapture> {\n         let owner = db.lookup_intern_closure((self.id).into()).0;\n         let infer = &db.infer(owner);\n         let info = infer.closure_info(&self.id);\n-        info.0.clone()\n+        info.0.iter().cloned().map(|capture| ClosureCapture { owner, capture }).collect()\n     }\n \n     pub fn fn_trait(&self, db: &dyn HirDatabase) -> FnTrait {\n@@ -3224,6 +3224,26 @@ impl Closure {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct ClosureCapture {\n+    owner: DefWithBodyId,\n+    capture: hir_ty::CapturedItem,\n+}\n+\n+impl ClosureCapture {\n+    pub fn local(&self) -> Local {\n+        Local { parent: self.owner, binding_id: self.capture.local() }\n+    }\n+\n+    pub fn display_kind(&self) -> &'static str {\n+        self.capture.display_kind()\n+    }\n+\n+    pub fn display_place(&self, owner: ClosureId, db: &dyn HirDatabase) -> String {\n+        self.capture.display_place(owner, db)\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     env: Arc<TraitEnvironment>,"}, {"sha": "b71bdf8c0f3cb8d387871b51ad1655aad4c53320", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 102, "deletions": 56, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -1,6 +1,6 @@\n use hir::Semantics;\n use ide_db::{\n-    base_db::{FileId, FilePosition},\n+    base_db::{FileId, FilePosition, FileRange},\n     defs::{Definition, IdentClass},\n     helpers::pick_best_token,\n     search::{FileReference, ReferenceCategory, SearchScope},\n@@ -30,6 +30,7 @@ pub struct HighlightRelatedConfig {\n     pub references: bool,\n     pub exit_points: bool,\n     pub break_points: bool,\n+    pub closure_captures: bool,\n     pub yield_points: bool,\n }\n \n@@ -53,11 +54,12 @@ pub(crate) fn highlight_related(\n \n     let token = pick_best_token(syntax.token_at_offset(offset), |kind| match kind {\n         T![?] => 4, // prefer `?` when the cursor is sandwiched like in `await$0?`\n-        T![->] => 3,\n+        T![->] | T![|] => 3,\n         kind if kind.is_keyword() => 2,\n         IDENT | INT_NUMBER => 1,\n         _ => 0,\n     })?;\n+    // most if not all of these should be re-implemented with information seeded from hir\n     match token.kind() {\n         T![?] if config.exit_points && token.parent().and_then(ast::TryExpr::cast).is_some() => {\n             highlight_exit_points(sema, token)\n@@ -70,11 +72,64 @@ pub(crate) fn highlight_related(\n         T![break] | T![loop] | T![while] | T![continue] if config.break_points => {\n             highlight_break_points(token)\n         }\n+        T![|] if config.closure_captures => highlight_closure_captures(\n+            sema,\n+            token.parent_ancestors().nth(1).and_then(ast::ClosureExpr::cast)?,\n+            file_id,\n+        ),\n+        T![move] if config.closure_captures => highlight_closure_captures(\n+            sema,\n+            token.parent().and_then(ast::ClosureExpr::cast)?,\n+            file_id,\n+        ),\n         _ if config.references => highlight_references(sema, &syntax, token, file_id),\n         _ => None,\n     }\n }\n \n+fn highlight_closure_captures(\n+    sema: &Semantics<'_, RootDatabase>,\n+    node: ast::ClosureExpr,\n+    file_id: FileId,\n+) -> Option<Vec<HighlightedRange>> {\n+    let search_range = node.body()?.syntax().text_range();\n+    let ty = &sema.type_of_expr(&node.into())?.original;\n+    let c = ty.as_closure()?;\n+    Some(\n+        c.captured_items(sema.db)\n+            .into_iter()\n+            .map(|capture| capture.local())\n+            .flat_map(|local| {\n+                let usages = Definition::Local(local)\n+                    .usages(sema)\n+                    .set_scope(Some(SearchScope::file_range(FileRange {\n+                        file_id,\n+                        range: search_range,\n+                    })))\n+                    .include_self_refs()\n+                    .all()\n+                    .references\n+                    .remove(&file_id)\n+                    .into_iter()\n+                    .flatten()\n+                    .map(|FileReference { category, range, .. }| HighlightedRange {\n+                        range,\n+                        category,\n+                    });\n+                let category = local.is_mut(sema.db).then_some(ReferenceCategory::Write);\n+                local\n+                    .sources(sema.db)\n+                    .into_iter()\n+                    .map(|x| x.to_nav(sema.db))\n+                    .filter(|decl| decl.file_id == file_id)\n+                    .filter_map(|decl| decl.focus_range)\n+                    .map(move |range| HighlightedRange { range, category })\n+                    .chain(usages)\n+            })\n+            .collect(),\n+    )\n+}\n+\n fn highlight_references(\n     sema: &Semantics<'_, RootDatabase>,\n     node: &SyntaxNode,\n@@ -93,10 +148,7 @@ fn highlight_references(\n                 .remove(&file_id)\n         })\n         .flatten()\n-        .map(|FileReference { category: access, range, .. }| HighlightedRange {\n-            range,\n-            category: access,\n-        });\n+        .map(|FileReference { category, range, .. }| HighlightedRange { range, category });\n     let mut res = FxHashSet::default();\n     for &def in &defs {\n         match def {\n@@ -352,16 +404,17 @@ mod tests {\n \n     use super::*;\n \n+    const ENABLED_CONFIG: HighlightRelatedConfig = HighlightRelatedConfig {\n+        break_points: true,\n+        exit_points: true,\n+        references: true,\n+        closure_captures: true,\n+        yield_points: true,\n+    };\n+\n     #[track_caller]\n     fn check(ra_fixture: &str) {\n-        let config = HighlightRelatedConfig {\n-            break_points: true,\n-            exit_points: true,\n-            references: true,\n-            yield_points: true,\n-        };\n-\n-        check_with_config(ra_fixture, config);\n+        check_with_config(ra_fixture, ENABLED_CONFIG);\n     }\n \n     #[track_caller]\n@@ -1086,12 +1139,7 @@ fn function(field: u32) {\n \n     #[test]\n     fn test_hl_disabled_ref_local() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1106,12 +1154,7 @@ fn foo() {\n \n     #[test]\n     fn test_hl_disabled_ref_local_preserved_break() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1146,12 +1189,7 @@ fn foo() {\n \n     #[test]\n     fn test_hl_disabled_ref_local_preserved_yield() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1182,12 +1220,7 @@ async fn foo() {\n \n     #[test]\n     fn test_hl_disabled_ref_local_preserved_exit() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1225,12 +1258,7 @@ fn foo() ->$0 i32 {\n \n     #[test]\n     fn test_hl_disabled_break() {\n-        let config = HighlightRelatedConfig {\n-            references: true,\n-            break_points: false,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { break_points: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1246,12 +1274,7 @@ fn foo() {\n \n     #[test]\n     fn test_hl_disabled_yield() {\n-        let config = HighlightRelatedConfig {\n-            references: true,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: false,\n-        };\n+        let config = HighlightRelatedConfig { yield_points: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1265,12 +1288,7 @@ async$0 fn foo() {\n \n     #[test]\n     fn test_hl_disabled_exit() {\n-        let config = HighlightRelatedConfig {\n-            references: true,\n-            break_points: true,\n-            exit_points: false,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { exit_points: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1411,6 +1429,34 @@ impl Trait for () {\n     type Output$0 = ();\n       // ^^^^^^\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_closure_capture_pipe() {\n+        check(\n+            r#\"\n+fn f() {\n+    let x = 1;\n+    //  ^\n+    let c = $0|y| x + y;\n+    //          ^ read\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_closure_capture_move() {\n+        check(\n+            r#\"\n+fn f() {\n+    let x = 1;\n+    //  ^\n+    let c = move$0 |y| x + y;\n+    //               ^ read\n+}\n \"#,\n         );\n     }"}, {"sha": "aa6beb6351a5cfff24b0ae85d64d2c950418a522", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -281,6 +281,8 @@ config_data! {\n \n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n+        /// Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.\n+        highlightRelated_closureCaptures_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n         highlightRelated_exitPoints_enable: bool = \"true\",\n         /// Enables highlighting of related references while the cursor is on any identifier.\n@@ -1554,6 +1556,7 @@ impl Config {\n             break_points: self.data.highlightRelated_breakPoints_enable,\n             exit_points: self.data.highlightRelated_exitPoints_enable,\n             yield_points: self.data.highlightRelated_yieldPoints_enable,\n+            closure_captures: self.data.highlightRelated_closureCaptures_enable,\n         }\n     }\n "}, {"sha": "625ffe0763c248a2692e820fa02daca6e87c9c63", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -434,7 +434,7 @@ pub enum HoverRequest {}\n impl Request for HoverRequest {\n     type Params = HoverParams;\n     type Result = Option<Hover>;\n-    const METHOD: &'static str = \"textDocument/hover\";\n+    const METHOD: &'static str = lsp_types::request::HoverRequest::METHOD;\n }\n \n #[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]"}, {"sha": "fd3e68e2d2c63f0298ba33896bb958545a40bbab", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -95,7 +95,7 @@ fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n     Some((TextRange::new(start, end), text))\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n pub enum RangeOrOffset {\n     Range(TextRange),\n     Offset(TextSize),"}, {"sha": "42f58fee30e1d30c3ec6c4f3678a30ef9d73872b", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 37ac44a0f507e05a\n+lsp_ext.rs hash: 31ca513a249753ab\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "aad6969671c8e1e9aedf102365cba878cdda835d", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -352,6 +352,11 @@ Controls file watching implementation.\n --\n Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n --\n+[[rust-analyzer.highlightRelated.closureCaptures.enable]]rust-analyzer.highlightRelated.closureCaptures.enable (default: `true`)::\n++\n+--\n+Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.\n+--\n [[rust-analyzer.highlightRelated.exitPoints.enable]]rust-analyzer.highlightRelated.exitPoints.enable (default: `true`)::\n +\n --"}, {"sha": "f36e34b6a1bed0264c12fb9155f1cc0a1036bc3b", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -886,6 +886,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.highlightRelated.closureCaptures.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.highlightRelated.exitPoints.enable\": {\n                     \"markdownDescription\": \"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\",\n                     \"default\": true,"}, {"sha": "82955acf25ed98600653cb844a7cc35cef28ee7e", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a64626d99e656cd2b229d9e0dfcefb96e58dd9f2/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=a64626d99e656cd2b229d9e0dfcefb96e58dd9f2", "patch": "@@ -10,12 +10,9 @@ export const hover = new lc.RequestType<\n     HoverParams,\n     (lc.Hover & { actions: CommandLinkGroup[] }) | null,\n     void\n->(\"textDocument/hover\");\n-export type HoverParams = { position: lc.Position | lc.Range } & Omit<\n-    lc.TextDocumentPositionParams,\n-    \"position\"\n-> &\n-    lc.WorkDoneProgressParams;\n+>(lc.HoverRequest.method);\n+export type HoverParams = { position: lc.Position | lc.Range } & Omit<lc.HoverParams, \"position\">;\n+\n export type CommandLink = {\n     /**\n      * A tooltip for the command, when represented in the UI."}]}