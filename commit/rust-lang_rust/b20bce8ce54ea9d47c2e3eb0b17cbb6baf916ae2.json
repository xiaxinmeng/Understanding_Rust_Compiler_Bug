{"sha": "b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMGJjZThjZTU0ZWE5ZDQ3YzJlM2ViMGIxN2NiYjZiYWY5MTZhZTI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-10-01T17:47:25Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-10-01T21:58:37Z"}, "message": "Revert \"resolve: Avoid \"self-confirming\" import resolutions in one more case\"", "tree": {"sha": "fe6f6d9db81cc107cda06fc488ad27271307dd2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe6f6d9db81cc107cda06fc488ad27271307dd2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2", "html_url": "https://github.com/rust-lang/rust/commit/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe73e80d762bc575040239fc05fb1c612873554", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe73e80d762bc575040239fc05fb1c612873554", "html_url": "https://github.com/rust-lang/rust/commit/8fe73e80d762bc575040239fc05fb1c612873554"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "adff4542b0ff8a38cecc1f7fed87e7d9088c8fe3", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2", "patch": "@@ -875,12 +875,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n-        let orig_unusable_binding = match &import.kind {\n-            ImportKind::Single { target_bindings, .. } => {\n-                Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))\n-            }\n-            _ => None,\n-        };\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n         let path_res = self.r.resolve_path(\n             &import.module_path,\n@@ -891,9 +885,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             import.crate_lint(),\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n-        if let Some(orig_unusable_binding) = orig_unusable_binding {\n-            self.r.unusable_binding = orig_unusable_binding;\n-        }\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n             // Consider erroneous imports used to avoid duplicate diagnostics.\n@@ -904,7 +895,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 // Consistency checks, analogous to `finalize_macro_resolutions`.\n                 if let Some(initial_module) = import.imported_module.get() {\n                     if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {\n-                        span_bug!(import.span, \"inconsistent resolution for an import\");\n+                        let msg = \"inconsistent resolution for an import\";\n+                        self.r.session.span_err(import.span, msg);\n                     }\n                 } else {\n                     if self.r.privacy_errors.is_empty() {\n@@ -926,7 +918,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             }\n             PathResult::Failed { is_error_from_last_segment: true, span, label, suggestion } => {\n                 if no_ambiguity {\n-                    assert!(import.imported_module.get().is_none());\n                     let err = match self.make_path_suggestion(\n                         span,\n                         import.module_path.clone(),"}, {"sha": "0e0f915ea53c20069e7fcbfea0b1d55922a15794", "filename": "src/test/ui/imports/issue-62767.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs?ref=b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2", "patch": "@@ -1,5 +1,4 @@\n-// check-pass\n-\n+// Minimized case from #62767.\n mod m {\n     pub enum Same {\n         Same,\n@@ -8,8 +7,22 @@ mod m {\n \n use m::*;\n \n-// The variant `Same` introduced by this import is not considered when resolving the prefix\n-// `Same::` during import validation (issue #62767).\n-use Same::Same;\n+// The variant `Same` introduced by this import is also considered when resolving the prefix\n+// `Same::` during import validation to avoid effects similar to time travel (#74556).\n+use Same::Same; //~ ERROR unresolved import `Same`\n+\n+// Case from #74556.\n+mod foo {\n+    pub mod bar {\n+        pub mod bar {\n+            pub fn foobar() {}\n+        }\n+    }\n+}\n+\n+use foo::*;\n+use bar::bar; //~ ERROR unresolved import `bar::bar`\n+              //~| ERROR inconsistent resolution for an import\n+use bar::foobar;\n \n fn main() {}"}, {"sha": "a4334bda6dd870b8d1864fa13eba6de6c63c02d8", "filename": "src/test/ui/imports/issue-62767.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2/src%2Ftest%2Fui%2Fimports%2Fissue-62767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2/src%2Ftest%2Fui%2Fimports%2Fissue-62767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-62767.stderr?ref=b20bce8ce54ea9d47c2e3eb0b17cbb6baf916ae2", "patch": "@@ -0,0 +1,21 @@\n+error: inconsistent resolution for an import\n+  --> $DIR/issue-62767.rs:24:5\n+   |\n+LL | use bar::bar;\n+   |     ^^^^^^^^\n+\n+error[E0432]: unresolved import `Same`\n+  --> $DIR/issue-62767.rs:12:5\n+   |\n+LL | use Same::Same;\n+   |     ^^^^ `Same` is a variant, not a module\n+\n+error[E0432]: unresolved import `bar::bar`\n+  --> $DIR/issue-62767.rs:24:5\n+   |\n+LL | use bar::bar;\n+   |     ^^^^^^^^ no `bar` in `foo::bar::bar`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}]}