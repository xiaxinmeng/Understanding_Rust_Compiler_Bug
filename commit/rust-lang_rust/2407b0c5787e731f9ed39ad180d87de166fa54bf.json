{"sha": "2407b0c5787e731f9ed39ad180d87de166fa54bf", "node_id": "C_kwDOAAsO6NoAKDI0MDdiMGM1Nzg3ZTczMWY5ZWQzOWFkMTgwZDg3ZGUxNjZmYTU0YmY", "commit": {"author": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2023-02-28T16:20:43Z"}, "committer": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2023-02-28T16:44:59Z"}, "message": "Explain compile-time vs run-time difference in env!() error message", "tree": {"sha": "bf306078edd514d40b377eafab5adeb924411315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf306078edd514d40b377eafab5adeb924411315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2407b0c5787e731f9ed39ad180d87de166fa54bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2407b0c5787e731f9ed39ad180d87de166fa54bf", "html_url": "https://github.com/rust-lang/rust/commit/2407b0c5787e731f9ed39ad180d87de166fa54bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2407b0c5787e731f9ed39ad180d87de166fa54bf/comments", "author": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31f858d9a511f24fedb8ed997b28304fec809630", "url": "https://api.github.com/repos/rust-lang/rust/commits/31f858d9a511f24fedb8ed997b28304fec809630", "html_url": "https://github.com/rust-lang/rust/commit/31f858d9a511f24fedb8ed997b28304fec809630"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "f011cb754cb4a7f93ea0d5d9944410d7318f77d0", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2407b0c5787e731f9ed39ad180d87de166fa54bf/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2407b0c5787e731f9ed39ad180d87de166fa54bf/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=2407b0c5787e731f9ed39ad180d87de166fa54bf", "patch": "@@ -53,7 +53,7 @@ pub fn expand_env<'cx>(\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     let mut exprs = match get_exprs_from_tts(cx, tts) {\n-        Some(exprs) if exprs.is_empty() => {\n+        Some(exprs) if exprs.is_empty() || exprs.len() > 2 => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n             return DummyResult::any(sp);\n         }\n@@ -64,28 +64,48 @@ pub fn expand_env<'cx>(\n     let Some((var, _style)) = expr_to_string(cx, exprs.next().unwrap(), \"expected string literal\") else {\n         return DummyResult::any(sp);\n     };\n-    let msg = match exprs.next() {\n-        None => Symbol::intern(&format!(\"environment variable `{}` not defined\", var)),\n+\n+    let custom_msg = match exprs.next() {\n+        None => None,\n         Some(second) => match expr_to_string(cx, second, \"expected string literal\") {\n             None => return DummyResult::any(sp),\n-            Some((s, _style)) => s,\n+            Some((s, _style)) => Some(s),\n         },\n     };\n \n-    if exprs.next().is_some() {\n-        cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n-        return DummyResult::any(sp);\n-    }\n-\n     let sp = cx.with_def_site_ctxt(sp);\n     let value = env::var(var.as_str()).ok().as_deref().map(Symbol::intern);\n     cx.sess.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n     let e = match value {\n         None => {\n-            cx.span_err(sp, msg.as_str());\n+            let (msg, help) = match custom_msg {\n+                None => (\n+                    format!(\"environment variable `{var}` not defined at compile time\"),\n+                    Some(help_for_missing_env_var(var.as_str())),\n+                ),\n+                Some(s) => (s.to_string(), None),\n+            };\n+            let mut diag = cx.struct_span_err(sp, &msg);\n+            if let Some(help) = help {\n+                diag.help(help);\n+            }\n+            diag.emit();\n             return DummyResult::any(sp);\n         }\n         Some(value) => cx.expr_str(sp, value),\n     };\n     MacEager::expr(e)\n }\n+\n+fn help_for_missing_env_var(var: &str) -> String {\n+    if var.starts_with(\"CARGO_\")\n+        || var.starts_with(\"DEP_\")\n+        || matches!(var, \"OUT_DIR\" | \"OPT_LEVEL\" | \"PROFILE\" | \"HOST\" | \"TARGET\")\n+    {\n+        format!(\n+            \"Cargo sets build script variables at run time. Use `std::env::var(\\\"{var}\\\")` instead\"\n+        )\n+    } else {\n+        format!(\"Use `std::env::var(\\\"{var}\\\")` to read the variable at run time\")\n+    }\n+}"}, {"sha": "1fb046c78f2a071f249953187a79906080e75a2d", "filename": "tests/ui/extenv/extenv-not-defined-default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fextenv%2Fextenv-not-defined-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fextenv%2Fextenv-not-defined-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-not-defined-default.rs?ref=2407b0c5787e731f9ed39ad180d87de166fa54bf", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    env!(\"__HOPEFULLY_NOT_DEFINED__\");\n-    //~^ ERROR: environment variable `__HOPEFULLY_NOT_DEFINED__` not defined\n+    env!(\"CARGO__HOPEFULLY_NOT_DEFINED__\");\n+    //~^ ERROR: environment variable `CARGO__HOPEFULLY_NOT_DEFINED__` not defined\n }"}, {"sha": "e3dce000530ae336d9d4d3f4c484c3584e1cc2f9", "filename": "tests/ui/extenv/extenv-not-defined-default.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fextenv%2Fextenv-not-defined-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fextenv%2Fextenv-not-defined-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fextenv-not-defined-default.stderr?ref=2407b0c5787e731f9ed39ad180d87de166fa54bf", "patch": "@@ -1,9 +1,10 @@\n-error: environment variable `__HOPEFULLY_NOT_DEFINED__` not defined\n+error: environment variable `CARGO__HOPEFULLY_NOT_DEFINED__` not defined at compile time\n   --> $DIR/extenv-not-defined-default.rs:2:5\n    |\n-LL |     env!(\"__HOPEFULLY_NOT_DEFINED__\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     env!(\"CARGO__HOPEFULLY_NOT_DEFINED__\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: Cargo sets build script variables at run time. Use `std::env::var(\"CARGO__HOPEFULLY_NOT_DEFINED__\")` instead\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "5752a965e3518cb5242407176f1b90296ac223eb", "filename": "tests/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-55897.stderr?ref=2407b0c5787e731f9ed39ad180d87de166fa54bf", "patch": "@@ -1,9 +1,10 @@\n-error: environment variable `NON_EXISTENT` not defined\n+error: environment variable `NON_EXISTENT` not defined at compile time\n   --> $DIR/issue-55897.rs:11:22\n    |\n LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: Use `std::env::var(\"NON_EXISTENT\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: suffixes on string literals are invalid"}, {"sha": "93fbc9c8a447ee1cf33e5eb8986337160a9286b3", "filename": "tests/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2407b0c5787e731f9ed39ad180d87de166fa54bf/tests%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=2407b0c5787e731f9ed39ad180d87de166fa54bf", "patch": "@@ -150,18 +150,19 @@ error: expected string literal\n LL |     env!(invalid);\n    |          ^^^^^^^\n \n-error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:105:10\n+error: env! takes 1 or 2 arguments\n+  --> $DIR/macros-nonfatal-errors.rs:105:5\n    |\n LL |     env!(foo, abr, baz);\n-   |          ^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n-error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n+error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined at compile time\n   --> $DIR/macros-nonfatal-errors.rs:106:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = help: Use `std::env::var(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\")` to read the variable at run time\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal"}]}