{"sha": "c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMWZiZmU3ZTMxMGI5MDU1ZWQ2YjdjNDZiN2QzN2I4MzFhNTE2ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-22T12:09:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-22T12:09:59Z"}, "message": "Auto merge of #59114 - matthewjasper:enable-migate-2015, r=pnkfelix\n\nEnable NLL migrate mode on the 2015 edition\n\n## What is in this PR?\n\n* Remove the `-Zborrowck=ast` flag option from rustc.\n* The default in the 2015 edition is now `-Zborrowck=migrate`.\n* The 2018 edition default is unchanged: it's still `-Zborrowck=migrate`.\n* Enable two-phase borrows (currently toggled via the `-Ztwo-phase-borrows` flag) on all editions.\n* Remove most dead code that handled these options.\n* Update tests for the above changes.\n\n## What is *not* in this PR?\n\nThese are left for future PRs\n\n* Use `-Zborrowck=mir` in NLL compare mode tests (#56993)\n* Remove the `-Zborrowck=compare` option (#59193)\n* Remove the `-Ztwo-phase-borrows` flag. It's kept, as a flag that does nothing so that perf.rlo has time to stop using it (cc @Mark-Simulacrum)\n* Remove MIR typeck as its own MIR pass - it's now run by NLL.\n* Enabling `-Zborrowck=mir` by default (#58781)\n* Replace `allow_bind_by_move_patterns_with_guards` and `check_for_mutation_in_guard_via_ast_walk` with just using the feature gate. (#59192)\n\nSoundness issues that are fixed by NLL will stay open until full NLL is emitting hard errors. However, these diagnostics and completeness issues can now be closed:\n\nCloses #18330\nCloses #22323\nCloses #23591\nCloses #26736\nCloses #27487\nCloses #28092\nCloses #28970\nCloses #29733\nCloses #30104\nCloses #38915\nCloses #39908\nCloses #43407\nCloses #47524\nCloses #48540\nCloses #49073\nCloses #52614\nCloses #55085\nCloses #56093\nCloses #56496\nCloses #57804\n\ncc #43234\n\nr? @pnkfelix\ncc @rust-lang/lang\ncc @rust-lang/wg-compiler-nll", "tree": {"sha": "9a94551f5aa1221446654a162fdee604263c706e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a94551f5aa1221446654a162fdee604263c706e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "html_url": "https://github.com/rust-lang/rust/commit/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a850a426491e14186af2250549bf41256b5938d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a850a426491e14186af2250549bf41256b5938d2", "html_url": "https://github.com/rust-lang/rust/commit/a850a426491e14186af2250549bf41256b5938d2"}, {"sha": "8eef102270647af94f38274efb9a2fd5ef8a92ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eef102270647af94f38274efb9a2fd5ef8a92ec", "html_url": "https://github.com/rust-lang/rust/commit/8eef102270647af94f38274efb9a2fd5ef8a92ec"}], "stats": {"total": 28279, "additions": 6035, "deletions": 22244}, "files": [{"sha": "747f0a6ae87238e777c9763da1892917789a1e70", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -92,8 +92,8 @@ impl SuppressRegionErrors {\n     /// enabled.\n     pub fn when_nll_is_enabled(tcx: TyCtxt<'_, '_, '_>) -> Self {\n         match tcx.borrowck_mode() {\n-            // If we're on AST or Migrate mode, report AST region errors\n-            BorrowckMode::Ast | BorrowckMode::Migrate => SuppressRegionErrors { suppressed: false },\n+            // If we're on Migrate mode, report AST region errors\n+            BorrowckMode::Migrate => SuppressRegionErrors { suppressed: false },\n \n             // If we're on MIR or Compare mode, don't report AST region errors as they should\n             // be reported by NLL"}, {"sha": "cb307800fcdc26b8f0a54d4941c2942679d436e4", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -460,7 +460,6 @@ pub enum PrintRequest {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum BorrowckMode {\n-    Ast,\n     Mir,\n     Compare,\n     Migrate,\n@@ -471,7 +470,6 @@ impl BorrowckMode {\n     /// on the AST borrow check if the MIR-based one errors.\n     pub fn migrate(self) -> bool {\n         match self {\n-            BorrowckMode::Ast => false,\n             BorrowckMode::Compare => false,\n             BorrowckMode::Mir => false,\n             BorrowckMode::Migrate => true,\n@@ -481,21 +479,11 @@ impl BorrowckMode {\n     /// Should we emit the AST-based borrow checker errors?\n     pub fn use_ast(self) -> bool {\n         match self {\n-            BorrowckMode::Ast => true,\n             BorrowckMode::Compare => true,\n             BorrowckMode::Mir => false,\n             BorrowckMode::Migrate => false,\n         }\n     }\n-    /// Should we emit the MIR-based borrow checker errors?\n-    pub fn use_mir(self) -> bool {\n-        match self {\n-            BorrowckMode::Ast => false,\n-            BorrowckMode::Compare => true,\n-            BorrowckMode::Mir => true,\n-            BorrowckMode::Migrate => true,\n-        }\n-    }\n }\n \n pub enum Input {\n@@ -627,7 +615,7 @@ impl Default for Options {\n             incremental: None,\n             debugging_opts: basic_debugging_options(),\n             prints: Vec::new(),\n-            borrowck_mode: BorrowckMode::Ast,\n+            borrowck_mode: BorrowckMode::Migrate,\n             cg: basic_codegen_options(),\n             error_format: ErrorOutputType::default(),\n             externs: Externs(BTreeMap::new()),\n@@ -2326,10 +2314,9 @@ pub fn build_session_options_and_crate_config(\n     }));\n \n     let borrowck_mode = match debugging_opts.borrowck.as_ref().map(|s| &s[..]) {\n-        None | Some(\"ast\") => BorrowckMode::Ast,\n+        None | Some(\"migrate\") => BorrowckMode::Migrate,\n         Some(\"mir\") => BorrowckMode::Mir,\n         Some(\"compare\") => BorrowckMode::Compare,\n-        Some(\"migrate\") => BorrowckMode::Migrate,\n         Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n     };\n "}, {"sha": "ed500d1ac3351d17f7fb4757f2c9509d8008771c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 53, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -70,7 +70,6 @@ use rustc_macros::HashStable;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n-use syntax::edition::Edition;\n use syntax::feature_gate;\n use syntax::symbol::{Symbol, keywords, InternedString};\n use syntax_pos::Span;\n@@ -1496,21 +1495,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// because that method has a narrower effect that can be toggled\n     /// off via a separate `-Z` flag, at least for the short term.\n     pub fn allow_bind_by_move_patterns_with_guards(self) -> bool {\n-        self.features().bind_by_move_pattern_guards && self.use_mir_borrowck()\n+        self.features().bind_by_move_pattern_guards\n     }\n \n     /// If true, we should use a naive AST walk to determine if match\n     /// guard could perform bad mutations (or mutable-borrows).\n     pub fn check_for_mutation_in_guard_via_ast_walk(self) -> bool {\n-        // If someone requests the feature, then be a little more\n-        // careful and ensure that MIR-borrowck is enabled (which can\n-        // happen via edition selection, via `feature(nll)`, or via an\n-        // appropriate `-Z` flag) before disabling the mutation check.\n-        if self.allow_bind_by_move_patterns_with_guards() {\n-            return false;\n-        }\n-\n-        return true;\n+        !self.allow_bind_by_move_patterns_with_guards()\n     }\n \n     /// If true, we should use the AST-based borrowck (we may *also* use\n@@ -1519,12 +1510,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.borrowck_mode().use_ast()\n     }\n \n-    /// If true, we should use the MIR-based borrowck (we may *also* use\n-    /// the AST-based borrowck).\n-    pub fn use_mir_borrowck(self) -> bool {\n-        self.borrowck_mode().use_mir()\n-    }\n-\n     /// If true, we should use the MIR-based borrow check, but also\n     /// fall back on the AST borrow check if the MIR-based one errors.\n     pub fn migrate_borrowck(self) -> bool {\n@@ -1541,38 +1526,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// statements (which simulate the maximal effect of executing the\n     /// patterns in a match arm).\n     pub fn emit_read_for_match(&self) -> bool {\n-        self.use_mir_borrowck() && !self.sess.opts.debugging_opts.nll_dont_emit_read_for_match\n-    }\n-\n-    /// If true, pattern variables for use in guards on match arms\n-    /// will be bound as references to the data, and occurrences of\n-    /// those variables in the guard expression will implicitly\n-    /// dereference those bindings. (See rust-lang/rust#27282.)\n-    pub fn all_pat_vars_are_implicit_refs_within_guards(self) -> bool {\n-        self.borrowck_mode().use_mir()\n-    }\n-\n-    /// If true, we should enable two-phase borrows checks. This is\n-    /// done with either: `-Ztwo-phase-borrows`, `#![feature(nll)]`,\n-    /// or by opting into an edition after 2015.\n-    pub fn two_phase_borrows(self) -> bool {\n-        self.sess.rust_2018() || self.features().nll ||\n-        self.sess.opts.debugging_opts.two_phase_borrows\n+        !self.sess.opts.debugging_opts.nll_dont_emit_read_for_match\n     }\n \n     /// What mode(s) of borrowck should we run? AST? MIR? both?\n     /// (Also considers the `#![feature(nll)]` setting.)\n     pub fn borrowck_mode(&self) -> BorrowckMode {\n         // Here are the main constraints we need to deal with:\n         //\n-        // 1. An opts.borrowck_mode of `BorrowckMode::Ast` is\n+        // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is\n         //    synonymous with no `-Z borrowck=...` flag at all.\n-        //    (This is arguably a historical accident.)\n-        //\n-        // 2. `BorrowckMode::Migrate` is the limited migration to\n-        //    NLL that we are deploying with the 2018 edition.\n         //\n-        // 3. We want to allow developers on the Nightly channel\n+        // 2. We want to allow developers on the Nightly channel\n         //    to opt back into the \"hard error\" mode for NLL,\n         //    (which they can do via specifying `#![feature(nll)]`\n         //    explicitly in their crate).\n@@ -1585,24 +1550,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         //   a user's attempt to specify `-Z borrowck=compare`, which\n         //   we arguably do not need anymore and should remove.)\n         //\n-        // * Otherwise, if no `-Z borrowck=...` flag was given (or\n-        //   if `borrowck=ast` was specified), then use the default\n-        //   as required by the edition.\n+        // * Otherwise, if no `-Z borrowck=...` then use migrate mode\n         //\n         // * Otherwise, use the behavior requested via `-Z borrowck=...`\n \n         if self.features().nll { return BorrowckMode::Mir; }\n \n-        match self.sess.opts.borrowck_mode {\n-            mode @ BorrowckMode::Mir |\n-            mode @ BorrowckMode::Compare |\n-            mode @ BorrowckMode::Migrate => mode,\n-\n-            BorrowckMode::Ast => match self.sess.edition() {\n-                Edition::Edition2015 => BorrowckMode::Ast,\n-                Edition::Edition2018 => BorrowckMode::Migrate,\n-            },\n-        }\n+        self.sess.opts.borrowck_mode\n     }\n \n     #[inline]"}, {"sha": "540f374bcf9dc8d65dcd6fc235ef8a96d370d055", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -49,8 +49,6 @@ pub mod gather_loans;\n \n pub mod move_data;\n \n-mod unused;\n-\n #[derive(Clone, Copy)]\n pub struct LoanDataFlowOperator;\n \n@@ -138,10 +136,6 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n         check_loans::check_loans(&mut bccx, &loan_dfcx, &flowed_moves, &all_loans, body);\n     }\n \n-    if !tcx.use_mir_borrowck() {\n-        unused::check(&mut bccx, body);\n-    }\n-\n     Lrc::new(BorrowCheckResult {\n         used_mut_nodes: bccx.used_mut_nodes.into_inner(),\n         signalled_any_error: bccx.signalled_any_error.into_inner(),"}, {"sha": "60a9c18e95ee9bac025839de33c8a1a3e6e50618", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,116 +0,0 @@\n-use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n-use rustc::hir::{self, HirId};\n-use rustc::lint::builtin::UNUSED_MUT;\n-use rustc::ty;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n-use errors::Applicability;\n-use std::slice;\n-use syntax::ptr::P;\n-\n-use crate::borrowck::BorrowckCtxt;\n-\n-pub fn check<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, body: &'tcx hir::Body) {\n-    let mut used_mut = bccx.used_mut_nodes.borrow().clone();\n-    UsedMutFinder {\n-        bccx,\n-        set: &mut used_mut,\n-    }.visit_expr(&body.value);\n-    let mut cx = UnusedMutCx { bccx, used_mut };\n-    for arg in body.arguments.iter() {\n-        cx.check_unused_mut_pat(slice::from_ref(&arg.pat));\n-    }\n-    cx.visit_expr(&body.value);\n-}\n-\n-struct UsedMutFinder<'a, 'tcx: 'a> {\n-    bccx: &'a BorrowckCtxt<'a, 'tcx>,\n-    set: &'a mut FxHashSet<HirId>,\n-}\n-\n-struct UnusedMutCx<'a, 'tcx: 'a> {\n-    bccx: &'a BorrowckCtxt<'a, 'tcx>,\n-    used_mut: FxHashSet<HirId>,\n-}\n-\n-impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n-    fn check_unused_mut_pat(&self, pats: &[P<hir::Pat>]) {\n-        let tcx = self.bccx.tcx;\n-        let mut mutables: FxHashMap<_, Vec<_>> = Default::default();\n-        for p in pats {\n-            p.each_binding(|_, hir_id, span, ident| {\n-                // Skip anything that looks like `_foo`\n-                if ident.as_str().starts_with(\"_\") {\n-                    return;\n-                }\n-\n-                // Skip anything that looks like `&foo` or `&mut foo`, only look\n-                // for by-value bindings\n-                if let Some(&bm) = self.bccx.tables.pat_binding_modes().get(hir_id) {\n-                    match bm {\n-                        ty::BindByValue(hir::MutMutable) => {}\n-                        _ => return,\n-                    }\n-\n-                    mutables.entry(ident.name).or_default().push((hir_id, span));\n-                } else {\n-                    tcx.sess.delay_span_bug(span, \"missing binding mode\");\n-                }\n-            });\n-        }\n-\n-        for (_name, ids) in mutables {\n-            // If any id for this name was used mutably then consider them all\n-            // ok, so move on to the next\n-            if ids.iter().any(|&(ref hir_id, _)| self.used_mut.contains(hir_id)) {\n-                continue;\n-            }\n-\n-            let (hir_id, span) = ids[0];\n-            if span.compiler_desugaring_kind().is_some() {\n-                // If the `mut` arises as part of a desugaring, we should ignore it.\n-                continue;\n-            }\n-\n-            // Ok, every name wasn't used mutably, so issue a warning that this\n-            // didn't need to be mutable.\n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n-            tcx.struct_span_lint_hir(UNUSED_MUT,\n-                                     hir_id,\n-                                     span,\n-                                     \"variable does not need to be mutable\")\n-                .span_suggestion_short(\n-                    mut_span,\n-                    \"remove this `mut`\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n-        }\n-    }\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for UnusedMutCx<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::OnlyBodies(&self.bccx.tcx.hir())\n-    }\n-\n-    fn visit_arm(&mut self, arm: &hir::Arm) {\n-        self.check_unused_mut_pat(&arm.pats)\n-    }\n-\n-    fn visit_local(&mut self, local: &hir::Local) {\n-        self.check_unused_mut_pat(slice::from_ref(&local.pat));\n-    }\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for UsedMutFinder<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::OnlyBodies(&self.bccx.tcx.hir())\n-    }\n-\n-    fn visit_nested_body(&mut self, id: hir::BodyId) {\n-        let def_id = self.bccx.tcx.hir().body_owner_def_id(id);\n-        self.set.extend(self.bccx.tcx.borrowck(def_id).used_mut_nodes.iter().cloned());\n-        self.visit_body(self.bccx.tcx.hir().body(id));\n-    }\n-}"}, {"sha": "918192395c3f4eaa42f36c11af31c0638fb0de61", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -303,9 +303,8 @@ impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {\n     /// allowed to be split into separate Reservation and\n     /// Activation phases.\n     fn allow_two_phase_borrow(&self, kind: mir::BorrowKind) -> bool {\n-        self.tcx.two_phase_borrows()\n-            && (kind.allows_two_phase_borrow()\n-                || self.tcx.sess.opts.debugging_opts.two_phase_beyond_autoref)\n+        kind.allows_two_phase_borrow()\n+            || self.tcx.sess.opts.debugging_opts.two_phase_beyond_autoref\n     }\n \n     /// If this is a two-phase borrow, then we will record it"}, {"sha": "4a3159d8a9dc30d244d6bc3d238aa898c8044f06", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -74,37 +74,28 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowC\n     let input_mir = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n \n-    let mut return_early;\n-\n-    // Return early if we are not supposed to use MIR borrow checker for this function.\n-    return_early = !tcx.has_attr(def_id, \"rustc_mir\") && !tcx.use_mir_borrowck();\n-\n+    // We are not borrow checking the automatically generated struct/variant constructors\n+    // because we want to accept structs such as this (taken from the `linked-hash-map`\n+    // crate):\n+    // ```rust\n+    // struct Qey<Q: ?Sized>(Q);\n+    // ```\n+    // MIR of this struct constructor looks something like this:\n+    // ```rust\n+    // fn Qey(_1: Q) -> Qey<Q>{\n+    //     let mut _0: Qey<Q>;                  // return place\n+    //\n+    //     bb0: {\n+    //         (_0.0: Q) = move _1;             // bb0[0]: scope 0 at src/main.rs:1:1: 1:26\n+    //         return;                          // bb0[1]: scope 0 at src/main.rs:1:1: 1:26\n+    //     }\n+    // }\n+    // ```\n+    // The problem here is that `(_0.0: Q) = move _1;` is valid only if `Q` is\n+    // of statically known size, which is not known to be true because of the\n+    // `Q: ?Sized` constraint. However, it is true because the constructor can be\n+    // called only when `Q` is of statically known size.\n     if tcx.is_constructor(def_id) {\n-        // We are not borrow checking the automatically generated struct/variant constructors\n-        // because we want to accept structs such as this (taken from the `linked-hash-map`\n-        // crate):\n-        // ```rust\n-        // struct Qey<Q: ?Sized>(Q);\n-        // ```\n-        // MIR of this struct constructor looks something like this:\n-        // ```rust\n-        // fn Qey(_1: Q) -> Qey<Q>{\n-        //     let mut _0: Qey<Q>;                  // return place\n-        //\n-        //     bb0: {\n-        //         (_0.0: Q) = move _1;             // bb0[0]: scope 0 at src/main.rs:1:1: 1:26\n-        //         return;                          // bb0[1]: scope 0 at src/main.rs:1:1: 1:26\n-        //     }\n-        // }\n-        // ```\n-        // The problem here is that `(_0.0: Q) = move _1;` is valid only if `Q` is\n-        // of statically known size, which is not known to be true because of the\n-        // `Q: ?Sized` constraint. However, it is true because the constructor can be\n-        // called only when `Q` is of statically known size.\n-        return_early = true;\n-    }\n-\n-    if return_early {\n         return BorrowCheckResult {\n             closure_requirements: None,\n             used_mut_upvars: SmallVec::new(),\n@@ -1505,10 +1496,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         span: Span,\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n     ) {\n-        if !self.infcx.tcx.two_phase_borrows() {\n-            return;\n-        }\n-\n         // Two-phase borrow support: For each activation that is newly\n         // generated at this statement, check if it interferes with\n         // another borrow."}, {"sha": "a5230e67b756a1f4c375116377fe1c28f890f700", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -474,10 +474,6 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n         &mut self,\n         location: Location,\n     ) {\n-        if !self.tcx.two_phase_borrows() {\n-            return;\n-        }\n-\n         // Two-phase borrow support: For each activation that is newly\n         // generated at this statement, check if it interferes with\n         // another borrow."}, {"sha": "0dee64db727631a9f2421f1da85ea4e9085d4966", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2672,9 +2672,8 @@ impl MirPass for TypeckMir {\n         let def_id = src.def_id();\n         debug!(\"run_pass: {:?}\", def_id);\n \n-        // When NLL is enabled, the borrow checker runs the typeck\n-        // itself, so we don't need this MIR pass anymore.\n-        if tcx.use_mir_borrowck() {\n+        // FIXME: We don't need this MIR pass anymore.\n+        if true {\n             return;\n         }\n "}, {"sha": "c68dee29c5b1be14e6559e9f63470e40aace952e", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -15,9 +15,8 @@ pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(\n     tcx: &TyCtxt<'a, 'gcx, 'tcx>,\n     kind: BorrowKind\n ) -> bool {\n-    tcx.two_phase_borrows()\n-        && (kind.allows_two_phase_borrow()\n-            || tcx.sess.opts.debugging_opts.two_phase_beyond_autoref)\n+    kind.allows_two_phase_borrow()\n+        || tcx.sess.opts.debugging_opts.two_phase_beyond_autoref\n }\n \n /// Control for the path borrow checking code"}, {"sha": "713e3fe0218ba8a0a731886f67314caa92a4d52f", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -112,11 +112,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::SelfRef => block.and(Place::Base(PlaceBase::Local(Local::new(1)))),\n             ExprKind::VarRef { id } => {\n-                let place = if this.is_bound_var_in_guard(id) && this\n-                    .hir\n-                    .tcx()\n-                    .all_pat_vars_are_implicit_refs_within_guards()\n-                {\n+                let place = if this.is_bound_var_in_guard(id) {\n                     let index = this.var_local_id(id, RefWithinGuard);\n                     Place::Base(PlaceBase::Local(index)).deref()\n                 } else {"}, {"sha": "b5b2d78f1bd67bee0fa2de18226a441e9eff4a9a", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 38, "deletions": 48, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1425,26 +1425,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         //      the reference that we create for the arm.\n         //    * So we eagerly create the reference for the arm and then take a\n         //      reference to that.\n-        let tcx = self.hir.tcx();\n-        let autoref = tcx.all_pat_vars_are_implicit_refs_within_guards();\n         if let Some(guard) = guard {\n-            if autoref {\n-                self.bind_matched_candidate_for_guard(\n-                    block,\n-                    &candidate.bindings,\n-                );\n-                let guard_frame = GuardFrame {\n-                    locals: candidate\n-                        .bindings\n-                        .iter()\n-                        .map(|b| GuardFrameLocal::new(b.var_id, b.binding_mode))\n-                        .collect(),\n-                };\n-                debug!(\"Entering guard building context: {:?}\", guard_frame);\n-                self.guard_context.push(guard_frame);\n-            } else {\n-                self.bind_matched_candidate_for_arm_body(block, &candidate.bindings);\n-            }\n+            let tcx = self.hir.tcx();\n+\n+            self.bind_matched_candidate_for_guard(\n+                block,\n+                &candidate.bindings,\n+            );\n+            let guard_frame = GuardFrame {\n+                locals: candidate\n+                    .bindings\n+                    .iter()\n+                    .map(|b| GuardFrameLocal::new(b.var_id, b.binding_mode))\n+                    .collect(),\n+            };\n+            debug!(\"Entering guard building context: {:?}\", guard_frame);\n+            self.guard_context.push(guard_frame);\n \n             let re_erased = tcx.types.re_erased;\n             let scrutinee_source_info = self.source_info(scrutinee_span);\n@@ -1470,13 +1466,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let source_info = self.source_info(guard.span);\n             let guard_end = self.source_info(tcx.sess.source_map().end_point(guard.span));\n             let cond = unpack!(block = self.as_local_operand(block, guard));\n-            if autoref {\n-                let guard_frame = self.guard_context.pop().unwrap();\n-                debug!(\n-                    \"Exiting guard building context with locals: {:?}\",\n-                    guard_frame\n-                );\n-            }\n+            let guard_frame = self.guard_context.pop().unwrap();\n+            debug!(\n+                \"Exiting guard building context with locals: {:?}\",\n+                guard_frame\n+            );\n \n             for &(_, temp) in fake_borrows {\n                 self.cfg.push(block, Statement {\n@@ -1526,28 +1520,26 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ),\n             );\n \n-            if autoref {\n-                let by_value_bindings = candidate.bindings.iter().filter(|binding| {\n-                    if let BindingMode::ByValue = binding.binding_mode { true } else { false }\n-                });\n-                // Read all of the by reference bindings to ensure that the\n-                // place they refer to can't be modified by the guard.\n-                for binding in by_value_bindings.clone() {\n-                    let local_id = self.var_local_id(binding.var_id, RefWithinGuard);\n+            let by_value_bindings = candidate.bindings.iter().filter(|binding| {\n+                if let BindingMode::ByValue = binding.binding_mode { true } else { false }\n+            });\n+            // Read all of the by reference bindings to ensure that the\n+            // place they refer to can't be modified by the guard.\n+            for binding in by_value_bindings.clone() {\n+                let local_id = self.var_local_id(binding.var_id, RefWithinGuard);\n                     let place = Place::Base(PlaceBase::Local(local_id));\n-                    self.cfg.push(\n-                        block,\n-                        Statement {\n-                            source_info: guard_end,\n-                            kind: StatementKind::FakeRead(FakeReadCause::ForGuardBinding, place),\n-                        },\n-                    );\n-                }\n-                self.bind_matched_candidate_for_arm_body(\n-                    post_guard_block,\n-                    by_value_bindings,\n+                self.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info: guard_end,\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForGuardBinding, place),\n+                    },\n                 );\n             }\n+            self.bind_matched_candidate_for_arm_body(\n+                post_guard_block,\n+                by_value_bindings,\n+            );\n \n             self.cfg.terminate(\n                 post_guard_block,\n@@ -1604,8 +1596,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // Only called when all_pat_vars_are_implicit_refs_within_guards,\n-    // and thus all code/comments assume we are in that context.\n     fn bind_matched_candidate_for_guard(\n         &mut self,\n         block: BasicBlock,\n@@ -1739,7 +1729,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }))),\n         };\n         let for_arm_body = self.local_decls.push(local.clone());\n-        let locals = if has_guard.0 && tcx.all_pat_vars_are_implicit_refs_within_guards() {\n+        let locals = if has_guard.0 {\n             let ref_for_guard = self.local_decls.push(LocalDecl::<'tcx> {\n                 // This variable isn't mutated but has a name, so has to be\n                 // immutable to avoid the unused mut lint."}, {"sha": "74a4278d5991b1c5f364457d869fe33b4fb91b4d", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 73, "deletions": 57, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -877,12 +877,14 @@ https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n \"##,\n \n E0383: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n This error occurs when an attempt is made to partially reinitialize a\n structure that is currently uninitialized.\n \n For example, this can happen when a drop has taken place:\n \n-```compile_fail,E0383\n+```compile_fail\n struct Foo {\n     a: u32,\n }\n@@ -966,10 +968,12 @@ y.set(2);\n \"##,*/\n \n E0387: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n This error occurs when an attempt is made to mutate or mutably reference data\n that a closure has captured immutably. Examples of this error are shown below:\n \n-```compile_fail,E0387\n+```compile_fail\n // Accepts a function or a closure that captures its environment immutably.\n // Closures passed to foo will not be able to mutate their closed-over state.\n fn foo<F: Fn()>(f: F) { }\n@@ -1026,13 +1030,15 @@ E0388 was removed and is no longer issued.\n \"##,\n \n E0389: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An attempt was made to mutate data using a non-mutable reference. This\n commonly occurs when attempting to assign to a non-mutable reference of a\n mutable reference (`&(&mut T)`).\n \n Example of erroneous code:\n \n-```compile_fail,E0389\n+```compile_fail\n struct FancyNum {\n     num: u8,\n }\n@@ -1202,6 +1208,7 @@ A variable was borrowed as mutable more than once. Erroneous code example:\n let mut i = 0;\n let mut x = &mut i;\n let mut a = &mut i;\n+x;\n // error: cannot borrow `i` as mutable more than once at a time\n ```\n \n@@ -1220,35 +1227,33 @@ let mut i = 0;\n let a = &i; // ok!\n let b = &i; // still ok!\n let c = &i; // still ok!\n+b;\n+a;\n ```\n \"##,\n \n E0500: r##\"\n-A borrowed variable was used in another closure. Example of erroneous code:\n+A borrowed variable was used by a closure. Example of erroneous code:\n \n-```compile_fail\n+```compile_fail,E0500\n fn you_know_nothing(jon_snow: &mut i32) {\n-    let nights_watch = || {\n-        *jon_snow = 2;\n-    };\n+    let nights_watch = &jon_snow;\n     let starks = || {\n         *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n                        //        but it is already borrowed\n     };\n+    println!(\"{}\", nights_watch);\n }\n ```\n \n-In here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\n+In here, `jon_snow` is already borrowed by the `nights_watch` reference, so it\n cannot be borrowed by the `starks` closure at the same time. To fix this issue,\n-you can put the closure in its own scope:\n+you can create the closure after the borrow has ended:\n \n ```\n fn you_know_nothing(jon_snow: &mut i32) {\n-    {\n-        let nights_watch = || {\n-            *jon_snow = 2;\n-        };\n-    } // At this point, `jon_snow` is free.\n+    let nights_watch = &jon_snow;\n+    println!(\"{}\", nights_watch);\n     let starks = || {\n         *jon_snow = 3;\n     };\n@@ -1261,12 +1266,10 @@ closures:\n ```\n fn you_know_nothing(jon_snow: &mut i32) {\n     let mut jon_copy = jon_snow.clone();\n-    let nights_watch = || {\n-        jon_copy = 2;\n-    };\n     let starks = || {\n         *jon_snow = 3;\n     };\n+    println!(\"{}\", jon_copy);\n }\n ```\n \"##,\n@@ -1293,26 +1296,28 @@ fn outside_closure(x: &mut i32) {\n }\n \n fn foo(a: &mut i32) {\n-    let bar = || {\n+    let mut bar = || {\n         inside_closure(a)\n     };\n     outside_closure(a); // error: cannot borrow `*a` as mutable because previous\n                         //        closure requires unique access.\n+    bar();\n }\n ```\n \n-To fix this error, you can place the closure in its own scope:\n+To fix this error, you can finish using the closure before using the captured\n+variable:\n \n ```\n fn inside_closure(x: &mut i32) {}\n fn outside_closure(x: &mut i32) {}\n \n fn foo(a: &mut i32) {\n-    {\n-        let bar = || {\n-            inside_closure(a)\n-        };\n-    } // borrow on `a` ends.\n+    let mut bar = || {\n+        inside_closure(a)\n+    };\n+    bar();\n+    // borrow on `a` ends.\n     outside_closure(a); // ok!\n }\n ```\n@@ -1324,7 +1329,7 @@ fn inside_closure(x: &mut i32) {}\n fn outside_closure(x: &mut i32) {}\n \n fn foo(a: &mut i32) {\n-    let bar = |s: &mut i32| {\n+    let mut bar = |s: &mut i32| {\n         inside_closure(s)\n     };\n     outside_closure(a);\n@@ -1340,9 +1345,10 @@ fn outside_closure(x: &mut i32) {}\n \n fn foo(a: &mut i32) {\n     outside_closure(a);\n-    let bar = || {\n+    let mut bar = || {\n         inside_closure(a)\n     };\n+    bar();\n }\n ```\n \"##,\n@@ -1359,6 +1365,7 @@ fn foo(a: &mut i32) {\n     let ref y = a; // a is borrowed as immutable.\n     bar(a); // error: cannot borrow `*a` as mutable because `a` is also borrowed\n             //        as immutable\n+    println!(\"{}\", y);\n }\n ```\n \n@@ -1370,6 +1377,7 @@ fn bar(x: &mut i32) {}\n fn foo(a: &mut i32) {\n     bar(a);\n     let ref y = a; // ok!\n+    println!(\"{}\", y);\n }\n ```\n \n@@ -1385,28 +1393,26 @@ Example of erroneous code:\n ```compile_fail,E0503\n fn main() {\n     let mut value = 3;\n-    // Create a mutable borrow of `value`. This borrow\n-    // lives until the end of this function.\n-    let _borrow = &mut value;\n+    // Create a mutable borrow of `value`.\n+    let borrow = &mut value;\n     let _sum = value + 1; // error: cannot use `value` because\n                           //        it was mutably borrowed\n+    println!(\"{}\", borrow);\n }\n ```\n \n In this example, `value` is mutably borrowed by `borrow` and cannot be\n used to calculate `sum`. This is not possible because this would violate\n Rust's mutability rules.\n \n-You can fix this error by limiting the scope of the borrow:\n+You can fix this error by finishing using the borrow before the next use of\n+the value:\n \n ```\n fn main() {\n     let mut value = 3;\n-    // By creating a new block, you can limit the scope\n-    // of the reference.\n-    {\n-        let _borrow = &mut value; // Use `_borrow` inside this block.\n-    }\n+    let borrow = &mut value;\n+    println!(\"{}\", borrow);\n     // The block has ended and with it the borrow.\n     // You can now use `value` again.\n     let _sum = value + 1;\n@@ -1422,10 +1428,11 @@ fn main() {\n     let value_cloned = value.clone();\n     // The mutable borrow is a reference to `value` and\n     // not to `value_cloned`...\n-    let _borrow = &mut value;\n+    let borrow = &mut value;\n     // ... which means we can still use `value_cloned`,\n     let _sum = value_cloned + 1;\n     // even though the borrow only ends here.\n+    println!(\"{}\", borrow);\n }\n ```\n \n@@ -1434,12 +1441,14 @@ http://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n \"##,\n \n E0504: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n This error occurs when an attempt is made to move a borrowed variable into a\n closure.\n \n Example of erroneous code:\n \n-```compile_fail,E0504\n+```compile_fail\n struct FancyNum {\n     num: u8,\n }\n@@ -1577,9 +1586,10 @@ fn eat(val: &Value) {}\n \n fn main() {\n     let x = Value{};\n-    let _ref_to_val: &Value = &x;\n+\n+    let ref_to_val: &Value = &x;\n     eat(&x); // pass by reference, if it's possible\n-    borrow(_ref_to_val);\n+    borrow(ref_to_val);\n }\n ```\n \n@@ -1594,11 +1604,11 @@ fn eat(val: Value) {}\n \n fn main() {\n     let x = Value{};\n-    {\n-        let _ref_to_val: &Value = &x;\n-        borrow(_ref_to_val);\n-    }\n-    eat(x); // release borrow and then move it.\n+\n+    let ref_to_val: &Value = &x;\n+    borrow(ref_to_val);\n+    // ref_to_val is no longer used.\n+    eat(x);\n }\n ```\n \n@@ -1614,9 +1624,9 @@ fn eat(val: Value) {}\n \n fn main() {\n     let x = Value{};\n-    let _ref_to_val: &Value = &x;\n+    let ref_to_val: &Value = &x;\n     eat(x); // it will be copied here.\n-    borrow(_ref_to_val);\n+    borrow(ref_to_val);\n }\n ```\n \n@@ -2053,11 +2063,13 @@ fn get_owned_iterator() -> IntoIter<i32> {\n \"##,\n \n E0595: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Closures cannot mutate immutable captured variables.\n \n Erroneous code example:\n \n-```compile_fail,E0595\n+```compile_fail,E0594\n let x = 3; // error: closure cannot assign to immutable local variable `x`\n let mut c = || { x += 1 };\n ```\n@@ -2090,8 +2102,7 @@ let y = &mut x; // ok!\n \"##,\n \n E0597: r##\"\n-This error occurs because a borrow was made inside a variable which has a\n-greater lifetime than the borrowed one.\n+This error occurs because a value was dropped while it was still borrowed\n \n Example of erroneous code:\n \n@@ -2101,23 +2112,28 @@ struct Foo<'a> {\n }\n \n let mut x = Foo { x: None };\n-let y = 0;\n-x.x = Some(&y); // error: `y` does not live long enough\n+{\n+    let y = 0;\n+    x.x = Some(&y); // error: `y` does not live long enough\n+}\n+println!(\"{:?}\", x.x);\n ```\n \n-In here, `x` is created before `y` and therefore has a greater lifetime. Always\n-keep in mind that values in a scope are dropped in the opposite order they are\n-created. So to fix the previous example, just make the `y` lifetime greater than\n-the `x`'s one:\n+In here, `y` is dropped at the end of the inner scope, but it is borrowed by\n+`x` until the `println`. To fix the previous example, just remove the scope\n+so that `y` isn't dropped until after the println\n \n ```\n struct Foo<'a> {\n     x: Option<&'a u32>,\n }\n \n-let y = 0;\n let mut x = Foo { x: None };\n+\n+let y = 0;\n x.x = Some(&y);\n+\n+println!(\"{:?}\", x.x);\n ```\n \"##,\n "}, {"sha": "7bfb0a4475ec13bbecb91090672ea7f0fc2bf7d7", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -565,7 +565,7 @@ fn check_legality_of_move_bindings(\n             let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n                                            \"cannot bind by-move into a pattern guard\");\n             err.span_label(p.span, \"moves value into pattern guard\");\n-            if cx.tcx.sess.opts.unstable_features.is_nightly_build() && cx.tcx.use_mir_borrowck() {\n+            if cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n                 err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n                           crate attributes to enable\");\n             }\n@@ -649,9 +649,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n                 let mut err = struct_span_err!(self.cx.tcx.sess, span, E0301,\n                           \"cannot mutably borrow in a pattern guard\");\n                 err.span_label(span, \"borrowed mutably in pattern guard\");\n-                if self.cx.tcx.sess.opts.unstable_features.is_nightly_build() &&\n-                    self.cx.tcx.use_mir_borrowck()\n-                {\n+                if self.cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n                     err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n                               crate attributes to enable\");\n                 }"}, {"sha": "e334e27cc855663e12527bb4a009c0e78ac4c347", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -40,7 +40,7 @@ impl Origin {\n     pub fn should_emit_errors(self, mode: BorrowckMode) -> bool {\n         match self {\n             Origin::Ast => mode.use_ast(),\n-            Origin::Mir => mode.use_mir(),\n+            Origin::Mir => true,\n         }\n     }\n }"}, {"sha": "ba567a123aec12a5e8a63b3ed02d2612c6fae7b7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -445,9 +445,7 @@ declare_features! (\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n     // Allow mixing of bind-by-move in patterns and references to\n-    // those identifiers in guards, *if* we are using MIR-borrowck\n-    // (aka NLL). Essentially this means you need to be using the\n-    // 2018 edition or later.\n+    // those identifiers in guards.\n     (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n \n     // Allows `impl Trait` in bindings (`let`, `const`, `static`)."}, {"sha": "5317a9962f47ac3202ebce66fb1782c008a7811e", "filename": "src/test/incremental/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fincremental%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fincremental%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Ffeature_gate.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -4,10 +4,10 @@\n // compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n-#![cfg_attr(rpass1, feature(nll))]\n+#![cfg_attr(rpass1, feature(abi_unadjusted))]\n \n fn main() {\n-    let mut v = vec![1];\n-    v.push(v[0]);\n-    //[cfail2]~^ ERROR cannot borrow\n }\n+\n+extern \"unadjusted\" fn foo() {}\n+//[cfail2]~^ ERROR: unadjusted ABI is an implementation detail and perma-unstable"}, {"sha": "a5317f98ef1885df9f20df65aae3a88a0172671d", "filename": "src/test/mir-opt/match_test.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fmir-opt%2Fmatch_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -60,9 +60,11 @@ fn main() {\n //        goto -> bb16;\n //    }\n //    bb12: {\n-//        StorageLive(_8);\n-//        _8 = _2;\n-//        switchInt(move _8) -> [false: bb6, otherwise: bb11];\n+//        _8 = &shallow _1;\n+//        StorageLive(_9);\n+//        _9 = _2;\n+//        FakeRead(ForMatchGuard, _8);\n+//        switchInt(move _9) -> [false: bb6, otherwise: bb11];\n //    }\n //    bb13: {\n //        _3 = const 1i32;\n@@ -77,7 +79,7 @@ fn main() {\n //        goto -> bb16;\n //    }\n //    bb16: {\n-//        StorageDead(_8);\n+//        StorageDead(_9);\n //        _0 = ();\n //        StorageDead(_2);\n //        StorageDead(_1);"}, {"sha": "d07f76b6252dc17044cc1bac972eb4b4f162d74b", "filename": "src/test/run-fail/borrowck-local-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:panic 1\n \n-// revisions: ast mir\n+// revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n fn main() {"}, {"sha": "8726db355551b6b5cfd8e27c3b35f6c22d782a70", "filename": "src/test/run-pass/asm-in-moved.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fasm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fasm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-moved.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(asm)]\n #![allow(dead_code)]\n "}, {"sha": "5c46cb92c6b10cb5ed8615372e1598feea57719c", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]"}, {"sha": "72bf43da95e577100f1dca56308ad5de0fbd36cb", "filename": "src/test/run-pass/borrowck/borrowck-assignment-to-static-mut.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,9 +2,6 @@\n #![allow(dead_code)]\n // Test taken from #45641 (https://github.com/rust-lang/rust/issues/45641)\n \n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n static mut Y: u32 = 0;\n \n unsafe fn should_ok() {"}, {"sha": "adc7dfd541f48a102c7a57aec6c0a094e4f2c54b", "filename": "src/test/run-pass/borrowck/borrowck-unsafe-static-mutable-borrows.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n // Test file taken from issue 45129 (https://github.com/rust-lang/rust/issues/45129)\n "}, {"sha": "994dc823dfc0c5da1acb9889f4a0a1166706478b", "filename": "src/test/run-pass/borrowck/two-phase-baseline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-baseline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-baseline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-baseline.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// compile-flags: -Z borrowck=mir -Z two-phase-borrows\n \n // This is the \"goto example\" for why we want two phase borrows.\n "}, {"sha": "0b20e1945e6f2f6e28ecfda0805d720111e42a60", "filename": "src/test/run-pass/borrowck/two-phase-control-flow-split-before-activation.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-control-flow-split-before-activation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-control-flow-split-before-activation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Ftwo-phase-control-flow-split-before-activation.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,8 +1,4 @@\n // run-pass\n-// revisions: lxl nll\n-//[lxl]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n-\n-#![cfg_attr(nll, feature(nll))]\n \n fn main() {\n     let mut a = 0;"}, {"sha": "399b577dccb2f96f7f80926c0ee9a04887d2c995", "filename": "src/test/run-pass/drop/dynamic-drop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n-// revisions:lexical nll\n-#![cfg_attr(nll, feature(nll))]\n \n // ignore-wasm32-bare compiled with panic=abort by default\n "}, {"sha": "fe88d424dd1653095c733cf6d4f632533baa02d7", "filename": "src/test/run-pass/generator/yield-subtype.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,9 +2,6 @@\n #![allow(dead_code)]\n #![allow(dead_code)]\n \n-// revisions:lexical nll\n-#![cfg_attr(nll, feature(nll))]\n-\n #![feature(generators)]\n \n fn bar<'a>() {"}, {"sha": "968e9b7d34ab7606b1c2c18498d3e4aa88aca76e", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,8 +1,5 @@\n // run-pass\n \n-// revisions: normal nll\n-//[nll] compile-flags:-Zborrowck=mir\n-\n #![feature(fn_traits,\n            step_trait,\n            unboxed_closures,"}, {"sha": "04382be27d7a5d1786a85401178786b605e3f406", "filename": "src/test/run-pass/issues/issue-26996.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26996.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26996.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-26996.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,9 +2,9 @@\n \n // This test is bogus (i.e., should be compile-fail) during the period\n // where #54986 is implemented and #54987 is *not* implemented. For\n-// now: just ignore it under nll\n+// now: just ignore it\n //\n-// ignore-compare-mode-nll\n+// ignore-test\n \n // This test is checking that the write to `c.0` (which has been moved out of)\n // won't overwrite the state in `c2`."}, {"sha": "30551375450825a9ede851354086852bab4a368b", "filename": "src/test/run-pass/issues/issue-27021.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-27021.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,9 +2,9 @@\n \n // This test is bogus (i.e., should be compile-fail) during the period\n // where #54986 is implemented and #54987 is *not* implemented. For\n-// now: just ignore it under nll\n+// now: just ignore it\n //\n-// ignore-compare-mode-nll\n+// ignore-test\n \n // These are variants of issue-26996.rs. In all cases we are writing\n // into a record field that has been moved out of, and ensuring that"}, {"sha": "697a160b4ecb44a110998844923be5741b3c9bd6", "filename": "src/test/run-pass/issues/issue-49298.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49298.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49298.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-49298.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -4,9 +4,9 @@\n \n // This test is bogus (i.e., should be compile-fail) during the period\n // where #54986 is implemented and #54987 is *not* implemented. For\n-// now: just ignore it under nll\n+// now: just ignore it\n //\n-// ignore-compare-mode-nll\n+// ignore-test\n \n // This test is checking that the space allocated for `x.1` does not\n // overlap with `y`. (The reason why such a thing happened at one"}, {"sha": "7009c0bba6981b59b74d5916727afe21f37bc992", "filename": "src/test/ui-fulldeps/dropck-tarena-cycle-checked.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-cycle-checked.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,12 +1,13 @@\n error[E0597]: `arena` does not live long enough\n-  --> $DIR/dropck-tarena-cycle-checked.rs:116:8\n+  --> $DIR/dropck-tarena-cycle-checked.rs:116:7\n    |\n LL |     f(&arena);\n-   |        ^^^^^ borrowed value does not live long enough\n+   |       ^^^^^^ borrowed value does not live long enough\n LL | }\n-   | - `arena` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n+   | -\n+   | |\n+   | `arena` dropped here while still borrowed\n+   | borrow might be used here, when `arena` is dropped and runs the `Drop` code for type `arena::TypedArena`\n \n error: aborting due to previous error\n "}, {"sha": "319848b989634261ec1daaa61dd4ebbf7f02490e", "filename": "src/test/ui-fulldeps/dropck-tarena-unsound-drop.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-unsound-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-unsound-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck-tarena-unsound-drop.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,12 +1,13 @@\n error[E0597]: `arena` does not live long enough\n-  --> $DIR/dropck-tarena-unsound-drop.rs:41:8\n+  --> $DIR/dropck-tarena-unsound-drop.rs:41:7\n    |\n LL |     f(&arena);\n-   |        ^^^^^ borrowed value does not live long enough\n+   |       ^^^^^^ borrowed value does not live long enough\n LL | }\n-   | - `arena` dropped here while still borrowed\n-   |\n-   = note: values in a scope are dropped in the opposite order they are created\n+   | -\n+   | |\n+   | `arena` dropped here while still borrowed\n+   | borrow might be used here, when `arena` is dropped and runs the `Drop` code for type `arena::TypedArena`\n \n error: aborting due to previous error\n "}, {"sha": "e2f54c6553f05fd6326c022b4d917306160231e2", "filename": "src/test/ui/E0501.ast.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0501.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0501.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,31 +0,0 @@\n-error[E0501]: cannot borrow `*a` as mutable because previous closure requires unique access\n-  --> $DIR/E0501.rs:18:23\n-   |\n-LL |     let bar = || {\n-   |               -- closure construction occurs here\n-LL |         inside_closure(a)\n-   |                        - previous borrow occurs due to use of `a` in closure\n-LL |     };\n-LL |     outside_closure_1(a);\n-   |                       ^ borrow occurs here\n-...\n-LL | }\n-   | - borrow from closure ends here\n-\n-error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n-  --> $DIR/E0501.rs:21:23\n-   |\n-LL |     let bar = || {\n-   |               -- closure construction occurs here\n-LL |         inside_closure(a)\n-   |                        - previous borrow occurs due to use of `a` in closure\n-...\n-LL |     outside_closure_2(a);\n-   |                       ^ borrow occurs here\n-...\n-LL | }\n-   | - borrow from closure ends here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0501`."}, {"sha": "74f14bebcc90511c8843a69c1771a2c21b97e6c3", "filename": "src/test/ui/E0501.mir.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0501.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0501.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,31 +0,0 @@\n-error[E0501]: cannot borrow `*a` as mutable because previous closure requires unique access\n-  --> $DIR/E0501.rs:18:23\n-   |\n-LL |     let bar = || {\n-   |               -- closure construction occurs here\n-LL |         inside_closure(a)\n-   |                        - first borrow occurs due to use of `a` in closure\n-LL |     };\n-LL |     outside_closure_1(a);\n-   |                       ^ second borrow occurs here\n-...\n-LL |     drop(bar);\n-   |          --- first borrow later used here\n-\n-error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n-  --> $DIR/E0501.rs:21:23\n-   |\n-LL |     let bar = || {\n-   |               -- closure construction occurs here\n-LL |         inside_closure(a)\n-   |                        - first borrow occurs due to use of `a` in closure\n-...\n-LL |     outside_closure_2(a);\n-   |                       ^ second borrow occurs here\n-...\n-LL |     drop(bar);\n-   |          --- first borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0501`."}, {"sha": "3e39d9a63c59db42bbbf6ab0f9fa47fd1e000704", "filename": "src/test/ui/E0501.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,7 +1,3 @@\n-// ignore-tidy-linelength\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n fn inside_closure(x: &mut i32) {\n }\n \n@@ -15,11 +11,11 @@ fn foo(a: &mut i32) {\n     let bar = || {\n         inside_closure(a)\n     };\n-    outside_closure_1(a); //[ast]~ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n-    //[mir]~^ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n+    outside_closure_1(a);\n+    //~^ ERROR cannot borrow `*a` as mutable because previous closure requires unique access\n \n-    outside_closure_2(a); //[ast]~ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n-    //[mir]~^ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n+    outside_closure_2(a);\n+    //~^ ERROR cannot borrow `*a` as immutable because previous closure requires unique access\n \n     drop(bar);\n }"}, {"sha": "53d98d7e13fee6852c9c1b4621eb152899640d49", "filename": "src/test/ui/E0501.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0501.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0501.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0501.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0501]: cannot borrow `*a` as mutable because previous closure requires unique access\n-  --> $DIR/E0501.rs:18:23\n+  --> $DIR/E0501.rs:14:23\n    |\n LL |     let bar = || {\n    |               -- closure construction occurs here\n@@ -13,7 +13,7 @@ LL |     drop(bar);\n    |          --- first borrow later used here\n \n error[E0501]: cannot borrow `*a` as immutable because previous closure requires unique access\n-  --> $DIR/E0501.rs:21:23\n+  --> $DIR/E0501.rs:17:23\n    |\n LL |     let bar = || {\n    |               -- closure construction occurs here", "previous_filename": "src/test/ui/E0501.ast.nll.stderr"}, {"sha": "3e3001f232c89159434fea88c79811ab4d5734d0", "filename": "src/test/ui/E0506.ast.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0506.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0506.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0506]: cannot assign to `fancy_num` because it is borrowed\n-  --> $DIR/E0506.rs:11:5\n-   |\n-LL |     let fancy_ref = &fancy_num;\n-   |                      --------- borrow of `fancy_num` occurs here\n-LL |     fancy_num = FancyNum { num: 6 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "6e2d63441e25a712704dcb7f76ffd337bfcd1bdf", "filename": "src/test/ui/E0506.mir.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0506.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0506.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0506]: cannot assign to `fancy_num` because it is borrowed\n-  --> $DIR/E0506.rs:11:5\n-   |\n-LL |     let fancy_ref = &fancy_num;\n-   |                     ---------- borrow of `fancy_num` occurs here\n-LL |     fancy_num = FancyNum { num: 6 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n-...\n-LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n-   |                                                 ------------- borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "062a44a52bb8b431ea4b385575e0cf41366701d2", "filename": "src/test/ui/E0506.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,15 +1,11 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n struct FancyNum {\n     num: u8,\n }\n \n fn main() {\n     let mut fancy_num = FancyNum { num: 5 };\n     let fancy_ref = &fancy_num;\n-    fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n-                                     //[mir]~^ ERROR [E0506]\n+    fancy_num = FancyNum { num: 6 }; //~ ERROR [E0506]\n \n     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n }"}, {"sha": "17f883f84b8a2ad6855c40c468b692a746e212dc", "filename": "src/test/ui/E0506.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0506.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,11 +1,11 @@\n error[E0506]: cannot assign to `fancy_num` because it is borrowed\n-  --> $DIR/E0506.rs:11:5\n+  --> $DIR/E0506.rs:8:5\n    |\n LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n LL |     fancy_num = FancyNum { num: 6 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n-...\n+LL | \n LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n    |                                                 ------------- borrow later used here\n ", "previous_filename": "src/test/ui/E0506.ast.nll.stderr"}, {"sha": "972b84e37beba368884a8a8d55c98dcc2aeec959", "filename": "src/test/ui/E0508-fail.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508-fail.rs:8:18\n-   |\n-LL |     let _value = array[0];\n-   |                  ^^^^^^^^\n-   |                  |\n-   |                  cannot move out of here\n-   |                  help: consider borrowing here: `&array[0]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0508`."}, {"sha": "8b249839f01ef5d1742d0b4a5e68b2e949888d87", "filename": "src/test/ui/E0508-fail.ast.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0508-fail.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0508-fail.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508-fail.rs:8:18\n-   |\n-LL |     let _value = array[0];\n-   |                  ^^^^^^^^\n-   |                  |\n-   |                  cannot move out of here\n-   |                  help: consider using a reference instead: `&array[0]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0508`."}, {"sha": "972b84e37beba368884a8a8d55c98dcc2aeec959", "filename": "src/test/ui/E0508-fail.mir.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0508-fail.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508-fail.rs:8:18\n-   |\n-LL |     let _value = array[0];\n-   |                  ^^^^^^^^\n-   |                  |\n-   |                  cannot move out of here\n-   |                  help: consider borrowing here: `&array[0]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0508`."}, {"sha": "072c3d66183e33d38f8e119722510f3326ef3d25", "filename": "src/test/ui/E0508-fail.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0508-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0508-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,6 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n struct NonCopy;\n \n fn main() {\n     let array = [NonCopy; 1];\n-    let _value = array[0];  //[ast]~ ERROR [E0508]\n-                            //[mir]~^ ERROR [E0508]\n+    let _value = array[0];  //~ ERROR [E0508]\n }"}, {"sha": "63590bec32e28909bd75e0210d7a460e050ae1ed", "filename": "src/test/ui/E0508-fail.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0508-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0508-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508-fail.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n-  --> $DIR/E0508.rs:5:18\n+  --> $DIR/E0508-fail.rs:5:18\n    |\n LL |     let _value = array[0];\n    |                  ^^^^^^^^", "previous_filename": "src/test/ui/E0508.nll.stderr"}, {"sha": "983062e450ea7573aefdc385ea598b1bcd508363", "filename": "src/test/ui/E0508.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -5,7 +5,7 @@ LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here\n-   |                  help: consider using a reference instead: `&array[0]`\n+   |                  help: consider borrowing here: `&array[0]`\n \n error: aborting due to previous error\n "}, {"sha": "06171f1a9c15cbcb736a0454569c0164ec89be26", "filename": "src/test/ui/E0594.ast.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0594.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0594.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,8 +0,0 @@\n-error[E0594]: cannot assign to immutable static item\n-  --> $DIR/E0594.rs:7:5\n-   |\n-LL |     NUM = 20;\n-   |     ^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "4bc7fcf5c0f4a750374ccc6da93bc1b4d1403886", "filename": "src/test/ui/E0594.mir.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0594.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0594.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,8 +0,0 @@\n-error[E0594]: cannot assign to immutable static item `NUM`\n-  --> $DIR/E0594.rs:7:5\n-   |\n-LL |     NUM = 20;\n-   |     ^^^^^^^^ cannot assign\n-\n-error: aborting due to previous error\n-"}, {"sha": "8b0cae7e17b3010720d689f840711d066cde461b", "filename": "src/test/ui/E0594.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,9 +1,5 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n static NUM: i32 = 18;\n \n fn main() {\n-    NUM = 20; //[ast]~ ERROR E0594\n-              //[mir]~^ ERROR cannot assign to immutable static item `NUM`\n+    NUM = 20; //~ ERROR cannot assign to immutable static item `NUM`\n }"}, {"sha": "c00ec4250a70b5ede7a451549d881bb3ba035650", "filename": "src/test/ui/E0594.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0594.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to immutable static item `NUM`\n-  --> $DIR/E0594.rs:7:5\n+  --> $DIR/E0594.rs:4:5\n    |\n LL |     NUM = 20;\n    |     ^^^^^^^^ cannot assign", "previous_filename": "src/test/ui/E0594.ast.nll.stderr"}, {"sha": "c89a915cfbd23fb55f83094b75a0cfeed178f35f", "filename": "src/test/ui/E0596.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0596.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0596.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/E0596.rs:6:13\n-   |\n-LL |     let x = 1;\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     let y = &mut x;\n-   |             ^^^^^^ cannot borrow as mutable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "4b66e49ba85b7d0a8727ca565c1b1cf61ef51409", "filename": "src/test/ui/E0596.ast.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0596.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2FE0596.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0596]: cannot borrow immutable local variable `x` as mutable\n-  --> $DIR/E0596.rs:6:18\n-   |\n-LL |     let x = 1;\n-   |         - help: make this binding mutable: `mut x`\n-LL |     let y = &mut x;\n-   |                  ^ cannot borrow mutably\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "9e2f5ee763639b8f36a3bf4a8f5f33dfe3b5f6fd", "filename": "src/test/ui/E0596.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,8 +1,4 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n fn main() {\n     let x = 1;\n-    let y = &mut x; //[ast]~ ERROR [E0596]\n-                    //[mir]~^ ERROR [E0596]\n+    let y = &mut x; //~ ERROR [E0596]\n }"}, {"sha": "79bc258f1fae7a7605430fbfa344818374166b47", "filename": "src/test/ui/E0596.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2FE0596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0596.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/E0596.rs:6:13\n+  --> $DIR/E0596.rs:3:13\n    |\n LL |     let x = 1;\n    |         - help: consider changing this to be mutable: `mut x`", "previous_filename": "src/test/ui/E0596.mir.stderr"}, {"sha": "713eeba5459772a8778f09ab7427a67db4e0eb86", "filename": "src/test/ui/access-mode-in-closures.nll.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,18 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/access-mode-in-closures.rs:8:15\n-   |\n-LL |         match *s { S(v) => v }\n-   |               ^^     - data moved here\n-   |               |\n-   |               cannot move out of borrowed content\n-   |               help: consider removing the `*`: `s`\n-   |\n-note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/access-mode-in-closures.rs:8:22\n-   |\n-LL |         match *s { S(v) => v }\n-   |                      ^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "713eeba5459772a8778f09ab7427a67db4e0eb86", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,9 +2,16 @@ error[E0507]: cannot move out of borrowed content\n   --> $DIR/access-mode-in-closures.rs:8:15\n    |\n LL |         match *s { S(v) => v }\n-   |               ^^     - hint: to prevent move, use `ref v` or `ref mut v`\n+   |               ^^     - data moved here\n    |               |\n    |               cannot move out of borrowed content\n+   |               help: consider removing the `*`: `s`\n+   |\n+note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/access-mode-in-closures.rs:8:22\n+   |\n+LL |         match *s { S(v) => v }\n+   |                      ^\n \n error: aborting due to previous error\n "}, {"sha": "ac38218b8492fd9b919efaa40d8677e589ccaf91", "filename": "src/test/ui/asm/asm-out-assign-imm.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:24:34\n-   |\n-LL |     let x: isize;\n-   |         - help: make this binding mutable: `mut x`\n-LL |     x = 1;\n-   |     ----- first assignment to `x`\n-...\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-   |                                  ^ cannot assign twice to immutable variable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "ac38218b8492fd9b919efaa40d8677e589ccaf91", "filename": "src/test/ui/asm/asm-out-assign-imm.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-assign-imm.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,8 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/asm-out-assign-imm.rs:24:34\n    |\n+LL |     let x: isize;\n+   |         - help: make this binding mutable: `mut x`\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ..."}, {"sha": "cf74298be4a5d920ea223d55424711581d943b48", "filename": "src/test/ui/asm/asm-out-read-uninit.ast.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/asm-out-read-uninit.rs:25:43\n-   |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-   |                                           ^ use of possibly uninitialized `x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "003f1fc5bb62b0fd4187d16a15989dd1b2c3b143", "filename": "src/test/ui/asm/asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -8,9 +8,6 @@\n // ignore-mips\n // ignore-mips64\n \n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(asm)]\n \n fn foo(x: isize) { println!(\"{}\", x); }\n@@ -23,8 +20,7 @@ pub fn main() {\n     let x: isize;\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-        //[ast]~^ ERROR use of possibly uninitialized variable: `x`\n-        //[mir]~^^ ERROR use of possibly uninitialized variable: `x`\n+        //~^ ERROR use of possibly uninitialized variable: `x`\n     }\n     foo(x);\n }"}, {"sha": "6d0445d4b7a61a13d57241b9e4f14af03106b2b6", "filename": "src/test/ui/asm/asm-out-read-uninit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-read-uninit.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/asm-out-read-uninit.rs:25:43\n+  --> $DIR/asm-out-read-uninit.rs:22:43\n    |\n LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n    |                                           ^ use of possibly uninitialized `x`", "previous_filename": "src/test/ui/asm/asm-out-read-uninit.mir.stderr"}, {"sha": "2995a139ae4b09b1db4c43778c9f92e93c452ce8", "filename": "src/test/ui/assign-imm-local-twice.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/assign-imm-local-twice.rs:11:5\n-   |\n-LL |     let v: isize;\n-   |         - help: make this binding mutable: `mut v`\n-...\n-LL |     v = 1;\n-   |     ----- first assignment to `v`\n-...\n-LL |     v = 2;\n-   |     ^^^^^ cannot assign twice to immutable variable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "f16b8e2ebd7ccb51bb40adc7d3a2dfe9c90faa31", "filename": "src/test/ui/assign-imm-local-twice.ast.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/assign-imm-local-twice.rs:11:5\n-   |\n-LL |     v = 1;\n-   |     ----- first assignment to `v`\n-...\n-LL |     v = 2;\n-   |     ^^^^^ cannot assign twice to immutable variable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "c1c9bf62819af5b6fcb258df381f2a3de3927b3d", "filename": "src/test/ui/assign-imm-local-twice.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,17 +1,11 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Zborrowck=mir\n-\n fn test() {\n     let v: isize;\n-    //[mir]~^ HELP make this binding mutable\n-    //[mir]~| SUGGESTION mut v\n-    v = 1; //[ast]~ NOTE first assignment\n-           //[mir]~^ NOTE first assignment\n+    //~^ HELP make this binding mutable\n+    //~| SUGGESTION mut v\n+    v = 1; //~ NOTE first assignment\n     println!(\"v={}\", v);\n-    v = 2; //[ast]~ ERROR cannot assign twice to immutable variable\n-           //[mir]~^ ERROR cannot assign twice to immutable variable `v`\n-           //[ast]~| NOTE cannot assign twice to immutable\n-           //[mir]~| NOTE cannot assign twice to immutable\n+    v = 2; //~ ERROR cannot assign twice to immutable variable\n+           //~| NOTE cannot assign twice to immutable\n     println!(\"v={}\", v);\n }\n "}, {"sha": "df0f4c4d80608867d3e6e14d85046f4e58d81cc4", "filename": "src/test/ui/assign-imm-local-twice.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,12 +1,12 @@\n error[E0384]: cannot assign twice to immutable variable `v`\n-  --> $DIR/assign-imm-local-twice.rs:11:5\n+  --> $DIR/assign-imm-local-twice.rs:7:5\n    |\n LL |     let v: isize;\n    |         - help: make this binding mutable: `mut v`\n ...\n LL |     v = 1;\n    |     ----- first assignment to `v`\n-...\n+LL |     println!(\"v={}\", v);\n LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable\n ", "previous_filename": "src/test/ui/assign-imm-local-twice.mir.stderr"}, {"sha": "840e33b4b8a8e900cedd6b87f1794cfd10434097", "filename": "src/test/ui/associated-types/associated-types-outlives.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/associated-types-outlives.rs:22:14\n-   |\n-LL |         's: loop { y = denormalise(&x); break }\n-   |                                    -- borrow of `x` occurs here\n-LL |         drop(x);\n-   |              ^ move out of `x` occurs here\n-LL |         return f(y);\n-   |                  - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0505`."}, {"sha": "840e33b4b8a8e900cedd6b87f1794cfd10434097", "filename": "src/test/ui/associated-types/associated-types-outlives.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,9 +2,11 @@ error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/associated-types-outlives.rs:22:14\n    |\n LL |         's: loop { y = denormalise(&x); break }\n-   |                                     - borrow of `x` occurs here\n+   |                                    -- borrow of `x` occurs here\n LL |         drop(x);\n    |              ^ move out of `x` occurs here\n+LL |         return f(y);\n+   |                  - borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "1b3c2fccf95a1c5bc3cdbb6c8f0fc182df0b628f", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,22 +0,0 @@\n-error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/augmented-assignments.rs:16:5\n-   |\n-LL |     x\n-   |     - borrow of `x` occurs here\n-...\n-LL |     x;\n-   |     ^ move out of `x` occurs here\n-\n-error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/augmented-assignments.rs:21:5\n-   |\n-LL |     let y = Int(2);\n-   |         - help: consider changing this to be mutable: `mut y`\n-...\n-LL |     y\n-   |     ^ cannot borrow as mutable\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0505, E0596.\n-For more information about an error, try `rustc --explain E0505`."}, {"sha": "1b4ac6edcb0d5547ce40b2099cb97c3bb501c55e", "filename": "src/test/ui/augmented-assignments.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -10,16 +10,18 @@ impl AddAssign for Int {\n \n fn main() {\n     let mut x = Int(1);\n-    x   //~ error: use of moved value: `x`\n-    //~^ value used here after move\n+    x\n+    //~^ NOTE borrow of `x` occurs here\n     +=\n-    x;  //~ value moved here\n+    x;\n+    //~^ ERROR cannot move out of `x` because it is borrowed\n+    //~| move out of `x` occurs here\n \n     let y = Int(2);\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider changing this to be mutable\n     //~| SUGGESTION mut y\n-    y   //~ error: cannot borrow immutable local variable `y` as mutable\n-        //~| cannot borrow\n+    y   //~ ERROR cannot borrow `y` as mutable, as it is not declared as mutable\n+        //~| cannot borrow as mutable\n     +=\n     Int(1);\n }"}, {"sha": "ce555da8975a7af622eb377ec85f114da441d0b6", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,24 +1,22 @@\n-error[E0596]: cannot borrow immutable local variable `y` as mutable\n-  --> $DIR/augmented-assignments.rs:21:5\n-   |\n-LL |     let y = Int(2);\n-   |         - help: make this binding mutable: `mut y`\n-...\n-LL |     y\n-   |     ^ cannot borrow mutably\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/augmented-assignments.rs:13:5\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/augmented-assignments.rs:16:5\n    |\n LL |     x\n-   |     ^ value used here after move\n+   |     - borrow of `x` occurs here\n ...\n LL |     x;\n-   |     - value moved here\n+   |     ^ move out of `x` occurs here\n+\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n+  --> $DIR/augmented-assignments.rs:23:5\n    |\n-   = note: move occurs because `x` has type `Int`, which does not implement the `Copy` trait\n+LL |     let y = Int(2);\n+   |         - help: consider changing this to be mutable: `mut y`\n+...\n+LL |     y\n+   |     ^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0382, E0596.\n-For more information about an error, try `rustc --explain E0382`.\n+Some errors have detailed explanations: E0505, E0596.\n+For more information about an error, try `rustc --explain E0505`."}, {"sha": "5f8b7007f304c5468b746ded4904efa753fa52d4", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/bind-by-move-no-guards.rs:8:14\n-   |\n-LL |         Some(z) if z.recv().unwrap() => { panic!() },\n-   |              ^ moves value into pattern guard\n-   |\n-   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0008`."}, {"sha": "5f8b7007f304c5468b746ded4904efa753fa52d4", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -3,6 +3,8 @@ error[E0008]: cannot bind by-move into a pattern guard\n    |\n LL |         Some(z) if z.recv().unwrap() => { panic!() },\n    |              ^ moves value into pattern guard\n+   |\n+   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "5751af27fcb424109c7bb739b9e928a09d1d1f78", "filename": "src/test/ui/binop/binop-consume-args.nll.stderr", "status": "removed", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,253 +0,0 @@\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:7:10\n-   |\n-LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        consider adding a `Copy` constraint to this type argument\n-LL |     lhs + rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:8:10\n-   |\n-LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n-LL |     lhs + rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:13:10\n-   |\n-LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        consider adding a `Copy` constraint to this type argument\n-LL |     lhs - rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:14:10\n-   |\n-LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n-LL |     lhs - rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:19:10\n-   |\n-LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        consider adding a `Copy` constraint to this type argument\n-LL |     lhs * rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:20:10\n-   |\n-LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n-LL |     lhs * rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:25:10\n-   |\n-LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        consider adding a `Copy` constraint to this type argument\n-LL |     lhs / rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:26:10\n-   |\n-LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n-LL |     lhs / rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:31:10\n-   |\n-LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        consider adding a `Copy` constraint to this type argument\n-LL |     lhs % rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:32:10\n-   |\n-LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n-LL |     lhs % rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:37:10\n-   |\n-LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |           |\n-   |           consider adding a `Copy` constraint to this type argument\n-LL |     lhs & rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:38:10\n-   |\n-LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                                    |\n-   |                                    consider adding a `Copy` constraint to this type argument\n-LL |     lhs & rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:43:10\n-   |\n-LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |          -                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |          |\n-   |          consider adding a `Copy` constraint to this type argument\n-LL |     lhs | rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:44:10\n-   |\n-LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                  -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                                  |\n-   |                                  consider adding a `Copy` constraint to this type argument\n-LL |     lhs | rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:49:10\n-   |\n-LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |           |\n-   |           consider adding a `Copy` constraint to this type argument\n-LL |     lhs ^ rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:50:10\n-   |\n-LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                                    |\n-   |                                    consider adding a `Copy` constraint to this type argument\n-LL |     lhs ^ rhs;\n-   |           --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:55:10\n-   |\n-LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        consider adding a `Copy` constraint to this type argument\n-LL |     lhs << rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:56:10\n-   |\n-LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n-LL |     lhs << rhs;\n-   |            --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `lhs`\n-  --> $DIR/binop-consume-args.rs:61:10\n-   |\n-LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n-   |        |\n-   |        consider adding a `Copy` constraint to this type argument\n-LL |     lhs >> rhs;\n-   |     --- value moved here\n-LL |     drop(lhs);\n-   |          ^^^ value used here after move\n-\n-error[E0382]: use of moved value: `rhs`\n-  --> $DIR/binop-consume-args.rs:62:10\n-   |\n-LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n-   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n-   |                              |\n-   |                              consider adding a `Copy` constraint to this type argument\n-LL |     lhs >> rhs;\n-   |            --- value moved here\n-LL |     drop(lhs);\n-LL |     drop(rhs);\n-   |          ^^^ value used here after move\n-\n-error: aborting due to 20 previous errors\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "5751af27fcb424109c7bb739b9e928a09d1d1f78", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 80, "deletions": 40, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,212 +1,252 @@\n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:7:10\n    |\n+LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n LL |     lhs + rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:8:10\n    |\n+LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs + rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:13:10\n    |\n+LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n LL |     lhs - rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:14:10\n    |\n+LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs - rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:19:10\n    |\n+LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n LL |     lhs * rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:20:10\n    |\n+LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs * rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:25:10\n    |\n+LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n LL |     lhs / rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:26:10\n    |\n+LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs / rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:31:10\n    |\n+LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n LL |     lhs % rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:32:10\n    |\n+LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs % rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:37:10\n    |\n+LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |           |\n+   |           consider adding a `Copy` constraint to this type argument\n LL |     lhs & rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:38:10\n    |\n+LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                                    |\n+   |                                    consider adding a `Copy` constraint to this type argument\n LL |     lhs & rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:43:10\n    |\n+LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |          -                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |          |\n+   |          consider adding a `Copy` constraint to this type argument\n LL |     lhs | rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:44:10\n    |\n+LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                  -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                                  |\n+   |                                  consider adding a `Copy` constraint to this type argument\n LL |     lhs | rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:49:10\n    |\n+LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |           |\n+   |           consider adding a `Copy` constraint to this type argument\n LL |     lhs ^ rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:50:10\n    |\n+LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                                    |\n+   |                                    consider adding a `Copy` constraint to this type argument\n LL |     lhs ^ rhs;\n    |           --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:55:10\n    |\n+LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n LL |     lhs << rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:56:10\n    |\n+LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs << rhs;\n    |            --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `lhs`\n   --> $DIR/binop-consume-args.rs:61:10\n    |\n+LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n LL |     lhs >> rhs;\n    |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `rhs`\n   --> $DIR/binop-consume-args.rs:62:10\n    |\n+LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n LL |     lhs >> rhs;\n    |            --- value moved here\n LL |     drop(lhs);\n LL |     drop(rhs);\n    |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n \n error: aborting due to 20 previous errors\n "}, {"sha": "146e378146333fa9896762baea91eb81f73c287f", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,95 +0,0 @@\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/binop-move-semantics.rs:8:5\n-   |\n-LL | fn double_move<T: Add<Output=()>>(x: T) {\n-   |                -                  - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n-   |                |\n-   |                consider adding a `Copy` constraint to this type argument\n-LL |     x\n-   |     - value moved here\n-LL |     +\n-LL |     x;\n-   |     ^ value used here after move\n-\n-error[E0382]: borrow of moved value: `x`\n-  --> $DIR/binop-move-semantics.rs:14:5\n-   |\n-LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n-   |                     -                          - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n-   |                     |\n-   |                     consider adding a `Copy` constraint to this type argument\n-LL |     x\n-   |     - value moved here\n-LL |     +\n-LL |     x.clone();\n-   |     ^ value borrowed here after move\n-\n-error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/binop-move-semantics.rs:21:5\n-   |\n-LL |     let m = &x;\n-   |             -- borrow of `x` occurs here\n-...\n-LL |     x\n-   |     ^ move out of `x` occurs here\n-...\n-LL |     use_mut(n); use_imm(m);\n-   |                         - borrow later used here\n-\n-error[E0505]: cannot move out of `y` because it is borrowed\n-  --> $DIR/binop-move-semantics.rs:23:5\n-   |\n-LL |     let n = &mut y;\n-   |             ------ borrow of `y` occurs here\n-...\n-LL |     y;\n-   |     ^ move out of `y` occurs here\n-LL |     use_mut(n); use_imm(m);\n-   |             - borrow later used here\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/binop-move-semantics.rs:30:5\n-   |\n-LL |     *m\n-   |     ^^ cannot move out of borrowed content\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/binop-move-semantics.rs:32:5\n-   |\n-LL |     *n;\n-   |     ^^ cannot move out of borrowed content\n-\n-error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n-  --> $DIR/binop-move-semantics.rs:54:5\n-   |\n-LL |       &mut f\n-   |       ------\n-   |       |\n-   |  _____mutable borrow occurs here\n-   | |\n-LL | |     +\n-LL | |     &f;\n-   | |     ^-\n-   | |_____||\n-   |       |mutable borrow later used here\n-   |       immutable borrow occurs here\n-\n-error[E0502]: cannot borrow `f` as mutable because it is also borrowed as immutable\n-  --> $DIR/binop-move-semantics.rs:62:5\n-   |\n-LL |       &f\n-   |       --\n-   |       |\n-   |  _____immutable borrow occurs here\n-   | |\n-LL | |     +\n-LL | |     &mut f;\n-   | |     ^^^^^-\n-   | |_____|____|\n-   |       |    immutable borrow later used here\n-   |       mutable borrow occurs here\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0382, E0502, E0505, E0507.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "17dec59404201c295013a9b5ddb069817b983526", "filename": "src/test/ui/binop/binop-move-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -11,7 +11,7 @@ fn double_move<T: Add<Output=()>>(x: T) {\n fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n     x\n     +\n-    x.clone();  //~ ERROR: use of moved value\n+    x.clone();  //~ ERROR: borrow of moved value\n }\n \n fn move_borrowed<T: Add<Output=()>>(x: T, mut y: T) {"}, {"sha": "146e378146333fa9896762baea91eb81f73c287f", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,42 +1,51 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:8:5\n    |\n+LL | fn double_move<T: Add<Output=()>>(x: T) {\n+   |                -                  - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                |\n+   |                consider adding a `Copy` constraint to this type argument\n LL |     x\n    |     - value moved here\n LL |     +\n LL |     x;\n    |     ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `x`\n+error[E0382]: borrow of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:14:5\n    |\n+LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n+   |                     -                          - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                     |\n+   |                     consider adding a `Copy` constraint to this type argument\n LL |     x\n    |     - value moved here\n LL |     +\n LL |     x.clone();\n-   |     ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |     ^ value borrowed here after move\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:21:5\n    |\n LL |     let m = &x;\n-   |              - borrow of `x` occurs here\n+   |             -- borrow of `x` occurs here\n ...\n LL |     x\n    |     ^ move out of `x` occurs here\n+...\n+LL |     use_mut(n); use_imm(m);\n+   |                         - borrow later used here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:23:5\n    |\n LL |     let n = &mut y;\n-   |                  - borrow of `y` occurs here\n+   |             ------ borrow of `y` occurs here\n ...\n LL |     y;\n    |     ^ move out of `y` occurs here\n+LL |     use_mut(n); use_imm(m);\n+   |             - borrow later used here\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:30:5\n@@ -51,28 +60,34 @@ LL |     *n;\n    |     ^^ cannot move out of borrowed content\n \n error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n-  --> $DIR/binop-move-semantics.rs:54:6\n+  --> $DIR/binop-move-semantics.rs:54:5\n    |\n-LL |     &mut f\n-   |          - mutable borrow occurs here\n-LL |     +\n-LL |     &f;\n-   |      ^\n-   |      |\n-   |      immutable borrow occurs here\n-   |      mutable borrow ends here\n+LL |       &mut f\n+   |       ------\n+   |       |\n+   |  _____mutable borrow occurs here\n+   | |\n+LL | |     +\n+LL | |     &f;\n+   | |     ^-\n+   | |_____||\n+   |       |mutable borrow later used here\n+   |       immutable borrow occurs here\n \n error[E0502]: cannot borrow `f` as mutable because it is also borrowed as immutable\n-  --> $DIR/binop-move-semantics.rs:62:10\n+  --> $DIR/binop-move-semantics.rs:62:5\n    |\n-LL |     &f\n-   |      - immutable borrow occurs here\n-LL |     +\n-LL |     &mut f;\n-   |          ^\n-   |          |\n-   |          mutable borrow occurs here\n-   |          immutable borrow ends here\n+LL |       &f\n+   |       --\n+   |       |\n+   |  _____immutable borrow occurs here\n+   | |\n+LL | |     +\n+LL | |     &mut f;\n+   | |     ^^^^^-\n+   | |_____|____|\n+   |       |    immutable borrow later used here\n+   |       mutable borrow occurs here\n \n error: aborting due to 8 previous errors\n "}, {"sha": "35101df4e0a6e9e93ba8f889a32a2a028235c587", "filename": "src/test/ui/borrowck/assign_mutable_fields.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n-  --> $DIR/assign_mutable_fields.rs:9:5\n-   |\n-LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n-\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n-  --> $DIR/assign_mutable_fields.rs:17:5\n-   |\n-LL |     x.0 = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "b60726d0c8b38300ab3e114537156341b6b523e0", "filename": "src/test/ui/borrowck/assign_mutable_fields.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,22 +1,22 @@\n-// Currently, we permit you to assign to individual fields of a mut\n-// var, but we do not permit you to use the complete var afterwards.\n+// Currently, we do permit you to assign to individual fields of an\n+// uninitialized var.\n // We hope to fix this at some point.\n //\n // FIXME(#54987)\n \n fn assign_both_fields_and_use() {\n     let mut x: (u32, u32);\n-    x.0 = 1;\n+    x.0 = 1; //~ ERROR\n     x.1 = 22;\n-    drop(x.0); //~ ERROR\n-    drop(x.1); //~ ERROR\n+    drop(x.0);\n+    drop(x.1);\n }\n \n fn assign_both_fields_the_use_var() {\n     let mut x: (u32, u32);\n-    x.0 = 1;\n+    x.0 = 1; //~ ERROR\n     x.1 = 22;\n-    drop(x); //~ ERROR\n+    drop(x);\n }\n \n fn main() { }"}, {"sha": "35101df4e0a6e9e93ba8f889a32a2a028235c587", "filename": "src/test/ui/borrowck/assign_mutable_fields.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,21 +1,15 @@\n-error[E0381]: use of possibly uninitialized variable: `x.0`\n-  --> $DIR/assign_mutable_fields.rs:11:10\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/assign_mutable_fields.rs:9:5\n    |\n-LL |     drop(x.0);\n-   |          ^^^ use of possibly uninitialized `x.0`\n+LL |     x.0 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x.1`\n-  --> $DIR/assign_mutable_fields.rs:12:10\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/assign_mutable_fields.rs:17:5\n    |\n-LL |     drop(x.1);\n-   |          ^^^ use of possibly uninitialized `x.1`\n+LL |     x.0 = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/assign_mutable_fields.rs:19:10\n-   |\n-LL |     drop(x);\n-   |          ^ use of possibly uninitialized `x`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "17969137a988136d192391a6c80fe4219f5982ed", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.nll.stderr", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,75 +0,0 @@\n-error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n-   |\n-LL |         let _f = to_fn(|| x = 42);\n-   |                           ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n-   |\n-LL |         let _f = to_fn(|| x = 42);\n-   |                        ^^^^^^^^^\n-\n-error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:18:31\n-   |\n-LL |         let _g = to_fn(|| set(&mut y));\n-   |                               ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n-   |\n-LL |         let _g = to_fn(|| set(&mut y));\n-   |                        ^^^^^^^^^^^^^^\n-\n-error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n-   |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n-   |                                                       ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n-   |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n-   |                                                    ^^^^^^^^^\n-\n-error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n-   |\n-LL |         let _f = to_fn(move || x = 42);\n-   |                                ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n-   |\n-LL |         let _f = to_fn(move || x = 42);\n-   |                        ^^^^^^^^^^^^^^\n-\n-error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:36\n-   |\n-LL |         let _g = to_fn(move || set(&mut y));\n-   |                                    ^^^^^^ cannot borrow as mutable\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n-   |\n-LL |         let _g = to_fn(move || set(&mut y));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n-   |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                                 ^^^^^^ cannot assign\n-   |\n-help: consider changing this to accept closures that implement `FnMut`\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n-   |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                         ^^^^^^^^^^^^^^\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "17969137a988136d192391a6c80fe4219f5982ed", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,78 +1,75 @@\n-error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n    |\n LL |         let _f = to_fn(|| x = 42);\n-   |                           ^^^^^^\n+   |                           ^^^^^^ cannot assign\n    |\n-help: consider changing this closure to take self by mutable reference\n+help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n    |\n LL |         let _f = to_fn(|| x = 42);\n    |                        ^^^^^^^^^\n \n-error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:18:36\n+error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:18:31\n    |\n LL |         let _g = to_fn(|| set(&mut y));\n-   |                                    ^\n+   |                               ^^^^^^ cannot borrow as mutable\n    |\n-help: consider changing this closure to take self by mutable reference\n+help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n    |\n LL |         let _g = to_fn(|| set(&mut y));\n    |                        ^^^^^^^^^^^^^^\n \n-error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n+error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n    |\n LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n-   |                                                       ^^^^^^\n+   |                                                       ^^^^^^ cannot assign\n    |\n-help: consider changing this closure to take self by mutable reference\n+help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n    |\n LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                    ^^^^^^^^^\n \n-error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n    |\n LL |         let _f = to_fn(move || x = 42);\n-   |                                ^^^^^^\n+   |                                ^^^^^^ cannot assign\n    |\n-   = note: `Fn` closures cannot capture their enclosing environment for modifications\n-help: consider changing this closure to take self by mutable reference\n+help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n    |\n LL |         let _f = to_fn(move || x = 42);\n    |                        ^^^^^^^^^^^^^^\n \n-error[E0596]: cannot borrow captured outer variable in an `Fn` closure as mutable\n-  --> $DIR/borrow-immutable-upvar-mutation.rs:30:41\n+error[E0596]: cannot borrow `y` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrow-immutable-upvar-mutation.rs:30:36\n    |\n LL |         let _g = to_fn(move || set(&mut y));\n-   |                                         ^\n+   |                                    ^^^^^^ cannot borrow as mutable\n    |\n-help: consider changing this closure to take self by mutable reference\n+help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n    |\n LL |         let _g = to_fn(move || set(&mut y));\n    |                        ^^^^^^^^^^^^^^^^^^^\n \n-error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n+error[E0594]: cannot assign to `z`, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n    |\n LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n-   |                                                                 ^^^^^^\n+   |                                                                 ^^^^^^ cannot assign\n    |\n-   = note: `Fn` closures cannot capture their enclosing environment for modifications\n-help: consider changing this closure to take self by mutable reference\n+help: consider changing this to accept closures that implement `FnMut`\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n    |\n LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                         ^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0387, E0596.\n-For more information about an error, try `rustc --explain E0387`.\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "503ea49d74ee0084b7fb51c254a59740597d8f2b", "filename": "src/test/ui/borrowck/borrow-tuple-fields.nll.stderr", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,65 +0,0 @@\n-error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrow-tuple-fields.rs:12:13\n-   |\n-LL |     let r = &x.0;\n-   |             ---- borrow of `x.0` occurs here\n-LL |     let y = x;\n-   |             ^ move out of `x` occurs here\n-LL | \n-LL |     r.use_ref();\n-   |     - borrow later used here\n-\n-error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:18:13\n-   |\n-LL |     let a = &x.0;\n-   |             ---- immutable borrow occurs here\n-LL |     let b = &mut x.0;\n-   |             ^^^^^^^^ mutable borrow occurs here\n-LL |     a.use_ref();\n-   |     - immutable borrow later used here\n-\n-error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:23:13\n-   |\n-LL |     let a = &mut x.0;\n-   |             -------- first mutable borrow occurs here\n-LL |     let b = &mut x.0;\n-   |             ^^^^^^^^ second mutable borrow occurs here\n-LL |     a.use_ref();\n-   |     - first borrow later used here\n-\n-error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrow-tuple-fields.rs:28:13\n-   |\n-LL |     let r = &x.0;\n-   |             ---- borrow of `x.0` occurs here\n-LL |     let y = x;\n-   |             ^ move out of `x` occurs here\n-LL |     r.use_ref();\n-   |     - borrow later used here\n-\n-error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:33:13\n-   |\n-LL |     let a = &x.0;\n-   |             ---- immutable borrow occurs here\n-LL |     let b = &mut x.0;\n-   |             ^^^^^^^^ mutable borrow occurs here\n-LL |     a.use_ref();\n-   |     - immutable borrow later used here\n-\n-error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:38:13\n-   |\n-LL |     let a = &mut x.0;\n-   |             -------- first mutable borrow occurs here\n-LL |     let b = &mut x.0;\n-   |             ^^^^^^^^ second mutable borrow occurs here\n-LL |     a.use_mut();\n-   |     - first borrow later used here\n-\n-error: aborting due to 6 previous errors\n-\n-Some errors have detailed explanations: E0499, E0502, E0505.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "503ea49d74ee0084b7fb51c254a59740597d8f2b", "filename": "src/test/ui/borrowck/borrow-tuple-fields.stderr", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,62 +1,63 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrow-tuple-fields.rs:12:9\n+  --> $DIR/borrow-tuple-fields.rs:12:13\n    |\n LL |     let r = &x.0;\n-   |              --- borrow of `x.0` occurs here\n+   |             ---- borrow of `x.0` occurs here\n LL |     let y = x;\n-   |         ^ move out of `x` occurs here\n+   |             ^ move out of `x` occurs here\n+LL | \n+LL |     r.use_ref();\n+   |     - borrow later used here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:18:18\n+  --> $DIR/borrow-tuple-fields.rs:18:13\n    |\n LL |     let a = &x.0;\n-   |              --- immutable borrow occurs here\n+   |             ---- immutable borrow occurs here\n LL |     let b = &mut x.0;\n-   |                  ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n+   |             ^^^^^^^^ mutable borrow occurs here\n+LL |     a.use_ref();\n+   |     - immutable borrow later used here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:23:18\n+  --> $DIR/borrow-tuple-fields.rs:23:13\n    |\n LL |     let a = &mut x.0;\n-   |                  --- first mutable borrow occurs here\n+   |             -------- first mutable borrow occurs here\n LL |     let b = &mut x.0;\n-   |                  ^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n+   |             ^^^^^^^^ second mutable borrow occurs here\n+LL |     a.use_ref();\n+   |     - first borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrow-tuple-fields.rs:28:9\n+  --> $DIR/borrow-tuple-fields.rs:28:13\n    |\n LL |     let r = &x.0;\n-   |              --- borrow of `x.0` occurs here\n+   |             ---- borrow of `x.0` occurs here\n LL |     let y = x;\n-   |         ^ move out of `x` occurs here\n+   |             ^ move out of `x` occurs here\n+LL |     r.use_ref();\n+   |     - borrow later used here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:33:18\n+  --> $DIR/borrow-tuple-fields.rs:33:13\n    |\n LL |     let a = &x.0;\n-   |              --- immutable borrow occurs here\n+   |             ---- immutable borrow occurs here\n LL |     let b = &mut x.0;\n-   |                  ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n+   |             ^^^^^^^^ mutable borrow occurs here\n+LL |     a.use_ref();\n+   |     - immutable borrow later used here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:38:18\n+  --> $DIR/borrow-tuple-fields.rs:38:13\n    |\n LL |     let a = &mut x.0;\n-   |                  --- first mutable borrow occurs here\n+   |             -------- first mutable borrow occurs here\n LL |     let b = &mut x.0;\n-   |                  ^^^ second mutable borrow occurs here\n+   |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n-LL | }\n-   | - first borrow ends here\n+   |     - first borrow later used here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "10f8d5f857eb2afb14e53fc1b8bce626e8868996", "filename": "src/test/ui/borrowck/borrowck-access-permissions.ast.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,46 +0,0 @@\n-error[E0596]: cannot borrow immutable local variable `x` as mutable\n-  --> $DIR/borrowck-access-permissions.rs:12:24\n-   |\n-LL |     let x = 1;\n-   |         - help: make this binding mutable: `mut x`\n-...\n-LL |         let _y1 = &mut x;\n-   |                        ^ cannot borrow mutably\n-\n-error[E0596]: cannot borrow immutable static item as mutable\n-  --> $DIR/borrowck-access-permissions.rs:18:24\n-   |\n-LL |         let _y1 = &mut static_x;\n-   |                        ^^^^^^^^\n-\n-error[E0596]: cannot borrow immutable `Box` content `*box_x` as mutable\n-  --> $DIR/borrowck-access-permissions.rs:27:24\n-   |\n-LL |         let box_x = Box::new(1);\n-   |             ----- help: make this binding mutable: `mut box_x`\n-...\n-LL |         let _y1 = &mut *box_x;\n-   |                        ^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow immutable borrowed content `*ref_x` as mutable\n-  --> $DIR/borrowck-access-permissions.rs:36:24\n-   |\n-LL |         let _y1 = &mut *ref_x;\n-   |                        ^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow immutable dereference of raw pointer `*ptr_x` as mutable\n-  --> $DIR/borrowck-access-permissions.rs:46:28\n-   |\n-LL |             let _y1 = &mut *ptr_x;\n-   |                            ^^^^^^ cannot borrow as mutable\n-\n-error[E0389]: cannot borrow data mutably in a `&` reference\n-  --> $DIR/borrowck-access-permissions.rs:56:23\n-   |\n-LL |         let _y = &mut *foo_ref.f;\n-   |                       ^^^^^^^^^^ assignment into an immutable reference\n-\n-error: aborting due to 6 previous errors\n-\n-Some errors have detailed explanations: E0389, E0596.\n-For more information about an error, try `rustc --explain E0389`."}, {"sha": "12f9ad8276fa41ce039b8600ec47320f1b7d81bb", "filename": "src/test/ui/borrowck/borrowck-access-permissions.mir.stderr", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,53 +0,0 @@\n-error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/borrowck-access-permissions.rs:12:19\n-   |\n-LL |     let x = 1;\n-   |         - help: consider changing this to be mutable: `mut x`\n-...\n-LL |         let _y1 = &mut x;\n-   |                   ^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow immutable static item `static_x` as mutable\n-  --> $DIR/borrowck-access-permissions.rs:18:19\n-   |\n-LL |         let _y1 = &mut static_x;\n-   |                   ^^^^^^^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `*box_x` as mutable, as `box_x` is not declared as mutable\n-  --> $DIR/borrowck-access-permissions.rs:27:19\n-   |\n-LL |         let box_x = Box::new(1);\n-   |             ----- help: consider changing this to be mutable: `mut box_x`\n-...\n-LL |         let _y1 = &mut *box_x;\n-   |                   ^^^^^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-access-permissions.rs:36:19\n-   |\n-LL |         let ref_x = &x;\n-   |                     -- help: consider changing this to be a mutable reference: `&mut x`\n-...\n-LL |         let _y1 = &mut *ref_x;\n-   |                   ^^^^^^^^^^^ `ref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n-\n-error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` pointer\n-  --> $DIR/borrowck-access-permissions.rs:46:23\n-   |\n-LL |         let ptr_x : *const _ = &x;\n-   |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n-...\n-LL |             let _y1 = &mut *ptr_x;\n-   |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n-\n-error[E0596]: cannot borrow `*foo_ref.f` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-access-permissions.rs:56:18\n-   |\n-LL |         let foo_ref = &foo;\n-   |                       ---- help: consider changing this to be a mutable reference: `&mut foo`\n-LL |         let _y = &mut *foo_ref.f;\n-   |                  ^^^^^^^^^^^^^^^ `foo_ref` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "469ad508b0e77eb4f03a7bcc1087c6d38a1c62cb", "filename": "src/test/ui/borrowck/borrowck-access-permissions.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n static static_x : i32 = 1;\n static mut static_x_mut : i32 = 1;\n \n@@ -9,32 +6,28 @@ fn main() {\n     let mut x_mut = 1;\n \n     { // borrow of local\n-        let _y1 = &mut x; //[ast]~ ERROR [E0596]\n-                          //[mir]~^ ERROR [E0596]\n+        let _y1 = &mut x; //~ ERROR [E0596]\n         let _y2 = &mut x_mut; // No error\n     }\n \n     { // borrow of static\n-        let _y1 = &mut static_x; //[ast]~ ERROR [E0596]\n-                                 //[mir]~^ ERROR [E0596]\n+        let _y1 = &mut static_x; //~ ERROR [E0596]\n         unsafe { let _y2 = &mut static_x_mut; } // No error\n     }\n \n     { // borrow of deref to box\n         let box_x = Box::new(1);\n         let mut box_x_mut = Box::new(1);\n \n-        let _y1 = &mut *box_x; //[ast]~ ERROR [E0596]\n-                               //[mir]~^ ERROR [E0596]\n+        let _y1 = &mut *box_x; //~ ERROR [E0596]\n         let _y2 = &mut *box_x_mut; // No error\n     }\n \n     { // borrow of deref to reference\n         let ref_x = &x;\n         let ref_x_mut = &mut x_mut;\n \n-        let _y1 = &mut *ref_x; //[ast]~ ERROR [E0596]\n-                               //[mir]~^ ERROR [E0596]\n+        let _y1 = &mut *ref_x; //~ ERROR [E0596]\n         let _y2 = &mut *ref_x_mut; // No error\n     }\n \n@@ -43,8 +36,7 @@ fn main() {\n         let ptr_mut_x : *mut _ = &mut x_mut;\n \n         unsafe {\n-            let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n-                                   //[mir]~^ ERROR [E0596]\n+            let _y1 = &mut *ptr_x; //~ ERROR [E0596]\n             let _y2 = &mut *ptr_mut_x; // No error\n         }\n     }\n@@ -53,8 +45,6 @@ fn main() {\n         struct Foo<'a> { f: &'a mut i32, g: &'a i32 };\n         let mut foo = Foo { f: &mut x_mut, g: &x };\n         let foo_ref = &foo;\n-        let _y = &mut *foo_ref.f; //[ast]~ ERROR [E0389]\n-                                  //[mir]~^ ERROR [E0596]\n-                                  // FIXME: Wrong error in MIR\n+        let _y = &mut *foo_ref.f; //~ ERROR [E0596]\n     }\n }"}, {"sha": "e3a35c38a7c0373aaa52d10d666e35c072c671ea", "filename": "src/test/ui/borrowck/borrowck-access-permissions.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/borrowck-access-permissions.rs:12:19\n+  --> $DIR/borrowck-access-permissions.rs:9:19\n    |\n LL |     let x = 1;\n    |         - help: consider changing this to be mutable: `mut x`\n@@ -8,13 +8,13 @@ LL |         let _y1 = &mut x;\n    |                   ^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable static item `static_x` as mutable\n-  --> $DIR/borrowck-access-permissions.rs:18:19\n+  --> $DIR/borrowck-access-permissions.rs:14:19\n    |\n LL |         let _y1 = &mut static_x;\n    |                   ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*box_x` as mutable, as `box_x` is not declared as mutable\n-  --> $DIR/borrowck-access-permissions.rs:27:19\n+  --> $DIR/borrowck-access-permissions.rs:22:19\n    |\n LL |         let box_x = Box::new(1);\n    |             ----- help: consider changing this to be mutable: `mut box_x`\n@@ -23,7 +23,7 @@ LL |         let _y1 = &mut *box_x;\n    |                   ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-access-permissions.rs:36:19\n+  --> $DIR/borrowck-access-permissions.rs:30:19\n    |\n LL |         let ref_x = &x;\n    |                     -- help: consider changing this to be a mutable reference: `&mut x`\n@@ -32,7 +32,7 @@ LL |         let _y1 = &mut *ref_x;\n    |                   ^^^^^^^^^^^ `ref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` pointer\n-  --> $DIR/borrowck-access-permissions.rs:46:23\n+  --> $DIR/borrowck-access-permissions.rs:39:23\n    |\n LL |         let ptr_x : *const _ = &x;\n    |                                -- help: consider changing this to be a mutable pointer: `&mut x`\n@@ -41,7 +41,7 @@ LL |             let _y1 = &mut *ptr_x;\n    |                       ^^^^^^^^^^^ `ptr_x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*foo_ref.f` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-access-permissions.rs:56:18\n+  --> $DIR/borrowck-access-permissions.rs:48:18\n    |\n LL |         let foo_ref = &foo;\n    |                       ---- help: consider changing this to be a mutable reference: `&mut foo`", "previous_filename": "src/test/ui/borrowck/borrowck-access-permissions.ast.nll.stderr"}, {"sha": "2db075194810e122f754aa3226b114593ae85832", "filename": "src/test/ui/borrowck/borrowck-and-init.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: borrow of possibly uninitialized variable: `i`\n-  --> $DIR/borrowck-and-init.rs:5:20\n-   |\n-LL |     println!(\"{}\", i);\n-   |                    ^ use of possibly uninitialized `i`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "4427e2518610385bce56ed46056f40c01652272a", "filename": "src/test/ui/borrowck/borrowck-and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let i: isize;\n \n     println!(\"{}\", false && { i = 5; true });\n-    println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+    println!(\"{}\", i); //~ ERROR borrow of possibly uninitialized variable: `i`\n }"}, {"sha": "2db075194810e122f754aa3226b114593ae85832", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: use of possibly uninitialized variable: `i`\n+error[E0381]: borrow of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n LL |     println!(\"{}\", i);"}, {"sha": "7a959fb6ec62f621948bf9241c809a0bdc767cf4", "filename": "src/test/ui/borrowck/borrowck-anon-fields-struct.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-struct.rs:29:11\n-   |\n-LL |         Y(ref mut a, _) => a\n-   |           --------- first mutable borrow occurs here\n-...\n-LL |         Y(ref mut b, _) => b\n-   |           ^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL |     *a += 1;\n-   |     ------- first borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0499`."}, {"sha": "7a959fb6ec62f621948bf9241c809a0bdc767cf4", "filename": "src/test/ui/borrowck/borrowck-anon-fields-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -7,8 +7,8 @@ LL |         Y(ref mut a, _) => a\n LL |         Y(ref mut b, _) => b\n    |           ^^^^^^^^^ second mutable borrow occurs here\n ...\n-LL | }\n-   | - first borrow ends here\n+LL |     *a += 1;\n+   |     ------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "88a8867f5ee080cd8415f038716f43a9f2c1819f", "filename": "src/test/ui/borrowck/borrowck-anon-fields-tuple.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-tuple.rs:27:10\n-   |\n-LL |         (ref mut a, _) => a\n-   |          --------- first mutable borrow occurs here\n-...\n-LL |         (ref mut b, _) => b\n-   |          ^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL |     *a += 1;\n-   |     ------- first borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0499`."}, {"sha": "88a8867f5ee080cd8415f038716f43a9f2c1819f", "filename": "src/test/ui/borrowck/borrowck-anon-fields-tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -7,8 +7,8 @@ LL |         (ref mut a, _) => a\n LL |         (ref mut b, _) => b\n    |          ^^^^^^^^^ second mutable borrow occurs here\n ...\n-LL | }\n-   | - first borrow ends here\n+LL |     *a += 1;\n+   |     ------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "649fe3e13526b68c82ddca66da51886e273eb8f3", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,43 +0,0 @@\n-warning[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:17:7\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n-...\n-LL |       Foo::Y(_, ref mut b) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n-...\n-LL |     *a += 1;\n-   |     ------- borrow later used here\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-\n-error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:34:7\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- borrow of `y.0` occurs here\n-...\n-LL |       Foo::Y(ref mut b, _) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n-...\n-LL |     *a += 1;\n-   |     ------- borrow later used here\n-\n-error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-variant.rs:34:14\n-   |\n-LL |       Foo::Y(ref mut a, _) => a,\n-   |              --------- first mutable borrow occurs here\n-...\n-LL |       Foo::Y(ref mut b, _) => b,\n-   |              ^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL |     *a += 1;\n-   |     ------- first borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0499, E0503.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "695809f58c551296154df3afbcce0d789f0ea814", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// Tests that we are able to distinguish when loans borrow different\n-// anonymous fields of an enum variant vs the same anonymous field.\n-\n enum Foo {\n     X, Y(usize, usize)\n }\n@@ -13,8 +10,14 @@ fn distinct_variant() {\n       Foo::X => panic!()\n     };\n \n+    // While `a` and `b` are disjoint, borrowck doesn't know that `a` is not\n+    // also used for the discriminant of `Foo`, which it would be if `a` was a\n+    // reference.\n     let b = match y {\n       Foo::Y(_, ref mut b) => b,\n+      //~^ WARNING cannot use `y`\n+      //~| WARNING this error has been downgraded to a warning\n+      //~| WARNING this warning will become a hard error in the future\n       Foo::X => panic!()\n     };\n \n@@ -31,7 +34,8 @@ fn same_variant() {\n     };\n \n     let b = match y {\n-      Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+      Foo::Y(ref mut b, _) => b, //~ ERROR cannot use `y`\n+      //~| ERROR cannot borrow `y.0` as mutable\n       Foo::X => panic!()\n     };\n "}, {"sha": "5e86dcb1232c873a2665f4cd3c5ce4d9b1936d1e", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.stderr", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,15 +1,43 @@\n+warning[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:17:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(_, ref mut b) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+   |\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n+\n+error[E0503]: cannot use `y` because it was mutably borrowed\n+  --> $DIR/borrowck-anon-fields-variant.rs:37:7\n+   |\n+LL |       Foo::Y(ref mut a, _) => a,\n+   |              --------- borrow of `y.0` occurs here\n+...\n+LL |       Foo::Y(ref mut b, _) => b,\n+   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+...\n+LL |     *a += 1;\n+   |     ------- borrow later used here\n+\n error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-variant.rs:34:14\n+  --> $DIR/borrowck-anon-fields-variant.rs:37:14\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here\n ...\n LL |       Foo::Y(ref mut b, _) => b,\n    |              ^^^^^^^^^ second mutable borrow occurs here\n ...\n-LL | }\n-   | - first borrow ends here\n+LL |     *a += 1;\n+   |     ------- first borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0499`.\n+Some errors have detailed explanations: E0499, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "cf15833140927640657e04bd698e7709342a4b71", "filename": "src/test/ui/borrowck/borrowck-argument.nll.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,35 +0,0 @@\n-error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n-  --> $DIR/borrowck-argument.rs:10:5\n-   |\n-LL | fn func(arg: S) {\n-   |         --- help: consider changing this to be mutable: `mut arg`\n-LL |     arg.mutate();\n-   |     ^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n-  --> $DIR/borrowck-argument.rs:15:9\n-   |\n-LL |     fn method(&self, arg: S) {\n-   |                      --- help: consider changing this to be mutable: `mut arg`\n-LL |         arg.mutate();\n-   |         ^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n-  --> $DIR/borrowck-argument.rs:21:9\n-   |\n-LL |     fn default(&self, arg: S) {\n-   |                       --- help: consider changing this to be mutable: `mut arg`\n-LL |         arg.mutate();\n-   |         ^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n-  --> $DIR/borrowck-argument.rs:32:17\n-   |\n-LL |     (|arg: S| { arg.mutate() })(s);\n-   |       ---       ^^^ cannot borrow as mutable\n-   |       |\n-   |       help: consider changing this to be mutable: `mut arg`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "5d776d4fca4752f7ab2506717a084c8c7833df47", "filename": "src/test/ui/borrowck/borrowck-argument.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -7,18 +7,18 @@ impl S {\n }\n \n fn func(arg: S) {\n-    arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+    arg.mutate(); //~ ERROR: cannot borrow `arg` as mutable, as it is not declared as mutable\n }\n \n impl S {\n     fn method(&self, arg: S) {\n-        arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+        arg.mutate(); //~ ERROR: cannot borrow `arg` as mutable, as it is not declared as mutable\n     }\n }\n \n trait T {\n     fn default(&self, arg: S) {\n-        arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+        arg.mutate(); //~ ERROR: cannot borrow `arg` as mutable, as it is not declared as mutable\n     }\n }\n \n@@ -29,5 +29,6 @@ fn main() {\n     func(s);\n     s.method(s);\n     s.default(s);\n-    (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n+    (|arg: S| { arg.mutate() })(s);\n+    //~^ ERROR: cannot borrow `arg` as mutable, as it is not declared as mutable\n }"}, {"sha": "cf15833140927640657e04bd698e7709342a4b71", "filename": "src/test/ui/borrowck/borrowck-argument.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,34 +1,34 @@\n-error[E0596]: cannot borrow immutable argument `arg` as mutable\n+error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:10:5\n    |\n LL | fn func(arg: S) {\n-   |         --- help: make this binding mutable: `mut arg`\n+   |         --- help: consider changing this to be mutable: `mut arg`\n LL |     arg.mutate();\n-   |     ^^^ cannot borrow mutably\n+   |     ^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable argument `arg` as mutable\n+error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:15:9\n    |\n LL |     fn method(&self, arg: S) {\n-   |                      --- help: make this binding mutable: `mut arg`\n+   |                      --- help: consider changing this to be mutable: `mut arg`\n LL |         arg.mutate();\n-   |         ^^^ cannot borrow mutably\n+   |         ^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable argument `arg` as mutable\n+error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:21:9\n    |\n LL |     fn default(&self, arg: S) {\n-   |                       --- help: make this binding mutable: `mut arg`\n+   |                       --- help: consider changing this to be mutable: `mut arg`\n LL |         arg.mutate();\n-   |         ^^^ cannot borrow mutably\n+   |         ^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable argument `arg` as mutable\n+error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:32:17\n    |\n LL |     (|arg: S| { arg.mutate() })(s);\n-   |       ---       ^^^ cannot borrow mutably\n+   |       ---       ^^^ cannot borrow as mutable\n    |       |\n-   |       help: make this binding mutable: `mut arg`\n+   |       help: consider changing this to be mutable: `mut arg`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6d568061f3865b04d8437774a4231ed09e1e851d", "filename": "src/test/ui/borrowck/borrowck-asm.ast.stderr", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,76 +0,0 @@\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:27:13\n-   |\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                - value moved here\n-LL |         }\n-LL |         let z = x;\n-   |             ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:35:32\n-   |\n-LL |         let y = &mut x;\n-   |                      - borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                ^ use of borrowed `x`\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:44:31\n-   |\n-LL |         let x = 3;\n-   |             - first assignment to `x`\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n-\n-error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:50:31\n-   |\n-LL |         let b = &*a;\n-   |                  -- borrow of `a` occurs here\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(a));\n-   |                               ^ assignment to borrowed `a` occurs here\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:60:31\n-   |\n-LL |         let x = 3;\n-   |             - first assignment to `x`\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n-\n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:68:32\n-   |\n-LL |             asm!(\"nop\" : \"=*r\"(x));\n-   |                                ^ use of possibly uninitialized `x`\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:77:31\n-   |\n-LL |         let y = &*x;\n-   |                  -- borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ assignment to borrowed `x` occurs here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:86:40\n-   |\n-LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n-   |                                -       ^ value used here after move\n-   |                                |\n-   |                                value moved here\n-   |\n-   = note: move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0381, E0382, E0384, E0503, E0506.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "3fb1c9b22cf5dffabd6d16ed04c44fe7f74b26e8", "filename": "src/test/ui/borrowck/borrowck-asm.mir.stderr", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,81 +0,0 @@\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:27:17\n-   |\n-LL |         let x = &mut 0isize;\n-   |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                - value moved here\n-LL |         }\n-LL |         let z = x;\n-   |                 ^ value used here after move\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:35:32\n-   |\n-LL |         let y = &mut x;\n-   |                 ------ borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x));\n-   |                                ^ use of borrowed `x`\n-...\n-LL |         let z = y;\n-   |                 - borrow later used here\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:44:31\n-   |\n-LL |         let x = 3;\n-   |             -\n-   |             |\n-   |             first assignment to `x`\n-   |             help: make this binding mutable: `mut x`\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : \"=r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:60:31\n-   |\n-LL |         let x = 3;\n-   |             -\n-   |             |\n-   |             first assignment to `x`\n-   |             help: make this binding mutable: `mut x`\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ cannot assign twice to immutable variable\n-\n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:68:32\n-   |\n-LL |             asm!(\"nop\" : \"=*r\"(x));\n-   |                                ^ use of possibly uninitialized `x`\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:77:31\n-   |\n-LL |         let y = &*x;\n-   |                 --- borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : \"+r\"(x));\n-   |                               ^ assignment to borrowed `x` occurs here\n-...\n-LL |         let z = y;\n-   |                 - borrow later used here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:86:40\n-   |\n-LL |         let x = &mut 2;\n-   |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n-LL |         unsafe {\n-LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n-   |                                -       ^ value used here after move\n-   |                                |\n-   |                                value moved here\n-\n-error: aborting due to 7 previous errors\n-\n-Some errors have detailed explanations: E0381, E0382, E0384, E0503, E0506.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "9c9cc04baafeeee317de7f8aa529bfd38c9b6665", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -6,9 +6,6 @@\n // ignore-sparc\n // ignore-sparc64\n \n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(asm)]\n \n #[cfg(any(target_arch = \"x86\",\n@@ -24,31 +21,27 @@ mod test_cases {\n         unsafe {\n             asm!(\"nop\" : : \"r\"(x));\n         }\n-        let z = x;  //[ast]~ ERROR use of moved value: `x`\n-                    //[mir]~^ ERROR use of moved value: `x`\n+        let z = x;  //~ ERROR use of moved value: `x`\n     }\n \n     fn in_is_read() {\n         let mut x = 3;\n         let y = &mut x;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x)); //[ast]~ ERROR cannot use\n-                                    //[mir]~^ ERROR cannot use\n+            asm!(\"nop\" : : \"r\"(x)); //~ ERROR cannot use\n         }\n         let z = y;\n     }\n \n     fn out_is_assign() {\n         let x = 3;\n         unsafe {\n-            asm!(\"nop\" : \"=r\"(x));  //[ast]~ ERROR cannot assign twice\n-                                    //[mir]~^ ERROR cannot assign twice\n+            asm!(\"nop\" : \"=r\"(x));  //~ ERROR cannot assign twice\n         }\n         let mut a = &mut 3;\n         let b = &*a;\n         unsafe {\n-            asm!(\"nop\" : \"=r\"(a));  //[ast]~ ERROR cannot assign to `a` because it is borrowed\n-                                    // No MIR error, this is a shallow write.\n+            asm!(\"nop\" : \"=r\"(a));  // OK, Shallow write to `a`\n         }\n         let c = b;\n         let d = *a;\n@@ -57,34 +50,30 @@ mod test_cases {\n     fn rw_is_assign() {\n         let x = 3;\n         unsafe {\n-            asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign twice\n-                                    //[mir]~^ ERROR cannot assign twice\n+            asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign twice\n         }\n     }\n \n     fn indirect_is_not_init() {\n         let x: i32;\n         unsafe {\n-            asm!(\"nop\" : \"=*r\"(x)); //[ast]~ ERROR use of possibly uninitialized variable\n-                                    //[mir]~^ ERROR use of possibly uninitialized variable\n+            asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly uninitialized variable\n         }\n     }\n \n     fn rw_is_read() {\n         let mut x = &mut 3;\n         let y = &*x;\n         unsafe {\n-            asm!(\"nop\" : \"+r\"(x));  //[ast]~ ERROR cannot assign to `x` because it is borrowed\n-                                    //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+            asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign to `x` because it is borrowed\n         }\n         let z = y;\n     }\n \n     fn two_moves() {\n         let x = &mut 2;\n         unsafe {\n-            asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n-                                                //[mir]~^ ERROR use of moved value\n+            asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //~ ERROR use of moved value\n         }\n     }\n }"}, {"sha": "c771373022ac424cf17b6b11ffb4e6ed51091bfc", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:27:17\n+  --> $DIR/borrowck-asm.rs:24:17\n    |\n LL |         let x = &mut 0isize;\n    |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n@@ -11,19 +11,19 @@ LL |         let z = x;\n    |                 ^ value used here after move\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:35:32\n+  --> $DIR/borrowck-asm.rs:31:32\n    |\n LL |         let y = &mut x;\n    |                 ------ borrow of `x` occurs here\n LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                ^ use of borrowed `x`\n-...\n+LL |         }\n LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:44:31\n+  --> $DIR/borrowck-asm.rs:39:31\n    |\n LL |         let x = 3;\n    |             -\n@@ -35,7 +35,7 @@ LL |             asm!(\"nop\" : \"=r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:60:31\n+  --> $DIR/borrowck-asm.rs:53:31\n    |\n LL |         let x = 3;\n    |             -\n@@ -47,25 +47,25 @@ LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:68:32\n+  --> $DIR/borrowck-asm.rs:60:32\n    |\n LL |             asm!(\"nop\" : \"=*r\"(x));\n    |                                ^ use of possibly uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:77:31\n+  --> $DIR/borrowck-asm.rs:68:31\n    |\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n LL |         unsafe {\n LL |             asm!(\"nop\" : \"+r\"(x));\n    |                               ^ assignment to borrowed `x` occurs here\n-...\n+LL |         }\n LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:86:40\n+  --> $DIR/borrowck-asm.rs:76:40\n    |\n LL |         let x = &mut 2;\n    |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait", "previous_filename": "src/test/ui/borrowck/borrowck-asm.ast.nll.stderr"}, {"sha": "93f1d8c5258632a07285553f9d90412b8c58b17c", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.nll.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,27 +0,0 @@\n-error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-assign-comp-idx.rs:12:5\n-   |\n-LL |     let q: &isize = &p[0];\n-   |                      - immutable borrow occurs here\n-LL | \n-LL |     p[0] = 5;\n-   |     ^ mutable borrow occurs here\n-LL | \n-LL |     println!(\"{}\", *q);\n-   |                    -- immutable borrow later used here\n-\n-error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-assign-comp-idx.rs:27:9\n-   |\n-LL |     borrow(\n-   |     ------ immutable borrow later used by call\n-LL |         &p,\n-   |         -- immutable borrow occurs here\n-LL |         || p[0] = 5);\n-   |         ^^ - second borrow occurs due to use of `p` in closure\n-   |         |\n-   |         mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "93f1d8c5258632a07285553f9d90412b8c58b17c", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -6,19 +6,20 @@ LL |     let q: &isize = &p[0];\n LL | \n LL |     p[0] = 5;\n    |     ^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n+LL | \n+LL |     println!(\"{}\", *q);\n+   |                    -- immutable borrow later used here\n \n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-assign-comp-idx.rs:27:9\n    |\n+LL |     borrow(\n+   |     ------ immutable borrow later used by call\n LL |         &p,\n-   |          - immutable borrow occurs here\n+   |         -- immutable borrow occurs here\n LL |         || p[0] = 5);\n-   |         ^^ -       - immutable borrow ends here\n-   |         |  |\n-   |         |  borrow occurs due to use of `p` in closure\n+   |         ^^ - second borrow occurs due to use of `p` in closure\n+   |         |\n    |         mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "4adb19c4c3f0e9cc3bf6843fe17d7d760ed6d8a7", "filename": "src/test/ui/borrowck/borrowck-assign-comp.ast.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,28 +0,0 @@\n-error[E0506]: cannot assign to `p.x` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:13:5\n-   |\n-LL |     let q = &p;\n-   |              - borrow of `p.x` occurs here\n-...\n-LL |     p.x = 5;\n-   |     ^^^^^^^ assignment to borrowed `p.x` occurs here\n-\n-error[E0506]: cannot assign to `p` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:24:5\n-   |\n-LL |     let q = &p.y;\n-   |              --- borrow of `p` occurs here\n-LL |     p = Point {x: 5, y: 7};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n-\n-error[E0506]: cannot assign to `p.y` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:36:5\n-   |\n-LL |     let q = &p.y;\n-   |              --- borrow of `p.y` occurs here\n-LL |     p.y = 5;\n-   |     ^^^^^^^ assignment to borrowed `p.y` occurs here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "53af41cfe310343fcc810ca177912557ed6a72d0", "filename": "src/test/ui/borrowck/borrowck-assign-comp.mir.stderr", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,37 +0,0 @@\n-error[E0506]: cannot assign to `p.x` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:13:5\n-   |\n-LL |     let q = &p;\n-   |             -- borrow of `p.x` occurs here\n-...\n-LL |     p.x = 5;\n-   |     ^^^^^^^ assignment to borrowed `p.x` occurs here\n-LL |\n-LL |     q.x;\n-   |     --- borrow later used here\n-\n-error[E0506]: cannot assign to `p` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:24:5\n-   |\n-LL |     let q = &p.y;\n-   |             ---- borrow of `p` occurs here\n-LL |     p = Point {x: 5, y: 7};\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n-...\n-LL |     *q; // stretch loan\n-   |     -- borrow later used here\n-\n-error[E0506]: cannot assign to `p.y` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:36:5\n-   |\n-LL |     let q = &p.y;\n-   |             ---- borrow of `p.y` occurs here\n-LL |     p.y = 5;\n-   |     ^^^^^^^ assignment to borrowed `p.y` occurs here\n-LL |\n-LL |     *q;\n-   |     -- borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "98bb2d85ad7c113bf88d017437e98d3d2b2b3106", "filename": "src/test/ui/borrowck/borrowck-assign-comp.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n struct Point { x: isize, y: isize }\n \n fn a() {\n@@ -10,8 +7,7 @@ fn a() {\n     // This assignment is illegal because the field x is not\n     // inherently mutable; since `p` was made immutable, `p.x` is now\n     // immutable.  Otherwise the type of &_q.x (&isize) would be wrong.\n-    p.x = 5; //[ast]~ ERROR cannot assign to `p.x`\n-             //[mir]~^ ERROR cannot assign to `p.x` because it is borrowed\n+    p.x = 5; //~ ERROR cannot assign to `p.x` because it is borrowed\n     q.x;\n }\n \n@@ -21,8 +17,7 @@ fn c() {\n \n     let mut p = Point {x: 3, y: 4};\n     let q = &p.y;\n-    p = Point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n-                           //[mir]~^ ERROR cannot assign to `p` because it is borrowed\n+    p = Point {x: 5, y: 7};//~ ERROR cannot assign to `p` because it is borrowed\n     p.x; // silence warning\n     *q; // stretch loan\n }\n@@ -33,8 +28,7 @@ fn d() {\n \n     let mut p = Point {x: 3, y: 4};\n     let q = &p.y;\n-    p.y = 5; //[ast]~ ERROR cannot assign to `p.y`\n-             //[mir]~^ ERROR cannot assign to `p.y` because it is borrowed\n+    p.y = 5; //~ ERROR cannot assign to `p.y` because it is borrowed\n     *q;\n }\n "}, {"sha": "2b7cef7b3253b55fb5febe33969f66ca0b1119f5", "filename": "src/test/ui/borrowck/borrowck-assign-comp.stderr", "status": "renamed", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,34 +1,32 @@\n error[E0506]: cannot assign to `p.x` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:13:5\n+  --> $DIR/borrowck-assign-comp.rs:10:5\n    |\n LL |     let q = &p;\n    |             -- borrow of `p.x` occurs here\n ...\n LL |     p.x = 5;\n    |     ^^^^^^^ assignment to borrowed `p.x` occurs here\n-LL |\n LL |     q.x;\n    |     --- borrow later used here\n \n error[E0506]: cannot assign to `p` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:24:5\n+  --> $DIR/borrowck-assign-comp.rs:20:5\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p` occurs here\n LL |     p = Point {x: 5, y: 7};\n    |     ^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `p` occurs here\n-...\n+LL |     p.x; // silence warning\n LL |     *q; // stretch loan\n    |     -- borrow later used here\n \n error[E0506]: cannot assign to `p.y` because it is borrowed\n-  --> $DIR/borrowck-assign-comp.rs:36:5\n+  --> $DIR/borrowck-assign-comp.rs:31:5\n    |\n LL |     let q = &p.y;\n    |             ---- borrow of `p.y` occurs here\n LL |     p.y = 5;\n    |     ^^^^^^^ assignment to borrowed `p.y` occurs here\n-LL |\n LL |     *q;\n    |     -- borrow later used here\n ", "previous_filename": "src/test/ui/borrowck/borrowck-assign-comp.ast.nll.stderr"}, {"sha": "38fcfbfc2a026567666a246c74392479c5fdc12c", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,18 +0,0 @@\n-error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n-  --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:9:5\n-   |\n-LL | fn a(s: &S) {\n-   |         -- help: consider changing this to be a mutable reference: `&mut S<'_>`\n-LL |     *s.pointer += 1;\n-   |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n-\n-error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n-  --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n-   |\n-LL | fn c(s: & &mut S) {\n-   |         -------- help: consider changing this to be a mutable reference: `&mut &mut S<'_>`\n-LL |     *s.pointer += 1;\n-   |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "38fcfbfc2a026567666a246c74392479c5fdc12c", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,19 +1,18 @@\n-error[E0389]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:9:5\n    |\n LL | fn a(s: &S) {\n-   |         -- use `&mut S` here to make mutable\n+   |         -- help: consider changing this to be a mutable reference: `&mut S<'_>`\n LL |     *s.pointer += 1;\n-   |     ^^^^^^^^^^^^^^^ assignment into an immutable reference\n+   |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n \n-error[E0389]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `*s.pointer` which is behind a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n    |\n LL | fn c(s: & &mut S) {\n-   |         -------- use `&mut &mut S` here to make mutable\n+   |         -------- help: consider changing this to be a mutable reference: `&mut &mut S<'_>`\n LL |     *s.pointer += 1;\n-   |     ^^^^^^^^^^^^^^^ assignment into an immutable reference\n+   |     ^^^^^^^^^^^^^^^ `s` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0389`."}, {"sha": "d6bd32a2e16015b5534d78ecfc7c493329a34ad1", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,24 +0,0 @@\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n-  --> $DIR/borrowck-assign-to-andmut-in-borrowed-loc.rs:18:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `y` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n-LL |         *z.pointer += 1;\n-   |         --------------- borrow later used here\n-\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n-  --> $DIR/borrowck-assign-to-andmut-in-borrowed-loc.rs:18:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                   ------ borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-LL |         *z.pointer += 1;\n-   |         --------------- borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0503, E0506.\n-For more information about an error, try `rustc --explain E0503`."}, {"sha": "f7aee2b8a939aede8ed4cf69e42961679540588f", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -15,7 +15,9 @@ fn main() {\n     {\n         let mut y = S { pointer: &mut x };\n         let z = copy_borrowed_ptr(&mut y);\n-        *y.pointer += 1; //~ ERROR cannot assign\n+        *y.pointer += 1;\n+        //~^ ERROR cannot use `*y.pointer`\n+        //~| ERROR cannot assign to `*y.pointer`\n         *z.pointer += 1;\n     }\n }"}, {"sha": "0b21d113f74ee7c72e3e298c402a61c5193b8f50", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,11 +1,26 @@\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n+  --> $DIR/borrowck-assign-to-andmut-in-borrowed-loc.rs:18:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                   ------ borrow of `y` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ use of borrowed `y`\n+...\n+LL |         *z.pointer += 1;\n+   |         --------------- borrow later used here\n+\n error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/borrowck-assign-to-andmut-in-borrowed-loc.rs:18:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                        - borrow of `*y.pointer` occurs here\n+   |                                   ------ borrow of `*y.pointer` occurs here\n LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+...\n+LL |         *z.pointer += 1;\n+   |         --------------- borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0506`.\n+Some errors have detailed explanations: E0503, E0506.\n+For more information about an error, try `rustc --explain E0503`."}, {"sha": "703a9222c5fb32308144c3ea78b7dfedc597f24c", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,8 +0,0 @@\n-error[E0594]: cannot assign to immutable static item `foo`\n-  --> $DIR/borrowck-assign-to-constants.rs:8:5\n-   |\n-LL |     foo = 6;\n-   |     ^^^^^^^ cannot assign\n-\n-error: aborting due to previous error\n-"}, {"sha": "98ff53edc7eeb0eeb27491b55f29f308124e0d37", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.ast.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,8 +0,0 @@\n-error[E0594]: cannot assign to immutable static item\n-  --> $DIR/borrowck-assign-to-constants.rs:8:5\n-   |\n-LL |     foo = 6;\n-   |     ^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "5881dccf61ab3bd950421ecd4576b2a6a98f61ed", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,6 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n static foo: isize = 5;\n \n fn main() {\n     // assigning to various global constants\n-    foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n-             //[mir]~^ ERROR cannot assign to immutable static item `foo`\n+    foo = 6; //~ ERROR cannot assign to immutable static item `foo`\n }"}, {"sha": "800003caa0f3412083f377b5b7943849c485d3f9", "filename": "src/test/ui/borrowck/borrowck-assign-to-constants.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-constants.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0594]: cannot assign to immutable static item `foo`\n-  --> $DIR/borrowck-assign-to-constants.rs:8:5\n+  --> $DIR/borrowck-assign-to-constants.rs:5:5\n    |\n LL |     foo = 6;\n    |     ^^^^^^^ cannot assign", "previous_filename": "src/test/ui/borrowck/borrowck-assign-to-constants.mir.stderr"}, {"sha": "3ed76c13f6a7bf0370cd20c6888ea17e5d4fc4a5", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/borrowck-auto-mut-ref-to-immut-var.rs:15:5\n-   |\n-LL |     let x = Foo { x: 3 };\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.printme();\n-   |     ^ cannot borrow as mutable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "3ed76c13f6a7bf0370cd20c6888ea17e5d4fc4a5", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,10 @@\n-error[E0596]: cannot borrow immutable local variable `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-auto-mut-ref-to-immut-var.rs:15:5\n    |\n LL |     let x = Foo { x: 3 };\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider changing this to be mutable: `mut x`\n LL |     x.printme();\n-   |     ^ cannot borrow mutably\n+   |     ^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "c2dfb687e8ee9ccc3e22ee1407c5ffdd34cfc989", "filename": "src/test/ui/borrowck/borrowck-autoref-3261.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,16 +0,0 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-autoref-3261.rs:15:9\n-   |\n-LL |     (&mut x).with(\n-   |     -------- ---- first borrow later used by call\n-   |     |\n-   |     first mutable borrow occurs here\n-LL |         |opt| {\n-   |         ^^^^^ second mutable borrow occurs here\n-...\n-LL |                     x = X(Either::Left((0, 0)));\n-   |                     - second borrow occurs due to use of `x` in closure\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0499`."}, {"sha": "c2dfb687e8ee9ccc3e22ee1407c5ffdd34cfc989", "filename": "src/test/ui/borrowck/borrowck-autoref-3261.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,15 +2,14 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-autoref-3261.rs:15:9\n    |\n LL |     (&mut x).with(\n-   |           - first mutable borrow occurs here\n+   |     -------- ---- first borrow later used by call\n+   |     |\n+   |     first mutable borrow occurs here\n LL |         |opt| {\n    |         ^^^^^ second mutable borrow occurs here\n ...\n LL |                     x = X(Either::Left((0, 0)));\n-   |                     - borrow occurs due to use of `x` in closure\n-...\n-LL |         })\n-   |          - first borrow ends here\n+   |                     - second borrow occurs due to use of `x` in closure\n \n error: aborting due to previous error\n "}, {"sha": "e273a778fdad5d614cba07f5531188a807c18c95", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.nll.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,23 +0,0 @@\n-error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-bad-nested-calls-free.rs:25:17\n-   |\n-LL |     add(\n-   |     --- immutable borrow later used by call\n-LL |         &*a,\n-   |         --- immutable borrow occurs here\n-LL |         rewrite(&mut a));\n-   |                 ^^^^^^ mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-bad-nested-calls-free.rs:32:17\n-   |\n-LL |     add(\n-   |     --- immutable borrow later used by call\n-LL |         &*a,\n-   |         --- immutable borrow occurs here\n-LL |         rewrite(&mut a));\n-   |                 ^^^^^^ mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "e273a778fdad5d614cba07f5531188a807c18c95", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,22 +1,22 @@\n-error[E0502]: cannot borrow `a` as mutable because `*a` is also borrowed as immutable\n-  --> $DIR/borrowck-bad-nested-calls-free.rs:25:22\n+error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-bad-nested-calls-free.rs:25:17\n    |\n+LL |     add(\n+   |     --- immutable borrow later used by call\n LL |         &*a,\n-   |          -- immutable borrow occurs here\n+   |         --- immutable borrow occurs here\n LL |         rewrite(&mut a));\n-   |                      ^ - immutable borrow ends here\n-   |                      |\n-   |                      mutable borrow occurs here\n+   |                 ^^^^^^ mutable borrow occurs here\n \n-error[E0502]: cannot borrow `a` as mutable because `*a` is also borrowed as immutable\n-  --> $DIR/borrowck-bad-nested-calls-free.rs:32:22\n+error[E0502]: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-bad-nested-calls-free.rs:32:17\n    |\n+LL |     add(\n+   |     --- immutable borrow later used by call\n LL |         &*a,\n-   |          -- immutable borrow occurs here\n+   |         --- immutable borrow occurs here\n LL |         rewrite(&mut a));\n-   |                      ^ - immutable borrow ends here\n-   |                      |\n-   |                      mutable borrow occurs here\n+   |                 ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "371bcf2b69cf847d1b6d0b912a7875a4e529c30f", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.nll.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,23 +0,0 @@\n-error[E0505]: cannot move out of `a` because it is borrowed\n-  --> $DIR/borrowck-bad-nested-calls-move.rs:25:9\n-   |\n-LL |     add(\n-   |     --- borrow later used by call\n-LL |         &*a,\n-   |         --- borrow of `*a` occurs here\n-LL |         a);\n-   |         ^ move out of `a` occurs here\n-\n-error[E0505]: cannot move out of `a` because it is borrowed\n-  --> $DIR/borrowck-bad-nested-calls-move.rs:32:9\n-   |\n-LL |     add(\n-   |     --- borrow later used by call\n-LL |         &*a,\n-   |         --- borrow of `*a` occurs here\n-LL |         a);\n-   |         ^ move out of `a` occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0505`."}, {"sha": "371bcf2b69cf847d1b6d0b912a7875a4e529c30f", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,16 +1,20 @@\n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrowck-bad-nested-calls-move.rs:25:9\n    |\n+LL |     add(\n+   |     --- borrow later used by call\n LL |         &*a,\n-   |          -- borrow of `*a` occurs here\n+   |         --- borrow of `*a` occurs here\n LL |         a);\n    |         ^ move out of `a` occurs here\n \n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrowck-bad-nested-calls-move.rs:32:9\n    |\n+LL |     add(\n+   |     --- borrow later used by call\n LL |         &*a,\n-   |          -- borrow of `*a` occurs here\n+   |         --- borrow of `*a` occurs here\n LL |         a);\n    |         ^ move out of `a` occurs here\n "}, {"sha": "d2a49962bafca7d0f36ed941e5b8bdb538229bed", "filename": "src/test/ui/borrowck/borrowck-block-unint.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-block-unint.rs:4:11\n-   |\n-LL |     force(|| {\n-   |           ^^ use of possibly uninitialized `x`\n-LL |         println!(\"{}\", x);\n-   |                        - borrow occurs due to use in closure\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "1fed2d503bd357fd4d05c896ea8c7f513f1c0aab", "filename": "src/test/ui/borrowck/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,7 +1,7 @@\n fn force<F>(f: F) where F: FnOnce() { f(); }\n fn main() {\n     let x: isize;\n-    force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n+    force(|| {  //~ ERROR borrow of possibly uninitialized variable: `x`\n         println!(\"{}\", x);\n     });\n }"}, {"sha": "d2a49962bafca7d0f36ed941e5b8bdb538229bed", "filename": "src/test/ui/borrowck/borrowck-block-unint.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,8 +1,10 @@\n-error[E0381]: capture of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n LL |     force(|| {\n    |           ^^ use of possibly uninitialized `x`\n+LL |         println!(\"{}\", x);\n+   |                        - borrow occurs due to use in closure\n \n error: aborting due to previous error\n "}, {"sha": "134f5107daa3dd9d08e88e7bda8f057962f783a5", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.nll.stderr", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,116 +0,0 @@\n-error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:18:17\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:25:17\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;\n-   |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- mutable borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:32:17\n-   |\n-LL |     let bar1 = &foo.bar1;\n-   |                --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- immutable borrow later used here\n-\n-error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:62:21\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ------------- first mutable borrow occurs here\n-LL |     match *foo {\n-LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {}\n-   |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:71:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1;\n-   |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &*foo;\n-LL |     *bar1;\n-   |     ----- mutable borrow later used here\n-\n-error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:72:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1;\n-LL |     let _foo2 = &*foo;\n-   |                 ^^^^^ immutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- mutable borrow later used here\n-\n-error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:79:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:86:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo;\n-   |                 ^^^^^^^^^ second mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:93:17\n-   |\n-LL |     let bar1 = &foo.bar1.int1;\n-   |                -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- immutable borrow later used here\n-\n-error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:100:17\n-   |\n-LL |     let bar1 = &foo.bar1.int1;\n-   |                -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo;\n-   |                 ^^^^^^^^^ mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- immutable borrow later used here\n-\n-error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:121:16\n-   |\n-LL |     let foo = make_foo();\n-   |         --- help: consider changing this to be mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ^^^^^^^^^^^^^ cannot borrow as mutable\n-\n-error: aborting due to 11 previous errors\n-\n-Some errors have detailed explanations: E0499, E0502, E0596.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "353e4e9f75e6c8bc35cb30214cdc24fc8872dae9", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -43,15 +43,17 @@ fn borrow_same_field_twice_imm_imm() {\n fn borrow_both_fields_mut() {\n     let mut foo = make_foo();\n     let bar1 = &mut foo.bar1;\n-    let _bar2 = &mut foo.bar2; //~ ERROR cannot borrow\n+    let _bar2 = &mut foo.bar2;\n     *bar1;\n }\n \n fn borrow_both_mut_pattern() {\n     let mut foo = make_foo();\n     match *foo {\n-        Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {}\n-        //~^ ERROR cannot borrow\n+        Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {\n+            *_bar1;\n+            *_bar2;\n+        }\n     }\n }\n \n@@ -112,8 +114,7 @@ fn borrow_imm_and_base_imm() {\n fn borrow_mut_and_imm() {\n     let mut foo = make_foo();\n     let bar1 = &mut foo.bar1;\n-    let _foo1 = &foo.bar2; //~ ERROR cannot borrow\n-    *bar1;\n+    let _foo1 = &foo.bar2;\n }\n \n fn borrow_mut_from_imm() {\n@@ -125,7 +126,7 @@ fn borrow_mut_from_imm() {\n fn borrow_long_path_both_mut() {\n     let mut foo = make_foo();\n     let bar1 = &mut foo.bar1.int1;\n-    let foo1 = &mut foo.bar2.int2; //~ ERROR cannot borrow\n+    let foo1 = &mut foo.bar2.int2;\n     *bar1;\n     *foo1;\n }"}, {"sha": "e00d69f89d36eefea364e61d44bf7c330b1469b8", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.stderr", "status": "modified", "additions": 51, "deletions": 103, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,168 +1,116 @@\n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:18:22\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:18:17\n    |\n LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- first mutable borrow occurs here\n+   |                ------------- first mutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;\n-   |                      ^^^^^^^^ second mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - first borrow ends here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:25:18\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:25:17\n    |\n LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- mutable borrow occurs here\n+   |                ------------- mutable borrow occurs here\n LL |     let _bar2 = &foo.bar1;\n-   |                  ^^^^^^^^ immutable borrow occurs here\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - mutable borrow ends here\n+   |     ----- mutable borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:32:22\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:32:17\n    |\n LL |     let bar1 = &foo.bar1;\n-   |                 -------- immutable borrow occurs here\n+   |                --------- immutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;\n-   |                      ^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0499]: cannot borrow `foo` (via `foo.bar2`) as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:46:22\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- first mutable borrow occurs here (via `foo.bar1`)\n-LL |     let _bar2 = &mut foo.bar2;\n-   |                      ^^^^^^^^ second mutable borrow occurs here (via `foo.bar2`)\n-LL |     *bar1;\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `foo` (via `foo.bar2`) as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:53:42\n-   |\n-LL |         Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {}\n-   |                     -------------        ^^^^^^^^^^^^^ second mutable borrow occurs here (via `foo.bar2`)\n-   |                     |\n-   |                     first mutable borrow occurs here (via `foo.bar1`)\n-LL |\n-LL |     }\n-   |     - first borrow ends here\n+   |     ----- immutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:62:21\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:64:21\n    |\n LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- first mutable borrow occurs here\n+   |                ------------- first mutable borrow occurs here\n LL |     match *foo {\n LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {}\n    |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n-LL | }\n-   | - first borrow ends here\n+LL |     *bar1;\n+   |     ----- first borrow later used here\n \n-error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:71:18\n+error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:73:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- mutable borrow occurs here\n+   |                ------------------ mutable borrow occurs here\n LL |     let _foo1 = &foo.bar1;\n-   |                  ^^^^^^^^ immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n+LL |     let _foo2 = &*foo;\n+LL |     *bar1;\n+   |     ----- mutable borrow later used here\n \n-error[E0502]: cannot borrow `*foo` as immutable because `foo.bar1.int1` is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:72:18\n+error[E0502]: cannot borrow `*foo` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:74:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- mutable borrow occurs here\n+   |                ------------------ mutable borrow occurs here\n LL |     let _foo1 = &foo.bar1;\n LL |     let _foo2 = &*foo;\n-   |                  ^^^^ immutable borrow occurs here\n+   |                 ^^^^^ immutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - mutable borrow ends here\n+   |     ----- mutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:79:22\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:81:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- first mutable borrow occurs here\n+   |                ------------------ first mutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1;\n-   |                      ^^^^^^^^ second mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - first borrow ends here\n+   |     ----- first borrow later used here\n \n error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:86:22\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:88:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- first mutable borrow occurs here\n+   |                ------------------ first mutable borrow occurs here\n LL |     let _foo2 = &mut *foo;\n-   |                      ^^^^ second mutable borrow occurs here\n+   |                 ^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - first borrow ends here\n+   |     ----- first borrow later used here\n \n-error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:93:22\n+error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:95:17\n    |\n LL |     let bar1 = &foo.bar1.int1;\n-   |                 ------------- immutable borrow occurs here\n+   |                -------------- immutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1;\n-   |                      ^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - immutable borrow ends here\n+   |     ----- immutable borrow later used here\n \n-error[E0502]: cannot borrow `*foo` as mutable because `foo.bar1.int1` is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:100:22\n+error[E0502]: cannot borrow `*foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:102:17\n    |\n LL |     let bar1 = &foo.bar1.int1;\n-   |                 ------------- immutable borrow occurs here\n+   |                -------------- immutable borrow occurs here\n LL |     let _foo2 = &mut *foo;\n-   |                      ^^^^ mutable borrow occurs here\n-LL |     *bar1;\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `foo` (via `foo.bar2`) as immutable because `foo` is also borrowed as mutable (via `foo.bar1`)\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:115:18\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- mutable borrow occurs here (via `foo.bar1`)\n-LL |     let _foo1 = &foo.bar2;\n-   |                  ^^^^^^^^ immutable borrow of `foo.bar2` -- which overlaps with `foo.bar1` -- occurs here\n+   |                 ^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - mutable borrow ends here\n+   |     ----- immutable borrow later used here\n \n-error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:121:21\n+error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n+  --> $DIR/borrowck-borrow-from-owned-ptr.rs:122:16\n    |\n LL |     let foo = make_foo();\n-   |         --- help: make this binding mutable: `mut foo`\n+   |         --- help: consider changing this to be mutable: `mut foo`\n LL |     let bar1 = &mut foo.bar1;\n-   |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n-\n-error[E0499]: cannot borrow `foo` (via `foo.bar2.int2`) as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-owned-ptr.rs:128:21\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- first mutable borrow occurs here (via `foo.bar1.int1`)\n-LL |     let foo1 = &mut foo.bar2.int2;\n-   |                     ^^^^^^^^^^^^^ second mutable borrow occurs here (via `foo.bar2.int2`)\n-...\n-LL | }\n-   | - first borrow ends here\n+   |                ^^^^^^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0499, E0502, E0596.\n For more information about an error, try `rustc --explain E0499`."}, {"sha": "ce5ce56dea27fe85e2962e2f4173a08c485662ac", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.nll.stderr", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,116 +0,0 @@\n-error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:18:17\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ------------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:25:17\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ------------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;\n-   |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- mutable borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:32:17\n-   |\n-LL |     let bar1 = &foo.bar1;\n-   |                --------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- immutable borrow later used here\n-\n-error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:61:21\n-   |\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ------------- first mutable borrow occurs here\n-LL |     match foo {\n-LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {} //\n-   |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:70:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1;\n-   |                 ^^^^^^^^^ immutable borrow occurs here\n-LL |     let _foo2 = &foo;\n-LL |     *bar1;\n-   |     ----- mutable borrow later used here\n-\n-error[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:71:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1;\n-LL |     let _foo2 = &foo;\n-   |                 ^^^^ immutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- mutable borrow later used here\n-\n-error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:78:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:85:17\n-   |\n-LL |     let bar1 = &mut foo.bar1.int1;\n-   |                ------------------ first mutable borrow occurs here\n-LL |     let _foo2 = &mut foo;\n-   |                 ^^^^^^^^ second mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- first borrow later used here\n-\n-error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:92:17\n-   |\n-LL |     let bar1 = &foo.bar1.int1;\n-   |                -------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1;\n-   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- immutable borrow later used here\n-\n-error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:99:17\n-   |\n-LL |     let bar1 = &foo.bar1.int1;\n-   |                -------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut foo;\n-   |                 ^^^^^^^^ mutable borrow occurs here\n-LL |     *bar1;\n-   |     ----- immutable borrow later used here\n-\n-error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:120:16\n-   |\n-LL |     let foo = make_foo();\n-   |         --- help: consider changing this to be mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1;\n-   |                ^^^^^^^^^^^^^ cannot borrow as mutable\n-\n-error: aborting due to 11 previous errors\n-\n-Some errors have detailed explanations: E0499, E0502, E0596.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "ce5ce56dea27fe85e2962e2f4173a08c485662ac", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.stderr", "status": "modified", "additions": 49, "deletions": 57, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,122 +1,114 @@\n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:18:22\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:18:17\n    |\n LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- first mutable borrow occurs here\n+   |                ------------- first mutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;\n-   |                      ^^^^^^^^ second mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - first borrow ends here\n+   |     ----- first borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:25:18\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:25:17\n    |\n LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- mutable borrow occurs here\n+   |                ------------- mutable borrow occurs here\n LL |     let _bar2 = &foo.bar1;\n-   |                  ^^^^^^^^ immutable borrow occurs here\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - mutable borrow ends here\n+   |     ----- mutable borrow later used here\n \n error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:32:22\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:32:17\n    |\n LL |     let bar1 = &foo.bar1;\n-   |                 -------- immutable borrow occurs here\n+   |                --------- immutable borrow occurs here\n LL |     let _bar2 = &mut foo.bar1;\n-   |                      ^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - immutable borrow ends here\n+   |     ----- immutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:61:21\n    |\n LL |     let bar1 = &mut foo.bar1;\n-   |                     -------- first mutable borrow occurs here\n+   |                ------------- first mutable borrow occurs here\n LL |     match foo {\n LL |         Foo { bar1: ref mut _bar1, bar2: _ } => {} //\n    |                     ^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n-LL | }\n-   | - first borrow ends here\n+LL |     *bar1;\n+   |     ----- first borrow later used here\n \n-error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:70:18\n+error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:70:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- mutable borrow occurs here\n+   |                ------------------ mutable borrow occurs here\n LL |     let _foo1 = &foo.bar1;\n-   |                  ^^^^^^^^ immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n+   |                 ^^^^^^^^^ immutable borrow occurs here\n+LL |     let _foo2 = &foo;\n+LL |     *bar1;\n+   |     ----- mutable borrow later used here\n \n-error[E0502]: cannot borrow `foo` as immutable because `foo.bar1.int1` is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:71:18\n+error[E0502]: cannot borrow `foo` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:71:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- mutable borrow occurs here\n+   |                ------------------ mutable borrow occurs here\n LL |     let _foo1 = &foo.bar1;\n LL |     let _foo2 = &foo;\n-   |                  ^^^ immutable borrow occurs here\n+   |                 ^^^^ immutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - mutable borrow ends here\n+   |     ----- mutable borrow later used here\n \n error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:78:22\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:78:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- first mutable borrow occurs here\n+   |                ------------------ first mutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1;\n-   |                      ^^^^^^^^ second mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - first borrow ends here\n+   |     ----- first borrow later used here\n \n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:85:22\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:85:17\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n-   |                     ------------- first mutable borrow occurs here\n+   |                ------------------ first mutable borrow occurs here\n LL |     let _foo2 = &mut foo;\n-   |                      ^^^ second mutable borrow occurs here\n+   |                 ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - first borrow ends here\n+   |     ----- first borrow later used here\n \n-error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:92:22\n+error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:92:17\n    |\n LL |     let bar1 = &foo.bar1.int1;\n-   |                 ------------- immutable borrow occurs here\n+   |                -------------- immutable borrow occurs here\n LL |     let _foo1 = &mut foo.bar1;\n-   |                      ^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - immutable borrow ends here\n+   |     ----- immutable borrow later used here\n \n-error[E0502]: cannot borrow `foo` as mutable because `foo.bar1.int1` is also borrowed as immutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:99:22\n+error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:99:17\n    |\n LL |     let bar1 = &foo.bar1.int1;\n-   |                 ------------- immutable borrow occurs here\n+   |                -------------- immutable borrow occurs here\n LL |     let _foo2 = &mut foo;\n-   |                      ^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n-LL | }\n-   | - immutable borrow ends here\n+   |     ----- immutable borrow later used here\n \n-error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n-  --> $DIR/borrowck-borrow-from-stack-variable.rs:120:21\n+error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n+  --> $DIR/borrowck-borrow-from-stack-variable.rs:120:16\n    |\n LL |     let foo = make_foo();\n-   |         --- help: make this binding mutable: `mut foo`\n+   |         --- help: consider changing this to be mutable: `mut foo`\n LL |     let bar1 = &mut foo.bar1;\n-   |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n+   |                ^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 11 previous errors\n "}, {"sha": "71bf052c93d616433e96e4682e3081b7d251e9ca", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/borrowck-borrow-from-temporary.rs:10:5\n-   |\n-LL |     let &Foo(ref x) = &id(Foo(3));\n-   |                        ---------- temporary value created here\n-LL |     x\n-   |     ^ returns a value referencing data owned by the current function\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0515`."}, {"sha": "92f3ffd57a17d675426d1984ea493e861700167d", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -6,8 +6,8 @@ fn id<T>(x: T) -> T { x }\n struct Foo(isize);\n \n fn foo<'a>() -> &'a isize {\n-    let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n-    x\n+    let &Foo(ref x) = &id(Foo(3));\n+    x //~ ERROR cannot return value referencing temporary value\n }\n \n pub fn main() {"}, {"sha": "71bf052c93d616433e96e4682e3081b7d251e9ca", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,18 +1,11 @@\n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-borrow-from-temporary.rs:9:24\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/borrowck-borrow-from-temporary.rs:10:5\n    |\n LL |     let &Foo(ref x) = &id(Foo(3));\n-   |                        ^^^^^^^^^^ temporary value does not live long enough\n+   |                        ---------- temporary value created here\n LL |     x\n-LL | }\n-   | - temporary value only lives until here\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 8:8...\n-  --> $DIR/borrowck-borrow-from-temporary.rs:8:8\n-   |\n-LL | fn foo<'a>() -> &'a isize {\n-   |        ^^\n+   |     ^ returns a value referencing data owned by the current function\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "7d7e305a31f31ccf3d113e53af7c9ffd3756efa8", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0596]: cannot borrow `*a` as mutable, as `a` is not declared as mutable\n-  --> $DIR/borrowck-borrow-immut-deref-of-box-as-mut.rs:12:5\n-   |\n-LL |     let a: Box<_> = box A;\n-   |         - help: consider changing this to be mutable: `mut a`\n-LL |     a.foo();\n-   |     ^ cannot borrow as mutable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "bc820ee9f9141a7d506748653d0be7d6201e5e2d", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -10,5 +10,5 @@ impl A {\n pub fn main() {\n     let a: Box<_> = box A;\n     a.foo();\n-    //~^ ERROR cannot borrow immutable `Box` content `*a` as mutable\n+    //~^ ERROR cannot borrow `*a` as mutable, as `a` is not declared as mutable [E0596]\n }"}, {"sha": "7d7e305a31f31ccf3d113e53af7c9ffd3756efa8", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,8 +1,8 @@\n-error[E0596]: cannot borrow immutable `Box` content `*a` as mutable\n+error[E0596]: cannot borrow `*a` as mutable, as `a` is not declared as mutable\n   --> $DIR/borrowck-borrow-immut-deref-of-box-as-mut.rs:12:5\n    |\n LL |     let a: Box<_> = box A;\n-   |         - help: make this binding mutable: `mut a`\n+   |         - help: consider changing this to be mutable: `mut a`\n LL |     a.foo();\n    |     ^ cannot borrow as mutable\n "}, {"sha": "8115e3150fbce925808e676bb984dfac47243519", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,31 +0,0 @@\n-error[E0594]: cannot assign to `**t1` which is behind a `&` reference\n-  --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:9:5\n-   |\n-LL |     let t1 = t0;\n-   |         -- help: consider changing this to be a mutable reference: `&mut &mut isize`\n-LL |     let p: &isize = &**t0;\n-LL |     **t1 = 22;\n-   |     ^^^^^^^^^ `t1` is a `&` reference, so the data it refers to cannot be written\n-\n-error[E0502]: cannot borrow `**t0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:21\n-   |\n-LL |     let t1 = &mut *t0;\n-   |              -------- mutable borrow occurs here\n-LL |     let p: &isize = &**t0;\n-   |                     ^^^^^ immutable borrow occurs here\n-LL |     **t1 = 22;\n-   |     --------- mutable borrow later used here\n-\n-error[E0596]: cannot borrow `**t0` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:19:26\n-   |\n-LL | fn foo4(t0: & &mut isize) {\n-   |             ------------ help: consider changing this to be a mutable reference: `&mut &mut isize`\n-LL |     let x:  &mut isize = &mut **t0;\n-   |                          ^^^^^^^^^ `t0` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0502, E0596.\n-For more information about an error, try `rustc --explain E0502`."}, {"sha": "8115e3150fbce925808e676bb984dfac47243519", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,29 +1,31 @@\n-error[E0389]: cannot assign to data in a `&` reference\n+error[E0594]: cannot assign to `**t1` which is behind a `&` reference\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:9:5\n    |\n+LL |     let t1 = t0;\n+   |         -- help: consider changing this to be a mutable reference: `&mut &mut isize`\n+LL |     let p: &isize = &**t0;\n LL |     **t1 = 22;\n-   |     ^^^^^^^^^ assignment into an immutable reference\n+   |     ^^^^^^^^^ `t1` is a `&` reference, so the data it refers to cannot be written\n \n-error[E0502]: cannot borrow `**t0` as immutable because `*t0` is also borrowed as mutable\n-  --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:22\n+error[E0502]: cannot borrow `**t0` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:21\n    |\n LL |     let t1 = &mut *t0;\n-   |                   --- mutable borrow occurs here\n+   |              -------- mutable borrow occurs here\n LL |     let p: &isize = &**t0;\n-   |                      ^^^^ immutable borrow occurs here\n+   |                     ^^^^^ immutable borrow occurs here\n LL |     **t1 = 22;\n-LL | }\n-   | - mutable borrow ends here\n+   |     --------- mutable borrow later used here\n \n-error[E0389]: cannot borrow data mutably in a `&` reference\n-  --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:19:31\n+error[E0596]: cannot borrow `**t0` as mutable, as it is behind a `&` reference\n+  --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:19:26\n    |\n LL | fn foo4(t0: & &mut isize) {\n-   |             ------------ use `&mut &mut isize` here to make mutable\n+   |             ------------ help: consider changing this to be a mutable reference: `&mut &mut isize`\n LL |     let x:  &mut isize = &mut **t0;\n-   |                               ^^^^ assignment into an immutable reference\n+   |                          ^^^^^^^^^ `t0` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0389, E0502.\n-For more information about an error, try `rustc --explain E0389`.\n+Some errors have detailed explanations: E0502, E0596.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "fa0ae318e72cd2ce7d2cd77cfa424504602e99c7", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-mut-object-twice.rs:13:5\n-   |\n-LL |     let y = x.f1();\n-   |             - first mutable borrow occurs here\n-LL |     x.f2();\n-   |     ^ second mutable borrow occurs here\n-LL |     y.use_ref();\n-   |     - first borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0499`."}, {"sha": "fa0ae318e72cd2ce7d2cd77cfa424504602e99c7", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -6,8 +6,7 @@ LL |     let y = x.f1();\n LL |     x.f2();\n    |     ^ second mutable borrow occurs here\n LL |     y.use_ref();\n-LL | }\n-   | - first borrow ends here\n+   |     - first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "dc52685363e39326e57c677b818cecb7c780cef3", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.nll.stderr", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,87 +0,0 @@\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:47:19\n-   |\n-LL |     let __isize = &mut x.y;\n-   |                   ^^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:51:19\n-   |\n-LL |     let __isize = &mut x.y;\n-   |                   ^^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:59:5\n-   |\n-LL |     &mut x.y\n-   |     ^^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:63:5\n-   |\n-LL |     &mut x.y\n-   |     ^^^^^^^^ cannot borrow as mutable\n-\n-error[E0594]: cannot assign to data in a `&` reference\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:67:5\n-   |\n-LL |     x.y = 3;\n-   |     ^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to data in a `&` reference\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:71:5\n-   |\n-LL |     x.y = 3;\n-   |     ^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to data in a `&` reference\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:75:5\n-   |\n-LL |     x.y = 3;\n-   |     ^^^^^^^ cannot assign\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:83:5\n-   |\n-LL |     x.set(0, 0);\n-   |     ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:87:5\n-   |\n-LL |     x.set(0, 0);\n-   |     ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:95:5\n-   |\n-LL |     x.y_mut()\n-   |     ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:99:5\n-   |\n-LL |     x.y_mut()\n-   |     ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:103:6\n-   |\n-LL |     *x.y_mut() = 3;\n-   |      ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:107:6\n-   |\n-LL |     *x.y_mut() = 3;\n-   |      ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:111:6\n-   |\n-LL |     *x.y_mut() = 3;\n-   |      ^ cannot borrow as mutable\n-\n-error: aborting due to 14 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "dc52685363e39326e57c677b818cecb7c780cef3", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,82 +1,82 @@\n-error[E0596]: cannot borrow field of immutable binding as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:47:24\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:47:19\n    |\n LL |     let __isize = &mut x.y;\n-   |                        ^^^ cannot mutably borrow field of immutable binding\n+   |                   ^^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow field of immutable binding as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:51:24\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:51:19\n    |\n LL |     let __isize = &mut x.y;\n-   |                        ^^^ cannot mutably borrow field of immutable binding\n+   |                   ^^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow field of immutable binding as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:59:10\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:59:5\n    |\n LL |     &mut x.y\n-   |          ^^^ cannot mutably borrow field of immutable binding\n+   |     ^^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow field of immutable binding as mutable\n-  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:63:10\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:63:5\n    |\n LL |     &mut x.y\n-   |          ^^^ cannot mutably borrow field of immutable binding\n+   |     ^^^^^^^^ cannot borrow as mutable\n \n-error[E0594]: cannot assign to field of immutable binding\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:67:5\n    |\n LL |     x.y = 3;\n-   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+   |     ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to field of immutable binding\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:71:5\n    |\n LL |     x.y = 3;\n-   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+   |     ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to field of immutable binding\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:75:5\n    |\n LL |     x.y = 3;\n-   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+   |     ^^^^^^^ cannot assign\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:83:5\n    |\n LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:87:5\n    |\n LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:95:5\n    |\n LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:99:5\n    |\n LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:103:6\n    |\n LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:107:6\n    |\n LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:111:6\n    |\n LL |     *x.y_mut() = 3;"}, {"sha": "1755b22f59dc2c891edeca7f6056c59280a38a1c", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.nll.stderr", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,45 +0,0 @@\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:23:19\n-   |\n-LL |     let __isize = &mut *x;\n-   |                   ^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:27:19\n-   |\n-LL |     let __isize = &mut *x;\n-   |                   ^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:35:5\n-   |\n-LL |     &mut **x\n-   |     ^^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:39:5\n-   |\n-LL |     &mut **x\n-   |     ^^^^^^^^ cannot borrow as mutable\n-\n-error[E0594]: cannot assign to data in a `&` reference\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:43:5\n-   |\n-LL |     *x = 3;\n-   |     ^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to data in a `&` reference\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:47:5\n-   |\n-LL |     **x = 3;\n-   |     ^^^^^^^ cannot assign\n-\n-error[E0594]: cannot assign to data in a `&` reference\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:51:5\n-   |\n-LL |     **x = 3;\n-   |     ^^^^^^^ cannot assign\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "1755b22f59dc2c891edeca7f6056c59280a38a1c", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,44 +1,44 @@\n-error[E0596]: cannot borrow immutable borrowed content as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:23:24\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref.rs:23:19\n    |\n LL |     let __isize = &mut *x;\n-   |                        ^^ cannot borrow as mutable\n+   |                   ^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:27:24\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref.rs:27:19\n    |\n LL |     let __isize = &mut *x;\n-   |                        ^^ cannot borrow as mutable\n+   |                   ^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:35:10\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref.rs:35:5\n    |\n LL |     &mut **x\n-   |          ^^^ cannot borrow as mutable\n+   |     ^^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable borrowed content as mutable\n-  --> $DIR/borrowck-borrow-overloaded-deref.rs:39:10\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref.rs:39:5\n    |\n LL |     &mut **x\n-   |          ^^^ cannot borrow as mutable\n+   |     ^^^^^^^^ cannot borrow as mutable\n \n-error[E0594]: cannot assign to immutable borrowed content\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:43:5\n    |\n LL |     *x = 3;\n-   |     ^^^^^^ cannot borrow as mutable\n+   |     ^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to immutable borrowed content\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:47:5\n    |\n LL |     **x = 3;\n-   |     ^^^^^^^ cannot borrow as mutable\n+   |     ^^^^^^^ cannot assign\n \n-error[E0594]: cannot assign to immutable borrowed content\n+error[E0594]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:51:5\n    |\n LL |     **x = 3;\n-   |     ^^^^^^^ cannot borrow as mutable\n+   |     ^^^^^^^ cannot assign\n \n error: aborting due to 7 previous errors\n "}, {"sha": "1dd18c12fc8de4c18c4642965ec1921ab8066deb", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,16 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:20:20\n-   |\n-LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n-   |                    |\n-   |                    creates a temporary which is freed while still in use\n-LL |     x.x[0];\n-   |     ------ borrow later used here\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0716`."}, {"sha": "e384aacb718451332b0f8f25df0044f7c0b6b440", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -17,6 +17,6 @@ fn defer<'r>(x: &'r [&'r str]) -> Defer<'r> {\n }\n \n fn main() {\n-    let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n+    let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR temporary value dropped while borrowed\n     x.x[0];\n }"}, {"sha": "1dd18c12fc8de4c18c4642965ec1921ab8066deb", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,17 +1,16 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:20:20\n    |\n LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value dropped here while still borrowed\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                    |\n-   |                    temporary value does not live long enough\n+   |                    creates a temporary which is freed while still in use\n LL |     x.x[0];\n-LL | }\n-   | - temporary value needs to live until here\n+   |     ------ borrow later used here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "c91a4377b4c67c4b32710033dc4389be23b806f7", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,16 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:28\n-   |\n-LL |     buggy_map.insert(42, &*Box::new(1));\n-   |                            ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n-   |                            |\n-   |                            creates a temporary which is freed while still in use\n-...\n-LL |     buggy_map.insert(43, &*tmp);\n-   |     --------- borrow later used here\n-   |\n-   = note: consider using a `let` binding to create a longer lived value\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0716`."}, {"sha": "a78c66f47cd14c9c3ca73a163a374f013691d11d", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -7,7 +7,7 @@ use std::collections::HashMap;\n fn main() {\n     let tmp: Box<_>;\n     let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n-    buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n+    buggy_map.insert(42, &*Box::new(1)); //~ ERROR temporary value dropped while borrowed\n \n     // but it is ok if we use a temporary\n     tmp = box 2;"}, {"sha": "c91a4377b4c67c4b32710033dc4389be23b806f7", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,16 +1,16 @@\n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:27\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:28\n    |\n LL |     buggy_map.insert(42, &*Box::new(1));\n-   |                           ^^^^^^^^^^^^ - borrowed value dropped here while still borrowed\n-   |                           |\n-   |                           borrowed value does not live long enough\n+   |                            ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |                            |\n+   |                            creates a temporary which is freed while still in use\n ...\n-LL | }\n-   | - borrowed value needs to live until here\n+LL |     buggy_map.insert(43, &*tmp);\n+   |     --------- borrow later used here\n    |\n-   = note: consider using a `let` binding to increase its lifetime\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "6e6bc721ca20fc1fd367eb2ed0204ac9fd8154e9", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.ast.stderr", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,165 +0,0 @@\n-error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-box-insensitivity.rs:37:9\n-   |\n-LL |     let _x = a.x;\n-   |         -- value moved here\n-LL |\n-LL |     let _y = a.y;\n-   |         ^^ value used here after move\n-   |\n-   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-box-insensitivity.rs:46:9\n-   |\n-LL |     let _x = a.x;\n-   |         -- value moved here\n-LL |\n-LL |     let _y = a.y;\n-   |         ^^ value used here after move\n-   |\n-   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `a`\n-  --> $DIR/borrowck-box-insensitivity.rs:55:15\n-   |\n-LL |     let _x = a.x;\n-   |         -- value moved here\n-LL |\n-LL |     let _y = &a.y;\n-   |               ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0505]: cannot move out of `a.y` because it is borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:63:9\n-   |\n-LL |     let _x = &a.x;\n-   |               --- borrow of `a.x` occurs here\n-LL |     let _y = a.y;\n-   |         ^^ move out of `a.y` occurs here\n-\n-error[E0503]: cannot use `a.y` because it was mutably borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:71:9\n-   |\n-LL |     let _x = &mut a.x;\n-   |                   --- borrow of `a.x` occurs here\n-LL |     let _y = a.y;\n-   |         ^^ use of borrowed `a.x`\n-\n-error[E0505]: cannot move out of `a.y` because it is borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:77:9\n-   |\n-LL |     let _x = &mut a.x;\n-   |                   --- borrow of `a.x` occurs here\n-LL |     let _y = a.y;\n-   |         ^^ move out of `a.y` occurs here\n-\n-error[E0502]: cannot borrow `a` (via `a.y`) as immutable because `a` is also borrowed as mutable (via `a.x`)\n-  --> $DIR/borrowck-box-insensitivity.rs:85:15\n-   |\n-LL |     let _x = &mut a.x;\n-   |                   --- mutable borrow occurs here (via `a.x`)\n-LL |     let _y = &a.y;\n-   |               ^^^ immutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `a` (via `a.y`) as mutable because `a` is also borrowed as immutable (via `a.x`)\n-  --> $DIR/borrowck-box-insensitivity.rs:92:19\n-   |\n-LL |     let _x = &a.x;\n-   |               --- immutable borrow occurs here (via `a.x`)\n-LL |     let _y = &mut a.y;\n-   |                   ^^^ mutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0382]: use of collaterally moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:100:9\n-   |\n-LL |     let _x = a.x.x;\n-   |         -- value moved here\n-LL |\n-LL |     let _y = a.y;\n-   |         ^^ value used here after move\n-   |\n-   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of collaterally moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:108:9\n-   |\n-LL |     let _x = a.x.x;\n-   |         -- value moved here\n-LL |\n-LL |     let _y = a.y;\n-   |         ^^ value used here after move\n-   |\n-   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of collaterally moved value: `a.y`\n-  --> $DIR/borrowck-box-insensitivity.rs:116:15\n-   |\n-LL |     let _x = a.x.x;\n-   |         -- value moved here\n-LL |\n-LL |     let _y = &a.y;\n-   |               ^^^ value used here after move\n-   |\n-   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0505]: cannot move out of `a.y` because it is borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:124:9\n-   |\n-LL |     let _x = &a.x.x;\n-   |               ----- borrow of `a.x.x` occurs here\n-LL |\n-LL |     let _y = a.y;\n-   |         ^^ move out of `a.y` occurs here\n-\n-error[E0503]: cannot use `a.y` because it was mutably borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:132:9\n-   |\n-LL |     let _x = &mut a.x.x;\n-   |                   ----- borrow of `a.x.x` occurs here\n-LL |     let _y = a.y;\n-   |         ^^ use of borrowed `a.x.x`\n-\n-error[E0505]: cannot move out of `a.y` because it is borrowed\n-  --> $DIR/borrowck-box-insensitivity.rs:138:9\n-   |\n-LL |     let _x = &mut a.x.x;\n-   |                   ----- borrow of `a.x.x` occurs here\n-LL |     let _y = a.y;\n-   |         ^^ move out of `a.y` occurs here\n-\n-error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed as mutable\n-  --> $DIR/borrowck-box-insensitivity.rs:147:15\n-   |\n-LL |     let _x = &mut a.x.x;\n-   |                   ----- mutable borrow occurs here\n-LL |\n-LL |     let _y = &a.y;\n-   |               ^^^ immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as immutable\n-  --> $DIR/borrowck-box-insensitivity.rs:155:19\n-   |\n-LL |     let _x = &a.x.x;\n-   |               ----- immutable borrow occurs here\n-LL |\n-LL |     let _y = &mut a.y;\n-   |                   ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error: aborting due to 16 previous errors\n-\n-Some errors have detailed explanations: E0382, E0502, E0503, E0505.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "0e380e90e75915b5f12f7df4a26414b267c3444e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.mir.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error: compilation successful\n-  --> $DIR/borrowck-box-insensitivity.rs:160:1\n-   |\n-LL | / fn main() {\n-LL | |     copy_after_move();\n-LL | |     move_after_move();\n-LL | |     borrow_after_move();\n-...  |\n-LL | |     mut_borrow_after_borrow_nested();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0e380e90e75915b5f12f7df4a26414b267c3444e", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error: compilation successful\n-  --> $DIR/borrowck-box-insensitivity.rs:160:1\n-   |\n-LL | / fn main() {\n-LL | |     copy_after_move();\n-LL | |     move_after_move();\n-LL | |     borrow_after_move();\n-...  |\n-LL | |     mut_borrow_after_borrow_nested();\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "e5591f500380b5c9b1cdbef060f3e09d08e5c7ce", "filename": "src/test/ui/borrowck/borrowck-box-sensitivity.rs", "status": "renamed", "additions": 20, "deletions": 55, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-sensitivity.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,14 +1,9 @@\n-// This test is an artifact of the old policy that `Box<T>` should not\n-// be treated specially by the AST-borrowck.\n-//\n-// NLL goes back to treating `Box<T>` specially (namely, knowing that\n-// it uniquely owns the data it holds). See rust-lang/rfcs#130.\n-\n-// revisions: ast mir\n-//[ast] compile-flags: -Z borrowck=ast\n-//[mir] compile-flags: -Z borrowck=mir\n-// ignore-compare-mode-nll\n-#![feature(box_syntax, rustc_attrs)]\n+// Test that `Box<T>` is treated specially by borrow checking. This is the case\n+// because NLL reverted the deicision in rust-lang/rfcs#130.\n+\n+// run-pass\n+\n+#![feature(box_syntax)]\n \n struct A {\n     x: Box<isize>,\n@@ -33,131 +28,101 @@ struct D {\n fn copy_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //[ast]~^ value moved here\n-    let _y = a.y; //[ast]~ ERROR use of moved\n-    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //[ast]~| value used here after move\n+    let _y = a.y;\n }\n \n fn move_after_move() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n-    //[ast]~^ value moved here\n-    let _y = a.y; //[ast]~ ERROR use of moved\n-    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //[ast]~| value used here after move\n+    let _y = a.y;\n }\n \n fn borrow_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //[ast]~^ value moved here\n-    let _y = &a.y; //[ast]~ ERROR use of moved\n-    //[ast]~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n-    //[ast]~| value used here after move\n+    let _y = &a.y;\n }\n \n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     let _y = a.y;\n-    //[ast]~^ ERROR cannot move\n-    //[ast]~| move out of\n     use_imm(_x);\n }\n fn copy_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    let _y = a.y; //[ast]~ ERROR cannot use\n+    let _y = a.y;\n     use_mut(_x);\n }\n fn move_after_mut_borrow() {\n     let mut a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &mut a.x;\n     let _y = a.y;\n-    //[ast]~^ ERROR cannot move\n-    //[ast]~| move out of\n     use_mut(_x);\n }\n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    let _y = &a.y; //[ast]~ ERROR cannot borrow\n-    //[ast]~^ immutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n+    let _y = &a.y;\n     use_mut(_x);\n }\n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n-    let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n-    //[ast]~^ mutable borrow of `a.y` -- which overlaps with `a.x` -- occurs here\n+    let _y = &mut a.y;\n     use_imm(_x);\n }\n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //[ast]~^ value moved here\n-    let _y = a.y; //[ast]~ ERROR use of collaterally moved\n-    //[ast]~| value used here after move\n+    let _y = a.y;\n }\n \n fn move_after_move_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n-    //[ast]~^ value moved here\n-    let _y = a.y; //[ast]~ ERROR use of collaterally moved\n-    //[ast]~| value used here after move\n+    let _y = a.y;\n }\n \n fn borrow_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //[ast]~^ value moved here\n-    let _y = &a.y; //[ast]~ ERROR use of collaterally moved\n-    //[ast]~| value used here after move\n+    let _y = &a.y;\n }\n \n fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n-    //[ast]~^ borrow of `a.x.x` occurs here\n     let _y = a.y;\n-    //[ast]~^ ERROR cannot move\n-    //[ast]~| move out of\n     use_imm(_x);\n }\n fn copy_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    let _y = a.y; //[ast]~ ERROR cannot use\n+    let _y = a.y;\n     use_mut(_x);\n }\n fn move_after_mut_borrow_nested() {\n     let mut a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &mut a.x.x;\n     let _y = a.y;\n-    //[ast]~^ ERROR cannot move\n-    //[ast]~| move out of\n     use_mut(_x);\n }\n fn borrow_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //[ast]~^ mutable borrow occurs here\n-    let _y = &a.y; //[ast]~ ERROR cannot borrow\n-    //[ast]~^ immutable borrow occurs here\n+    let _y = &a.y;\n     use_mut(_x);\n }\n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n-    //[ast]~^ immutable borrow occurs here\n-    let _y = &mut a.y; //[ast]~ ERROR cannot borrow\n-    //[ast]~^ mutable borrow occurs here\n+    let _y = &mut a.y;\n     use_imm(_x);\n }\n-#[rustc_error]\n-fn main() { //[mir]~ ERROR compilation successful\n+\n+fn main() {\n     copy_after_move();\n     move_after_move();\n     borrow_after_move();", "previous_filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs"}, {"sha": "e40d8d9dfccb9e8ff52fd277c97dd9c6ee5f3c8d", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-break-uninit-2.rs:9:20\n-   |\n-LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly uninitialized `x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "dad5325cb875085acfe822cdcf72e1e283ccc835", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -6,7 +6,7 @@ fn foo() -> isize {\n         x = 0;\n     }\n \n-    println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR borrow of possibly uninitialized variable: `x`\n \n     return 17;\n }"}, {"sha": "e40d8d9dfccb9e8ff52fd277c97dd9c6ee5f3c8d", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n LL |     println!(\"{}\", x);"}, {"sha": "bbf9b9f1241a26ab344ec85ccca53c1d33112e16", "filename": "src/test/ui/borrowck/borrowck-break-uninit.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: borrow of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-break-uninit.rs:9:20\n-   |\n-LL |     println!(\"{}\", x);\n-   |                    ^ use of possibly uninitialized `x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "9af02b387d8b025e7d8ff4ade67c78c876fe714f", "filename": "src/test/ui/borrowck/borrowck-break-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -6,7 +6,7 @@ fn foo() -> isize {\n         x = 0;\n     }\n \n-    println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+    println!(\"{}\", x); //~ ERROR borrow of possibly uninitialized variable: `x`\n \n     return 17;\n }"}, {"sha": "bbf9b9f1241a26ab344ec85ccca53c1d33112e16", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n+error[E0381]: borrow of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n LL |     println!(\"{}\", x);"}, {"sha": "d506599eb68d6d195a0422b980c185f1437a426d", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.ast.stderr", "status": "removed", "additions": 0, "deletions": 96, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,96 +0,0 @@\n-error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:21:14\n-   |\n-LL |     let c1 = || x = 4;\n-   |              -- - previous borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-LL |     let c2 = || x * 5;\n-   |              ^^ - borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:29:14\n-   |\n-LL |     let c1 = || set(&mut x);\n-   |              --          - previous borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-LL |     let c2 = || get(&x);\n-   |              ^^      - borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:37:14\n-   |\n-LL |     let c1 = || set(&mut x);\n-   |              --          - previous borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-LL |     let c2 = || x * 5;\n-   |              ^^ - borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:45:5\n-   |\n-LL |     let c2 = || x * 5;\n-   |              -- borrow of `x` occurs here\n-LL |     x = 5;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:53:5\n-   |\n-LL |     let c1 = || get(&x);\n-   |              -- borrow of `x` occurs here\n-LL |     x = 5;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n-\n-error[E0506]: cannot assign to `*x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:61:5\n-   |\n-LL |     let c1 = || get(&*x);\n-   |              -- borrow of `*x` occurs here\n-LL |     *x = 5;\n-   |     ^^^^^^ assignment to borrowed `*x` occurs here\n-\n-error[E0506]: cannot assign to `*x.f` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:73:5\n-   |\n-LL |     let c1 = || get(&*x.f);\n-   |              -- borrow of `*x.f` occurs here\n-LL |     *x.f = 5;\n-   |     ^^^^^^^^ assignment to borrowed `*x.f` occurs here\n-\n-error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:85:14\n-   |\n-LL |     let c1 = || get(&*x.f);\n-   |              --       - previous borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-LL |     let c2 = || *x.f = 5;\n-   |              ^^  - borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0502, E0506.\n-For more information about an error, try `rustc --explain E0502`."}, {"sha": "a41738f6ca8b5afb765d19e25780e3a01d53e5e0", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.mir.stderr", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,116 +0,0 @@\n-error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:21:14\n-   |\n-LL |     let c1 = || x = 4;\n-   |              -- - first borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-LL |     let c2 = || x * 5;\n-   |              ^^ - second borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-LL |\n-LL |     drop(c1);\n-   |          -- mutable borrow later used here\n-\n-error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:29:14\n-   |\n-LL |     let c1 = || set(&mut x);\n-   |              --          - first borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-LL |     let c2 = || get(&x);\n-   |              ^^      - second borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-LL |\n-LL |     drop(c1);\n-   |          -- mutable borrow later used here\n-\n-error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:37:14\n-   |\n-LL |     let c1 = || set(&mut x);\n-   |              --          - first borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-LL |     let c2 = || x * 5;\n-   |              ^^ - second borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-LL |\n-LL |     drop(c1);\n-   |          -- mutable borrow later used here\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:45:5\n-   |\n-LL |     let c2 = || x * 5;\n-   |              -- - borrow occurs due to use in closure\n-   |              |\n-   |              borrow of `x` occurs here\n-LL |     x = 5;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n-LL |\n-LL |     drop(c2);\n-   |          -- borrow later used here\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:53:5\n-   |\n-LL |     let c1 = || get(&x);\n-   |              --      - borrow occurs due to use in closure\n-   |              |\n-   |              borrow of `x` occurs here\n-LL |     x = 5;\n-   |     ^^^^^ assignment to borrowed `x` occurs here\n-LL |\n-LL |     drop(c1);\n-   |          -- borrow later used here\n-\n-error[E0506]: cannot assign to `*x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:61:5\n-   |\n-LL |     let c1 = || get(&*x);\n-   |              --       - borrow occurs due to use in closure\n-   |              |\n-   |              borrow of `*x` occurs here\n-LL |     *x = 5;\n-   |     ^^^^^^ assignment to borrowed `*x` occurs here\n-LL |\n-LL |     drop(c1);\n-   |          -- borrow later used here\n-\n-error[E0506]: cannot assign to `*x.f` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:73:5\n-   |\n-LL |     let c1 = || get(&*x.f);\n-   |              --       - borrow occurs due to use in closure\n-   |              |\n-   |              borrow of `*x.f` occurs here\n-LL |     *x.f = 5;\n-   |     ^^^^^^^^ assignment to borrowed `*x.f` occurs here\n-LL |\n-LL |     drop(c1);\n-   |          -- borrow later used here\n-\n-error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:85:14\n-   |\n-LL |     let c1 = || get(&*x.f);\n-   |              --       - first borrow occurs due to use of `x` in closure\n-   |              |\n-   |              immutable borrow occurs here\n-LL |     let c2 = || *x.f = 5;\n-   |              ^^  - second borrow occurs due to use of `x` in closure\n-   |              |\n-   |              mutable borrow occurs here\n-LL |\n-LL |     drop(c1);\n-   |          -- immutable borrow later used here\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0502, E0506.\n-For more information about an error, try `rustc --explain E0502`."}, {"sha": "2dc405ffcd4c0a100c0a3ee24a80e9af9456a214", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,6 @@\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n-// ignore-tidy-linelength\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(box_syntax)]\n \n fn get(x: &isize) -> isize {\n@@ -18,48 +14,48 @@ fn set(x: &mut isize) {\n fn a() {\n     let mut x = 3;\n     let c1 = || x = 4;\n-    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n-    //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+    let c2 = || x * 5;\n+    //~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n     drop(c1);\n }\n \n fn b() {\n     let mut x = 3;\n     let c1 = || set(&mut x);\n-    let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n-                         //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+    let c2 = || get(&x);\n+    //~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n     drop(c1);\n }\n \n fn c() {\n     let mut x = 3;\n     let c1 = || set(&mut x);\n-    let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n-                       //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n+    let c2 = || x * 5;\n+    //~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n     drop(c1);\n }\n \n fn d() {\n     let mut x = 3;\n     let c2 = || x * 5;\n-    x = 5; //[ast]~ ERROR cannot assign\n-           //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+    x = 5;\n+    //~^ ERROR cannot assign to `x` because it is borrowed\n     drop(c2);\n }\n \n fn e() {\n     let mut x = 3;\n     let c1 = || get(&x);\n-    x = 5; //[ast]~ ERROR cannot assign\n-           //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+    x = 5;\n+    //~^ ERROR cannot assign to `x` because it is borrowed\n     drop(c1);\n }\n \n fn f() {\n     let mut x: Box<_> = box 3;\n     let c1 = || get(&*x);\n-    *x = 5; //[ast]~ ERROR cannot assign to `*x`\n-            //[mir]~^ ERROR cannot assign to `*x` because it is borrowed\n+    *x = 5;\n+    //~^ ERROR cannot assign to `*x` because it is borrowed\n     drop(c1);\n }\n \n@@ -70,8 +66,8 @@ fn g() {\n \n     let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n-    *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`\n-              //[mir]~^ ERROR cannot assign to `*x.f` because it is borrowed\n+    *x.f = 5;\n+    //~^ ERROR cannot assign to `*x.f` because it is borrowed\n     drop(c1);\n }\n \n@@ -82,8 +78,8 @@ fn h() {\n \n     let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n-    let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n-                          //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n+    let c2 = || *x.f = 5;\n+    //~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n     drop(c1);\n }\n "}, {"sha": "edeb21c16d3c88e6296d111342494f371a40cfe6", "filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-and-imm.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:21:14\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:17:14\n    |\n LL |     let c1 = || x = 4;\n    |              -- - first borrow occurs due to use of `x` in closure\n@@ -14,7 +14,7 @@ LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:29:14\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:25:14\n    |\n LL |     let c1 = || set(&mut x);\n    |              --          - first borrow occurs due to use of `x` in closure\n@@ -29,7 +29,7 @@ LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:37:14\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:33:14\n    |\n LL |     let c1 = || set(&mut x);\n    |              --          - first borrow occurs due to use of `x` in closure\n@@ -44,7 +44,7 @@ LL |     drop(c1);\n    |          -- mutable borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:45:5\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:41:5\n    |\n LL |     let c2 = || x * 5;\n    |              -- - borrow occurs due to use in closure\n@@ -57,7 +57,7 @@ LL |     drop(c2);\n    |          -- borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:53:5\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:49:5\n    |\n LL |     let c1 = || get(&x);\n    |              --      - borrow occurs due to use in closure\n@@ -70,7 +70,7 @@ LL |     drop(c1);\n    |          -- borrow later used here\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:61:5\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:57:5\n    |\n LL |     let c1 = || get(&*x);\n    |              --       - borrow occurs due to use in closure\n@@ -83,7 +83,7 @@ LL |     drop(c1);\n    |          -- borrow later used here\n \n error[E0506]: cannot assign to `*x.f` because it is borrowed\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:73:5\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:69:5\n    |\n LL |     let c1 = || get(&*x.f);\n    |              --       - borrow occurs due to use in closure\n@@ -96,7 +96,7 @@ LL |     drop(c1);\n    |          -- borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-mut-and-imm.rs:85:14\n+  --> $DIR/borrowck-closures-mut-and-imm.rs:81:14\n    |\n LL |     let c1 = || get(&*x.f);\n    |              --       - first borrow occurs due to use of `x` in closure", "previous_filename": "src/test/ui/borrowck/borrowck-closures-mut-and-imm.ast.nll.stderr"}, {"sha": "3be7d725eda3a77f0da3e3e4174e0f202228ac2b", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.nll.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,31 +0,0 @@\n-error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:13:25\n-   |\n-LL |     let mut c1 = || set(&mut *x);\n-   |                         ^^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:15:25\n-   |\n-LL |     let mut c2 = || set(&mut *x);\n-   |                         ^^^^^^^ cannot borrow as mutable\n-\n-error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:15:18\n-   |\n-LL |     let mut c1 = || set(&mut *x);\n-   |                  --           - first borrow occurs due to use of `x` in closure\n-   |                  |\n-   |                  first closure is constructed here\n-LL |\n-LL |     let mut c2 = || set(&mut *x);\n-   |                  ^^           - second borrow occurs due to use of `x` in closure\n-   |                  |\n-   |                  second closure is constructed here\n-...\n-LL |     c2(); c1();\n-   |           -- first borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "3be7d725eda3a77f0da3e3e4174e0f202228ac2b", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,30 +1,30 @@\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:13:25\n+   |\n+LL |     let mut c1 = || set(&mut *x);\n+   |                         ^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n+  --> $DIR/borrowck-closures-mut-of-imm.rs:15:25\n+   |\n+LL |     let mut c2 = || set(&mut *x);\n+   |                         ^^^^^^^ cannot borrow as mutable\n+\n error[E0524]: two closures require unique access to `x` at the same time\n   --> $DIR/borrowck-closures-mut-of-imm.rs:15:18\n    |\n LL |     let mut c1 = || set(&mut *x);\n-   |                  --           - previous borrow occurs due to use of `x` in closure\n+   |                  --           - first borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n LL |\n LL |     let mut c2 = || set(&mut *x);\n-   |                  ^^           - borrow occurs due to use of `x` in closure\n+   |                  ^^           - second borrow occurs due to use of `x` in closure\n    |                  |\n    |                  second closure is constructed here\n ...\n-LL | }\n-   | - borrow from first closure ends here\n-\n-error[E0596]: cannot borrow immutable borrowed content `***x` as mutable\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:13:30\n-   |\n-LL |     let mut c1 = || set(&mut *x);\n-   |                              ^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow immutable borrowed content `***x` as mutable\n-  --> $DIR/borrowck-closures-mut-of-imm.rs:15:30\n-   |\n-LL |     let mut c2 = || set(&mut *x);\n-   |                              ^^ cannot borrow as mutable\n+LL |     c2(); c1();\n+   |           -- first borrow later used here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a174388712158ac81d2e8313d23ea975c76f25e3", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.nll.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,17 +0,0 @@\n-error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-mut-of-mut.rs:14:18\n-   |\n-LL |     let mut c1 = || set(&mut *x);\n-   |                  --           - first borrow occurs due to use of `x` in closure\n-   |                  |\n-   |                  first closure is constructed here\n-LL |     let mut c2 = || set(&mut *x);\n-   |                  ^^           - second borrow occurs due to use of `x` in closure\n-   |                  |\n-   |                  second closure is constructed here\n-LL |\n-LL |     c2(); c1();\n-   |           -- first borrow later used here\n-\n-error: aborting due to previous error\n-"}, {"sha": "a174388712158ac81d2e8313d23ea975c76f25e3", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-mut.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-mut.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,16 +2,16 @@ error[E0524]: two closures require unique access to `x` at the same time\n   --> $DIR/borrowck-closures-mut-of-mut.rs:14:18\n    |\n LL |     let mut c1 = || set(&mut *x);\n-   |                  --           - previous borrow occurs due to use of `x` in closure\n+   |                  --           - first borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n LL |     let mut c2 = || set(&mut *x);\n-   |                  ^^           - borrow occurs due to use of `x` in closure\n+   |                  ^^           - second borrow occurs due to use of `x` in closure\n    |                  |\n    |                  second closure is constructed here\n-...\n-LL | }\n-   | - borrow from first closure ends here\n+LL |\n+LL |     c2(); c1();\n+   |           -- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "07f477d17868f8a4689f108eafcbe04989524c61", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.nll.stderr", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,75 +0,0 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:16:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 4);\n-   |                        -- - first borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5);\n-   |                        ^^ - second borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:27:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut x));\n-   |                        --          - first borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - second borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:34:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - first borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - second borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:41:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - first borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n-   |                        ^^                                  - second borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:53:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n-   |                        --           - first borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n-   |                        ^^           - second borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-LL |\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0499`."}, {"sha": "07f477d17868f8a4689f108eafcbe04989524c61", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.stderr", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,76 +2,73 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:16:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 4);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n LL |     let c2 = to_fn_mut(|| x = 5);\n-   |                        ^^ - borrow occurs due to use of `x` in closure\n+   |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n LL |     c1;\n-LL | }\n-   | - first borrow ends here\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:27:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut x));\n-   |                        --          - previous borrow occurs due to use of `x` in closure\n+   |                        --          - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n+   |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n LL |     c1;\n-LL | }\n-   | - first borrow ends here\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:34:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n+   |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n LL |     c1;\n-LL | }\n-   | - first borrow ends here\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:41:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n-   |                        ^^                                  - borrow occurs due to use of `x` in closure\n+   |                        ^^                                  - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n+LL |\n+LL |     c1;\n+   |     -- first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-closures-two-mut-fail.rs:53:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n-   |                        --           - previous borrow occurs due to use of `x` in closure\n+   |                        --           - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n-   |                        ^^           - borrow occurs due to use of `x` in closure\n+   |                        ^^           - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n+LL |\n+LL |     c1;\n+   |     -- first borrow later used here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b8bbb31a3550f41c0f7d84740b15fb75b10df25d", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-unique-imm.rs:11:9\n-   |\n-LL |         let p = &this.x;\n-   |                 ------- immutable borrow occurs here\n-LL |         &mut this.x;\n-   |         ^^^^^^^^^^^ mutable borrow occurs here\n-LL |         p.use_ref();\n-   |         - immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "b8bbb31a3550f41c0f7d84740b15fb75b10df25d", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,13 +1,12 @@\n error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-unique-imm.rs:11:14\n+  --> $DIR/borrowck-closures-unique-imm.rs:11:9\n    |\n LL |         let p = &this.x;\n-   |                  ------ immutable borrow occurs here\n+   |                 ------- immutable borrow occurs here\n LL |         &mut this.x;\n-   |              ^^^^^^ mutable borrow occurs here\n+   |         ^^^^^^^^^^^ mutable borrow occurs here\n LL |         p.use_ref();\n-LL |     };\n-   |     - immutable borrow ends here\n+   |         - immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "ea5250a5658d3327f3af8142d306375828f17ad1", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,53 +0,0 @@\n-error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:26:14\n-   |\n-LL |     let c1 = || get(x);\n-   |              --     - first borrow occurs due to use of `x` in closure\n-   |              |\n-   |              borrow occurs here\n-LL |     let c2 = || set(x);\n-   |              ^^     - second borrow occurs due to use of `x` in closure\n-   |              |\n-   |              closure construction occurs here\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:32:14\n-   |\n-LL |     let c1 = || get(x);\n-   |              --     - first borrow occurs due to use of `x` in closure\n-   |              |\n-   |              borrow occurs here\n-LL |     let c2 = || { get(x); set(x); };\n-   |              ^^       - second borrow occurs due to use of `x` in closure\n-   |              |\n-   |              closure construction occurs here\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-unique.rs:38:14\n-   |\n-LL |     let c1 = || set(x);\n-   |              --     - first borrow occurs due to use of `x` in closure\n-   |              |\n-   |              first closure is constructed here\n-LL |     let c2 = || set(x);\n-   |              ^^     - second borrow occurs due to use of `x` in closure\n-   |              |\n-   |              second closure is constructed here\n-LL |     c1;\n-   |     -- first borrow later used here\n-\n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/borrowck-closures-unique.rs:47:38\n-   |\n-LL | fn e(x: &'static mut isize) {\n-   |      - help: consider changing this to be mutable: `mut x`\n-LL |     let c1 = |y: &'static mut isize| x = y;\n-   |                                      ^^^^^ cannot assign\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0500`."}, {"sha": "67f91dfa8420e65eacdceace0bc86193fe5a9065", "filename": "src/test/ui/borrowck/borrowck-closures-unique.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -39,17 +39,14 @@ fn d(x: &mut isize) {\n     c1;\n }\n \n-// This test was originally encoded in the form shown as `fn f` below.\n-// However, since MIR-borrowck and thus NLL takes more control-flow information\n-// into account, it was necessary to change the test in order to witness the\n-// same (expected) error under both AST-borrowck and NLL.\n fn e(x: &'static mut isize) {\n-    let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+    let c1 = |y: &'static mut isize| x = y;\n+    //~^ ERROR cannot assign to `x`, as it is not declared as mutable\n     c1;\n }\n \n fn f(x: &'static mut isize) {\n-    let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n+    let c1 = || x = panic!(); // OK assignment is unreachable.\n     c1;\n }\n "}, {"sha": "9b53af4c01f599d1f55e3ab9f30068242416280b", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,68 +2,52 @@ error[E0500]: closure requires unique access to `x` but it is already borrowed\n   --> $DIR/borrowck-closures-unique.rs:26:14\n    |\n LL |     let c1 = || get(x);\n-   |              --     - previous borrow occurs due to use of `x` in closure\n+   |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n LL |     let c2 = || set(x);\n-   |              ^^     - borrow occurs due to use of `x` in closure\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n LL |     c1;\n-LL | }\n-   | - borrow ends here\n+   |     -- first borrow later used here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n   --> $DIR/borrowck-closures-unique.rs:32:14\n    |\n LL |     let c1 = || get(x);\n-   |              --     - previous borrow occurs due to use of `x` in closure\n+   |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n LL |     let c2 = || { get(x); set(x); };\n-   |              ^^       - borrow occurs due to use of `x` in closure\n+   |              ^^       - second borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n LL |     c1;\n-LL | }\n-   | - borrow ends here\n+   |     -- first borrow later used here\n \n error[E0524]: two closures require unique access to `x` at the same time\n   --> $DIR/borrowck-closures-unique.rs:38:14\n    |\n LL |     let c1 = || set(x);\n-   |              --     - previous borrow occurs due to use of `x` in closure\n+   |              --     - first borrow occurs due to use of `x` in closure\n    |              |\n    |              first closure is constructed here\n LL |     let c2 = || set(x);\n-   |              ^^     - borrow occurs due to use of `x` in closure\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n LL |     c1;\n-LL | }\n-   | - borrow from first closure ends here\n+   |     -- first borrow later used here\n \n-error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/borrowck-closures-unique.rs:47:14\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/borrowck-closures-unique.rs:43:38\n    |\n+LL | fn e(x: &'static mut isize) {\n+   |      - help: consider changing this to be mutable: `mut x`\n LL |     let c1 = |y: &'static mut isize| x = y;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n-help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n-   |\n-LL |     x\n-   |     ^\n-\n-error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/borrowck-closures-unique.rs:52:14\n-   |\n-LL |     let c1 = || x = panic!();\n-   |              ^^ cannot borrow mutably\n-help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n-   |\n-LL |     x\n-   |     ^\n+   |                                      ^^^^^ cannot assign\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0500, E0595.\n-For more information about an error, try `rustc --explain E0500`.\n+For more information about this error, try `rustc --explain E0500`."}, {"sha": "a6dbcf36077a728b704effd7ccff75c735edcb37", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,16 +0,0 @@\n-error[E0502]: cannot borrow `*ptr` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-closures-use-after-free.rs:22:8\n-   |\n-LL |   let mut test = |foo: &Foo| {\n-   |                  ----------- mutable borrow occurs here\n-LL |     ptr = box Foo { x: ptr.x + 1 };\n-   |     --- first borrow occurs due to use of `ptr` in closure\n-LL |   };\n-LL |   test(&*ptr);\n-   |   ---- ^^^^^ immutable borrow occurs here\n-   |   |\n-   |   mutable borrow later used by call\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "a6dbcf36077a728b704effd7ccff75c735edcb37", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,15 +1,15 @@\n-error[E0502]: cannot borrow `*ptr` as immutable because `ptr` is also borrowed as mutable\n-  --> $DIR/borrowck-closures-use-after-free.rs:22:9\n+error[E0502]: cannot borrow `*ptr` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-closures-use-after-free.rs:22:8\n    |\n LL |   let mut test = |foo: &Foo| {\n    |                  ----------- mutable borrow occurs here\n LL |     ptr = box Foo { x: ptr.x + 1 };\n-   |     --- previous borrow occurs due to use of `ptr` in closure\n+   |     --- first borrow occurs due to use of `ptr` in closure\n LL |   };\n LL |   test(&*ptr);\n-   |         ^^^^ immutable borrow occurs here\n-LL | }\n-   | - mutable borrow ends here\n+   |   ---- ^^^^^ immutable borrow occurs here\n+   |   |\n+   |   mutable borrow later used by call\n \n error: aborting due to previous error\n "}, {"sha": "c69237fa95f6571522bd96b047fce882a8523233", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0382]: use of moved value: `b`\n-  --> $DIR/borrowck-consume-unsize-vec.rs:8:13\n-   |\n-LL | fn foo(b: Box<[i32;5]>) {\n-   |        - move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait\n-LL |     consume(b);\n-   |             - value moved here\n-LL |     consume(b);\n-   |             ^ value used here after move\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "c69237fa95f6571522bd96b047fce882a8523233", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `b`\n   --> $DIR/borrowck-consume-unsize-vec.rs:8:13\n    |\n+LL | fn foo(b: Box<[i32;5]>) {\n+   |        - move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);\n    |             ^ value used here after move\n-   |\n-   = note: move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "e8194ad69440367fac754a0b8479a9e19de7978a", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0382]: use of moved value: `b`\n-  --> $DIR/borrowck-consume-upcast-box.rs:10:13\n-   |\n-LL | fn foo(b: Box<Foo+Send>) {\n-   |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n-LL |     consume(b);\n-   |             - value moved here\n-LL |     consume(b);\n-   |             ^ value used here after move\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "e8194ad69440367fac754a0b8479a9e19de7978a", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `b`\n   --> $DIR/borrowck-consume-upcast-box.rs:10:13\n    |\n+LL | fn foo(b: Box<Foo+Send>) {\n+   |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);\n    |             ^ value used here after move\n-   |\n-   = note: move occurs because `b` has type `std::boxed::Box<(dyn Foo + std::marker::Send + 'static)>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "beb009dbfe4acc46808072f1ce755f0178d557ce", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.stderr", "status": "removed", "additions": 0, "deletions": 246, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,246 +0,0 @@\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:43:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `f`\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:51:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `g`\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:59:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                      --- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:68:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `e` occurs here\n-LL |         match e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `e`\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:78:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                      --- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:86:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `*f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `*f`\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:94:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `*g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `*g`\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:102:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                      --- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:111:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `*e` occurs here\n-LL |         match *e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `*e`\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:121:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                      --- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:130:15\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x, _, .., _, _] => println!(\"{}\", x),\n-   |               ^ use of borrowed `v`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:136:18\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-...\n-LL |             &[_, x, .., _, _] => println!(\"{}\", x),\n-   |                  ^ use of borrowed `v`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:142:25\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., x, _] => println!(\"{}\", x),\n-   |                         ^ use of borrowed `v`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:148:28\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., _, x] => println!(\"{}\", x),\n-   |                            ^ use of borrowed `v`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:160:15\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x..] => println!(\"{:?}\", x),\n-   |               ^ use of borrowed `v`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:166:18\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-...\n-LL |             &[_, x..] => println!(\"{:?}\", x),\n-   |                  ^ use of borrowed `v`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:172:15\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-...\n-LL |             &[x.., _] => println!(\"{:?}\", x),\n-   |               ^ use of borrowed `v`\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:178:18\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-...\n-LL |             &[_, x.., _] => println!(\"{:?}\", x),\n-   |                  ^ use of borrowed `v`\n-\n-error[E0502]: cannot borrow `e.0` as immutable because `e` is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:192:18\n-   |\n-LL |         let x = &mut e;\n-   |                      - mutable borrow occurs here\n-LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |                  ^^^^^^ immutable borrow occurs here\n-...\n-LL |     }\n-   |     - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `e.x` as immutable because `e` is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:197:23\n-   |\n-LL |         let x = &mut e;\n-   |                      - mutable borrow occurs here\n-...\n-LL |             E::B { x: ref bx } =>\n-   |                       ^^^^^^ immutable borrow occurs here\n-...\n-LL |     }\n-   |     - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `s.y.0` as immutable because `s` is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:211:22\n-   |\n-LL |         let x = &mut s;\n-   |                      - mutable borrow occurs here\n-LL |         match s {\n-LL |             S  { y: (ref y0, _), .. } =>\n-   |                      ^^^^^^ immutable borrow occurs here\n-...\n-LL |     }\n-   |     - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `s.x.y` as immutable because `s` is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:218:28\n-   |\n-LL |         let x = &mut s;\n-   |                      - mutable borrow occurs here\n-...\n-LL |             S  { x: F { y: ref x0, .. }, .. } =>\n-   |                            ^^^^^^ immutable borrow occurs here\n-...\n-LL |     }\n-   |     - mutable borrow ends here\n-\n-error[E0503]: cannot use `v[..].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:261:9\n-   |\n-LL |         let x = &mut v;\n-   |                      - borrow of `v` occurs here\n-LL |         v[0].y;\n-   |         ^^^^^^ use of borrowed `v`\n-\n-error[E0499]: cannot borrow `**x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:285:18\n-   |\n-LL |             let y = &mut x;\n-   |                          - first mutable borrow occurs here\n-LL |             &mut x;\n-   |                  ^ second mutable borrow occurs here\n-...\n-LL |         };\n-   |         - first borrow ends here\n-\n-error[E0499]: cannot borrow `**x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:296:25\n-   |\n-LL |                    let y = &mut x;\n-   |                                 - first mutable borrow occurs here\n-LL |                    &mut x;\n-   |                         ^ second mutable borrow occurs here\n-...\n-LL |                 }\n-   |                 - first borrow ends here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:307:22\n-   |\n-LL |                 drop(x);\n-   |                      - value moved here\n-LL |                 drop(x);\n-   |                      ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 26 previous errors\n-\n-Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "595c3f6b0c5e423a32c48c1de77e889c13494732", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.mir.stderr", "status": "removed", "additions": 0, "deletions": 377, "changes": 377, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,377 +0,0 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:285:13\n-   |\n-LL |             let y = &mut x;\n-   |                     ------ first mutable borrow occurs here\n-LL |             &mut x;\n-   |             ^^^^^^ second mutable borrow occurs here\n-LL |\n-LL |             *y = 1;\n-   |             ------ first borrow later used here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:296:20\n-   |\n-LL |                    let y = &mut x;\n-   |                            ------ first mutable borrow occurs here\n-LL |                    &mut x;\n-   |                    ^^^^^^ second mutable borrow occurs here\n-LL |\n-LL |                    *y = 1;\n-   |                    ------ first borrow later used here\n-\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:294:16\n-   |\n-LL |              || {\n-   |               - inferred to be a `FnMut` closure\n-LL | /                || {\n-LL | |                    let y = &mut x;\n-LL | |                    &mut x;\n-LL | |\n-LL | |                    *y = 1;\n-LL | |                    drop(y);\n-LL | |                 }\n-   | |_________________^ returns a closure that contains a reference to a captured variable, which then escapes the closure body\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:43:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `f`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:51:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `g`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:59:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:68:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `e` occurs here\n-LL |         match e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `e`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:78:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:86:9\n-   |\n-LL |         let x = f.x();\n-   |                 - borrow of `*f` occurs here\n-LL |         f.x;\n-   |         ^^^ use of borrowed `*f`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:94:9\n-   |\n-LL |         let x = g.x();\n-   |                 - borrow of `*g` occurs here\n-LL |         g.0;\n-   |         ^^^ use of borrowed `*g`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:102:9\n-   |\n-LL |         let x = &mut h.0;\n-   |                 -------- borrow of `h.0` occurs here\n-LL |         h.0;\n-   |         ^^^ use of borrowed `h.0`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:111:20\n-   |\n-LL |         let x = e.x();\n-   |                 - borrow of `*e` occurs here\n-LL |         match *e {\n-LL |             Baz::X(value) => value\n-   |                    ^^^^^ use of borrowed `*e`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:121:9\n-   |\n-LL |         let x = &mut u.a;\n-   |                 -------- borrow of `u.a` occurs here\n-LL |         u.a;\n-   |         ^^^ use of borrowed `u.a`\n-LL |\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:130:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x, _, .., _, _] => println!(\"{}\", x),\n-   |               ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:136:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x, .., _, _] => println!(\"{}\", x),\n-   |                  ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:142:25\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., x, _] => println!(\"{}\", x),\n-   |                         ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:148:28\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, _, .., _, x] => println!(\"{}\", x),\n-   |                            ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:160:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         match v {\n-LL |             &[x..] => println!(\"{:?}\", x),\n-   |               ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:166:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x..] => println!(\"{:?}\", x),\n-   |                  ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:172:15\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[x.., _] => println!(\"{:?}\", x),\n-   |               ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:178:18\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-...\n-LL |             &[_, x.., _] => println!(\"{:?}\", x),\n-   |                  ^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:192:13\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ borrow of `e` occurs here\n-LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |             ^^^^^^^^^^^^ use of borrowed `e`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:192:18\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ mutable borrow occurs here\n-LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |                  ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:197:23\n-   |\n-LL |         let x = &mut e;\n-   |                 ------ mutable borrow occurs here\n-...\n-LL |             E::B { x: ref bx } =>\n-   |                       ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:211:22\n-   |\n-LL |         let x = &mut s;\n-   |                 ------ mutable borrow occurs here\n-LL |         match s {\n-LL |             S  { y: (ref y0, _), .. } =>\n-   |                      ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:218:28\n-   |\n-LL |         let x = &mut s;\n-   |                 ------ mutable borrow occurs here\n-...\n-LL |             S  { x: F { y: ref x0, .. }, .. } =>\n-   |                            ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0503]: cannot use `*v` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:261:9\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         v[0].y;\n-   |         ^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:261:9\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ borrow of `v` occurs here\n-LL |         v[0].y;\n-   |         ^^^^^^ use of borrowed `v`\n-...\n-LL |         drop(x);\n-   |              - borrow later used here\n-\n-error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:273:24\n-   |\n-LL |         let x = &mut v;\n-   |                 ------ mutable borrow occurs here\n-LL |         match v {\n-LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n-   |                        ^^^^^^ immutable borrow occurs here\n-...\n-LL |         drop(x);\n-   |              - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:235:29\n-   |\n-LL |             let x = &mut block;\n-   |                     ---------- mutable borrow occurs here\n-LL |             let p: &'a u8 = &*block.current;\n-   |                             ^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |             drop(x);\n-   |                  - mutable borrow later used here\n-\n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:250:33\n-   |\n-LL |             let x = &mut block;\n-   |                     ---------- mutable borrow occurs here\n-LL |             let p : *const u8 = &*(*block).current;\n-   |                                 ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here\n-...\n-LL |             drop(x);\n-   |                  - mutable borrow later used here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:307:22\n-   |\n-LL |                 drop(x);\n-   |                      - value moved here\n-LL |                 drop(x);\n-   |                      ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 32 previous errors\n-\n-Some errors have detailed explanations: E0382, E0499, E0502, E0503.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "c8dbf4e6918169bfee9d2c5e9a5b09a9a6bb9a93", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 38, "deletions": 64, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,4 @@\n // ignore-tidy-linelength\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n \n #![feature(slice_patterns)]\n \n@@ -40,67 +38,58 @@ fn main() {\n     {\n         let mut f = Foo { x: 22 };\n         let x = f.x();\n-        f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n-        //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n+        f.x; //~ ERROR cannot use `f.x` because it was mutably borrowed\n         drop(x);\n     }\n     // Local and field from tuple-struct\n     {\n         let mut g = Bar(22);\n         let x = g.x();\n-        g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n+        g.0; //~ ERROR cannot use `g.0` because it was mutably borrowed\n         drop(x);\n     }\n     // Local and field from tuple\n     {\n         let mut h = (22, 23);\n         let x = &mut h.0;\n-        h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n+        h.0; //~ ERROR cannot use `h.0` because it was mutably borrowed\n         drop(x);\n     }\n     // Local and field from enum\n     {\n         let mut e = Baz::X(2);\n         let x = e.x();\n         match e {\n-            Baz::X(value) => value\n-            //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n-            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed\n+            Baz::X(value) => value //~ ERROR cannot use `e.0` because it was mutably borrowed\n         };\n         drop(x);\n     }\n     // Local and field from union\n     unsafe {\n         let mut u = U { b: 0 };\n         let x = &mut u.a;\n-        u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n+        u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n         drop(x);\n     }\n     // Deref and field from struct\n     {\n         let mut f = Box::new(Foo { x: 22 });\n         let x = f.x();\n-        f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n+        f.x; //~ ERROR cannot use `f.x` because it was mutably borrowed\n         drop(x);\n     }\n     // Deref and field from tuple-struct\n     {\n         let mut g = Box::new(Bar(22));\n         let x = g.x();\n-        g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n+        g.0; //~ ERROR cannot use `g.0` because it was mutably borrowed\n         drop(x);\n     }\n     // Deref and field from tuple\n     {\n         let mut h = Box::new((22, 23));\n         let x = &mut h.0;\n-        h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n+        h.0; //~ ERROR cannot use `h.0` because it was mutably borrowed\n         drop(x);\n     }\n     // Deref and field from enum\n@@ -109,17 +98,15 @@ fn main() {\n         let x = e.x();\n         match *e {\n             Baz::X(value) => value\n-            //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n-            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed\n+            //~^ ERROR cannot use `e.0` because it was mutably borrowed\n         };\n         drop(x);\n     }\n     // Deref and field from union\n     unsafe {\n         let mut u = Box::new(U { b: 0 });\n         let x = &mut u.a;\n-        u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n+        u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n         drop(x);\n     }\n     // Constant index\n@@ -128,26 +115,22 @@ fn main() {\n         let x = &mut v;\n         match v {\n             &[x, _, .., _, _] => println!(\"{}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, x, .., _, _] => println!(\"{}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, _, .., x, _] => println!(\"{}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, _, .., _, x] => println!(\"{}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n         drop(x);\n@@ -158,26 +141,22 @@ fn main() {\n         let x = &mut v;\n         match v {\n             &[x..] => println!(\"{:?}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, x..] => println!(\"{:?}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[x.., _] => println!(\"{:?}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, x.., _] => println!(\"{:?}\", x),\n-                //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n+                //~^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         drop(x);\n@@ -190,13 +169,11 @@ fn main() {\n         let x = &mut e;\n         match e {\n             E::A(ref ax) =>\n-                //[ast]~^ ERROR cannot borrow `e.0` as immutable because `e` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-                //[mir]~| ERROR cannot use `e` because it was mutably borrowed\n+                //~^ ERROR cannot borrow `e.0` as immutable because it is also borrowed as mutable\n+                //~| ERROR cannot use `e` because it was mutably borrowed\n                 println!(\"e.ax: {:?}\", ax),\n             E::B { x: ref bx } =>\n-                //[ast]~^ ERROR cannot borrow `e.x` as immutable because `e` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `e.x` as immutable because it is also borrowed as mutable\n+                //~^ ERROR cannot borrow `e.x` as immutable because it is also borrowed as mutable\n                 println!(\"e.bx: {:?}\", bx),\n         }\n         drop(x);\n@@ -209,15 +186,13 @@ fn main() {\n         let x = &mut s;\n         match s {\n             S  { y: (ref y0, _), .. } =>\n-                //[ast]~^ ERROR cannot borrow `s.y.0` as immutable because `s` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n+                //~^ ERROR cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n                 println!(\"y0: {:?}\", y0),\n             _ => panic!(\"other case\"),\n         }\n         match s {\n             S  { x: F { y: ref x0, .. }, .. } =>\n-                //[ast]~^ ERROR cannot borrow `s.x.y` as immutable because `s` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n+                //~^ ERROR cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n                 println!(\"x0: {:?}\", x0),\n             _ => panic!(\"other case\"),\n         }\n@@ -233,8 +208,10 @@ fn main() {\n         fn bump<'a>(mut block: &mut Block<'a>) {\n             let x = &mut block;\n             let p: &'a u8 = &*block.current;\n-            //[mir]~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-            // No errors in AST because of issue rust#38899\n+            //~^ WARNING cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+            //~| this error has been downgraded\n+            //~| this warning will become a hard error in the future\n+            // Warning because of issue rust#38899\n             drop(x);\n         }\n     }\n@@ -248,8 +225,10 @@ fn main() {\n         unsafe fn bump2(mut block: *mut Block2) {\n             let x = &mut block;\n             let p : *const u8 = &*(*block).current;\n-            //[mir]~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-            // No errors in AST because of issue rust#38899\n+            //~^ WARNING cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+            //~| this error has been downgraded\n+            //~| this warning will become a hard error in the future\n+            // Warning because of issue rust#38899\n             drop(x);\n         }\n     }\n@@ -259,9 +238,8 @@ fn main() {\n         let mut v = &[F{x: 1, y: 2}, F{x: 3, y: 4}];\n         let x = &mut v;\n         v[0].y;\n-        //[ast]~^ ERROR cannot use `v[..].y` because it was mutably borrowed\n-        //[mir]~^^ ERROR cannot use `v[_].y` because it was mutably borrowed\n-        //[mir]~| ERROR cannot use `*v` because it was mutably borrowed\n+        //~^ ERROR cannot use `v[_].y` because it was mutably borrowed\n+        //~| ERROR cannot use `*v` because it was mutably borrowed\n         drop(x);\n     }\n     // Field of constant index\n@@ -271,8 +249,7 @@ fn main() {\n         let x = &mut v;\n         match v {\n             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n-            //[mir]~^ ERROR cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-            // No errors in AST\n+            //~^ ERROR cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n             _ => panic!(\"other case\")\n         }\n         drop(x);\n@@ -282,19 +259,17 @@ fn main() {\n         let mut x = 0;\n         || {\n             let y = &mut x;\n-            &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n-                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+            &mut x; //~ ERROR cannot borrow `x` as mutable more than once at a time\n             *y = 1;\n         };\n     }\n     // Field from upvar nested\n     {\n         let mut x = 0;\n            || {\n-               || { //[mir]~ ERROR captured variable cannot escape `FnMut` closure body\n+               || { //~ ERROR captured variable cannot escape `FnMut` closure body\n                    let y = &mut x;\n-                   &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n-                   //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n+                   &mut x; //~ ERROR cannot borrow `x` as mutable more than once at a time\n                    *y = 1;\n                    drop(y);\n                 }\n@@ -304,8 +279,7 @@ fn main() {\n         fn foo(x: Vec<i32>) {\n             let c = || {\n                 drop(x);\n-                drop(x); //[ast]~ ERROR use of moved value: `x`\n-                         //[mir]~^ ERROR use of moved value: `x`\n+                drop(x); //~ ERROR use of moved value: `x`\n             };\n             c();\n         }"}, {"sha": "fb42e5fbca8a883eefbbfcb1c4c75bd30d71b4de", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "renamed", "additions": 33, "deletions": 44, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,34 +1,31 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:285:13\n+  --> $DIR/borrowck-describe-lvalue.rs:262:13\n    |\n LL |             let y = &mut x;\n    |                     ------ first mutable borrow occurs here\n LL |             &mut x;\n    |             ^^^^^^ second mutable borrow occurs here\n-LL |\n LL |             *y = 1;\n    |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:296:20\n+  --> $DIR/borrowck-describe-lvalue.rs:272:20\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n LL |                    &mut x;\n    |                    ^^^^^^ second mutable borrow occurs here\n-LL |\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:294:16\n+  --> $DIR/borrowck-describe-lvalue.rs:270:16\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n LL | /                || {\n LL | |                    let y = &mut x;\n LL | |                    &mut x;\n-LL | |\n LL | |                    *y = 1;\n LL | |                    drop(y);\n LL | |                 }\n@@ -38,96 +35,89 @@ LL | |                 }\n    = note: ...therefore, they cannot allow references to captured variables to escape\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:43:9\n+  --> $DIR/borrowck-describe-lvalue.rs:41:9\n    |\n LL |         let x = f.x();\n    |                 - borrow of `f` occurs here\n LL |         f.x;\n    |         ^^^ use of borrowed `f`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:51:9\n+  --> $DIR/borrowck-describe-lvalue.rs:48:9\n    |\n LL |         let x = g.x();\n    |                 - borrow of `g` occurs here\n LL |         g.0;\n    |         ^^^ use of borrowed `g`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:59:9\n+  --> $DIR/borrowck-describe-lvalue.rs:55:9\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:68:20\n+  --> $DIR/borrowck-describe-lvalue.rs:63:20\n    |\n LL |         let x = e.x();\n    |                 - borrow of `e` occurs here\n LL |         match e {\n LL |             Baz::X(value) => value\n    |                    ^^^^^ use of borrowed `e`\n-...\n+LL |         };\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:78:9\n+  --> $DIR/borrowck-describe-lvalue.rs:71:9\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:86:9\n+  --> $DIR/borrowck-describe-lvalue.rs:78:9\n    |\n LL |         let x = f.x();\n    |                 - borrow of `*f` occurs here\n LL |         f.x;\n    |         ^^^ use of borrowed `*f`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `g.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:94:9\n+  --> $DIR/borrowck-describe-lvalue.rs:85:9\n    |\n LL |         let x = g.x();\n    |                 - borrow of `*g` occurs here\n LL |         g.0;\n    |         ^^^ use of borrowed `*g`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `h.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:102:9\n+  --> $DIR/borrowck-describe-lvalue.rs:92:9\n    |\n LL |         let x = &mut h.0;\n    |                 -------- borrow of `h.0` occurs here\n LL |         h.0;\n    |         ^^^ use of borrowed `h.0`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `e.0` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:111:20\n+  --> $DIR/borrowck-describe-lvalue.rs:100:20\n    |\n LL |         let x = e.x();\n    |                 - borrow of `*e` occurs here\n@@ -139,18 +129,17 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `u.a` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:121:9\n+  --> $DIR/borrowck-describe-lvalue.rs:109:9\n    |\n LL |         let x = &mut u.a;\n    |                 -------- borrow of `u.a` occurs here\n LL |         u.a;\n    |         ^^^ use of borrowed `u.a`\n-LL |\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:130:15\n+  --> $DIR/borrowck-describe-lvalue.rs:117:15\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -162,7 +151,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:136:18\n+  --> $DIR/borrowck-describe-lvalue.rs:122:18\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -174,7 +163,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:142:25\n+  --> $DIR/borrowck-describe-lvalue.rs:127:25\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -186,7 +175,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:148:28\n+  --> $DIR/borrowck-describe-lvalue.rs:132:28\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -198,7 +187,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:160:15\n+  --> $DIR/borrowck-describe-lvalue.rs:143:15\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -210,7 +199,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:166:18\n+  --> $DIR/borrowck-describe-lvalue.rs:148:18\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -222,7 +211,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:172:15\n+  --> $DIR/borrowck-describe-lvalue.rs:153:15\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -234,7 +223,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[..]` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:178:18\n+  --> $DIR/borrowck-describe-lvalue.rs:158:18\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -246,7 +235,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:192:13\n+  --> $DIR/borrowck-describe-lvalue.rs:171:13\n    |\n LL |         let x = &mut e;\n    |                 ------ borrow of `e` occurs here\n@@ -258,7 +247,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:192:18\n+  --> $DIR/borrowck-describe-lvalue.rs:171:18\n    |\n LL |         let x = &mut e;\n    |                 ------ mutable borrow occurs here\n@@ -270,7 +259,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `e.x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:197:23\n+  --> $DIR/borrowck-describe-lvalue.rs:175:23\n    |\n LL |         let x = &mut e;\n    |                 ------ mutable borrow occurs here\n@@ -282,7 +271,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:211:22\n+  --> $DIR/borrowck-describe-lvalue.rs:188:22\n    |\n LL |         let x = &mut s;\n    |                 ------ mutable borrow occurs here\n@@ -294,7 +283,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0502]: cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:218:28\n+  --> $DIR/borrowck-describe-lvalue.rs:194:28\n    |\n LL |         let x = &mut s;\n    |                 ------ mutable borrow occurs here\n@@ -306,7 +295,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n error[E0503]: cannot use `*v` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:261:9\n+  --> $DIR/borrowck-describe-lvalue.rs:240:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -317,7 +306,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:261:9\n+  --> $DIR/borrowck-describe-lvalue.rs:240:9\n    |\n LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n@@ -328,7 +317,7 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0502]: cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:273:24\n+  --> $DIR/borrowck-describe-lvalue.rs:251:24\n    |\n LL |         let x = &mut v;\n    |                 ------ mutable borrow occurs here\n@@ -340,7 +329,7 @@ LL |         drop(x);\n    |              - mutable borrow later used here\n \n warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:235:29\n+  --> $DIR/borrowck-describe-lvalue.rs:210:29\n    |\n LL |             let x = &mut block;\n    |                     ---------- mutable borrow occurs here\n@@ -354,7 +343,7 @@ LL |             drop(x);\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:250:33\n+  --> $DIR/borrowck-describe-lvalue.rs:227:33\n    |\n LL |             let x = &mut block;\n    |                     ---------- mutable borrow occurs here\n@@ -368,7 +357,7 @@ LL |             drop(x);\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:307:22\n+  --> $DIR/borrowck-describe-lvalue.rs:282:22\n    |\n LL |                 drop(x);\n    |                      - value moved here", "previous_filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr"}, {"sha": "3195120cba2812d3921a134229d6ce75f720b98a", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,21 +0,0 @@\n-error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n-  --> $DIR/borrowck-escaping-closure-error-1.rs:13:11\n-   |\n-LL |     spawn(|| books.push(4));\n-   |           ^^ ----- `books` is borrowed here\n-   |           |\n-   |           may outlive borrowed value `books`\n-   |\n-note: function requires argument type to outlive `'static`\n-  --> $DIR/borrowck-escaping-closure-error-1.rs:13:5\n-   |\n-LL |     spawn(|| books.push(4));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n-   |\n-LL |     spawn(move || books.push(4));\n-   |           ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0373`."}, {"sha": "3195120cba2812d3921a134229d6ce75f720b98a", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -5,6 +5,12 @@ LL |     spawn(|| books.push(4));\n    |           ^^ ----- `books` is borrowed here\n    |           |\n    |           may outlive borrowed value `books`\n+   |\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/borrowck-escaping-closure-error-1.rs:13:5\n+   |\n+LL |     spawn(|| books.push(4));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n LL |     spawn(move || books.push(4));"}, {"sha": "3227aa9bb6829599ac8247b2944756dce9ce8868", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,21 +0,0 @@\n-error[E0373]: closure may outlive the current function, but it borrows `books`, which is owned by the current function\n-  --> $DIR/borrowck-escaping-closure-error-2.rs:11:14\n-   |\n-LL |     Box::new(|| books.push(4))\n-   |              ^^ ----- `books` is borrowed here\n-   |              |\n-   |              may outlive borrowed value `books`\n-   |\n-note: closure is returned here\n-  --> $DIR/borrowck-escaping-closure-error-2.rs:11:5\n-   |\n-LL |     Box::new(|| books.push(4))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n-   |\n-LL |     Box::new(move || books.push(4))\n-   |              ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0373`."}, {"sha": "3227aa9bb6829599ac8247b2944756dce9ce8868", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -5,6 +5,12 @@ LL |     Box::new(|| books.push(4))\n    |              ^^ ----- `books` is borrowed here\n    |              |\n    |              may outlive borrowed value `books`\n+   |\n+note: closure is returned here\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:11:5\n+   |\n+LL |     Box::new(|| books.push(4))\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n LL |     Box::new(move || books.push(4))"}, {"sha": "89523235481ad62b5ed719956853dc08350b0c6d", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.nll.stderr", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,132 +0,0 @@\n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:8:10\n-   |\n-LL |     drop(x.b);\n-   |          --- value moved here\n-LL |     drop(*x.b);\n-   |          ^^^^ value used here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:14:10\n-   |\n-LL |     let y = A { a: 3, .. x };\n-   |             ---------------- value moved here\n-LL |     drop(*x.b);\n-   |          ^^^^ value used here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:20:13\n-   |\n-LL |     drop(x.b);\n-   |          --- value moved here\n-LL |     let p = &x.b;\n-   |             ^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: borrow of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:27:13\n-   |\n-LL |     let _y = A { a: 3, .. x };\n-   |              ---------------- value moved here\n-LL |     let p = &x.b;\n-   |             ^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0505]: cannot move out of `x.b` because it is borrowed\n-  --> $DIR/borrowck-field-sensitivity.rs:34:10\n-   |\n-LL |     let p = &x.b;\n-   |             ---- borrow of `x.b` occurs here\n-LL |     drop(x.b);\n-   |          ^^^ move out of `x.b` occurs here\n-LL |     drop(**p);\n-   |          --- borrow later used here\n-\n-error[E0505]: cannot move out of `x.b` because it is borrowed\n-  --> $DIR/borrowck-field-sensitivity.rs:41:14\n-   |\n-LL |     let p = &x.b;\n-   |             ---- borrow of `x.b` occurs here\n-LL |     let _y = A { a: 3, .. x };\n-   |              ^^^^^^^^^^^^^^^^ move out of `x.b` occurs here\n-LL |     drop(**p);\n-   |          --- borrow later used here\n-\n-error[E0499]: cannot borrow `x.a` as mutable more than once at a time\n-  --> $DIR/borrowck-field-sensitivity.rs:48:13\n-   |\n-LL |     let p = &mut x.a;\n-   |             -------- first mutable borrow occurs here\n-LL |     let q = &mut x.a;\n-   |             ^^^^^^^^ second mutable borrow occurs here\n-LL |     drop(*p);\n-   |          -- first borrow later used here\n-\n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:56:10\n-   |\n-LL |     drop(x.b);\n-   |          --- value moved here\n-LL |     drop(x.b);\n-   |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:62:10\n-   |\n-LL |     let _y = A { a: 3, .. x };\n-   |              ---------------- value moved here\n-LL |     drop(x.b);\n-   |          ^^^ value used here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:68:14\n-   |\n-LL |     drop(x.b);\n-   |          --- value moved here\n-LL |     let _z = A { a: 3, .. x };\n-   |              ^^^^^^^^^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:74:14\n-   |\n-LL |     let _y = A { a: 3, .. x };\n-   |              ---------------- value moved here\n-LL |     let _z = A { a: 4, .. x };\n-   |              ^^^^^^^^^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-field-sensitivity.rs:81:5\n-   |\n-LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n-\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-field-sensitivity.rs:87:5\n-   |\n-LL |     x.a = 1;\n-   |     ^^^^^^^ use of possibly uninitialized `x`\n-\n-error[E0381]: assign to part of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-field-sensitivity.rs:94:5\n-   |\n-LL |     x.b = box 1;\n-   |     ^^^ use of possibly uninitialized `x`\n-\n-error: aborting due to 14 previous errors\n-\n-Some errors have detailed explanations: E0381, E0382, E0499, E0505.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "88f74d1ed3300103a12b12ef6176f6fd3e306c27", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -5,26 +5,26 @@ struct A { a: isize, b: Box<isize> }\n fn deref_after_move() {\n     let x = A { a: 1, b: box 2 };\n     drop(x.b);\n-    drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+    drop(*x.b); //~ ERROR use of moved value: `x.b`\n }\n \n fn deref_after_fu_move() {\n     let x = A { a: 1, b: box 2 };\n     let y = A { a: 3, .. x };\n-    drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+    drop(*x.b); //~ ERROR use of moved value: `x.b`\n }\n \n fn borrow_after_move() {\n     let x = A { a: 1, b: box 2 };\n     drop(x.b);\n-    let p = &x.b; //~ ERROR use of moved value: `x.b`\n+    let p = &x.b; //~ ERROR borrow of moved value: `x.b`\n     drop(**p);\n }\n \n fn borrow_after_fu_move() {\n     let x = A { a: 1, b: box 2 };\n     let _y = A { a: 3, .. x };\n-    let p = &x.b; //~ ERROR use of moved value: `x.b`\n+    let p = &x.b; //~ ERROR borrow of moved value: `x.b`\n     drop(**p);\n }\n \n@@ -78,21 +78,21 @@ fn fu_move_after_fu_move() {\n \n fn copy_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.a = 1;\n-    drop(x.a); //~ ERROR use of possibly uninitialized variable: `x.a`\n+    x.a = 1; //~ ERROR assign to part of possibly uninitialized variable: `x`\n+    drop(x.a);\n }\n \n fn borrow_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.a = 1;\n-    let p = &x.a; //~ ERROR use of possibly uninitialized variable: `x.a`\n+    x.a = 1; //~ ERROR assign to part of possibly uninitialized variable: `x`\n+    let p = &x.a;\n     drop(*p);\n }\n \n fn move_after_field_assign_after_uninit() {\n     let mut x: A;\n-    x.b = box 1;\n-    drop(x.b); //~ ERROR use of possibly uninitialized variable: `x.b`\n+    x.b = box 1; //~ ERROR assign to part of possibly uninitialized variable: `x`\n+    drop(x.b);\n }\n \n fn main() {"}, {"sha": "89523235481ad62b5ed719956853dc08350b0c6d", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 41, "deletions": 38, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,4 +1,4 @@\n-error[E0382]: use of moved value: `*x.b`\n+error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:8:10\n    |\n LL |     drop(x.b);\n@@ -8,62 +8,65 @@ LL |     drop(*x.b);\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `*x.b`\n+error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:14:10\n    |\n LL |     let y = A { a: 3, .. x };\n-   |                          - value moved here\n+   |             ---------------- value moved here\n LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:20:14\n+error[E0382]: borrow of moved value: `x.b`\n+  --> $DIR/borrowck-field-sensitivity.rs:20:13\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n LL |     let p = &x.b;\n-   |              ^^^ value used here after move\n+   |             ^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:27:14\n+error[E0382]: borrow of moved value: `x.b`\n+  --> $DIR/borrowck-field-sensitivity.rs:27:13\n    |\n LL |     let _y = A { a: 3, .. x };\n-   |                           - value moved here\n+   |              ---------------- value moved here\n LL |     let p = &x.b;\n-   |              ^^^ value used here after move\n+   |             ^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `x.b` because it is borrowed\n   --> $DIR/borrowck-field-sensitivity.rs:34:10\n    |\n LL |     let p = &x.b;\n-   |              --- borrow of `x.b` occurs here\n+   |             ---- borrow of `x.b` occurs here\n LL |     drop(x.b);\n    |          ^^^ move out of `x.b` occurs here\n+LL |     drop(**p);\n+   |          --- borrow later used here\n \n error[E0505]: cannot move out of `x.b` because it is borrowed\n-  --> $DIR/borrowck-field-sensitivity.rs:41:27\n+  --> $DIR/borrowck-field-sensitivity.rs:41:14\n    |\n LL |     let p = &x.b;\n-   |              --- borrow of `x.b` occurs here\n+   |             ---- borrow of `x.b` occurs here\n LL |     let _y = A { a: 3, .. x };\n-   |                           ^ move out of `x.b` occurs here\n+   |              ^^^^^^^^^^^^^^^^ move out of `x.b` occurs here\n+LL |     drop(**p);\n+   |          --- borrow later used here\n \n error[E0499]: cannot borrow `x.a` as mutable more than once at a time\n-  --> $DIR/borrowck-field-sensitivity.rs:48:18\n+  --> $DIR/borrowck-field-sensitivity.rs:48:13\n    |\n LL |     let p = &mut x.a;\n-   |                  --- first mutable borrow occurs here\n+   |             -------- first mutable borrow occurs here\n LL |     let q = &mut x.a;\n-   |                  ^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n+   |             ^^^^^^^^ second mutable borrow occurs here\n+LL |     drop(*p);\n+   |          -- first borrow later used here\n \n error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:56:10\n@@ -79,49 +82,49 @@ error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:62:10\n    |\n LL |     let _y = A { a: 3, .. x };\n-   |                           - value moved here\n+   |              ---------------- value moved here\n LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:68:27\n+  --> $DIR/borrowck-field-sensitivity.rs:68:14\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n LL |     let _z = A { a: 3, .. x };\n-   |                           ^ value used here after move\n+   |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:74:27\n+  --> $DIR/borrowck-field-sensitivity.rs:74:14\n    |\n LL |     let _y = A { a: 3, .. x };\n-   |                           - value moved here\n+   |              ---------------- value moved here\n LL |     let _z = A { a: 4, .. x };\n-   |                           ^ value used here after move\n+   |              ^^^^^^^^^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n-error[E0381]: use of possibly uninitialized variable: `x.a`\n-  --> $DIR/borrowck-field-sensitivity.rs:82:10\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-field-sensitivity.rs:81:5\n    |\n-LL |     drop(x.a);\n-   |          ^^^ use of possibly uninitialized `x.a`\n+LL |     x.a = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x.a`\n-  --> $DIR/borrowck-field-sensitivity.rs:88:14\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-field-sensitivity.rs:87:5\n    |\n-LL |     let p = &x.a;\n-   |              ^^^ use of possibly uninitialized `x.a`\n+LL |     x.a = 1;\n+   |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x.b`\n-  --> $DIR/borrowck-field-sensitivity.rs:95:10\n+error[E0381]: assign to part of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-field-sensitivity.rs:94:5\n    |\n-LL |     drop(x.b);\n-   |          ^^^ use of possibly uninitialized `x.b`\n+LL |     x.b = box 1;\n+   |     ^^^ use of possibly uninitialized `x`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "16c62fc1c7ef3a9a90fba3d9ea5ec6b555941a51", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.ast.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-fn-in-const-a.rs:9:16\n-   |\n-LL |         return *x\n-   |                ^^ cannot move out of borrowed content\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "faa56cc7f2a8209ff73eaba9f8370bc8dfdfeeff", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,13 +1,9 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n // Check that we check fns appearing in constant declarations.\n // Issue #22382.\n \n const MOVE: fn(&String) -> String = {\n     fn broken(x: &String) -> String {\n-        return *x //[ast]~ ERROR cannot move out of borrowed content [E0507]\n-                  //[mir]~^ ERROR [E0507]\n+        return *x //~ ERROR cannot move out of borrowed content [E0507]\n     }\n     broken\n };"}, {"sha": "fff28359c146e4f56d622cc590531217a2e4b090", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-fn-in-const-a.rs:9:16\n+  --> $DIR/borrowck-fn-in-const-a.rs:6:16\n    |\n LL |         return *x\n    |                ^^ cannot move out of borrowed content", "previous_filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.mir.stderr"}, {"sha": "d48866dce04238de37a3a24ff0792bd885073c47", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/borrowck-fn-in-const-c.rs:17:16\n-   |\n-LL |         return &local.inner;\n-   |                ^^^^^^^^^^^^ returning this value requires that `local.inner` is borrowed for `'static`\n-LL |     }\n-   |     - here, drop of `local` needs exclusive access to `local.inner`, because the type `DropString` implements the `Drop` trait\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0713`."}, {"sha": "c638cd08bc9ae7233d1129d9c1ea4624a4e7975c", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -14,7 +14,7 @@ impl Drop for DropString {\n const LOCAL_REF: fn() -> &'static str = {\n     fn broken() -> &'static str {\n         let local = DropString { inner: format!(\"Some local string\") };\n-        return &local.inner; //~ ERROR does not live long enough\n+        return &local.inner; //~ borrow may still be in use when destructor runs\n     }\n     broken\n };"}, {"sha": "d48866dce04238de37a3a24ff0792bd885073c47", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,13 +1,11 @@\n-error[E0597]: `local.inner` does not live long enough\n-  --> $DIR/borrowck-fn-in-const-c.rs:17:17\n+error[E0713]: borrow may still be in use when destructor runs\n+  --> $DIR/borrowck-fn-in-const-c.rs:17:16\n    |\n LL |         return &local.inner;\n-   |                 ^^^^^^^^^^^ borrowed value does not live long enough\n+   |                ^^^^^^^^^^^^ returning this value requires that `local.inner` is borrowed for `'static`\n LL |     }\n-   |     - borrowed value only lives until here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n+   |     - here, drop of `local` needs exclusive access to `local.inner`, because the type `DropString` implements the `Drop` trait\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0713`."}, {"sha": "08cafa7da7aa893d897703a3d736a4008abe0112", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,48 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:15\n-   |\n-LL |     for &a in x.iter() {\n-   |         --    ^^^^^^^^ cannot move out of borrowed content\n-   |         ||\n-   |         |data moved here\n-   |         help: consider removing the `&`: `a`\n-   |\n-note: move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:10\n-   |\n-LL |     for &a in x.iter() {\n-   |          ^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:15\n-   |\n-LL |     for &a in &f.a {\n-   |         --    ^^^^ cannot move out of borrowed content\n-   |         ||\n-   |         |data moved here\n-   |         help: consider removing the `&`: `a`\n-   |\n-note: move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:10\n-   |\n-LL |     for &a in &f.a {\n-   |          ^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n-   |\n-LL |     for &a in x.iter() {\n-   |         --    ^^^^^^^^ cannot move out of borrowed content\n-   |         ||\n-   |         |data moved here\n-   |         help: consider removing the `&`: `a`\n-   |\n-note: move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:10\n-   |\n-LL |     for &a in x.iter() {\n-   |          ^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "08cafa7da7aa893d897703a3d736a4008abe0112", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.stderr", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,29 +1,47 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:9\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:15\n    |\n LL |     for &a in x.iter() {\n-   |         ^-\n+   |         --    ^^^^^^^^ cannot move out of borrowed content\n    |         ||\n-   |         |hint: to prevent move, use `ref a` or `ref mut a`\n-   |         cannot move out of borrowed content\n+   |         |data moved here\n+   |         help: consider removing the `&`: `a`\n+   |\n+note: move occurs because `a` has type `&mut i32`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:10\n+   |\n+LL |     for &a in x.iter() {\n+   |          ^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:9\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:15\n    |\n LL |     for &a in &f.a {\n-   |         ^-\n+   |         --    ^^^^ cannot move out of borrowed content\n    |         ||\n-   |         |hint: to prevent move, use `ref a` or `ref mut a`\n-   |         cannot move out of borrowed content\n+   |         |data moved here\n+   |         help: consider removing the `&`: `a`\n+   |\n+note: move occurs because `a` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:10\n+   |\n+LL |     for &a in &f.a {\n+   |          ^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:9\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n    |\n LL |     for &a in x.iter() {\n-   |         ^-\n+   |         --    ^^^^^^^^ cannot move out of borrowed content\n    |         ||\n-   |         |hint: to prevent move, use `ref a` or `ref mut a`\n-   |         cannot move out of borrowed content\n+   |         |data moved here\n+   |         help: consider removing the `&`: `a`\n+   |\n+note: move occurs because `a` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:10\n+   |\n+LL |     for &a in x.iter() {\n+   |          ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f47dce453696e59f1b43f2c4dd4bc0657ca5b745", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.nll.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,27 +0,0 @@\n-error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-for-loop-head-linkage.rs:7:9\n-   |\n-LL |     for &x in &vector {\n-   |               -------\n-   |               |\n-   |               immutable borrow occurs here\n-   |               immutable borrow later used here\n-LL |         let cap = vector.capacity();\n-LL |         vector.extend(repeat(0));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-for-loop-head-linkage.rs:8:9\n-   |\n-LL |     for &x in &vector {\n-   |               -------\n-   |               |\n-   |               immutable borrow occurs here\n-   |               immutable borrow later used here\n-...\n-LL |         vector[1] = 5;\n-   |         ^^^^^^ mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "f47dce453696e59f1b43f2c4dd4bc0657ca5b745", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,22 +2,22 @@ error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as i\n   --> $DIR/borrowck-for-loop-head-linkage.rs:7:9\n    |\n LL |     for &x in &vector {\n-   |                ------\n-   |                |    |\n-   |                |    immutable borrow ends here\n-   |                immutable borrow occurs here\n+   |               -------\n+   |               |\n+   |               immutable borrow occurs here\n+   |               immutable borrow later used here\n LL |         let cap = vector.capacity();\n LL |         vector.extend(repeat(0));\n-   |         ^^^^^^ mutable borrow occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-for-loop-head-linkage.rs:8:9\n    |\n LL |     for &x in &vector {\n-   |                ------\n-   |                |    |\n-   |                |    immutable borrow ends here\n-   |                immutable borrow occurs here\n+   |               -------\n+   |               |\n+   |               immutable borrow occurs here\n+   |               immutable borrow later used here\n ...\n LL |         vector[1] = 5;\n    |         ^^^^^^ mutable borrow occurs here"}, {"sha": "43c3c3371ff9a87def941d2e49e3e274bcc55343", "filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0506]: cannot assign to `_a` because it is borrowed\n-  --> $DIR/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs:9:9\n-   |\n-LL |     let b = &mut _a;\n-   |                  -- borrow of `_a` occurs here\n-...\n-LL |         _a = 4;\n-   |         ^^^^^^ assignment to borrowed `_a` occurs here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "88b43c1350b47ac355905f7eaf4b50a0eefa0b6d", "filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0506]: cannot assign to `_a` because it is borrowed\n-  --> $DIR/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs:9:9\n-   |\n-LL |     let b = &mut _a;\n-   |             ------- borrow of `_a` occurs here\n-...\n-LL |         _a = 4;\n-   |         ^^^^^^ assignment to borrowed `_a` occurs here\n-...\n-LL |     drop(b);\n-   |          - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "97107c2e30f00e151f614e9ddd682f308db760b8", "filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,13 +1,9 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n fn main() {\n     let mut _a = 3;\n     let b = &mut _a;\n     {\n         let c = &*b;\n-        _a = 4; //[ast]~ ERROR cannot assign to `_a`\n-        //[mir]~^ ERROR cannot assign to `_a` because it is borrowed\n+        _a = 4; //~ ERROR cannot assign to `_a` because it is borrowed\n         drop(c);\n     }\n     drop(b);"}, {"sha": "a66db05ccc5fcfe7c6ba59917551cf972f7a1b23", "filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `_a` because it is borrowed\n-  --> $DIR/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs:9:9\n+  --> $DIR/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs:6:9\n    |\n LL |     let b = &mut _a;\n    |             ------- borrow of `_a` occurs here", "previous_filename": "src/test/ui/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.ast.nll.stderr"}, {"sha": "da639a837aa5096db8da86093fc5d42fd33ff716", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0507]: cannot move out of captured variable in an `Fn` closure\n-  --> $DIR/borrowck-in-static.rs:5:17\n-   |\n-LL |     let x = Box::new(0);\n-   |         - captured outer variable\n-LL |     Box::new(|| x)\n-   |                 ^ cannot move out of captured variable in an `Fn` closure\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "43bb652a024ff4793defb10d7ed37eb7b90379b3", "filename": "src/test/ui/borrowck/borrowck-in-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,7 +2,7 @@\n \n static FN : &'static (Fn() -> (Box<Fn()->Box<i32>>) + Sync) = &|| {\n     let x = Box::new(0);\n-    Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+    Box::new(|| x) //~ ERROR cannot move out of captured variable in an `Fn` closure\n };\n \n fn main() {"}, {"sha": "da639a837aa5096db8da86093fc5d42fd33ff716", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:5:17\n    |\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n LL |     Box::new(|| x)\n-   |                 ^ cannot move out of captured outer variable in an `Fn` closure\n+   |                 ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "3ba01098766dce0bd6749378d41fbac3587990cd", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.ast.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: use of possibly uninitialized variable: `origin.y`\n-  --> $DIR/borrowck-init-in-fru.rs:12:31\n-   |\n-LL |     origin = Point { x: 10, ..origin };\n-   |                               ^^^^^^ use of possibly uninitialized `origin.y`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "35649b1bb2a50eb5e75914c20ea9081568cc024f", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.mir.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: use of possibly uninitialized variable: `origin`\n-  --> $DIR/borrowck-init-in-fru.rs:12:5\n-   |\n-LL |     origin = Point { x: 10, ..origin };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `origin.y`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "6da3098dc933648ac97a5374313c8821cebd5a7c", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #[derive(Clone)]\n struct Point {\n     x: isize,\n@@ -10,7 +7,6 @@ struct Point {\n fn main() {\n     let mut origin: Point;\n     origin = Point { x: 10, ..origin };\n-    //[ast]~^ ERROR use of possibly uninitialized variable: `origin.y` [E0381]\n-    //[mir]~^^ ERROR [E0381]\n+    //~^ ERROR use of possibly uninitialized variable: `origin` [E0381]\n     origin.clone();\n }"}, {"sha": "fe55bc2fd95c05dc2de85b13bbadea9a6e3a99ff", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly uninitialized variable: `origin`\n-  --> $DIR/borrowck-init-in-fru.rs:12:5\n+  --> $DIR/borrowck-init-in-fru.rs:9:5\n    |\n LL |     origin = Point { x: 10, ..origin };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `origin.y`", "previous_filename": "src/test/ui/borrowck/borrowck-init-in-fru.ast.nll.stderr"}, {"sha": "200ce8ff44e226fd08020fbc049675c7e9e84cc3", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.nll.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,30 +0,0 @@\n-error[E0501]: cannot borrow `*f` as mutable because previous closure requires unique access\n-  --> $DIR/borrowck-insert-during-each.rs:16:3\n-   |\n-LL |     f.foo(\n-   |     ^ --- first borrow later used by call\n-   |  ___|\n-   | |\n-LL | |         |a| {\n-   | |         --- closure construction occurs here\n-LL | |             f.n.insert(*a);\n-   | |             - first borrow occurs due to use of `f` in closure\n-LL | |         })\n-   | |__________^ second borrow occurs here\n-\n-error[E0500]: closure requires unique access to `f` but it is already borrowed\n-  --> $DIR/borrowck-insert-during-each.rs:17:9\n-   |\n-LL |   f.foo(\n-   |   - --- first borrow later used by call\n-   |   |\n-   |   borrow occurs here\n-LL |         |a| {\n-   |         ^^^ closure construction occurs here\n-LL |             f.n.insert(*a);\n-   |             - second borrow occurs due to use of `f` in closure\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0500, E0501.\n-For more information about an error, try `rustc --explain E0500`."}, {"sha": "df967e61189328a13c97aab7d0dc768e0adf7b63", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -13,7 +13,8 @@ impl Foo {\n }\n \n fn bar(f: &mut Foo) {\n-  f.foo(\n+    f.foo(\n+    //~^ ERROR cannot borrow `*f` as mutable\n         |a| { //~ ERROR closure requires unique access to `f`\n             f.n.insert(*a);\n         })"}, {"sha": "796390c093b1037817c8b377bec889c1be2a0195", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.stderr", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,15 +1,32 @@\n-error[E0500]: closure requires unique access to `f` but `*f` is already borrowed\n-  --> $DIR/borrowck-insert-during-each.rs:17:9\n+error[E0501]: cannot borrow `*f` as mutable because previous closure requires unique access\n+  --> $DIR/borrowck-insert-during-each.rs:16:5\n    |\n-LL |   f.foo(\n-   |   - borrow occurs here\n+LL |       f.foo(\n+   |       ^ --- first borrow later used by call\n+   |  _____|\n+   | |\n+LL | |\n+LL | |         |a| {\n+   | |         --- closure construction occurs here\n+LL | |             f.n.insert(*a);\n+   | |             - first borrow occurs due to use of `f` in closure\n+LL | |         })\n+   | |__________^ second borrow occurs here\n+\n+error[E0500]: closure requires unique access to `f` but it is already borrowed\n+  --> $DIR/borrowck-insert-during-each.rs:18:9\n+   |\n+LL |     f.foo(\n+   |     - --- first borrow later used by call\n+   |     |\n+   |     borrow occurs here\n+LL |\n LL |         |a| {\n    |         ^^^ closure construction occurs here\n LL |             f.n.insert(*a);\n-   |             - borrow occurs due to use of `f` in closure\n-LL |         })\n-   |          - borrow ends here\n+   |             - second borrow occurs due to use of `f` in closure\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0500`.\n+Some errors have detailed explanations: E0500, E0501.\n+For more information about an error, try `rustc --explain E0500`."}, {"sha": "59576a2837e56fb9307612d403577b157f5d2aef", "filename": "src/test/ui/borrowck/borrowck-issue-14498.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,107 +0,0 @@\n-error[E0594]: cannot assign to `***p` which is behind a `&` reference\n-  --> $DIR/borrowck-issue-14498.rs:19:5\n-   |\n-LL |     let p = &y;\n-   |             -- help: consider changing this to be a mutable reference: `&mut y`\n-LL |     ***p = 2;\n-   |     ^^^^^^^^ `p` is a `&` reference, so the data it refers to cannot be written\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:29:5\n-   |\n-LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:40:5\n-   |\n-LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:51:5\n-   |\n-LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:62:5\n-   |\n-LL |     let p = &y;\n-   |             -- borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:73:5\n-   |\n-LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:84:5\n-   |\n-LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:95:5\n-   |\n-LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:106:5\n-   |\n-LL |     let p = &y.a;\n-   |             ---- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error: aborting due to 9 previous errors\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "18391cfced798abfacca252d73d44cbae62466b3", "filename": "src/test/ui/borrowck/borrowck-issue-14498.ast.stderr", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,82 +0,0 @@\n-error[E0389]: cannot assign to data in a `&` reference\n-  --> $DIR/borrowck-issue-14498.rs:19:5\n-   |\n-LL |     ***p = 2;\n-   |     ^^^^^^^^ assignment into an immutable reference\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:29:5\n-   |\n-LL |     let p = &y;\n-   |              - borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:40:5\n-   |\n-LL |     let p = &y;\n-   |              - borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:51:5\n-   |\n-LL |     let p = &y;\n-   |              - borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-\n-error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:62:5\n-   |\n-LL |     let p = &y;\n-   |              - borrow of `**y` occurs here\n-LL |     let q = &***p;\n-LL |     **y = 2;\n-   |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:73:5\n-   |\n-LL |     let p = &y.a;\n-   |              --- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:84:5\n-   |\n-LL |     let p = &y.a;\n-   |              --- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:95:5\n-   |\n-LL |     let p = &y.a;\n-   |              --- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-\n-error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:106:5\n-   |\n-LL |     let p = &y.a;\n-   |              --- borrow of `**y.a` occurs here\n-LL |     let q = &***p;\n-LL |     **y.a = 2;\n-   |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-\n-error: aborting due to 9 previous errors\n-\n-Some errors have detailed explanations: E0389, E0506.\n-For more information about an error, try `rustc --explain E0389`."}, {"sha": "e8c9019264fe7343e658960ae9a2156f28aeffc9", "filename": "src/test/ui/borrowck/borrowck-issue-14498.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -4,9 +4,6 @@\n // Also includes tests of the errors reported when the Box in question\n // is immutable (#14270).\n \n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(box_syntax)]\n \n struct A { a: isize }\n@@ -16,8 +13,7 @@ fn indirect_write_to_imm_box() {\n     let mut x: isize = 1;\n     let y: Box<_> = box &mut x;\n     let p = &y;\n-    ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n-              //[mir]~^ ERROR cannot assign to `***p`\n+    ***p = 2; //~ ERROR cannot assign to `***p`\n     drop(p);\n }\n \n@@ -26,8 +22,7 @@ fn borrow_in_var_from_var() {\n     let mut y: Box<_> = box &mut x;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n-             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -37,8 +32,7 @@ fn borrow_in_var_from_var_via_imm_box() {\n     let y: Box<_> = box &mut x;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n-             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -48,8 +42,7 @@ fn borrow_in_var_from_field() {\n     let mut y: Box<_> = box &mut x.a;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n-             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -59,8 +52,7 @@ fn borrow_in_var_from_field_via_imm_box() {\n     let y: Box<_> = box &mut x.a;\n     let p = &y;\n     let q = &***p;\n-    **y = 2; //[ast]~ ERROR cannot assign to `**y` because it is borrowed\n-             //[mir]~^ ERROR cannot assign to `**y` because it is borrowed\n+    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -70,8 +62,7 @@ fn borrow_in_field_from_var() {\n     let mut y = B { a: box &mut x };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n-               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -81,8 +72,7 @@ fn borrow_in_field_from_var_via_imm_box() {\n     let y = B { a: box &mut x };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n-               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -92,8 +82,7 @@ fn borrow_in_field_from_field() {\n     let mut y = B { a: box &mut x.a };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n-               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }\n@@ -103,8 +92,7 @@ fn borrow_in_field_from_field_via_imm_box() {\n     let y = B { a: box &mut x.a };\n     let p = &y.a;\n     let q = &***p;\n-    **y.a = 2; //[ast]~ ERROR cannot assign to `**y.a` because it is borrowed\n-               //[mir]~^ ERROR cannot assign to `**y.a` because it is borrowed\n+    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n     drop(p);\n     drop(q);\n }"}, {"sha": "fec4c27520cf358bcd501fb742784a4543be114d", "filename": "src/test/ui/borrowck/borrowck-issue-14498.stderr", "status": "renamed", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,104 +1,96 @@\n error[E0594]: cannot assign to `***p` which is behind a `&` reference\n-  --> $DIR/borrowck-issue-14498.rs:19:5\n+  --> $DIR/borrowck-issue-14498.rs:16:5\n    |\n LL |     let p = &y;\n    |             -- help: consider changing this to be a mutable reference: `&mut y`\n LL |     ***p = 2;\n    |     ^^^^^^^^ `p` is a `&` reference, so the data it refers to cannot be written\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:29:5\n+  --> $DIR/borrowck-issue-14498.rs:25:5\n    |\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:40:5\n+  --> $DIR/borrowck-issue-14498.rs:35:5\n    |\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:51:5\n+  --> $DIR/borrowck-issue-14498.rs:45:5\n    |\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:62:5\n+  --> $DIR/borrowck-issue-14498.rs:55:5\n    |\n LL |     let p = &y;\n    |             -- borrow of `**y` occurs here\n LL |     let q = &***p;\n LL |     **y = 2;\n    |     ^^^^^^^ assignment to borrowed `**y` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:73:5\n+  --> $DIR/borrowck-issue-14498.rs:65:5\n    |\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:84:5\n+  --> $DIR/borrowck-issue-14498.rs:75:5\n    |\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:95:5\n+  --> $DIR/borrowck-issue-14498.rs:85:5\n    |\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0506]: cannot assign to `**y.a` because it is borrowed\n-  --> $DIR/borrowck-issue-14498.rs:106:5\n+  --> $DIR/borrowck-issue-14498.rs:95:5\n    |\n LL |     let p = &y.a;\n    |             ---- borrow of `**y.a` occurs here\n LL |     let q = &***p;\n LL |     **y.a = 2;\n    |     ^^^^^^^^^ assignment to borrowed `**y.a` occurs here\n-LL |\n LL |     drop(p);\n    |          - borrow later used here\n ", "previous_filename": "src/test/ui/borrowck/borrowck-issue-14498.mir.stderr"}, {"sha": "4ea4eb8f007591570b47b50e19289216795af7e1", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrowck-issue-2657-1.rs:9:18\n-   |\n-LL |       Some(ref _y) => {\n-   |            ------ borrow of `x.0` occurs here\n-LL |         let _a = x;\n-   |                  ^ move out of `x` occurs here\n-LL |         _y.use_ref();\n-   |         -- borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0505`."}, {"sha": "4ea4eb8f007591570b47b50e19289216795af7e1", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,12 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrowck-issue-2657-1.rs:9:13\n+  --> $DIR/borrowck-issue-2657-1.rs:9:18\n    |\n LL |       Some(ref _y) => {\n    |            ------ borrow of `x.0` occurs here\n LL |         let _a = x;\n-   |             ^^ move out of `x` occurs here\n+   |                  ^ move out of `x` occurs here\n+LL |         _y.use_ref();\n+   |         -- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4ef36df52df57371d03fcbd4459ee778ad81149c", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-issue-2657-2.rs:7:18\n-   |\n-LL |         let _b = *y;\n-   |                  ^^\n-   |                  |\n-   |                  cannot move out of borrowed content\n-   |                  help: consider removing the `*`: `y`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "4ef36df52df57371d03fcbd4459ee778ad81149c", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -5,7 +5,7 @@ LL |         let _b = *y;\n    |                  ^^\n    |                  |\n    |                  cannot move out of borrowed content\n-   |                  help: consider using a reference instead: `&*y`\n+   |                  help: consider removing the `*`: `y`\n \n error: aborting due to previous error\n "}, {"sha": "68a82bdb57c5510d31e504d213a6fb94d26d4183", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-if.rs:29:16\n-   |\n-LL |         _w = &v;\n-   |              -- immutable borrow occurs here\n-LL |     }\n-LL |     borrow_mut(&mut *v);\n-   |                ^^^^^^^ mutable borrow occurs here\n-LL |     _w.use_ref();\n-   |     -- immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "68a82bdb57c5510d31e504d213a6fb94d26d4183", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,14 +1,13 @@\n-error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-if.rs:29:21\n+error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-lend-flow-if.rs:29:16\n    |\n LL |         _w = &v;\n-   |               - immutable borrow occurs here\n+   |              -- immutable borrow occurs here\n LL |     }\n LL |     borrow_mut(&mut *v);\n-   |                     ^^ mutable borrow occurs here\n+   |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n-LL | }\n-   | - immutable borrow ends here\n+   |     -- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "83462ecd06b713a814204cc4985af42d24f7d741", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.ast.stderr", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,93 +0,0 @@\n-error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:35:17\n-   |\n-LL |     let mut x = &mut v;\n-   |                      - mutable borrow occurs here\n-...\n-LL |         borrow(&*v);\n-   |                 ^^ immutable borrow occurs here\n-LL |     }\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:45:17\n-   |\n-LL |     let mut x = &mut v;\n-   |                      - mutable borrow occurs here\n-LL |     for _ in 0..3 {\n-LL |         borrow(&*v);\n-   |                 ^^ immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:57:25\n-   |\n-LL |         borrow_mut(&mut *v);\n-   |                         ^^ mutable borrow occurs here\n-LL |         _x = &v;\n-   |               - immutable borrow occurs here\n-LL |     }\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:69:25\n-   |\n-LL |         borrow_mut(&mut *v);\n-   |                         ^^ mutable borrow occurs here\n-LL |         _x = &v;\n-   |               - immutable borrow occurs here\n-LL |     }\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:86:21\n-   |\n-LL |         _x = &v;\n-   |               - immutable borrow occurs here\n-...\n-LL |     borrow_mut(&mut *v);\n-   |                     ^^ mutable borrow occurs here\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:100:21\n-   |\n-LL |         _x = &v;\n-   |               - immutable borrow occurs here\n-...\n-LL |     borrow_mut(&mut *v);\n-   |                     ^^ mutable borrow occurs here\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:109:17\n-   |\n-LL |         borrow(&*v);\n-   |                 ^^ immutable borrow occurs here\n-...\n-LL |             x = &mut v;\n-   |                      - mutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error[E0499]: cannot borrow `v` as mutable more than once at a time\n-  --> $DIR/borrowck-lend-flow-loop.rs:112:22\n-   |\n-LL |             x = &mut v;\n-   |                      ^ mutable borrow starts here in previous iteration of loop\n-...\n-LL | }\n-   | - mutable borrow ends here\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0499, E0502.\n-For more information about an error, try `rustc --explain E0499`."}, {"sha": "b650df91ca23cfadce567474a31518b79d17c86f", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,19 +1,3 @@\n-// revisions: ast nll\n-\n-// Since we are testing nll migration explicitly as a separate\n-// revision, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n-\n-//[ast]compile-flags: -Z borrowck=ast\n-//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n-\n-// Note: the borrowck analysis was originally a flow-insensitive pass\n-// over the AST. Therefore, some of these (AST) errors are marked as\n-// spurious and are corrected by the flow-sensitive (NLL) analysis.\n-// The others are either genuine or would require more advanced\n-// changes. The latter cases are noted.\n-\n #![feature(box_syntax)]\n \n fn borrow(_v: &isize) {}\n@@ -26,13 +10,13 @@ fn inc(v: &mut Box<isize>) {\n }\n \n fn loop_overarching_alias_mut() {\n-    // In this instance, the borrow encompasses the entire loop.\n+    // In this instance, the borrow ends on the line before the loop\n \n     let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n-        borrow(&*v); //[ast]~ ERROR cannot borrow\n+        borrow(&*v); // OK\n     }\n }\n \n@@ -42,38 +26,37 @@ fn block_overarching_alias_mut() {\n     let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     for _ in 0..3 {\n-        borrow(&*v); //[ast]~ ERROR cannot borrow\n-        //[nll]~^ ERROR cannot borrow\n+        borrow(&*v); //~ ERROR cannot borrow\n     }\n     *x = box 5;\n }\n fn loop_aliased_mut() {\n-    // In this instance, the borrow is carried through the loop.\n+    // In this instance, the borrow ends right after each assignment to _x\n \n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n-        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+        borrow_mut(&mut *v); // OK\n         _x = &v;\n     }\n }\n \n fn while_aliased_mut() {\n-    // In this instance, the borrow is carried through the loop.\n+    // In this instance, the borrow ends right after each assignment to _x\n \n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n-        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+        borrow_mut(&mut *v); // OK\n         _x = &v;\n     }\n }\n \n \n fn loop_aliased_mut_break() {\n-    // In this instance, the borrow is carried through the loop.\n+    // In this instance, the borrow ends right after each assignment to _x\n \n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n@@ -83,11 +66,11 @@ fn loop_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+    borrow_mut(&mut *v); // OK\n }\n \n fn while_aliased_mut_break() {\n-    // In this instance, the borrow is carried through the loop.\n+    // In this instance, the borrow ends right after each assignment to _x\n \n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n@@ -97,7 +80,7 @@ fn while_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n+    borrow_mut(&mut *v); // OK\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n@@ -106,10 +89,9 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     let mut x = &mut w;\n     while cond {\n         **x += 1;\n-        borrow(&*v); //[ast]~ ERROR cannot borrow\n-        //[nll]~^ ERROR cannot borrow\n+        borrow(&*v); //~ ERROR cannot borrow\n         if cond2 {\n-            x = &mut v; //[ast]~ ERROR cannot borrow\n+            x = &mut v; // OK\n         }\n     }\n }"}, {"sha": "f02c357f48b4c919ade516158e3da2318801c600", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,24 +1,24 @@\n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:45:16\n+  --> $DIR/borrowck-lend-flow-loop.rs:29:16\n    |\n LL |     let mut x = &mut v;\n    |                 ------ mutable borrow occurs here\n LL |     for _ in 0..3 {\n LL |         borrow(&*v);\n    |                ^^^ immutable borrow occurs here\n-...\n+LL |     }\n LL |     *x = box 5;\n    |     -- mutable borrow later used here\n \n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-lend-flow-loop.rs:109:16\n+  --> $DIR/borrowck-lend-flow-loop.rs:92:16\n    |\n LL |         **x += 1;\n    |         -------- mutable borrow later used here\n LL |         borrow(&*v);\n    |                ^^^ immutable borrow occurs here\n-...\n-LL |             x = &mut v;\n+LL |         if cond2 {\n+LL |             x = &mut v; // OK\n    |                 ------ mutable borrow occurs here\n \n error: aborting due to 2 previous errors", "previous_filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr"}, {"sha": "236bc11f2bb37a400130e98b5b8c6d023f495e89", "filename": "src/test/ui/borrowck/borrowck-lend-flow-match.ast.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,11 +0,0 @@\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-lend-flow-match.rs:18:13\n-   |\n-LL |         Some(ref r) => {\n-   |              ----- borrow of `x` occurs here\n-LL |             x = Some(1);\n-   |             ^^^^^^^^^^^ assignment to borrowed `x` occurs here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "734f965195c271721581ab9a0ae515ec4105ebc8", "filename": "src/test/ui/borrowck/borrowck-lend-flow-match.mir.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-lend-flow-match.rs:18:13\n-   |\n-LL |         Some(ref r) => {\n-   |              ----- borrow of `x` occurs here\n-LL |             x = Some(1);\n-   |             ^^^^^^^^^^^ assignment to borrowed `x` occurs here\n-LL |\n-LL |             drop(r);\n-   |                  - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "9737bc7695d103b94c02cdf647ebce36a6174be5", "filename": "src/test/ui/borrowck/borrowck-lend-flow-match.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,11 +1,5 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n-#![allow(unused_variables)]\n-#![allow(unused_assignments)]\n-\n fn separate_arms() {\n-    // Here both arms perform assignments, but only is illegal.\n+    // Here both arms perform assignments, but only one is illegal.\n \n     let mut x = None;\n     match x {\n@@ -15,12 +9,10 @@ fn separate_arms() {\n             x = Some(0);\n         }\n         Some(ref r) => {\n-            x = Some(1); //[ast]~ ERROR cannot assign\n-            //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n+            x = Some(1); //~ ERROR cannot assign to `x` because it is borrowed\n             drop(r);\n         }\n     }\n-    x.clone(); // just to prevent liveness warnings\n }\n \n fn main() {}"}, {"sha": "66f1cd9bd5664a68f97ffdae50283138feacaf31", "filename": "src/test/ui/borrowck/borrowck-lend-flow-match.stderr", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-match.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,11 +1,10 @@\n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-lend-flow-match.rs:18:13\n+  --> $DIR/borrowck-lend-flow-match.rs:12:13\n    |\n LL |         Some(ref r) => {\n    |              ----- borrow of `x` occurs here\n LL |             x = Some(1);\n    |             ^^^^^^^^^^^ assignment to borrowed `x` occurs here\n-LL |\n LL |             drop(r);\n    |                  - borrow later used here\n ", "previous_filename": "src/test/ui/borrowck/borrowck-lend-flow-match.ast.nll.stderr"}, {"sha": "07b11b3e7282824d0a138b6d087b597734cc54f6", "filename": "src/test/ui/borrowck/borrowck-lend-flow.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow.rs:24:16\n-   |\n-LL |     let _w = &v;\n-   |              -- immutable borrow occurs here\n-LL |     borrow_mut(&mut *v);\n-   |                ^^^^^^^ mutable borrow occurs here\n-LL |     _w.use_ref();\n-   |     -- immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "07b11b3e7282824d0a138b6d087b597734cc54f6", "filename": "src/test/ui/borrowck/borrowck-lend-flow.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,13 +1,12 @@\n-error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow.rs:24:21\n+error[E0502]: cannot borrow `*v` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-lend-flow.rs:24:16\n    |\n LL |     let _w = &v;\n-   |               - immutable borrow occurs here\n+   |              -- immutable borrow occurs here\n LL |     borrow_mut(&mut *v);\n-   |                     ^^ mutable borrow occurs here\n+   |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n-LL | }\n-   | - immutable borrow ends here\n+   |     -- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4497cfb71d19a3af72982fd85d4c57bdc4807d75", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.nll.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,29 +0,0 @@\n-error[E0505]: cannot move out of `v` because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move-cc.rs:14:19\n-   |\n-LL |     let w = &v;\n-   |             -- borrow of `v` occurs here\n-LL |     thread::spawn(move|| {\n-   |                   ^^^^^^ move out of `v` occurs here\n-LL |         println!(\"v={}\", *v);\n-   |                           - move occurs due to use in closure\n-...\n-LL |     w.use_ref();\n-   |     - borrow later used here\n-\n-error[E0505]: cannot move out of `v` because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move-cc.rs:24:19\n-   |\n-LL |     let w = &v;\n-   |             -- borrow of `v` occurs here\n-LL |     thread::spawn(move|| {\n-   |                   ^^^^^^ move out of `v` occurs here\n-LL |         println!(\"v={}\", *v);\n-   |                           - move occurs due to use in closure\n-...\n-LL |     w.use_ref();\n-   |     - borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0505`."}, {"sha": "9fa46563fdf801ab8788e76452d6d464ec23f982", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -12,8 +12,8 @@ fn box_imm() {\n     let v: Box<_> = box 3;\n     let w = &v;\n     thread::spawn(move|| {\n+    //~^ ERROR cannot move out of `v` because it is borrowed\n         println!(\"v={}\", *v);\n-        //~^ ERROR cannot move `v` into closure\n     });\n     w.use_ref();\n }\n@@ -22,8 +22,8 @@ fn box_imm_explicit() {\n     let v: Box<_> = box 3;\n     let w = &v;\n     thread::spawn(move|| {\n+    //~^ ERROR cannot move\n         println!(\"v={}\", *v);\n-        //~^ ERROR cannot move\n     });\n     w.use_ref();\n }"}, {"sha": "2acbcd94f8bbf027e4e4d4c31922e7b5994c90d4", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.stderr", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,21 +1,31 @@\n-error[E0504]: cannot move `v` into closure because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move-cc.rs:15:27\n+error[E0505]: cannot move out of `v` because it is borrowed\n+  --> $DIR/borrowck-loan-blocks-move-cc.rs:14:19\n    |\n LL |     let w = &v;\n-   |              - borrow of `v` occurs here\n+   |             -- borrow of `v` occurs here\n LL |     thread::spawn(move|| {\n+   |                   ^^^^^^ move out of `v` occurs here\n+LL |\n LL |         println!(\"v={}\", *v);\n-   |                           ^ move into closure occurs here\n+   |                           - move occurs due to use in closure\n+LL |     });\n+LL |     w.use_ref();\n+   |     - borrow later used here\n \n-error[E0504]: cannot move `v` into closure because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move-cc.rs:25:27\n+error[E0505]: cannot move out of `v` because it is borrowed\n+  --> $DIR/borrowck-loan-blocks-move-cc.rs:24:19\n    |\n LL |     let w = &v;\n-   |              - borrow of `v` occurs here\n+   |             -- borrow of `v` occurs here\n LL |     thread::spawn(move|| {\n+   |                   ^^^^^^ move out of `v` occurs here\n+LL |\n LL |         println!(\"v={}\", *v);\n-   |                           ^ move into closure occurs here\n+   |                           - move occurs due to use in closure\n+LL |     });\n+LL |     w.use_ref();\n+   |     - borrow later used here\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0504`.\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "615660febbce2e9b0914114de48ad134ed016201", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0505]: cannot move out of `v` because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move.rs:11:10\n-   |\n-LL |     let w = &v;\n-   |             -- borrow of `v` occurs here\n-LL |     take(v);\n-   |          ^ move out of `v` occurs here\n-LL |     w.use_ref();\n-   |     - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0505`."}, {"sha": "615660febbce2e9b0914114de48ad134ed016201", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,9 +2,11 @@ error[E0505]: cannot move out of `v` because it is borrowed\n   --> $DIR/borrowck-loan-blocks-move.rs:11:10\n    |\n LL |     let w = &v;\n-   |              - borrow of `v` occurs here\n+   |             -- borrow of `v` occurs here\n LL |     take(v);\n    |          ^ move out of `v` occurs here\n+LL |     w.use_ref();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "1d1522a15b1ed0ae19464da611137f6a3741e918", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-loan-blocks-mut-uniq.rs:10:12\n-   |\n-LL |     borrow(&*v,\n-   |     ------ --- immutable borrow occurs here\n-   |     |\n-   |     immutable borrow later used by call\n-LL |            |w| {\n-   |            ^^^ mutable borrow occurs here\n-LL |             v = box 4;\n-   |             - second borrow occurs due to use of `v` in closure\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "1d1522a15b1ed0ae19464da611137f6a3741e918", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,15 +1,14 @@\n-error[E0502]: cannot borrow `v` as mutable because `*v` is also borrowed as immutable\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-blocks-mut-uniq.rs:10:12\n    |\n LL |     borrow(&*v,\n-   |             -- immutable borrow occurs here\n+   |     ------ --- immutable borrow occurs here\n+   |     |\n+   |     immutable borrow later used by call\n LL |            |w| {\n    |            ^^^ mutable borrow occurs here\n LL |             v = box 4;\n-   |             - borrow occurs due to use of `v` in closure\n-...\n-LL |         })\n-   |          - immutable borrow ends here\n+   |             - second borrow occurs due to use of `v` in closure\n \n error: aborting due to previous error\n "}, {"sha": "095ae7f56b22e5643219552e332d6538596c2a4c", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0382]: borrow of moved value: `x`\n-  --> $DIR/borrowck-loan-in-overloaded-op.rs:21:20\n-   |\n-LL |     let x = Foo(box 3);\n-   |         - move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n-LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n-   |               -    ^ value borrowed here after move\n-   |               |\n-   |               value moved here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "1baa94edfbe58b2cb164e53f339002b90d457dc7", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -19,5 +19,5 @@ impl Add for Foo {\n fn main() {\n     let x = Foo(box 3);\n     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n-    //~^ ERROR use of moved value: `x`\n+    //~^ ERROR borrow of moved value: `x`\n }"}, {"sha": "095ae7f56b22e5643219552e332d6538596c2a4c", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,12 +1,12 @@\n-error[E0382]: use of moved value: `x`\n+error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrowck-loan-in-overloaded-op.rs:21:20\n    |\n+LL |     let x = Foo(box 3);\n+   |         - move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n-   |               -    ^ value used here after move\n+   |               -    ^ value borrowed here after move\n    |               |\n    |               value moved here\n-   |\n-   = note: move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "6994c837dfcbe62eb98ae6b9fc4da1db692ae624", "filename": "src/test/ui/borrowck/borrowck-loan-of-static-data-issue-27616.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0506]: cannot assign to `*s` because it is borrowed\n-  --> $DIR/borrowck-loan-of-static-data-issue-27616.rs:16:5\n-   |\n-LL |     let alias: &'static mut String = s;\n-   |                -------------------   - borrow of `*s` occurs here\n-   |                |\n-   |                type annotation requires that `*s` is borrowed for `'static`\n-...\n-LL |     *s = String::new();\n-   |     ^^ assignment to borrowed `*s` occurs here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0506`."}, {"sha": "6994c837dfcbe62eb98ae6b9fc4da1db692ae624", "filename": "src/test/ui/borrowck/borrowck-loan-of-static-data-issue-27616.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,10 +2,12 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n   --> $DIR/borrowck-loan-of-static-data-issue-27616.rs:16:5\n    |\n LL |     let alias: &'static mut String = s;\n-   |                                      - borrow of `*s` occurs here\n+   |                -------------------   - borrow of `*s` occurs here\n+   |                |\n+   |                type annotation requires that `*s` is borrowed for `'static`\n ...\n LL |     *s = String::new();\n-   |     ^^^^^^^^^^^^^^^^^^ assignment to borrowed `*s` occurs here\n+   |     ^^ assignment to borrowed `*s` occurs here\n \n error: aborting due to previous error\n "}, {"sha": "aa874c34a22ed5d5320658833143273b3c2860a4", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.nll.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,28 +0,0 @@\n-error[E0503]: cannot use `p` because it was mutably borrowed\n-  --> $DIR/borrowck-loan-rcvr-overloaded-op.rs:38:5\n-   |\n-LL |     let q = &mut p;\n-   |             ------ borrow of `p` occurs here\n-LL | \n-LL |     p + 3;\n-   |     ^ use of borrowed `p`\n-...\n-LL |     *q + 3; // OK to use the new alias `q`\n-   |     -- borrow later used here\n-\n-error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-loan-rcvr-overloaded-op.rs:39:5\n-   |\n-LL |     let q = &mut p;\n-   |             ------ mutable borrow occurs here\n-...\n-LL |     p.times(3);\n-   |     ^ immutable borrow occurs here\n-LL | \n-LL |     *q + 3; // OK to use the new alias `q`\n-   |     -- mutable borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0502, E0503.\n-For more information about an error, try `rustc --explain E0502`."}, {"sha": "aa874c34a22ed5d5320658833143273b3c2860a4", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,22 +2,25 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n   --> $DIR/borrowck-loan-rcvr-overloaded-op.rs:38:5\n    |\n LL |     let q = &mut p;\n-   |                  - borrow of `p` occurs here\n+   |             ------ borrow of `p` occurs here\n LL | \n LL |     p + 3;\n    |     ^ use of borrowed `p`\n+...\n+LL |     *q + 3; // OK to use the new alias `q`\n+   |     -- borrow later used here\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-loan-rcvr-overloaded-op.rs:39:5\n    |\n LL |     let q = &mut p;\n-   |                  - mutable borrow occurs here\n+   |             ------ mutable borrow occurs here\n ...\n LL |     p.times(3);\n    |     ^ immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n+LL | \n+LL |     *q + 3; // OK to use the new alias `q`\n+   |     -- mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ec3edc80323f526400cc594d1857179ed0330256", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.nll.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,25 +0,0 @@\n-error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-loan-rcvr.rs:23:14\n-   |\n-LL |     p.blockm(|| {\n-   |     - ------ ^^ mutable borrow occurs here\n-   |     | |\n-   |     | immutable borrow later used by call\n-   |     immutable borrow occurs here\n-LL |         p.x = 10;\n-   |         - second borrow occurs due to use of `p` in closure\n-\n-error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-loan-rcvr.rs:34:5\n-   |\n-LL |     let l = &mut p;\n-   |             ------ mutable borrow occurs here\n-LL |     p.impurem();\n-   |     ^ immutable borrow occurs here\n-LL | \n-LL |     l.x += 1;\n-   |     -------- mutable borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "ec3edc80323f526400cc594d1857179ed0330256", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,24 +2,23 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n   --> $DIR/borrowck-loan-rcvr.rs:23:14\n    |\n LL |     p.blockm(|| {\n-   |     -        ^^ mutable borrow occurs here\n-   |     |\n+   |     - ------ ^^ mutable borrow occurs here\n+   |     | |\n+   |     | immutable borrow later used by call\n    |     immutable borrow occurs here\n LL |         p.x = 10;\n-   |         - borrow occurs due to use of `p` in closure\n-LL |     })\n-   |      - immutable borrow ends here\n+   |         - second borrow occurs due to use of `p` in closure\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-loan-rcvr.rs:34:5\n    |\n LL |     let l = &mut p;\n-   |                  - mutable borrow occurs here\n+   |             ------ mutable borrow occurs here\n LL |     p.impurem();\n    |     ^ immutable borrow occurs here\n-...\n-LL | }\n-   | - mutable borrow ends here\n+LL | \n+LL |     l.x += 1;\n+   |     -------- mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6691a2396a1da1365c4a3ff97a39f493208b137d", "filename": "src/test/ui/borrowck/borrowck-loan-vec-content.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-loan-vec-content.rs:18:9\n-   |\n-LL |     takes_imm_elt(\n-   |     ------------- immutable borrow later used by call\n-LL |         &v[0],\n-   |          - immutable borrow occurs here\n-LL |         || {\n-   |         ^^ mutable borrow occurs here\n-LL |             v[1] = 4;\n-   |             - second borrow occurs due to use of `v` in closure\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "6691a2396a1da1365c4a3ff97a39f493208b137d", "filename": "src/test/ui/borrowck/borrowck-loan-vec-content.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,14 +1,14 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-vec-content.rs:18:9\n    |\n+LL |     takes_imm_elt(\n+   |     ------------- immutable borrow later used by call\n LL |         &v[0],\n    |          - immutable borrow occurs here\n LL |         || {\n    |         ^^ mutable borrow occurs here\n LL |             v[1] = 4;\n-   |             - borrow occurs due to use of `v` in closure\n-LL |         })\n-   |          - immutable borrow ends here\n+   |             - second borrow occurs due to use of `v` in closure\n \n error: aborting due to previous error\n "}, {"sha": "6eda8a439baa4d015d82f0b75af0755bdeddcf9e", "filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.ast.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0597]: `x` does not live long enough\n-  --> $DIR/borrowck-local-borrow-outlives-fn.rs:5:6\n-   |\n-LL |     &x\n-   |      ^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - borrowed value only lives until here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "df89e85ebe20188d6366d287d567b1a26b4e31a8", "filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.mir.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0515]: cannot return reference to function parameter `x`\n-  --> $DIR/borrowck-local-borrow-outlives-fn.rs:5:5\n-   |\n-LL |     &x\n-   |     ^^ returns a reference to data owned by the current function\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0515`."}, {"sha": "b6eebd4e3256fbc25a6648138ed1fd14ac5bbd2b", "filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,6 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n fn cplusplus_mode(x: isize) -> &'static isize {\n     &x\n-    //[ast]~^ ERROR `x` does not live long enough [E0597]\n-    //[mir]~^^ ERROR cannot return reference to function parameter `x` [E0515]\n+    //~^ ERROR cannot return reference to function parameter `x` [E0515]\n }\n \n fn main() {}"}, {"sha": "9d19de211a5e0eb7d5bfb2a8080b895e80a94e9d", "filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0515]: cannot return reference to function parameter `x`\n-  --> $DIR/borrowck-local-borrow-outlives-fn.rs:5:5\n+  --> $DIR/borrowck-local-borrow-outlives-fn.rs:2:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function", "previous_filename": "src/test/ui/borrowck/borrowck-local-borrow-outlives-fn.ast.nll.stderr"}, {"sha": "89a0e6cd8290cdbab022ef86a2678f188a85a0b0", "filename": "src/test/ui/borrowck/borrowck-local-borrow-with-panic-outlives-fn.ast.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0597]: `z.1` does not live long enough\n-  --> $DIR/borrowck-local-borrow-with-panic-outlives-fn.rs:6:20\n-   |\n-LL |     *x = Some(&mut z.1);\n-   |                    ^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - borrowed value only lives until here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "ac9e73fadec067de14761455919fcc64f73f61ab", "filename": "src/test/ui/borrowck/borrowck-local-borrow-with-panic-outlives-fn.mir.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,15 +0,0 @@\n-error[E0597]: `z.1` does not live long enough\n-  --> $DIR/borrowck-local-borrow-with-panic-outlives-fn.rs:6:15\n-   |\n-LL |     *x = Some(&mut z.1);\n-   |     ----------^^^^^^^^-\n-   |     |         |\n-   |     |         borrowed value does not live long enough\n-   |     assignment requires that `z.1` is borrowed for `'static`\n-...\n-LL | }\n-   | - `z.1` dropped here while still borrowed\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "ffb2da280232f872def5ea98152e09a9ed72d773", "filename": "src/test/ui/borrowck/borrowck-local-borrow-with-panic-outlives-fn.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,11 +1,7 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n fn cplusplus_mode_exceptionally_unsafe(x: &mut Option<&'static mut isize>) {\n     let mut z = (0, 0);\n     *x = Some(&mut z.1);\n-    //[ast]~^ ERROR `z.1` does not live long enough [E0597]\n-    //[mir]~^^ ERROR `z.1` does not live long enough [E0597]\n+    //~^ ERROR `z.1` does not live long enough [E0597]\n     panic!(\"catch me for a dangling pointer!\")\n }\n "}, {"sha": "6ea6951ad966541eec0aeb987da3be4f35dba7ac", "filename": "src/test/ui/borrowck/borrowck-local-borrow-with-panic-outlives-fn.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `z.1` does not live long enough\n-  --> $DIR/borrowck-local-borrow-with-panic-outlives-fn.rs:6:15\n+  --> $DIR/borrowck-local-borrow-with-panic-outlives-fn.rs:3:15\n    |\n LL |     *x = Some(&mut z.1);\n    |     ----------^^^^^^^^-", "previous_filename": "src/test/ui/borrowck/borrowck-local-borrow-with-panic-outlives-fn.ast.nll.stderr"}, {"sha": "a5da1fc5b20673cfc8f9d05546f76b0ff4643475", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.ast.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,30 +0,0 @@\n-error[E0503]: cannot use `(foo as Foo::A).0` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:15:16\n-   |\n-LL |     let p = &mut foo;\n-   |                  --- borrow of `foo` occurs here\n-...\n-LL |         Foo::A(x) => x\n-   |                ^ use of borrowed `foo`\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:26:9\n-   |\n-LL |     let r = &mut x;\n-   |                  - borrow of `x` occurs here\n-LL |     let _ = match x {\n-LL |         x => x + 1,\n-   |         ^ use of borrowed `x`\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:28:9\n-   |\n-LL |     let r = &mut x;\n-   |                  - borrow of `x` occurs here\n-...\n-LL |         y => y + 2,\n-   |         ^ use of borrowed `x`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0503`."}, {"sha": "ecbfeec822cc7f9c249f288ab666767be610b9c5", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.mir.stderr", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,51 +0,0 @@\n-error[E0503]: cannot use `foo` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:13:9\n-   |\n-LL |     let p = &mut foo;\n-   |             -------- borrow of `foo` occurs here\n-LL |     let _ = match foo {\n-LL |         Foo::B => 1,\n-   |         ^^^^^^ use of borrowed `foo`\n-...\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0503]: cannot use `foo.0` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:15:16\n-   |\n-LL |     let p = &mut foo;\n-   |             -------- borrow of `foo` occurs here\n-...\n-LL |         Foo::A(x) => x\n-   |                ^ use of borrowed `foo`\n-...\n-LL |     drop(p);\n-   |          - borrow later used here\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:26:9\n-   |\n-LL |     let r = &mut x;\n-   |             ------ borrow of `x` occurs here\n-LL |     let _ = match x {\n-LL |         x => x + 1,\n-   |         ^ use of borrowed `x`\n-...\n-LL |     drop(r);\n-   |          - borrow later used here\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:28:9\n-   |\n-LL |     let r = &mut x;\n-   |             ------ borrow of `x` occurs here\n-...\n-LL |         y => y + 2,\n-   |         ^ use of borrowed `x`\n-...\n-LL |     drop(r);\n-   |          - borrow later used here\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0503`."}, {"sha": "c766e6c108086dd8b11b09aeeb3828b4431df105", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n enum Foo {\n     A(i32),\n     B\n@@ -10,10 +7,9 @@ fn match_enum() {\n     let mut foo = Foo::B;\n     let p = &mut foo;\n     let _ = match foo {\n-        Foo::B => 1, //[mir]~ ERROR [E0503]\n+        Foo::B => 1, //~ ERROR [E0503]\n         _ => 2,\n-        Foo::A(x) => x //[ast]~ ERROR [E0503]\n-                       //[mir]~^ ERROR [E0503]\n+        Foo::A(x) => x //~ ERROR [E0503]\n     };\n     drop(p);\n }\n@@ -23,10 +19,8 @@ fn main() {\n     let mut x = 1;\n     let r = &mut x;\n     let _ = match x {\n-        x => x + 1, //[ast]~ ERROR [E0503]\n-                    //[mir]~^ ERROR [E0503]\n-        y => y + 2, //[ast]~ ERROR [E0503]\n-                    //[mir]~^ ERROR [E0503]\n+        x => x + 1, //~ ERROR [E0503]\n+        y => y + 2, //~ ERROR [E0503]\n     };\n     drop(r);\n }"}, {"sha": "286a925bb7f6ccd72a072b3102b69c1714f7d2fa", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `foo` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:13:9\n+  --> $DIR/borrowck-match-already-borrowed.rs:10:9\n    |\n LL |     let p = &mut foo;\n    |             -------- borrow of `foo` occurs here\n@@ -11,19 +11,19 @@ LL |     drop(p);\n    |          - borrow later used here\n \n error[E0503]: cannot use `foo.0` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:15:16\n+  --> $DIR/borrowck-match-already-borrowed.rs:12:16\n    |\n LL |     let p = &mut foo;\n    |             -------- borrow of `foo` occurs here\n ...\n LL |         Foo::A(x) => x\n    |                ^ use of borrowed `foo`\n-...\n+LL |     };\n LL |     drop(p);\n    |          - borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:26:9\n+  --> $DIR/borrowck-match-already-borrowed.rs:22:9\n    |\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n@@ -35,14 +35,14 @@ LL |     drop(r);\n    |          - borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:28:9\n+  --> $DIR/borrowck-match-already-borrowed.rs:23:9\n    |\n LL |     let r = &mut x;\n    |             ------ borrow of `x` occurs here\n ...\n LL |         y => y + 2,\n    |         ^ use of borrowed `x`\n-...\n+LL |     };\n LL |     drop(r);\n    |          - borrow later used here\n ", "previous_filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.ast.nll.stderr"}, {"sha": "5f43302e0ef2a910ad78b7ee3ef134cc9a77fbea", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.ast.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,43 +0,0 @@\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:17:13\n-   |\n-LL |         x => {\n-   |         - first assignment to `x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:24:13\n-   |\n-LL |         E::Foo(x) => {\n-   |                - first assignment to `x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:31:13\n-   |\n-LL |         S { bar: x } => {\n-   |                  - first assignment to `x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:38:13\n-   |\n-LL |         (x,) => {\n-   |          - first assignment to `x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:45:13\n-   |\n-LL |         [x,_,_] => {\n-   |          - first assignment to `x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "2ac05393e02cb936656b369e6b76e82f25671229", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.mir.stderr", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,58 +0,0 @@\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:17:13\n-   |\n-LL |         x => {\n-   |         -\n-   |         |\n-   |         first assignment to `x`\n-   |         help: make this binding mutable: `mut x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:24:13\n-   |\n-LL |         E::Foo(x) => {\n-   |                -\n-   |                |\n-   |                first assignment to `x`\n-   |                help: make this binding mutable: `mut x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:31:13\n-   |\n-LL |         S { bar: x } => {\n-   |                  -\n-   |                  |\n-   |                  first assignment to `x`\n-   |                  help: make this binding mutable: `mut x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:38:13\n-   |\n-LL |         (x,) => {\n-   |          -\n-   |          |\n-   |          first assignment to `x`\n-   |          help: make this binding mutable: `mut x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:45:13\n-   |\n-LL |         [x,_,_] => {\n-   |          -\n-   |          |\n-   |          first assignment to `x`\n-   |          help: make this binding mutable: `mut x`\n-LL |             x += 1;\n-   |             ^^^^^^ cannot assign twice to immutable variable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "064bf69ae79005b29427b1e3ea686dbe514b4c83", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n // Test that immutable pattern bindings cannot be reassigned.\n \n enum E {\n@@ -14,36 +11,31 @@ struct S {\n pub fn main() {\n     match 1 {\n         x => {\n-            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR [E0384]\n+            x += 1; //~ ERROR [E0384]\n         }\n     }\n \n     match E::Foo(1) {\n         E::Foo(x) => {\n-            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR [E0384]\n+            x += 1; //~ ERROR [E0384]\n         }\n     }\n \n     match (S { bar: 1 }) {\n         S { bar: x } => {\n-            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR [E0384]\n+            x += 1; //~ ERROR [E0384]\n         }\n     }\n \n     match (1,) {\n         (x,) => {\n-            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR [E0384]\n+            x += 1; //~ ERROR [E0384]\n         }\n     }\n \n     match [1,2,3] {\n         [x,_,_] => {\n-            x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR [E0384]\n+            x += 1; //~ ERROR [E0384]\n         }\n     }\n }"}, {"sha": "5661ca52cbabc973520604d40fbf1eda0ec27c4a", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:17:13\n+  --> $DIR/borrowck-match-binding-is-assignment.rs:14:13\n    |\n LL |         x => {\n    |         -\n@@ -10,7 +10,7 @@ LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:24:13\n+  --> $DIR/borrowck-match-binding-is-assignment.rs:20:13\n    |\n LL |         E::Foo(x) => {\n    |                -\n@@ -21,7 +21,7 @@ LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:31:13\n+  --> $DIR/borrowck-match-binding-is-assignment.rs:26:13\n    |\n LL |         S { bar: x } => {\n    |                  -\n@@ -32,7 +32,7 @@ LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:38:13\n+  --> $DIR/borrowck-match-binding-is-assignment.rs:32:13\n    |\n LL |         (x,) => {\n    |          -\n@@ -43,7 +43,7 @@ LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-match-binding-is-assignment.rs:45:13\n+  --> $DIR/borrowck-match-binding-is-assignment.rs:38:13\n    |\n LL |         [x,_,_] => {\n    |          -", "previous_filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.ast.nll.stderr"}, {"sha": "38f6ca7be752eb6d3090d0d64a9e84fe60df5458", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0507]: cannot move out of captured variable in an `FnMut` closure\n-  --> $DIR/borrowck-move-by-capture.rs:9:29\n-   |\n-LL |     let bar: Box<_> = box 3;\n-   |         --- captured outer variable\n-LL |     let _g = to_fn_mut(|| {\n-LL |         let _h = to_fn_once(move || -> isize { *bar });\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of captured variable in an `FnMut` closure\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "38f6ca7be752eb6d3090d0d64a9e84fe60df5458", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,11 +1,11 @@\n-error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:9:29\n    |\n LL |     let bar: Box<_> = box 3;\n    |         --- captured outer variable\n LL |     let _g = to_fn_mut(|| {\n LL |         let _h = to_fn_once(move || -> isize { *bar });\n-   |                             ^^^^^^^^^^^^^^^^ cannot move out of captured outer variable in an `FnMut` closure\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of captured variable in an `FnMut` closure\n \n error: aborting due to previous error\n "}, {"sha": "de75210fcd2f8badc71491a64361a9456864cf92", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,67 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:11:11\n-   |\n-LL |     match *f {\n-   |           ^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `*`: `f`\n-LL |\n-LL |         Foo::Foo1(num1,\n-   |                   ---- data moved here\n-LL |                   num2) => (),\n-   |                   ---- ...and here\n-LL |         Foo::Foo2(num) => (),\n-   |                   --- ...and here\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:13:19\n-   |\n-LL |         Foo::Foo1(num1,\n-   |                   ^^^^\n-LL |                   num2) => (),\n-   |                   ^^^^\n-LL |         Foo::Foo2(num) => (),\n-   |                   ^^^\n-\n-error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:29:11\n-   |\n-LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n-...\n-LL |             f: _s,\n-   |                -- data moved here\n-LL |             g: _t\n-   |                -- ...and here\n-   |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:32:16\n-   |\n-LL |             f: _s,\n-   |                ^^\n-LL |             g: _t\n-   |                ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:47:11\n-   |\n-LL |     match a.a {\n-   |           ^^^\n-   |           |\n-   |           cannot move out of borrowed content\n-   |           help: consider borrowing here: `&a.a`\n-LL |\n-LL |         n => {\n-   |         - data moved here\n-   |\n-note: move occurs because `n` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:49:9\n-   |\n-LL |         n => {\n-   |         ^\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0507, E0509.\n-For more information about an error, try `rustc --explain E0507`."}, {"sha": "b21f13a983c6b536106435619ff99c22f3801d1c", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -27,8 +27,9 @@ impl Drop for S {\n \n fn move_in_match() {\n     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n-        S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+        //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n         //~| cannot move out of here\n+        S {\n             f: _s,\n             g: _t\n         } => {}"}, {"sha": "8438320891ce653491ec89b4e1174f444e86915c", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 46, "deletions": 17, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -2,35 +2,64 @@ error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n LL |     match *f {\n-   |           ^^ cannot move out of borrowed content\n+   |           ^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider removing the `*`: `f`\n LL |\n LL |         Foo::Foo1(num1,\n-   |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n+   |                   ---- data moved here\n LL |                   num2) => (),\n-   |                   ---- ...and here (use `ref num2` or `ref mut num2`)\n+   |                   ---- ...and here\n LL |         Foo::Foo2(num) => (),\n-   |                   --- ...and here (use `ref num` or `ref mut num`)\n+   |                   --- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:13:19\n+   |\n+LL |         Foo::Foo1(num1,\n+   |                   ^^^^\n+LL |                   num2) => (),\n+   |                   ^^^^\n+LL |         Foo::Foo2(num) => (),\n+   |                   ^^^\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:30:9\n-   |\n-LL | /         S {\n-LL | |\n-LL | |             f: _s,\n-   | |                -- hint: to prevent move, use `ref _s` or `ref mut _s`\n-LL | |             g: _t\n-   | |                -- ...and here (use `ref _t` or `ref mut _t`)\n-LL | |         } => {}\n-   | |_________^ cannot move out of here\n+  --> $DIR/borrowck-move-error-with-note.rs:29:11\n+   |\n+LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n+...\n+LL |             f: _s,\n+   |                -- data moved here\n+LL |             g: _t\n+   |                -- ...and here\n+   |\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:33:16\n+   |\n+LL |             f: _s,\n+   |                ^^\n+LL |             g: _t\n+   |                ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-error-with-note.rs:47:11\n+  --> $DIR/borrowck-move-error-with-note.rs:48:11\n    |\n LL |     match a.a {\n-   |           ^ cannot move out of borrowed content\n+   |           ^^^\n+   |           |\n+   |           cannot move out of borrowed content\n+   |           help: consider borrowing here: `&a.a`\n LL |\n LL |         n => {\n-   |         - hint: to prevent move, use `ref n` or `ref mut n`\n+   |         - data moved here\n+   |\n+note: move occurs because `n` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+  --> $DIR/borrowck-move-error-with-note.rs:50:9\n+   |\n+LL |         n => {\n+   |         ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e4840fba67299999f288548d5e0188e974e7efe4", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0505]: cannot move out of `*a` because it is borrowed\n-  --> $DIR/borrowck-move-from-subpath-of-borrowed-path.rs:12:13\n-   |\n-LL |     let b = &a;\n-   |             -- borrow of `a` occurs here\n-LL | \n-LL |     let z = *a;\n-   |             ^^ move out of `*a` occurs here\n-LL |     b.use_ref();\n-   |     - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0505`."}, {"sha": "e4840fba67299999f288548d5e0188e974e7efe4", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,11 +1,13 @@\n error[E0505]: cannot move out of `*a` because it is borrowed\n-  --> $DIR/borrowck-move-from-subpath-of-borrowed-path.rs:12:9\n+  --> $DIR/borrowck-move-from-subpath-of-borrowed-path.rs:12:13\n    |\n LL |     let b = &a;\n-   |              - borrow of `a` occurs here\n+   |             -- borrow of `a` occurs here\n LL | \n LL |     let z = *a;\n-   |         ^ move out of `*a` occurs here\n+   |             ^^ move out of `*a` occurs here\n+LL |     b.use_ref();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "615e3fd180016e53d5f9e8754d4f176f81e22291", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,12 +0,0 @@\n-error[E0507]: cannot move out of dereference of raw pointer\n-  --> $DIR/borrowck-move-from-unsafe-ptr.rs:2:13\n-   |\n-LL |     let y = *x;\n-   |             ^^\n-   |             |\n-   |             cannot move out of dereference of raw pointer\n-   |             help: consider removing the `*`: `x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "615e3fd180016e53d5f9e8754d4f176f81e22291", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -5,7 +5,7 @@ LL |     let y = *x;\n    |             ^^\n    |             |\n    |             cannot move out of dereference of raw pointer\n-   |             help: consider using a reference instead: `&*x`\n+   |             help: consider removing the `*`: `x`\n \n error: aborting due to previous error\n "}, {"sha": "c18fce9f4fd5518facc8563990c5401e7a485af2", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,50 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:6:13\n-   |\n-LL | fn arg_item(&_x: &String) {}\n-   |             ^--\n-   |             ||\n-   |             |data moved here\n-   |             cannot move out of borrowed content\n-   |             help: consider removing the `&`: `_x`\n-   |\n-note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:6:14\n-   |\n-LL | fn arg_item(&_x: &String) {}\n-   |              ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:11:11\n-   |\n-LL |     with(|&_x| ())\n-   |           ^--\n-   |           ||\n-   |           |data moved here\n-   |           cannot move out of borrowed content\n-   |           help: consider removing the `&`: `_x`\n-   |\n-note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:11:12\n-   |\n-LL |     with(|&_x| ())\n-   |            ^^\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:17:15\n-   |\n-LL |     let &_x = &\"hi\".to_string();\n-   |         ---   ^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-   |         ||\n-   |         |data moved here\n-   |         help: consider removing the `&`: `_x`\n-   |\n-note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:17:10\n-   |\n-LL |     let &_x = &\"hi\".to_string();\n-   |          ^^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "019ed96661fc23a6d4f4001dba85a3a104961e38", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.ast.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,30 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:6:13\n-   |\n-LL | fn arg_item(&_x: &String) {}\n-   |             ^--\n-   |             ||\n-   |             |hint: to prevent move, use `ref _x` or `ref mut _x`\n-   |             cannot move out of borrowed content\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:11:11\n-   |\n-LL |     with(|&_x| ())\n-   |           ^--\n-   |           ||\n-   |           |hint: to prevent move, use `ref _x` or `ref mut _x`\n-   |           cannot move out of borrowed content\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:17:9\n-   |\n-LL |     let &_x = &\"hi\".to_string();\n-   |         ^--\n-   |         ||\n-   |         |hint: to prevent move, use `ref _x` or `ref mut _x`\n-   |         cannot move out of borrowed content\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "f4f402dd96ab636ec8c1755620b924c3b344e8f3", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,22 +1,16 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n fn with<F>(f: F) where F: FnOnce(&String) {}\n \n fn arg_item(&_x: &String) {}\n-    //[ast]~^ ERROR cannot move out of borrowed content [E0507]\n-    //[mir]~^^ ERROR [E0507]\n+    //~^ ERROR [E0507]\n \n fn arg_closure() {\n     with(|&_x| ())\n-    //[ast]~^ ERROR cannot move out of borrowed content [E0507]\n-    //[mir]~^^ ERROR [E0507]\n+    //~^ ERROR [E0507]\n }\n \n fn let_pat() {\n     let &_x = &\"hi\".to_string();\n-    //[ast]~^ ERROR cannot move out of borrowed content [E0507]\n-    //[mir]~^^ ERROR [E0507]\n+    //~^ ERROR [E0507]\n }\n \n pub fn main() {}"}, {"sha": "d38c05ca36ef864841c318ab5be8dc3d8b63db7a", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:6:13\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:3:13\n    |\n LL | fn arg_item(&_x: &String) {}\n    |             ^--\n@@ -9,13 +9,13 @@ LL | fn arg_item(&_x: &String) {}\n    |             help: consider removing the `&`: `_x`\n    |\n note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:6:14\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:3:14\n    |\n LL | fn arg_item(&_x: &String) {}\n    |              ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:11:11\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:7:11\n    |\n LL |     with(|&_x| ())\n    |           ^--\n@@ -25,13 +25,13 @@ LL |     with(|&_x| ())\n    |           help: consider removing the `&`: `_x`\n    |\n note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:11:12\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:7:12\n    |\n LL |     with(|&_x| ())\n    |            ^^\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:17:15\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:12:15\n    |\n LL |     let &_x = &\"hi\".to_string();\n    |         ---   ^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n@@ -40,7 +40,7 @@ LL |     let &_x = &\"hi\".to_string();\n    |         help: consider removing the `&`: `_x`\n    |\n note: move occurs because `_x` has type `std::string::String`, which does not implement the `Copy` trait\n-  --> $DIR/borrowck-move-in-irrefut-pat.rs:17:10\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:12:10\n    |\n LL |     let &_x = &\"hi\".to_string();\n    |          ^^", "previous_filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.mir.stderr"}, {"sha": "874c38cb789b3821466bab863e8d4b4543bebefd", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,18 +0,0 @@\n-error[E0382]: use of moved value: `t`\n-  --> $DIR/borrowck-move-moved-value-into-closure.rs:14:12\n-   |\n-LL |     let t: Box<_> = box 3;\n-   |         - move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-LL | \n-LL |     call_f(move|| { *t + 1 });\n-   |            ------    - variable moved due to use in closure\n-   |            |\n-   |            value moved into closure here\n-LL |     call_f(move|| { *t + 1 });\n-   |            ^^^^^^    - use occurs due to use in closure\n-   |            |\n-   |            value used here after move\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "48651eeae208e933e258ef5ad2a0f90d7ab90928", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.ast.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,13 +0,0 @@\n-error[E0382]: capture of moved value: `t`\n-  --> $DIR/borrowck-move-moved-value-into-closure.rs:14:22\n-   |\n-LL |     call_f(move|| { *t + 1 });\n-   |            ------ value moved (into closure) here\n-LL |     call_f(move|| { *t + 1 });\n-   |                      ^ value captured here after move\n-   |\n-   = note: move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "233d0a733e316c9564fdfff57383fa65364df1ad", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,6 +1,3 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(box_syntax)]\n \n fn call_f<F:FnOnce() -> isize>(f: F) -> isize {\n@@ -11,6 +8,5 @@ fn main() {\n     let t: Box<_> = box 3;\n \n     call_f(move|| { *t + 1 });\n-    call_f(move|| { *t + 1 }); //[ast]~ ERROR capture of moved value\n-    //[mir]~^ ERROR use of moved value\n+    call_f(move|| { *t + 1 }); //~ ERROR use of moved value\n }"}, {"sha": "557e27aae502eb6f5aa722e7caad8ddba244622b", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `t`\n-  --> $DIR/borrowck-move-moved-value-into-closure.rs:14:12\n+  --> $DIR/borrowck-move-moved-value-into-closure.rs:11:12\n    |\n LL |     let t: Box<_> = box 3;\n    |         - move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait", "previous_filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.mir.stderr"}, {"sha": "77f5b72e51c5dda8f90fad7d62537694f25052e5", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,14 +0,0 @@\n-error[E0505]: cannot move out of `t0` because it is borrowed\n-  --> $DIR/borrowck-move-mut-base-ptr.rs:10:14\n-   |\n-LL |     let p: &isize = &*t0; // Freezes `*t0`\n-   |                     ---- borrow of `*t0` occurs here\n-LL |     let t1 = t0;\n-   |              ^^ move out of `t0` occurs here\n-LL |     *t1 = 22;\n-LL |     p.use_ref();\n-   |     - borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0505`."}, {"sha": "77f5b72e51c5dda8f90fad7d62537694f25052e5", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,10 +1,13 @@\n error[E0505]: cannot move out of `t0` because it is borrowed\n-  --> $DIR/borrowck-move-mut-base-ptr.rs:10:9\n+  --> $DIR/borrowck-move-mut-base-ptr.rs:10:14\n    |\n LL |     let p: &isize = &*t0; // Freezes `*t0`\n-   |                      --- borrow of `*t0` occurs here\n+   |                     ---- borrow of `*t0` occurs here\n LL |     let t1 = t0;\n-   |         ^^ move out of `t0` occurs here\n+   |              ^^ move out of `t0` occurs here\n+LL |     *t1 = 22;\n+LL |     p.use_ref();\n+   |     - borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "88a1ab2f90651a3477d4d20344781cc5a01b7315", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.mir.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,23 +0,0 @@\n-error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:10:14\n-   |\n-LL |     let [_, _x] = a;\n-   |             -- value moved here\n-LL |     let [.., _y] = a;\n-   |              ^^ value used here after move\n-   |\n-   = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:17:10\n-   |\n-LL |     let [_x, _] = a;\n-   |          -- value moved here\n-LL |     let [_y..] = a;\n-   |          ^^ value used here after move\n-   |\n-   = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "856b03edd2d7279fe2bbfaeca4972a98d710ac95", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,21 +1,16 @@\n-// revisions: ast mir\n-//[mir]compile-flags: -Z borrowck=mir\n-\n #![feature(box_syntax)]\n #![feature(slice_patterns)]\n \n fn move_out_from_begin_and_end() {\n     let a = [box 1, box 2];\n     let [_, _x] = a;\n-    let [.., _y] = a; //[ast]~ ERROR [E0382]\n-                      //[mir]~^ ERROR [E0382]\n+    let [.., _y] = a; //~ ERROR [E0382]\n }\n \n fn move_out_by_const_index_and_subslice() {\n     let a = [box 1, box 2];\n     let [_x, _] = a;\n-    let [_y..] = a; //[ast]~ ERROR [E0382]\n-                    //[mir]~^ ERROR [E0382]\n+    let [_y..] = a; //~ ERROR [E0382]\n }\n \n fn main() {}"}, {"sha": "16722a456defa4d54ea5048f5f72620f701fc46d", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:10:14\n+  --> $DIR/borrowck-move-out-from-array.rs:7:14\n    |\n LL |     let [_, _x] = a;\n    |             -- value moved here\n@@ -9,7 +9,7 @@ LL |     let [.., _y] = a;\n    = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:17:10\n+  --> $DIR/borrowck-move-out-from-array.rs:13:10\n    |\n LL |     let [_x, _] = a;\n    |          -- value moved here", "previous_filename": "src/test/ui/borrowck/borrowck-move-out-from-array.ast.stderr"}, {"sha": "81afb104c9d4d2b7ffd955299581456d9d105ce4", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0507]: cannot move out of an `Rc`\n-  --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:7:14\n-   |\n-LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n-   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of an `Rc`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}, {"sha": "e55898aca5c06c491aca591c204d15e43c55e3a1", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.ast.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a850a426491e14186af2250549bf41256b5938d2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.stderr?ref=a850a426491e14186af2250549bf41256b5938d2", "patch": "@@ -1,9 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:7:14\n-   |\n-LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n-   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0507`."}]}