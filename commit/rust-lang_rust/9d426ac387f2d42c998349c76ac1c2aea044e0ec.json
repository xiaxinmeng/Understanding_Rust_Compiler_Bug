{"sha": "9d426ac387f2d42c998349c76ac1c2aea044e0ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNDI2YWMzODdmMmQ0MmM5OTgzNDljNzZhYzFjMmFlYTA0NGUwZWM=", "commit": {"author": {"name": "moxian", "email": "moxian@google.com", "date": "2018-05-18T12:33:23Z"}, "committer": {"name": "moxian", "email": "moxian@google.com", "date": "2018-06-28T21:57:03Z"}, "message": "Make msvc symbol extraction/printing functions generic.", "tree": {"sha": "94d2ff88d4b89aca811d2020a4bd9af933d94d37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94d2ff88d4b89aca811d2020a4bd9af933d94d37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d426ac387f2d42c998349c76ac1c2aea044e0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d426ac387f2d42c998349c76ac1c2aea044e0ec", "html_url": "https://github.com/rust-lang/rust/commit/9d426ac387f2d42c998349c76ac1c2aea044e0ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d426ac387f2d42c998349c76ac1c2aea044e0ec/comments", "author": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "moxian", "id": 7831163, "node_id": "MDQ6VXNlcjc4MzExNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7831163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moxian", "html_url": "https://github.com/moxian", "followers_url": "https://api.github.com/users/moxian/followers", "following_url": "https://api.github.com/users/moxian/following{/other_user}", "gists_url": "https://api.github.com/users/moxian/gists{/gist_id}", "starred_url": "https://api.github.com/users/moxian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moxian/subscriptions", "organizations_url": "https://api.github.com/users/moxian/orgs", "repos_url": "https://api.github.com/users/moxian/repos", "events_url": "https://api.github.com/users/moxian/events{/privacy}", "received_events_url": "https://api.github.com/users/moxian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0b15012a17594566311ea490eda243b6bd9d92b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b15012a17594566311ea490eda243b6bd9d92b", "html_url": "https://github.com/rust-lang/rust/commit/a0b15012a17594566311ea490eda243b6bd9d92b"}], "stats": {"total": 240, "additions": 137, "deletions": 103}, "files": [{"sha": "d8f0a4d820898e0adcb0ee371ccadfc3920beec2", "filename": "src/libstd/sys/windows/backtrace/printing/msvc.rs", "status": "modified", "additions": 137, "deletions": 103, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/9d426ac387f2d42c998349c76ac1c2aea044e0ec/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d426ac387f2d42c998349c76ac1c2aea044e0ec/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs?ref=9d426ac387f2d42c998349c76ac1c2aea044e0ec", "patch": "@@ -18,7 +18,6 @@ use sys::c;\n use sys::dynamic_lib::DynamicLibrary;\n use sys_common::backtrace::Frame;\n \n-\n // Structs holding printing functions and loaders for them\n // Two versions depending on whether dbghelp.dll has StackWalkEx or not\n // (the former being in newer Windows versions, the older being in Win7 and before)\n@@ -32,23 +31,29 @@ pub struct PrintingFns64 {\n }\n \n pub fn load_printing_fns_ex(dbghelp: &DynamicLibrary) -> io::Result<PrintingFnsEx> {\n-    Ok(PrintingFnsEx{\n-        resolve_symname: sym!(dbghelp, \"SymFromInlineContext\",\n-                              SymFromInlineContextFn)?,\n-        sym_get_line: sym!(dbghelp, \"SymGetLineFromInlineContext\",\n-                           SymGetLineFromInlineContextFn)?,\n+    Ok(PrintingFnsEx {\n+        resolve_symname: sym!(dbghelp, \"SymFromInlineContext\", SymFromInlineContextFn)?,\n+        sym_get_line: sym!(\n+            dbghelp,\n+            \"SymGetLineFromInlineContext\",\n+            SymGetLineFromInlineContextFn\n+        )?,\n     })\n }\n pub fn load_printing_fns_64(dbghelp: &DynamicLibrary) -> io::Result<PrintingFns64> {\n-    Ok(PrintingFns64{\n+    Ok(PrintingFns64 {\n         resolve_symname: sym!(dbghelp, \"SymFromAddr\", SymFromAddrFn)?,\n-        sym_get_line: sym!(dbghelp, \"SymGetLineFromAddr64\",\n-                     SymGetLineFromAddr64Fn)?,\n+        sym_get_line: sym!(dbghelp, \"SymGetLineFromAddr64\", SymGetLineFromAddr64Fn)?,\n     })\n }\n \n+type SymFromAddrFn =\n+    unsafe extern \"system\" fn(c::HANDLE, u64, *mut u64, *mut c::SYMBOL_INFO) -> c::BOOL;\n type SymFromInlineContextFn =\n     unsafe extern \"system\" fn(c::HANDLE, u64, c::ULONG, *mut u64, *mut c::SYMBOL_INFO) -> c::BOOL;\n+\n+type SymGetLineFromAddr64Fn =\n+    unsafe extern \"system\" fn(c::HANDLE, u64, *mut u32, *mut c::IMAGEHLP_LINE64) -> c::BOOL;\n type SymGetLineFromInlineContextFn = unsafe extern \"system\" fn(\n     c::HANDLE,\n     u64,\n@@ -58,73 +63,30 @@ type SymGetLineFromInlineContextFn = unsafe extern \"system\" fn(\n     *mut c::IMAGEHLP_LINE64,\n ) -> c::BOOL;\n \n-type SymFromAddrFn =\n-    unsafe extern \"system\" fn(c::HANDLE, u64, *mut u64, *mut c::SYMBOL_INFO) -> c::BOOL;\n-type SymGetLineFromAddr64Fn =\n-    unsafe extern \"system\" fn(c::HANDLE, u64, *mut u32, *mut c::IMAGEHLP_LINE64) -> c::BOOL;\n-\n /// Converts a pointer to symbol to its string value.\n pub fn resolve_symname<F>(frame: Frame, callback: F, context: &BacktraceContext) -> io::Result<()>\n where\n     F: FnOnce(Option<&str>) -> io::Result<()>,\n {\n     match context.StackWalkVariant {\n         StackWalkVariant::StackWalkEx(_, ref fns) => {\n-            resolve_symname_from_inline_context(fns.resolve_symname, frame, callback, context)\n-        },\n+            resolve_symname_internal(fns.resolve_symname, frame, callback, context)\n+        }\n         StackWalkVariant::StackWalk64(_, ref fns) => {\n-            resolve_symname_from_addr(fns.resolve_symname, frame, callback, context)\n+            resolve_symname_internal(fns.resolve_symname, frame, callback, context)\n         }\n     }\n }\n \n-fn resolve_symname_from_inline_context<F>(\n-    SymFromInlineContext: SymFromInlineContextFn,\n-    frame: Frame, callback: F, context: &BacktraceContext) -> io::Result<()>\n-where\n-    F: FnOnce(Option<&str>) -> io::Result<()>,\n-{\n-    unsafe {\n-            let mut info: c::SYMBOL_INFO = mem::zeroed();\n-            info.MaxNameLen = c::MAX_SYM_NAME as c_ulong;\n-            // the struct size in C.  the value is different to\n-            // `size_of::<SYMBOL_INFO>() - MAX_SYM_NAME + 1` (== 81)\n-            // due to struct alignment.\n-            info.SizeOfStruct = 88;\n-\n-            let mut displacement = 0u64;\n-            let ret = SymFromInlineContext(\n-                context.handle,\n-                frame.symbol_addr as u64,\n-                frame.inline_context,\n-                &mut displacement,\n-                &mut info,\n-            );\n-            let valid_range =\n-                if ret == c::TRUE && frame.symbol_addr as usize >= info.Address as usize {\n-                    if info.Size != 0 {\n-                        (frame.symbol_addr as usize) < info.Address as usize + info.Size as usize\n-                    } else {\n-                        true\n-                    }\n-                } else {\n-                    false\n-                };\n-            let symname = if valid_range {\n-                let ptr = info.Name.as_ptr() as *const c_char;\n-                CStr::from_ptr(ptr).to_str().ok()\n-            } else {\n-                None\n-            };\n-            callback(symname)\n-        }\n-}\n-\n-fn resolve_symname_from_addr<F>(\n-    SymFromAddr: SymFromAddrFn,\n-    frame: Frame, callback: F, context: &BacktraceContext) -> io::Result<()>\n+fn resolve_symname_internal<F, R>(\n+    symbol_resolver: R,\n+    frame: Frame,\n+    callback: F,\n+    context: &BacktraceContext,\n+) -> io::Result<()>\n where\n     F: FnOnce(Option<&str>) -> io::Result<()>,\n+    R: SymbolResolver,\n {\n     unsafe {\n         let mut info: c::SYMBOL_INFO = mem::zeroed();\n@@ -134,15 +96,22 @@ where\n         // due to struct alignment.\n         info.SizeOfStruct = 88;\n \n-        let mut displacement = 0u64;\n-        let ret = SymFromAddr(\n+        let ret = symbol_resolver.resolve_symbol(\n             context.handle,\n             frame.symbol_addr as u64,\n-            &mut displacement,\n+            frame.inline_context,\n             &mut info,\n         );\n-\n-        let symname = if ret == c::TRUE {\n+        let valid_range = if ret == c::TRUE && frame.symbol_addr as usize >= info.Address as usize {\n+            if info.Size != 0 {\n+                (frame.symbol_addr as usize) < info.Address as usize + info.Size as usize\n+            } else {\n+                true\n+            }\n+        } else {\n+            false\n+        };\n+        let symname = if valid_range {\n             let ptr = info.Name.as_ptr() as *const c_char;\n             CStr::from_ptr(ptr).to_str().ok()\n         } else {\n@@ -152,76 +121,141 @@ where\n     }\n }\n \n+trait SymbolResolver {\n+    fn resolve_symbol(\n+        &self,\n+        process: c::HANDLE,\n+        symbol_address: u64,\n+        inline_context: c::ULONG,\n+        info: *mut c::SYMBOL_INFO,\n+    ) -> c::BOOL;\n+}\n+\n+impl SymbolResolver for SymFromAddrFn {\n+    fn resolve_symbol(\n+        &self,\n+        process: c::HANDLE,\n+        symbol_address: u64,\n+        _inline_context: c::ULONG,\n+        info: *mut c::SYMBOL_INFO,\n+    ) -> c::BOOL {\n+        unsafe {\n+            let mut displacement = 0u64;\n+            self(process, symbol_address, &mut displacement, info)\n+        }\n+    }\n+}\n+\n+impl SymbolResolver for SymFromInlineContextFn {\n+    fn resolve_symbol(\n+        &self,\n+        process: c::HANDLE,\n+        symbol_address: u64,\n+        inline_context: c::ULONG,\n+        info: *mut c::SYMBOL_INFO,\n+    ) -> c::BOOL {\n+        unsafe {\n+            let mut displacement = 0u64;\n+            self(\n+                process,\n+                symbol_address,\n+                inline_context,\n+                &mut displacement,\n+                info,\n+            )\n+        }\n+    }\n+}\n+\n pub fn foreach_symbol_fileline<F>(\n     frame: Frame,\n-    f: F,\n+    callback: F,\n     context: &BacktraceContext,\n ) -> io::Result<bool>\n where\n     F: FnMut(&[u8], u32) -> io::Result<()>,\n {\n     match context.StackWalkVariant {\n-        StackWalkVariant::StackWalkEx(_, ref fns) =>\n-            foreach_symbol_fileline_ex(fns.sym_get_line, frame, f, context),\n-        StackWalkVariant::StackWalk64(_, ref fns) =>\n-            foreach_symbol_fileline_64(fns.sym_get_line, frame, f, context),\n+        StackWalkVariant::StackWalkEx(_, ref fns) => {\n+            foreach_symbol_fileline_iternal(fns.sym_get_line, frame, callback, context)\n+        }\n+        StackWalkVariant::StackWalk64(_, ref fns) => {\n+            foreach_symbol_fileline_iternal(fns.sym_get_line, frame, callback, context)\n+        }\n     }\n }\n \n-fn foreach_symbol_fileline_ex<F>(\n-    SymGetLineFromInlineContext: SymGetLineFromInlineContextFn,\n+fn foreach_symbol_fileline_iternal<F, G>(\n+    line_getter: G,\n     frame: Frame,\n-    mut f: F,\n+    mut callback: F,\n     context: &BacktraceContext,\n ) -> io::Result<bool>\n where\n     F: FnMut(&[u8], u32) -> io::Result<()>,\n+    G: LineGetter,\n {\n     unsafe {\n         let mut line: c::IMAGEHLP_LINE64 = mem::zeroed();\n         line.SizeOfStruct = ::mem::size_of::<c::IMAGEHLP_LINE64>() as u32;\n \n-        let mut displacement = 0u32;\n-        let ret = SymGetLineFromInlineContext(\n+        let ret = line_getter.get_line(\n             context.handle,\n             frame.exact_position as u64,\n             frame.inline_context,\n-            0,\n-            &mut displacement,\n             &mut line,\n         );\n         if ret == c::TRUE {\n             let name = CStr::from_ptr(line.Filename).to_bytes();\n-            f(name, line.LineNumber as u32)?;\n+            callback(name, line.LineNumber as u32)?;\n         }\n         Ok(false)\n     }\n }\n \n-fn foreach_symbol_fileline_64<F>(\n-    SymGetLineFromAddr64: SymGetLineFromAddr64Fn,\n-    frame: Frame,\n-    mut f: F,\n-    context: &BacktraceContext,\n-) -> io::Result<bool>\n-where\n-    F: FnMut(&[u8], u32) -> io::Result<()>,\n-{\n-    unsafe {\n-        let mut line: c::IMAGEHLP_LINE64 = mem::zeroed();\n-        line.SizeOfStruct = ::mem::size_of::<c::IMAGEHLP_LINE64>() as u32;\n+trait LineGetter {\n+    fn get_line(\n+        &self,\n+        process: c::HANDLE,\n+        frame_address: u64,\n+        inline_context: c::ULONG,\n+        line: *mut c::IMAGEHLP_LINE64,\n+    ) -> c::BOOL;\n+}\n \n-        let mut displacement = 0u32;\n-        let ret = SymGetLineFromAddr64(\n-            context.handle,\n-            frame.exact_position as u64,\n-            &mut displacement,\n-            &mut line,\n-        );\n-        if ret == c::TRUE {\n-            let name = CStr::from_ptr(line.Filename).to_bytes();\n-            f(name, line.LineNumber as u32)?;\n+impl LineGetter for SymGetLineFromAddr64Fn {\n+    fn get_line(\n+        &self,\n+        process: c::HANDLE,\n+        frame_address: u64,\n+        _inline_context: c::ULONG,\n+        line: *mut c::IMAGEHLP_LINE64,\n+    ) -> c::BOOL {\n+        unsafe {\n+            let mut displacement = 0u32;\n+            self(process, frame_address, &mut displacement, line)\n+        }\n+    }\n+}\n+\n+impl LineGetter for SymGetLineFromInlineContextFn {\n+    fn get_line(\n+        &self,\n+        process: c::HANDLE,\n+        frame_address: u64,\n+        inline_context: c::ULONG,\n+        line: *mut c::IMAGEHLP_LINE64,\n+    ) -> c::BOOL {\n+        unsafe {\n+            let mut displacement = 0u32;\n+            self(\n+                process,\n+                frame_address,\n+                inline_context,\n+                0,\n+                &mut displacement,\n+                line,\n+            )\n         }\n-        Ok(false)\n     }\n }"}]}