{"sha": "a439262859da79f0a791b4294fe14fc4ddd41d58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MzkyNjI4NTlkYTc5ZjBhNzkxYjQyOTRmZTE0ZmM0ZGRkNDFkNTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T08:03:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-10T08:03:34Z"}, "message": "Merge branch 'master' into ptr-offset", "tree": {"sha": "1f03f3df9d0b0cb84a7bbf46cd7863a0dade3588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f03f3df9d0b0cb84a7bbf46cd7863a0dade3588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a439262859da79f0a791b4294fe14fc4ddd41d58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbvbJWCRBK7hj4Ov3rIwAAdHIIAJhA1wxr0ouulYbHltvM8Iue\nsC4MaUnZoPqaL+HWYIiMWP6aptF5+o/J7R2MfoY4lYWL+78hB7Tr/bgdlHpr/s4A\npLT4Os8wX2o3Fl0fYqw4qfAVGRPpH5KwQFcLJcH9h4i7Un5/g50MWxrbhKiPsE3A\n9ZAV1Ng4GU9UyixCfbTNWtmOsDYeGakjqQb7N2csrnpCcsNqLIZ0Etba0Me/lAWR\nCOo9t3PgZM1YYErjnu+MTUfL8BSbA3O44ftWHiB3GfIO9p/yf1LtfeWOZ/wZyJ7/\n6vw7xBjXDtcRop/oqQVySIUK8vad5x7r3WFDjmkekYTmLArtpjdj+DmfACuoSK0=\n=mRCN\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f03f3df9d0b0cb84a7bbf46cd7863a0dade3588\nparent 0641d5b6d30a6f66bfd8ec1ff06bc7170569e6a1\nparent 5a496ddde2a88ed8a08e4186f433719d14ea14db\nauthor Ralf Jung <post@ralfj.de> 1539158614 +0200\ncommitter GitHub <noreply@github.com> 1539158614 +0200\n\nMerge branch 'master' into ptr-offset"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a439262859da79f0a791b4294fe14fc4ddd41d58", "html_url": "https://github.com/rust-lang/rust/commit/a439262859da79f0a791b4294fe14fc4ddd41d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a439262859da79f0a791b4294fe14fc4ddd41d58/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0641d5b6d30a6f66bfd8ec1ff06bc7170569e6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0641d5b6d30a6f66bfd8ec1ff06bc7170569e6a1", "html_url": "https://github.com/rust-lang/rust/commit/0641d5b6d30a6f66bfd8ec1ff06bc7170569e6a1"}, {"sha": "5a496ddde2a88ed8a08e4186f433719d14ea14db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a496ddde2a88ed8a08e4186f433719d14ea14db", "html_url": "https://github.com/rust-lang/rust/commit/5a496ddde2a88ed8a08e4186f433719d14ea14db"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "f7caa4d1c2c890211e430ae00672b972942fdbaf", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a439262859da79f0a791b4294fe14fc4ddd41d58/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a439262859da79f0a791b4294fe14fc4ddd41d58/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a439262859da79f0a791b4294fe14fc4ddd41d58", "patch": "@@ -32,7 +32,7 @@ env_logger = \"0.5\"\n log = \"0.4\"\n \n [build-dependencies]\n-vergen = \"2\"\n+vergen = \"3\"\n \n [features]\n cargo_miri = [\"cargo_metadata\"]"}, {"sha": "97bb9358832c43ae708196a937d797f987a9fcc7", "filename": "build.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a439262859da79f0a791b4294fe14fc4ddd41d58/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a439262859da79f0a791b4294fe14fc4ddd41d58/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=a439262859da79f0a791b4294fe14fc4ddd41d58", "patch": "@@ -8,17 +8,6 @@ fn main() {\n     // Don't rebuild miri even if nothing changed\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     // vergen\n-    vergen().expect(\"Unable to generate vergen constants!\");\n-}\n-\n-fn vergen() -> vergen::Result<()> {\n-    use vergen::{ConstantsFlags, Vergen};\n-\n-    let vergen = Vergen::new(ConstantsFlags::all())?;\n-\n-    for (k, v) in vergen.build_info() {\n-        println!(\"cargo:rustc-env={}={}\", k.name(), v);\n-    }\n-\n-    Ok(())\n+    vergen::generate_cargo_keys(vergen::ConstantsFlags::all())\n+        .expect(\"Unable to generate vergen keys!\");\n }"}, {"sha": "5fb054b088e466402cfed4db4038a019eed9a797", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a439262859da79f0a791b4294fe14fc4ddd41d58/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a439262859da79f0a791b4294fe14fc4ddd41d58/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a439262859da79f0a791b4294fe14fc4ddd41d58", "patch": "@@ -1 +1 @@\n-nightly-2018-10-01\n+nightly-2018-10-10"}, {"sha": "e4a389427c52aa249e26e4a34cf1eafae2faa548", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a439262859da79f0a791b4294fe14fc4ddd41d58/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a439262859da79f0a791b4294fe14fc4ddd41d58/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a439262859da79f0a791b4294fe14fc4ddd41d58", "patch": "@@ -233,6 +233,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n     const MUT_STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n+    const ENFORCE_VALIDITY: bool = false; // this is still WIP\n \n     /// Returns Ok() when the function was handled, fail otherwise\n     fn find_fn("}, {"sha": "4662a162679e33e76b4b9b85a209bf9f477075fe", "filename": "src/operator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a439262859da79f0a791b4294fe14fc4ddd41d58/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a439262859da79f0a791b4294fe14fc4ddd41d58/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=a439262859da79f0a791b4294fe14fc4ddd41d58", "patch": "@@ -142,8 +142,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     // allocations sit right next to each other.  The C/C++ standards are\n                     // somewhat fuzzy about this case, so I think for now this check is\n                     // \"good enough\".\n-                    self.memory.check_bounds(left, false)?;\n-                    self.memory.check_bounds(right, false)?;\n+                    self.memory.check_bounds_ptr(left, false)?;\n+                    self.memory.check_bounds_ptr(right, false)?;\n                     // Two live in-bounds pointers, we can compare across allocations\n                     left == right\n                 }\n@@ -153,7 +153,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n             (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n                 let bits = bits as u64;\n-                let (alloc_size, alloc_align) = self.memory.get_size_and_align(ptr.alloc_id)?;\n+                let (alloc_size, alloc_align) = self.memory.get_size_and_align(ptr.alloc_id);\n \n                 // Case I: Comparing with NULL\n                 if bits == 0 {\n@@ -288,9 +288,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds.\n             // (Of the same allocation, but that part is trivial with our representation.)\n-            self.memory.check_bounds(ptr, false)?;\n+            self.memory.check_bounds_ptr(ptr, false)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n-            self.memory.check_bounds(ptr, false)?;\n+            self.memory.check_bounds_ptr(ptr, false)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n             // An integer pointer. They can only be offset by 0, and we pretend there"}, {"sha": "e4ac95e676764bdcfc19b839acb1519f4a9d7044", "filename": "tests/compile-fail/cast_fn_ptr5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a439262859da79f0a791b4294fe14fc4ddd41d58/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a439262859da79f0a791b4294fe14fc4ddd41d58/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs?ref=a439262859da79f0a791b4294fe14fc4ddd41d58", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    fn f() -> u32 { 42 }\n+\n+    let g = unsafe {\n+        std::mem::transmute::<fn() -> u32, fn()>(f)\n+    };\n+\n+    g() //~ ERROR tried to call a function with return type u32 passing return place of type ()\n+}"}, {"sha": "68826a6ff03d5661b3bffc504f596a88ef0babf6", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a439262859da79f0a791b4294fe14fc4ddd41d58/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a439262859da79f0a791b4294fe14fc4ddd41d58/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=a439262859da79f0a791b4294fe14fc4ddd41d58", "patch": "@@ -1,8 +1,8 @@\n fn f() {}\n \n fn main() {\n-    let x: i32 = unsafe {\n-        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR constant evaluation error: tried to dereference a function pointer\n+    let x: u8 = unsafe {\n+        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR constant evaluation error: tried to dereference a function pointer\n     };\n     panic!(\"this should never print: {}\", x);\n }"}]}