{"sha": "417b10a0e3dd1ee8f677007763f830f34d320644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxN2IxMGEwZTNkZDFlZThmNjc3MDA3NzYzZjgzMGYzNGQzMjA2NDQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-10T23:21:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-10T23:21:24Z"}, "message": "Rollup merge of #55839 - dralley:docstring-spelling, r=TimNN\n\nFix docstring spelling mistakes", "tree": {"sha": "d7472a2583667a2c5ed1119ccd0865512e661b22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7472a2583667a2c5ed1119ccd0865512e661b22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/417b10a0e3dd1ee8f677007763f830f34d320644", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb52f0CRBK7hj4Ov3rIwAAdHIIAGl+1TfO6OxH6zsbKuqEUOdb\n01YncHJBvbj7BMLflgf992ZyBIln21NFjZFlpuViAaetHsgbyf7S1UWK+mxKIUDs\n/WUFylSiL/y11ob7tTdUkXJHuLeaU0Yni0cd5XaXUJPbxEjOV5TxRun7EJOWG4Ea\nA887p0XjX48I/8NVC/pH6SSsPOGLua6+sW9GzfJEmBCA6VWbFHCWeiDn9vyeMzd1\nCBCOdsDZxvPGF1xJpn/1AdFedvrZ12uBsF3WZMu87BpDjSqQNeyZa0YG2usr5ihW\nBOeciMT4wpLJ18uP5mrJ7L78L+aeugljVR5sL648vqRSu9toB5nEdDAn7GXmbzM=\n=cF/H\n-----END PGP SIGNATURE-----\n", "payload": "tree d7472a2583667a2c5ed1119ccd0865512e661b22\nparent 0f1c1eb48071d4ea02429ae5136444755b299fb7\nparent 38d2f9b470f26ab282322f35c1494cfd37ab9354\nauthor Pietro Albini <pietro@pietroalbini.org> 1541892084 +0100\ncommitter GitHub <noreply@github.com> 1541892084 +0100\n\nRollup merge of #55839 - dralley:docstring-spelling, r=TimNN\n\nFix docstring spelling mistakes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/417b10a0e3dd1ee8f677007763f830f34d320644", "html_url": "https://github.com/rust-lang/rust/commit/417b10a0e3dd1ee8f677007763f830f34d320644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/417b10a0e3dd1ee8f677007763f830f34d320644/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f1c1eb48071d4ea02429ae5136444755b299fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1c1eb48071d4ea02429ae5136444755b299fb7", "html_url": "https://github.com/rust-lang/rust/commit/0f1c1eb48071d4ea02429ae5136444755b299fb7"}, {"sha": "38d2f9b470f26ab282322f35c1494cfd37ab9354", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d2f9b470f26ab282322f35c1494cfd37ab9354", "html_url": "https://github.com/rust-lang/rust/commit/38d2f9b470f26ab282322f35c1494cfd37ab9354"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "c008b78e4509292810c8416d293b573bf15773fd", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/417b10a0e3dd1ee8f677007763f830f34d320644/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b10a0e3dd1ee8f677007763f830f34d320644/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=417b10a0e3dd1ee8f677007763f830f34d320644", "patch": "@@ -350,9 +350,8 @@ macro_rules! try {\n /// assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n /// ```\n ///\n-/// Note: This macro can be used in `no_std` setups as well\n-/// In a `no_std` setup you are responsible for the\n-/// implementation details of the components.\n+/// Note: This macro can be used in `no_std` setups as well.\n+/// In a `no_std` setup you are responsible for the implementation details of the components.\n ///\n /// ```no_run\n /// # extern crate core;\n@@ -440,7 +439,7 @@ macro_rules! writeln {\n ///\n /// If the determination that the code is unreachable proves incorrect, the\n /// program immediately terminates with a [`panic!`].  The function [`unreachable_unchecked`],\n-/// which belongs to the [`std::hint`] module, informs the compilier to\n+/// which belongs to the [`std::hint`] module, informs the compiler to\n /// optimize the code out of the release version entirely.\n ///\n /// [`panic!`]:  ../std/macro.panic.html"}, {"sha": "308dd9c79fa374391e1e222d379725c3c968f27d", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/417b10a0e3dd1ee8f677007763f830f34d320644/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b10a0e3dd1ee8f677007763f830f34d320644/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=417b10a0e3dd1ee8f677007763f830f34d320644", "patch": "@@ -3,7 +3,7 @@\n //! It is sometimes useful to have objects that are guaranteed to not move,\n //! in the sense that their placement in memory does not change, and can thus be relied upon.\n //!\n-//! A prime example of such a scenario would be building self-referencial structs,\n+//! A prime example of such a scenario would be building self-referential structs,\n //! since moving an object with pointers to itself will invalidate them,\n //! which could cause undefined behavior.\n //!\n@@ -39,7 +39,7 @@\n //! use std::marker::Pinned;\n //! use std::ptr::NonNull;\n //!\n-//! // This is a self referencial struct since the slice field points to the data field.\n+//! // This is a self-referential struct since the slice field points to the data field.\n //! // We cannot inform the compiler about that with a normal reference,\n //! // since this pattern cannot be described with the usual borrowing rules.\n //! // Instead we use a raw pointer, though one which is known to not be null,"}]}