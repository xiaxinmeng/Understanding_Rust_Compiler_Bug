{"sha": "b56cfcca10994ec2bf1878f222afdb375459f8d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmNmY2NhMTA5OTRlYzJiZjE4NzhmMjIyYWZkYjM3NTQ1OWY4ZDM=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-18T10:32:29Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-18T10:32:29Z"}, "message": "Make disabled diagnostics an argument of corresponding function", "tree": {"sha": "c23565cfeb56d8ffcac7f56ca35e22f10b19c210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c23565cfeb56d8ffcac7f56ca35e22f10b19c210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56cfcca10994ec2bf1878f222afdb375459f8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56cfcca10994ec2bf1878f222afdb375459f8d3", "html_url": "https://github.com/rust-lang/rust/commit/b56cfcca10994ec2bf1878f222afdb375459f8d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56cfcca10994ec2bf1878f222afdb375459f8d3/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26c911ec1e6c2ad1dcb7d155a6a1d528839ad1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26c911ec1e6c2ad1dcb7d155a6a1d528839ad1a", "html_url": "https://github.com/rust-lang/rust/commit/c26c911ec1e6c2ad1dcb7d155a6a1d528839ad1a"}], "stats": {"total": 82, "additions": 43, "deletions": 39}, "files": [{"sha": "606a6064b42f796f3a68632d09eeb5e1c34ec896", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b56cfcca10994ec2bf1878f222afdb375459f8d3", "patch": "@@ -4,7 +4,7 @@\n //! macro-expanded files, but we need to present them to the users in terms of\n //! original files. So we need to map the ranges.\n \n-use std::cell::RefCell;\n+use std::{cell::RefCell, collections::HashSet};\n \n use base_db::SourceDatabase;\n use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n@@ -16,7 +16,7 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::{AnalysisConfig, Diagnostic, FileId, Fix, SourceFileEdit};\n+use crate::{Diagnostic, FileId, Fix, SourceFileEdit};\n \n mod diagnostics_with_fix;\n use diagnostics_with_fix::DiagnosticWithFix;\n@@ -31,7 +31,7 @@ pub(crate) fn diagnostics(\n     db: &RootDatabase,\n     file_id: FileId,\n     enable_experimental: bool,\n-    analysis_config: &AnalysisConfig,\n+    disabled_diagnostics: Option<HashSet<String>>,\n ) -> Vec<Diagnostic> {\n     let _p = profile::span(\"diagnostics\");\n     let sema = Semantics::new(db);\n@@ -68,10 +68,9 @@ pub(crate) fn diagnostics(\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !diag.is_experimental() || enable_experimental);\n \n-    if !analysis_config.disabled_diagnostics.is_empty() {\n+    if let Some(disabled_diagnostics) = disabled_diagnostics {\n         // Do not collect disabled diagnostics.\n-        sink_builder =\n-            sink_builder.filter(|diag| !analysis_config.disabled_diagnostics.contains(diag.name()));\n+        sink_builder = sink_builder.filter(move |diag| !disabled_diagnostics.contains(diag.name()));\n     }\n \n     // Finalize the `DiagnosticSink` building process.\n@@ -192,10 +191,7 @@ mod tests {\n     use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n-    use crate::{\n-        mock_analysis::{analysis_and_position, single_file, MockAnalysis},\n-        AnalysisConfig,\n-    };\n+    use crate::mock_analysis::{analysis_and_position, single_file, MockAnalysis};\n     use expect::{expect, Expect};\n \n     /// Takes a multi-file input fixture with annotated cursor positions,\n@@ -207,7 +203,8 @@ mod tests {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n-        let diagnostic = analysis.diagnostics(file_position.file_id, true).unwrap().pop().unwrap();\n+        let diagnostic =\n+            analysis.diagnostics(file_position.file_id, true, None).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n@@ -233,7 +230,7 @@ mod tests {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n         let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n-        let diagnostic = analysis.diagnostics(current_file_id, true).unwrap().pop().unwrap();\n+        let diagnostic = analysis.diagnostics(current_file_id, true, None).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap();\n         let changed_file_id = edit.file_id;\n@@ -254,7 +251,7 @@ mod tests {\n         let analysis = mock.analysis();\n         let diagnostics = files\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true, None).unwrap())\n             .collect::<Vec<_>>();\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n@@ -267,13 +264,14 @@ mod tests {\n \n         let mock = MockAnalysis::with_files(ra_fixture);\n         let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n-        let mut analysis = mock.analysis();\n-        analysis.set_config(AnalysisConfig { disabled_diagnostics: disabled_diagnostics.clone() });\n+        let analysis = mock.analysis();\n \n         let diagnostics = files\n             .clone()\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n+            .flat_map(|file_id| {\n+                analysis.diagnostics(file_id, true, Some(disabled_diagnostics.clone())).unwrap()\n+            })\n             .collect::<Vec<_>>();\n \n         // First, we have to check that diagnostic is not emitted when it's added to the disabled diagnostics list.\n@@ -288,11 +286,9 @@ mod tests {\n         // This is required for tests to not become outdated if e.g. diagnostics name changes:\n         // without this additional run the test will pass simply because a diagnostic with an old name\n         // will no longer exist.\n-        analysis.set_config(AnalysisConfig { disabled_diagnostics: Default::default() });\n-\n         let diagnostics = files\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true, None).unwrap())\n             .collect::<Vec<_>>();\n \n         assert!(\n@@ -306,7 +302,7 @@ mod tests {\n \n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n-        let diagnostics = analysis.diagnostics(file_id, true).unwrap();\n+        let diagnostics = analysis.diagnostics(file_id, true, None).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n "}, {"sha": "a19a379c65db3a8bbcd1f9c752a953bb4818afaf", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b56cfcca10994ec2bf1878f222afdb375459f8d3", "patch": "@@ -151,16 +151,11 @@ impl<T> RangeInfo<T> {\n #[derive(Debug)]\n pub struct AnalysisHost {\n     db: RootDatabase,\n-    config: AnalysisConfig,\n }\n \n impl AnalysisHost {\n     pub fn new(lru_capacity: Option<usize>) -> Self {\n-        Self::with_config(lru_capacity, AnalysisConfig::default())\n-    }\n-\n-    pub fn with_config(lru_capacity: Option<usize>, config: AnalysisConfig) -> Self {\n-        AnalysisHost { db: RootDatabase::new(lru_capacity), config }\n+        AnalysisHost { db: RootDatabase::new(lru_capacity) }\n     }\n \n     pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n@@ -170,7 +165,7 @@ impl AnalysisHost {\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n     pub fn analysis(&self) -> Analysis {\n-        Analysis { db: self.db.snapshot(), config: self.config.clone() }\n+        Analysis { db: self.db.snapshot() }\n     }\n \n     /// Applies changes to the current state of the world. If there are\n@@ -214,7 +209,6 @@ impl Default for AnalysisHost {\n #[derive(Debug)]\n pub struct Analysis {\n     db: salsa::Snapshot<RootDatabase>,\n-    config: AnalysisConfig,\n }\n \n // As a general design guideline, `Analysis` API are intended to be independent\n@@ -509,8 +503,11 @@ impl Analysis {\n         &self,\n         file_id: FileId,\n         enable_experimental: bool,\n+        disabled_diagnostics: Option<HashSet<String>>,\n     ) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| diagnostics::diagnostics(db, file_id, enable_experimental, &self.config))\n+        self.with_db(|db| {\n+            diagnostics::diagnostics(db, file_id, enable_experimental, disabled_diagnostics)\n+        })\n     }\n \n     /// Returns the edit required to rename reference at the position to the new\n@@ -539,11 +536,6 @@ impl Analysis {\n         })\n     }\n \n-    /// Sets the provided config.\n-    pub fn set_config(&mut self, config: AnalysisConfig) {\n-        self.config = config;\n-    }\n-\n     /// Performs an operation on that may be Canceled.\n     fn with_db<F, T>(&self, f: F) -> Cancelable<T>\n     where"}, {"sha": "43f0196afc6ba76cc9ae66640c9c4525c7f00498", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=b56cfcca10994ec2bf1878f222afdb375459f8d3", "patch": "@@ -71,7 +71,7 @@ impl BenchCmd {\n         match &self.what {\n             BenchWhat::Highlight { .. } => {\n                 let res = do_work(&mut host, file_id, |analysis| {\n-                    analysis.diagnostics(file_id, true).unwrap();\n+                    analysis.diagnostics(file_id, true, None).unwrap();\n                     analysis.highlight_as_html(file_id, false).unwrap()\n                 });\n                 if verbosity.is_verbose() {"}, {"sha": "31eb7ff3f889b6415f7e7f5a3467ed634168d03e", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=b56cfcca10994ec2bf1878f222afdb375459f8d3", "patch": "@@ -47,7 +47,7 @@ pub fn diagnostics(\n                 String::from(\"unknown\")\n             };\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n-            for diagnostic in analysis.diagnostics(file_id, true).unwrap() {\n+            for diagnostic in analysis.diagnostics(file_id, true, None).unwrap() {\n                 if matches!(diagnostic.severity, Severity::Error) {\n                     found_error = true;\n                 }"}, {"sha": "4e3ab05b2d130b0d40985cffe68341638ae2c91a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b56cfcca10994ec2bf1878f222afdb375459f8d3", "patch": "@@ -363,6 +363,14 @@ impl Config {\n             self.client_caps.status_notification = get_bool(\"statusNotification\");\n         }\n     }\n+\n+    pub fn disabled_diagnostics(&self) -> Option<HashSet<String>> {\n+        if self.analysis.disabled_diagnostics.is_empty() {\n+            None\n+        } else {\n+            Some(self.analysis.disabled_diagnostics.clone())\n+        }\n+    }\n }\n \n #[derive(Deserialize)]"}, {"sha": "212f98a3005c09c3839d5f8d825b6c0ede84b7d3", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=b56cfcca10994ec2bf1878f222afdb375459f8d3", "patch": "@@ -108,7 +108,7 @@ impl GlobalState {\n             Handle { handle, receiver }\n         };\n \n-        let analysis_host = AnalysisHost::with_config(config.lru_capacity, config.analysis.clone());\n+        let analysis_host = AnalysisHost::new(config.lru_capacity);\n         let (flycheck_sender, flycheck_receiver) = unbounded();\n         GlobalState {\n             sender,"}, {"sha": "067f5ff6698e5e5be9d1c53c6757163acd41502a", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cfcca10994ec2bf1878f222afdb375459f8d3/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b56cfcca10994ec2bf1878f222afdb375459f8d3", "patch": "@@ -770,7 +770,11 @@ fn handle_fixes(\n         None => {}\n     };\n \n-    let diagnostics = snap.analysis.diagnostics(file_id, snap.config.experimental_diagnostics)?;\n+    let diagnostics = snap.analysis.diagnostics(\n+        file_id,\n+        snap.config.experimental_diagnostics,\n+        snap.config.disabled_diagnostics(),\n+    )?;\n \n     for fix in diagnostics\n         .into_iter()\n@@ -1044,7 +1048,11 @@ pub(crate) fn publish_diagnostics(\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n-        .diagnostics(file_id, snap.config.experimental_diagnostics)?\n+        .diagnostics(\n+            file_id,\n+            snap.config.experimental_diagnostics,\n+            snap.config.disabled_diagnostics(),\n+        )?\n         .into_iter()\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),"}]}