{"sha": "a28109a7679fbb254ca0962865a8b32b91ddbbd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyODEwOWE3Njc5ZmJiMjU0Y2EwOTYyODY1YThiMzJiOTFkZGJiZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T16:59:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-28T16:59:00Z"}, "message": "Auto merge of #87540 - JohnTitor:rollup-8xc6bl5, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #87315 (Add docs for raw-dylib to unstable book)\n - #87330 (Use hashbrown's `extend_reserve()` in `HashMap`)\n - #87443 (Don't treat git repos as non-existent when `ignore_git` is set)\n - #87453 (Suggest removing unnecessary &mut as help message)\n - #87500 (Document math behind MIN/MAX consts on integers)\n - #87501 (Remove min_type_alias_impl_trait in favor of type_alias_impl_trait)\n - #87507 (SGX mutex is *not* moveable)\n - #87513 (bootstrap.py: change `git log` option to indicate desired behavior)\n - #87523 (Stop creating a reference then immediately dereferencing it.)\n - #87524 (Fix ICE in `diagnostic_hir_wf_check`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "288a796a8f64971fc536e644ffa067e421373c8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288a796a8f64971fc536e644ffa067e421373c8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a28109a7679fbb254ca0962865a8b32b91ddbbd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a28109a7679fbb254ca0962865a8b32b91ddbbd9", "html_url": "https://github.com/rust-lang/rust/commit/a28109a7679fbb254ca0962865a8b32b91ddbbd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a28109a7679fbb254ca0962865a8b32b91ddbbd9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba3228b2a9875d268ff3990903d04e19f6cdb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba3228b2a9875d268ff3990903d04e19f6cdb0c", "html_url": "https://github.com/rust-lang/rust/commit/eba3228b2a9875d268ff3990903d04e19f6cdb0c"}, {"sha": "7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "url": "https://api.github.com/repos/rust-lang/rust/commits/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37", "html_url": "https://github.com/rust-lang/rust/commit/7985e4c7c3fb9c1a4f09f1c24949f21e65ceee37"}], "stats": {"total": 6322, "additions": 1125, "deletions": 5197}, "files": [{"sha": "89b59e5f00f1c4cbdaed0612dd64349b0daf413a", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -287,7 +287,7 @@ impl<'a> PostExpansionVisitor<'a> {\n                 if let ast::TyKind::ImplTrait(..) = ty.kind {\n                     gate_feature_post!(\n                         &self.vis,\n-                        min_type_alias_impl_trait,\n+                        type_alias_impl_trait,\n                         ty.span,\n                         \"`impl Trait` in type aliases is unstable\"\n                     );"}, {"sha": "18bc2f896f2f2b53f9d5b393979a85a8454d27db", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -21,7 +21,8 @@\n #![feature(iter_map_while)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n-#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(bootstrap, feature(min_type_alias_impl_trait))]\n+#![cfg_attr(not(bootstrap), feature(type_alias_impl_trait))]\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(once_cell)]"}, {"sha": "bf99d2988178d0d61ae9ca6a07081b2d3e4058a3", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -486,7 +486,7 @@ declare_features! (\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n \n     /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n-    (incomplete, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n+    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n@@ -619,9 +619,6 @@ declare_features! (\n     /// Allows macro attributes to observe output of `#[derive]`.\n     (active, macro_attributes_in_derive_output, \"1.51.0\", Some(81119), None),\n \n-    /// Allows the use of type alias impl trait in function return positions\n-    (active, min_type_alias_impl_trait, \"1.52.0\", Some(63063), None),\n-\n     /// Allows associated types in inherent impls.\n     (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n "}, {"sha": "0aa7e82c204927fa9cabd2aeb1bdef1ff58ce7ca", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -111,7 +111,7 @@ declare_features! (\n      Some(\"subsumed by `.await` syntax\")),\n     /// Allows defining `existential type`s.\n     (removed, existential_type, \"1.38.0\", Some(63063), None,\n-     Some(\"removed in favor of `#![feature(min_type_alias_impl_trait)]`\")),\n+     Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n     /// Allows using the macros:\n     /// + `__diagnostic_used`\n     /// + `__register_diagnostic`\n@@ -152,6 +152,10 @@ declare_features! (\n     (removed, impl_trait_in_bindings, \"1.55.0\", Some(63065), None,\n      Some(\"the implementation was not maintainable, the feature may get reintroduced once the current refactorings are done\")),\n \n+    /// Allows the use of type alias impl trait in function return positions\n+    (removed, min_type_alias_impl_trait, \"1.55.0\", Some(63063), None,\n+     Some(\"removed in favor of full type_alias_impl_trait\")),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "f08208a1214b843a60a16719bece72ed1c3176a6", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -242,7 +242,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     .unwrap_or(false) =>\n             {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_label(span, \"try removing `&mut` here\");\n+                err.span_suggestion(\n+                    span,\n+                    \"try removing `&mut` here\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n \n             // We want to suggest users use `let mut` for local (user\n@@ -324,7 +329,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 } =>\n             {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_label(span, \"try removing `&mut` here\");\n+                err.span_suggestion(\n+                    span,\n+                    \"try removing `&mut` here\",\n+                    String::new(),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n \n             PlaceRef { local, projection: [ProjectionElem::Deref] }"}, {"sha": "c134af44992de8e96a6655e633f26c9168f77235", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -240,8 +240,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n-                // If this obligation was generated as a result of well-formed checking, see if we\n-                // can get a better error message by performing HIR-based well formed checking.\n+                // If this obligation was generated as a result of well-formedness checking, see if we\n+                // can get a better error message by performing HIR-based well-formedness checking.\n                 if let ObligationCauseCode::WellFormed(Some(wf_loc)) =\n                     root_obligation.cause.code.peel_derives()\n                 {"}, {"sha": "b7ede0e4bf25175ea966b2816a29da71401bd5b8", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -38,20 +38,20 @@ fn diagnostic_hir_wf_check<'tcx>(\n     // given the type `Option<MyStruct<u8>>`, we will check\n     // `Option<MyStruct<u8>>`, `MyStruct<u8>`, and `u8`.\n     // For each type, we perform a well-formed check, and see if we get\n-    // an erorr that matches our expected predicate. We keep save\n+    // an error that matches our expected predicate. We save\n     // the `ObligationCause` corresponding to the *innermost* type,\n     // which is the most specific type that we can point to.\n     // In general, the different components of an `hir::Ty` may have\n-    // completely differentr spans due to macro invocations. Pointing\n+    // completely different spans due to macro invocations. Pointing\n     // to the most accurate part of the type can be the difference\n     // between a useless span (e.g. the macro invocation site)\n-    // and a useful span (e.g. a user-provided type passed in to the macro).\n+    // and a useful span (e.g. a user-provided type passed into the macro).\n     //\n     // This approach is quite inefficient - we redo a lot of work done\n     // by the normal WF checker. However, this code is run at most once\n     // per reported error - it will have no impact when compilation succeeds,\n-    // and should only have an impact if a very large number of errors are\n-    // displaydd to the user.\n+    // and should only have an impact if a very large number of errors is\n+    // displayed to the user.\n     struct HirWfCheck<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         predicate: ty::Predicate<'tcx>,\n@@ -126,10 +126,12 @@ fn diagnostic_hir_wf_check<'tcx>(\n         WellFormedLoc::Ty(_) => match hir.get(hir_id) {\n             hir::Node::ImplItem(item) => match item.kind {\n                 hir::ImplItemKind::TyAlias(ty) => Some(ty),\n+                hir::ImplItemKind::Const(ty, _) => Some(ty),\n                 ref item => bug!(\"Unexpected ImplItem {:?}\", item),\n             },\n             hir::Node::TraitItem(item) => match item.kind {\n                 hir::TraitItemKind::Type(_, ty) => ty,\n+                hir::TraitItemKind::Const(ty, _) => Some(ty),\n                 ref item => bug!(\"Unexpected TraitItem {:?}\", item),\n             },\n             hir::Node::Item(item) => match item.kind {"}, {"sha": "d2ececaa9759fb8fa7c5c1270a3f8f6c734b8808", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -142,7 +142,8 @@\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n #![feature(try_trait_v2)]\n-#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(bootstrap, feature(min_type_alias_impl_trait))]\n+#![cfg_attr(not(bootstrap), feature(type_alias_impl_trait))]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]"}, {"sha": "67bad772549770c5fcb5ef144b72ee23d7837f05", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,10 @@\n macro_rules! int_impl {\n-    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr,\n+    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $BITS_MINUS_ONE:expr, $Min:expr, $Max:expr,\n      $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n      $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n      $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n-        /// The smallest value that can be represented by this integer type.\n+        /// The smallest value that can be represented by this integer type,\n+        #[doc = concat!(\"-2<sup>\", $BITS_MINUS_ONE, \"</sup>.\")]\n         ///\n         /// # Examples\n         ///\n@@ -15,7 +16,8 @@ macro_rules! int_impl {\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n         pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n \n-        /// The largest value that can be represented by this integer type.\n+        /// The largest value that can be represented by this integer type,\n+        #[doc = concat!(\"2<sup>\", $BITS_MINUS_ONE, \"</sup> - 1.\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "6c43d6d62128e71be7944f8ce9e35850920b6038", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -91,34 +91,34 @@ depending on the target pointer size.\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n+    int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n     \"[0x12]\", \"[0x12]\", \"\", \"\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    int_impl! { i16, i16, u16, 16, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n+    int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n     \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n+    int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n-    int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, 12,\n+    int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n     \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n-    int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n+    int_impl! { i128, i128, u128, 128, 127, -170141183460469231731687303715884105728,\n     170141183460469231731687303715884105727, 16,\n     \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n     \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n@@ -131,15 +131,15 @@ impl i128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, usize, 16, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n+    int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, usize, 32, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n+    int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n@@ -148,7 +148,7 @@ impl isize {\n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i64, usize, 64, -9223372036854775808, 9223372036854775807,\n+    int_impl! { isize, i64, usize, 64, 63, -9223372036854775808, 9223372036854775807,\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n      \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n      \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\","}, {"sha": "bed7cd7259993c745b18829cea89a27060b19d65", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -15,7 +15,8 @@ macro_rules! uint_impl {\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n         pub const MIN: Self = 0;\n \n-        /// The largest value that can be represented by this integer type.\n+        /// The largest value that can be represented by this integer type,\n+        #[doc = concat!(\"2<sup>\", $BITS, \"</sup> - 1.\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "347a346359f8cf5e9f25d9b58ab68b8bb554ce05", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -812,12 +812,12 @@ pub trait RangeBounds<T: ?Sized> {\n         U: ?Sized + PartialOrd<T>,\n     {\n         (match self.start_bound() {\n-            Included(ref start) => *start <= item,\n-            Excluded(ref start) => *start < item,\n+            Included(start) => start <= item,\n+            Excluded(start) => start < item,\n             Unbounded => true,\n         }) && (match self.end_bound() {\n-            Included(ref end) => item <= *end,\n-            Excluded(ref end) => item < *end,\n+            Included(end) => item <= end,\n+            Excluded(end) => item < end,\n             Unbounded => true,\n         })\n     }"}, {"sha": "933d686521e536c6b331b5ebe3385dbfe3473e96", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2821,15 +2821,7 @@ where\n \n     #[inline]\n     fn extend_reserve(&mut self, additional: usize) {\n-        // self.base.extend_reserve(additional);\n-        // FIXME: hashbrown should implement this method.\n-        // But until then, use the same reservation logic:\n-\n-        // Reserve the entire hint lower bound if the map is empty.\n-        // Otherwise reserve half the hint (rounded up), so the map\n-        // will only resize twice in the worst case.\n-        let reserve = if self.is_empty() { additional } else { (additional + 1) / 2 };\n-        self.base.reserve(reserve);\n+        self.base.extend_reserve(additional);\n     }\n }\n "}, {"sha": "0b2d1f4487f618dac25f4453f2e29d8caabaf014", "filename": "library/std/src/sys/sgx/mutex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -8,7 +8,8 @@ pub struct Mutex {\n     inner: SpinMutex<WaitVariable<bool>>,\n }\n \n-pub type MovableMutex = Mutex;\n+// not movable: see UnsafeList implementation\n+pub type MovableMutex = Box<Mutex>;\n \n // Implementation according to \u201cOperating Systems: Three Easy Pieces\u201d, chapter 28\n impl Mutex {"}, {"sha": "c736cab576e4dd53b30f0f32901db78e9ed1c599", "filename": "library/std/src/sys/sgx/waitqueue/unsafe_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Funsafe_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Funsafe_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Funsafe_list.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -23,6 +23,7 @@ impl<T> UnsafeListEntry<T> {\n     }\n }\n \n+// WARNING: self-referential struct!\n pub struct UnsafeList<T> {\n     head_tail: NonNull<UnsafeListEntry<T>>,\n     head_tail_entry: Option<UnsafeListEntry<T>>,"}, {"sha": "f2e38a7eab6bc8c92f7de53d4f935bb74c61d035", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -473,7 +473,7 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n             ]).decode(sys.getdefaultencoding()).strip()\n             llvm_sha = subprocess.check_output([\n                 \"git\", \"log\", \"--author=bors\", \"--format=%H\", \"-n1\",\n-                \"-m\", \"--first-parent\",\n+                \"--no-patch\", \"--first-parent\",\n                 \"--\",\n                 \"{}/src/llvm-project\".format(top_level),\n                 \"{}/src/bootstrap/download-ci-llvm-stamp\".format(top_level),"}, {"sha": "6478578c3c402cd3ab6625d8cb60729aa50b7c4a", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -12,11 +12,16 @@ use build_helper::output;\n \n use crate::Build;\n \n-pub struct GitInfo {\n-    inner: Option<Info>,\n+pub enum GitInfo {\n+    /// This is not a git repository.\n+    Absent,\n+    /// This is a git repository.\n+    /// If the info should be used (`ignore_git` is false), this will be\n+    /// `Some`, otherwise it will be `None`.\n+    Present(Option<Info>),\n }\n \n-struct Info {\n+pub struct Info {\n     commit_date: String,\n     sha: String,\n     short_sha: String,\n@@ -25,14 +30,20 @@ struct Info {\n impl GitInfo {\n     pub fn new(ignore_git: bool, dir: &Path) -> GitInfo {\n         // See if this even begins to look like a git dir\n-        if ignore_git || !dir.join(\".git\").exists() {\n-            return GitInfo { inner: None };\n+        if !dir.join(\".git\").exists() {\n+            return GitInfo::Absent;\n         }\n \n         // Make sure git commands work\n         match Command::new(\"git\").arg(\"rev-parse\").current_dir(dir).output() {\n             Ok(ref out) if out.status.success() => {}\n-            _ => return GitInfo { inner: None },\n+            _ => return GitInfo::Absent,\n+        }\n+\n+        // If we're ignoring the git info, we don't actually need to collect it, just make sure this\n+        // was a git repo in the first place.\n+        if ignore_git {\n+            return GitInfo::Present(None);\n         }\n \n         // Ok, let's scrape some info\n@@ -48,30 +59,35 @@ impl GitInfo {\n         let short_ver_hash = output(\n             Command::new(\"git\").current_dir(dir).arg(\"rev-parse\").arg(\"--short=9\").arg(\"HEAD\"),\n         );\n-        GitInfo {\n-            inner: Some(Info {\n-                commit_date: ver_date.trim().to_string(),\n-                sha: ver_hash.trim().to_string(),\n-                short_sha: short_ver_hash.trim().to_string(),\n-            }),\n+        GitInfo::Present(Some(Info {\n+            commit_date: ver_date.trim().to_string(),\n+            sha: ver_hash.trim().to_string(),\n+            short_sha: short_ver_hash.trim().to_string(),\n+        }))\n+    }\n+\n+    fn info(&self) -> Option<&Info> {\n+        match self {\n+            GitInfo::Present(info) => info.as_ref(),\n+            GitInfo::Absent => None,\n         }\n     }\n \n     pub fn sha(&self) -> Option<&str> {\n-        self.inner.as_ref().map(|s| &s.sha[..])\n+        self.info().map(|s| &s.sha[..])\n     }\n \n     pub fn sha_short(&self) -> Option<&str> {\n-        self.inner.as_ref().map(|s| &s.short_sha[..])\n+        self.info().map(|s| &s.short_sha[..])\n     }\n \n     pub fn commit_date(&self) -> Option<&str> {\n-        self.inner.as_ref().map(|s| &s.commit_date[..])\n+        self.info().map(|s| &s.commit_date[..])\n     }\n \n     pub fn version(&self, build: &Build, num: &str) -> String {\n         let mut version = build.release(num);\n-        if let Some(ref inner) = self.inner {\n+        if let Some(ref inner) = self.info() {\n             version.push_str(\" (\");\n             version.push_str(&inner.short_sha);\n             version.push(' ');\n@@ -82,6 +98,9 @@ impl GitInfo {\n     }\n \n     pub fn is_git(&self) -> bool {\n-        self.inner.is_some()\n+        match self {\n+            GitInfo::Absent => false,\n+            GitInfo::Present(_) => true,\n+        }\n     }\n }"}, {"sha": "3d56650f7752ad70f8d851af2739ecca63931f6c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1145,7 +1145,7 @@ impl Build {\n         match &self.config.channel[..] {\n             \"stable\" => num.to_string(),\n             \"beta\" => {\n-                if self.rust_info.is_git() {\n+                if self.rust_info.is_git() && !self.config.ignore_git {\n                     format!(\"{}-beta.{}\", num, self.beta_prerelease_version())\n                 } else {\n                     format!(\"{}-beta\", num)"}, {"sha": "23fc5b3052d8da9899736362841269a1e12b9ef5", "filename": "src/doc/unstable-book/src/language-features/raw-dylib.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fraw-dylib.md", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fraw-dylib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fraw-dylib.md?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -0,0 +1,34 @@\n+# `raw_dylib`\n+\n+The tracking issue for this feature is: [#58713]\n+\n+[#58713]: https://github.com/rust-lang/rust/issues/58713\n+\n+------------------------\n+\n+The `raw_dylib` feature allows you to link against the implementations of functions in an `extern`\n+block without, on Windows, linking against an import library.\n+\n+```rust,ignore (partial-example)\n+#![feature(raw_dylib)]\n+\n+#[link(name=\"library\", kind=\"raw-dylib\")]\n+extern {\n+    fn extern_function(x: i32);\n+}\n+\n+fn main() {\n+    unsafe {\n+        extern_function(14);\n+    }\n+}\n+```\n+\n+## Limitations\n+\n+Currently, this feature is only supported on `-windows-msvc` targets.  Non-Windows platforms don't have import\n+libraries, and an incompatibility between LLVM and the BFD linker means that it is not currently supported on\n+`-windows-gnu` targets.\n+\n+On the `i686-pc-windows-msvc` target, this feature supports only the `cdecl`, `stdcall`, `system`, and `fastcall`\n+calling conventions."}, {"sha": "daa08ec25823bf9fc0db6bb4798d7ff62e79be07", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,7 +2,7 @@\n // check-pass\n \n #![feature(trait_alias)]\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n /// look at this trait right here\n pub trait ThisTrait {"}, {"sha": "31dd786cbbf8974bdea235940088b5a8ede648ad", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias-closure.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n type ImplTrait = impl ValidTrait;"}, {"sha": "c18a024af4bbc88eca84a20d221af858989b75a5", "filename": "src/test/rustdoc-ui/error-in-impl-trait/trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait%2Ftrait-alias.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait ValidTrait {}\n type ImplTrait = impl ValidTrait;"}, {"sha": "e05a3bc6d91807673ae47ea45433ed8f8d37d90e", "filename": "src/test/rustdoc/auxiliary/issue-73061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-73061.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,6 +1,6 @@\n //edition:2018\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Foo {\n     type X: std::future::Future<Output = ()>;"}, {"sha": "54c3f856ddb3c0ad8a2f901c2e8a3e3ae9a5d0c7", "filename": "src/test/rustdoc/impl-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n trait MyTrait {}\n impl MyTrait for i32 {}"}, {"sha": "1ccf5ac46119adcf609cb37ab7809e468ac787ba", "filename": "src/test/rustdoc/return-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freturn-impl-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Backend {}\n "}, {"sha": "bffa5150fe1ce80bde0a549cdf3fe230c03319f4", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 492, "changes": 492, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,492 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:10:36\n-   |\n-LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:12:36\n-   |\n-LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:14:39\n-   |\n-LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:16:45\n-   |\n-LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:18:45\n-   |\n-LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:20:48\n-   |\n-LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:34\n-   |\n-LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:25:34\n-   |\n-LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:27:37\n-   |\n-LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:29:43\n-   |\n-LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:31:43\n-   |\n-LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:33:46\n-   |\n-LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:36:35\n-   |\n-LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:38:35\n-   |\n-LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:40:38\n-   |\n-LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:42:44\n-   |\n-LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:44:44\n-   |\n-LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:46:47\n-   |\n-LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:49:32\n-   |\n-LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:32\n-   |\n-LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n-   |                    ----------  ^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:53:35\n-   |\n-LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n-   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                    |\n-   |                    `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:55:43\n-   |\n-LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:43\n-   |\n-LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:59:46\n-   |\n-LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:65:40\n-   |\n-LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:67:40\n-   |\n-LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:69:43\n-   |\n-LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:35\n-   |\n-LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:74:35\n-   |\n-LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n-   |                       ----------  ^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:76:38\n-   |\n-LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n-   |                       -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                       |\n-   |                       `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:78:44\n-   |\n-LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:80:44\n-   |\n-LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:82:47\n-   |\n-LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:36\n-   |\n-LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:87:36\n-   |\n-LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:89:39\n-   |\n-LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:40\n-   |\n-LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:40\n-   |\n-LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:43\n-   |\n-LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:36\n-   |\n-LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:100:36\n-   |\n-LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n-   |                        ----------  ^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:102:39\n-   |\n-LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n-   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                        |\n-   |                        `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:104:34\n-   |\n-LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:34\n-   |\n-LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n-   |                      ----------  ^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:37\n-   |\n-LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n-   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                      |\n-   |                      `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:45\n-   |\n-LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:45\n-   |\n-LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:48\n-   |\n-LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n-   |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n-   |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n-   |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n-   |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n-   |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n-   |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:132:40\n-   |\n-LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-   |                            ----------  ^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:134:44\n-   |\n-LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:136:43\n-   |\n-LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                            |\n-   |                            `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:43\n-   |\n-LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:43\n-   |\n-LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:46\n-   |\n-LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n-\n-error: aborting due to 60 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0719`."}, {"sha": "e1dc6f8f4b63dbefcee231e0b5b29ab824b765e0", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 190, "deletions": 73, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,67 +1,145 @@\n #![feature(associated_type_bounds)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![feature(untagged_unions)]\n \n use std::iter;\n \n-struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+struct SW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+struct SW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+struct SW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n \n-enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    V(T),\n+}\n+enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    V(T),\n+}\n+enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    V(T),\n+}\n+enum EW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    V(T),\n+}\n+enum EW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    V(T),\n+}\n+enum EW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    V(T),\n+}\n \n-union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+union UI1<T: Iterator<Item: Copy, Item: Send>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    f: T,\n+}\n+union UW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+union UW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n+union UW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+    f: T,\n+}\n \n fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+fn FW1<T>()\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+fn FW2<T>()\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+fn FW3<T>()\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n \n-fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n+fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> {\n+    iter::empty()\n+}\n+fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> {\n+    iter::empty()\n+}\n+fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> {\n+    iter::empty()\n+}\n fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n@@ -75,12 +153,21 @@ type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n+type TAW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n+= T;\n+type TAW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n+= T;\n+type TAW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+= T;\n \n type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n@@ -107,27 +194,57 @@ trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-//~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n-trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-//~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+trait TRW1<T>\n+where\n+    T: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRW2<T>\n+where\n+    T: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRW3<T>\n+where\n+    T: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRSW1\n+where\n+    Self: Iterator<Item: Copy, Item: Send>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    //~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRSW2\n+where\n+    Self: Iterator<Item: Copy, Item: Copy>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    //~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRSW3\n+where\n+    Self: Iterator<Item: 'static, Item: 'static>,\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+    //~| ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+{\n+}\n+trait TRA1 {\n+    type A: Iterator<Item: Copy, Item: Send>;\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+}\n+trait TRA2 {\n+    type A: Iterator<Item: Copy, Item: Copy>;\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+}\n+trait TRA3 {\n+    type A: Iterator<Item: 'static, Item: 'static>;\n+    //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]\n+}\n \n type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n //~^ ERROR the value of the associated type `Item` (from trait `Iterator`) is already specified [E0719]"}, {"sha": "e4f4836f71ab21827cd5d434f97b1e390dfee745", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "renamed", "additions": 177, "deletions": 177, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,482 +1,482 @@\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:10:36\n+  --> $DIR/duplicate.rs:7:36\n    |\n-LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:12:36\n+  --> $DIR/duplicate.rs:11:36\n    |\n-LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:14:39\n+  --> $DIR/duplicate.rs:15:39\n    |\n-LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:16:45\n+  --> $DIR/duplicate.rs:21:29\n    |\n-LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:18:45\n+  --> $DIR/duplicate.rs:28:29\n    |\n-LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:20:48\n+  --> $DIR/duplicate.rs:35:32\n    |\n-LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:23:34\n+  --> $DIR/duplicate.rs:41:34\n    |\n-LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n+LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:25:34\n+  --> $DIR/duplicate.rs:45:34\n    |\n-LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n+LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:27:37\n+  --> $DIR/duplicate.rs:49:37\n    |\n-LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n+LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:29:43\n+  --> $DIR/duplicate.rs:55:29\n    |\n-LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:31:43\n+  --> $DIR/duplicate.rs:62:29\n    |\n-LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:33:46\n+  --> $DIR/duplicate.rs:69:32\n    |\n-LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:36:35\n+  --> $DIR/duplicate.rs:75:35\n    |\n-LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n+LL | union UI1<T: Iterator<Item: Copy, Item: Send>> {\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:38:35\n+  --> $DIR/duplicate.rs:79:35\n    |\n-LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n+LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> {\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:40:38\n+  --> $DIR/duplicate.rs:83:38\n    |\n-LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n+LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> {\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:42:44\n+  --> $DIR/duplicate.rs:89:29\n    |\n-LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:44:44\n+  --> $DIR/duplicate.rs:96:29\n    |\n-LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:46:47\n+  --> $DIR/duplicate.rs:103:32\n    |\n-LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:49:32\n+  --> $DIR/duplicate.rs:109:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:32\n+  --> $DIR/duplicate.rs:111:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:53:35\n+  --> $DIR/duplicate.rs:113:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:55:43\n+  --> $DIR/duplicate.rs:117:29\n    |\n-LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:43\n+  --> $DIR/duplicate.rs:123:29\n    |\n-LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:59:46\n+  --> $DIR/duplicate.rs:129:32\n    |\n-LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:65:40\n+  --> $DIR/duplicate.rs:143:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:67:40\n+  --> $DIR/duplicate.rs:145:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:69:43\n+  --> $DIR/duplicate.rs:147:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:35\n+  --> $DIR/duplicate.rs:150:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:74:35\n+  --> $DIR/duplicate.rs:152:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:76:38\n+  --> $DIR/duplicate.rs:154:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:78:44\n+  --> $DIR/duplicate.rs:158:29\n    |\n-LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:80:44\n+  --> $DIR/duplicate.rs:163:29\n    |\n-LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n-   |                                ----------  ^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:82:47\n+  --> $DIR/duplicate.rs:168:32\n    |\n-LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n-   |                                -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                |\n-   |                                `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:36\n+  --> $DIR/duplicate.rs:172:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:87:36\n+  --> $DIR/duplicate.rs:174:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:89:39\n+  --> $DIR/duplicate.rs:176:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:91:40\n+  --> $DIR/duplicate.rs:178:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:93:40\n+  --> $DIR/duplicate.rs:180:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:95:43\n+  --> $DIR/duplicate.rs:182:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:98:36\n+  --> $DIR/duplicate.rs:185:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:100:36\n+  --> $DIR/duplicate.rs:187:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:102:39\n+  --> $DIR/duplicate.rs:189:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:104:34\n+  --> $DIR/duplicate.rs:191:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:106:34\n+  --> $DIR/duplicate.rs:193:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:108:37\n+  --> $DIR/duplicate.rs:195:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:45\n+  --> $DIR/duplicate.rs:199:29\n    |\n-LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Send>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:45\n+  --> $DIR/duplicate.rs:205:29\n    |\n-LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-   |                                 ----------  ^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: Copy, Item: Copy>,\n+   |                 ----------  ^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:48\n+  --> $DIR/duplicate.rs:211:32\n    |\n-LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-   |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                 |\n-   |                                 `Item` bound here first\n+LL |     T: Iterator<Item: 'static, Item: 'static>,\n+   |                 -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                 |\n+   |                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n+  --> $DIR/duplicate.rs:217:32\n    |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n+  --> $DIR/duplicate.rs:217:32\n    |\n-LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Send>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n+  --> $DIR/duplicate.rs:224:32\n    |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:119:46\n+  --> $DIR/duplicate.rs:224:32\n    |\n-LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: Copy, Item: Copy>,\n+   |                    ----------  ^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n+  --> $DIR/duplicate.rs:231:35\n    |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:122:49\n+  --> $DIR/duplicate.rs:231:35\n    |\n-LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL |     Self: Iterator<Item: 'static, Item: 'static>,\n+   |                    -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                    |\n+   |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:132:40\n+  --> $DIR/duplicate.rs:249:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:134:44\n+  --> $DIR/duplicate.rs:251:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:136:43\n+  --> $DIR/duplicate.rs:253:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:43\n+  --> $DIR/duplicate.rs:237:34\n    |\n-LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: Copy, Item: Send>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:43\n+  --> $DIR/duplicate.rs:241:34\n    |\n-LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-   |                               ----------  ^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: Copy, Item: Copy>;\n+   |                      ----------  ^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:46\n+  --> $DIR/duplicate.rs:245:37\n    |\n-LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-   |                               -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                               |\n-   |                               `Item` bound here first\n+LL |     type A: Iterator<Item: 'static, Item: 'static>;\n+   |                      -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                      |\n+   |                      `Item` bound here first\n \n error: aborting due to 60 previous errors\n ", "previous_filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr"}, {"sha": "d4da4babf4e113a6cc80138b4168038511feb254", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/trait-alias-impl-trait.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e223a8957417011c80ce11162ff1e756fbd97d39", "filename": "src/test/ui/associated-type-bounds/trait-alias-impl-trait.rs", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftrait-alias-impl-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,39 +1,59 @@\n // run-pass\n \n #![feature(associated_type_bounds)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::ops::Add;\n \n-trait Tr1 { type As1; fn mk(self) -> Self::As1; }\n-trait Tr2<'a> { fn tr2(self) -> &'a Self; }\n+trait Tr1 {\n+    type As1;\n+    fn mk(self) -> Self::As1;\n+}\n+trait Tr2<'a> {\n+    fn tr2(self) -> &'a Self;\n+}\n \n-fn assert_copy<T: Copy>(x: T) { let _x = x; let _x = x; }\n+fn assert_copy<T: Copy>(x: T) {\n+    let _x = x;\n+    let _x = x;\n+}\n fn assert_static<T: 'static>(_: T) {}\n fn assert_forall_tr2<T: for<'a> Tr2<'a>>(_: T) {}\n \n struct S1;\n #[derive(Copy, Clone)]\n struct S2;\n-impl Tr1 for S1 { type As1 = S2; fn mk(self) -> Self::As1 { S2 } }\n+impl Tr1 for S1 {\n+    type As1 = S2;\n+    fn mk(self) -> Self::As1 {\n+        S2\n+    }\n+}\n \n type Et1 = impl Tr1<As1: Copy>;\n-fn def_et1() -> Et1 { S1 }\n-pub fn use_et1() { assert_copy(def_et1().mk()); }\n+fn def_et1() -> Et1 {\n+    S1\n+}\n+pub fn use_et1() {\n+    assert_copy(def_et1().mk());\n+}\n \n type Et2 = impl Tr1<As1: 'static>;\n-fn def_et2() -> Et2 { S1 }\n-pub fn use_et2() { assert_static(def_et2().mk()); }\n+fn def_et2() -> Et2 {\n+    S1\n+}\n+pub fn use_et2() {\n+    assert_static(def_et2().mk());\n+}\n \n type Et3 = impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>;\n fn def_et3() -> Et3 {\n     struct A;\n     impl Tr1 for A {\n         type As1 = core::ops::Range<u8>;\n-        fn mk(self) -> Self::As1 { 0..10 }\n+        fn mk(self) -> Self::As1 {\n+            0..10\n+        }\n     }\n     A\n }\n@@ -53,14 +73,20 @@ fn def_et4() -> Et4 {\n     struct A;\n     impl Tr1 for A {\n         type As1 = A;\n-        fn mk(self) -> A { A }\n+        fn mk(self) -> A {\n+            A\n+        }\n     }\n     impl<'a> Tr2<'a> for A {\n-        fn tr2(self) -> &'a Self { &A }\n+        fn tr2(self) -> &'a Self {\n+            &A\n+        }\n     }\n     A\n }\n-pub fn use_et4() { assert_forall_tr2(def_et4().mk()); }\n+pub fn use_et4() {\n+    assert_forall_tr2(def_et4().mk());\n+}\n \n fn main() {\n     let _ = use_et1();"}, {"sha": "9857f7e2677a8daaf560fdfc0fc03081975651f3", "filename": "src/test/ui/associated-types/issue-63591.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63591.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "4d2e39f4da60c788e9e625a3a62584b5daf508ac", "filename": "src/test/ui/associated-types/issue-63591.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63591.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // check-pass\n \n #![feature(associated_type_bounds)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "cc61becd71b1f7c6b7f4838afa99a82a06ed9966", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60655-latebound-regions.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "66a3b07c3bd968d86523c5c269ced1838d44933d", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,10 +3,7 @@\n // check-pass\n // edition:2018\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::future::Future;\n "}, {"sha": "fff5015cdc1c987bf1dd6625ec6dd093c10a6d40", "filename": "src/test/ui/borrowck/issue-33819.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fissue-33819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fissue-33819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-33819.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,6 +3,7 @@ fn main() {\n     match op {\n         Some(ref v) => { let a = &mut v; },\n         //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+        //~| HELP try removing `&mut` here\n         None => {},\n     }\n }"}, {"sha": "f77fdbf2b6bfe914947588fbdc77f28b09467980", "filename": "src/test/ui/borrowck/issue-33819.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fissue-33819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fissue-33819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-33819.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,7 +5,7 @@ LL |         Some(ref v) => { let a = &mut v; },\n    |                                  ^^^^^^\n    |                                  |\n    |                                  cannot borrow as mutable\n-   |                                  try removing `&mut` here\n+   |                                  help: try removing `&mut` here\n \n error: aborting due to previous error\n "}, {"sha": "3f092846dd4c03b9198a059d07052e8868a25630", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -4,8 +4,10 @@\n pub fn f(b: &mut i32) {\n     g(&mut b);\n     //~^ ERROR cannot borrow\n+    //~| HELP try removing `&mut` here\n     g(&mut &mut b);\n     //~^ ERROR cannot borrow\n+    //~| HELP try removing `&mut` here\n }\n \n pub fn g(_: &mut i32) {}"}, {"sha": "cb7355b2335965aa9490f0af4a25861a2a0f8302", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,16 +5,16 @@ LL |     g(&mut b);\n    |       ^^^^^^\n    |       |\n    |       cannot borrow as mutable\n-   |       try removing `&mut` here\n+   |       help: try removing `&mut` here\n \n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:7:12\n+  --> $DIR/mut-borrow-of-mut-ref.rs:8:12\n    |\n LL |     g(&mut &mut b);\n    |            ^^^^^^\n    |            |\n    |            cannot borrow as mutable\n-   |            try removing `&mut` here\n+   |            help: try removing `&mut` here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "95ccf2a4c89931f533bd45f488c6068e4389dfd7", "filename": "src/test/ui/did_you_mean/issue-31424.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,13 +5,16 @@ struct Struct;\n impl Struct {\n     fn foo(&mut self) {\n         (&mut self).bar(); //~ ERROR cannot borrow\n+        //~^ HELP try removing `&mut` here\n     }\n \n     // In this case we could keep the suggestion, but to distinguish the\n     // two cases is pretty hard. It's an obscure case anyway.\n     fn bar(self: &mut Self) {\n         //~^ WARN function cannot return without recursing\n+        //~^^ HELP a `loop` may express intention better if this is on purpose\n         (&mut self).bar(); //~ ERROR cannot borrow\n+        //~^ HELP try removing `&mut` here\n     }\n }\n "}, {"sha": "838e81043db7bbfb72a46339f99c442b21839862", "filename": "src/test/ui/did_you_mean/issue-31424.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,28 +5,28 @@ LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n    |         |\n    |         cannot borrow as mutable\n-   |         try removing `&mut` here\n+   |         help: try removing `&mut` here\n \n warning: function cannot return without recursing\n-  --> $DIR/issue-31424.rs:12:5\n+  --> $DIR/issue-31424.rs:13:5\n    |\n LL |     fn bar(self: &mut Self) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n-LL |\n+...\n LL |         (&mut self).bar();\n    |         ----------------- recursive call site\n    |\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-31424.rs:14:9\n+  --> $DIR/issue-31424.rs:16:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n    |         |\n    |         cannot borrow as mutable\n-   |         try removing `&mut` here\n+   |         help: try removing `&mut` here\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "53516f4f24713905d8b025bf963697ac01137e39", "filename": "src/test/ui/did_you_mean/issue-34126.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,6 +5,7 @@ impl Z {\n     fn start(&mut self) {\n         self.run(&mut self); //~ ERROR cannot borrow\n         //~| ERROR cannot borrow\n+        //~| HELP try removing `&mut` here\n     }\n }\n "}, {"sha": "669684fb3ddd743f2c4859b91cd8bb779c7f259b", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,7 +5,7 @@ LL |         self.run(&mut self);\n    |                  ^^^^^^^^^\n    |                  |\n    |                  cannot borrow as mutable\n-   |                  try removing `&mut` here\n+   |                  help: try removing `&mut` here\n \n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:6:18"}, {"sha": "e89eda33f8c931e29abae38b181b0f0f49693fbb", "filename": "src/test/ui/did_you_mean/issue-34337.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -4,4 +4,5 @@ fn main() {\n     let mut v: Vec<String> = Vec::new();\n     let ref mut key = v[0];\n     get(&mut key); //~ ERROR cannot borrow\n+    //~| HELP try removing `&mut` here\n }"}, {"sha": "1f18ea8923bdafd1a89b88f390671e1f21291ba3", "filename": "src/test/ui/did_you_mean/issue-34337.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,7 +5,7 @@ LL |     get(&mut key);\n    |         ^^^^^^^^\n    |         |\n    |         cannot borrow as mutable\n-   |         try removing `&mut` here\n+   |         help: try removing `&mut` here\n \n error: aborting due to previous error\n "}, {"sha": "6a19d85ff79f9a1af4c7d1335a5eb8b3348e62a3", "filename": "src/test/ui/did_you_mean/issue-37139.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -10,6 +10,7 @@ fn main() {\n     match x {\n         TestEnum::Item(ref mut x) => {\n             test(&mut x); //~ ERROR cannot borrow `x` as mutable, as it is not declared as mutable\n+            //~| HELP try removing `&mut` here\n         }\n     }\n }"}, {"sha": "dc1bdfaaed568effd5613e81985395daf1ae4832", "filename": "src/test/ui/did_you_mean/issue-37139.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,7 +5,7 @@ LL |             test(&mut x);\n    |                  ^^^^^^\n    |                  |\n    |                  cannot borrow as mutable\n-   |                  try removing `&mut` here\n+   |                  help: try removing `&mut` here\n \n error: aborting due to previous error\n "}, {"sha": "e0bb7dbfae9f1f793113f91a5ea60b519adfa496", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n #![feature(imported_main)]\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n //~^^^ ERROR `main` function not found in crate\n pub mod foo {"}, {"sha": "6aa170fdfd2a77aea894d41a2ec135e1047841f9", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,7 +2,7 @@ error[E0601]: `main` function not found in crate `imported_main_const_fn_item_ty\n   --> $DIR/imported_main_const_fn_item_type_forbidden.rs:1:1\n    |\n LL | / #![feature(imported_main)]\n-LL | | #![feature(min_type_alias_impl_trait)]\n+LL | | #![feature(type_alias_impl_trait)]\n LL | | #![allow(incomplete_features)]\n LL | |\n ...  |"}, {"sha": "ffe297a5a6a2fa151cdad712ac1c2bf949606af9", "filename": "src/test/ui/feature-gates/feature-gate-min_type_alias_impl_trait.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.rs?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,50 +0,0 @@\n-// ignore-compare-mode-chalk\n-use std::fmt::Debug;\n-\n-type Foo = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n-\n-trait Bar {\n-    type Baa: Debug;\n-    fn define() -> Self::Baa;\n-}\n-\n-impl Bar for () {\n-    type Baa = impl Debug; //~ ERROR `impl Trait` in type aliases is unstable\n-    fn define() -> Self::Baa {\n-        0\n-    }\n-}\n-\n-fn define() -> Foo {\n-    0\n-}\n-\n-trait TraitWithDefault {\n-    type Assoc = impl Debug;\n-    //~^ ERROR associated type defaults are unstable\n-    //~| ERROR `impl Trait` not allowed outside of function\n-    //~| ERROR `impl Trait` in type aliases is unstable\n-}\n-\n-type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-//~^ ERROR `impl Trait` in type aliases is unstable\n-//~| ERROR `impl Trait` in type aliases is unstable\n-//~| ERROR `impl Trait` in type aliases is unstable\n-//~| ERROR `impl Trait` in type aliases is unstable\n-\n-fn define_multiple() -> NestedFree {\n-    (vec![true], 0u8, 0i32..1)\n-}\n-\n-impl Bar for u8 {\n-    type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-    //~^ ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR `impl Trait` in type aliases is unstable\n-    //~| ERROR `impl Trait` in type aliases is unstable\n-    fn define() -> Self::Baa {\n-        (vec![true], 0u8, 0i32..1)\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "07857289aaeb55a34488bdbd049e110f80153a62", "filename": "src/test/ui/feature-gates/feature-gate-min_type_alias_impl_trait.stderr", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_type_alias_impl_trait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,118 +0,0 @@\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:4:12\n-   |\n-LL | type Foo = impl Debug;\n-   |            ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:12:16\n-   |\n-LL |     type Baa = impl Debug;\n-   |                ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: associated type defaults are unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:5\n-   |\n-LL |     type Assoc = impl Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #29661 <https://github.com/rust-lang/rust/issues/29661> for more information\n-   = help: add `#![feature(associated_type_defaults)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:18\n-   |\n-LL |     type Assoc = impl Debug;\n-   |                  ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:24\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                        ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:37\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                     ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:49\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:29:70\n-   |\n-LL | type NestedFree = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug>);\n-   |                                                                      ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:21\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                     ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:34\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                                  ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:46\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:40:67\n-   |\n-LL |     type Baa = (Vec<impl Debug>, impl Debug, impl Iterator<Item = impl Debug> + Debug);\n-   |                                                                   ^^^^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n-  --> $DIR/feature-gate-min_type_alias_impl_trait.rs:23:18\n-   |\n-LL |     type Assoc = impl Debug;\n-   |                  ^^^^^^^^^^\n-\n-error: aborting due to 13 previous errors\n-\n-Some errors have detailed explanations: E0562, E0658.\n-For more information about an error, try `rustc --explain E0562`."}, {"sha": "ea82837d4bf55364de91c9d446cbe7fcacfbae4c", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n // ignore-compare-mode-chalk\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n use std::fmt::Debug;\n \n type Foo = impl Debug;\n@@ -13,7 +13,7 @@ fn define() -> Bar {\n type Foo2 = impl Debug;\n \n fn define2() {\n-    let x = || -> Foo2 { 42 }; //~ ERROR not permitted here\n+    let x = || -> Foo2 { 42 };\n }\n \n type Foo3 = impl Debug;"}, {"sha": "da3ddb1c50979f852528bc26518b9b028dd54c88", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -10,15 +10,6 @@ LL |     Bar(42)\n    = note: expected opaque type `impl Debug`\n                      found type `{integer}`\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:16:19\n-   |\n-LL |     let x = || -> Foo2 { 42 };\n-   |                   ^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n@@ -77,7 +68,6 @@ error: could not find defining uses\n LL | type Foo4 = impl Debug;\n    |             ^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bf647d089833a69dd7da2e15ca3beda47261afc3", "filename": "src/test/ui/generator/layout-error.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,18 +0,0 @@\n-error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:24:17\n-   |\n-LL |         let a = Foo;\n-   |                 ^^^ not found in this scope\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/layout-error.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0425`."}, {"sha": "ed31c260cbc0f95a04698f6eff880c3935206994", "filename": "src/test/ui/generator/layout-error.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,19 +0,0 @@\n-error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:24:17\n-   |\n-LL |         let a = Foo;\n-   |                 ^^^ not found in this scope\n-\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/layout-error.rs:30:27\n-   |\n-LL |     Task::spawn(&POOL, || cb());\n-   |                           ^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0425, E0658.\n-For more information about an error, try `rustc --explain E0425`."}, {"sha": "7c3d187409a2f808cc94660797888fa78a518312", "filename": "src/test/ui/generator/layout-error.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,10 +3,7 @@\n //\n // edition:2018\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n use std::future::Future;\n \n pub struct Task<F: Future>(F);\n@@ -27,5 +24,5 @@ fn main() {\n     type F = impl Future;\n     // Check that statics are inhabited computes they layout.\n     static POOL: Task<F> = Task::new();\n-    Task::spawn(&POOL, || cb()); //[min_tait]~ ERROR type alias impl trait is not permitted here\n+    Task::spawn(&POOL, || cb());\n }"}, {"sha": "b1a258f4f2ca7d10214377632981648d158528e1", "filename": "src/test/ui/generator/layout-error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/layout-error.rs:21:17\n+   |\n+LL |         let a = Foo;\n+   |                 ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "1e609e8388277042708681aac897eecfa3fd5cd1", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/metadata-sufficient-for-layout.rs:10:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "d0e648ee775fa3159f1844f8dfce640d2d73a1f0", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,10 +5,7 @@\n //\n // aux-build:metadata-sufficient-for-layout.rs\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait, rustc_attrs)]\n #![feature(generator_trait)]\n \n extern crate metadata_sufficient_for_layout;"}, {"sha": "3488b04f2267ed6b608decb6a25545c1b0184548", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n+  --> $DIR/metadata-sufficient-for-layout.rs:25:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^", "previous_filename": "src/test/ui/generator/metadata-sufficient-for-layout.min_tait.stderr"}, {"sha": "174c4c62da92ed94d5d485221a165bb2bfd851f7", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-generic-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-impl-trait-type-generic-trait.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "6c7c46b0e3dbbedb83184ced46bf061757a82363", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-generic-trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-generic-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "e3dd4a60b4df7e9dd5e7f5cb50f9130539ea8583", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-trivial.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-impl-trait-type-trivial.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "cdda341cad87ab1bcfb827eb4c7408b0da86da81", "filename": "src/test/ui/impl-trait/associated-impl-trait-type-trivial.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type-trivial.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "39147b00a346e800895019f38f01f7fda9b7b81b", "filename": "src/test/ui/impl-trait/associated-impl-trait-type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-impl-trait-type.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "d0661d66f4b48dd25508aba00c6dffe98e0af2bd", "filename": "src/test/ui/impl-trait/associated-impl-trait-type.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-impl-trait-type.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "314617748b0ba25427a38e0d35bde7b5b1fa0299", "filename": "src/test/ui/impl-trait/auto-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/auto-trait.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/auto-trait.rs:24:1\n-   |\n-LL | impl<T: Send> AnotherTrait for T {}\n-   | -------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "cf2773f4ef59dc921a6e919aab056bb13c89f94a", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // Tests that type alias impls traits do not leak auto-traits for\n // the purposes of coherence checking\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "26cd8fb6a9b5c44ecfab90bc567522a4b2a025f3", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/auto-trait.rs:24:1\n+  --> $DIR/auto-trait.rs:21:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}\n    | -------------------------------- first implementation here", "previous_filename": "src/test/ui/impl-trait/auto-trait.min_tait.stderr"}, {"sha": "51718079d2c48fb6c54e20c909d7e01d154302be", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -4,7 +4,7 @@\n //[sa] compile-flags: -Z save-analysis\n //-^ To make this the regression test for #75962.\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n // See issue 60414\n "}, {"sha": "286dd7aafb43fab0b79b6ba8405423a4c2da046d", "filename": "src/test/ui/impl-trait/issue-55872-1.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,57 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55872-1.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:17:5\n-   |\n-LL |     fn foo<T>() -> Self::E;\n-   |     ----------------------- definition of `foo` from trait\n-...\n-LL |     fn foo<T: Default>() -> Self::E {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n-\n-error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n-   |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n-   |\n-   = note: required because it appears within the type `(S, T)`\n-help: consider further restricting this bound\n-   |\n-LL | impl<S: Default + std::marker::Copy> Bar for S {\n-   |                 ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n-   |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n-   |\n-   = note: required because it appears within the type `(S, T)`\n-help: consider further restricting this bound\n-   |\n-LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n-   |                       ^^^^^^^^^^^^^^^^^^^\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:17:37\n-   |\n-LL |       fn foo<T: Default>() -> Self::E {\n-   |  _____________________________________^\n-LL | |\n-LL | |\n-LL | |         (S::default(), T::default())\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0276, E0277.\n-For more information about an error, try `rustc --explain E0276`."}, {"sha": "72a060abae3e77f7267dce6b001cf52f48004ddb", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "6411c1b5d1ca2c080f27aa0b5dc4be1b204dea2a", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:17:5\n+  --> $DIR/issue-55872-1.rs:14:5\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n@@ -8,7 +8,7 @@ LL |     fn foo<T: Default>() -> Self::E {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n+  --> $DIR/issue-55872-1.rs:10:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n@@ -20,7 +20,7 @@ LL | impl<S: Default + std::marker::Copy> Bar for S {\n    |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:13:14\n+  --> $DIR/issue-55872-1.rs:10:14\n    |\n LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n@@ -32,7 +32,7 @@ LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n    |                       ^^^^^^^^^^^^^^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-1.rs:17:37\n+  --> $DIR/issue-55872-1.rs:14:37\n    |\n LL |       fn foo<T: Default>() -> Self::E {\n    |  _____________________________________^", "previous_filename": "src/test/ui/impl-trait/issue-55872-1.min_tait.stderr"}, {"sha": "a8fc681a093d50911b988203dec3c93ddf24d86b", "filename": "src/test/ui/impl-trait/issue-55872-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,28 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55872-2.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:16:14\n-   |\n-LL |     type E = impl std::marker::Copy;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:18:28\n-   |\n-LL |       fn foo<T>() -> Self::E {\n-   |  ____________________________^\n-LL | |\n-LL | |         async {}\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "6eda1dc62ec62895a1a8b197a2547ddee3283bb2", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // edition:2018\n // ignore-compare-mode-chalk\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "58c5ee45051af2159fcfd9994ccc2ec5d69544cc", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:16:14\n+  --> $DIR/issue-55872-2.rs:13:14\n    |\n LL |     type E = impl std::marker::Copy;\n    |              ^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:18:28\n+  --> $DIR/issue-55872-2.rs:15:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^", "previous_filename": "src/test/ui/impl-trait/issue-55872-2.min_tait.stderr"}, {"sha": "e549fec1c229e5982cf81536bf1cfe98f3f72ffa", "filename": "src/test/ui/impl-trait/issue-55872.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55872.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:16:28\n-   |\n-LL |       fn foo<T>() -> Self::E {\n-   |  ____________________________^\n-LL | |\n-LL | |         || ()\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "bbd940254178ce45ffe4dfff6ec5c35b8808f50d", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n // ignore-compare-mode-chalk\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;\n@@ -14,7 +11,7 @@ impl<S> Bar for S {\n     type E = impl Copy;\n \n     fn foo<T>() -> Self::E {\n-    //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         || ()\n     }\n }"}, {"sha": "60654ec34610fc24321c244905b55dc66950a454", "filename": "src/test/ui/impl-trait/issue-55872.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872.rs:16:28\n+  --> $DIR/issue-55872.rs:13:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^", "previous_filename": "src/test/ui/impl-trait/issue-55872.min_tait.stderr"}, {"sha": "a6976daff01864dc63eb8944029556f9167e8db4", "filename": "src/test/ui/impl-trait/issue-86465.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-86465.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type X<'a, 'b> = impl std::fmt::Debug;\n "}, {"sha": "906578c291f16f60ddb7d51cbc955a4e8a9cd02b", "filename": "src/test/ui/impl-trait/issues/issue-53457.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53457.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7b9c2c53aad4fac996de58910bdfb72f9051966d", "filename": "src/test/ui/impl-trait/issues/issue-53457.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n-\n+#![feature(type_alias_impl_trait)]\n type X = impl Clone;\n \n fn bar<F: Fn(&i32) + Clone>(f: F) -> F {"}, {"sha": "1f4e3f78afa45e23d368ccd218d967cb9aa86b71", "filename": "src/test/ui/impl-trait/issues/issue-70877.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,15 +0,0 @@\n-error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:10:12\n-   |\n-LL | type FooRet = impl std::fmt::Debug;\n-   |               -------------------- the found opaque type\n-...\n-LL | type Foo = impl Iterator<Item = FooItem>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found opaque type\n-   |\n-   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "853c2a82bede4b000b4045c55c48cbf2cf15c488", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-#![allow(incomplete_features)]\n+#![feature(type_alias_impl_trait)]\n \n type FooArg<'a> = &'a dyn ToString;\n type FooRet = impl std::fmt::Debug;"}, {"sha": "b6861039f6a993db2d99ca577a4e34e70e665e03", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:10:12\n+  --> $DIR/issue-70877.rs:7:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n    |               -------------------- the found opaque type", "previous_filename": "src/test/ui/impl-trait/issues/issue-70877.full_tait.stderr"}, {"sha": "728644f7579917960b8b85791bd759baafcb9730", "filename": "src/test/ui/impl-trait/issues/issue-78722.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,32 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78722.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-78722.rs:15:20\n-   |\n-LL | type F = impl core::future::Future<Output = u8>;\n-   |          -------------------------------------- the expected opaque type\n-...\n-LL |         let f: F = async { 1 };\n-   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n-   |                |\n-   |                expected due to this\n-   | \n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n-              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n-   = note: distinct uses of `impl Trait` result in different opaque types\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "bdbd20f9d2b884d500e152aee0cb66e2d947ebe8", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // edition:2018\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type F = impl core::future::Future<Output = u8>;\n "}, {"sha": "f42d66d12435c2e933f6053d2970aec5d56a8728", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-78722.rs:15:20\n+  --> $DIR/issue-78722.rs:12:20\n    |\n LL | type F = impl core::future::Future<Output = u8>;\n    |          -------------------------------------- the expected opaque type\n@@ -14,7 +14,7 @@ LL |         let f: F = async { 1 };\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:5:10>)\n               found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n ", "previous_filename": "src/test/ui/impl-trait/issues/issue-78722.min_tait.stderr"}, {"sha": "8cc4fef890abf8a40c3460ffa309e191203b15f3", "filename": "src/test/ui/impl-trait/issues/issue-86201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n #![feature(unboxed_closures)]\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n \n type FunType = impl Fn<()>;\n //~^ could not find defining uses"}, {"sha": "b2ebc7230b945ecd2bd70544b7536b2b0dd78f38", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/error-handling-2.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:16:60\n-   |\n-LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |                                                            ^^^^^^^^^\n-   |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 16:8\n-  --> $DIR/error-handling-2.rs:16:8\n-   |\n-LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        ^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "96d891b2cf1d7276b1d8fc9ab2aeff81d7f770e3", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // compile-flags:-Zborrowck=mir\n \n #![feature(member_constraints)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "59105f11805cd0c27de0c55025cf579a87873da1", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/error-handling-2.rs:16:60\n+  --> $DIR/error-handling-2.rs:13:60\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |                                                            ^^^^^^^^^\n    |\n-note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 16:8\n-  --> $DIR/error-handling-2.rs:16:8\n+note: hidden type `*mut &'a i32` captures the lifetime `'a` as defined on the function body at 13:8\n+  --> $DIR/error-handling-2.rs:13:8\n    |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        ^^", "previous_filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling-2.min_tait.stderr"}, {"sha": "ff99d037d198f4bbeb53a6f1834d36c9785e1edb", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/error-handling.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:25:16\n-   |\n-LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |         let _: &'b i32 = *u.0;\n-   |                ^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "6d88f16ea8abb86c095242a2b4639809932d42da", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // compile-flags:-Zborrowck=mir\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);"}, {"sha": "ccd0040030da2044edde008cdd951cc306c6b5ee", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:25:16\n+  --> $DIR/error-handling.rs:22:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.min_tait.stderr"}, {"sha": "529dcd8ece6f84b81c2aa496f8de1da89cf600b5", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,7 +3,7 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "bccbc8cb36b157d0a21334550978c0903f16682c", "filename": "src/test/ui/impl-trait/negative-reasoning.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/negative-reasoning.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/negative-reasoning.rs:22:1\n-   |\n-LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n-   | ------------------------------------------- first implementation here\n-...\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n-   |\n-   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0119`."}, {"sha": "d173fe83fb7913c35699f933005570245680faac", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // Tests that we cannot assume that an opaque type does *not* implement some\n // other trait\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}"}, {"sha": "e39a8e53f7985cbe87b2f75059443eca18c1e88a", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n-  --> $DIR/negative-reasoning.rs:22:1\n+  --> $DIR/negative-reasoning.rs:19:1\n    |\n LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n    | ------------------------------------------- first implementation here", "previous_filename": "src/test/ui/impl-trait/negative-reasoning.min_tait.stderr"}, {"sha": "965e3e4887bb25a15e92122a37a69b3b9ac0b0dd", "filename": "src/test/ui/impl-trait/type-alias-generic-param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-generic-param.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3499b2859267caafb2d755c190dc9394fc9b3f71", "filename": "src/test/ui/impl-trait/type-alias-generic-param.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-generic-param.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,18 +3,16 @@\n // types in 'item' position when generic parameters are involved\n //\n // run-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait Meow {\n     type MeowType;\n     fn meow(self) -> Self::MeowType;\n }\n \n impl<T, I> Meow for I\n-    where I: Iterator<Item = T>\n+where\n+    I: Iterator<Item = T>,\n {\n     type MeowType = impl Iterator<Item = T>;\n     fn meow(self) -> Self::MeowType {"}, {"sha": "ec939e5718a949ea693b52aa8c389f2f928f1ad1", "filename": "src/test/ui/impl-trait/type-alias-impl-trait-in-fn-body.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-in-fn-body.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "91be4efd56a154889cd6908b0337802312bffe5b", "filename": "src/test/ui/impl-trait/type-alias-impl-trait-in-fn-body.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype-alias-impl-trait-in-fn-body.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "7f11d30dbaa5faafe272cfcbf75da31e42a04b37", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -23,7 +23,7 @@ LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/where-allowed.rs:154:23\n@@ -32,7 +32,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n   --> $DIR/where-allowed.rs:157:39\n@@ -41,7 +41,7 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and method return types\n   --> $DIR/where-allowed.rs:15:40"}, {"sha": "a448f85b7625dcdeb3eebe1424ae62620ccf2155", "filename": "src/test/ui/issues/issue-60662.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60662.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "d0db578f57091894d9f9b7a682cdbd94da28ca89", "filename": "src/test/ui/issues/issue-60662.min_tait.stdout", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.min_tait.stdout?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,15 +0,0 @@\n-// check-pass\n-// compile-flags: -Z unpretty=hir\n-\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#[prelude_import]\n-use ::std::prelude::rust_2015::*;\n-#[macro_use]\n-extern crate std;\n-\n-trait Animal { }\n-\n-fn main() {\n-              pub type ServeFut = /*impl Trait*/;\n-          }"}, {"sha": "b9faa668b80ebbbc7c70538ac6910436561591d5", "filename": "src/test/ui/issues/issue-60662.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,13 +1,9 @@\n // check-pass\n // compile-flags: -Z unpretty=hir\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n-trait Animal {\n-}\n+trait Animal {}\n \n fn main() {\n     pub type ServeFut = impl Animal;"}, {"sha": "14a49f20e6b22f9850e8c588f4c779f8e78d7a9b", "filename": "src/test/ui/issues/issue-60662.stdout", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // compile-flags: -Z unpretty=hir\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;", "previous_filename": "src/test/ui/issues/issue-60662.full_tait.stdout"}, {"sha": "299151df6649339dc6ed3bda802793e040a83668", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n // normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n-#![feature(never_type, rustc_attrs, min_type_alias_impl_trait)]\n+#![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n #![crate_type = \"lib\"]\n \n #[rustc_layout(debug)]"}, {"sha": "65b4631010f20eafed7bc4bb7e3b0828ef082452", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,81 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/inline-trait-and-foreign-items.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:10:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/inline-trait-and-foreign-items.rs:7:9\n-   |\n-LL | #![warn(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:14:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T;\n-   |     ------- not a function or closure\n-\n-warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:21:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T = Self;\n-   |     -------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:28:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type U = impl Trait;\n-   |     -------------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     static X: u32;\n-   |     -------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:36:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T;\n-   |     ------- not a function or closure\n-\n-error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:29:14\n-   |\n-LL |     type U = impl Trait;\n-   |              ^^^^^^^^^^\n-\n-error: aborting due to 6 previous errors; 3 warnings emitted\n-\n-For more information about this error, try `rustc --explain E0518`."}, {"sha": "6321b3c76e4d18a8bbedcf9e087aa0e17f24807e", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n #![feature(extern_types)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n #![warn(unused_attributes)]\n "}, {"sha": "6ac884c12ceb9a7df3455f0d8d7dcae478ad3e87", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,27 +1,27 @@\n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:10:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:7:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/inline-trait-and-foreign-items.rs:7:9\n+  --> $DIR/inline-trait-and-foreign-items.rs:4:9\n    |\n LL | #![warn(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:14:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:11:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n warning: `#[inline]` is ignored on constants\n-  --> $DIR/inline-trait-and-foreign-items.rs:21:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:18:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n@@ -30,39 +30,39 @@ LL |     #[inline]\n    = note: see issue #65833 <https://github.com/rust-lang/rust/issues/65833> for more information\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:22:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T = Self;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:28:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type U = impl Trait;\n    |     -------------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:30:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     static X: u32;\n    |     -------------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:36:5\n+  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n LL |     type T;\n    |     ------- not a function or closure\n \n error: could not find defining uses\n-  --> $DIR/inline-trait-and-foreign-items.rs:29:14\n+  --> $DIR/inline-trait-and-foreign-items.rs:26:14\n    |\n LL |     type U = impl Trait;\n    |              ^^^^^^^^^^", "previous_filename": "src/test/ui/lint/inline-trait-and-foreign-items.min_tait.stderr"}, {"sha": "619ca15839b39765f38269c1f439b19ed5c7c72c", "filename": "src/test/ui/lint/lint-ctypes-73249-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73249-2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:29:25\n-   |\n-LL |     pub fn lint_me() -> A<()>;\n-   |                         ^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-2.rs:5:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "fe578f51b63a0e4280b580764c0458b5eb7f5139", "filename": "src/test/ui/lint/lint-ctypes-73249-2.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,12 +1,9 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for () { }\n+impl Baz for () {}\n \n type Qux = impl Baz;\n "}, {"sha": "36dbe3217d75ada5d0e445ea6b3f217c669109cf", "filename": "src/test/ui/lint/lint-ctypes-73249-2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-2.rs:29:25\n+  --> $DIR/lint-ctypes-73249-2.rs:26:25\n    |\n LL |     pub fn lint_me() -> A<()>;\n    |                         ^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-2.rs:5:9\n+  --> $DIR/lint-ctypes-73249-2.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73249-2.min_tait.stderr"}, {"sha": "af0f26a9f43e6f7f610412eab2f3c6910f8023ff", "filename": "src/test/ui/lint/lint-ctypes-73249-3.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73249-3.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-3.rs:21:25\n-   |\n-LL |     pub fn lint_me() -> A;\n-   |                         ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-3.rs:5:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "ec12de00739e4b7a24ad66fc80e0e7523ae4a4a4", "filename": "src/test/ui/lint/lint-ctypes-73249-3.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,16 +1,15 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for u32 { }\n+impl Baz for u32 {}\n \n type Qux = impl Baz;\n \n-fn assign() -> Qux { 3 }\n+fn assign() -> Qux {\n+    3\n+}\n \n #[repr(C)]\n pub struct A {"}, {"sha": "e987ec90228c1d4bc19027c8a4da6f8e4fe4b8e0", "filename": "src/test/ui/lint/lint-ctypes-73249-3.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-3.rs:21:25\n+  --> $DIR/lint-ctypes-73249-3.rs:20:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-3.rs:5:9\n+  --> $DIR/lint-ctypes-73249-3.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73249-3.min_tait.stderr"}, {"sha": "b80084fce068c3b13159bb36698eb879510c436c", "filename": "src/test/ui/lint/lint-ctypes-73249-5.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73249-5.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-5.rs:21:25\n-   |\n-LL |     pub fn lint_me() -> A;\n-   |                         ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-5.rs:5:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "58c2d7a501ad5060a4b2991b41f40c25bdf44d99", "filename": "src/test/ui/lint/lint-ctypes-73249-5.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,16 +1,15 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for u32 { }\n+impl Baz for u32 {}\n \n type Qux = impl Baz;\n \n-fn assign() -> Qux { 3 }\n+fn assign() -> Qux {\n+    3\n+}\n \n #[repr(transparent)]\n pub struct A {"}, {"sha": "749714c7df8d7535a446ac02a182f62890736157", "filename": "src/test/ui/lint/lint-ctypes-73249-5.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73249-5.rs:21:25\n+  --> $DIR/lint-ctypes-73249-5.rs:20:25\n    |\n LL |     pub fn lint_me() -> A;\n    |                         ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73249-5.rs:5:9\n+  --> $DIR/lint-ctypes-73249-5.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73249-5.min_tait.stderr"}, {"sha": "5610230380b8019cc4d34bdb3f9dd5dbfe12a62e", "filename": "src/test/ui/lint/lint-ctypes-73251-1.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73251-1.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:24:25\n-   |\n-LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-1.rs:5:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "dc4c7efd7ef233e5b5be66822eff261c43594b9d", "filename": "src/test/ui/lint/lint-ctypes-73251-1.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,12 +1,9 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n-pub trait Baz { }\n+pub trait Baz {}\n \n-impl Baz for u32 { }\n+impl Baz for u32 {}\n \n type Qux = impl Baz;\n \n@@ -18,7 +15,9 @@ impl Foo for u32 {\n     type Assoc = Qux;\n }\n \n-fn assign() -> Qux { 1 }\n+fn assign() -> Qux {\n+    1\n+}\n \n extern \"C\" {\n     pub fn lint_me() -> <u32 as Foo>::Assoc; //~ ERROR: uses type `impl Baz`"}, {"sha": "505ccd5a930ce4de02f6e80852f954da8c681e6b", "filename": "src/test/ui/lint/lint-ctypes-73251-1.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Baz`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-1.rs:24:25\n+  --> $DIR/lint-ctypes-73251-1.rs:23:25\n    |\n LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-1.rs:5:9\n+  --> $DIR/lint-ctypes-73251-1.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73251-1.min_tait.stderr"}, {"sha": "19911264a36d7fa48908d681c4b9f5777ea040fd", "filename": "src/test/ui/lint/lint-ctypes-73251-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73251-2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:32:25\n-   |\n-LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-2.rs:5:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "79effd054b083f0db31ef8c209c0e91cb15b0fc3", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait TraitA {\n@@ -16,17 +13,24 @@ pub trait TraitB {\n     type Assoc;\n }\n \n-impl<T> TraitB for T where T: TraitA {\n+impl<T> TraitB for T\n+where\n+    T: TraitA,\n+{\n     type Assoc = <T as TraitA>::Assoc;\n }\n \n type AliasA = impl TraitA<Assoc = u32>;\n \n type AliasB = impl TraitB<Assoc = AliasA>;\n \n-fn use_of_a() -> AliasA { 3 }\n+fn use_of_a() -> AliasA {\n+    3\n+}\n \n-fn use_of_b() -> AliasB { 3 }\n+fn use_of_b() -> AliasB {\n+    3\n+}\n \n extern \"C\" {\n     pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA`"}, {"sha": "94ee95d422e086f7cf7c7445f95ee9147d1869ef", "filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-73251-2.rs:32:25\n+  --> $DIR/lint-ctypes-73251-2.rs:36:25\n    |\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-ctypes-73251-2.rs:5:9\n+  --> $DIR/lint-ctypes-73251-2.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/lint-ctypes-73251-2.min_tait.stderr"}, {"sha": "577cf6cf5453c5d798b6bca2f18e5eda54cb89b9", "filename": "src/test/ui/lint/lint-ctypes-73251.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lint-ctypes-73251.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "ebc2ca77b67a13a31510dc6f1485dbddf33334b6", "filename": "src/test/ui/lint/lint-ctypes-73251.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n pub trait Foo {"}, {"sha": "5433d6e6ae2412fa82d01219fa6ad4e0d8a484c4", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:14:17\n-   |\n-LL |     pub fn a(_: A);\n-   |                 ^ not FFI-safe\n-   |\n-note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:5:9\n-   |\n-LL | #![deny(improper_ctypes)]\n-   |         ^^^^^^^^^^^^^^^\n-   = note: opaque types have no C equivalent\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "fadb7471952f59e384375dbb7a193b82b8b7852f", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(improper_ctypes)]\n \n type A = impl Fn();\n@@ -12,7 +9,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-//~^ ERROR `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+    //~^ ERROR `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n }\n \n fn main() {}"}, {"sha": "9d46f6d936e25273f97ebd28d286b65691e1662a", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:14:17\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n    |\n LL |     pub fn a(_: A);\n    |                 ^ not FFI-safe\n    |\n note: the lint level is defined here\n-  --> $DIR/opaque-ty-ffi-unsafe.rs:5:9\n+  --> $DIR/opaque-ty-ffi-unsafe.rs:2:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.min_tait.stderr"}, {"sha": "543d15fadc6be78762074d7186b385c7aee5db45", "filename": "src/test/ui/mir/issue-75053.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-75053.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:49:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "cb56eaa0b13d920eae77bbf1355e9f732ce08119", "filename": "src/test/ui/mir/issue-75053.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // compile-flags: -Z mir-opt-level=3\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait, rustc_attrs)]\n \n use std::marker::PhantomData;\n "}, {"sha": "64e59e6c44825ef0a97b47c4ad313cef3deea071", "filename": "src/test/ui/mir/issue-75053.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fmir%2Fissue-75053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fmir%2Fissue-75053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:49:1\n+  --> $DIR/issue-75053.rs:46:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^", "previous_filename": "src/test/ui/mir/issue-75053.min_tait.stderr"}, {"sha": "836587d93b84b78f1ca066d728bb33be5ffd674b", "filename": "src/test/ui/nll/issue-51191.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,11 +3,13 @@ struct Struct;\n impl Struct {\n     fn bar(self: &mut Self) {\n         //~^ WARN function cannot return without recursing\n+        //~^^ HELP a `loop` may express intention better if this is on purpose\n         (&mut self).bar();\n         //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable [E0596]\n+        //~^^ HELP try removing `&mut` here\n     }\n \n-    fn imm(self) {\n+    fn imm(self) { //~ HELP consider changing this to be mutable\n         (&mut self).bar();\n         //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable [E0596]\n     }\n@@ -25,7 +27,8 @@ impl Struct {\n     fn mtblref(&mut self) {\n         (&mut self).bar();\n         //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable [E0596]\n+        //~^^ HELP try removing `&mut` here\n     }\n }\n \n-fn main () {}\n+fn main() {}"}, {"sha": "450993425e26b99fe8cf9cc11d423745941d74b6", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,50 +3,50 @@ warning: function cannot return without recursing\n    |\n LL |     fn bar(self: &mut Self) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n-LL |\n+...\n LL |         (&mut self).bar();\n    |         ----------------- recursive call site\n    |\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:6:9\n+  --> $DIR/issue-51191.rs:7:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n    |         |\n    |         cannot borrow as mutable\n-   |         try removing `&mut` here\n+   |         help: try removing `&mut` here\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:11:9\n+  --> $DIR/issue-51191.rs:13:9\n    |\n LL |     fn imm(self) {\n    |            ---- help: consider changing this to be mutable: `mut self`\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:20:9\n+  --> $DIR/issue-51191.rs:22:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/issue-51191.rs:20:9\n+  --> $DIR/issue-51191.rs:22:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:26:9\n+  --> $DIR/issue-51191.rs:28:9\n    |\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^\n    |         |\n    |         cannot borrow as mutable\n-   |         try removing `&mut` here\n+   |         help: try removing `&mut` here\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}, {"sha": "a74c7c93a2eb5bbddf24c02af4bd9ebd8e35d972", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,77 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/private-in-public-assoc-ty.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:20:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type A = Priv;\n-   |         ^^^^^^^^^^^^^^ can't leak private type\n-\n-warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:27:9\n-   |\n-LL |         type Alias1: PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(private_in_public)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:30:9\n-   |\n-LL |         type Alias2: PubTrAux1<Priv> = u8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:33:9\n-   |\n-LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n-\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type Alias4 = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:44:9\n-   |\n-LL |     struct Priv;\n-   |     ------------ `Priv` declared as private\n-...\n-LL |         type Alias1 = Priv;\n-   |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n-\n-error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:47:9\n-   |\n-LL |     trait PrivTr {}\n-   |     ------------ `PrivTr` declared as private\n-...\n-LL |         type Exist = impl PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n-\n-error: aborting due to 4 previous errors; 4 warnings emitted\n-\n-Some errors have detailed explanations: E0445, E0446.\n-For more information about an error, try `rustc --explain E0445`."}, {"sha": "fba72c13170feafd8a227547155f3134fb4c1b3f", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n // This test also ensures that the checks are performed even inside private modules.\n \n #![feature(associated_type_defaults)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n mod m {\n     struct Priv;"}, {"sha": "ba62a228b09fe66c60213fbce885f78f18f91707", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:20:9\n+  --> $DIR/private-in-public-assoc-ty.rs:17:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -8,7 +8,7 @@ LL |         type A = Priv;\n    |         ^^^^^^^^^^^^^^ can't leak private type\n \n warning: private trait `PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:27:9\n+  --> $DIR/private-in-public-assoc-ty.rs:24:9\n    |\n LL |         type Alias1: PrivTr;\n    |         ^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |         type Alias1: PrivTr;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:30:9\n+  --> $DIR/private-in-public-assoc-ty.rs:27:9\n    |\n LL |         type Alias2: PubTrAux1<Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |         type Alias2: PubTrAux1<Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:33:9\n+  --> $DIR/private-in-public-assoc-ty.rs:30:9\n    |\n LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |         type Alias3: PubTrAux2<A = Priv> = u8;\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:37:9\n+  --> $DIR/private-in-public-assoc-ty.rs:34:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -45,7 +45,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:44:9\n+  --> $DIR/private-in-public-assoc-ty.rs:41:9\n    |\n LL |     struct Priv;\n    |     ------------ `Priv` declared as private\n@@ -54,7 +54,7 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:47:9\n+  --> $DIR/private-in-public-assoc-ty.rs:44:9\n    |\n LL |     trait PrivTr {}\n    |     ------------ `PrivTr` declared as private", "previous_filename": "src/test/ui/privacy/private-in-public-assoc-ty.min_tait.stderr"}, {"sha": "c419c7ee4d44abdcc8c6a725588eb3643039e458", "filename": "src/test/ui/privacy/private-in-public-type-alias-impl-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/private-in-public-type-alias-impl-trait.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c7df31529bcf348aa12ba88f31b63c1ee1984f79", "filename": "src/test/ui/privacy/private-in-public-type-alias-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-type-alias-impl-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![deny(private_in_public)]\n \n pub type Pub = impl Default;\n@@ -22,7 +19,9 @@ pub trait Trait {\n \n impl Trait for u8 {\n     type Pub = impl Default;\n-    fn method() -> Self::Pub { Priv }\n+    fn method() -> Self::Pub {\n+        Priv\n+    }\n }\n \n fn main() {}"}, {"sha": "193aed2615ce6429c762643604e6a216b8793dd3", "filename": "src/test/ui/save-analysis/issue-68621.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68621.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: could not find defining uses\n-  --> $DIR/issue-68621.rs:17:19\n-   |\n-LL |     type Future = impl Trait;\n-   |                   ^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "96af085c5b6b8d8692ed0c7d8e2f196447589cf1", "filename": "src/test/ui/save-analysis/issue-68621.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // compile-flags: -Zsave-analysis\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait Trait {}\n "}, {"sha": "3af6d0a3e076e74dcfb886c0e0d77e79037a64a2", "filename": "src/test/ui/save-analysis/issue-68621.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-68621.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/issue-68621.rs:17:19\n+  --> $DIR/issue-68621.rs:14:19\n    |\n LL |     type Future = impl Trait;\n    |                   ^^^^^^^^^^", "previous_filename": "src/test/ui/save-analysis/issue-68621.min_tait.stderr"}, {"sha": "0013d5d66f172389733c6123a51f0394ef2f1da4", "filename": "src/test/ui/traits/alias/issue-83613.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n trait OpaqueTrait {}\n impl<T> OpaqueTrait for T {}\n type OpaqueType = impl OpaqueTrait;"}, {"sha": "7b43d1d86bcd45710c82565deacf386021ca1db7", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:9:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "d53f562e99f4bf8ee866c554f5b0a1bb7cdcde09", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n // const generics in an associated opaque type\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n "}, {"sha": "e0c1b023861278b69a07989c53c0dd367693ae14", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-const.rs:9:12\n+  --> $DIR/assoc-type-const.rs:6:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.min_tait.stderr"}, {"sha": "01263cde8bb1997da4b063c0cdd24c51cc8cb2c6", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,18 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:20:6\n-   |\n-LL | impl<'a, I> UnwrapItemsExt for I {\n-   |      ^^ unconstrained lifetime parameter\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "3f34b00ec77e1b139d044e01e4f5118da263f1b8", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // Tests that we don't allow unconstrained lifetime parameters in impls when\n // the lifetime is used in an associated opaque type.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "e594dc577b1cd1378ce73a76b2bdaed35921cf75", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/assoc-type-lifetime-unconstrained.rs:20:6\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:17:6\n    |\n LL | impl<'a, I> UnwrapItemsExt for I {\n    |      ^^ unconstrained lifetime parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.min_tait.stderr"}, {"sha": "31afbf14e658c65ec5b43cb66b6aa056ea0514d9", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/assoc-type-lifetime.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "39f785d8cc55d5d6e58d6a306112e5fe5c108ede", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n // lifetimes are used in an associated opaque type\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait UnwrapItemsExt<'a> {\n     type Iter;"}, {"sha": "2c48d815e0de4118c38c4d3b2360f13fe278dc5e", "filename": "src/test/ui/type-alias-impl-trait/associated-type-alias-impl-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/associated-type-alias-impl-trait.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "42f07d49ffe25355e713f06e17f7dc3c600f2854", "filename": "src/test/ui/type-alias-impl-trait/associated-type-alias-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-alias-impl-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}"}, {"sha": "e7bca2231de4b97366cbdb55537838f56114b95b", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n #![crate_type = \"rlib\"]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n pub type Foo = impl std::fmt::Debug;\n "}, {"sha": "119f7df1ffdad4b359c10354ed9d9db6aabbe668", "filename": "src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauxiliary%2Fcross_crate_ice2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // Crate that exports an opaque `impl Trait` type. Used for testing cross-crate.\n \n #![crate_type = \"rlib\"]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n pub trait View {\n     type Tmp: Iterator<Item = u32>;\n@@ -18,6 +15,6 @@ impl View for X {\n     type Tmp = impl Iterator<Item = u32>;\n \n     fn test(&self) -> Self::Tmp {\n-        vec![1,2,3].into_iter()\n+        vec![1, 2, 3].into_iter()\n     }\n }"}, {"sha": "b9b50f0b77aa389a47eea3dd47e28b44b30d4d19", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n }"}, {"sha": "164564e8516fc6a07a907a322bc019aedf63b4b3", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound_reduction2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:18:46\n-   |\n-LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n-   |                                              ^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:12:10\n-   |\n-LL | type Foo<V> = impl Trait<V>;\n-   |          ^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "a15074c35936bb2d10cd04ac5d8b5cb27908c086", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "c9d6a43b9094ace0c5ea08b930d92eca1f44439a", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/bound_reduction2.rs:18:46\n+  --> $DIR/bound_reduction2.rs:15:46\n    |\n LL | fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n    |                                              ^^^^^^^^^^^^^\n    |\n note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n-  --> $DIR/bound_reduction2.rs:12:10\n+  --> $DIR/bound_reduction2.rs:9:10\n    |\n LL | type Foo<V> = impl Trait<V>;\n    |          ^", "previous_filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.min_tait.stderr"}, {"sha": "cfb1fe9c19a8bb18a7472e2d5215e1db3fdc1e6a", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bounds-are-checked-2.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:9:13\n-   |\n-LL | type X<T> = impl Clone;\n-   |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | type X<T: std::clone::Clone> = impl Clone;\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "c0359159aebeac4e0eaee315bf260c6351b100c1", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // Make sure that we check that impl trait types implement the traits that they\n // claim to.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type X<T> = impl Clone;\n //~^ ERROR the trait bound `T: Clone` is not satisfied"}, {"sha": "c1f58aa6de6636806332de891339c741f1660027", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Clone` is not satisfied\n-  --> $DIR/bounds-are-checked-2.rs:9:13\n+  --> $DIR/bounds-are-checked-2.rs:6:13\n    |\n LL | type X<T> = impl Clone;\n    |             ^^^^^^^^^^ the trait `Clone` is not implemented for `T`", "previous_filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.min_tait.stderr"}, {"sha": "ca89421cd8bf1281c2c063619773d93489da3192", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,35 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bounds-are-checked.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:12:6\n-   |\n-LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n-   |      ^^^^^^^^^^^\n-   |\n-   = help: you can use the `'static` lifetime directly, in place of `'a`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/bounds-are-checked.rs:9:14\n-   |\n-LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected trait `From<&'a str>`\n-              found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 9:8...\n-  --> $DIR/bounds-are-checked.rs:9:8\n-   |\n-LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n-   |        ^^\n-   = note: ...does not necessarily outlive the static lifetime\n-\n-error: aborting due to previous error; 2 warnings emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "eecef2338c146095d6e4ae31c4cc73c5612fc10a", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // Make sure that we check that impl trait types implement the traits that they\n // claim to.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type X<'a> = impl Into<&'static str> + From<&'a str>;\n //~^ ERROR mismatched types\n@@ -19,8 +16,7 @@ fn extend_lt<'a>(o: &'a str) -> &'static str {\n }\n \n fn main() {\n-    let r =\n-    {\n+    let r = {\n         let s = \"abcdef\".to_string();\n         extend_lt(&s)\n     };"}, {"sha": "d5fafe05887b9e1175e473810bd85f587d3a9b8d", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,21 +1,21 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/bounds-are-checked.rs:12:6\n+  --> $DIR/bounds-are-checked.rs:9:6\n    |\n LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n    |      ^^^^^^^^^^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n error[E0308]: mismatched types\n-  --> $DIR/bounds-are-checked.rs:9:14\n+  --> $DIR/bounds-are-checked.rs:6:14\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected trait `From<&'a str>`\n               found trait `From<&'static str>`\n-note: the lifetime `'a` as defined on the item at 9:8...\n-  --> $DIR/bounds-are-checked.rs:9:8\n+note: the lifetime `'a` as defined on the item at 6:8...\n+  --> $DIR/bounds-are-checked.rs:6:8\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n    |        ^^", "previous_filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.min_tait.stderr"}, {"sha": "68de0c961ba1ca76ae952d51ae5b0c57e8b56d49", "filename": "src/test/ui/type-alias-impl-trait/coherence.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,18 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/coherence.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/coherence.rs:17:6\n-   |\n-LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "1c0f83d6c12da643ed6803a60db80bd303345c3a", "filename": "src/test/ui/type-alias-impl-trait/coherence.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n // aux-build:foreign-crate.rs\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n extern crate foreign_crate;\n "}, {"sha": "6ede0fa14ba707abf6d2b180935d86e69d52ac19", "filename": "src/test/ui/type-alias-impl-trait/coherence.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/coherence.rs:17:6\n+  --> $DIR/coherence.rs:14:6\n    |\n LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n    |      ^ unconstrained type parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/coherence.min_tait.stderr"}, {"sha": "5fc79cf9561fa2be3ef84742afc0ede477402a00", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/declared_but_never_defined.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:9:12\n-   |\n-LL | type Bar = impl std::fmt::Debug;\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "c4bf56a919721140d2f3168ebd76ef65c9673ecc", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "21c2e8a9db618ceffe81427738ab2ddc426244b6", "filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_never_defined.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_never_defined.rs:9:12\n+  --> $DIR/declared_but_never_defined.rs:6:12\n    |\n LL | type Bar = impl std::fmt::Debug;\n    |            ^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/declared_but_never_defined.min_tait.stderr"}, {"sha": "eeccc598f529c5672fd51a38f37ca6ecf48d1059", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,32 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/declared_but_not_defined_in_scope.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:10:20\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/declared_but_not_defined_in_scope.rs:14:5\n-   |\n-LL |     pub type Boo = impl ::std::fmt::Debug;\n-   |                    ---------------------- the expected opaque type\n-...\n-LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `impl Debug` because of return type\n-LL |     \"\"\n-   |     ^^ expected opaque type, found `&str`\n-   |\n-   = note: expected opaque type `impl Debug`\n-                found reference `&'static str`\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "7ea517eb734a459701bfd6d1887416af6f228559", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "0b4c262bbb43b97f0a52e7bb8d9a60cc75a83d2c", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: could not find defining uses\n-  --> $DIR/declared_but_not_defined_in_scope.rs:10:20\n+  --> $DIR/declared_but_not_defined_in_scope.rs:7:20\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/declared_but_not_defined_in_scope.rs:14:5\n+  --> $DIR/declared_but_not_defined_in_scope.rs:11:5\n    |\n LL |     pub type Boo = impl ::std::fmt::Debug;\n    |                    ---------------------- the expected opaque type", "previous_filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.min_tait.stderr"}, {"sha": "60fa141884db32d9ace90d33dafe70ad6b3d2c74", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_defining_uses.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:15:1\n-   |\n-LL | fn bar() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses.rs:11:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "272af7a5204fc919af3e8929b5f00db19915a797", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n@@ -12,6 +9,7 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR concrete type differs from previous\n+fn bar() -> Foo {\n+    //~^ ERROR concrete type differs from previous\n     42i32\n }"}, {"sha": "eaa716bc71c3e4ebb17b379c942ecaa6466c5f9c", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses.rs:15:1\n+  --> $DIR/different_defining_uses.rs:12:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses.rs:11:1\n+  --> $DIR/different_defining_uses.rs:8:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/different_defining_uses.min_tait.stderr"}, {"sha": "5c5ae7eadcbcf8fa4ca329f1f76d6061225b3379", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,35 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_defining_uses_never_type.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:15:1\n-   |\n-LL | fn bar() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:19:1\n-   |\n-LL | fn boo() -> Foo {\n-   | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n-   |\n-note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n-   |\n-LL | fn foo() -> Foo {\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "95cbcfec2dc1557762ecb7b9976446b0c62d0234", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n@@ -12,10 +9,12 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR concrete type differs from previous\n+fn bar() -> Foo {\n+    //~^ ERROR concrete type differs from previous\n     panic!()\n }\n \n-fn boo() -> Foo { //~ ERROR concrete type differs from previous\n+fn boo() -> Foo {\n+    //~^ ERROR concrete type differs from previous\n     loop {}\n }"}, {"sha": "6274029e4f524b0772100efea89953411b7bb57e", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,23 +1,23 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:15:1\n+  --> $DIR/different_defining_uses_never_type.rs:12:1\n    |\n LL | fn bar() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n+  --> $DIR/different_defining_uses_never_type.rs:8:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^\n \n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/different_defining_uses_never_type.rs:19:1\n+  --> $DIR/different_defining_uses_never_type.rs:17:1\n    |\n LL | fn boo() -> Foo {\n    | ^^^^^^^^^^^^^^^ expected `&'static str`, got `()`\n    |\n note: previous use here\n-  --> $DIR/different_defining_uses_never_type.rs:11:1\n+  --> $DIR/different_defining_uses_never_type.rs:8:1\n    |\n LL | fn foo() -> Foo {\n    | ^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type.min_tait.stderr"}, {"sha": "b69622b77bfc49ea3d4070acf1bdcf17bce382c3", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/different_defining_uses_never_type2.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "8549687ea78145ffafddbdef704065771492ac4c", "filename": "src/test/ui/type-alias-impl-trait/different_defining_uses_never_type2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "9641d756cb03e746fbed5ee342dfae3f2ebd3ff5", "filename": "src/test/ui/type-alias-impl-trait/fallback.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/fallback.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "fe1ca2230dacade16cd3108df900f4f594ce49cb", "filename": "src/test/ui/type-alias-impl-trait/fallback.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n // inference variable being completely unconstrained.\n //\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl Copy;\n "}, {"sha": "972e5d94288250dc536e8174543ef2a4abd73b87", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_different_defining_uses.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:14:1\n-   |\n-LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n-   |\n-note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:10:1\n-   |\n-LL | fn my_iter<T>(t: T) -> MyIter<T> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "075351307589b332a0c25c9e201795208f8de492", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n@@ -11,6 +8,7 @@ fn my_iter<T>(t: T) -> MyIter<T> {\n     std::iter::once(t)\n }\n \n-fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR concrete type differs from previous\n+fn my_iter2<T>(t: T) -> MyIter<T> {\n+    //~^ ERROR concrete type differs from previous\n     Some(t).into_iter()\n }"}, {"sha": "f8a058170e37f3de8d039ee6d78257802a1dd822", "filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_different_defining_uses.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_different_defining_uses.rs:14:1\n+  --> $DIR/generic_different_defining_uses.rs:11:1\n    |\n LL | fn my_iter2<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n-  --> $DIR/generic_different_defining_uses.rs:10:1\n+  --> $DIR/generic_different_defining_uses.rs:7:1\n    |\n LL | fn my_iter<T>(t: T) -> MyIter<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_different_defining_uses.min_tait.stderr"}, {"sha": "ecf0e39ed6f6100beca95c984009b51715a672a6", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_lifetime_param.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:10:26\n-   |\n-LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n-   |                          ^^^^^^^^^^^\n-   |\n-note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:8:10\n-   |\n-LL | type Two<'a, 'b> = impl std::fmt::Debug;\n-   |          ^^  ^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "31f992976b1898ccd7cc71773c6b95669560a24a", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,12 +1,10 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n type Two<'a, 'b> = impl std::fmt::Debug;\n \n-fn one<'a>(t: &'a ()) -> Two<'a, 'a> { //~ ERROR non-defining opaque type use\n+fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n+    //~^ ERROR non-defining opaque type use\n     t\n }"}, {"sha": "08b26b8fc1307de927f4d60bccb3e2675ce23791", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_lifetime_param.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_lifetime_param.rs:10:26\n+  --> $DIR/generic_duplicate_lifetime_param.rs:7:26\n    |\n LL | fn one<'a>(t: &'a ()) -> Two<'a, 'a> {\n    |                          ^^^^^^^^^^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:8:10\n+  --> $DIR/generic_duplicate_lifetime_param.rs:5:10\n    |\n LL | type Two<'a, 'b> = impl std::fmt::Debug;\n    |          ^^  ^^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_lifetime_param.min_tait.stderr"}, {"sha": "805cea7127ddf9ff8f0a717794af1e8f5bd9d4b1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,38 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:16:30\n-   |\n-LL | fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n-   |                              ^^^^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:13\n-   |\n-LL | type TwoTys<T, U> = impl Debug;\n-   |             ^  ^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:21:36\n-   |\n-LL | fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:13:19\n-   |\n-LL | type TwoLifetimes<'a, 'b> = impl Debug;\n-   |                   ^^  ^^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:26:50\n-   |\n-LL | fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n-   |                                                  ^^^^^^^^^^^^^^^\n-   |\n-note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:14:22\n-   |\n-LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n-   |                      ^               ^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "e45950c4926b13fd11e1337f781fed428b084eab", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_generics)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n use std::fmt::Debug;\n@@ -14,16 +12,16 @@ type TwoLifetimes<'a, 'b> = impl Debug;\n type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n \n fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n \n fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n \n fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }"}, {"sha": "7ea5efd4e6b02841a2e85882aa42eb1986ea93b8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,35 +1,35 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:16:30\n+  --> $DIR/generic_duplicate_param_use.rs:14:30\n    |\n LL | fn one_ty<T: Debug>(t: T) -> TwoTys<T, T> {\n    |                              ^^^^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:12:13\n+  --> $DIR/generic_duplicate_param_use.rs:10:13\n    |\n LL | type TwoTys<T, U> = impl Debug;\n    |             ^  ^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:21:36\n+  --> $DIR/generic_duplicate_param_use.rs:19:36\n    |\n LL | fn one_lifetime<'a>(t: &'a u32) -> TwoLifetimes<'a, 'a> {\n    |                                    ^^^^^^^^^^^^^^^^^^^^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:13:19\n+  --> $DIR/generic_duplicate_param_use.rs:11:19\n    |\n LL | type TwoLifetimes<'a, 'b> = impl Debug;\n    |                   ^^  ^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use.rs:26:50\n+  --> $DIR/generic_duplicate_param_use.rs:24:50\n    |\n LL | fn one_const<const N: usize>(t: *mut [u8; N]) -> TwoConsts<N, N> {\n    |                                                  ^^^^^^^^^^^^^^^\n    |\n note: constant used multiple times\n-  --> $DIR/generic_duplicate_param_use.rs:14:22\n+  --> $DIR/generic_duplicate_param_use.rs:12:22\n    |\n LL | type TwoConsts<const X: usize, const Y: usize> = impl Debug;\n    |                      ^               ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use.min_tait.stderr"}, {"sha": "ef7d4f1be4eea98e6a104b95b568d251bddff994", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use10.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "c17d595dbb3ad23e07b33f73bad8e6b4dee960d8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "357d477c9f1e25ed42b172edac48fd3efb133466", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:13:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:11:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "a74731df69515f05d454255d9746e4fed54d9845", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "d87e8c5783b65e1020d8b275a000b90171239f26", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:13:27\n+  --> $DIR/generic_duplicate_param_use2.rs:10:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:11:10\n+  --> $DIR/generic_duplicate_param_use2.rs:8:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.min_tait.stderr"}, {"sha": "b2004c8416c4950e9e38ce808fed33bd50a839af", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use3.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use3.rs:13:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use3.rs:11:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "0597b8385d25255673bdc496fad0fd92b64f9fc5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "711de855f0d10978edf72e5311010b57b21d8bb2", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use3.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use3.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:13:27\n+  --> $DIR/generic_duplicate_param_use3.rs:10:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:11:10\n+  --> $DIR/generic_duplicate_param_use3.rs:8:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.min_tait.stderr"}, {"sha": "f5db77a08d74cc420afeff428071d6dc4c0f9a75", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use4.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use4.rs:13:27\n-   |\n-LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n-   |                           ^^^^^^^^^\n-   |\n-note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use4.rs:11:10\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |          ^  ^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "e77c94988f73e4fd7614b1dd76e6563e06282746", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n@@ -11,7 +8,7 @@ fn main() {}\n type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     t\n }\n "}, {"sha": "fcf01f5164ae4aa770e52ada1ed7076194640d13", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use4.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use4.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_duplicate_param_use2.rs:13:27\n+  --> $DIR/generic_duplicate_param_use4.rs:10:27\n    |\n LL | fn one<T: Debug>(t: T) -> Two<T, T> {\n    |                           ^^^^^^^^^\n    |\n note: type used multiple times\n-  --> $DIR/generic_duplicate_param_use2.rs:11:10\n+  --> $DIR/generic_duplicate_param_use4.rs:8:10\n    |\n LL | type Two<T, U> = impl Debug;\n    |          ^  ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use2.min_tait.stderr"}, {"sha": "aab64e72b7bca21bd18958630a53ee09e62a340b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,48 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use5.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:19:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:15:1\n-   |\n-LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n-help: consider restricting type parameter `U`\n-   |\n-LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "dd2f202cf5dc0305b8d5283f31412de0093f5066", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "cb43b897cf9be0bab78496f031949c38e11d0e7b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use5.rs:19:1\n+  --> $DIR/generic_duplicate_param_use5.rs:16:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use5.rs:15:1\n+  --> $DIR/generic_duplicate_param_use5.rs:12:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+  --> $DIR/generic_duplicate_param_use5.rs:8:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -23,7 +23,7 @@ LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use5.rs:11:18\n+  --> $DIR/generic_duplicate_param_use5.rs:8:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.min_tait.stderr"}, {"sha": "a69e99bf8b05f6531306a31efe800003b188093f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,36 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use6.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:18:1\n-   |\n-LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:14:1\n-   |\n-LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:11:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "d54d3cd62e0209c91734996228a2c51b1c33b103", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "509da2320e862cef301bf4cfd4cd5df439d116c1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use6.rs:18:1\n+  --> $DIR/generic_duplicate_param_use6.rs:15:1\n    |\n LL | fn three<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use6.rs:14:1\n+  --> $DIR/generic_duplicate_param_use6.rs:11:1\n    |\n LL | fn two<T: Copy + Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use6.rs:11:18\n+  --> $DIR/generic_duplicate_param_use6.rs:8:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.min_tait.stderr"}, {"sha": "d80c8326ad6c6de3299ef082c026e54e52df1a7e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use7.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "feebf81eef2a7f87274fe42a3b7952fa261737f4", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "e73ac88500e0393cbdc0f8f0e903709a879a854e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,36 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use8.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:17:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:13:1\n-   |\n-LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:10:18\n-   |\n-LL | type Two<T, U> = impl Debug;\n-   |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "4a723b64cdc4f372c517d0b808f9562c24683c8b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "a09f2506258fb14288e30f4f69a038095b829672", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use8.rs:17:1\n+  --> $DIR/generic_duplicate_param_use8.rs:14:1\n    |\n LL | fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(T, u32)`, got `(U, u32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use8.rs:13:1\n+  --> $DIR/generic_duplicate_param_use8.rs:10:1\n    |\n LL | fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use8.rs:10:18\n+  --> $DIR/generic_duplicate_param_use8.rs:7:18\n    |\n LL | type Two<T, U> = impl Debug;\n    |                  ^^^^^^^^^^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.min_tait.stderr"}, {"sha": "0b3d72d67b2426cc4081737000cc4fc877dbe438", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,60 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_duplicate_param_use9.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:24:1\n-   |\n-LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n-   |\n-note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:20:1\n-   |\n-LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n-   |\n-   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: Foo, B> = impl Debug;\n-   |           ^^^^^\n-\n-error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n-   |           ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `B`\n-   |\n-LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n-   |              ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "747081933172b50aca38ca1e5efeaca93a347e5b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "68a30820951fa0533408b30893d980eb775b6ce9", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,17 +1,17 @@\n error: concrete type differs from previous defining opaque type use\n-  --> $DIR/generic_duplicate_param_use9.rs:24:1\n+  --> $DIR/generic_duplicate_param_use9.rs:21:1\n    |\n LL | fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n    |\n note: previous use here\n-  --> $DIR/generic_duplicate_param_use9.rs:20:1\n+  --> $DIR/generic_duplicate_param_use9.rs:17:1\n    |\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n@@ -23,7 +23,7 @@ LL | type Two<A: Foo, B> = impl Debug;\n    |           ^^^^^\n \n error[E0277]: `A` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n@@ -35,7 +35,7 @@ LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `B` doesn't implement `Debug`\n-  --> $DIR/generic_duplicate_param_use9.rs:10:18\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n    |\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.min_tait.stderr"}, {"sha": "39817757f18b4ea47ee5a2ab3298a06c809e0d0b", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_lifetime_param.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "e109c38c98695a4302586bc478d4adacc65d12bf", "filename": "src/test/ui/type-alias-impl-trait/generic_lifetime_param.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_lifetime_param.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "4d7eddfb2fb45ae2a9e93f5c94c414b29585c63f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.min_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,35 +0,0 @@\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:17:21\n-   |\n-LL | fn concrete_ty() -> OneTy<u32> {\n-   |                     ^^^^^^^^^^\n-   |\n-note: used non-generic type `u32` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:12\n-   |\n-LL | type OneTy<T> = impl Debug;\n-   |            ^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:22:27\n-   |\n-LL | type OneLifetime<'a> = impl Debug;\n-   |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n-...\n-LL | fn concrete_lifetime() -> OneLifetime<'static> {\n-   |                           ^^^^^^^^^^^^^^^^^^^^\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:27:24\n-   |\n-LL | fn concrete_const() -> OneConst<{123}> {\n-   |                        ^^^^^^^^^^^^^^^\n-   |\n-note: used non-generic constant `{123}` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:13:21\n-   |\n-LL | type OneConst<const X: usize> = impl Debug;\n-   |                     ^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "9f1bffff77c97fd34b47dd3c2a7268376f63ba49", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_generics)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n use std::fmt::Debug;\n@@ -15,16 +13,16 @@ type OneConst<const X: usize> = impl Debug;\n // Not defining uses, because they doesn't define *all* possible generics.\n \n fn concrete_ty() -> OneTy<u32> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     5u32\n }\n \n fn concrete_lifetime() -> OneLifetime<'static> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR non-defining opaque type use in defining scope\n     6u32\n }\n \n-fn concrete_const() -> OneConst<{123}> {\n-//~^ ERROR non-defining opaque type use in defining scope\n+fn concrete_const() -> OneConst<{ 123 }> {\n+    //~^ ERROR non-defining opaque type use in defining scope\n     7u32\n }"}, {"sha": "eb0c296bb626a565b53d1ebf0c908cdc002c0a0f", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,17 +1,17 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:17:21\n+  --> $DIR/generic_nondefining_use.rs:15:21\n    |\n LL | fn concrete_ty() -> OneTy<u32> {\n    |                     ^^^^^^^^^^\n    |\n note: used non-generic type `u32` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:11:12\n+  --> $DIR/generic_nondefining_use.rs:9:12\n    |\n LL | type OneTy<T> = impl Debug;\n    |            ^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:22:27\n+  --> $DIR/generic_nondefining_use.rs:20:27\n    |\n LL | type OneLifetime<'a> = impl Debug;\n    |                  -- cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n@@ -20,13 +20,13 @@ LL | fn concrete_lifetime() -> OneLifetime<'static> {\n    |                           ^^^^^^^^^^^^^^^^^^^^\n \n error: non-defining opaque type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:27:24\n+  --> $DIR/generic_nondefining_use.rs:25:24\n    |\n-LL | fn concrete_const() -> OneConst<{123}> {\n-   |                        ^^^^^^^^^^^^^^^\n+LL | fn concrete_const() -> OneConst<{ 123 }> {\n+   |                        ^^^^^^^^^^^^^^^^^\n    |\n-note: used non-generic constant `{123}` for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:13:21\n+note: used non-generic constant `{ 123 }` for generic parameter\n+  --> $DIR/generic_nondefining_use.rs:11:21\n    |\n LL | type OneConst<const X: usize> = impl Debug;\n    |                     ^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.full_tait.stderr"}, {"sha": "819ef7b771232ed5fe4b9568de543335944a06f3", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,27 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:8:33\n-   |\n-LL | type WrongGeneric<T: 'static> = impl 'static;\n-   |                                 ^^^^^^^^^^^^\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_not_used.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/generic_not_used.rs:11:73\n-   |\n-LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n-   |  _________________________________________________________________________^\n-LL | |\n-LL | |     v\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-"}, {"sha": "dd6300a64f42e0c95193436578f432aeaedc50db", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,14 +1,11 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n type WrongGeneric<T: 'static> = impl 'static;\n //~^ ERROR: at least one trait must be specified\n \n fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n-//~^ ERROR type parameter `V` is part of concrete type but not used in parameter list\n+    //~^ ERROR type parameter `V` is part of concrete type but not used in parameter list\n     v\n }"}, {"sha": "8015ff7eded9061fc4f84aec174c66bfe1db052d", "filename": "src/test/ui/type-alias-impl-trait/generic_not_used.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_not_used.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:8:33\n+  --> $DIR/generic_not_used.rs:5:33\n    |\n LL | type WrongGeneric<T: 'static> = impl 'static;\n    |                                 ^^^^^^^^^^^^\n \n error: type parameter `V` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/generic_not_used.rs:11:73\n+  --> $DIR/generic_not_used.rs:8:73\n    |\n LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n    |  _________________________________________________________________________^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_not_used.min_tait.stderr"}, {"sha": "28ac61a6b984a6165c820bedb20085eeacd6c7a1", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.nll.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.nll.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,50 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n-   |\n-LL |     let z: i32 = x;\n-   |            ---   ^ expected `i32`, found opaque type\n-   |            |\n-   |            expected due to this\n-...\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ------------ the found opaque type\n-   |\n-   = note:     expected type `i32`\n-           found opaque type `impl Sized`\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:30\n-   |\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                              ^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0308, E0310.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "90a753b5a6de16d58995cd5f7433fff64ab5d17a", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,42 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n-   |\n-LL |     let z: i32 = x;\n-   |            ---   ^ expected `i32`, found opaque type\n-   |            |\n-   |            expected due to this\n-...\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ------------ the found opaque type\n-   |\n-   = note:     expected type `i32`\n-           found opaque type `impl Sized`\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-...\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0308, E0310.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "84f48cd6c0d202228ceb4916811722ac9887180e", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n    |\n LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n@@ -19,15 +19,15 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:30\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:13:30\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                              ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'static`...\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.nll.stderr"}, {"sha": "9c6b93b7ba0405c111e4cae57631b155e95ee03d", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n     let y = 42;"}, {"sha": "18d8daa05e63d168fb413a3ca948c39316897749", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:18\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n    |\n LL |     let z: i32 = x;\n    |            ---   ^ expected `i32`, found opaque type\n@@ -19,7 +19,7 @@ LL | type WrongGeneric<T> = impl 'static;\n            found opaque type `impl Sized`\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n    |\n LL | type WrongGeneric<T> = impl 'static;\n    |                        ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.stderr"}, {"sha": "c4778a46fb0886d50485d934aad98db9f89739be", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,32 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:9:35\n-   |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                                   ^^^^^^^^^^^^\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_underconstrained.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:13:31\n-   |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                          ----- required by this bound in `Underconstrained`\n-...\n-LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n-   |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {\n-   |                    ^^^^^^^\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "766ee36c02be2662034d0c9e8402e79f6f8ff6fe", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "cefc5d99b379ed68381731bfcb85f0817b527d22", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:9:35\n+  --> $DIR/generic_underconstrained.rs:6:35\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                                   ^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/generic_underconstrained.rs:13:31\n+  --> $DIR/generic_underconstrained.rs:10:31\n    |\n LL | type Underconstrained<T: Trait> = impl 'static;\n    |                          ----- required by this bound in `Underconstrained`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.min_tait.stderr"}, {"sha": "7ab73d24274ceded2bb80bae481b2ce50867913b", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,52 +0,0 @@\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:8:45\n-   |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                                             ^^^^^^^^^^^^\n-\n-error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:17:46\n-   |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                                              ^^^^^^^^^^^^\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/generic_underconstrained2.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:12:33\n-   |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                          --------------- required by this bound in `Underconstrained`\n-...\n-LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n-   |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-help: consider restricting type parameter `U`\n-   |\n-LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n-   |                      ^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:21:43\n-   |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                           --------------- required by this bound in `Underconstrained2`\n-...\n-LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n-   |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-help: consider restricting type parameter `V`\n-   |\n-LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n-   |                          ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "cd7c962e2d15b06bbd30805c9a44b96163cb752e", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n "}, {"sha": "8bba62a913e114cc6eed413aa2cd12e74ab71cc9", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,17 +1,17 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:8:45\n+  --> $DIR/generic_underconstrained2.rs:5:45\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                                             ^^^^^^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:17:46\n+  --> $DIR/generic_underconstrained2.rs:14:46\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                                              ^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:12:33\n+  --> $DIR/generic_underconstrained2.rs:9:33\n    |\n LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n    |                          --------------- required by this bound in `Underconstrained`\n@@ -25,7 +25,7 @@ LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `V` doesn't implement `Debug`\n-  --> $DIR/generic_underconstrained2.rs:21:43\n+  --> $DIR/generic_underconstrained2.rs:18:43\n    |\n LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n    |                           --------------- required by this bound in `Underconstrained2`", "previous_filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.min_tait.stderr"}, {"sha": "bdd88134290c8776e4e393ce1699cdc1922418c9", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,18 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/impl-with-unconstrained-param.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/impl-with-unconstrained-param.rs:14:6\n-   |\n-LL | impl<T> X for () {\n-   |      ^ unconstrained type parameter\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0207`."}, {"sha": "851c2f66c475a2a39fcaaaaab3d9d2304106a7bc", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // Ensure that we don't ICE if associated type impl trait is used in an impl\n // with an unconstrained type parameter.\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait X {\n     type I;"}, {"sha": "8cf8fb1d16c4d8f997ecd6dd1f74dccb827aadcc", "filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl-with-unconstrained-param.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/impl-with-unconstrained-param.rs:14:6\n+  --> $DIR/impl-with-unconstrained-param.rs:11:6\n    |\n LL | impl<T> X for () {\n    |      ^ unconstrained type parameter", "previous_filename": "src/test/ui/type-alias-impl-trait/impl-with-unconstrained-param.min_tait.stderr"}, {"sha": "6d1a59aafeda4080070d28558ab4495223513b92", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,32 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/incoherent-assoc-imp-trait.rs:6:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n-   |\n-LL | impl<F> FnOnce<()> for &F {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: conflicting implementation in crate `core`:\n-           - impl<A, F> FnOnce<A> for &F\n-             where F: Fn<A>, F: ?Sized;\n-\n-error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:6\n-   |\n-LL | impl<F> FnOnce<()> for &F {\n-   |      ^ type parameter `F` must be used as the type parameter for some local type\n-   |\n-   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n-   = note: only traits defined in the current crate can be implemented for a type parameter\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n-\n-Some errors have detailed explanations: E0119, E0210.\n-For more information about an error, try `rustc --explain E0119`."}, {"sha": "c46c4715924e59439ba11f562da9504b1d4e606f", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,10 +1,7 @@\n // Regression test for issue 67856\n \n #![feature(unboxed_closures)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n #![feature(fn_traits)]\n \n trait MyTrait {}"}, {"sha": "e1e259187f5f9d60dcf06708993001c6cccad442", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:1\n+  --> $DIR/incoherent-assoc-imp-trait.rs:10:1\n    |\n LL | impl<F> FnOnce<()> for &F {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl<F> FnOnce<()> for &F {\n              where F: Fn<A>, F: ?Sized;\n \n error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n-  --> $DIR/incoherent-assoc-imp-trait.rs:13:6\n+  --> $DIR/incoherent-assoc-imp-trait.rs:10:6\n    |\n LL | impl<F> FnOnce<()> for &F {\n    |      ^ type parameter `F` must be used as the type parameter for some local type", "previous_filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.min_tait.stderr"}, {"sha": "4effd87120e7d1badd314efbb4a5a2d813116fad", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-52843-closure-constrain.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:13:16\n-   |\n-LL |     let null = || -> Opaque { 0 };\n-   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n-   |\n-note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:12:5\n-   |\n-LL |     fn _unused() -> Opaque { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "c2cb4829fb78a20dd1f0ce5ecddc1703391ddc4c", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,24 +0,0 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-52843-closure-constrain.rs:13:22\n-   |\n-LL |     let null = || -> Opaque { 0 };\n-   |                      ^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-52843-closure-constrain.rs:13:16\n-   |\n-LL |     let null = || -> Opaque { 0 };\n-   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `[type error]`\n-   |\n-note: previous use here\n-  --> $DIR/issue-52843-closure-constrain.rs:12:5\n-   |\n-LL |     fn _unused() -> Opaque { String::new() }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "50eeff0b18fd44eb1252568f3733d31b0744f98c", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,16 +1,13 @@\n // Checks to ensure that we properly detect when a closure constrains an opaque type\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {\n     type Opaque = impl Debug;\n     fn _unused() -> Opaque { String::new() }\n-    let null = || -> Opaque { 0 }; //[min_tait]~ ERROR: not permitted here\n+    let null = || -> Opaque { 0 };\n     //~^ ERROR: concrete type differs from previous defining opaque type use\n     println!(\"{:?}\", null());\n }"}, {"sha": "d82050e263ee6648438c786990310899e53aa43f", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-52843-closure-constrain.rs:10:16\n+   |\n+LL |     let null = || -> Opaque { 0 };\n+   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n+   |\n+note: previous use here\n+  --> $DIR/issue-52843-closure-constrain.rs:9:5\n+   |\n+LL |     fn _unused() -> Opaque { String::new() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "35ac0993b29ca430d29c9b17a98cead7b0bc02ee", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-52843.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:6:15\n-   |\n-LL | type Foo<T> = impl Default;\n-   |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | type Foo<T: std::default::Default> = impl Default;\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "b24959d7207200afdd2a19c2fce03982b42ee843", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type Foo<T> = impl Default;\n //~^ ERROR: the trait bound `T: Default` is not satisfied"}, {"sha": "8718a57d9d4f363b5b1218480f11f529e30a6971", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `T: Default` is not satisfied\n-  --> $DIR/issue-52843.rs:6:15\n+  --> $DIR/issue-52843.rs:3:15\n    |\n LL | type Foo<T> = impl Default;\n    |               ^^^^^^^^^^^^ the trait `Default` is not implemented for `T`", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-52843.min_tait.stderr"}, {"sha": "a8dd6a93d3dbfd5a34887e76d4bf96c1c0fd8715", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53096.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53096.rs:14:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "792bd16527be83bde6ac9a00826a3c3ee037e6fc", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n #![feature(const_impl_trait, const_fn_fn_ptr_basics, rustc_attrs)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type Foo = impl Fn() -> usize;\n const fn bar() -> Foo {"}, {"sha": "0af3a75f8532e51154f1ab5b5907e79c7af10b2c", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53096.rs:14:1\n+  --> $DIR/issue-53096.rs:11:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-53096.min_tait.stderr"}, {"sha": "ee4b7eef0bdc477579c74923c8f59386f27a41bc", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53598.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:23:42\n-   |\n-LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n-   |  __________________________________________^\n-LL | |\n-LL | |         S::<T>(Default::default())\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "37b330ba4b8fc39620c1b612155a76968db5b36b", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n // ignore-compare-mode-chalk\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n@@ -21,7 +18,7 @@ impl Foo for S2 {\n     type Item = impl Debug;\n \n     fn foo<T: Debug>(_: T) -> Self::Item {\n-    //~^ Error type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ Error type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         S::<T>(Default::default())\n     }\n }"}, {"sha": "4c8144a2359309a5f19a7724d317b9f0e2c91ec1", "filename": "src/test/ui/type-alias-impl-trait/issue-53598.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53598.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-53598.rs:23:42\n+  --> $DIR/issue-53598.rs:20:42\n    |\n LL |       fn foo<T: Debug>(_: T) -> Self::Item {\n    |  __________________________________________^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-53598.min_tait.stderr"}, {"sha": "b23fed5dadfe77e1eabe97dcdd05deed81d22ba6", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:4:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "176118200e5eda77159ddc43e42ed367e3934fb7", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,8 +1,5 @@\n #![feature(const_impl_trait, generators, generator_trait, rustc_attrs)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::ops::Generator;\n "}, {"sha": "eb1c9603a60d65edaed75e865de779ce1001d7b0", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:19:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.min_tait.stderr"}, {"sha": "98778210bfb370c53e7eafc6b5e58d3065d464d5", "filename": "src/test/ui/type-alias-impl-trait/issue-55099-lifetime-inference.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-55099-lifetime-inference.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "af0780ab0b998aaad268e96d12727f6eebbb4383", "filename": "src/test/ui/type-alias-impl-trait/issue-55099-lifetime-inference.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-55099-lifetime-inference.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,18 +3,13 @@\n // Tests that we don't incorrectly consider a lifetime to part\n // of the concrete type\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n-trait Future {\n-}\n+trait Future {}\n \n struct AndThen<F>(F);\n \n-impl<F> Future for AndThen<F> {\n-}\n+impl<F> Future for AndThen<F> {}\n \n struct Foo<'a> {\n     x: &'a mut (),"}, {"sha": "d31c232fc2391b5e91db715bcb535c28a70cf2ed", "filename": "src/test/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57188-associate-impl-capture.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3a7a5da075f11b841922ceeca209f97ebf952537", "filename": "src/test/ui/type-alias-impl-trait/issue-57188-associate-impl-capture.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57188-associate-impl-capture.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n \n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n struct Baz<'a> {\n     source: &'a str,"}, {"sha": "e2b8b19aeba1bb815d00c8be2e48a06d53cf09c6", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.nll.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.nll.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,47 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57611-trait-alias.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'static X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "61e8da91bbaa98d26c237bfd75488ec993c5297a", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,20 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57611-trait-alias.rs:8:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "a4ccae4eb7ed99e7b5b49de3479f78aa5db2f44b", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,31 +1,31 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n+  --> $DIR/issue-57611-trait-alias.rs:21:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n+  --> $DIR/issue-57611-trait-alias.rs:21:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'static X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:24:9\n+  --> $DIR/issue-57611-trait-alias.rs:21:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.nll.stderr"}, {"sha": "a55fbf9c48a5776a95728c8ca8a66535f22f227d", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -3,10 +3,7 @@\n // FIXME: This should compile, but it currently doesn't\n \n #![feature(trait_alias)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait Foo {\n     type Bar: Baz<Self, Self>;"}, {"sha": "f87beb66d995e6fbd31d11f627b0feeb5cd78893", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n    |\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.stderr"}, {"sha": "4336532cdbbaff26d1afe07c733d7195280e96cb", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57700.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:19:58\n-   |\n-LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n-   |  __________________________________________________________^\n-LL | |\n-LL | |         self\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "f1db4d3291b40709ade965658f99167fefc8e654", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // ignore-compare-mode-chalk\n #![feature(arbitrary_self_types)]\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n use std::ops::Deref;\n \n@@ -17,7 +14,7 @@ impl<C> Foo for C {\n     type Bar = impl Foo;\n \n     fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n-    //~^ Error type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+        //~^ Error type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n         self\n     }\n }"}, {"sha": "c701e3e74ef591cecee73607b7c2ca1df6cf8e52", "filename": "src/test/ui/type-alias-impl-trait/issue-57700.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57700.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `impl Deref<Target = Self>` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-57700.rs:19:58\n+  --> $DIR/issue-57700.rs:16:58\n    |\n LL |       fn foo(self: impl Deref<Target = Self>) -> Self::Bar {\n    |  __________________________________________________________^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-57700.min_tait.stderr"}, {"sha": "b35361c89a485e442ee310dac4a641eff2bfcb48", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-57807-associated-type.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "fcab2c7db2605a341fd2be2d2a66e74caed89247", "filename": "src/test/ui/type-alias-impl-trait/issue-57807-associated-type.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57807-associated-type.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n // that we properly unify associated types within\n // a type alias impl trait\n // check-pass\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait Bar {\n     type A;"}, {"sha": "f0fd5f2f056ab8f76e6876681d9863c68ca3e794", "filename": "src/test/ui/type-alias-impl-trait/issue-58887.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-58887.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "96ac7860283ac3b6f63e53dbd34def8a7095ccae", "filename": "src/test/ui/type-alias-impl-trait/issue-58887.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58887.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,9 +1,6 @@\n // run-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait UnwrapItemsExt {\n     type Iter;"}, {"sha": "164b8881714e7e0a96dd1507edc9e73b713e90f4", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-58951.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7303cbab4a813bb3aedca9667790beb3c5cc1408", "filename": "src/test/ui/type-alias-impl-trait/issue-58951.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-58951.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,13 +1,12 @@\n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type A = impl Iterator;\n \n-fn def_a() -> A { 0..1 }\n+fn def_a() -> A {\n+    0..1\n+}\n \n pub fn use_a() {\n     def_a().map(|x| x);"}, {"sha": "9abdd70bbd9275dbfcc1afe9d71323e36662671b", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -5,7 +5,7 @@ LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: type alias impl trait is not permitted here\n   --> $DIR/issue-60371.rs:13:40"}, {"sha": "9d3f366ad810a34b431a2c0d56c22e64ed461d1f", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60407.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:11:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "b833429c7692249b79d617f9a62771d9ea140b37", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait, rustc_attrs)]\n \n type Debuggable = impl core::fmt::Debug;\n "}, {"sha": "fecee27797a548422223eb85b0d7f6f0c40b7cbc", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:11:1\n+  --> $DIR/issue-60407.rs:8:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-60407.min_tait.stderr"}, {"sha": "72b6b0648f98f9bb2b42c235364309cbc5f32c2b", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60564.rs:3:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:22:34\n-   |\n-LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n-   |                                  ^^^^^^^^^^^^^^\n-   |\n-note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:11:25\n-   |\n-LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n-   |                         ^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "78def0d1136de8c5e7d0c0afde4b3a57ce2bbe2e", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,7 +1,4 @@\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait IterBits {\n     type BitsIter: Iterator<Item = u8>;"}, {"sha": "66fa862ef9d7aa5e827a55eb8ed456a1d53f7baf", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,11 +1,11 @@\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-60564.rs:22:34\n+  --> $DIR/issue-60564.rs:19:34\n    |\n LL |     fn iter_bits(self, n: u8) -> Self::BitsIter {\n    |                                  ^^^^^^^^^^^^^^\n    |\n note: used non-generic type `u8` for generic parameter\n-  --> $DIR/issue-60564.rs:11:25\n+  --> $DIR/issue-60564.rs:8:25\n    |\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^", "previous_filename": "src/test/ui/type-alias-impl-trait/issue-60564.min_tait.stderr"}, {"sha": "1fc38d2f549a13b29573c7faf0b5b3ce01d05781", "filename": "src/test/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-62000-associate-impl-trait-lifetimes.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "36779a0ce89c33b5839222c6721502834216a0c0", "filename": "src/test/ui/type-alias-impl-trait/issue-62000-associate-impl-trait-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-62000-associate-impl-trait-lifetimes.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n \n // check-pass\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n trait MyTrait {\n     type AssocType: Send;"}, {"sha": "1c6759e3454b568bb7727faf430ec3d3df59baf6", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63263-closure-return.rs:9:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7414611a748936fb6797b9175a04f0176ca32558", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -4,8 +4,7 @@\n \n // check-pass\n \n-#![feature(min_type_alias_impl_trait, type_alias_impl_trait)]\n-//~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n pub type Closure = impl FnOnce();\n "}, {"sha": "e1f4ecd3b98144ea540dd188a92958cff061a6f4", "filename": "src/test/ui/type-alias-impl-trait/issue-63263-closure-return.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63263-closure-return.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63263-closure-return.rs:7:39\n-   |\n-LL | #![feature(min_type_alias_impl_trait, type_alias_impl_trait)]\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "53a0016c08eb56580d1af2c6360837089570d041", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,21 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63279.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28] as FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:8:16\n-   |\n-LL | type Closure = impl FnOnce();\n-   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n-   |\n-   = note: expected unit type `()`\n-            found opaque type `impl FnOnce<()>`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "be386ab90ea007ebb552be202338f7fb7203860b", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.min_tait.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,22 +0,0 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-63279.rs:11:11\n-   |\n-LL |     || -> Closure { || () }\n-   |           ^^^^^^^\n-   |\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n-\n-error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28] as FnOnce<()>>::Output == ()`\n-  --> $DIR/issue-63279.rs:8:16\n-   |\n-LL | type Closure = impl FnOnce();\n-   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n-   |\n-   = note: expected unit type `()`\n-            found opaque type `impl FnOnce<()>`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0271, E0658.\n-For more information about an error, try `rustc --explain E0271`."}, {"sha": "b97192a2aed4a19aa4b2eb86d6227c57fe837875", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,14 +1,11 @@\n // compile-flags: -Zsave-analysis\n \n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving\n \n fn c() -> Closure {\n-    || -> Closure { || () } //[min_tait]~ ERROR: not permitted here\n+    || -> Closure { || () }\n }\n \n fn main() {}"}, {"sha": "63a83a60ff876bb4d94c2a54892aa0de18b1affb", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -0,0 +1,12 @@\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:8:5: 8:28] as FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:5:16\n+   |\n+LL | type Closure = impl FnOnce();\n+   |                ^^^^^^^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `impl FnOnce<()>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "ff4fd5dcec73c87b4a5763888470ee0513caa328", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n \n@@ -28,7 +28,7 @@ impl Bar for () {\n     }\n }\n \n-// FIXME(#86731): The below is illegal use of `min_type_alias_impl_trait`\n+// FIXME(#86731): The below is illegal use of `type_alias_impl_trait`\n // but the compiler doesn't report it, we should fix it.\n pub type FooImpl = impl Foo;\n pub type BarImpl = impl Bar<Foo = FooImpl>;"}, {"sha": "fc8d8147167b37a6942b175cd1b78c6c1d9cd8fa", "filename": "src/test/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63677-type-alias-coherence.rs:7:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "28f4a85c9f29039b45a1391c184361e67a43e2e2", "filename": "src/test/ui/type-alias-impl-trait/issue-63677-type-alias-coherence.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63677-type-alias-coherence.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -2,10 +2,7 @@\n // Regression test for issue #63677 - ensure that\n // coherence checking can properly handle 'impl trait'\n // in type aliases\n-// revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-//[full_tait]~^ WARN incomplete\n+#![feature(type_alias_impl_trait)]\n \n pub trait Trait {}\n pub struct S1<T>(T);"}, {"sha": "273928c4d663dbddaab863eced50c441b8f6c721", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28109a7679fbb254ca0962865a8b32b91ddbbd9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs?ref=a28109a7679fbb254ca0962865a8b32b91ddbbd9", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n #![feature(type_alias_impl_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "ee26789d204f1309e6417d43167eddd432b66d98", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eba3228b2a9875d268ff3990903d04e19f6cdb0c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=eba3228b2a9875d268ff3990903d04e19f6cdb0c", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:32\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n-\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:18:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}]}