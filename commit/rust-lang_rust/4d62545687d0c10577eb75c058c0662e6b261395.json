{"sha": "4d62545687d0c10577eb75c058c0662e6b261395", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNjI1NDU2ODdkMGMxMDU3N2ViNzVjMDU4YzA2NjJlNmIyNjEzOTU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-06T01:11:55Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-22T10:36:30Z"}, "message": "Move def_id out add substsref", "tree": {"sha": "53dcc5fcb581ba82f889266452d98b4078ff31b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53dcc5fcb581ba82f889266452d98b4078ff31b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d62545687d0c10577eb75c058c0662e6b261395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d62545687d0c10577eb75c058c0662e6b261395", "html_url": "https://github.com/rust-lang/rust/commit/4d62545687d0c10577eb75c058c0662e6b261395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d62545687d0c10577eb75c058c0662e6b261395/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "html_url": "https://github.com/rust-lang/rust/commit/f13faf58d92d2d6154acc8cf50bf5d237a3a4118"}], "stats": {"total": 230, "additions": 134, "deletions": 96}, "files": [{"sha": "69e98583b191c160486985fde4f3be6d588dfd2d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -1732,20 +1732,22 @@ pub enum PlaceBase<'tcx> {\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct Static<'tcx> {\n     pub ty: Ty<'tcx>,\n-    pub kind: StaticKind,\n+    pub kind: StaticKind<'tcx>,\n+    pub def_id: DefId,\n }\n \n #[derive(\n     Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, RustcEncodable, RustcDecodable,\n )]\n-pub enum StaticKind {\n-    Promoted(Promoted),\n-    Static(DefId),\n+pub enum StaticKind<'tcx> {\n+    Promoted(Promoted, SubstsRef<'tcx>),\n+    Static,\n }\n \n impl_stable_hash_for!(struct Static<'tcx> {\n     ty,\n-    kind\n+    kind,\n+    def_id\n });\n \n /// The `Projection` data structure defines things of the form `base.x`, `*b` or `b[index]`.\n@@ -2106,10 +2108,12 @@ impl Debug for PlaceBase<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         match *self {\n             PlaceBase::Local(id) => write!(fmt, \"{:?}\", id),\n-            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static(def_id) }) => {\n+            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Static, def_id }) => {\n                 write!(fmt, \"({}: {:?})\", ty::tls::with(|tcx| tcx.def_path_str(def_id)), ty)\n             }\n-            PlaceBase::Static(box self::Static { ty, kind: StaticKind::Promoted(promoted) }) => {\n+            PlaceBase::Static(box self::Static {\n+                ty, kind: StaticKind::Promoted(promoted, _), def_id: _\n+            }) => {\n                 write!(fmt, \"({:?}: {:?})\", promoted, ty)\n             }\n         }"}, {"sha": "ac0e784d8bd12df36751c401869f27437cdd01b4", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -708,7 +708,7 @@ macro_rules! make_mir_visitor {\n                     PlaceBase::Local(local) => {\n                         self.visit_local(local, context, location);\n                     }\n-                    PlaceBase::Static(box Static { kind: _, ty }) => {\n+                    PlaceBase::Static(box Static { kind: _, ty, def_id: _ }) => {\n                         self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n                     }\n                 }"}, {"sha": "d2a7571fde1e20336de06e51e2e982f7d3e8a0ba", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -609,17 +609,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         mir::Operand::Copy(\n                             Place {\n                                 base: PlaceBase::Static(box Static {\n-                                    kind: StaticKind::Promoted(promoted),\n+                                    kind: StaticKind::Promoted(promoted, _),\n                                     ty,\n+                                    def_id: _,\n                                 }),\n                                 projection: None,\n                             }\n                         ) |\n                         mir::Operand::Move(\n                             Place {\n                                 base: PlaceBase::Static(box Static {\n-                                    kind: StaticKind::Promoted(promoted),\n+                                    kind: StaticKind::Promoted(promoted, _),\n                                     ty,\n+                                    def_id: _,\n                                 }),\n                                 projection: None,\n                             }"}, {"sha": "f7b94ea134cfcf7c09e7e4a6f6c6e65bcafb5fb7", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -1,4 +1,5 @@\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Instance, Ty};\n+use rustc::ty::subst::Subst;\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::mir;\n use rustc::mir::tcx::PlaceTy;\n@@ -454,16 +455,25 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::PlaceRef {\n                 base: mir::PlaceBase::Static(box mir::Static {\n                     ty,\n-                    kind: mir::StaticKind::Promoted(promoted),\n+                    kind: mir::StaticKind::Promoted(promoted, substs),\n+                    def_id,\n                 }),\n                 projection: None,\n             } => {\n+                debug!(\"promoted={:?}, def_id={:?}, substs={:?}, self_substs={:?}\", promoted, def_id, substs, self.instance.substs);\n                 let param_env = ty::ParamEnv::reveal_all();\n+                let instance = Instance::new(*def_id, substs.subst(bx.tcx(), self.instance.substs));\n+                debug!(\"instance: {:?}\", instance);\n                 let cid = mir::interpret::GlobalId {\n-                    instance: self.instance,\n+                    instance: instance,\n                     promoted: Some(*promoted),\n                 };\n-                let layout = cx.layout_of(self.monomorphize(&ty));\n+                let mono_ty = tcx.subst_and_normalize_erasing_regions(\n+                    instance.substs,\n+                    param_env,\n+                    ty,\n+                );\n+                let layout = cx.layout_of(mono_ty);\n                 match bx.tcx().const_eval(param_env.and(cid)) {\n                     Ok(val) => match val.val {\n                         mir::interpret::ConstValue::ByRef { alloc, offset } => {\n@@ -487,7 +497,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::PlaceRef {\n                 base: mir::PlaceBase::Static(box mir::Static {\n                     ty,\n-                    kind: mir::StaticKind::Static(def_id),\n+                    kind: mir::StaticKind::Static,\n+                    def_id,\n                 }),\n                 projection: None,\n             } => {"}, {"sha": "251d4b727c7544b35427d1b81e5e3e8db6bfd809", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -159,7 +159,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(_),\n+                        kind: StaticKind::Promoted(..),\n                         ..\n                     }),\n                 projection: None,\n@@ -169,7 +169,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Static(def_id),\n+                        kind: StaticKind::Static,\n+                        def_id,\n                         ..\n                     }),\n                 projection: None,\n@@ -440,7 +441,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     pub fn is_place_thread_local(&self, place_ref: PlaceRef<'cx, 'tcx>) -> bool {\n         if let PlaceRef {\n             base: PlaceBase::Static(box Static {\n-                kind: StaticKind::Static(def_id),\n+                kind: StaticKind::Static,\n+                def_id,\n                 ..\n             }),\n             projection: None,"}, {"sha": "33cec78f3dfd5f93eaef28f18f42998af19f457f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -1467,13 +1467,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         assert!(root_place.projection.is_none());\n         let (might_be_alive, will_be_dropped) = match root_place.base {\n             PlaceBase::Static(box Static {\n-                kind: StaticKind::Promoted(_),\n+                kind: StaticKind::Promoted(..),\n                 ..\n             }) => {\n                 (true, false)\n             }\n             PlaceBase::Static(box Static {\n-                kind: StaticKind::Static(_),\n+                kind: StaticKind::Static,\n                 ..\n             }) => {\n                 // Thread-locals might be dropped after the function exits, but\n@@ -2155,7 +2155,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             // `Place::Promoted` if the promotion weren't 100% legal. So we just forward this\n             PlaceRef {\n                 base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(_),\n+                    kind: StaticKind::Promoted(..),\n                     ..\n                 }),\n                 projection: None,\n@@ -2167,7 +2167,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }),\n             PlaceRef {\n                 base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Static(def_id),\n+                    kind: StaticKind::Static,\n+                    def_id,\n                     ..\n                 }),\n                 projection: None,"}, {"sha": "091b3eeb05f6cc761ab838841db1142c85047553", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(_),\n+                        kind: StaticKind::Promoted(..),\n                         ..\n                     }),\n                 projection: None,\n@@ -158,7 +158,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 base:\n                     PlaceBase::Static(box Static {\n-                        kind: StaticKind::Static(def_id),\n+                        kind: StaticKind::Static,\n+                        def_id,\n                         ..\n                     }),\n                 projection: None,"}, {"sha": "35dd5b5d7eb194492cebb6c5256cb266b9f42048", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -421,7 +421,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             let mut place_ty = match place_base {\n                 PlaceBase::Local(index) =>\n                     PlaceTy::from_ty(self.body.local_decls[*index].ty),\n-                PlaceBase::Static(box Static { kind, ty: sty }) => {\n+                PlaceBase::Static(box Static { kind, ty: sty, def_id }) => {\n                     let sty = self.sanitize_type(place, sty);\n                     let check_err =\n                         |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n@@ -445,7 +445,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                             };\n                         };\n                     match kind {\n-                        StaticKind::Promoted(promoted) => {\n+                        StaticKind::Promoted(promoted, _) => {\n                             if !self.errors_reported {\n                                 let promoted_body = &self.promoted[*promoted];\n                                 self.sanitize_promoted(promoted_body, location);\n@@ -454,7 +454,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                                 check_err(self, place, promoted_ty, sty);\n                             }\n                         }\n-                        StaticKind::Static(def_id) => {\n+                        StaticKind::Static => {\n                             let ty = self.tcx().type_of(*def_id);\n                             let ty = self.cx.normalize(ty, location);\n \n@@ -471,7 +471,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                     let is_promoted = match place {\n                         Place {\n                             base: PlaceBase::Static(box Static {\n-                                kind: StaticKind::Promoted(_),\n+                                kind: StaticKind::Promoted(..),\n                                 ..\n                             }),\n                             projection: None,"}, {"sha": "5caba637ccc4abf1b7473d32e478d0da0d69daca", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -46,9 +46,9 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n                         }\n                     }\n                 }\n-                PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. }) =>\n+                PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_, _), .. }) =>\n                     false,\n-                PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. }) => {\n+                PlaceBase::Static(box Static{ kind: StaticKind::Static, def_id, .. }) => {\n                     tcx.is_mutable_static(*def_id)\n                 }\n             };"}, {"sha": "4f469174b392d04df81651befb6a542d0c45d507", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -329,11 +329,11 @@ fn place_base_conflict<'tcx>(\n         }\n         (PlaceBase::Static(s1), PlaceBase::Static(s2)) => {\n             match (&s1.kind, &s2.kind) {\n-                (StaticKind::Static(def_id_1), StaticKind::Static(def_id_2)) => {\n-                    if def_id_1 != def_id_2 {\n+                (StaticKind::Static, StaticKind::Static) => {\n+                    if s1.def_id != s2.def_id {\n                         debug!(\"place_element_conflict: DISJOINT-STATIC\");\n                         Overlap::Disjoint\n-                    } else if tcx.is_mutable_static(*def_id_1) {\n+                    } else if tcx.is_mutable_static(s1.def_id) {\n                         // We ignore mutable statics - they can only be unsafe code.\n                         debug!(\"place_element_conflict: IGNORE-STATIC-MUT\");\n                         Overlap::Disjoint\n@@ -342,7 +342,7 @@ fn place_base_conflict<'tcx>(\n                         Overlap::EqualOrDisjoint\n                     }\n                 },\n-                (StaticKind::Promoted(promoted_1), StaticKind::Promoted(promoted_2)) => {\n+                (StaticKind::Promoted(promoted_1, _), StaticKind::Promoted(promoted_2, _)) => {\n                     if promoted_1 == promoted_2 {\n                         if let ty::Array(_, len) = s1.ty.sty {\n                             if let Some(0) = len.try_eval_usize(tcx, param_env) {"}, {"sha": "98cf4bba1c75fc68713441bd871dd0d88457804b", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -126,7 +126,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::StaticRef { id } => block.and(Place {\n                 base: PlaceBase::Static(Box::new(Static {\n                     ty: expr.ty,\n-                    kind: StaticKind::Static(id),\n+                    kind: StaticKind::Static,\n+                    def_id: id,\n                 })),\n                 projection: None,\n             }),"}, {"sha": "23c9e7fdf67ce7c692f62723408c1200e68f887f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -585,19 +585,19 @@ where\n         use rustc::mir::StaticKind;\n \n         Ok(match place_static.kind {\n-            StaticKind::Promoted(promoted) => {\n+            StaticKind::Promoted(promoted, _) => {\n                 let instance = self.frame().instance;\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),\n                 })?\n             }\n \n-            StaticKind::Static(def_id) => {\n+            StaticKind::Static => {\n                 let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;\n-                let instance = ty::Instance::mono(*self.tcx, def_id);\n+                let instance = ty::Instance::mono(*self.tcx, place_static.def_id);\n                 let cid = GlobalId {\n                     instance,\n                     promoted: None"}, {"sha": "512ace1a4728cc16dec51151688b2d75bf43ab9d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -180,7 +180,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n-use rustc::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n@@ -661,7 +661,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         _context: mir::visit::PlaceContext,\n                         location: Location) {\n         match place_base {\n-            PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. }) => {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }) => {\n                 debug!(\"visiting static {:?} @ {:?}\", def_id, location);\n \n                 let tcx = self.tcx;\n@@ -670,8 +670,23 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(MonoItem::Static(*def_id));\n                 }\n             }\n-            PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => {\n-                // FIXME: should we handle promoteds here instead of eagerly in collect_neighbours?\n+            PlaceBase::Static(box Static { kind: StaticKind::Promoted(promoted, substs), def_id, .. }) => {\n+                debug!(\"collecting promoted(def_id: {:?}, promoted: {:?}, substs: {:?})\", def_id, promoted, substs);\n+                debug!(\"param_substs: {:?}\", self.param_substs);\n+                let param_env = ty::ParamEnv::reveal_all();\n+                let cid = GlobalId {\n+                    instance: Instance::new(*def_id, substs.subst(self.tcx, self.param_substs)),\n+                    promoted: Some(*promoted),\n+                };\n+                debug!(\"cid: {:?}\", cid);\n+                match self.tcx.const_eval(param_env.and(cid)) {\n+                    Ok(val) => collect_const(self.tcx, val, substs, self.output),\n+                    Err(ErrorHandled::Reported) => {},\n+                    Err(ErrorHandled::TooGeneric) => {\n+                        let span = self.tcx.promoted_mir(*def_id)[*promoted].span;\n+                        span_bug!(span, \"collection encountered polymorphic constant\")\n+                    },\n+                }\n             }\n             PlaceBase::Local(_) => {\n                 // Locals have no relevance for collector\n@@ -1231,24 +1246,6 @@ fn collect_neighbours<'tcx>(\n         output,\n         param_substs: instance.substs,\n     }.visit_body(&body);\n-\n-    if let ty::InstanceDef::Item(def_id) = instance.def {\n-        let param_env = ty::ParamEnv::reveal_all();\n-        let promoted = tcx.promoted_mir(def_id);\n-        for (promoted, promoted_body) in promoted.iter_enumerated() {\n-            let cid = GlobalId {\n-                instance,\n-                promoted: Some(promoted),\n-            };\n-            match tcx.const_eval(param_env.and(cid)) {\n-                Ok(val) => collect_const(tcx, val, instance.substs, output),\n-                Err(ErrorHandled::Reported) => {},\n-                Err(ErrorHandled::TooGeneric) => span_bug!(\n-                    promoted_body.span, \"collection encountered polymorphic constant\",\n-                ),\n-            }\n-        }\n-    }\n }\n \n fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {"}, {"sha": "539922c54d12d9530b49e755f2d6d93bf34266ce", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -205,10 +205,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 PlaceBase::Local(..) => {\n                     // Locals are safe.\n                 }\n-                PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => {\n+                PlaceBase::Static(box Static { kind: StaticKind::Promoted(_, _), .. }) => {\n                     bug!(\"unsafety checking should happen before promotion\")\n                 }\n-                PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. }) => {\n+                PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }) => {\n                     if self.tcx.is_mutable_static(*def_id) {\n                         self.require_unsafe(\"use of mutable static\",\n                             \"mutable statics can be mutated by multiple threads: aliasing \\"}, {"sha": "b6146b6b7227df927f66e5b06b1437b33d612fa3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -285,7 +285,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         place.iterate(|place_base, place_projection| {\n             let mut eval = match place_base {\n                 PlaceBase::Local(loc) => self.get_const(*loc).clone()?,\n-                PlaceBase::Static(box Static {kind: StaticKind::Promoted(promoted), ..}) => {\n+                PlaceBase::Static(box Static {kind: StaticKind::Promoted(promoted, _), ..}) => {\n                     let generics = self.tcx.generics_of(self.source.def_id());\n                     if generics.requires_monomorphization(self.tcx) {\n                         // FIXME: can't handle code with generics"}, {"sha": "533e08f5e1fd3cf40c446a4b8e61ae8d6ec16f7a", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -394,7 +394,6 @@ impl Inliner<'tcx> {\n \n                 let mut local_map = IndexVec::with_capacity(callee_body.local_decls.len());\n                 let mut scope_map = IndexVec::with_capacity(callee_body.source_scopes.len());\n-                let promoted_map = IndexVec::with_capacity(self.tcx.promoted_mir(callsite.callee).len());\n \n                 for mut scope in callee_body.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n@@ -420,11 +419,6 @@ impl Inliner<'tcx> {\n                     local_map.push(idx);\n                 }\n \n-                //TODO fixme\n-                //promoted_map.extend(\n-                //    self.tcx.promoted_mir(callsite.callee).iter().cloned().map(|p| caller_body.promoted.push(p))\n-                //);\n-\n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`\n                 // Place could result in two different locations if `f`\n@@ -485,12 +479,12 @@ impl Inliner<'tcx> {\n                     args: &args,\n                     local_map,\n                     scope_map,\n-                    promoted_map,\n-                    _callsite: callsite,\n+                    callsite,\n                     destination: dest,\n                     return_block,\n                     cleanup_block: cleanup,\n-                    in_cleanup_block: false\n+                    in_cleanup_block: false,\n+                    tcx: self.tcx,\n                 };\n \n \n@@ -645,12 +639,12 @@ struct Integrator<'a, 'tcx> {\n     args: &'a [Local],\n     local_map: IndexVec<Local, Local>,\n     scope_map: IndexVec<SourceScope, SourceScope>,\n-    promoted_map: IndexVec<Promoted, Promoted>,\n-    _callsite: CallSite<'tcx>,\n+    callsite: CallSite<'tcx>,\n     destination: Place<'tcx>,\n     return_block: BasicBlock,\n     cleanup_block: Option<BasicBlock>,\n     in_cleanup_block: bool,\n+    tcx: TyCtxt<'tcx>,\n }\n \n impl<'a, 'tcx> Integrator<'a, 'tcx> {\n@@ -701,14 +695,14 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n             },\n             Place {\n                 base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(promoted),\n+                    kind: StaticKind::Promoted(_, substs),\n                     ..\n                 }),\n                 projection: None,\n             } => {\n-                if let Some(p) = self.promoted_map.get(*promoted).cloned() {\n-                    *promoted = p;\n-                }\n+                let adjusted_substs = substs.subst(self.tcx, self.callsite.substs);\n+                debug!(\"replacing substs {:?} with {:?}\", substs, adjusted_substs);\n+                *substs = adjusted_substs;\n             },\n             _ => self.super_place(place, _ctxt, _location)\n         }"}, {"sha": "cb0ce77d5c01483c8d740e6429feff64b3cd356d", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -12,9 +12,11 @@\n //! initialization and can otherwise silence errors, if\n //! move analysis runs after promotion on broken MIR.\n \n+use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, MutatingUseContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n+use rustc::ty::subst::InternalSubsts;\n use rustc::ty::TyCtxt;\n use syntax_pos::Span;\n \n@@ -293,17 +295,18 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         new_temp\n     }\n \n-    fn promote_candidate(mut self, candidate: Candidate, next_promoted_id: usize) -> Option<Body<'tcx>> {\n+    fn promote_candidate(mut self, def_id: DefId, candidate: Candidate, next_promoted_id: usize) -> Option<Body<'tcx>> {\n         let mut operand = {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n-            let mut promoted_place = |ty, span| {\n+            let mut promoted_place = |ty, substs, span| {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n                 Place {\n                     base: PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(promoted_id),\n-                        ty\n+                        kind: StaticKind::Promoted(promoted_id, substs),\n+                        ty,\n+                        def_id,\n                     }),\n                     projection: None,\n                 }\n@@ -319,7 +322,14 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let span = statement.source_info.span;\n \n                             Operand::Move(Place {\n-                                base: mem::replace(&mut place.base, promoted_place(ty, span).base),\n+                                base: mem::replace(\n+                                    &mut place.base,\n+                                    promoted_place(\n+                                        ty,\n+                                        InternalSubsts::identity_for_item(self.tcx, def_id),\n+                                        span,\n+                                    ).base\n+                                ),\n                                 projection: None,\n                             })\n                         }\n@@ -332,7 +342,16 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         StatementKind::Assign(_, box Rvalue::Repeat(ref mut operand, _)) => {\n                             let ty = operand.ty(local_decls, self.tcx);\n                             let span = statement.source_info.span;\n-                            mem::replace(operand, Operand::Copy(promoted_place(ty, span)))\n+                            mem::replace(\n+                                operand,\n+                                Operand::Copy(\n+                                    promoted_place(\n+                                        ty,\n+                                        InternalSubsts::identity_for_item(self.tcx, def_id),\n+                                        span,\n+                                    )\n+                                )\n+                            )\n                         }\n                         _ => bug!()\n                     }\n@@ -343,7 +362,12 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         TerminatorKind::Call { ref mut args, .. } => {\n                             let ty = args[index].ty(local_decls, self.tcx);\n                             let span = terminator.source_info.span;\n-                            let operand = Operand::Copy(promoted_place(ty, span));\n+                            let operand =\n+                                Operand::Copy(\n+                                    promoted_place(\n+                                        ty,\n+                                        InternalSubsts::identity_for_item(self.tcx, def_id),\n+                                        span));\n                             mem::replace(&mut args[index], operand)\n                         }\n                         // We expected a `TerminatorKind::Call` for which we'd like to promote an\n@@ -385,6 +409,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n }\n \n pub fn promote_candidates<'tcx>(\n+    def_id: DefId,\n     body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,\n@@ -442,7 +467,7 @@ pub fn promote_candidates<'tcx>(\n             keep_original: false\n         };\n \n-        if let Some(promoted) = promoter.promote_candidate(candidate, promotions.len()) {\n+        if let Some(promoted) = promoter.promote_candidate(def_id, candidate, promotions.len()) {\n             promotions.push(promoted);\n         }\n     }"}, {"sha": "70a394ad983300f02b114f39b57b5cecb2cacc18", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -223,7 +223,7 @@ trait Qualif {\n             } => Self::in_local(cx, *local),\n             PlaceRef {\n                 base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(_),\n+                    kind: StaticKind::Promoted(..),\n                     ..\n                 }),\n                 projection: None,\n@@ -434,13 +434,13 @@ impl Qualif for IsNotPromotable {\n \n     fn in_static(cx: &ConstCx<'_, 'tcx>, static_: &Static<'tcx>) -> bool {\n         match static_.kind {\n-            StaticKind::Promoted(_) => unreachable!(),\n-            StaticKind::Static(def_id) => {\n+            StaticKind::Promoted(_, _) => unreachable!(),\n+            StaticKind::Static => {\n                 // Only allow statics (not consts) to refer to other statics.\n                 let allowed = cx.mode == Mode::Static || cx.mode == Mode::StaticMut;\n \n                 !allowed ||\n-                    cx.tcx.get_attrs(def_id).iter().any(\n+                    cx.tcx.get_attrs(static_.def_id).iter().any(\n                         |attr| attr.check_name(sym::thread_local)\n                     )\n             }\n@@ -873,7 +873,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                     dest_projection = &proj.base;\n                 },\n                 (&PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(_),\n+                    kind: StaticKind::Promoted(..),\n                     ..\n                 }), None) => bug!(\"promoteds don't exist yet during promotion\"),\n                 (&PlaceBase::Static(box Static{ kind: _, .. }), None) => {\n@@ -1028,10 +1028,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         self.super_place_base(place_base, context, location);\n         match place_base {\n             PlaceBase::Local(_) => {}\n-            PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. }) => {\n+            PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_, _), .. }) => {\n                 unreachable!()\n             }\n-            PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. }) => {\n+            PlaceBase::Static(box Static{ kind: StaticKind::Static, def_id, .. }) => {\n                 if self.tcx\n                         .get_attrs(*def_id)\n                         .iter()\n@@ -1661,7 +1661,7 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n \n             // Do the actual promotion, now that we know what's viable.\n             self.promoted.set(\n-                Some(promote_consts::promote_candidates(body, tcx, temps, candidates))\n+                Some(promote_consts::promote_candidates(def_id, body, tcx, temps, candidates))\n             );\n         } else {\n             if !body.control_flow_destroyed.is_empty() {"}, {"sha": "56093527aee249c3301af89bcc46922b4d1055ed", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d62545687d0c10577eb75c058c0662e6b261395/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=4d62545687d0c10577eb75c058c0662e6b261395", "patch": "@@ -264,11 +264,11 @@ fn check_place(\n         }\n \n         match place_base {\n-            PlaceBase::Static(box Static { kind: StaticKind::Static(_), .. }) => {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static, .. }) => {\n                 Err((span, \"cannot access `static` items in const fn\".into()))\n             }\n             PlaceBase::Local(_)\n-            | PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => Ok(()),\n+            | PlaceBase::Static(box Static { kind: StaticKind::Promoted(_, _), .. }) => Ok(()),\n         }\n     })\n }"}]}