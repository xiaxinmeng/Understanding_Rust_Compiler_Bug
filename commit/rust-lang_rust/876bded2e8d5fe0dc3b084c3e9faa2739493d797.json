{"sha": "876bded2e8d5fe0dc3b084c3e9faa2739493d797", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NmJkZWQyZThkNWZlMGRjM2IwODRjM2U5ZmFhMjczOTQ5M2Q3OTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T09:07:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-28T09:39:29Z"}, "message": "run Windows TLS dtor function", "tree": {"sha": "e5451d522ec4cb58975560b51894e9b3fb37cb32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5451d522ec4cb58975560b51894e9b3fb37cb32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876bded2e8d5fe0dc3b084c3e9faa2739493d797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876bded2e8d5fe0dc3b084c3e9faa2739493d797", "html_url": "https://github.com/rust-lang/rust/commit/876bded2e8d5fe0dc3b084c3e9faa2739493d797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876bded2e8d5fe0dc3b084c3e9faa2739493d797/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02897e03cfe6b04d28c0f3197563d1dba3f7658d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02897e03cfe6b04d28c0f3197563d1dba3f7658d", "html_url": "https://github.com/rust-lang/rust/commit/02897e03cfe6b04d28c0f3197563d1dba3f7658d"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "512b4176df8b4b427be1cad54702e0f3323fad48", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=876bded2e8d5fe0dc3b084c3e9faa2739493d797", "patch": "@@ -184,10 +184,9 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n-    // FIXME: We always ignore leaks on some OSs where we do not\n-    // correctly implement TLS destructors.\n-    let target_os = &tcx.sess.target.target.target_os;\n-    let ignore_leaks = config.ignore_leaks || target_os == \"windows\";\n+    // FIXME: on Windows, locks and TLS dtor management allocate and leave that memory in `static`s.\n+    // So we need https://github.com/rust-lang/miri/issues/940 to fix the leaks there.\n+    let ignore_leaks = config.ignore_leaks || tcx.sess.target.target.target_os == \"windows\";\n \n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {\n         Ok(v) => v,"}, {"sha": "aa327b468bf812c12eb047fff67a245102eb4fcc", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=876bded2e8d5fe0dc3b084c3e9faa2739493d797", "patch": "@@ -413,7 +413,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn set_last_error_from_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n         use std::io::ErrorKind::*;\n         let this = self.eval_context_mut();\n-        let target = &this.tcx.tcx.sess.target.target;\n+        let target = &this.tcx.sess.target.target;\n         let last_error = if target.options.target_family == Some(\"unix\".to_owned()) {\n             this.eval_libc(match e.kind() {\n                 ConnectionRefused => \"ECONNREFUSED\","}, {"sha": "4bf3d0d7f4465c5a5c40f16f2fe3dbf7a17bcd04", "filename": "src/machine.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=876bded2e8d5fe0dc3b084c3e9faa2739493d797", "patch": "@@ -102,6 +102,20 @@ impl MemoryExtra {\n         }\n     }\n \n+    fn add_extern_static<'tcx, 'mir>(\n+        this: &mut MiriEvalContext<'mir, 'tcx>,\n+        name: &str,\n+        ptr: Scalar<Tag>,\n+    ) {\n+        let ptr = ptr.assert_ptr();\n+        assert_eq!(ptr.offset, Size::ZERO);\n+        this.memory\n+            .extra\n+            .extern_statics\n+            .insert(Symbol::intern(name), ptr.alloc_id)\n+            .unwrap_none();\n+    }\n+\n     /// Sets up the \"extern statics\" for this machine.\n     pub fn init_extern_statics<'tcx, 'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n@@ -113,17 +127,17 @@ impl MemoryExtra {\n                 let layout = this.layout_of(this.tcx.types.usize)?;\n                 let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n                 this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n-                this.memory\n-                    .extra\n-                    .extern_statics\n-                    .insert(Symbol::intern(\"__cxa_thread_atexit_impl\"), place.ptr.assert_ptr().alloc_id)\n-                    .unwrap_none();\n+                Self::add_extern_static(this, \"__cxa_thread_atexit_impl\", place.ptr);\n                 // \"environ\"\n-                this.memory\n-                    .extra\n-                    .extern_statics\n-                    .insert(Symbol::intern(\"environ\"), this.machine.env_vars.environ.unwrap().ptr.assert_ptr().alloc_id)\n-                    .unwrap_none();\n+                Self::add_extern_static(this, \"environ\", this.machine.env_vars.environ.unwrap().ptr);\n+            }\n+            \"windows\" => {\n+                // \"_tls_used\"\n+                // This is some obscure hack that is part of the Windows TLS story. It's a `u8`.\n+                let layout = this.layout_of(this.tcx.types.u8)?;\n+                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                this.write_scalar(Scalar::from_u8(0), place.into())?;\n+                Self::add_extern_static(this, \"_tls_used\", place.ptr);\n             }\n             _ => {} // No \"extern statics\" supported on this target\n         }"}, {"sha": "ecf24e2f20384a60af67a638569efbf7edcbddb3", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=876bded2e8d5fe0dc3b084c3e9faa2739493d797", "patch": "@@ -19,7 +19,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn min_align(&self, size: u64, kind: MiriMemoryKind) -> Align {\n         let this = self.eval_context_ref();\n         // List taken from `libstd/sys_common/alloc.rs`.\n-        let min_align = match this.tcx.tcx.sess.target.target.arch.as_str() {\n+        let min_align = match this.tcx.sess.target.target.arch.as_str() {\n             \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n             \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n             arch => bug!(\"Unsupported target architecture: {}\", arch),"}, {"sha": "c753689f4c258de5749a799a83788bf346ddbc7b", "filename": "src/shims/tls.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876bded2e8d5fe0dc3b084c3e9faa2739493d797/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=876bded2e8d5fe0dc3b084c3e9faa2739493d797", "patch": "@@ -159,6 +159,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         assert!(!this.machine.tls.dtors_running, \"running TLS dtors twice\");\n         this.machine.tls.dtors_running = true;\n \n+        if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows has a special magic linker section that is run on certain events.\n+            // Instead of searching for that section and supporting arbitrary hooks in there\n+            // (that would be basically https://github.com/rust-lang/miri/issues/450),\n+            // we specifically look up the static in libstd that we know is placed\n+            // in that section.\n+            let thread_callback = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"thread_local\", \"p_thread_callback\"])?;\n+            let thread_callback = this.memory.get_fn(thread_callback.not_undef()?)?.as_instance()?;\n+\n+            // The signature of this function is `unsafe extern \"system\" fn(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID)`.\n+            let reason = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"DLL_PROCESS_DETACH\"])?;\n+            let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+            this.call_function(\n+                thread_callback,\n+                &[Scalar::ptr_null(this).into(), reason.into(), Scalar::ptr_null(this).into()],\n+                Some(ret_place),\n+                StackPopCleanup::None { cleanup: true },\n+            )?;\n+\n+            // step until out of stackframes\n+            this.run()?;\n+\n+            // Windows doesn't have other destructors.\n+            return Ok(());\n+        }\n+\n         // The macOS global dtor runs \"before any TLS slots get freed\", so do that first.\n         if let Some((instance, data)) = this.machine.tls.global_dtor {\n             trace!(\"Running global dtor {:?} on {:?}\", instance, data);\n@@ -199,7 +225,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 None => this.machine.tls.fetch_tls_dtor(None),\n             };\n         }\n-        // FIXME: On a windows target, call `unsafe extern \"system\" fn on_tls_callback`.\n         Ok(())\n     }\n }"}]}