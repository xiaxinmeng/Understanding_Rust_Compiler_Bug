{"sha": "884f04670aea239f06fe5b6ff7a9f2073034f8bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NGYwNDY3MGFlYTIzOWYwNmZlNWI2ZmY3YTlmMjA3MzAzNGY4YmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-08T11:30:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-08T11:34:30Z"}, "message": "diagnostics is now a function", "tree": {"sha": "7fb47d6afa2eca87d2cd330e8e39af2ce3615dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb47d6afa2eca87d2cd330e8e39af2ce3615dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/884f04670aea239f06fe5b6ff7a9f2073034f8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/884f04670aea239f06fe5b6ff7a9f2073034f8bc", "html_url": "https://github.com/rust-lang/rust/commit/884f04670aea239f06fe5b6ff7a9f2073034f8bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/884f04670aea239f06fe5b6ff7a9f2073034f8bc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8328e196dd093f85e51420fa27d9d9bcdf65e866", "url": "https://api.github.com/repos/rust-lang/rust/commits/8328e196dd093f85e51420fa27d9d9bcdf65e866", "html_url": "https://github.com/rust-lang/rust/commit/8328e196dd093f85e51420fa27d9d9bcdf65e866"}], "stats": {"total": 126, "additions": 62, "deletions": 64}, "files": [{"sha": "a499ac7c60606ca69a0137f302cf53d551d1a7ba", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 60, "deletions": 62, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/884f04670aea239f06fe5b6ff7a9f2073034f8bc/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884f04670aea239f06fe5b6ff7a9f2073034f8bc/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=884f04670aea239f06fe5b6ff7a9f2073034f8bc", "patch": "@@ -2,70 +2,68 @@ use hir::{Problem, source_binder};\n use ra_ide_api_light::Severity;\n use ra_db::SourceDatabase;\n \n-use crate::{db, Diagnostic, FileId, FileSystemEdit, SourceChange};\n+use crate::{Diagnostic, FileId, FileSystemEdit, SourceChange, db::RootDatabase};\n \n-impl db::RootDatabase {\n-    pub(crate) fn diagnostics(&self, file_id: FileId) -> Vec<Diagnostic> {\n-        let syntax = self.parse(file_id);\n+pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic> {\n+    let syntax = db.parse(file_id);\n \n-        let mut res = ra_ide_api_light::diagnostics(&syntax)\n-            .into_iter()\n-            .map(|d| Diagnostic {\n-                range: d.range,\n-                message: d.msg,\n-                severity: d.severity,\n-                fix: d.fix.map(|fix| SourceChange::from_local_edit(file_id, fix)),\n-            })\n-            .collect::<Vec<_>>();\n-        if let Some(m) = source_binder::module_from_file_id(self, file_id) {\n-            for (name_node, problem) in m.problems(self) {\n-                let source_root = self.file_source_root(file_id);\n-                let diag = match problem {\n-                    Problem::UnresolvedModule { candidate } => {\n-                        let create_file = FileSystemEdit::CreateFile {\n-                            source_root,\n-                            path: candidate.clone(),\n-                        };\n-                        let fix = SourceChange {\n-                            label: \"create module\".to_string(),\n-                            source_file_edits: Vec::new(),\n-                            file_system_edits: vec![create_file],\n-                            cursor_position: None,\n-                        };\n-                        Diagnostic {\n-                            range: name_node.range(),\n-                            message: \"unresolved module\".to_string(),\n-                            severity: Severity::Error,\n-                            fix: Some(fix),\n-                        }\n+    let mut res = ra_ide_api_light::diagnostics(&syntax)\n+        .into_iter()\n+        .map(|d| Diagnostic {\n+            range: d.range,\n+            message: d.msg,\n+            severity: d.severity,\n+            fix: d.fix.map(|fix| SourceChange::from_local_edit(file_id, fix)),\n+        })\n+        .collect::<Vec<_>>();\n+    if let Some(m) = source_binder::module_from_file_id(db, file_id) {\n+        for (name_node, problem) in m.problems(db) {\n+            let source_root = db.file_source_root(file_id);\n+            let diag = match problem {\n+                Problem::UnresolvedModule { candidate } => {\n+                    let create_file = FileSystemEdit::CreateFile {\n+                        source_root,\n+                        path: candidate.clone(),\n+                    };\n+                    let fix = SourceChange {\n+                        label: \"create module\".to_string(),\n+                        source_file_edits: Vec::new(),\n+                        file_system_edits: vec![create_file],\n+                        cursor_position: None,\n+                    };\n+                    Diagnostic {\n+                        range: name_node.range(),\n+                        message: \"unresolved module\".to_string(),\n+                        severity: Severity::Error,\n+                        fix: Some(fix),\n                     }\n-                    Problem::NotDirOwner { move_to, candidate } => {\n-                        let move_file = FileSystemEdit::MoveFile {\n-                            src: file_id,\n-                            dst_source_root: source_root,\n-                            dst_path: move_to.clone(),\n-                        };\n-                        let create_file = FileSystemEdit::CreateFile {\n-                            source_root,\n-                            path: move_to.join(candidate),\n-                        };\n-                        let fix = SourceChange {\n-                            label: \"move file and create module\".to_string(),\n-                            source_file_edits: Vec::new(),\n-                            file_system_edits: vec![move_file, create_file],\n-                            cursor_position: None,\n-                        };\n-                        Diagnostic {\n-                            range: name_node.range(),\n-                            message: \"can't declare module at this location\".to_string(),\n-                            severity: Severity::Error,\n-                            fix: Some(fix),\n-                        }\n+                }\n+                Problem::NotDirOwner { move_to, candidate } => {\n+                    let move_file = FileSystemEdit::MoveFile {\n+                        src: file_id,\n+                        dst_source_root: source_root,\n+                        dst_path: move_to.clone(),\n+                    };\n+                    let create_file = FileSystemEdit::CreateFile {\n+                        source_root,\n+                        path: move_to.join(candidate),\n+                    };\n+                    let fix = SourceChange {\n+                        label: \"move file and create module\".to_string(),\n+                        source_file_edits: Vec::new(),\n+                        file_system_edits: vec![move_file, create_file],\n+                        cursor_position: None,\n+                    };\n+                    Diagnostic {\n+                        range: name_node.range(),\n+                        message: \"can't declare module at this location\".to_string(),\n+                        severity: Severity::Error,\n+                        fix: Some(fix),\n                     }\n-                };\n-                res.push(diag)\n-            }\n-        };\n-        res\n-    }\n+                }\n+            };\n+            res.push(diag)\n+        }\n+    };\n+    res\n }"}, {"sha": "1f43b762338633881e7a885e1a08c81f31c2c7ca", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/884f04670aea239f06fe5b6ff7a9f2073034f8bc/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884f04670aea239f06fe5b6ff7a9f2073034f8bc/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=884f04670aea239f06fe5b6ff7a9f2073034f8bc", "patch": "@@ -52,10 +52,10 @@ use crate::{\n };\n \n pub use crate::{\n+    change::{AnalysisChange, LibraryData},\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     runnables::{Runnable, RunnableKind},\n     navigation_target::NavigationTarget,\n-    change::{AnalysisChange, LibraryData},\n };\n pub use ra_ide_api_light::{\n     Fold, FoldKind, HighlightedRange, Severity, StructureNode, LocalEdit,\n@@ -373,7 +373,7 @@ impl Analysis {\n \n     /// Computes the set of diagnostics for the given file.\n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| db.diagnostics(file_id))\n+        self.with_db(|db| diagnostics::diagnostics(db, file_id))\n     }\n \n     /// Computes the type of the expression at the given position."}]}