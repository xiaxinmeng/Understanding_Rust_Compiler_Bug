{"sha": "178a339fc3eb97480952a73e9409ba2e5d079f3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OGEzMzlmYzNlYjk3NDgwOTUyYTczZTk0MDliYTJlNWQwNzlmM2Q=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-09-15T13:31:52Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-09-15T13:31:52Z"}, "message": "Reorder use items inside blocks", "tree": {"sha": "c52bd78ac5688ae59f89dcaac4a6864cd97393ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52bd78ac5688ae59f89dcaac4a6864cd97393ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178a339fc3eb97480952a73e9409ba2e5d079f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178a339fc3eb97480952a73e9409ba2e5d079f3d", "html_url": "https://github.com/rust-lang/rust/commit/178a339fc3eb97480952a73e9409ba2e5d079f3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178a339fc3eb97480952a73e9409ba2e5d079f3d/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e5c76094dc0c7fc85ef0e98b717480a7fb496e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5c76094dc0c7fc85ef0e98b717480a7fb496e1", "html_url": "https://github.com/rust-lang/rust/commit/8e5c76094dc0c7fc85ef0e98b717480a7fb496e1"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "ecfd091a43d2a2203aca917e6ee97fd41a1bf321", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178a339fc3eb97480952a73e9409ba2e5d079f3d/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178a339fc3eb97480952a73e9409ba2e5d079f3d/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=178a339fc3eb97480952a73e9409ba2e5d079f3d", "patch": "@@ -10,7 +10,7 @@\n \n use std::cmp::Ordering;\n \n-use syntax::{ast, ptr};\n+use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n use {Shape, Spanned};\n@@ -216,7 +216,7 @@ fn rewrite_import(\n \n fn rewrite_imports(\n     context: &RewriteContext,\n-    use_items: &[ptr::P<ast::Item>],\n+    use_items: &[&ast::Item],\n     shape: Shape,\n     span: Span,\n ) -> Option<String> {\n@@ -275,7 +275,7 @@ fn rewrite_imports(\n }\n \n impl<'a> FmtVisitor<'a> {\n-    pub fn format_imports(&mut self, use_items: &[ptr::P<ast::Item>]) {\n+    pub fn format_imports(&mut self, use_items: &[&ast::Item]) {\n         if use_items.is_empty() {\n             return;\n         }"}, {"sha": "46998bd78c4be0f71ad0af7c55170012d623bec9", "filename": "src/visitor.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/178a339fc3eb97480952a73e9409ba2e5d079f3d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178a339fc3eb97480952a73e9409ba2e5d079f3d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=178a339fc3eb97480952a73e9409ba2e5d079f3d", "patch": "@@ -11,7 +11,7 @@\n use std::cmp;\n \n use strings::string_buffer::StringBuffer;\n-use syntax::{ast, ptr, visit};\n+use syntax::{ast, visit};\n use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n@@ -30,7 +30,7 @@ use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, Sepa\n use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{self, contains_skip, inner_attributes, mk_sp};\n+use utils::{self, contains_skip, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n@@ -152,9 +152,7 @@ impl<'a> FmtVisitor<'a> {\n             self.visit_attrs(attrs, ast::AttrStyle::Inner);\n         }\n \n-        for stmt in &b.stmts {\n-            self.visit_stmt(stmt)\n-        }\n+        self.walk_block_stmts(b);\n \n         if !b.stmts.is_empty() {\n             if let Some(expr) = utils::stmt_expr(&b.stmts[b.stmts.len() - 1]) {\n@@ -641,12 +639,7 @@ impl<'a> FmtVisitor<'a> {\n         false\n     }\n \n-    fn reorder_items<F>(\n-        &mut self,\n-        items_left: &[ptr::P<ast::Item>],\n-        is_item: &F,\n-        in_group: bool,\n-    ) -> usize\n+    fn reorder_items<F>(&mut self, items_left: &[&ast::Item], is_item: &F, in_group: bool) -> usize\n     where\n         F: Fn(&ast::Item) -> bool,\n     {\n@@ -679,8 +672,7 @@ impl<'a> FmtVisitor<'a> {\n         item_length\n     }\n \n-    fn walk_mod_items(&mut self, m: &ast::Mod) {\n-        let mut items_left: &[ptr::P<ast::Item>] = &m.items;\n+    fn walk_items(&mut self, mut items_left: &[&ast::Item]) {\n         while !items_left.is_empty() {\n             // If the next item is a `use` declaration, then extract it and any subsequent `use`s\n             // to be potentially reordered within `format_imports`. Otherwise, just format the\n@@ -711,6 +703,43 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n+    fn walk_mod_items(&mut self, m: &ast::Mod) {\n+        self.walk_items(&ptr_vec_to_ref_vec(&m.items));\n+    }\n+\n+    fn walk_stmts(&mut self, stmts: &[ast::Stmt]) {\n+        fn to_stmt_item(stmt: &ast::Stmt) -> Option<&ast::Item> {\n+            match stmt.node {\n+                ast::StmtKind::Item(ref item) => Some(&**item),\n+                _ => None,\n+            }\n+        }\n+\n+        if stmts.is_empty() {\n+            return;\n+        }\n+\n+        // Extract leading `use ...;`.\n+        let items: Vec<_> = stmts\n+            .iter()\n+            .take_while(|stmt| to_stmt_item(stmt).is_some())\n+            .filter_map(|stmt| to_stmt_item(stmt))\n+            .take_while(|item| is_use_item(item))\n+            .collect();\n+\n+        if items.is_empty() {\n+            self.visit_stmt(&stmts[0]);\n+            self.walk_stmts(&stmts[1..]);\n+        } else {\n+            self.walk_items(&items);\n+            self.walk_stmts(&stmts[items.len()..]);\n+        }\n+    }\n+\n+    fn walk_block_stmts(&mut self, b: &ast::Block) {\n+        self.walk_stmts(&b.stmts)\n+    }\n+\n     fn format_mod(\n         &mut self,\n         m: &ast::Mod,"}]}