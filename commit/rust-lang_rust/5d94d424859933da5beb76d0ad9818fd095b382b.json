{"sha": "5d94d424859933da5beb76d0ad9818fd095b382b", "node_id": "C_kwDOAAsO6NoAKDVkOTRkNDI0ODU5OTMzZGE1YmViNzZkMGFkOTgxOGZkMDk1YjM4MmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-03T22:55:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-06T18:57:44Z"}, "message": "Shrink span for bindings with subpatterns.", "tree": {"sha": "32865130c1e56b08d2deea4b3ab4d3baf45d7577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32865130c1e56b08d2deea4b3ab4d3baf45d7577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d94d424859933da5beb76d0ad9818fd095b382b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d94d424859933da5beb76d0ad9818fd095b382b", "html_url": "https://github.com/rust-lang/rust/commit/5d94d424859933da5beb76d0ad9818fd095b382b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d94d424859933da5beb76d0ad9818fd095b382b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "380addd7d2971447d7f6828c508a93fa8018a9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/380addd7d2971447d7f6828c508a93fa8018a9b6", "html_url": "https://github.com/rust-lang/rust/commit/380addd7d2971447d7f6828c508a93fa8018a9b6"}], "stats": {"total": 426, "additions": 190, "deletions": 236}, "files": [{"sha": "7f992c18a18e4ce7bd3f87cb1090e13d0bc8f0a1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -1036,7 +1036,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             VarBindingForm {\n                                 binding_mode,\n                                 opt_ty_info,\n-                                opt_match_place: Some((Some(place), span)),\n+                                opt_match_place: Some((None, span)),\n                                 pat_span: span,\n                             },\n                         )))))"}, {"sha": "7e09efe5972a3a100e9a5f07196861e60d5867c5", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -202,6 +202,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Box<Pat<'tcx>> {\n         let mut ty = self.typeck_results.node_type(pat.hir_id);\n+        let mut span = pat.span;\n \n         let kind = match pat.kind {\n             hir::PatKind::Wild => PatKind::Wild,\n@@ -262,6 +263,10 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n \n             hir::PatKind::Binding(_, id, ident, ref sub) => {\n+                if let Some(ident_span) = ident.span.find_ancestor_inside(span) {\n+                    span = span.with_hi(ident_span.hi());\n+                }\n+\n                 let bm = *self\n                     .typeck_results\n                     .pat_binding_modes()\n@@ -326,7 +331,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             hir::PatKind::Or(ref pats) => PatKind::Or { pats: self.lower_patterns(pats) },\n         };\n \n-        Box::new(Pat { span: pat.span, ty, kind })\n+        Box::new(Pat { span, ty, kind })\n     }\n \n     fn lower_tuple_subpats("}, {"sha": "96716a39a2bfdbbe57532361f0e2f5984b72c870", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -8,13 +8,13 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n     let mut _4: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:70: +2:77\n     let mut _5: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n     let mut _6: bool;                    // in scope 0 at $DIR/exponential-or.rs:+2:62: +2:67\n-    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:10: +2:21\n-    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:57: +2:78\n+    let _7: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:10: +2:11\n+    let _8: u32;                         // in scope 0 at $DIR/exponential-or.rs:+2:57: +2:58\n     let mut _9: u32;                     // in scope 0 at $DIR/exponential-or.rs:+2:83: +2:84\n     let mut _10: u32;                    // in scope 0 at $DIR/exponential-or.rs:+2:87: +2:88\n     scope 1 {\n-        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:+2:10: +2:21\n-        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:+2:57: +2:78\n+        debug y => _7;                   // in scope 1 at $DIR/exponential-or.rs:+2:10: +2:11\n+        debug z => _8;                   // in scope 1 at $DIR/exponential-or.rs:+2:57: +2:58\n     }\n \n     bb0: {\n@@ -61,10 +61,10 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n     }\n \n     bb9: {\n-        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:+2:10: +2:21\n-        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:+2:10: +2:21\n-        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:+2:57: +2:78\n-        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:+2:57: +2:78\n+        StorageLive(_7);                 // scope 0 at $DIR/exponential-or.rs:+2:10: +2:11\n+        _7 = (_1.0: u32);                // scope 0 at $DIR/exponential-or.rs:+2:10: +2:11\n+        StorageLive(_8);                 // scope 0 at $DIR/exponential-or.rs:+2:57: +2:58\n+        _8 = (_1.3: u32);                // scope 0 at $DIR/exponential-or.rs:+2:57: +2:58\n         StorageLive(_9);                 // scope 1 at $DIR/exponential-or.rs:+2:83: +2:84\n         _9 = _7;                         // scope 1 at $DIR/exponential-or.rs:+2:83: +2:84\n         StorageLive(_10);                // scope 1 at $DIR/exponential-or.rs:+2:87: +2:88"}, {"sha": "6a5021139cf611f52de7fdf7deae94a04ffb0a9a", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -15,9 +15,9 @@ fn move_out_by_subslice() -> () {\n     let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:+1:21: +1:26\n     scope 1 {\n         debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        let _12: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:17\n+        let _12: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n         scope 4 {\n-            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+2:10: +2:17\n+            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n         }\n     }\n     scope 2 {\n@@ -77,8 +77,8 @@ fn move_out_by_subslice() -> () {\n     bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:+1:26: +1:27\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:+1:9: +1:10\n-        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:17\n-        _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:17\n+        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n+        _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:+2:10: +2:12\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:+0:27: +3:2\n         drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:+3:1: +3:2\n     }"}, {"sha": "1fd1eb128511bee3f7e2e7e898e19ef69f18f9a1", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -23,7 +23,7 @@ LL | fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n    |                                                  - move occurs because `x` has type `[String; 4]`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         a @ [.., _] => (),\n-   |         ----------- value moved here\n+   |         - value moved here\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n@@ -32,7 +32,7 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:28:5\n    |\n LL |         ref mut foo @ [.., _] => Some(foo),\n-   |         --------------------- mutable borrow occurs here\n+   |         ----------- mutable borrow occurs here\n ...\n LL |     &x;\n    |     ^^ immutable borrow occurs here\n@@ -44,7 +44,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:50:5\n    |\n LL |         [ref foo @ .., ref bar] => Some(foo),\n-   |          ------------ immutable borrow occurs here\n+   |          ------- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -56,7 +56,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:62:5\n    |\n LL |         ref foo @ [.., ref bar] => Some(foo),\n-   |         ----------------------- immutable borrow occurs here\n+   |         ------- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -71,7 +71,7 @@ LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n    |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         foo @ Some(Test::Foo | Test::Bar) => (),\n-   |         ---------------------------------\n+   |         ---\n    |         |\n    |         value moved here\n    |         value moved here\n@@ -83,7 +83,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:86:5\n    |\n LL |         ref foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n-   |         ------------------------------------- immutable borrow occurs here\n+   |         ------- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -95,7 +95,7 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:98:5\n    |\n LL |         ref mut foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n-   |         ----------------------------------------- mutable borrow occurs here\n+   |         ----------- mutable borrow occurs here\n ...\n LL |     &x;\n    |     ^^ immutable borrow occurs here\n@@ -107,7 +107,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:112:5\n    |\n LL |         ref foo @ Some(box ref s) => Some(foo),\n-   |         ------------------------- immutable borrow occurs here\n+   |         ------- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -122,7 +122,7 @@ LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4])\n    |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         a @ [.., Some(Test::Foo | Test::Bar)] => (),\n-   |         -------------------------------------\n+   |         -\n    |         |\n    |         value moved here\n    |         value moved here\n@@ -134,7 +134,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:144:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(a),\n-   |         ------------------------------------------------- immutable borrow occurs here\n+   |         ----- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -146,7 +146,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:156:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(b),\n-   |                  ---------- immutable borrow occurs here\n+   |                  ----- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -158,7 +158,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:170:5\n    |\n LL |         [_, ref a @ Some(box ref b), ..] => Some(a),\n-   |             ----------------------- immutable borrow occurs here\n+   |             ----- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -170,7 +170,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:186:5\n    |\n LL |         [_, ref a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n-   |             ------------------------------------------- immutable borrow occurs here\n+   |             ----- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here\n@@ -182,7 +182,7 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:200:5\n    |\n LL |         [_, ref mut a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n-   |             ----------------------------------------------- mutable borrow occurs here\n+   |             --------- mutable borrow occurs here\n ...\n LL |     &x;\n    |     ^^ immutable borrow occurs here\n@@ -194,7 +194,7 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:214:5\n    |\n LL |         ref a @ [_, ref b @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n-   |         ------------------------------------------------------------ immutable borrow occurs here\n+   |         ----- immutable borrow occurs here\n ...\n LL |     &mut x;\n    |     ^^^^^^ mutable borrow occurs here"}, {"sha": "2c1b9c10d4660dc0cd71e3931f2224d2dd9592a5", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -200,7 +200,7 @@ LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n LL |         match v {\n LL |             &[x @ ..] => println!(\"{:?}\", x),\n-   |               ^^^^^^ use of borrowed `v`\n+   |               ^ use of borrowed `v`\n ...\n LL |         drop(x);\n    |              - borrow later used here\n@@ -212,7 +212,7 @@ LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n ...\n LL |             &[_, x @ ..] => println!(\"{:?}\", x),\n-   |                  ^^^^^^ use of borrowed `v`\n+   |                  ^ use of borrowed `v`\n ...\n LL |         drop(x);\n    |              - borrow later used here\n@@ -224,7 +224,7 @@ LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n ...\n LL |             &[x @ .., _] => println!(\"{:?}\", x),\n-   |               ^^^^^^ use of borrowed `v`\n+   |               ^ use of borrowed `v`\n ...\n LL |         drop(x);\n    |              - borrow later used here\n@@ -236,7 +236,7 @@ LL |         let x = &mut v;\n    |                 ------ borrow of `v` occurs here\n ...\n LL |             &[_, x @ .., _] => println!(\"{:?}\", x),\n-   |                  ^^^^^^ use of borrowed `v`\n+   |                  ^ use of borrowed `v`\n ...\n LL |         drop(x);\n    |              - borrow later used here"}, {"sha": "346b82a2666442d47f9116393cf294deb80d20cf", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -79,7 +79,7 @@ error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:89:11\n    |\n LL |         [_y @ .., _, _] => {}\n-   |          ------- value moved here\n+   |          -- value moved here\n ...\n LL |         [(_x, _), _, _] => {}\n    |           ^^ value used here after move\n@@ -90,7 +90,7 @@ error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:99:15\n    |\n LL |         [_, _, _y @ ..] => {}\n-   |                ------- value moved here\n+   |                -- value moved here\n ...\n LL |         [.., (_x, _)] => {}\n    |               ^^ value used here after move\n@@ -101,7 +101,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:110:11\n    |\n LL |         [x @ .., _] => {}\n-   |          ------ value partially moved here\n+   |          - value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move"}, {"sha": "6c6a25c251e700917af065713bfebf0d4259a24d", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -68,7 +68,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:85:11\n    |\n LL |         [_, _y @ ..] => {}\n-   |             ------- value partially moved here\n+   |             -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n@@ -79,7 +79,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:96:11\n    |\n LL |         [_y @ .., _] => {}\n-   |          ------- value partially moved here\n+   |          -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n@@ -90,7 +90,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:109:11\n    |\n LL |         [x @ .., _, _] => {}\n-   |          ------ value partially moved here\n+   |          - value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move"}, {"sha": "77702e145df816fb85cdb6aac915a0853efa0bba", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -79,7 +79,7 @@ error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:89:11\n    |\n LL |         [_y @ .., _, _] => {}\n-   |          ------- value moved here\n+   |          -- value moved here\n ...\n LL |         [(ref _x, _), _, _] => {}\n    |           ^^^^^^ value borrowed here after move\n@@ -90,7 +90,7 @@ error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:99:15\n    |\n LL |         [_, _, _y @ ..] => {}\n-   |                ------- value moved here\n+   |                -- value moved here\n ...\n LL |         [.., (ref _x, _)] => {}\n    |               ^^^^^^ value borrowed here after move\n@@ -101,7 +101,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:110:11\n    |\n LL |         [x @ .., _] => {}\n-   |          ------ value partially moved here\n+   |          - value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n@@ -134,7 +134,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:139:5\n    |\n LL |         [_, _, _x @ ..] => {}\n-   |                ------- value partially moved here\n+   |                -- value partially moved here\n LL |     }\n LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n@@ -145,7 +145,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:147:5\n    |\n LL |         [_, _, _x @ ..] => {}\n-   |                ------- value partially moved here\n+   |                -- value partially moved here\n LL |     }\n LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move"}, {"sha": "6cc2c2f7a984c7ba34275f88e826717edf4f4b25", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -68,7 +68,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:85:11\n    |\n LL |         [_, _y @ ..] => {}\n-   |             ------- value partially moved here\n+   |             -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n@@ -79,7 +79,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:96:11\n    |\n LL |         [_y @ .., _] => {}\n-   |          ------- value partially moved here\n+   |          -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n@@ -90,7 +90,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:109:11\n    |\n LL |         [x @ .., _, _] => {}\n-   |          ------ value partially moved here\n+   |          - value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move"}, {"sha": "9add7553afa70917c9b51c8cac20f391e07e9f9f", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -34,7 +34,7 @@ error[E0382]: borrow of partially moved value: `a`\n LL |     let [_x, _, _] = a;\n    |          -- value partially moved here\n LL |     let [ref _y @ .., _, _] = a;\n-   |          ^^^^^^^^^^^ value borrowed here after partial move\n+   |          ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n@@ -44,7 +44,7 @@ error[E0382]: borrow of partially moved value: `a`\n LL |     let [.., _x] = a;\n    |              -- value partially moved here\n LL |     let [_, _, ref _y @ ..] = a;\n-   |                ^^^^^^^^^^^ value borrowed here after partial move\n+   |                ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n@@ -54,7 +54,7 @@ error[E0382]: borrow of partially moved value: `a`\n LL |     let [(_x, _), _, _] = a;\n    |           -- value partially moved here\n LL |     let [ref _y @ .., _, _] = a;\n-   |          ^^^^^^^^^^^ value borrowed here after partial move\n+   |          ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n@@ -64,15 +64,15 @@ error[E0382]: borrow of partially moved value: `a`\n LL |     let [.., (_x, _)] = a;\n    |               -- value partially moved here\n LL |     let [_, _, ref _y @ ..] = a;\n-   |                ^^^^^^^^^^^ value borrowed here after partial move\n+   |                ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:54:11\n    |\n LL |     let [_y @ .., _, _] = a;\n-   |          ------- value moved here\n+   |          -- value moved here\n LL |     let [(ref _x, _), _, _] = a;\n    |           ^^^^^^ value borrowed here after move\n    |\n@@ -82,7 +82,7 @@ error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:60:15\n    |\n LL |     let [_, _, _y @ ..] = a;\n-   |                ------- value moved here\n+   |                -- value moved here\n LL |     let [.., (ref _x, _)] = a;\n    |               ^^^^^^ value borrowed here after move\n    |\n@@ -92,9 +92,9 @@ error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:68:13\n    |\n LL |     let [x @ .., _] = a;\n-   |          ------ value partially moved here\n+   |          - value partially moved here\n LL |     let [_, ref _y @ ..] = a;\n-   |             ^^^^^^^^^^^ value borrowed here after partial move\n+   |             ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n@@ -122,7 +122,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:88:5\n    |\n LL |     let [_, _, _x @ ..] = a;\n-   |                ------- value partially moved here\n+   |                -- value partially moved here\n LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n@@ -132,7 +132,7 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:94:5\n    |\n LL |     let [_, _, _x @ ..] = a;\n-   |                ------- value partially moved here\n+   |                -- value partially moved here\n LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |"}, {"sha": "363effcfe5322a579be2a699d6763eb91cacc58e", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -34,7 +34,7 @@ error[E0382]: use of partially moved value: `a`\n LL |     let [_x, _, _] = a;\n    |          -- value partially moved here\n LL |     let [_y @ .., _, _] = a;\n-   |          ^^^^^^^ value used here after partial move\n+   |          ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n@@ -44,7 +44,7 @@ error[E0382]: use of partially moved value: `a`\n LL |     let [.., _x] = a;\n    |              -- value partially moved here\n LL |     let [_, _, _y @ ..] = a;\n-   |                ^^^^^^^ value used here after partial move\n+   |                ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n \n@@ -54,7 +54,7 @@ error[E0382]: use of partially moved value: `a`\n LL |     let [(_x, _), _, _] = a;\n    |           -- value partially moved here\n LL |     let [_y @ .., _, _] = a;\n-   |          ^^^^^^^ value used here after partial move\n+   |          ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n@@ -64,15 +64,15 @@ error[E0382]: use of partially moved value: `a`\n LL |     let [.., (_x, _)] = a;\n    |               -- value partially moved here\n LL |     let [_, _, _y @ ..] = a;\n-   |                ^^^^^^^ value used here after partial move\n+   |                ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:54:11\n    |\n LL |     let [_y @ .., _, _] = a;\n-   |          ------- value moved here\n+   |          -- value moved here\n LL |     let [(_x, _), _, _] = a;\n    |           ^^ value used here after move\n    |\n@@ -82,7 +82,7 @@ error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:60:15\n    |\n LL |     let [_, _, _y @ ..] = a;\n-   |                ------- value moved here\n+   |                -- value moved here\n LL |     let [.., (_x, _)] = a;\n    |               ^^ value used here after move\n    |\n@@ -92,9 +92,9 @@ error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:68:13\n    |\n LL |     let [x @ .., _] = a;\n-   |          ------ value partially moved here\n+   |          - value partially moved here\n LL |     let [_, _y @ ..] = a;\n-   |             ^^^^^^^ value used here after partial move\n+   |             ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n "}, {"sha": "f4324110ccb8ef1eed24c416f85c8d3d34b5ebee", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -57,7 +57,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     let [ref first, ref second, ..] = *s;\n    |                     ---------- immutable borrow occurs here\n LL |     let [_, ref mut tail @ ..] = *s;\n-   |             ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |             ^^^^^^^^^^^^ mutable borrow occurs here\n LL |     nop(&[first, second]);\n    |                  ------ immutable borrow later used here\n \n@@ -67,17 +67,17 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     let [.., ref second, ref first] = *s;\n    |              ---------- immutable borrow occurs here\n LL |     let [ref mut tail @ .., _] = *s;\n-   |          ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |          ^^^^^^^^^^^^ mutable borrow occurs here\n LL |     nop(&[first, second]);\n    |                  ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan-array.rs:46:10\n    |\n LL |     let [_,  ref s1 @ ..] = *s;\n-   |              ----------- immutable borrow occurs here\n+   |              ------ immutable borrow occurs here\n LL |     let [ref mut s2 @ .., _, _] = *s;\n-   |          ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |          ^^^^^^^^^^ mutable borrow occurs here\n LL |     nop_subslice(s1);\n    |                  -- immutable borrow later used here\n "}, {"sha": "f9a63bd49dd57d0f18349da122a6e8d79147aba4", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -88,7 +88,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n LL |         if let [_, ref mut tail @ ..] = *s {\n-   |                    ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |                    ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n \n@@ -98,17 +98,17 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [.., ref second, ref first] = *s {\n    |                 ---------- immutable borrow occurs here\n LL |         if let [ref mut tail @ .., _] = *s {\n-   |                 ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:65:17\n    |\n LL |     if let [_, _, _, ref s1 @ ..] = *s {\n-   |                      ----------- immutable borrow occurs here\n+   |                      ------ immutable borrow occurs here\n LL |         if let [ref mut s2 @ .., _, _, _] = *s {\n-   |                 ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^ mutable borrow occurs here\n LL |             nop_subslice(s1);\n    |                          -- immutable borrow later used here\n "}, {"sha": "0ac7df944d78114ad1de4c57ea5eaac14fa2a8d7", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -2,7 +2,7 @@ error[E0506]: cannot assign to `a[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-move-tail.rs:8:5\n    |\n LL |         [1, 2, ref tail @ ..] => tail,\n-   |                ------------- borrow of `a[_]` occurs here\n+   |                -------- borrow of `a[_]` occurs here\n ...\n LL |     a[2] = 0;\n    |     ^^^^^^^^ assignment to borrowed `a[_]` occurs here"}, {"sha": "c3bcb7de65daa8fd07550695aaeaafae769f60a9", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -14,7 +14,7 @@ error[E0506]: cannot assign to `vec[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n    |\n LL |         &mut [ref _b @ ..] => {\n-   |               ----------- borrow of `vec[_]` occurs here\n+   |               ------ borrow of `vec[_]` occurs here\n LL |\n LL |             vec[0] = Box::new(4);\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here"}, {"sha": "0caa0b83a4c7cbe00939ab4cc0ed8a43ec7de3db", "filename": "src/test/ui/moves/move-out-of-array-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-array-ref.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -13,7 +13,7 @@ error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:13:27\n    |\n LL |     let [_, s @ .. , _] = *a;\n-   |             ------        ^^\n+   |             -             ^^\n    |             |             |\n    |             |             cannot move out of here\n    |             |             help: consider borrowing here: `&*a`\n@@ -35,7 +35,7 @@ error[E0508]: cannot move out of type `[D; 4]`, a non-copy array\n   --> $DIR/move-out-of-array-ref.rs:23:27\n    |\n LL |     let [_, s @ .. , _] = *a;\n-   |             ------        ^^\n+   |             -             ^^\n    |             |             |\n    |             |             cannot move out of here\n    |             |             help: consider borrowing here: `&*a`"}, {"sha": "93b0dcfc2d18af210bd8307640d65d7414e2ff24", "filename": "src/test/ui/moves/move-out-of-slice-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -14,7 +14,7 @@ LL |     match *a {\n    |           ^^ cannot move out of here\n LL |\n LL |         [a @ ..] => {}\n-   |          ------\n+   |          -\n    |          |\n    |          data moved here\n    |          move occurs because `a` has type `[A]`, which does not implement the `Copy` trait\n@@ -26,7 +26,7 @@ LL |     match *b {\n    |           ^^ cannot move out of here\n LL |\n LL |         [_, _, b @ .., _] => {}\n-   |                ------\n+   |                -\n    |                |\n    |                data moved here\n    |                move occurs because `b` has type `[A]`, which does not implement the `Copy` trait\n@@ -38,7 +38,7 @@ LL |     match *c {\n    |           ^^ cannot move out of here\n LL |\n LL |         [c @ ..] => {}\n-   |          ------\n+   |          -\n    |          |\n    |          data moved here\n    |          move occurs because `c` has type `[C]`, which does not implement the `Copy` trait\n@@ -50,7 +50,7 @@ LL |     match *d {\n    |           ^^ cannot move out of here\n LL |\n LL |         [_, _, d @ .., _] => {}\n-   |                ------\n+   |                -\n    |                |\n    |                data moved here\n    |                move occurs because `d` has type `[C]`, which does not implement the `Copy` trait"}, {"sha": "dcb6f9fec18b6eb94aec31ecd326569227f1674c", "filename": "src/test/ui/nll/issue-51244.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51244.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to `*my_ref`, which is behind a `&` reference\n   --> $DIR/issue-51244.rs:3:5\n    |\n LL |     let ref my_ref @ _ = 0;\n-   |         -------------- help: consider changing this to be a mutable reference: `ref mut my_ref @ _`\n+   |         ---------- help: consider changing this to be a mutable reference: `ref mut my_ref`\n LL |     *my_ref = 0;\n    |     ^^^^^^^^^^^ `my_ref` is a `&` reference, so the data it refers to cannot be written\n "}, {"sha": "fad84dda0e192ea46dec8291315542d205cb6585", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -40,9 +40,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14\n    |\n LL |         Some(ref _y @ _z) => {}\n-   |              ^^^^^^^^^--\n-   |              |        |\n-   |              |        value moved here\n+   |              ^^^^^^   -- value moved here\n+   |              |\n    |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n@@ -55,9 +54,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n-   |              ^^^^^^^^^^^^^--\n-   |              |            |\n-   |              |            value moved here\n+   |              ^^^^^^^^^^   -- value moved here\n+   |              |\n    |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait"}, {"sha": "a481ca46833827fc64cc0ee58cc6b23f4a2ca246", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -2,9 +2,8 @@ error[E0382]: use of partially moved value\n   --> $DIR/bind-by-move-no-subbindings-fun-param.rs:7:6\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n-   |      ^^^^^^-^\n-   |      |     |\n-   |      |     value partially moved here\n+   |      ^     - value partially moved here\n+   |      |\n    |      value used here after partial move\n    |\n    = note: partial move occurs because value has type `Box<u8>`, which does not implement the `Copy` trait"}, {"sha": "83751843b1b81b09741d51eac2d4a17e802d1d94", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:11:9\n    |\n LL |     let a @ b = U;\n-   |         ^^^^-   - move occurs because value has type `U`, which does not implement the `Copy` trait\n+   |         ^   -   - move occurs because value has type `U`, which does not implement the `Copy` trait\n    |         |   |\n    |         |   value moved here\n    |         value used here after move\n@@ -11,9 +11,8 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:13:9\n    |\n LL |     let a @ (b, c) = (U, U);\n-   |         ^^^^^^^^-^\n-   |         |       |\n-   |         |       value partially moved here\n+   |         ^       - value partially moved here\n+   |         |\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -22,9 +21,8 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:15:9\n    |\n LL |     let a @ (b, c) = (u(), u());\n-   |         ^^^^^^^^-^\n-   |         |       |\n-   |         |       value partially moved here\n+   |         ^       - value partially moved here\n+   |         |\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -35,9 +33,8 @@ error[E0382]: use of moved value\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n LL |         a @ Ok(b) | a @ Err(b) => {}\n-   |         -------^-\n-   |         |      |\n-   |         |      value used here after move\n+   |         -      ^ value used here after move\n+   |         |\n    |         value moved here\n \n error[E0382]: use of moved value\n@@ -46,18 +43,16 @@ error[E0382]: use of moved value\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `Result<U, U>`, which does not implement the `Copy` trait\n LL |         a @ Ok(b) | a @ Err(b) => {}\n-   |                     --------^-\n-   |                     |       |\n-   |                     |       value used here after move\n+   |                     -       ^ value used here after move\n+   |                     |\n    |                     value moved here\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:25:9\n    |\n LL |         xs @ [a, .., b] => {}\n-   |         ^^^^^^^^^^^^^-^\n-   |         |            |\n-   |         |            value partially moved here\n+   |         ^^           - value partially moved here\n+   |         |\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -66,9 +61,8 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:29:9\n    |\n LL |         xs @ [_, ys @ .., _] => {}\n-   |         ^^^^^^^^^-------^^^^\n-   |         |        |\n-   |         |        value partially moved here\n+   |         ^^       -- value partially moved here\n+   |         |\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -77,7 +71,7 @@ error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:22:12\n    |\n LL |     fn fun(a @ b: U) {}\n-   |            ^^^^-\n+   |            ^----\n    |            |   |\n    |            |   value moved here\n    |            value used here after move"}, {"sha": "002c7609f61093c6c3c499a14a7a6f88c7ffc1d1", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -74,9 +74,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n-   |         ^^^^^^^^^^^^-\n-   |         |           |\n-   |         |           value moved here\n+   |         ^^^^^       - value moved here\n+   |         |\n    |         value borrowed here after move\n    |\n    = note: move occurs because value has type `NC`, which does not implement the `Copy` trait\n@@ -85,9 +84,8 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n-   |         ^^^^^^^^^^^^---------\n-   |         |           |\n-   |         |           mutable borrow occurs here\n+   |         ^^^^^       --------- mutable borrow occurs here\n+   |         |\n    |         immutable borrow occurs here\n ...\n LL |     *b = NC;\n@@ -97,9 +95,8 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n-   |         ^^^^^^^^^^^^---------\n-   |         |           |\n-   |         |           mutable borrow occurs here\n+   |         ^^^^^       --------- mutable borrow occurs here\n+   |         |\n    |         immutable borrow occurs here\n ...\n LL |     *b = NC;\n@@ -109,9 +106,8 @@ error[E0502]: cannot borrow value as mutable because it is also borrowed as immu\n   --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n-   |         ^^^^^^^^^^^^^^^^-----\n-   |         |               |\n-   |         |               immutable borrow occurs here\n+   |         ^^^^^^^^^       ----- immutable borrow occurs here\n+   |         |\n    |         mutable borrow occurs here\n ...\n LL |     drop(b);\n@@ -121,9 +117,8 @@ error[E0502]: cannot borrow value as mutable because it is also borrowed as immu\n   --> $DIR/borrowck-pat-at-and-box.rs:62:9\n    |\n LL |         ref mut a @ box ref b => {\n-   |         ^^^^^^^^^^^^^^^^-----\n-   |         |               |\n-   |         |               immutable borrow occurs here\n+   |         ^^^^^^^^^       ----- immutable borrow occurs here\n+   |         |\n    |         mutable borrow occurs here\n ...\n LL |             drop(b);\n@@ -133,9 +128,8 @@ error[E0502]: cannot borrow value as mutable because it is also borrowed as immu\n   --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n-   |           ^^^^^^^^^^^^^^^^-----\n-   |           |               |\n-   |           |               immutable borrow occurs here\n+   |           ^^^^^^^^^       ----- immutable borrow occurs here\n+   |           |\n    |           mutable borrow occurs here\n ...\n LL |         drop(b);"}, {"sha": "a9e66de084242f560ae2e78d0683f85fc44ca4b1", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -262,9 +262,8 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n-   |         |                       |\n-   |         |                       value partially moved here\n+   |         ^                       - value partially moved here\n+   |         |\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -273,9 +272,8 @@ error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------^\n-   |         |                       |\n-   |         |                       value partially moved here\n+   |         ^                       - value partially moved here\n+   |         |\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -286,20 +284,16 @@ error[E0382]: use of moved value\n LL |     match Some((U, U)) {\n    |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         -----------------------------^^^^^^^^^--\n-   |         |                            |\n-   |         |                            value used here after move\n-   |         value moved here\n+   |         - value moved here           ^ value used here after move\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:30\n    |\n LL |     match Some([U, U]) {\n    |           ------------ move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n-   |         ---------------------^^^^^^^^^--\n-   |         |                    |\n-   |         |                    value borrowed here after move\n+   |         -----                ^^^^^^^^^ value borrowed here after move\n+   |         |\n    |         value moved here\n \n error[E0382]: borrow of moved value\n@@ -308,9 +302,8 @@ error[E0382]: borrow of moved value\n LL |     match Some(u()) {\n    |           --------- move occurs because value has type `Option<U>`, which does not implement the `Copy` trait\n LL |         a @ Some(ref b) => {}\n-   |         ---------^^^^^-\n-   |         |        |\n-   |         |        value borrowed here after move\n+   |         -        ^^^^^ value borrowed here after move\n+   |         |\n    |         value moved here\n \n error[E0382]: use of moved value\n@@ -319,29 +312,24 @@ error[E0382]: use of moved value\n LL |     match Some((u(), u())) {\n    |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         -----------------------------^^^^^^^^^--\n-   |         |                            |\n-   |         |                            value used here after move\n-   |         value moved here\n+   |         - value moved here           ^ value used here after move\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:30\n    |\n LL |     match Some([u(), u()]) {\n    |           ---------------- move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n-   |         ---------------------^^^^^^^^^--\n-   |         |                    |\n-   |         |                    value borrowed here after move\n+   |         -----                ^^^^^^^^^ value borrowed here after move\n+   |         |\n    |         value moved here\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           ^^^^^^^^^^^^^^^^^^^^-------------^\n-   |           |                   |\n-   |           |                   value partially moved here\n+   |           ^^^^^               ----- value partially moved here\n+   |           |\n    |           value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait"}, {"sha": "e03a9298214e4b55281bd21e0b50563fbd5c11e3", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -237,9 +237,8 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n-   |         ^^^^^^^^^^^^^^^^-----^\n-   |         |               |\n-   |         |               value partially moved here\n+   |         ^^^^^^^^^       ----- value partially moved here\n+   |         |\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -248,7 +247,7 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ b = u();\n-   |         ^^^^^^^^-   --- move occurs because value has type `U`, which does not implement the `Copy` trait\n+   |         ^^^^^   -   --- move occurs because value has type `U`, which does not implement the `Copy` trait\n    |         |       |\n    |         |       value moved here\n    |         value borrowed here after move\n@@ -257,9 +256,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n-   |                  ^^^^^^^^-----\n-   |                  |       |\n-   |                  |       value moved here\n+   |                  ^^^^^   ----- value moved here\n+   |                  |\n    |                  value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -268,9 +266,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n-   |                                 ^^^^^^^^-\n-   |                                 |       |\n-   |                                 |       value moved here\n+   |                                 ^^^^^   - value moved here\n+   |                                 |\n    |                                 value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -279,9 +276,8 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n-   |         ^^^^^^^^^^^^^^^^-----^\n-   |         |               |\n-   |         |               value partially moved here\n+   |         ^^^^^^^^^       ----- value partially moved here\n+   |         |\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -290,9 +286,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |                       ^^^^^^^^-----\n-   |                       |       |\n-   |                       |       value moved here\n+   |                       ^^^^^   ----- value moved here\n+   |                       |\n    |                       value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -305,9 +300,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |                                      ^^^^^^^^-\n-   |                                      |       |\n-   |                                      |       value moved here\n+   |                                      ^^^^^   - value moved here\n+   |                                      |\n    |                                      value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -320,7 +314,7 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n-   |           ^^^^^^^^-\n+   |           ^^^^^----\n    |           |       |\n    |           |       value moved here\n    |           value borrowed here after move\n@@ -330,9 +324,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                    ^^^^^^^^-----\n-   |                    |       |\n-   |                    |       value moved here\n+   |                    ^^^^^   ----- value moved here\n+   |                    |\n    |                    value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -341,9 +334,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                                   ^^^^^^^^-\n-   |                                   |       |\n-   |                                   |       value moved here\n+   |                                   ^^^^^   - value moved here\n+   |                                   |\n    |                                   value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -352,9 +344,8 @@ error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n-   |           ^^^^^^^^^^^^^^^^-----^\n-   |           |               |\n-   |           |               value partially moved here\n+   |           ^^^^^^^^^       ----- value partially moved here\n+   |           |\n    |           value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait"}, {"sha": "9fd5e229afd0a2fd4d5bf0d01efcfbd93496e789", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -298,9 +298,8 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n-   |         ----------------------^^^^^-\n-   |         |                     |\n-   |         |                     immutable borrow occurs here\n+   |         ---------             ^^^^^ immutable borrow occurs here\n+   |         |\n    |         mutable borrow occurs here\n ...\n LL |             **z = None;\n@@ -310,9 +309,8 @@ error[E0502]: cannot borrow value as mutable because it is also borrowed as immu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n-   |         ^^^^^^^^^^^^-----\n-   |         |           |\n-   |         |           immutable borrow occurs here\n+   |         ^^^^^^^^^   ----- immutable borrow occurs here\n+   |         |\n    |         mutable borrow occurs here\n ...\n LL |     drop(b);\n@@ -322,9 +320,8 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n-   |         ^^^^^^^^---------\n-   |         |       |\n-   |         |       mutable borrow occurs here\n+   |         ^^^^^   --------- mutable borrow occurs here\n+   |         |\n    |         immutable borrow occurs here\n ...\n LL |     *b = u();\n@@ -334,9 +331,8 @@ error[E0502]: cannot borrow value as mutable because it is also borrowed as immu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-   |         -----------^^^^^^^^^-\n-   |         |          |\n-   |         |          mutable borrow occurs here\n+   |         -----      ^^^^^^^^^ mutable borrow occurs here\n+   |         |\n    |         immutable borrow occurs here\n ...\n LL |             drop(a);\n@@ -346,9 +342,8 @@ error[E0502]: cannot borrow value as mutable because it is also borrowed as immu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-   |                                 ------------^^^^^^^^^-\n-   |                                 |           |\n-   |                                 |           mutable borrow occurs here\n+   |                                 -----       ^^^^^^^^^ mutable borrow occurs here\n+   |                                 |\n    |                                 immutable borrow occurs here\n ...\n LL |             drop(a);\n@@ -406,9 +401,8 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:117:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         ^^^^^^^^^---------^^^^^^^^^^^^\n-   |         |        |\n-   |         |        mutable borrow occurs here\n+   |         ^^^^^    --------- mutable borrow occurs here\n+   |         |\n    |         immutable borrow occurs here\n ...\n LL |     *b = U;\n@@ -418,9 +412,8 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         ^^^^^^^^^---------^^^^^^^^^^^^\n-   |         |        |\n-   |         |        mutable borrow occurs here\n+   |         ^^^^^    --------- mutable borrow occurs here\n+   |         |\n    |         immutable borrow occurs here\n ...\n LL |     *b = U;\n@@ -430,9 +423,8 @@ error[E0502]: cannot borrow value as immutable because it is also borrowed as mu\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         ^^^^^^^^^---------^^^^^^^^^^^^\n-   |         |        |\n-   |         |        mutable borrow occurs here\n+   |         ^^^^^    --------- mutable borrow occurs here\n+   |         |\n    |         immutable borrow occurs here\n LL |\n LL |     *b = U;\n@@ -442,7 +434,7 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                      --------^^^^^^^^^^^^-\n+   |                      --------^^^^^^^^^----\n    |                      |       |           |\n    |                      |       |           value moved here\n    |                      |       value borrowed here after move"}, {"sha": "e47aea9c77e6c1bcf9ed4e8d4bed246f7c69879e", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -262,9 +262,8 @@ error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ^^^^^^^^^^^^---------\n-   |         |           |\n-   |         |           first mutable borrow occurs here\n+   |         ^^^^^^^^^   --------- first mutable borrow occurs here\n+   |         |\n    |         second mutable borrow occurs here\n ...\n LL |     drop(b);\n@@ -274,9 +273,8 @@ error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ^^^^^^^^^^^^---------\n-   |         |           |\n-   |         |           first mutable borrow occurs here\n+   |         ^^^^^^^^^   --------- first mutable borrow occurs here\n+   |         |\n    |         second mutable borrow occurs here\n ...\n LL |     *b = U;\n@@ -286,9 +284,8 @@ error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:89:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |         ---------------^^^^^^^^^-\n-   |         |              |\n-   |         |              second mutable borrow occurs here\n+   |         ---------      ^^^^^^^^^ second mutable borrow occurs here\n+   |         |\n    |         first mutable borrow occurs here\n ...\n LL |             *a = Err(U);\n@@ -298,9 +295,8 @@ error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:89:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |                                     ----------------^^^^^^^^^-\n-   |                                     |               |\n-   |                                     |               second mutable borrow occurs here\n+   |                                     ---------       ^^^^^^^^^ second mutable borrow occurs here\n+   |                                     |\n    |                                     first mutable borrow occurs here\n ...\n LL |             *a = Err(U);\n@@ -310,9 +306,8 @@ error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:101:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |         ---------------^^^^^^^^^-\n-   |         |              |\n-   |         |              second mutable borrow occurs here\n+   |         ---------      ^^^^^^^^^ second mutable borrow occurs here\n+   |         |\n    |         first mutable borrow occurs here\n ...\n LL |             drop(a);\n@@ -322,9 +317,8 @@ error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:101:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |                                     ----------------^^^^^^^^^-\n-   |                                     |               |\n-   |                                     |               second mutable borrow occurs here\n+   |                                     ---------       ^^^^^^^^^ second mutable borrow occurs here\n+   |                                     |\n    |                                     first mutable borrow occurs here\n ...\n LL |             drop(a);\n@@ -334,7 +328,7 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                      ------------^^^^^^^^^^^^-\n+   |                      ------------^^^^^^^^^----\n    |                      |           |           |\n    |                      |           |           value moved here\n    |                      |           value borrowed here after move"}, {"sha": "cd3234952fa54c13db85096ca76839836285d706", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -2,9 +2,8 @@ error[E0382]: use of partially moved value\n   --> $DIR/copy-and-move-mixed.rs:12:9\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n-   |         ^^^^^^^^^^------------^\n-   |         |         |\n-   |         |         value partially moved here\n+   |         ^         - value partially moved here\n+   |         |\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait"}, {"sha": "840a513d6c67d5595e4432f5067f09f33099c2a9", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -48,7 +48,7 @@ error[E0382]: borrow of moved value\n   --> $DIR/default-binding-modes-both-sides-independent.rs:29:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n-   |         ^^^^^^^^^^^^-   ------- move occurs because value has type `NotCopy`, which does not implement the `Copy` trait\n+   |         ^^^^^^^^^   -   ------- move occurs because value has type `NotCopy`, which does not implement the `Copy` trait\n    |         |           |\n    |         |           value moved here\n    |         value borrowed here after move"}, {"sha": "70beb5d423223888072bf6072c552320a1d5c96b", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -11,7 +11,7 @@ error[E0596]: cannot borrow `not_mut` as mutable, as it is not declared as mutab\n   --> $DIR/nested-binding-modes-mut.rs:9:5\n    |\n LL |     let not_mut @ mut is_mut = 42;\n-   |         -------------------- help: consider changing this to be mutable: `mut not_mut`\n+   |         ------- help: consider changing this to be mutable: `mut not_mut`\n LL |     &mut is_mut;\n LL |     &mut not_mut;\n    |     ^^^^^^^^^^^^ cannot borrow as mutable"}, {"sha": "bac2db6ce825c5964f1aff96cffde29a513ebe1a", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d94d424859933da5beb76d0ad9818fd095b382b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=5d94d424859933da5beb76d0ad9818fd095b382b", "patch": "@@ -35,7 +35,7 @@ error[E0502]: cannot borrow `arr[..]` as mutable because it is also borrowed as\n   --> $DIR/borrowck-move-ref-pattern.rs:13:16\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n-   |                             ---------------- immutable borrow occurs here\n+   |                             ----------- immutable borrow occurs here\n ...\n LL |     let [_, _, ref mut _x2, _x3, mut _x4] = arr;\n    |                ^^^^^^^^^^^ mutable borrow occurs here\n@@ -47,7 +47,7 @@ error[E0505]: cannot move out of `arr[..]` because it is borrowed\n   --> $DIR/borrowck-move-ref-pattern.rs:13:29\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n-   |                             ---------------- borrow of `arr[..]` occurs here\n+   |                             ----------- borrow of `arr[..]` occurs here\n ...\n LL |     let [_, _, ref mut _x2, _x3, mut _x4] = arr;\n    |                             ^^^ move out of `arr[..]` occurs here\n@@ -59,7 +59,7 @@ error[E0505]: cannot move out of `arr[..]` because it is borrowed\n   --> $DIR/borrowck-move-ref-pattern.rs:13:34\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n-   |                             ---------------- borrow of `arr[..]` occurs here\n+   |                             ----------- borrow of `arr[..]` occurs here\n ...\n LL |     let [_, _, ref mut _x2, _x3, mut _x4] = arr;\n    |                                  ^^^^^^^ move out of `arr[..]` occurs here"}]}