{"sha": "d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "node_id": "C_kwDOAAsO6NoAKGQyMTMxMTRjYjVhZDViYjUyNWU4OGVjMmQyZjhlOTM0ZjhhOGY4Yjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-13T22:22:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-21T15:38:52Z"}, "message": "LocalCrate key", "tree": {"sha": "cac15fde821b4c7681fa64e6422089e3e2e235f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac15fde821b4c7681fa64e6422089e3e2e235f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "html_url": "https://github.com/rust-lang/rust/commit/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcaf956de0835a391b0dca5f85d38abe641b52e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcaf956de0835a391b0dca5f85d38abe641b52e6", "html_url": "https://github.com/rust-lang/rust/commit/dcaf956de0835a391b0dca5f85d38abe641b52e6"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "e403a1fd8ae78666c654664896630fe00faa9326", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n };\n+use rustc_middle::query::LocalCrate;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n@@ -41,7 +42,7 @@ pub fn crates_export_threshold(crate_types: &[CrateType]) -> SymbolExportLevel {\n     }\n }\n \n-fn reachable_non_generics_provider(tcx: TyCtxt<'_>, (): ()) -> DefIdMap<SymbolExportInfo> {\n+fn reachable_non_generics_provider(tcx: TyCtxt<'_>, _: LocalCrate) -> DefIdMap<SymbolExportInfo> {\n     if !tcx.sess.opts.output_types.should_codegen() {\n         return Default::default();\n     }\n@@ -168,7 +169,7 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n \n fn exported_symbols_provider_local(\n     tcx: TyCtxt<'_>,\n-    (): (),\n+    _: LocalCrate,\n ) -> &[(ExportedSymbol<'_>, SymbolExportInfo)] {\n     if !tcx.sess.opts.output_types.should_codegen() {\n         return &[];"}, {"sha": "9661e815623db34f960339c1d3e811031150d8f2", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n+use rustc_middle::query::LocalCrate;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -367,7 +368,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         allocator_kind: |tcx, ()| CStore::from_tcx(tcx).allocator_kind(),\n         alloc_error_handler_kind: |tcx, ()| CStore::from_tcx(tcx).alloc_error_handler_kind(),\n-        is_private_dep: |_tcx, ()| false,\n+        is_private_dep: |_tcx, LocalCrate| false,\n         native_library: |tcx, id| {\n             tcx.native_libraries(id.krate)\n                 .iter()\n@@ -383,8 +384,8 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                         .contains(&id)\n                 })\n         },\n-        native_libraries: |tcx, ()| native_libs::collect(tcx),\n-        foreign_modules: |tcx, ()| {\n+        native_libraries: |tcx, LocalCrate| native_libs::collect(tcx),\n+        foreign_modules: |tcx, LocalCrate| {\n             foreign_modules::collect(tcx).into_iter().map(|m| (m.def_id, m)).collect()\n         },\n \n@@ -482,8 +483,8 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n         },\n \n         dependency_formats: |tcx, ()| Lrc::new(crate::dependency_format::calculate(tcx)),\n-        has_global_allocator: |tcx, ()| CStore::from_tcx(tcx).has_global_allocator(),\n-        has_alloc_error_handler: |tcx, ()| CStore::from_tcx(tcx).has_alloc_error_handler(),\n+        has_global_allocator: |tcx, LocalCrate| CStore::from_tcx(tcx).has_global_allocator(),\n+        has_alloc_error_handler: |tcx, LocalCrate| CStore::from_tcx(tcx).has_alloc_error_handler(),\n         postorder_cnums: |tcx, ()| {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))"}, {"sha": "ef3eda584e1b83d5068a174dc1269cd7ff9b4648", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -24,6 +24,7 @@ use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportInfo,\n };\n use rustc_middle::mir::interpret;\n+use rustc_middle::query::LocalCrate;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams, TreatProjections};\n@@ -2240,7 +2241,7 @@ pub fn provide(providers: &mut Providers) {\n                 .get(&def_id)\n                 .expect(\"no traits in scope for a doc link\")\n         },\n-        traits_in_crate: |tcx, ()| {\n+        traits_in_crate: |tcx, LocalCrate| {\n             let mut traits = Vec::new();\n             for id in tcx.hir().items() {\n                 if matches!(tcx.def_kind(id.owner_id), DefKind::Trait | DefKind::TraitAlias) {\n@@ -2252,7 +2253,7 @@ pub fn provide(providers: &mut Providers) {\n             traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));\n             tcx.arena.alloc_slice(&traits)\n         },\n-        trait_impls_in_crate: |tcx, ()| {\n+        trait_impls_in_crate: |tcx, LocalCrate| {\n             let mut trait_impls = Vec::new();\n             for id in tcx.hir().items() {\n                 if matches!(tcx.def_kind(id.owner_id), DefKind::Impl { .. })"}, {"sha": "b2bae47054cc2894602fb38e7192ffdf63b3ef8c", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -1,4 +1,5 @@\n use crate::hir::{ModuleItems, Owner};\n+use crate::query::LocalCrate;\n use crate::ty::TyCtxt;\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -1131,7 +1132,7 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n     }\n }\n \n-pub(super) fn crate_hash(tcx: TyCtxt<'_>, (): ()) -> Svh {\n+pub(super) fn crate_hash(tcx: TyCtxt<'_>, _: LocalCrate) -> Svh {\n     let krate = tcx.hir_crate(());\n     let hir_body_hash = krate.opt_hir_hash.expect(\"HIR hash missing while computing crate hash\");\n "}, {"sha": "ca65fbc2fd470cde55ed344b0b3668f2bb4b8fd4", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -13,6 +13,10 @@ use rustc_query_system::query::{DefaultCacheSelector, SingleCacheSelector, VecCa\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n+/// Placeholder for `CrateNum`'s \"local\" counterpart\n+#[derive(Copy, Clone, Debug)]\n+pub struct LocalCrate;\n+\n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n pub trait Key: Sized {\n@@ -115,11 +119,11 @@ impl Key for CrateNum {\n }\n \n impl AsLocalKey for CrateNum {\n-    type LocalKey = ();\n+    type LocalKey = LocalCrate;\n \n     #[inline(always)]\n     fn as_local_key(&self) -> Option<Self::LocalKey> {\n-        (*self == LOCAL_CRATE).then_some(())\n+        (*self == LOCAL_CRATE).then_some(LocalCrate)\n     }\n }\n "}, {"sha": "f740ec51080ae4bb3d8511cde81cba1d5ad2abc8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -8,7 +8,7 @@ use crate::ty::{self, print::describe_as_module, TyCtxt};\n use rustc_span::def_id::LOCAL_CRATE;\n \n mod keys;\n-pub use keys::{AsLocalKey, Key};\n+pub use keys::{AsLocalKey, Key, LocalCrate};\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method"}, {"sha": "653763353987c310bf9a1242603eb34206aeebe6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -15,6 +15,7 @@ use crate::mir::interpret::{self, Allocation, ConstAllocation};\n use crate::mir::{\n     Body, BorrowCheckResult, Field, Local, Place, PlaceElem, ProjectionKind, Promoted,\n };\n+use crate::query::LocalCrate;\n use crate::thir::Thir;\n use crate::traits;\n use crate::traits::solve;\n@@ -2519,10 +2520,10 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     providers.extern_mod_stmt_cnum =\n         |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n     providers.is_panic_runtime =\n-        |tcx, ()| tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime);\n+        |tcx, LocalCrate| tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime);\n     providers.is_compiler_builtins =\n-        |tcx, ()| tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins);\n-    providers.has_panic_handler = |tcx, ()| {\n+        |tcx, LocalCrate| tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins);\n+    providers.has_panic_handler = |tcx, LocalCrate| {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };"}, {"sha": "c9b24adba0ca817384c337d6f65eea828d9cfbb5", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -1,5 +1,6 @@\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_middle::mir::*;\n+use rustc_middle::query::LocalCrate;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -121,7 +122,7 @@ fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n     tainted\n }\n \n-fn required_panic_strategy(tcx: TyCtxt<'_>, (): ()) -> Option<PanicStrategy> {\n+fn required_panic_strategy(tcx: TyCtxt<'_>, _: LocalCrate) -> Option<PanicStrategy> {\n     if tcx.is_panic_runtime(LOCAL_CRATE) {\n         return Some(tcx.sess.panic_strategy());\n     }"}, {"sha": "9dd39a5c9fe069be3964aa5a1bda1aa144ec9b23", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -5,8 +5,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_expand::base::resolve_path;\n use rustc_hir as hir;\n use rustc_hir::HirId;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n+use rustc_middle::{query::LocalCrate, ty::query::Providers};\n use rustc_span::{sym, DebuggerVisualizerFile, DebuggerVisualizerType};\n \n use std::sync::Arc;\n@@ -67,7 +67,7 @@ fn check_for_debugger_visualizer(\n }\n \n /// Traverses and collects the debugger visualizers for a specific crate.\n-fn debugger_visualizers(tcx: TyCtxt<'_>, (): ()) -> Vec<DebuggerVisualizerFile> {\n+fn debugger_visualizers(tcx: TyCtxt<'_>, _: LocalCrate) -> Vec<DebuggerVisualizerFile> {\n     // Initialize the collector.\n     let mut debugger_visualizers = FxHashSet::default();\n "}, {"sha": "eb6ea673c85d4cffe11930dfa792e2414ff61944", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -12,6 +12,7 @@\n use rustc_ast as ast;\n use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::OwnerId;\n+use rustc_middle::query::LocalCrate;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, LOCAL_CRATE};\n@@ -62,7 +63,7 @@ fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-fn diagnostic_items(tcx: TyCtxt<'_>, (): ()) -> DiagnosticItems {\n+fn diagnostic_items(tcx: TyCtxt<'_>, _: LocalCrate) -> DiagnosticItems {\n     // Initialize the collector.\n     let mut diagnostic_items = DiagnosticItems::default();\n "}, {"sha": "0aea105ccc49d3ea97067013ca5ad16c65aaeb10", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=d213114cb5ad5bb525e88ec2d2f8e934f8a8f8b8", "patch": "@@ -29,6 +29,7 @@ use rustc_middle::{\n         ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n     },\n     ty::{query::ExternProviders, TyCtxt},\n+    query::LocalCrate,\n };\n use rustc_session::{config::CrateType, search_paths::PathKind, CtfeBacktrace};\n \n@@ -107,7 +108,7 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n             config.override_queries = Some(|_, local_providers, _| {\n                 // `exported_symbols` and `reachable_non_generics` provided by rustc always returns\n                 // an empty result if `tcx.sess.opts.output_types.should_codegen()` is false.\n-                local_providers.exported_symbols = |tcx, ()| {\n+                local_providers.exported_symbols = |tcx, LocalCrate| {\n                     let reachable_set = tcx.with_stable_hashing_context(|hcx| {\n                         tcx.reachable_set(()).to_sorted(&hcx, true)\n                     });"}]}