{"sha": "56a12b2ad058f22f1ef090713df15598525ba4a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTEyYjJhZDA1OGYyMmYxZWYwOTA3MTNkZjE1NTk4NTI1YmE0YTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-21T06:37:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-21T06:37:17Z"}, "message": "Auto merge of #62003 - christianpoveda:master, r=oli-obk\n\nReplace MemoryExtra by Memory in intptrcast methods\n\nr? @RalfJung @oli-obk", "tree": {"sha": "bf016eefaab8e03db6fe765d14f821b3f967eb1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf016eefaab8e03db6fe765d14f821b3f967eb1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a12b2ad058f22f1ef090713df15598525ba4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a12b2ad058f22f1ef090713df15598525ba4a4", "html_url": "https://github.com/rust-lang/rust/commit/56a12b2ad058f22f1ef090713df15598525ba4a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a12b2ad058f22f1ef090713df15598525ba4a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbec74ffa7982de8e066a93969ce70a891d7908b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbec74ffa7982de8e066a93969ce70a891d7908b", "html_url": "https://github.com/rust-lang/rust/commit/dbec74ffa7982de8e066a93969ce70a891d7908b"}, {"sha": "e152c38f65ae1aa69630b0b82e571e52b05e3302", "url": "https://api.github.com/repos/rust-lang/rust/commits/e152c38f65ae1aa69630b0b82e571e52b05e3302", "html_url": "https://github.com/rust-lang/rust/commit/e152c38f65ae1aa69630b0b82e571e52b05e3302"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "3ad7b00a6653ff675d226077d3c6ecc4236dd161", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56a12b2ad058f22f1ef090713df15598525ba4a4/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a12b2ad058f22f1ef090713df15598525ba4a4/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=56a12b2ad058f22f1ef090713df15598525ba4a4", "patch": "@@ -24,7 +24,7 @@ use crate::interpret::{self,\n     PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar,\n     RawConst, ConstValue,\n     InterpResult, InterpErrorInfo, InterpError, GlobalId, InterpretCx, StackPopCleanup,\n-    Allocation, AllocId, MemoryKind,\n+    Allocation, AllocId, MemoryKind, Memory,\n     snapshot, RefTracking, intern_const_alloc_recursive,\n };\n \n@@ -410,7 +410,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n-        _memory_extra: &(),\n+        _memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n         // We do not use a tag so we can just cheaply forward the allocation\n         (alloc, ())\n@@ -419,7 +419,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     #[inline(always)]\n     fn tag_static_base_pointer(\n         _id: AllocId,\n-        _memory_extra: &(),\n+        _memory: &Memory<'mir, 'tcx, Self>,\n     ) -> Self::PointerTag {\n         ()\n     }"}, {"sha": "4eb95f20d935449e610426d1c88ef571a4edfa99", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56a12b2ad058f22f1ef090713df15598525ba4a4/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a12b2ad058f22f1ef090713df15598525ba4a4/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=56a12b2ad058f22f1ef090713df15598525ba4a4", "patch": "@@ -11,8 +11,7 @@ use rustc::ty::{self, query::TyCtxtAt};\n \n use super::{\n     Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n-    InterpretCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer,\n-    InterpErrorInfo, InterpError\n+    InterpretCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer, Memory\n };\n \n /// Whether this kind of memory is allowed to leak\n@@ -178,7 +177,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag);\n \n     /// Return the \"base\" tag for the given static allocation: the one that is used for direct\n@@ -188,7 +187,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// for cyclic statics!\n     fn tag_static_base_pointer(\n         id: AllocId,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> Self::PointerTag;\n \n     /// Executes a retagging operation\n@@ -212,19 +211,19 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     fn int_to_ptr(\n         int: u64,\n-        _extra: &Self::MemoryExtra,\n+        _mem: &Memory<'mir, 'tcx, Self>,\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         if int == 0 {\n-            Err(InterpErrorInfo::from(InterpError::InvalidNullPointerUsage))\n+            err!(InvalidNullPointerUsage)\n         } else {\n-            Err(InterpErrorInfo::from(InterpError::ReadBytesAsPointer))\n+            err!(ReadBytesAsPointer)\n         }\n     }\n \n     fn ptr_to_int(\n         _ptr: Pointer<Self::PointerTag>,\n-        _extra: &Self::MemoryExtra,\n+        _mem: &Memory<'mir, 'tcx, Self>,\n     ) -> InterpResult<'tcx, u64> {\n-        Err(InterpErrorInfo::from(InterpError::ReadPointerAsBytes))\n+        err!(ReadPointerAsBytes)\n     }\n }"}, {"sha": "de035ed779e2a97de3d9b034794b8dc09507d250", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56a12b2ad058f22f1ef090713df15598525ba4a4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a12b2ad058f22f1ef090713df15598525ba4a4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=56a12b2ad058f22f1ef090713df15598525ba4a4", "patch": "@@ -107,7 +107,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n     #[inline]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n-        ptr.with_tag(M::tag_static_base_pointer(ptr.alloc_id, &self.extra))\n+        ptr.with_tag(M::tag_static_base_pointer(ptr.alloc_id, &self))\n     }\n \n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> Pointer<M::PointerTag> {\n@@ -140,7 +140,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> Pointer<M::PointerTag> {\n         let id = self.tcx.alloc_map.lock().reserve();\n-        let (alloc, tag) = M::tag_allocation(id, Cow::Owned(alloc), Some(kind), &self.extra);\n+        let (alloc, tag) = M::tag_allocation(id, Cow::Owned(alloc), Some(kind), &self);\n         self.alloc_map.insert(id, (kind, alloc.into_owned()));\n         Pointer::from(id).with_tag(tag)\n     }\n@@ -327,7 +327,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     fn get_static_alloc(\n         id: AllocId,\n         tcx: TyCtxtAt<'tcx>,\n-        memory_extra: &M::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {\n         let alloc = tcx.alloc_map.lock().get(id);\n         let alloc = match alloc {\n@@ -374,7 +374,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             id, // always use the ID we got as input, not the \"hidden\" one.\n             alloc,\n             M::STATIC_KIND.map(MemoryKind::Machine),\n-            memory_extra\n+            memory\n         ).0)\n     }\n \n@@ -387,7 +387,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // `get_static_alloc` that we can actually use directly without inserting anything anywhere.\n         // So the error type is `InterpResult<'tcx, &Allocation<M::PointerTag>>`.\n         let a = self.alloc_map.get_or(id, || {\n-            let alloc = Self::get_static_alloc(id, self.tcx, &self.extra).map_err(Err)?;\n+            let alloc = Self::get_static_alloc(id, self.tcx, &self).map_err(Err)?;\n             match alloc {\n                 Cow::Borrowed(alloc) => {\n                     // We got a ref, cheaply return that as an \"error\" so that the\n@@ -416,11 +416,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n     ) -> InterpResult<'tcx, &mut Allocation<M::PointerTag, M::AllocExtra>> {\n         let tcx = self.tcx;\n-        let memory_extra = &self.extra;\n+        let alloc = Self::get_static_alloc(id, tcx, &self);\n         let a = self.alloc_map.get_mut_or(id, || {\n             // Need to make a copy, even if `get_static_alloc` is able\n             // to give us a cheap reference.\n-            let alloc = Self::get_static_alloc(id, tcx, memory_extra)?;\n+            let alloc = alloc?;\n             if alloc.mutability == Mutability::Immutable {\n                 return err!(ModifiedConstantMemory);\n             }\n@@ -843,7 +843,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         match scalar {\n             Scalar::Ptr(ptr) => Ok(ptr),\n-            _ => M::int_to_ptr(scalar.to_usize(self)?, &self.extra)\n+            _ => M::int_to_ptr(scalar.to_usize(self)?, self)\n         }\n     }\n \n@@ -854,7 +854,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, u128> {\n         match scalar.to_bits_or_ptr(size, self) {\n             Ok(bits) => Ok(bits),\n-            Err(ptr) => Ok(M::ptr_to_int(ptr, &self.extra)? as u128)\n+            Err(ptr) => Ok(M::ptr_to_int(ptr, self)? as u128)\n         }\n     }\n }"}]}