{"sha": "9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYTVhOTFmYzUwYTViN2E3YzI5ODBlMzZlMWJmNjNkZjMxNzk1MDA=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-03-12T00:19:16Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-30T23:33:11Z"}, "message": "visitor: Handle specified line ranges in visit_stmt\n\nThis commit adds a very rough implementation of handling the specified\nline ranges in `config.file_lines_map` for statements. It reformats a\nstatement if its span is fully contained in the set of lines specified\nfor the file.\n\nThe implementation here is intended as a proof of concept, and\ndemonstration that the machinery added in the preceding commits is\nfunctional. A final implementation would likely hook in via the\n`Rewrite` trait.\n\nRefs #434", "tree": {"sha": "93c220c34757b122f8ae888605af0b4a8b3d8524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c220c34757b122f8ae888605af0b4a8b3d8524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "html_url": "https://github.com/rust-lang/rust/commit/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/c311b30cacf91e8bfc4b6fb586dc3ec843140e26", "html_url": "https://github.com/rust-lang/rust/commit/c311b30cacf91e8bfc4b6fb586dc3ec843140e26"}], "stats": {"total": 233, "additions": 232, "deletions": 1}, "files": [{"sha": "48b5e0ff7d247e74c7a78188cfdf7cc3c9a9cb52", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -16,7 +16,7 @@ use strings::string_buffer::StringBuffer;\n \n use Indent;\n use utils;\n-use codemap::SpanUtils;\n+use codemap::{LineRangeUtils, SpanUtils};\n use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n@@ -47,6 +47,11 @@ impl<'a> FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(stmt.span.lo),\n                self.codemap.lookup_char_pos(stmt.span.hi));\n \n+        // FIXME(#434): Move this check to somewhere more central, eg Rewrite.\n+        if !self.config.file_lines.contains(&self.codemap.lookup_line_range(stmt.span)) {\n+            return;\n+        }\n+\n         match stmt.node {\n             ast::StmtKind::Decl(ref decl, _) => {\n                 if let ast::DeclKind::Item(ref item) = decl.node {"}, {"sha": "43c18d8f46fa112c20472baf0240d2104adf8aa9", "filename": "tests/source/file-lines-1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-1.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-1.rs\",\"range\":[4,8]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "6f8e9e6db3a2b1de2cfc63c2548d6c71caae7b0a", "filename": "tests/source/file-lines-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-2.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-2.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+            .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "73d482695d6ee4dd8a26ac23819ffeddceda6689", "filename": "tests/source/file-lines-3.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-3.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[4,8]},{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "381f021515fed0897d606cd8b32ab66762dbe884", "filename": "tests/source/file-lines-4.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Fsource%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-4.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-file_lines: []\n+// (Test that nothing is formatted if an empty array is specified.)\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "5b8478e03032ffa1c84d25c5e3522dab587d76f7", "filename": "tests/target/file-lines-1.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-1.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-1.rs\",\"range\":[4,8]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+            field1: val1,\n+            field2: val2,\n+        }\n+        .method_call()\n+        .method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "db4902d49b7c5ec6aee974eb2dc1250a990e2324", "filename": "tests/target/file-lines-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-2.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,24 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-2.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond { val1 } else { val2 }.method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "19359b2ddf9ae1436e5d43182fd21618dc7643b2", "filename": "tests/target/file-lines-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-3.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[4,8]},{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+            field1: val1,\n+            field2: val2,\n+        }\n+        .method_call()\n+        .method_call();\n+\n+    let y = if cond { val1 } else { val2 }.method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "381f021515fed0897d606cd8b32ab66762dbe884", "filename": "tests/target/file-lines-4.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa5a91fc50a5b7a7c2980e36e1bf63df3179500/tests%2Ftarget%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-4.rs?ref=9fa5a91fc50a5b7a7c2980e36e1bf63df3179500", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-file_lines: []\n+// (Test that nothing is formatted if an empty array is specified.)\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}]}