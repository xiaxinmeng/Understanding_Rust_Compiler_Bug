{"sha": "19707b0ff2c0beb80f77eaa7274f4588a506309d", "node_id": "C_kwDOAAsO6NoAKDE5NzA3YjBmZjJjMGJlYjgwZjc3ZWFhNzI3NGY0NTg4YTUwNjMwOWQ", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-03T13:43:17Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-14T15:55:01Z"}, "message": "debuginfo: Refactor debuginfo generation for types -- Address outstanding FIXMEs.", "tree": {"sha": "f95d1936e06a619f6bb5fe1b00cc96b8afea792a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95d1936e06a619f6bb5fe1b00cc96b8afea792a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19707b0ff2c0beb80f77eaa7274f4588a506309d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19707b0ff2c0beb80f77eaa7274f4588a506309d", "html_url": "https://github.com/rust-lang/rust/commit/19707b0ff2c0beb80f77eaa7274f4588a506309d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19707b0ff2c0beb80f77eaa7274f4588a506309d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a1194edf01d0a070506f69dc7d70bdc025cdf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a1194edf01d0a070506f69dc7d70bdc025cdf9", "html_url": "https://github.com/rust-lang/rust/commit/07a1194edf01d0a070506f69dc7d70bdc025cdf9"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "ac634aa015f74153a30e1c9548f38b9ef32d40b5", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19707b0ff2c0beb80f77eaa7274f4588a506309d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19707b0ff2c0beb80f77eaa7274f4588a506309d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=19707b0ff2c0beb80f77eaa7274f4588a506309d", "patch": "@@ -1120,11 +1120,7 @@ fn build_closure_env_di_node<'ll, 'tcx>(\n         ),\n         // Fields:\n         |cx, owner| build_upvar_field_di_nodes(cx, closure_env_type, owner),\n-        // Generics:\n-        |_| {\n-            // FIXME(mw): Should we specify generic parameters for closures?\n-            smallvec![]\n-        },\n+        NO_GENERICS,\n     )\n }\n \n@@ -1178,10 +1174,6 @@ fn build_union_type_di_node<'ll, 'tcx>(\n     )\n }\n \n-//=-----------------------------------------------------------------------------\n-// Enums\n-//=-----------------------------------------------------------------------------\n-\n // FIXME(eddyb) maybe precompute this? Right now it's computed once\n // per generator monomorphization, but it doesn't depend on substs.\n fn generator_layout_and_saved_local_names<'tcx>("}, {"sha": "19f0ce54250d05c905e444530703bed2a052e217", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19707b0ff2c0beb80f77eaa7274f4588a506309d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19707b0ff2c0beb80f77eaa7274f4588a506309d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=19707b0ff2c0beb80f77eaa7274f4588a506309d", "patch": "@@ -110,15 +110,14 @@ fn tag_base_type<'ll, 'tcx>(\n         _ => false,\n     });\n \n-    // FIXME(mw): Why are niche and regular tags treated differently? Because we want to preserve\n-    //            the sign?\n     match enum_type_and_layout.layout.variants() {\n         // A single-variant enum has no discriminant.\n         Variants::Single { .. } => {\n             bug!(\"tag_base_type() called for enum without tag: {:?}\", enum_type_and_layout)\n         }\n \n         Variants::Multiple { tag_encoding: TagEncoding::Niche { .. }, tag, .. } => {\n+            // Niche tags are always normalized to unsized integers of the correct size.\n             match tag.value {\n                 Primitive::Int(t, _) => t,\n                 Primitive::F32 => Integer::I32,\n@@ -134,26 +133,34 @@ fn tag_base_type<'ll, 'tcx>(\n         }\n \n         Variants::Multiple { tag_encoding: TagEncoding::Direct, tag, .. } => {\n+            // Direct tags preserve the sign.\n             tag.value.to_ty(cx.tcx)\n         }\n     }\n }\n \n-/// This is a helper function. FIXME: elaborate docs.\n+/// Build a DW_TAG_enumeration_type debuginfo node, with the given base type and variants.\n+/// This is a helper function and does not register anything in the type map by itself.\n+///\n+/// `variants` is an iterator of (discr-value, variant-name).\n+///\n+// NOTE: Handling of discriminant values is somewhat inconsistent. They can appear as u128,\n+//       u64, and i64. Here everything gets mapped to i64 because that's what LLVM's API expects.\n fn build_enumeration_type_di_node<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     type_name: &str,\n     base_type: Ty<'tcx>,\n     variants: &mut dyn Iterator<Item = (Discr<'tcx>, Cow<'tcx, str>)>,\n     containing_scope: &'ll DIType,\n ) -> &'ll DIType {\n+    let is_unsigned = match base_type.kind() {\n+        ty::Int(_) => false,\n+        ty::Uint(_) => true,\n+        _ => bug!(\"build_enumeration_type_di_node() called with non-integer tag type.\"),\n+    };\n+\n     let enumerator_di_nodes: SmallVec<Option<&'ll DIType>> = variants\n         .map(|(discr, variant_name)| {\n-            let is_unsigned = match discr.ty.kind() {\n-                ty::Int(_) => false,\n-                ty::Uint(_) => true,\n-                _ => bug!(\"build_enumeration_type_di_node() called with non-integer tag type.\"),\n-            };\n             unsafe {\n                 Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                     DIB(cx),"}, {"sha": "f1935e0ec31afbbf4bd20bf9cb3113c0d948387b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/native.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19707b0ff2c0beb80f77eaa7274f4588a506309d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19707b0ff2c0beb80f77eaa7274f4588a506309d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs?ref=19707b0ff2c0beb80f77eaa7274f4588a506309d", "patch": "@@ -410,9 +410,9 @@ fn build_enum_variant_member_di_node<'ll, 'tcx>(\n             variant_member_info.variant_name.len(),\n             file_di_node,\n             line_number,\n-            enum_type_and_layout.size.bits(), // FIXME: Unused?\n-            enum_type_and_layout.align.abi.bits() as u32, // FIXME: Unused?\n-            Size::ZERO.bits(),                // FIXME: Unused?\n+            enum_type_and_layout.size.bits(),\n+            enum_type_and_layout.align.abi.bits() as u32,\n+            Size::ZERO.bits(),\n             discr_value.map(|v| cx.const_u64(v)),\n             DIFlags::FlagZero,\n             variant_member_info.variant_struct_type_di_node,"}]}