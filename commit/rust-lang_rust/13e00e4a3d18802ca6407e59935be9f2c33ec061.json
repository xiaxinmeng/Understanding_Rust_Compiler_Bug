{"sha": "13e00e4a3d18802ca6407e59935be9f2c33ec061", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTAwZTRhM2QxODgwMmNhNjQwN2U1OTkzNWJlOWYyYzMzZWMwNjE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-08-28T04:34:03Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-30T16:54:03Z"}, "message": "Update based on PR feedback", "tree": {"sha": "86310bd54230b0caaa201dbf7485e104abe935f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86310bd54230b0caaa201dbf7485e104abe935f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e00e4a3d18802ca6407e59935be9f2c33ec061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e00e4a3d18802ca6407e59935be9f2c33ec061", "html_url": "https://github.com/rust-lang/rust/commit/13e00e4a3d18802ca6407e59935be9f2c33ec061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e00e4a3d18802ca6407e59935be9f2c33ec061/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a609521007c0c0c37d8d2396085631c08ad5232", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a609521007c0c0c37d8d2396085631c08ad5232", "html_url": "https://github.com/rust-lang/rust/commit/8a609521007c0c0c37d8d2396085631c08ad5232"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "0500088bbdc0bc5f86933ad1d3611198e17cda29", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -2441,7 +2441,7 @@ The currently implemented features of the reference compiler are:\n * `default_type_params` - Allows use of default type parameters. The future of\n                           this feature is uncertain.\n \n-* `if_let` - Allows use of the `if let` desugaring syntax.\n+* `if_let` - Allows use of the `if let` syntax.\n \n * `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n                  are inherently unstable and no promise about them is made."}, {"sha": "7f02260cd2cd45e5379cd6441a0d7bf9c440ceba", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -1,3 +1,3 @@\n % The Rust Reference Manual\n \n-The manual has moved, and is now called [the reference](reference.html).\n\\ No newline at end of file\n+The manual has moved, and is now called [the reference](reference.html)."}, {"sha": "a9a3981ab5fc8687c5006e267a53eedc062e1e40", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -222,7 +222,9 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_node(expr.id, [then_exit, else_exit])           // 4, 5\n             }\n \n-            ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+            ast::ExprIfLet(..) => {\n+                self.tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+            }\n \n             ast::ExprWhile(ref cond, ref body, _) => {\n                 //"}, {"sha": "51cdbfcf2514c17298ed9e49356780d805d82989", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -374,7 +374,9 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,TYPER> {\n                 }\n             }\n \n-            ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+            ast::ExprIfLet(..) => {\n+                self.tcx().sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+            }\n \n             ast::ExprMatch(ref discr, ref arms, _) => {\n                 let discr_cmt = return_if_err!(self.mc.cat_expr(&**discr));"}, {"sha": "2176cd565894375db7a36c1b7f1c2ab4d2d6ca58", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -481,7 +481,9 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         visit::walk_expr(ir, expr);\n       }\n-      ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+      ExprIfLet(..) => {\n+          ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+      }\n       ExprForLoop(ref pat, _, _, _) => {\n         pat_util::pat_bindings(&ir.tcx.def_map, &**pat, |bm, p_id, sp, path1| {\n             debug!(\"adding local variable {} from for loop with bm {:?}\",\n@@ -1012,7 +1014,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_expr(&**cond, ln)\n           }\n \n-          ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+          ExprIfLet(..) => {\n+              self.ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+          }\n \n           ExprWhile(ref cond, ref blk, _) => {\n             self.propagate_through_loop(expr, WhileLoop(&**cond), &**blk, succ)\n@@ -1473,7 +1477,9 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ExprPath(..) | ExprBox(..) => {\n         visit::walk_expr(this, expr);\n       }\n-      ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\")\n+      ExprIfLet(..) => {\n+        this.ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+      }\n     }\n }\n "}, {"sha": "115432873ff9aac9334b390f06a9bd9873bcd805", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -506,7 +506,9 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             Ok(self.cat_rvalue_node(expr.id(), expr.span(), expr_ty))\n           }\n \n-          ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\")\n+          ast::ExprIfLet(..) => {\n+            self.tcx().sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+          }\n         }\n     }\n "}, {"sha": "5ef058fad350e1a26a94e7f2e6bdf7887cef4a30", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -3631,10 +3631,13 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n             RvalueDpsExpr\n         }\n \n+        ast::ExprIfLet(..) => {\n+            tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+        }\n+\n         ast::ExprLit(ref lit) if lit_is_str(&**lit) => {\n             RvalueDpsExpr\n         }\n-        ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n \n         ast::ExprCast(..) => {\n             match tcx.node_types.borrow().find(&(expr.id as uint)) {"}, {"sha": "dd7b8a7e6241394db708d2df31dbf52bb37e5477", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -4106,7 +4106,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         check_then_else(fcx, &**cond, &**then_blk, opt_else_expr.as_ref().map(|e| &**e),\n                         id, expr.span, expected);\n       }\n-      ast::ExprIfLet(..) => fail!(\"non-desugared ExprIfLet\"),\n+      ast::ExprIfLet(..) => {\n+        tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n+      }\n       ast::ExprWhile(ref cond, ref body, _) => {\n         check_expr_has_type(fcx, &**cond, ty::mk_bool());\n         check_block_no_value(fcx, &**body);"}, {"sha": "76ca33cc2b846a22b6e63deddef71680a44f68b9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -132,26 +132,22 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n         }\n \n         // Desugar support for ExprIfLet in the ExprIf else position\n-        ast::ExprIf(cond, blk, mut elseopt) => {\n-            // NOTE: replace with 'if let' after snapshot\n-            match elseopt {\n-                Some(els) => match els.node {\n-                    ast::ExprIfLet(..) => {\n-                        // wrap the if-let expr in a block\n-                        let blk = P(ast::Block {\n-                            view_items: vec![],\n-                            stmts: vec![],\n-                            expr: Some(els),\n-                            id: ast::DUMMY_NODE_ID,\n-                            rules: ast::DefaultBlock,\n-                            span: els.span\n-                        });\n-                        elseopt = Some(fld.cx.expr_block(blk));\n-                    }\n-                    _ => ()\n-                },\n-                None => ()\n-            };\n+        ast::ExprIf(cond, blk, elseopt) => {\n+            let elseopt = elseopt.map(|els| match els.node {\n+                ast::ExprIfLet(..) => {\n+                    // wrap the if-let expr in a block\n+                    let blk = P(ast::Block {\n+                        view_items: vec![],\n+                        stmts: vec![],\n+                        expr: Some(els),\n+                        id: ast::DUMMY_NODE_ID,\n+                        rules: ast::DefaultBlock,\n+                        span: els.span\n+                    });\n+                    fld.cx.expr_block(blk)\n+                }\n+                _ => els\n+            });\n             let if_expr = fld.cx.expr(e.span, ast::ExprIf(cond, blk, elseopt));\n             noop_fold_expr(if_expr, fld)\n         }"}, {"sha": "ca6d488772c613b520e641fb0f7887c63250c577", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -360,7 +360,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n             }\n             ast::ExprIfLet(..) => {\n                 self.gate_feature(\"if_let\", e.span,\n-                                  \"`if let` desugaring is experimental\");\n+                                  \"`if let` syntax is experimental\");\n             }\n             _ => {}\n         }"}, {"sha": "0780e68a06294aa67c03c2a82e142be79b964401", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e00e4a3d18802ca6407e59935be9f2c33ec061/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=13e00e4a3d18802ca6407e59935be9f2c33ec061", "patch": "@@ -579,7 +579,9 @@ impl<'a> Parser<'a> {\n         if self.is_keyword(kw) {\n             self.bump();\n             true\n-        } else { false }\n+        } else {\n+            false\n+        }\n     }\n \n     /// If the given word is not a keyword, signal an error."}]}