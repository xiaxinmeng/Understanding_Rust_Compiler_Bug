{"sha": "6929013b850db7c8ac55de4bcd0df8310ddb788b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MjkwMTNiODUwZGI3YzhhYzU1ZGU0YmNkMGRmODMxMGRkYjc4OGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-08T23:12:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-06-22T18:51:08Z"}, "message": "fix subtle bug in NLL type checker\n\nThe bug was revealed by the behavior of the old-lub-glb-hr-noteq1.rs\ntest. The old-lub-glb-hr-noteq2 test shows the current 'order dependent'\nbehavior of coercions around higher-ranked functions, at least when\nrunning with `-Zborrowck=mir`.\n\nAlso, run compare-mode=nll.", "tree": {"sha": "0993004d03df7d50a6abebf5f973ccd5bdce335f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0993004d03df7d50a6abebf5f973ccd5bdce335f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6929013b850db7c8ac55de4bcd0df8310ddb788b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6929013b850db7c8ac55de4bcd0df8310ddb788b", "html_url": "https://github.com/rust-lang/rust/commit/6929013b850db7c8ac55de4bcd0df8310ddb788b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6929013b850db7c8ac55de4bcd0df8310ddb788b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "html_url": "https://github.com/rust-lang/rust/commit/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2"}], "stats": {"total": 533, "additions": 472, "deletions": 61}, "files": [{"sha": "2350c28dfaaff6afc91da2b4c49c2d413e2bcaee", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -522,7 +522,13 @@ where\n         }\n \n         if a == b {\n-            return Ok(a);\n+            // Subtle: if a or b has a bound variable that we are lazilly\n+            // substituting, then even if a == b, it could be that the values we\n+            // will substitute for those bound variables are *not* the same, and\n+            // hence returning `Ok(a)` is incorrect.\n+            if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n+                return Ok(a);\n+            }\n         }\n \n         match (&a.kind, &b.kind) {"}, {"sha": "285d9ed64691a555e190f134a375f2fbf9059bcf", "filename": "src/librustc_mir/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -25,7 +25,7 @@ pub(super) fn relate_types<'tcx>(\n     category: ConstraintCategory,\n     borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n ) -> Fallible<()> {\n-    debug!(\"eq_types(a={:?}, b={:?}, locations={:?})\", a, b, locations);\n+    debug!(\"relate_types(a={:?}, v={:?}, b={:?}, locations={:?})\", a, v, b, locations);\n     TypeRelating::new(\n         infcx,\n         NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),"}, {"sha": "b6cd8da236260f9e06fc34b30cfbd3f61642230c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -895,7 +895,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         let prev_ty = self.resolve_vars_with_obligations(prev_ty);\n         let new_ty = self.resolve_vars_with_obligations(new_ty);\n-        debug!(\"coercion::try_find_coercion_lub({:?}, {:?})\", prev_ty, new_ty);\n+        debug!(\n+            \"coercion::try_find_coercion_lub({:?}, {:?}, exprs={:?} exprs)\",\n+            prev_ty,\n+            new_ty,\n+            exprs.len()\n+        );\n \n         // Special-case that coercion alone cannot handle:\n         // Function items or non-capturing closures of differing IDs or InternalSubsts.\n@@ -1001,6 +1006,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Ok(ok) => {\n                     let (adjustments, target) = self.register_infer_ok_obligations(ok);\n                     self.apply_adjustments(new, adjustments);\n+                    debug!(\n+                        \"coercion::try_find_coercion_lub: was able to coerce from previous type {:?} to new type {:?}\",\n+                        prev_ty, new_ty,\n+                    );\n                     return Ok(target);\n                 }\n                 Err(e) => first_error = Some(e),\n@@ -1031,6 +1040,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n             if !noop {\n+                debug!(\n+                    \"coercion::try_find_coercion_lub: older expression {:?} had adjustments, requiring LUB\",\n+                    expr,\n+                );\n+\n                 return self\n                     .commit_if_ok(|_| self.at(cause, self.param_env).lub(prev_ty, new_ty))\n                     .map(|ok| self.register_infer_ok_obligations(ok));\n@@ -1048,6 +1062,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             Ok(ok) => {\n+                debug!(\n+                    \"coercion::try_find_coercion_lub: was able to coerce previous type {:?} to new type {:?}\",\n+                    prev_ty, new_ty,\n+                );\n                 let (adjustments, target) = self.register_infer_ok_obligations(ok);\n                 for expr in exprs {\n                     let expr = expr.as_coercion_site();"}, {"sha": "25e9f726ba53a866cb3d42c0799da27b7edd5592", "filename": "src/test/ui/associated-types/associated-types-eq-hr.nll.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,33 @@\n+error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+  --> $DIR/associated-types-eq-hr.rs:87:5\n+   |\n+LL | fn foo<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n+   |                                    ------------- required by this bound in `foo`\n+...\n+LL |     foo::<UintStruct>();\n+   |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n+   |\n+   = note: expected reference `&isize`\n+              found reference `&usize`\n+\n+error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n+   |\n+LL | fn bar<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n+   |                                    ------------- required by this bound in `bar`\n+...\n+LL |     bar::<IntStruct>();\n+   |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n+   |\n+   = note: expected reference `&usize`\n+              found reference `&isize`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "2e03986a9ed8fa675263993f17ea82cd8c803fae", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/higher-ranked-projection.rs:25:5\n+   |\n+LL |     foo(());\n+   |     ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7d7121919240722d5fa5c8fb964f7d5d3c6b4f3b", "filename": "src/test/ui/generator/resume-arg-late-bound.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/resume-arg-late-bound.rs:15:5\n+   |\n+LL |     test(gen);\n+   |     ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d5343566633d56f75ce1b3b60fdb9dee0992395f", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hr-subtype.rs:45:13\n+   |\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,\n+LL | | for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n+   | |_____________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "f11560939675603db95ea999a65a2aa2d2e30476", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hr-subtype.rs:45:13\n+   |\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n+LL | | fn(&'x u32)) }\n+   | |______________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "4541c462ee0565c8bebcceb8ecc3bd2d4e2cea95", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,26 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hr-subtype.rs:45:13\n+   |\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n+LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n+   | |__________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: higher-ranked subtype error\n+  --> $DIR/hr-subtype.rs:45:13\n+   |\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n+LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n+   | |__________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f290a93326f3700c58e009174c85f8744acaa04c", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-conflate-regions.rs:27:10\n+   |\n+LL | fn b() { want_foo2::<SomeStruct>(); }\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-conflate-regions.rs:27:10\n+   |\n+LL | fn b() { want_foo2::<SomeStruct>(); }\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "11390d9e2d265d5e867152b60b661e34386f72bd", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-exists-forall-fn.rs:17:12\n+   |\n+LL |     let _: for<'b> fn(&'b u32) = foo();\n+   |            ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a4c3ffd1f6c08aa44f969883285e7ed1d741ca39", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+   |\n+LL |     foo::<()>();\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e2a399b2faa9d8887084e879fe4e81b6a10ac304", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+   |\n+LL |     foo::<()>();\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8901a1b46817d6b4b77435d7675377fb05e1cd34", "filename": "src/test/ui/hrtb/hrtb-just-for-static.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,24 @@\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-just-for-static.rs:24:5\n+   |\n+LL |     want_hrtb::<StaticInt>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/hrtb-just-for-static.rs:30:5\n+   |\n+LL | fn give_some<'a>() {\n+   |              -- lifetime `'a` defined here\n+LL |     want_hrtb::<&'a u32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/hrtb-just-for-static.rs:30:5\n+   |\n+LL |     want_hrtb::<&'a u32>()\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6c127b92d97d19d7224b066b4130f79d3eb97b3b", "filename": "src/test/ui/hrtb/issue-46989.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-46989.rs:38:5\n+   |\n+LL |     assert_foo::<fn(&i32)>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f673fbae8b79ce1a70396783e12b079c2a7d7cd5", "filename": "src/test/ui/issues/issue-40000.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-40000.rs:6:9\n+   |\n+LL |     foo(bar);\n+   |         ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fbf4aee02045d5d0c442390c0cd1234f31fb74b1", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-eq.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-eq.rs?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,27 @@\n+// Test that we give a note when the old LUB/GLB algorithm would have\n+// succeeded but the new code (which requires equality) gives an\n+// error. However, now that we handle subtyping correctly, we no\n+// longer get an error, because we recognize these two types as\n+// equivalent!\n+//\n+// check-pass\n+\n+fn foo(x: fn(&u8, &u8), y: for<'a> fn(&'a u8, &'a u8)) {\n+    // The two types above are actually equivalent. With the older\n+    // leak check, though, we didn't consider them as equivalent, and\n+    // hence we gave errors. But now we've fixed that.\n+    let z = match 22 {\n+        0 => x,\n+        _ => y,\n+    };\n+}\n+\n+fn foo_cast(x: fn(&u8, &u8), y: for<'a> fn(&'a u8, &'a u8)) {\n+    let z = match 22 {\n+        // No error with an explicit cast:\n+        0 => x as for<'a> fn(&'a u8, &'a u8),\n+        _ => y,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "b95e247d2a8cf8d737761c5389ddfe08275a2952", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/old-lub-glb-hr-noteq1.rs:11:14\n+   |\n+LL |         _ => y,\n+   |              ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "918542d471b58c08b4640afe24156595106d309a", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.rs?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,24 @@\n+// Test taking the LUB of two function types that are not equatable but where one is more\n+// general than the other. Test the case where the more general type (`x`) is the first\n+// match arm specifically.\n+\n+fn foo(x: for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8, y: for<'a> fn(&'a u8, &'a u8) -> &'a u8) {\n+    // The two types above are not equivalent. With the older LUB/GLB\n+    // algorithm, this may have worked (I don't remember), but now it\n+    // doesn't because we require equality.\n+    let z = match 22 {\n+        0 => x,\n+        _ => y, //~ ERROR `match` arms have incompatible types\n+    };\n+}\n+\n+fn foo_cast(x: for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8, y: for<'a> fn(&'a u8, &'a u8) -> &'a u8) {\n+    // But we can *upcast* explicitly the type of `x` and figure\n+    // things out:\n+    let z = match 22 {\n+        0 => x as for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+        _ => y,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "305e952d6046b55b885f52a793fa4d380c8660a2", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/old-lub-glb-hr.rs:40:14\n+  --> $DIR/old-lub-glb-hr-noteq1.rs:11:14\n    |\n LL |       let z = match 22 {\n    |  _____________-", "previous_filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr"}, {"sha": "0e069bc6f84e91450f9cf1b9874e0260a519cc02", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.rs?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,33 @@\n+// Test taking the LUB of two function types that are not equatable but where\n+// one is more general than the other. Test the case where the more general type\n+// (`x`) is the second match arm specifically.\n+//\n+// Skip for compare-mode because the pure NLL checker accepts this test. (Note\n+// that it still errors in old-lub-glb-hr-noteq1.rs). What happens is that, due\n+// to the ordering of the match arms, we pick the correct \"more general\" fn\n+// type, and we ignore the errors from the non-NLL type checker that requires\n+// equality. The NLL type checker only requires a subtyping relationship, and\n+// that holds.\n+//\n+// ignore-compare-mode-nll\n+\n+fn foo(x: for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8, y: for<'a> fn(&'a u8, &'a u8) -> &'a u8) {\n+    // The two types above are not equivalent. With the older LUB/GLB\n+    // algorithm, this may have worked (I don't remember), but now it\n+    // doesn't because we require equality.\n+    let z = match 22 {\n+        0 => y,\n+        _ => x, //~ ERROR `match` arms have incompatible types\n+    };\n+}\n+\n+fn foo_cast(x: for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8, y: for<'a> fn(&'a u8, &'a u8) -> &'a u8) {\n+    // But we can *upcast* explicitly the type of `x` and figure\n+    // things out:\n+    let z = match 22 {\n+        0 => x as for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n+        _ => y,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "252e13aada0547cd5b7e0d36baaf498d051a6ff6", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq2.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/old-lub-glb-hr-noteq2.rs:20:14\n+   |\n+LL |       let z = match 22 {\n+   |  _____________-\n+LL | |         0 => y,\n+   | |              - this is found to be of type `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+LL | |         _ => x,\n+   | |              ^ one type is more general than the other\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected fn pointer `for<'a> fn(&'a u8, &'a u8) -> &'a u8`\n+              found fn pointer `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5e24a99bcc3311503721d0ec05cc7133d060c0d1", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88a76e37b869d6ca343c6ba5d9f0c65deddbca2/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=c88a76e37b869d6ca343c6ba5d9f0c65deddbca2", "patch": "@@ -1,57 +0,0 @@\n-// Test that we give a note when the old LUB/GLB algorithm would have\n-// succeeded but the new code (which requires equality) gives an\n-// error. However, now that we handle subtyping correctly, we no\n-// longer get an error, because we recognize these two types as\n-// equivalent!\n-\n-fn foo(\n-    x: fn(&u8, &u8),\n-    y: for<'a> fn(&'a u8, &'a u8),\n-) {\n-    // The two types above are actually equivalent. With the older\n-    // leak check, though, we didn't consider them as equivalent, and\n-    // hence we gave errors. But now we've fixed that.\n-    let z = match 22 {\n-        0 => x,\n-        _ => y,\n-    };\n-}\n-\n-fn foo_cast(\n-    x: fn(&u8, &u8),\n-    y: for<'a> fn(&'a u8, &'a u8),\n-) {\n-    let z = match 22 {\n-        // No error with an explicit cast:\n-        0 => x as for<'a> fn(&'a u8, &'a u8),\n-        _ => y,\n-    };\n-}\n-\n-fn bar(\n-    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n-    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n-) {\n-    // The two types above are not equivalent. With the older LUB/GLB\n-    // algorithm, this may have worked (I don't remember), but now it\n-    // doesn't because we require equality.\n-    let z = match 22 {\n-        0 => x,\n-        _ => y, //~ ERROR `match` arms have incompatible types\n-    };\n-}\n-\n-fn bar_cast(\n-    x: for<'a, 'b> fn(&'a u8, &'b u8)-> &'a u8,\n-    y: for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n-) {\n-    // But we can *upcast* explicitly the type of `x` and figure\n-    // things out:\n-    let z = match 22 {\n-        0 => x as for<'a> fn(&'a u8, &'a u8) -> &'a u8,\n-        _ => y,\n-    };\n-}\n-\n-fn main() {\n-}"}, {"sha": "51bf96f32335b8d5e22c6016b762a67b8e4fe811", "filename": "src/test/ui/lub-glb/old-lub-glb-object.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/old-lub-glb-object.rs:10:14\n+   |\n+LL |         _ => y,\n+   |              ^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/old-lub-glb-object.rs:10:14\n+   |\n+LL |         _ => y,\n+   |              ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6ed91b20ab8a6f88815d0f18fd3b8f3cd5918f53", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,27 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch.rs:3:14\n+   |\n+LL |     a.iter().map(|_: (u32, u32)| 45);\n+   |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n+   |              |\n+   |              expected signature of `fn(&(u32, u32)) -> _`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch.rs:4:14\n+   |\n+LL |     a.iter().map(|_: &(u16, u16)| 45);\n+   |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n+   |              |\n+   |              expected signature of `fn(&(u32, u32)) -> _`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch.rs:5:14\n+   |\n+LL |     a.iter().map(|_: (u16, u16)| 45);\n+   |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`\n+   |              |\n+   |              expected signature of `fn(&(u32, u32)) -> _`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "745a61b866ed2ad2341e1c91f8d56cc517b41375", "filename": "src/test/ui/mismatched_types/closure-mismatch.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/closure-mismatch.rs:8:5\n+   |\n+LL |     baz(|_| ());\n+   |     ^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/closure-mismatch.rs:8:5\n+   |\n+LL |     baz(|_| ());\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d762f55f9d5f17da08155960cc059c6ed2629786", "filename": "src/test/ui/regions-fn-subtyping-return-static-fail.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static-fail.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/regions-fn-subtyping-return-static-fail.rs:48:5\n+   |\n+LL |     want_G(baz);\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "848d4fef1abfc16e0a16fc2ae5f9137d9110b012", "filename": "src/test/ui/rfc1623.nll.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Frfc1623.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,68 @@\n+error[E0277]: `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>` cannot be shared between threads safely\n+  --> $DIR/rfc1623.rs:21:1\n+   |\n+LL | / static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+LL | |     foo: &Foo { bools: &[false, true] },\n+LL | |     bar: &Bar { bools: &[true, true] },\n+LL | |     f: &id,\n+LL | |\n+LL | | };\n+   | |__^ `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>` cannot be shared between threads safely\n+   |\n+   = help: within `&SomeStruct`, the trait `std::marker::Sync` is not implemented for `dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n+   = note: required because it appears within the type `&dyn for<'a, 'b> std::ops::Fn(&'a Foo<'b>) -> &'a Foo<'b>`\n+   = note: required because it appears within the type `SomeStruct`\n+   = note: required because it appears within the type `&SomeStruct`\n+   = note: shared static variables must have a type that implements `Sync`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/rfc1623.rs:21:35\n+   |\n+LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+   |  ___________________________________^\n+LL | |     foo: &Foo { bools: &[false, true] },\n+LL | |     bar: &Bar { bools: &[true, true] },\n+LL | |     f: &id,\n+LL | |\n+LL | | };\n+   | |_^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/rfc1623.rs:21:35\n+   |\n+LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+   |  ___________________________________^\n+LL | |     foo: &Foo { bools: &[false, true] },\n+LL | |     bar: &Bar { bools: &[true, true] },\n+LL | |     f: &id,\n+LL | |\n+LL | | };\n+   | |_^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/rfc1623.rs:21:35\n+   |\n+LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+   |  ___________________________________^\n+LL | |     foo: &Foo { bools: &[false, true] },\n+LL | |     bar: &Bar { bools: &[true, true] },\n+LL | |     f: &id,\n+LL | |\n+LL | | };\n+   | |_^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/rfc1623.rs:21:35\n+   |\n+LL |   static SOME_STRUCT: &SomeStruct = &SomeStruct {\n+   |  ___________________________________^\n+LL | |     foo: &Foo { bools: &[false, true] },\n+LL | |     bar: &Bar { bools: &[true, true] },\n+LL | |     f: &id,\n+LL | |\n+LL | | };\n+   | |_^\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8c9cb742fac91f12814c64af1ed4806180b25a04", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,14 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-57611-trait-alias.rs:21:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-57611-trait-alias.rs:21:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d0c476dc6ec05cbd227c6a6fdfde12661af15b3a", "filename": "src/test/ui/where-clauses/where-for-self-2.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6929013b850db7c8ac55de4bcd0df8310ddb788b/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.nll.stderr?ref=6929013b850db7c8ac55de4bcd0df8310ddb788b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/where-for-self-2.rs:23:5\n+   |\n+LL |     foo(&X);\n+   |     ^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}