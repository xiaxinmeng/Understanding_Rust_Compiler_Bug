{"sha": "7ba8bbc49fa245f02dbca25fea446a75a4c19150", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYThiYmM0OWZhMjQ1ZjAyZGJjYTI1ZmVhNDQ2YTc1YTRjMTkxNTA=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-05-24T18:17:16Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-05-25T12:32:56Z"}, "message": "Update comments", "tree": {"sha": "c062c7f6b6f6ad6df30f5fa8203d14165ab2375b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c062c7f6b6f6ad6df30f5fa8203d14165ab2375b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba8bbc49fa245f02dbca25fea446a75a4c19150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba8bbc49fa245f02dbca25fea446a75a4c19150", "html_url": "https://github.com/rust-lang/rust/commit/7ba8bbc49fa245f02dbca25fea446a75a4c19150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba8bbc49fa245f02dbca25fea446a75a4c19150/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b060c73648169ef6ff261ff323880a240619475", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b060c73648169ef6ff261ff323880a240619475", "html_url": "https://github.com/rust-lang/rust/commit/0b060c73648169ef6ff261ff323880a240619475"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "66e191e3ed4a11bb2cd5fb214878711e0cef2194", "filename": "src/shims/fs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba8bbc49fa245f02dbca25fea446a75a4c19150/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba8bbc49fa245f02dbca25fea446a75a4c19150/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=7ba8bbc49fa245f02dbca25fea446a75a4c19150", "patch": "@@ -378,9 +378,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         } else if this.tcx.sess.target.target.target_os == \"macos\"\n             && cmd == this.eval_libc_i32(\"F_FULLFSYNC\")?\n         {\n-            // On macOS, fsync does not wait for the underlying disk to finish writing, while this\n-            // F_FULLFSYNC operation does. The standard library uses F_FULLFSYNC for both\n-            // File::sync_data() and File::sync_all().\n             let &[_, _] = check_arg_count(args)?;\n             if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n                 let result = file.sync_all();\n@@ -1118,6 +1115,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     fn fsync(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        // On macOS, `fsync` (unlike `fcntl(F_FULLFSYNC)`) does not wait for the\n+        // underlying disk to finish writing. In the interest of host compatibility,\n+        // we conservatively implement this with `sync_all`, which\n+        // *does* wait for the disk.\n+\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"fsync\")?;"}, {"sha": "08199c1452d346e142c317550438e92f07df1183", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba8bbc49fa245f02dbca25fea446a75a4c19150/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba8bbc49fa245f02dbca25fea446a75a4c19150/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=7ba8bbc49fa245f02dbca25fea446a75a4c19150", "patch": "@@ -47,10 +47,10 @@ fn test_sync_file_range() {\n     use std::os::unix::io::AsRawFd;\n \n     let path = tmp().join(\"miri_test_libc_sync_file_range.txt\");\n-    // Cleanup before test\n+    // Cleanup before test.\n     remove_file(&path).ok();\n \n-    // Write to a file\n+    // Write to a file.\n     let mut file = File::create(&path).unwrap();\n     let bytes = b\"Hello, World!\\n\";\n     file.write(bytes).unwrap();"}]}