{"sha": "80545e5d3a72ef05a77ff9584234f030c69bfe9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNTQ1ZTVkM2E3MmVmMDVhNzdmZjk1ODQyMzRmMDMwYzY5YmZlOWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T22:07:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T22:27:10Z"}, "message": "New assist: add turbo fish", "tree": {"sha": "72b770193eb81853cab75a97e19d46eba12c44d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b770193eb81853cab75a97e19d46eba12c44d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80545e5d3a72ef05a77ff9584234f030c69bfe9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80545e5d3a72ef05a77ff9584234f030c69bfe9f", "html_url": "https://github.com/rust-lang/rust/commit/80545e5d3a72ef05a77ff9584234f030c69bfe9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80545e5d3a72ef05a77ff9584234f030c69bfe9f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd", "html_url": "https://github.com/rust-lang/rust/commit/1bc1f28bc58b2dbcf8f8f548c277e2c90e3075cd"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "a0363bc78b019fa747798af4a444c5eccf1636b9", "filename": "crates/ra_assists/src/handlers/add_turbo_fish.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=80545e5d3a72ef05a77ff9584234f030c69bfe9f", "patch": "@@ -0,0 +1,134 @@\n+use ra_ide_db::defs::{classify_name_ref, Definition, NameRefClass};\n+use ra_syntax::{ast, AstNode, SyntaxKind, T};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId,\n+};\n+use test_utils::tested_by;\n+\n+// Assist: add_turbo_fish\n+//\n+// Adds `::<_>` to a call of a generic method or function.\n+//\n+// ```\n+// fn make<T>() -> T { todo!() }\n+// fn main() {\n+//     let x = make<|>();\n+// }\n+// ```\n+// ->\n+// ```\n+// fn make<T>() -> T { todo!() }\n+// fn main() {\n+//     let x = make::<${0:_}>();\n+// }\n+// ```\n+pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let ident = ctx.find_token_at_offset(SyntaxKind::IDENT)?;\n+    let next_token = ident.next_token()?;\n+    if next_token.kind() == T![::] {\n+        tested_by!(add_turbo_fish_one_fish_is_enough);\n+        return None;\n+    }\n+    let name_ref = ast::NameRef::cast(ident.parent())?;\n+    let def = match classify_name_ref(&ctx.sema, &name_ref)? {\n+        NameRefClass::Definition(def) => def,\n+        NameRefClass::FieldShorthand { .. } => return None,\n+    };\n+    let fun = match def {\n+        Definition::ModuleDef(hir::ModuleDef::Function(it)) => it,\n+        _ => return None,\n+    };\n+    let generics = hir::GenericDef::Function(fun).params(ctx.sema.db);\n+    if generics.is_empty() {\n+        tested_by!(add_turbo_fish_non_generic);\n+        return None;\n+    }\n+    acc.add(AssistId(\"add_turbo_fish\"), \"Add `::<>`\", ident.text_range(), |builder| {\n+        match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, ident.text_range().end(), \"::<${0:_}>\"),\n+            None => builder.insert(ident.text_range().end(), \"::<_>\"),\n+        }\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+    use test_utils::covers;\n+\n+    #[test]\n+    fn add_turbo_fish_function() {\n+        check_assist(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    make<|>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    make::<${0:_}>();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_turbo_fish_method() {\n+        check_assist(\n+            add_turbo_fish,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    S.make<|>();\n+}\n+\"#,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    S.make::<${0:_}>();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_turbo_fish_one_fish_is_enough() {\n+        covers!(add_turbo_fish_one_fish_is_enough);\n+        check_assist_not_applicable(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    make<|>::<()>();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_turbo_fish_non_generic() {\n+        covers!(add_turbo_fish_non_generic);\n+        check_assist_not_applicable(\n+            add_turbo_fish,\n+            r#\"\n+fn make() -> () {}\n+fn main() {\n+    make<|>();\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "339f24100d24b05b2ef514d51de8bce978361e4d", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=80545e5d3a72ef05a77ff9584234f030c69bfe9f", "patch": "@@ -110,6 +110,7 @@ mod handlers {\n     mod add_impl;\n     mod add_missing_impl_members;\n     mod add_new;\n+    mod add_turbo_fish;\n     mod apply_demorgan;\n     mod auto_import;\n     mod change_return_type_to_result;\n@@ -147,6 +148,7 @@ mod handlers {\n             add_function::add_function,\n             add_impl::add_impl,\n             add_new::add_new,\n+            add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n             change_return_type_to_result::change_return_type_to_result,"}, {"sha": "d579e627f0406769e414a6dbfeac3ec53e7b02ae", "filename": "crates/ra_assists/src/marks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=80545e5d3a72ef05a77ff9584234f030c69bfe9f", "patch": "@@ -9,4 +9,6 @@ test_utils::marks![\n     test_not_applicable_if_variable_unused\n     change_visibility_field_false_positive\n     test_add_from_impl_already_exists\n+    add_turbo_fish_one_fish_is_enough\n+    add_turbo_fish_non_generic\n ];"}, {"sha": "32fbcdef4ab67c6721a97262e8898344f14cf2fc", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80545e5d3a72ef05a77ff9584234f030c69bfe9f/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=80545e5d3a72ef05a77ff9584234f030c69bfe9f", "patch": "@@ -211,6 +211,25 @@ impl<T: Clone> Ctx<T> {\n     )\n }\n \n+#[test]\n+fn doctest_add_turbo_fish() {\n+    check_doc_test(\n+        \"add_turbo_fish\",\n+        r#####\"\n+fn make<T>() -> T { todo!() }\n+fn main() {\n+    let x = make<|>();\n+}\n+\"#####,\n+        r#####\"\n+fn make<T>() -> T { todo!() }\n+fn main() {\n+    let x = make::<${0:_}>();\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_apply_demorgan() {\n     check_doc_test("}, {"sha": "c72b50a4dab25acdcdc50623f40c770524202923", "filename": "docs/user/assists.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80545e5d3a72ef05a77ff9584234f030c69bfe9f/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/80545e5d3a72ef05a77ff9584234f030c69bfe9f/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=80545e5d3a72ef05a77ff9584234f030c69bfe9f", "patch": "@@ -203,6 +203,24 @@ impl<T: Clone> Ctx<T> {\n \n ```\n \n+## `add_turbo_fish`\n+\n+Adds `::<_>` to a call of a generic method or function.\n+\n+```rust\n+// BEFORE\n+fn make<T>() -> T { todo!() }\n+fn main() {\n+    let x = make\u2503();\n+}\n+\n+// AFTER\n+fn make<T>() -> T { todo!() }\n+fn main() {\n+    let x = make::<${0:_}>();\n+}\n+```\n+\n ## `apply_demorgan`\n \n Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws)."}, {"sha": "2e9fcf07c5f25d88bd31223095a76af628a276a7", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80545e5d3a72ef05a77ff9584234f030c69bfe9f/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80545e5d3a72ef05a77ff9584234f030c69bfe9f/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=80545e5d3a72ef05a77ff9584234f030c69bfe9f", "patch": "@@ -57,6 +57,7 @@ fn check_todo(path: &Path, text: &str) {\n         \"tests/generated.rs\",\n         \"handlers/add_missing_impl_members.rs\",\n         \"handlers/add_function.rs\",\n+        \"handlers/add_turbo_fish.rs\",\n         // To support generating `todo!()` in assists, we have `expr_todo()` in ast::make.\n         \"ast/make.rs\",\n     ];"}]}