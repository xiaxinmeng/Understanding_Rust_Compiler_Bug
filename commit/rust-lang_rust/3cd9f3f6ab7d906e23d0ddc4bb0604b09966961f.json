{"sha": "3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZDlmM2Y2YWI3ZDkwNmUyM2QwZGRjNGJiMDYwNGIwOTk2Njk2MWY=", "commit": {"author": {"name": "Marcin Mielniczuk", "email": "marmistrz.dev@zoho.eu", "date": "2019-08-06T17:34:10Z"}, "committer": {"name": "Marcin Mielniczuk", "email": "marmistrz.dev@zoho.eu", "date": "2019-08-06T17:35:54Z"}, "message": "Add an overflow check in truncate implementation for Unix.", "tree": {"sha": "65afc1cb899c874fc4064b71cc2fab3720eb0c4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65afc1cb899c874fc4064b71cc2fab3720eb0c4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEUs2I3Xxy/OFAqHUBLPDOZmYLjMkFAl1JunsACgkQLPDOZmYL\njMkXJBAAsc+SuNVR5oiwuE5yajptl62LnEVCYDf+oqEYUot7HHTt5EUKVegAv152\nZ2jqeqBlVJnOTqd0q4vykHdv68UM/YDoPXsaS/CCCvKA75Ik/H8NnQpSKszs3rl8\n37VZbxdbXCshuhr5reQoIukXFnmvBvOwZTm8e8jV/HZjRzvx/il+Pdr0wEYcAXSi\npi7p5RAzJypBISDJhtENYI6AiWWqLNOSTtm47031uRAHgH1JpMwAD7oWLMNsIskB\ne7ot0wJGXCHWHDzTySpyvR8WlZKxfth3LOtFrRkkqPWAllzCXa/pa5ioxg+0/zxV\nmhOvD3y4jaSqP0Q9yh781BUYNjAWTyJeAJfLOCNsEsyIFprlhtDndrhvsib2utZW\n/J7Lr6yO6YjTLlyJv+xvqRzH+gkNHict5lAd5nTo1MphAvMlkfFj9NV/S6s+Xqkp\nqKxijZiU86AsV9MbUbv6DIs7JVn6QBW2Xu/HJVEGHABN7SYm5wW7vSY0luyRil8F\nH6UaPqkBfVnZDoG9BFaZehm59+Xax03oI1YcZ1L2PPHdrB58FUnMl0KWQJke1zP+\nvv9tf32/hn50LxwFnGSBcNkGxPOYVdISbaoyX8Ray7laLTwRwwaMSI0ui1Dp/DSM\nKX/4cDxrg+sTaEBw3UNl+WBiZ8vmTR+I/mcepJHEAUb/x5tx3yw=\n=n/1Y\n-----END PGP SIGNATURE-----", "payload": "tree 65afc1cb899c874fc4064b71cc2fab3720eb0c4b\nparent 188ab5c976a5696ac710b7ba78849ef5dcf0235a\nauthor Marcin Mielniczuk <marmistrz.dev@zoho.eu> 1565112850 +0200\ncommitter Marcin Mielniczuk <marmistrz.dev@zoho.eu> 1565112954 +0200\n\nAdd an overflow check in truncate implementation for Unix.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f", "html_url": "https://github.com/rust-lang/rust/commit/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f/comments", "author": {"login": "marmistrz", "id": 2914938, "node_id": "MDQ6VXNlcjI5MTQ5Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/2914938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmistrz", "html_url": "https://github.com/marmistrz", "followers_url": "https://api.github.com/users/marmistrz/followers", "following_url": "https://api.github.com/users/marmistrz/following{/other_user}", "gists_url": "https://api.github.com/users/marmistrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmistrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmistrz/subscriptions", "organizations_url": "https://api.github.com/users/marmistrz/orgs", "repos_url": "https://api.github.com/users/marmistrz/repos", "events_url": "https://api.github.com/users/marmistrz/events{/privacy}", "received_events_url": "https://api.github.com/users/marmistrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmistrz", "id": 2914938, "node_id": "MDQ6VXNlcjI5MTQ5Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/2914938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmistrz", "html_url": "https://github.com/marmistrz", "followers_url": "https://api.github.com/users/marmistrz/followers", "following_url": "https://api.github.com/users/marmistrz/following{/other_user}", "gists_url": "https://api.github.com/users/marmistrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmistrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmistrz/subscriptions", "organizations_url": "https://api.github.com/users/marmistrz/orgs", "repos_url": "https://api.github.com/users/marmistrz/repos", "events_url": "https://api.github.com/users/marmistrz/events{/privacy}", "received_events_url": "https://api.github.com/users/marmistrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188ab5c976a5696ac710b7ba78849ef5dcf0235a", "url": "https://api.github.com/repos/rust-lang/rust/commits/188ab5c976a5696ac710b7ba78849ef5dcf0235a", "html_url": "https://github.com/rust-lang/rust/commit/188ab5c976a5696ac710b7ba78849ef5dcf0235a"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "5f76875bd66c4c2fd34692ecbb2bc071ec024c96", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f", "patch": "@@ -468,6 +468,8 @@ impl File {\n     /// # Errors\n     ///\n     /// This function will return an error if the file is not opened for writing.\n+    /// Also, std::io::ErrorKind::InvalidInput will be returned if the desired\n+    /// length would cause an overflow due to the implementation specifics.\n     ///\n     /// # Examples\n     ///"}, {"sha": "48e449d9c377c8788881b8f5c4c1eec6f5aa8ab1", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=3cd9f3f6ab7d906e23d0ddc4bb0604b09966961f", "patch": "@@ -1,5 +1,6 @@\n use crate::os::unix::prelude::*;\n \n+use crate::convert::TryInto;\n use crate::ffi::{CString, CStr, OsString, OsStr};\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind, SeekFrom, IoSlice, IoSliceMut};\n@@ -554,9 +555,14 @@ impl File {\n         return crate::sys::android::ftruncate64(self.0.raw(), size);\n \n         #[cfg(not(target_os = \"android\"))]\n-        return cvt_r(|| unsafe {\n-            ftruncate64(self.0.raw(), size as off64_t)\n-        }).map(|_| ());\n+        {\n+            let size: off64_t = size\n+                .try_into()\n+                .map_err(|e| io::Error::new(io::ErrorKind::InvalidInput, e))?;\n+            cvt_r(|| unsafe {\n+                ftruncate64(self.0.raw(), size)\n+            }).map(|_| ())\n+        }\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {"}]}