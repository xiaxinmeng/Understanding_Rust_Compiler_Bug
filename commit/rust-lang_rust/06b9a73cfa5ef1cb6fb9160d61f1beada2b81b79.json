{"sha": "06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YjlhNzNjZmE1ZWYxY2I2ZmI5MTYwZDYxZjFiZWFkYTJiODFiNzk=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-01-14T12:02:27Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2020-01-14T12:11:52Z"}, "message": "Update APIs according to RFC change suggestions.", "tree": {"sha": "80d26af9673daaae5f92263e0b5e8732e5813c49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d26af9673daaae5f92263e0b5e8732e5813c49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79", "html_url": "https://github.com/rust-lang/rust/commit/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5", "html_url": "https://github.com/rust-lang/rust/commit/d2c509a3c6b06ba02807bf94c00fad4c4a9262a5"}], "stats": {"total": 103, "additions": 85, "deletions": 18}, "files": [{"sha": "b88ca8a0fb0d10870be027d9863fe7224ad61aba", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79", "patch": "@@ -509,20 +509,42 @@ impl<T> LinkedList<T> {\n         IterMut { head: self.head, tail: self.tail, len: self.len, list: self }\n     }\n \n-    /// Provides a cursor.\n+    /// Provides a cursor at the front element.\n+    ///\n+    /// The cursor is pointing to the \"ghost\" non-element if the list is empty.\n     #[inline]\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn cursor(&self) -> Cursor<'_, T> {\n+    pub fn cursor_front(&self) -> Cursor<'_, T> {\n         Cursor { index: 0, current: self.head, list: self }\n     }\n \n-    /// Provides a cursor with editing operations.\n+    /// Provides a cursor with editing operations at the front element.\n+    ///\n+    /// The cursor is pointing to the \"ghost\" non-element if the list is empty.\n     #[inline]\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn cursor_mut(&mut self) -> CursorMut<'_, T> {\n+    pub fn cursor_front_mut(&mut self) -> CursorMut<'_, T> {\n         CursorMut { index: 0, current: self.head, list: self }\n     }\n \n+    /// Provides a cursor at the back element.\n+    ///\n+    /// The cursor is pointing to the \"ghost\" non-element if the list is empty.\n+    #[inline]\n+    #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n+    pub fn cursor_back(&self) -> Cursor<'_, T> {\n+        Cursor { index: self.len.checked_sub(1).unwrap_or(0), current: self.tail, list: self }\n+    }\n+\n+    /// Provides a cursor with editing operations at the back element.\n+    ///\n+    /// The cursor is pointing to the \"ghost\" non-element if the list is empty.\n+    #[inline]\n+    #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n+    pub fn cursor_back_mut(&mut self) -> CursorMut<'_, T> {\n+        CursorMut { index: self.len.checked_sub(1).unwrap_or(0), current: self.tail, list: self }\n+    }\n+\n     /// Returns `true` if the `LinkedList` is empty.\n     ///\n     /// This operation should compute in O(1) time.\n@@ -1146,8 +1168,6 @@ impl<T: fmt::Debug> fmt::Debug for Cursor<'_, T> {\n /// Cursors always rest between two elements in the list, and index in a logically circular way.\n /// To accommodate this, there is a \"ghost\" non-element that yields `None` between the head and\n /// tail of the list.\n-///\n-/// When created, cursors start at the front of the list, or the \"ghost\" non-element if the list is empty.\n #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n pub struct CursorMut<'a, T: 'a> {\n     index: usize,\n@@ -1474,9 +1494,12 @@ impl<'a, T> CursorMut<'a, T> {\n     /// If the cursor is pointing at the \"ghost\" non-element then the entire contents\n     /// of the `LinkedList` are moved.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn split_after(self) -> LinkedList<T> {\n+    pub fn split_after(&mut self) -> LinkedList<T> {\n         let split_off_idx = if self.index == self.list.len { 0 } else { self.index + 1 };\n-        // no need to update `self.index` because the cursor is consumed.\n+        if self.index == self.list.len {\n+            // The \"ghost\" non-element's index has changed to 0.\n+            self.index = 0;\n+        }\n         unsafe { self.list.split_off_after_node(self.current, split_off_idx) }\n     }\n \n@@ -1487,9 +1510,9 @@ impl<'a, T> CursorMut<'a, T> {\n     /// If the cursor is pointing at the \"ghost\" non-element then the entire contents\n     /// of the `LinkedList` are moved.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn split_before(self) -> LinkedList<T> {\n+    pub fn split_before(&mut self) -> LinkedList<T> {\n         let split_off_idx = self.index;\n-        // no need to update `self.index` because the cursor is consumed.\n+        self.index = 0;\n         unsafe { self.list.split_off_before_node(self.current, split_off_idx) }\n     }\n }"}, {"sha": "085f734ed916a0ca43cc92ad4e257268d48e5ff7", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=06b9a73cfa5ef1cb6fb9160d61f1beada2b81b79", "patch": "@@ -309,7 +309,7 @@ fn drain_to_empty_test() {\n fn test_cursor_move_peek() {\n     let mut m: LinkedList<u32> = LinkedList::new();\n     m.extend(&[1, 2, 3, 4, 5, 6]);\n-    let mut cursor = m.cursor();\n+    let mut cursor = m.cursor_front();\n     assert_eq!(cursor.current(), Some(&1));\n     assert_eq!(cursor.peek_next(), Some(&2));\n     assert_eq!(cursor.peek_prev(), None);\n@@ -326,9 +326,26 @@ fn test_cursor_move_peek() {\n     assert_eq!(cursor.peek_prev(), Some(&1));\n     assert_eq!(cursor.index(), Some(1));\n \n+    let mut cursor = m.cursor_back();\n+    assert_eq!(cursor.current(), Some(&6));\n+    assert_eq!(cursor.peek_next(), None);\n+    assert_eq!(cursor.peek_prev(), Some(&5));\n+    assert_eq!(cursor.index(), Some(5));\n+    cursor.move_next();\n+    assert_eq!(cursor.current(), None);\n+    assert_eq!(cursor.peek_next(), Some(&1));\n+    assert_eq!(cursor.peek_prev(), Some(&6));\n+    assert_eq!(cursor.index(), None);\n+    cursor.move_prev();\n+    cursor.move_prev();\n+    assert_eq!(cursor.current(), Some(&5));\n+    assert_eq!(cursor.peek_next(), Some(&6));\n+    assert_eq!(cursor.peek_prev(), Some(&4));\n+    assert_eq!(cursor.index(), Some(4));\n+\n     let mut m: LinkedList<u32> = LinkedList::new();\n     m.extend(&[1, 2, 3, 4, 5, 6]);\n-    let mut cursor = m.cursor_mut();\n+    let mut cursor = m.cursor_front_mut();\n     assert_eq!(cursor.current(), Some(&mut 1));\n     assert_eq!(cursor.peek_next(), Some(&mut 2));\n     assert_eq!(cursor.peek_prev(), None);\n@@ -352,24 +369,51 @@ fn test_cursor_move_peek() {\n     assert_eq!(cursor2.index(), Some(2));\n     assert_eq!(cursor.current(), Some(&mut 2));\n     assert_eq!(cursor.index(), Some(1));\n+\n+    let mut m: LinkedList<u32> = LinkedList::new();\n+    m.extend(&[1, 2, 3, 4, 5, 6]);\n+    let mut cursor = m.cursor_back_mut();\n+    assert_eq!(cursor.current(), Some(&mut 6));\n+    assert_eq!(cursor.peek_next(), None);\n+    assert_eq!(cursor.peek_prev(), Some(&mut 5));\n+    assert_eq!(cursor.index(), Some(5));\n+    cursor.move_next();\n+    assert_eq!(cursor.current(), None);\n+    assert_eq!(cursor.peek_next(), Some(&mut 1));\n+    assert_eq!(cursor.peek_prev(), Some(&mut 6));\n+    assert_eq!(cursor.index(), None);\n+    cursor.move_prev();\n+    cursor.move_prev();\n+    assert_eq!(cursor.current(), Some(&mut 5));\n+    assert_eq!(cursor.peek_next(), Some(&mut 6));\n+    assert_eq!(cursor.peek_prev(), Some(&mut 4));\n+    assert_eq!(cursor.index(), Some(4));\n+    let mut cursor2 = cursor.as_cursor();\n+    assert_eq!(cursor2.current(), Some(&5));\n+    assert_eq!(cursor2.index(), Some(4));\n+    cursor2.move_prev();\n+    assert_eq!(cursor2.current(), Some(&4));\n+    assert_eq!(cursor2.index(), Some(3));\n+    assert_eq!(cursor.current(), Some(&mut 5));\n+    assert_eq!(cursor.index(), Some(4));\n }\n \n #[test]\n fn test_cursor_mut_insert() {\n     let mut m: LinkedList<u32> = LinkedList::new();\n     m.extend(&[1, 2, 3, 4, 5, 6]);\n-    let mut cursor = m.cursor_mut();\n+    let mut cursor = m.cursor_front_mut();\n     cursor.insert_before(7);\n     cursor.insert_after(8);\n     check_links(&m);\n     assert_eq!(m.iter().cloned().collect::<Vec<_>>(), &[7, 1, 8, 2, 3, 4, 5, 6]);\n-    let mut cursor = m.cursor_mut();\n+    let mut cursor = m.cursor_front_mut();\n     cursor.move_prev();\n     cursor.insert_before(9);\n     cursor.insert_after(10);\n     check_links(&m);\n     assert_eq!(m.iter().cloned().collect::<Vec<_>>(), &[10, 7, 1, 8, 2, 3, 4, 5, 6, 9]);\n-    let mut cursor = m.cursor_mut();\n+    let mut cursor = m.cursor_front_mut();\n     cursor.move_prev();\n     assert_eq!(cursor.remove_current(), None);\n     cursor.move_next();\n@@ -383,7 +427,7 @@ fn test_cursor_mut_insert() {\n     assert_eq!(cursor.remove_current(), Some(10));\n     check_links(&m);\n     assert_eq!(m.iter().cloned().collect::<Vec<_>>(), &[1, 8, 2, 3, 4, 5, 6]);\n-    let mut cursor = m.cursor_mut();\n+    let mut cursor = m.cursor_front_mut();\n     let mut p: LinkedList<u32> = LinkedList::new();\n     p.extend(&[100, 101, 102, 103]);\n     let mut q: LinkedList<u32> = LinkedList::new();\n@@ -395,12 +439,12 @@ fn test_cursor_mut_insert() {\n         m.iter().cloned().collect::<Vec<_>>(),\n         &[200, 201, 202, 203, 1, 100, 101, 102, 103, 8, 2, 3, 4, 5, 6]\n     );\n-    let mut cursor = m.cursor_mut();\n+    let mut cursor = m.cursor_front_mut();\n     cursor.move_prev();\n     let tmp = cursor.split_before();\n     assert_eq!(m.into_iter().collect::<Vec<_>>(), &[]);\n     m = tmp;\n-    let mut cursor = m.cursor_mut();\n+    let mut cursor = m.cursor_front_mut();\n     cursor.move_next();\n     cursor.move_next();\n     cursor.move_next();"}]}