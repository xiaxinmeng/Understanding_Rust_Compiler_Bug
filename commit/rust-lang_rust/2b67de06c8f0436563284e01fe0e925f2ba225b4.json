{"sha": "2b67de06c8f0436563284e01fe0e925f2ba225b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNjdkZTA2YzhmMDQzNjU2MzI4NGUwMWZlMGU5MjVmMmJhMjI1YjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T06:41:41Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T06:41:54Z"}, "message": "rustdoc: Add support for type items", "tree": {"sha": "7b32ecef70c57d319d84813369254170dc2560f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b32ecef70c57d319d84813369254170dc2560f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b67de06c8f0436563284e01fe0e925f2ba225b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b67de06c8f0436563284e01fe0e925f2ba225b4", "html_url": "https://github.com/rust-lang/rust/commit/2b67de06c8f0436563284e01fe0e925f2ba225b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b67de06c8f0436563284e01fe0e925f2ba225b4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae0d49aa06c1ed73320f32896710b6d015bea9c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0d49aa06c1ed73320f32896710b6d015bea9c0", "html_url": "https://github.com/rust-lang/rust/commit/ae0d49aa06c1ed73320f32896710b6d015bea9c0"}], "stats": {"total": 271, "additions": 258, "deletions": 13}, "files": [{"sha": "3bb47ce6c4682a39395ae2ef665b35386984977d", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -90,6 +90,10 @@ fn stmt_to_str(s: ast::stmt) -> str { be to_str(s, print_stmt); }\n \n fn item_to_str(i: @ast::item) -> str { be to_str(i, print_item); }\n \n+fn typarams_to_str(tps: [ast::ty_param]) -> str {\n+    be to_str(tps, print_type_params)\n+}\n+\n fn path_to_str(&&p: @ast::path) -> str {\n     be to_str(p, bind print_path(_, _, false));\n }\n@@ -1253,7 +1257,7 @@ fn print_bounds(s: ps, bounds: @[ast::ty_param_bound]) {\n     }\n }\n \n-fn print_type_params(s: ps, params: [ast::ty_param]) {\n+fn print_type_params(s: ps, &&params: [ast::ty_param]) {\n     if vec::len(params) > 0u {\n         word(s.s, \"<\");\n         fn printParam(s: ps, param: ast::ty_param) {"}, {"sha": "8e44960cf44fc713d109c0e40f16c12e6c59b5b4", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -11,10 +11,10 @@ import core::tuple;\n \n export crate_attrs, mod_attrs, fn_attrs, arg_attrs,\n        const_attrs, enum_attrs, variant_attrs, res_attrs,\n-       iface_attrs, method_attrs, impl_attrs;\n+       iface_attrs, method_attrs, impl_attrs, type_attrs;\n export parse_crate, parse_mod, parse_fn, parse_const,\n        parse_enum, parse_variant, parse_res,\n-       parse_iface, parse_method, parse_impl;\n+       parse_iface, parse_method, parse_impl, parse_type;\n \n type crate_attrs = {\n     name: option<str>\n@@ -70,6 +70,11 @@ type impl_attrs = {\n \n type method_attrs = fn_attrs;\n \n+type type_attrs = {\n+    brief: option<str>,\n+    desc: option<str>\n+};\n+\n #[cfg(test)]\n mod test {\n \n@@ -507,4 +512,8 @@ fn parse_method(attrs: [ast::attribute]) -> method_attrs {\n \n fn parse_impl(attrs: [ast::attribute]) -> impl_attrs {\n     parse_basic(attrs)\n+}\n+\n+fn parse_type(attrs: [ast::attribute]) -> type_attrs {\n+    parse_basic(attrs)\n }\n\\ No newline at end of file"}, {"sha": "3d12fdaaa67be57881fddacc9dab40c87a490526", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -27,7 +27,8 @@ fn run(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl\n+        fold_impl: fold_impl,\n+        fold_type: fold_type\n         with *fold::default_seq_fold(srv)\n     });\n     fold.fold_crate(fold, doc)\n@@ -449,6 +450,30 @@ fn should_extract_impl_method_docs() {\n     assert doc.topmod.impls()[0].methods[0].failure == some(\"failure\");\n }\n \n+fn fold_type(\n+    fold: fold::fold<astsrv::srv>,\n+    doc: doc::tydoc\n+) -> doc::tydoc {\n+    let srv = fold.ctxt;\n+    let doc = fold::default_seq_fold_type(fold, doc);\n+    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_type);\n+\n+    {\n+        brief: attrs.brief,\n+        desc: attrs.desc\n+        with doc\n+    }\n+}\n+\n+#[test]\n+fn should_extract_type_docs() {\n+    let doc = test::mk_doc(\n+        \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")]\\\n+         type t = int;\");\n+    assert doc.topmod.types()[0].brief == some(\"brief\");\n+    assert doc.topmod.types()[0].desc == some(\"desc\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}, {"sha": "c7a204f53c5bcb135affabbebeea4feac99f9334", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -22,7 +22,8 @@ fn run(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl\n+        fold_impl: fold_impl,\n+        fold_type: fold_type\n         with *fold::default_seq_fold(op)\n     });\n     fold.fold_crate(fold, doc)\n@@ -140,6 +141,14 @@ fn fold_impl(fold: fold::fold<op>, doc: doc::impldoc) -> doc::impldoc {\n     }\n }\n \n+fn fold_type(fold: fold::fold<op>, doc: doc::tydoc) -> doc::tydoc {\n+    {\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc)\n+        with doc\n+    }\n+}\n+\n #[test]\n fn should_execute_op_on_enum_brief() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\" a \\\")] enum a { b }\");\n@@ -274,6 +283,21 @@ fn should_execute_op_on_impl_method_failure_condition() {\n     assert doc.topmod.impls()[0].methods[0].failure == some(\"a\");\n }\n \n+\n+#[test]\n+fn should_execute_op_on_type_brief() {\n+    let doc = test::mk_doc(\n+        \"#[doc(brief = \\\" a \\\")] type t = int;\");\n+    assert doc.topmod.types()[0].brief == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_type_desc() {\n+    let doc = test::mk_doc(\n+        \"#[doc(desc = \\\" a \\\")] type t = int;\");\n+    assert doc.topmod.types()[0].desc == some(\"a\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}, {"sha": "89b2b5d97bce73492fe3a13bc48db2eb75ca7e6e", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -24,7 +24,8 @@ fn run(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl\n+        fold_impl: fold_impl,\n+        fold_type: fold_type\n         with *fold::default_seq_fold(())\n     });\n     fold.fold_crate(fold, doc)\n@@ -125,6 +126,17 @@ fn fold_impl(fold: fold::fold<()>, doc: doc::impldoc) -> doc::impldoc {\n     }\n }\n \n+fn fold_type(fold: fold::fold<()>, doc: doc::tydoc) -> doc::tydoc {\n+    let doc = fold::default_seq_fold_type(fold, doc);\n+    let (brief, desc) = modify(doc.brief, doc.desc);\n+\n+    {\n+        brief: brief,\n+        desc: desc\n+        with doc\n+    }\n+}\n+\n #[test]\n fn should_promote_mod_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] mod m { }\");\n@@ -191,6 +203,13 @@ fn should_promote_impl_method_desc() {\n     assert doc.topmod.impls()[0].methods[0].desc == none;\n }\n \n+#[test]\n+fn should_promote_type_desc() {\n+    let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] type t = int;\");\n+    assert doc.topmod.types()[0].brief == some(\"desc\");\n+    assert doc.topmod.types()[0].desc == none;\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}, {"sha": "ed2aa2af1ccd318dc299e8b818daae264624be76", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -13,7 +13,8 @@ enum itemtag {\n     enumtag(enumdoc),\n     restag(resdoc),\n     ifacetag(ifacedoc),\n-    impltag(impldoc)\n+    impltag(impldoc),\n+    tytag(tydoc)\n }\n \n type moddoc = {\n@@ -107,6 +108,14 @@ type impldoc = {\n     methods: [methoddoc]\n };\n \n+type tydoc = {\n+    id: ast_id,\n+    name: str,\n+    brief: option<str>,\n+    desc: option<str>,\n+    sig: option<str>\n+};\n+\n #[doc = \"Some helper methods on moddoc, mostly for testing\"]\n impl util for moddoc {\n \n@@ -172,6 +181,15 @@ impl util for moddoc {\n             }\n         }\n     }\n+\n+    fn types() -> [tydoc] {\n+        vec::filter_map(*self.items) {|itemtag|\n+            alt itemtag {\n+              tytag(tydoc) { some(tydoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n }\n \n #[doc = \"Helper methods on itemtag\"]\n@@ -185,6 +203,7 @@ impl util for itemtag {\n           doc::restag({name, _}) { name }\n           doc::ifacetag({name, _}) { name }\n           doc::impltag({name, _}) { name }\n+          doc::tytag({name, _}) { name }\n         }\n     }\n }"}, {"sha": "8e337e3d2366d0430e8470e44f3aa0c58d42d1cf", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -80,6 +80,11 @@ fn moddoc_from_mod(\n                     impldoc_from_impl(methods, item.ident, item.id)\n                 ))\n               }\n+              ast::item_ty(_, _) {\n+                some(doc::tytag(\n+                    tydoc_from_ty(item.ident, item.id)\n+                ))\n+              }\n               _ {\n                 none\n               }\n@@ -317,6 +322,25 @@ fn should_extract_impl_method_args() {\n     assert doc.topmod.impls()[0].methods[0].args[0].name == \"a\";\n }\n \n+fn tydoc_from_ty(\n+    name: str,\n+    id: ast::node_id\n+) -> doc::tydoc {\n+    {\n+        id: id,\n+        name: name,\n+        brief: none,\n+        desc: none,\n+        sig: none\n+    }\n+}\n+\n+#[test]\n+fn should_extract_tys() {\n+    let doc = test::mk_doc(\"type a = int;\");\n+    assert doc.topmod.types()[0].name == \"a\";\n+}\n+\n #[cfg(test)]\n mod test {\n "}, {"sha": "667bb5d8580a4962275f575f18081ff106a9701d", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -12,6 +12,7 @@ export default_seq_fold_enum;\n export default_seq_fold_res;\n export default_seq_fold_iface;\n export default_seq_fold_impl;\n+export default_seq_fold_type;\n \n enum fold<T> = t<T>;\n \n@@ -23,6 +24,7 @@ type fold_enum<T> = fn~(fold: fold<T>, doc: doc::enumdoc) -> doc::enumdoc;\n type fold_res<T> = fn~(fold: fold<T>, doc: doc::resdoc) -> doc::resdoc;\n type fold_iface<T> = fn~(fold: fold<T>, doc: doc::ifacedoc) -> doc::ifacedoc;\n type fold_impl<T> = fn~(fold: fold<T>, doc: doc::impldoc) -> doc::impldoc;\n+type fold_type<T> = fn~(fold: fold<T>, doc: doc::tydoc) -> doc::tydoc;\n \n type t<T> = {\n     ctxt: T,\n@@ -33,7 +35,8 @@ type t<T> = {\n     fold_enum: fold_enum<T>,\n     fold_res: fold_res<T>,\n     fold_iface: fold_iface<T>,\n-    fold_impl: fold_impl<T>\n+    fold_impl: fold_impl<T>,\n+    fold_type: fold_type<T>\n };\n \n \n@@ -48,7 +51,8 @@ fn mk_fold<T:copy>(\n     fold_enum: fold_enum<T>,\n     fold_res: fold_res<T>,\n     fold_iface: fold_iface<T>,\n-    fold_impl: fold_impl<T>\n+    fold_impl: fold_impl<T>,\n+    fold_type: fold_type<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n@@ -59,7 +63,8 @@ fn mk_fold<T:copy>(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl\n+        fold_impl: fold_impl,\n+        fold_type: fold_type\n     })\n }\n \n@@ -73,7 +78,8 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_enum(f, d)},\n         {|f, d| default_seq_fold_res(f, d)},\n         {|f, d| default_seq_fold_iface(f, d)},\n-        {|f, d| default_seq_fold_impl(f, d)}\n+        {|f, d| default_seq_fold_impl(f, d)},\n+        {|f, d| default_seq_fold_type(f, d)}\n     )\n }\n \n@@ -114,6 +120,9 @@ fn default_seq_fold_mod<T>(\n               doc::impltag(impldoc) {\n                 doc::impltag(fold.fold_impl(fold, impldoc))\n               }\n+              doc::tytag(tydoc) {\n+                doc::tytag(fold.fold_type(fold, tydoc))\n+              }\n             }\n         }\n         with doc\n@@ -162,6 +171,13 @@ fn default_seq_fold_impl<T>(\n     doc\n }\n \n+fn default_seq_fold_type<T>(\n+    _fold: fold<T>,\n+    doc: doc::tydoc\n+) -> doc::tydoc {\n+    doc\n+}\n+\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";"}, {"sha": "c15d6adc7bac248d7e42c18040e181ff96c24376", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -139,6 +139,7 @@ fn write_mod_contents(\n           doc::restag(resdoc) { write_res(ctxt, resdoc) }\n           doc::ifacetag(ifacedoc) { write_iface(ctxt, ifacedoc) }\n           doc::impltag(impldoc) { write_impl(ctxt, impldoc) }\n+          doc::tytag(tydoc) { write_type(ctxt, tydoc) }\n         }\n     }\n }\n@@ -743,6 +744,42 @@ fn should_write_impl_method_failure_conditions() {\n     assert str::contains(markdown, \"Failure conditions: nuked\");\n }\n \n+fn write_type(\n+    ctxt: ctxt,\n+    doc: doc::tydoc\n+) {\n+    write_header(ctxt, h2, #fmt(\"Type `%s`\", doc.name));\n+    write_sig(ctxt, doc.sig);\n+    write_brief(ctxt, doc.brief);\n+    write_desc(ctxt, doc.desc);\n+}\n+\n+#[test]\n+fn should_write_type_header() {\n+    let markdown = test::render(\"type t = int;\");\n+    assert str::contains(markdown, \"## Type `t`\");\n+}\n+\n+#[test]\n+fn should_write_type_brief() {\n+    let markdown = test::render(\n+        \"#[doc(brief = \\\"brief\\\")] type t = int;\");\n+    assert str::contains(markdown, \"\\n\\nbrief\\n\\n\");\n+}\n+\n+#[test]\n+fn should_write_type_desc() {\n+    let markdown = test::render(\n+        \"#[doc(desc = \\\"desc\\\")] type t = int;\");\n+    assert str::contains(markdown, \"\\n\\ndesc\\n\\n\");\n+}\n+\n+#[test]\n+fn should_write_type_signature() {\n+    let markdown = test::render(\"type t = int;\");\n+    assert str::contains(markdown, \"\\n\\n    type t = int\\n\\n\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn render(source: str) -> str {"}, {"sha": "3ff29bd0e89a6b33a256f5e6cbb7fa27b652a57f", "filename": "src/rustdoc/prune_undoc_items_pass.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_items_pass.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -24,7 +24,8 @@ fn run(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl\n+        fold_impl: fold_impl,\n+        fold_type: fold_type\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -93,6 +94,14 @@ fn fold_mod(\n                     none\n                 }\n               }\n+              doc::tytag(tydoc) {\n+                let doc = fold.fold_type(fold, tydoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::tytag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n               _ { some(itemtag) }\n             }\n         }\n@@ -335,6 +344,24 @@ fn should_not_elide_undocumented_impl_methods() {\n     assert vec::is_not_empty(doc.topmod.impls()[0].methods);\n }\n \n+fn fold_type(\n+    fold: fold::fold<ctxt>,\n+    doc: doc::tydoc\n+) -> doc::tydoc {\n+    let doc = fold::default_seq_fold_type(fold, doc);\n+\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none;\n+    ret doc;\n+}\n+\n+#[test]\n+fn should_elide_undocumented_types() {\n+    let doc = test::mk_doc(\"type t = int;\");\n+    assert vec::is_empty(doc.topmod.types());\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}, {"sha": "110b6952e96bcf07d2fc4a05581bb00fe0a5c67d", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -220,6 +220,12 @@ fn should_prune_unexported_impls_from_top_mod() {\n     assert vec::is_empty(doc.topmod.impls())\n }\n \n+#[test]\n+fn should_prune_unexported_types() {\n+    let doc = test::mk_doc(\"export a; mod a { } type b = int;\");\n+    assert vec::is_empty(doc.topmod.types());\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}, {"sha": "a80905538b2b5da97d8873ec4d7d4a1d9ead825e", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b67de06c8f0436563284e01fe0e925f2ba225b4/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=2b67de06c8f0436563284e01fe0e925f2ba225b4", "patch": "@@ -21,7 +21,8 @@ fn run(\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl\n+        fold_impl: fold_impl,\n+        fold_type: fold_type\n         with *fold::default_seq_fold(srv)\n     });\n     fold.fold_crate(fold, doc)\n@@ -537,6 +538,40 @@ fn should_add_impl_method_arg_types() {\n     assert fn_.args[1].ty == some(\"bool\");\n }\n \n+fn fold_type(\n+    fold: fold::fold<astsrv::srv>,\n+    doc: doc::tydoc\n+) -> doc::tydoc {\n+\n+    let srv = fold.ctxt;\n+\n+    {\n+        sig: astsrv::exec(srv) {|ctxt|\n+            alt ctxt.ast_map.get(doc.id) {\n+              ast_map::node_item(@{\n+                ident: ident,\n+                node: ast::item_ty(ty, params), _\n+              }) {\n+                some(#fmt(\n+                    \"type %s%s = %s\",\n+                    ident,\n+                    pprust::typarams_to_str(params),\n+                    pprust::ty_to_str(ty)\n+                ))\n+              }\n+              _ { fail \"expected type\" }\n+            }\n+        }\n+        with doc\n+    }\n+}\n+\n+#[test]\n+fn should_add_type_signatures() {\n+    let doc = test::mk_doc(\"type t<T> = int;\");\n+    assert doc.topmod.types()[0].sig == some(\"type t<T> = int\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::cratedoc {"}]}