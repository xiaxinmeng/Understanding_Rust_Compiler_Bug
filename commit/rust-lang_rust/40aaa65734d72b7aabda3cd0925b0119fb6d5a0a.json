{"sha": "40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYWFhNjU3MzRkNzJiN2FhYmRhM2NkMDkyNWIwMTE5ZmI2ZDVhMGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-02-15T16:53:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-02-21T19:38:17Z"}, "message": "test: Verify all sysroot crates are unstable\n\nAs we continue to add more crates to the compiler and use them to implement\nvarious features we want to be sure we're not accidentally expanding the API\nsurface area of the compiler! To that end this commit adds a new `run-make` test\nwhich will attempt to `extern crate foo` all crates in the sysroot, verifying\nthat they're all unstable.\n\nThis commit discovered that the `std_shim` and `test_shim` crates were\naccidentally stable and fixes the situation by deleting those shims. The shims\nare no longer necessary due to changes in Cargo that have happened since they\nwere originally incepted.", "tree": {"sha": "9a78e9cd5034520340f2e8bd8731a2474ee94d68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a78e9cd5034520340f2e8bd8731a2474ee94d68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "html_url": "https://github.com/rust-lang/rust/commit/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "536a900c471dffad6e33766a2866889000fbfa75", "url": "https://api.github.com/repos/rust-lang/rust/commits/536a900c471dffad6e33766a2866889000fbfa75", "html_url": "https://github.com/rust-lang/rust/commit/536a900c471dffad6e33766a2866889000fbfa75"}], "stats": {"total": 229, "additions": 71, "deletions": 158}, "files": [{"sha": "1d1d63c9ee46328201bde24841cc366ee65e00e9", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -762,14 +762,6 @@ dependencies = [\n  \"unwind 0.0.0\",\n ]\n \n-[[package]]\n-name = \"std_shim\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"core 0.0.0\",\n- \"std 0.0.0\",\n-]\n-\n [[package]]\n name = \"std_unicode\"\n version = \"0.0.0\"\n@@ -835,13 +827,6 @@ dependencies = [\n  \"term 0.0.0\",\n ]\n \n-[[package]]\n-name = \"test_shim\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"test 0.0.0\",\n-]\n-\n [[package]]\n name = \"thread-id\"\n version = \"2.0.0\""}, {"sha": "0dafbb8428e3ebf6cd1d44d149805c914cff3e46", "filename": "src/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -2,8 +2,8 @@\n members = [\n   \"bootstrap\",\n   \"rustc\",\n-  \"rustc/std_shim\",\n-  \"rustc/test_shim\",\n+  \"libstd\",\n+  \"libtest\",\n   \"tools/cargotest\",\n   \"tools/compiletest\",\n   \"tools/error_index_generator\","}, {"sha": "2f7757fb1d5ba61de10331c6bbccf80e2d34555a", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -267,8 +267,8 @@ build/\n The current build is unfortunately not quite as simple as `cargo build` in a\n directory, but rather the compiler is split into three different Cargo projects:\n \n-* `src/rustc/std_shim` - a project which builds and compiles libstd\n-* `src/rustc/test_shim` - a project which builds and compiles libtest\n+* `src/libstd` - the standard library\n+* `src/libtest` - testing support, depends on libstd\n * `src/rustc` - the actual compiler itself\n \n Each \"project\" has a corresponding Cargo.lock file with all dependencies, and"}, {"sha": "dfe96b51799c0f5813442a69fbc020513370e5b6", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -346,10 +346,10 @@ pub fn krate(build: &Build,\n              krate: Option<&str>) {\n     let (name, path, features, root) = match mode {\n         Mode::Libstd => {\n-            (\"libstd\", \"src/rustc/std_shim\", build.std_features(), \"std_shim\")\n+            (\"libstd\", \"src/libstd\", build.std_features(), \"std\")\n         }\n         Mode::Libtest => {\n-            (\"libtest\", \"src/rustc/test_shim\", String::new(), \"test_shim\")\n+            (\"libtest\", \"src/libtest\", String::new(), \"test\")\n         }\n         Mode::Librustc => {\n             (\"librustc\", \"src/rustc\", build.rustc_features(), \"rustc-main\")"}, {"sha": "00904bc776aa909eb791d8b538f4fceb7a1d6e09", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -64,7 +64,7 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     }\n     cargo.arg(\"--features\").arg(features)\n          .arg(\"--manifest-path\")\n-         .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"));\n+         .arg(build.src.join(\"src/libstd/Cargo.toml\"));\n \n     if let Some(target) = build.config.target_config.get(target) {\n         if let Some(ref jemalloc) = target.jemalloc {\n@@ -162,7 +162,7 @@ pub fn test(build: &Build, target: &str, compiler: &Compiler) {\n     build.clear_if_dirty(&out_dir, &libstd_stamp(build, compiler, target));\n     let mut cargo = build.cargo(compiler, Mode::Libtest, target, \"build\");\n     cargo.arg(\"--manifest-path\")\n-         .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n+         .arg(build.src.join(\"src/libtest/Cargo.toml\"));\n     build.run(&mut cargo);\n     update_mtime(build, &libtest_stamp(build, compiler, target));\n }"}, {"sha": "3fcc15b35b541e75b88abbb0dd6123dcc0dc743a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -152,7 +152,7 @@ pub fn std(build: &Build, stage: u32, target: &str) {\n \n     let mut cargo = build.cargo(&compiler, Mode::Libstd, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n-         .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"))\n+         .arg(build.src.join(\"src/libstd/Cargo.toml\"))\n          .arg(\"--features\").arg(build.std_features());\n \n     // We don't want to build docs for internal std dependencies unless\n@@ -198,7 +198,7 @@ pub fn test(build: &Build, stage: u32, target: &str) {\n \n     let mut cargo = build.cargo(&compiler, Mode::Libtest, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n-         .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n+         .arg(build.src.join(\"src/libtest/Cargo.toml\"));\n     build.run(&mut cargo);\n     cp_r(&out_dir, &out)\n }"}, {"sha": "5ab542b6a24893c1281eddf0f3cc6a5a2fc63017", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -43,8 +43,8 @@ struct ResolveNode {\n }\n \n pub fn build(build: &mut Build) {\n-    build_krate(build, \"src/rustc/std_shim\");\n-    build_krate(build, \"src/rustc/test_shim\");\n+    build_krate(build, \"src/libstd\");\n+    build_krate(build, \"src/libtest\");\n     build_krate(build, \"src/rustc\");\n }\n "}, {"sha": "ef84693b5b319db2320aa088469283bdc80f8ec0", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -246,14 +246,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     crate_rule(build,\n                &mut rules,\n                \"libstd-link\",\n-               \"build-crate-std_shim\",\n+               \"build-crate-std\",\n                compile::std_link)\n         .dep(|s| s.name(\"startup-objects\"))\n         .dep(|s| s.name(\"create-sysroot\").target(s.host));\n     crate_rule(build,\n                &mut rules,\n                \"libtest-link\",\n-               \"build-crate-test_shim\",\n+               \"build-crate-test\",\n                compile::test_link)\n         .dep(|s| s.name(\"libstd-link\"));\n     crate_rule(build,\n@@ -263,13 +263,13 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                compile::rustc_link)\n         .dep(|s| s.name(\"libtest-link\"));\n \n-    for (krate, path, _default) in krates(\"std_shim\") {\n+    for (krate, path, _default) in krates(\"std\") {\n         rules.build(&krate.build_step, path)\n              .dep(|s| s.name(\"startup-objects\"))\n              .dep(move |s| s.name(\"rustc\").host(&build.config.build).target(s.host))\n              .run(move |s| compile::std(build, s.target, &s.compiler()));\n     }\n-    for (krate, path, _default) in krates(\"test_shim\") {\n+    for (krate, path, _default) in krates(\"test\") {\n         rules.build(&krate.build_step, path)\n              .dep(|s| s.name(\"libstd-link\"))\n              .run(move |s| compile::test(build, s.target, &s.compiler()));\n@@ -384,7 +384,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               \"pretty\", \"run-fail-fulldeps\");\n     }\n \n-    for (krate, path, _default) in krates(\"std_shim\") {\n+    for (krate, path, _default) in krates(\"std\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n              .dep(|s| s.name(\"emulator-copy-libs\"))\n@@ -400,7 +400,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                                     Mode::Libstd, TestKind::Test, None));\n \n     // std benchmarks\n-    for (krate, path, _default) in krates(\"std_shim\") {\n+    for (krate, path, _default) in krates(\"std\") {\n         rules.bench(&krate.bench_step, path)\n              .dep(|s| s.name(\"libtest\"))\n              .dep(|s| s.name(\"emulator-copy-libs\"))\n@@ -415,7 +415,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Bench, None));\n \n-    for (krate, path, _default) in krates(\"test_shim\") {\n+    for (krate, path, _default) in krates(\"test\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n              .dep(|s| s.name(\"emulator-copy-libs\"))\n@@ -583,13 +583,13 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .default(build.config.docs)\n          .host(true)\n          .run(move |s| doc::error_index(build, s.target));\n-    for (krate, path, default) in krates(\"std_shim\") {\n+    for (krate, path, default) in krates(\"std\") {\n         rules.doc(&krate.doc_step, path)\n              .dep(|s| s.name(\"libstd-link\"))\n              .default(default && build.config.docs)\n              .run(move |s| doc::std(build, s.stage, s.target));\n     }\n-    for (krate, path, default) in krates(\"test_shim\") {\n+    for (krate, path, default) in krates(\"test\") {\n         rules.doc(&krate.doc_step, path)\n              .dep(|s| s.name(\"libtest-link\"))\n              .default(default && build.config.compiler_docs)\n@@ -1154,23 +1154,23 @@ mod tests {\n \n         let mut build = Build::new(flags, config);\n         let cwd = env::current_dir().unwrap();\n-        build.crates.insert(\"std_shim\".to_string(), ::Crate {\n-            name: \"std_shim\".to_string(),\n+        build.crates.insert(\"std\".to_string(), ::Crate {\n+            name: \"std\".to_string(),\n             deps: Vec::new(),\n-            path: cwd.join(\"src/std_shim\"),\n-            doc_step: \"doc-std_shim\".to_string(),\n-            build_step: \"build-crate-std_shim\".to_string(),\n-            test_step: \"test-std_shim\".to_string(),\n-            bench_step: \"bench-std_shim\".to_string(),\n+            path: cwd.join(\"src/std\"),\n+            doc_step: \"doc-std\".to_string(),\n+            build_step: \"build-crate-std\".to_string(),\n+            test_step: \"test-std\".to_string(),\n+            bench_step: \"bench-std\".to_string(),\n         });\n-        build.crates.insert(\"test_shim\".to_string(), ::Crate {\n-            name: \"test_shim\".to_string(),\n+        build.crates.insert(\"test\".to_string(), ::Crate {\n+            name: \"test\".to_string(),\n             deps: Vec::new(),\n-            path: cwd.join(\"src/test_shim\"),\n-            doc_step: \"doc-test_shim\".to_string(),\n-            build_step: \"build-crate-test_shim\".to_string(),\n-            test_step: \"test-test_shim\".to_string(),\n-            bench_step: \"bench-test_shim\".to_string(),\n+            path: cwd.join(\"src/test\"),\n+            doc_step: \"doc-test\".to_string(),\n+            build_step: \"build-crate-test\".to_string(),\n+            test_step: \"test-test\".to_string(),\n+            bench_step: \"bench-test\".to_string(),\n         });\n         build.crates.insert(\"rustc-main\".to_string(), ::Crate {\n             name: \"rustc-main\".to_string(),\n@@ -1360,7 +1360,7 @@ mod tests {\n         let all = rules.expand(&plan);\n         println!(\"all rules: {:#?}\", all);\n         assert!(!all.contains(&step.name(\"rustc\")));\n-        assert!(!all.contains(&step.name(\"build-crate-std_shim\").stage(1)));\n+        assert!(!all.contains(&step.name(\"build-crate-std\").stage(1)));\n \n         // all stage0 compiles should be for the build target, A\n         for step in all.iter().filter(|s| s.stage == 0) {\n@@ -1425,7 +1425,7 @@ mod tests {\n \n         assert!(!plan.iter().any(|s| s.name.contains(\"rustc\")));\n         assert!(plan.iter().all(|s| {\n-            !s.name.contains(\"test_shim\") || s.target == \"C\"\n+            !s.name.contains(\"test\") || s.target == \"C\"\n         }));\n     }\n "}, {"sha": "a496ab870c63b83a0fac2e0a5d683c5408be85a5", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -122,18 +122,6 @@ mod imp {\n         let flags = align_to_flags(align);\n         unsafe { nallocx(size as size_t, flags) as usize }\n     }\n-\n-    // These symbols are used by jemalloc on android but the really old android\n-    // we're building on doesn't have them defined, so just make sure the symbols\n-    // are available.\n-    #[no_mangle]\n-    #[cfg(all(target_os = \"android\", not(cargobuild)))]\n-    pub extern \"C\" fn pthread_atfork(_prefork: *mut u8,\n-                                     _postfork_parent: *mut u8,\n-                                     _postfork_child: *mut u8)\n-                                     -> i32 {\n-        0\n-    }\n }\n \n #[cfg(dummy_jemalloc)]"}, {"sha": "db96079d3e916e1fb789fe88bdab6a39a90de3cb", "filename": "src/rustc/std_shim/Cargo.toml", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=536a900c471dffad6e33766a2866889000fbfa75", "patch": "@@ -1,46 +0,0 @@\n-# This is a shim Cargo.toml which serves as a proxy for building the standard\n-# library. The reason for this is a little subtle, as one might reasonably\n-# expect that we just `cargo build` the standard library itself.\n-#\n-# One of the output artifacts for the standard library is a dynamic library, and\n-# on platforms like OSX the name of the output artifact is actually encoded into\n-# the library itself (similar to a soname on Linux). When the library is linked\n-# against, this encoded name is what's literally looked for at runtime when the\n-# dynamic loader is probing for libraries.\n-#\n-# Cargo, however, by default will not mangle the output filename of the\n-# top-level target. If we were to run `cargo build` on libstd itself, we would\n-# generate a file `libstd.so`. When installing, however, this file is called\n-# something like `libstd-abcdef0123.so`. On OSX at least this causes a failure\n-# at runtime because the encoded \"soname\" is `libstd.so`, not what the file is\n-# actually called.\n-#\n-# By using this shim library to build the standard library by proxy we sidestep\n-# this problem. The standard library is built with mangled hex already in its\n-# name so there's nothing extra we need to do.\n-\n-[package]\n-name = \"std_shim\"\n-version = \"0.0.0\"\n-authors = [\"The Rust Project Developers\"]\n-\n-[lib]\n-name = \"std_shim\"\n-path = \"lib.rs\"\n-doc = false\n-\n-[dependencies]\n-std = { path = \"../../libstd\" }\n-core = { path = \"../../libcore\" }\n-\n-# Reexport features from std\n-[features]\n-asan = [\"std/asan\"]\n-backtrace = [\"std/backtrace\"]\n-debug-jemalloc = [\"std/debug-jemalloc\"]\n-jemalloc = [\"std/jemalloc\"]\n-force_alloc_system = [\"std/force_alloc_system\"]\n-lsan = [\"std/lsan\"]\n-msan = [\"std/msan\"]\n-panic-unwind = [\"std/panic-unwind\"]\n-tsan = [\"std/tsan\"]"}, {"sha": "2fc5d8d6e53218c37322e9ad8f79ea46b7f24400", "filename": "src/rustc/std_shim/lib.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Fstd_shim%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Fstd_shim%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2Flib.rs?ref=536a900c471dffad6e33766a2866889000fbfa75", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// See comments in Cargo.toml for why this exists\n-\n-// There's a bug right now where if we pass --extern std=... and we're cross\n-// compiling then this doesn't work with `#[macro_use] extern crate std;`. Work\n-// around this by not having `#[macro_use] extern crate std;`\n-#![no_std]\n-extern crate std;"}, {"sha": "6ef613eee06281060bed344fae9cbc7448a5c215", "filename": "src/rustc/test_shim/Cargo.toml", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Ftest_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Ftest_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2FCargo.toml?ref=536a900c471dffad6e33766a2866889000fbfa75", "patch": "@@ -1,16 +0,0 @@\n-# This is a shim Cargo.toml which serves as a proxy for building libtest.\n-#\n-# The reason this shim exists is basically the same reason that `std_shim`\n-# exists, and more documentation can be found in that `Cargo.toml` as to why.\n-\n-[package]\n-name = \"test_shim\"\n-version = \"0.0.0\"\n-authors = [\"The Rust Project Developers\"]\n-\n-[lib]\n-name = \"test_shim\"\n-path = \"lib.rs\"\n-\n-[dependencies]\n-test = { path = \"../../libtest\" }"}, {"sha": "d614d967e3b07f13566763dc476ad2b71f0fa26c", "filename": "src/rustc/test_shim/lib.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Ftest_shim%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536a900c471dffad6e33766a2866889000fbfa75/src%2Frustc%2Ftest_shim%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2Flib.rs?ref=536a900c471dffad6e33766a2866889000fbfa75", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// See comments in Cargo.toml for why this exists\n-\n-#![feature(test)]\n-\n-extern crate test;"}, {"sha": "2bdc76e01db1ad14815932a52076aec2539b90d7", "filename": "src/test/run-make/sysroot-crates-are-unstable/Makefile", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/40aaa65734d72b7aabda3cd0925b0119fb6d5a0a/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsysroot-crates-are-unstable%2FMakefile?ref=40aaa65734d72b7aabda3cd0925b0119fb6d5a0a", "patch": "@@ -0,0 +1,34 @@\n+-include ../tools.mk\n+\n+# This is a whitelist of crates which are stable, we don't check for the\n+# instability of these crates as they're all stable!\n+STABLE_CRATES := \\\n+\tstd \\\n+\tcore \\\n+\tproc_macro \\\n+\trsbegin.o \\\n+\trsend.o \\\n+\tdllcrt2.o \\\n+\tcrt2.o\n+\n+# Generate a list of all crates in the sysroot. To do this we list all files in\n+# rustc's sysroot, look at the filename, strip everything after the `-`, and\n+# strip the leading `lib` (if present)\n+SYSROOT := $(shell $(RUSTC) --print sysroot)\n+LIBS := $(wildcard $(SYSROOT)/lib/rustlib/$(TARGET)/lib/*)\n+LIBS := $(foreach lib,$(LIBS),$(notdir $(lib)))\n+LIBS := $(foreach lib,$(LIBS),$(word 1,$(subst -, ,$(lib))))\n+LIBS := $(foreach lib,$(LIBS),$(patsubst lib%,%,$(lib)))\n+LIBS := $(filter-out $(STABLE_CRATES),$(LIBS))\n+\n+all: $(foreach lib,$(LIBS),check-crate-$(lib)-is-unstable)\n+\n+check-crate-%-is-unstable:\n+\t@echo verifying $* is an unstable crate\n+\t@echo 'extern crate $*;' | \\\n+\t\t$(RUSTC) - --crate-type rlib 2>&1 | cat > $(TMPDIR)/$*; \\\n+\t\ttrue\n+\t@grep -q 'use of unstable library feature' $(TMPDIR)/$* || \\\n+\t\t(echo crate $* is not unstable && \\\n+\t\tcat $(TMPDIR)/$* && \\\n+\t\tfalse)"}]}