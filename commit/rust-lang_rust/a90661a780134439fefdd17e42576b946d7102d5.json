{"sha": "a90661a780134439fefdd17e42576b946d7102d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MDY2MWE3ODAxMzQ0MzlmZWZkZDE3ZTQyNTc2Yjk0NmQ3MTAyZDU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-07T05:12:50Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-07T05:12:50Z"}, "message": "Use a `SmallVec` for `Cache::predecessors`.\n\nThis is a very small win.", "tree": {"sha": "9f52ca5abd914631630db8998300c03704e100e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f52ca5abd914631630db8998300c03704e100e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a90661a780134439fefdd17e42576b946d7102d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a90661a780134439fefdd17e42576b946d7102d5", "html_url": "https://github.com/rust-lang/rust/commit/a90661a780134439fefdd17e42576b946d7102d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a90661a780134439fefdd17e42576b946d7102d5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "html_url": "https://github.com/rust-lang/rust/commit/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "af0f7efc3e3548ad9781708d3c391c79377f6126", "filename": "src/librustc_middle/mir/cache.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a90661a780134439fefdd17e42576b946d7102d5/src%2Flibrustc_middle%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90661a780134439fefdd17e42576b946d7102d5/src%2Flibrustc_middle%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fcache.rs?ref=a90661a780134439fefdd17e42576b946d7102d5", "patch": "@@ -5,13 +5,15 @@ use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::IndexVec;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use smallvec::SmallVec;\n use std::iter;\n use std::ops::{Deref, DerefMut, Index, IndexMut};\n use std::vec::IntoIter;\n \n #[derive(Clone, Debug)]\n pub struct Cache {\n-    predecessors: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>,\n+    // Typically 95%+ of the inner vectors have 4 or fewer elements.\n+    predecessors: Option<IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>>>,\n }\n \n impl rustc_serialize::Encodable for Cache {\n@@ -44,7 +46,7 @@ impl Cache {\n \n     pub fn ensure_predecessors(&mut self, body: &Body<'_>) {\n         if self.predecessors.is_none() {\n-            let mut result = IndexVec::from_elem(vec![], body.basic_blocks());\n+            let mut result = IndexVec::from_elem(smallvec![], body.basic_blocks());\n             for (bb, data) in body.basic_blocks().iter_enumerated() {\n                 if let Some(ref term) = data.terminator {\n                     for &tgt in term.successors() {\n@@ -58,7 +60,11 @@ impl Cache {\n     }\n \n     /// This will recompute the predecessors cache if it is not available\n-    fn predecessors(&mut self, body: &Body<'_>) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    // njn: typedef?\n+    fn predecessors(\n+        &mut self,\n+        body: &Body<'_>,\n+    ) -> &IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>> {\n         self.ensure_predecessors(body);\n         self.predecessors.as_ref().unwrap()\n     }\n@@ -137,7 +143,7 @@ impl BodyAndCache<'tcx> {\n         self.cache.ensure_predecessors(&self.body);\n     }\n \n-    pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>> {\n         self.cache.predecessors(&self.body)\n     }\n \n@@ -199,7 +205,7 @@ impl ReadOnlyBodyAndCache<'a, 'tcx> {\n         Self { body, cache }\n     }\n \n-    pub fn predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    pub fn predecessors(&self) -> &IndexVec<BasicBlock, SmallVec<[BasicBlock; 4]>> {\n         self.cache.predecessors.as_ref().unwrap()\n     }\n "}]}