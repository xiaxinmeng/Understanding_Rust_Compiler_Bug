{"sha": "b40e6baec7504ebc7c681259d268c81b1e0241b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MGU2YmFlYzc1MDRlYmM3YzY4MTI1OWQyNjhjODFiMWUwMjQxYjI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-07T17:25:36Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:29Z"}, "message": "Update `visit_item_likes_in_module`", "tree": {"sha": "4b877a2d9b5788ee09e3303331313e8dd3cdd3de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b877a2d9b5788ee09e3303331313e8dd3cdd3de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b40e6baec7504ebc7c681259d268c81b1e0241b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b40e6baec7504ebc7c681259d268c81b1e0241b2", "html_url": "https://github.com/rust-lang/rust/commit/b40e6baec7504ebc7c681259d268c81b1e0241b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b40e6baec7504ebc7c681259d268c81b1e0241b2/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e613c4eb165f778fa8bb12107141d34a4c0621", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e613c4eb165f778fa8bb12107141d34a4c0621", "html_url": "https://github.com/rust-lang/rust/commit/38e613c4eb165f778fa8bb12107141d34a4c0621"}], "stats": {"total": 154, "additions": 88, "deletions": 66}, "files": [{"sha": "755bc15ba9380f44ce022f7be5cebfa8787e9031", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -223,8 +223,8 @@ macro_rules! define_dep_nodes {\n             /// Construct a DepNode from the given DepKind and DefPathHash. This\n             /// method will assert that the given DepKind actually requires a\n             /// single DefId/DefPathHash parameter.\n-            pub fn from_def_path_hash(kind: DepKind,\n-                                      def_path_hash: DefPathHash)\n+            pub fn from_def_path_hash(def_path_hash: DefPathHash,\n+                                      kind: DepKind)\n                                       -> DepNode {\n                 debug_assert!(kind.can_reconstruct_query_key() && kind.has_params());\n                 DepNode {\n@@ -280,7 +280,7 @@ macro_rules! define_dep_nodes {\n                 }\n \n                 if kind.has_params() {\n-                    Ok(def_path_hash.to_dep_node(kind))\n+                    Ok(DepNode::from_def_path_hash(def_path_hash, kind))\n                 } else {\n                     Ok(DepNode::new_no_params(kind))\n                 }\n@@ -337,12 +337,6 @@ impl fmt::Debug for DepNode {\n     }\n }\n \n-impl DefPathHash {\n-    pub fn to_dep_node(self, kind: DepKind) -> DepNode {\n-        DepNode::from_def_path_hash(kind, self)\n-    }\n-}\n-\n rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,"}, {"sha": "231d0ee482196ac11fd3f72b780578d2951a8d08", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -86,15 +86,15 @@ fn alloc_hir_dep_nodes(\n ) -> (DepNodeIndex, DepNodeIndex) {\n     let sig = dep_graph\n         .input_task(\n-            def_path_hash.to_dep_node(DepKind::Hir),\n+            DepNode::from_def_path_hash(def_path_hash, DepKind::Hir),\n             &mut *hcx,\n             HirItemLike { item_like: &item_like, hash_bodies: false },\n         )\n         .1;\n     let (full, hash) = input_dep_node_and_hash(\n         dep_graph,\n         hcx,\n-        def_path_hash.to_dep_node(DepKind::HirBody),\n+        DepNode::from_def_path_hash(def_path_hash, DepKind::HirBody),\n         HirItemLike { item_like: &item_like, hash_bodies: true },\n     );\n     hir_body_nodes.push((def_path_hash, hash));"}, {"sha": "50117f73d48ccce701580e81f206a0ce71f1d9cb", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -6,7 +6,6 @@\n \n use rustc_ast::ast;\n use rustc_ast::node_id::NodeMap;\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir as hir;\n@@ -17,10 +16,11 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n-use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n \n+pub use rustc_hir::def_id::DefPathHash;\n+\n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`\n /// stores the `DefIndex` of its parent.\n@@ -282,28 +282,6 @@ pub enum DefPathData {\n     ImplTrait,\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Hash,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n-pub struct DefPathHash(pub Fingerprint);\n-\n-impl Borrow<Fingerprint> for DefPathHash {\n-    #[inline]\n-    fn borrow(&self) -> &Fingerprint {\n-        &self.0\n-    }\n-}\n-\n impl Definitions {\n     pub fn def_path_table(&self) -> &DefPathTable {\n         &self.table"}, {"sha": "f7990ca01494adec49cb5a5c50d192f67c5ab802", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -562,15 +562,7 @@ impl<'hir> Map<'hir> {\n     where\n         V: ItemLikeVisitor<'hir>,\n     {\n-        let hir_id = self.as_local_hir_id(module).unwrap();\n-\n-        // Read the module so we'll be re-executed if new items\n-        // appear immediately under in the module. If some new item appears\n-        // in some nested item in the module, we'll be re-executed due to reads\n-        // in the expect_* calls the loops below\n-        self.read(hir_id);\n-\n-        let module = &self.krate.modules[&hir_id];\n+        let module = self.tcx.hir_module_items(module);\n \n         for id in &module.items {\n             visitor.visit_item(self.expect_item(*id));\n@@ -639,7 +631,7 @@ impl<'hir> Map<'hir> {\n         if self.dep_graph.is_fully_enabled() {\n             let hir_id_owner = hir_id.owner;\n             let def_path_hash = self.definitions.def_path_hash(hir_id_owner);\n-            self.dep_graph.read(def_path_hash.to_dep_node(DepKind::HirBody));\n+            self.dep_graph.read(DepNode::from_def_path_hash(def_path_hash, DepKind::HirBody));\n         }\n \n         self.find_entry(hir_id).and_then(|x| x.parent_node()).unwrap_or(hir_id)"}, {"sha": "f113efa6300925d052c059141ac90c5ad75b2e4c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -114,6 +114,12 @@ pub fn provide(providers: &mut Providers<'_>) {\n             hir_to_node_id: early.hir_to_node_id,\n         })\n     };\n+    providers.hir_module_items = |tcx, id| {\n+        assert_eq!(id.krate, LOCAL_CRATE);\n+        let hir = tcx.hir();\n+        let module = hir.as_local_hir_id(id).unwrap();\n+        &hir.untracked_krate().modules[&module]\n+    };\n     providers.hir_owner = |tcx, id| {\n         assert_eq!(id.krate, LOCAL_CRATE);\n         *tcx.hir().map.owner_map.get(&id.index).unwrap()"}, {"sha": "c15d54745a10523f4730735248c365e2a011ef05", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -7,7 +7,7 @@ use crate::ty::{fast_reject, TyCtxt};\n \n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIndex};\n@@ -197,19 +197,6 @@ impl<'a> StableHashingContextProvider<'a> for StableHashingContext<'a> {\n \n impl<'a> crate::dep_graph::DepGraphSafe for StableHashingContext<'a> {}\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::HirId {\n-    type KeyType = (DefPathHash, hir::ItemLocalId);\n-\n-    #[inline]\n-    fn to_stable_hash_key(\n-        &self,\n-        hcx: &StableHashingContext<'a>,\n-    ) -> (DefPathHash, hir::ItemLocalId) {\n-        let def_path_hash = hcx.local_def_path_hash(self.owner);\n-        (def_path_hash, self.local_id)\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::NodeId {\n     fn hash_stable(&self, _: &mut StableHashingContext<'a>, _: &mut StableHasher) {\n         panic!(\"Node IDs should not appear in incremental state\");"}, {"sha": "06bfd782b59ce5b9a5421f3774bf658f9f225ba9", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -6,7 +6,7 @@ use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use std::mem;\n \n@@ -114,6 +114,11 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n \n         self.node_id_hashing_mode = prev_hash_node_ids;\n     }\n+\n+    #[inline]\n+    fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash {\n+        self.local_def_path_hash(def_index)\n+    }\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for DefId {"}, {"sha": "2a8e34ddc2521b684a3cfe05f4061a1b01b09eb3", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -61,6 +61,10 @@ rustc_queries! {\n             desc { \"index HIR\" }\n         }\n \n+        query hir_module_items(key: DefId) -> &'tcx hir::ModuleItems {\n+            eval_always\n+        }\n+\n         query hir_owner(key: DefId) -> &'tcx HirOwner<'tcx> {\n             eval_always\n         }"}, {"sha": "88cc863933198ed35e3e239b8c58f62719e713b3", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -597,7 +597,7 @@ pub struct WhereEqPredicate<'hir> {\n     pub rhs_ty: &'hir Ty<'hir>,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct ModuleItems {\n     // Use BTreeSets here so items are in the same order as in the\n     // list of all items in Crate"}, {"sha": "7ca2bfded3c2d9921956296fb13ec81a39283a02", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -1,10 +1,11 @@\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n     BodyId, Expr, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem, TraitItemId, Ty,\n     VisibilityKind,\n };\n-use crate::hir_id::HirId;\n+use crate::hir_id::{HirId, ItemLocalId};\n+use rustc_span::def_id::{DefIndex, DefPathHash};\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n@@ -20,6 +21,35 @@ pub trait HashStableContext:\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n     fn hash_hir_visibility_kind(&mut self, _: &VisibilityKind<'_>, hasher: &mut StableHasher);\n     fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F);\n+    fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash;\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        let def_path_hash = hcx.local_def_path_hash(self.owner);\n+        (def_path_hash, self.local_id)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for TraitItemId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        self.hir_id.to_stable_hash_key(hcx)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ImplItemId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        self.hir_id.to_stable_hash_key(hcx)\n+    }\n }\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for HirId {"}, {"sha": "7686a507ff5266f742547e0598a4ed6c15939710", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -120,7 +120,7 @@ impl IfThisChanged<'tcx> {\n             if attr.check_name(sym::rustc_if_this_changed) {\n                 let dep_node_interned = self.argument(attr);\n                 let dep_node = match dep_node_interned {\n-                    None => def_path_hash.to_dep_node(DepKind::Hir),\n+                    None => DepNode::from_def_path_hash(def_path_hash, DepKind::Hir),\n                     Some(n) => match DepNode::from_label_string(&n.as_str(), def_path_hash) {\n                         Ok(n) => n,\n                         Err(()) => {"}, {"sha": "7126f86c326c614d4575228b34f312aac16e2e90", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -4,7 +4,7 @@ use crate::creader::CrateMetadataRef;\n use crate::rmeta::table::{FixedSizeEncoding, Table};\n use crate::rmeta::*;\n \n-use rustc::dep_graph::{self, DepNodeIndex};\n+use rustc::dep_graph::{self, DepNode, DepNodeIndex};\n use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n@@ -1607,7 +1607,8 @@ impl CrateMetadata {\n             // would always write the same value.\n \n             let def_path_hash = self.def_path_hash(CRATE_DEF_INDEX);\n-            let dep_node = def_path_hash.to_dep_node(dep_graph::DepKind::CrateMetadata);\n+            let dep_node =\n+                DepNode::from_def_path_hash(def_path_hash, dep_graph::DepKind::CrateMetadata);\n \n             dep_node_index = tcx.dep_graph.dep_node_index_of(&dep_node);\n             assert!(dep_node_index != DepNodeIndex::INVALID);"}, {"sha": "a2944782e91d4fbace3414b7e8f5ecf9e4f33ed2", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40e6baec7504ebc7c681259d268c81b1e0241b2/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=b40e6baec7504ebc7c681259d268c81b1e0241b2", "patch": "@@ -1,8 +1,11 @@\n use crate::HashStableContext;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n+use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decoder, Encoder};\n+use std::borrow::Borrow;\n use std::fmt;\n use std::{u32, u64};\n \n@@ -102,6 +105,28 @@ impl ::std::fmt::Debug for CrateNum {\n     }\n }\n \n+#[derive(\n+    Copy,\n+    Clone,\n+    Hash,\n+    PartialEq,\n+    Eq,\n+    PartialOrd,\n+    Ord,\n+    Debug,\n+    RustcEncodable,\n+    RustcDecodable,\n+    HashStable_Generic\n+)]\n+pub struct DefPathHash(pub Fingerprint);\n+\n+impl Borrow<Fingerprint> for DefPathHash {\n+    #[inline]\n+    fn borrow(&self) -> &Fingerprint {\n+        &self.0\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n     /// particular definition. It should really be considered an interned"}]}