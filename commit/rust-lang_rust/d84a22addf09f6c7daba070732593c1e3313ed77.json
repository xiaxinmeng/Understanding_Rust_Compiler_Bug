{"sha": "d84a22addf09f6c7daba070732593c1e3313ed77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NGEyMmFkZGYwOWY2YzdkYWJhMDcwNzMyNTkzYzFlMzMxM2VkNzc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-18T01:23:34Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-09-19T05:48:37Z"}, "message": "rustpkg: Register correct dependencies for built and installed files\n\nas per #9112\n\nCloses #9112", "tree": {"sha": "ab92ef37e1048ee0d99d3ca049d937db0a0f7f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab92ef37e1048ee0d99d3ca049d937db0a0f7f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84a22addf09f6c7daba070732593c1e3313ed77", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84a22addf09f6c7daba070732593c1e3313ed77", "html_url": "https://github.com/rust-lang/rust/commit/d84a22addf09f6c7daba070732593c1e3313ed77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84a22addf09f6c7daba070732593c1e3313ed77/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dacd736510b2ae28a54489fe88571f1a6de019f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dacd736510b2ae28a54489fe88571f1a6de019f", "html_url": "https://github.com/rust-lang/rust/commit/4dacd736510b2ae28a54489fe88571f1a6de019f"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "4f6848525c9ac5e651af05ba14494d655b5f846d", "filename": "src/librustpkg/api.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Fapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Fapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fapi.rs?ref=d84a22addf09f6c7daba070732593c1e3313ed77", "patch": "@@ -16,6 +16,7 @@ use target::*;\n use version::Version;\n use workcache_support::*;\n \n+use std::os;\n use extra::arc::{Arc,RWArc};\n use extra::workcache;\n use extra::workcache::{Database, Logger, FreshnessMap};\n@@ -40,11 +41,13 @@ pub fn new_default_context(c: workcache::Context, p: Path) -> BuildContext {\n }\n \n fn file_is_fresh(path: &str, in_hash: &str) -> bool {\n-    in_hash == digest_file_with_date(&Path(path))\n+    let path = Path(path);\n+    os::path_exists(&path) && in_hash == digest_file_with_date(&path)\n }\n \n fn binary_is_fresh(path: &str, in_hash: &str) -> bool {\n-    in_hash == digest_only_date(&Path(path))\n+    let path = Path(path);\n+    os::path_exists(&path) && in_hash == digest_only_date(&path)\n }\n \n pub fn new_workcache_context(p: &Path) -> workcache::Context {"}, {"sha": "56ee2033d1438ea9e962d95648ae2df0d56ce8f3", "filename": "src/librustpkg/exit_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Fexit_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Fexit_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fexit_codes.rs?ref=d84a22addf09f6c7daba070732593c1e3313ed77", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub static copy_failed_code: int = 65;\n+pub static COPY_FAILED_CODE: int = 65;"}, {"sha": "3ed1b7a3a9ca6ffce4f2d0f399e8754874da8630", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=d84a22addf09f6c7daba070732593c1e3313ed77", "patch": "@@ -118,7 +118,6 @@ fn target_bin_dir(workspace: &Path) -> Path {\n /// directory is, and if the file exists, return it.\n pub fn built_executable_in_workspace(pkgid: &PkgId, workspace: &Path) -> Option<Path> {\n     let mut result = target_build_dir(workspace);\n-    // should use a target-specific subdirectory\n     result = mk_output_path(Main, Build, pkgid, result);\n     debug!(\"built_executable_in_workspace: checking whether %s exists\",\n            result.to_str());"}, {"sha": "ccc3177739efd53730811ae1a8612eead40c9747", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=d84a22addf09f6c7daba070732593c1e3313ed77", "patch": "@@ -47,7 +47,7 @@ use package_source::PkgSrc;\n use target::{WhatToBuild, Everything, is_lib, is_main, is_test, is_bench};\n // use workcache_support::{discover_outputs, digest_only_date};\n use workcache_support::digest_only_date;\n-use exit_codes::copy_failed_code;\n+use exit_codes::COPY_FAILED_CODE;\n \n pub mod api;\n mod conditions;\n@@ -789,10 +789,10 @@ pub fn main_args(args: &[~str]) {\n         }.run(sub_cmd, rm_args.clone())\n     };\n     // FIXME #9262: This is using the same error code for all errors,\n-    // and at least one test case succeeds if rustpkg returns copy_failed_code,\n+    // and at least one test case succeeds if rustpkg returns COPY_FAILED_CODE,\n     // when actually, it might set the exit code for that even if a different\n     // unhandled condition got raised.\n-    if result.is_err() { os::set_exit_status(copy_failed_code); }\n+    if result.is_err() { os::set_exit_status(COPY_FAILED_CODE); }\n \n }\n "}, {"sha": "a0e9e49e507cdf369a4e6e27ca6de16e1afb87c2", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=d84a22addf09f6c7daba070732593c1e3313ed77", "patch": "@@ -355,6 +355,13 @@ fn executable_exists(repo: &Path, short_name: &str) -> bool {\n     os::path_exists(&exec) && is_rwx(&exec)\n }\n \n+fn remove_executable_file(p: &PkgId, workspace: &Path) {\n+    let exec = target_executable_in_workspace(&PkgId::new(p.short_name), workspace);\n+    if os::path_exists(&exec) {\n+        assert!(os::remove_file(&exec));\n+    }\n+}\n+\n fn assert_built_executable_exists(repo: &Path, short_name: &str) {\n     assert!(built_executable_exists(repo, short_name));\n }\n@@ -368,6 +375,14 @@ fn built_executable_exists(repo: &Path, short_name: &str) -> bool {\n     }\n }\n \n+fn remove_built_executable_file(p: &PkgId, workspace: &Path) {\n+    let exec = built_executable_in_workspace(&PkgId::new(p.short_name), workspace);\n+    match exec {\n+        Some(r) => assert!(os::remove_file(&r)),\n+        None    => ()\n+    }\n+}\n+\n fn object_file_exists(repo: &Path, short_name: &str) -> bool {\n     file_exists(repo, short_name, \"o\")\n }\n@@ -1705,6 +1720,44 @@ fn test_dependencies_terminate() {\n     command_line_test([~\"install\", ~\"b\"], &workspace);\n }\n \n+#[test]\n+fn install_after_build() {\n+    let b_id = PkgId::new(\"b\");\n+    let workspace = create_local_package(&b_id);\n+    command_line_test([~\"build\", ~\"b\"], &workspace);\n+    command_line_test([~\"install\", ~\"b\"], &workspace);\n+    assert_executable_exists(&workspace, b_id.short_name);\n+    assert_lib_exists(&workspace, &b_id.path, NoVersion);\n+}\n+\n+#[test]\n+fn reinstall() {\n+    let b = PkgId::new(\"b\");\n+    let workspace = create_local_package(&b);\n+    // 1. Install, then remove executable file, then install again,\n+    // and make sure executable was re-installed\n+    command_line_test([~\"install\", ~\"b\"], &workspace);\n+    assert_executable_exists(&workspace, b.short_name);\n+    assert_lib_exists(&workspace, &b.path, NoVersion);\n+    remove_executable_file(&b, &workspace);\n+    command_line_test([~\"install\", ~\"b\"], &workspace);\n+    assert_executable_exists(&workspace, b.short_name);\n+    // 2. Build, then remove build executable file, then build again,\n+    // and make sure executable was re-built.\n+    command_line_test([~\"build\", ~\"b\"], &workspace);\n+    remove_built_executable_file(&b, &workspace);\n+    command_line_test([~\"build\", ~\"b\"], &workspace);\n+    assert_built_executable_exists(&workspace, b.short_name);\n+    // 3. Install, then remove both executable and built executable,\n+    // then install again, make sure both were recreated\n+    command_line_test([~\"install\", ~\"b\"], &workspace);\n+    remove_executable_file(&b, &workspace);\n+    remove_built_executable_file(&b, &workspace);\n+    command_line_test([~\"install\", ~\"b\"], &workspace);\n+    assert_executable_exists(&workspace, b.short_name);\n+    assert_built_executable_exists(&workspace, b.short_name);\n+}\n+\n /// Returns true if p exists and is executable\n fn is_executable(p: &Path) -> bool {\n     use std::libc::consts::os::posix88::{S_IXUSR};"}, {"sha": "906bed2f2347b31e9e135b1c5ba1c1b69278b469", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84a22addf09f6c7daba070732593c1e3313ed77/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=d84a22addf09f6c7daba070732593c1e3313ed77", "patch": "@@ -283,7 +283,28 @@ pub fn compile_input(context: &BuildContext,\n \n     debug!(\"calling compile_crate_from_input, workspace = %s,\n            building_library = %?\", out_dir.to_str(), sess.building_library);\n-    compile_crate_from_input(in_file, exec, context.compile_upto(), &out_dir, sess, crate)\n+    let result = compile_crate_from_input(in_file,\n+                                          exec,\n+                                          context.compile_upto(),\n+                                          &out_dir,\n+                                          sess,\n+                                          crate);\n+    // Discover the output\n+    let discovered_output = if what == Lib  {\n+        installed_library_in_workspace(&pkg_id.path, workspace)\n+    }\n+    else {\n+        result\n+    };\n+    debug!(\"About to discover output %s\", discovered_output.to_str());\n+    for p in discovered_output.iter() {\n+        if os::path_exists(p) {\n+            exec.discover_output(\"binary\", p.to_str(), digest_only_date(p));\n+        }\n+        // Nothing to do if it doesn't exist -- that could happen if we had the\n+        // -S or -emit-llvm flags, etc.\n+    }\n+    discovered_output\n }\n \n // Should use workcache to avoid recompiling when not necessary"}]}