{"sha": "781f8cbe4e5f729907d38cb4de8fc407c1bcb23e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MWY4Y2JlNGU1ZjcyOTkwN2QzOGNiNGRlOGZjNDA3YzFiY2IyM2U=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-10-20T23:38:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-21T00:17:10Z"}, "message": "std: Add test for getpeername", "tree": {"sha": "aae21f211946f659f08d5a96dc2f49b8acbcf983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae21f211946f659f08d5a96dc2f49b8acbcf983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e", "html_url": "https://github.com/rust-lang/rust/commit/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e538d32ab33604a8288e7b76c875ff075743d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e538d32ab33604a8288e7b76c875ff075743d2", "html_url": "https://github.com/rust-lang/rust/commit/79e538d32ab33604a8288e7b76c875ff075743d2"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "351b31dcfbc2faa135b0607d106702fb081b3304", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/781f8cbe4e5f729907d38cb4de8fc407c1bcb23e/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=781f8cbe4e5f729907d38cb4de8fc407c1bcb23e", "patch": "@@ -1249,6 +1249,10 @@ mod test {\n                 impl_gl_tcp_ipv4_server_and_client();\n             }\n             #[test]\n+            fn test_gl_tcp_get_peer_name() unsafe {\n+                impl_gl_tcp_ipv4_get_peer_name();\n+            }\n+            #[test]\n             fn test_gl_tcp_ipv4_client_error_connection_refused() unsafe {\n                 impl_gl_tcp_ipv4_client_error_connection_refused();\n             }\n@@ -1275,6 +1279,11 @@ mod test {\n             }\n             #[test]\n             #[ignore(cfg(target_os = \"linux\"))]\n+            fn test_gl_tcp_get_peer_name() unsafe {\n+                impl_gl_tcp_ipv4_get_peer_name();\n+            }\n+            #[test]\n+            #[ignore(cfg(target_os = \"linux\"))]\n             fn test_gl_tcp_ipv4_client_error_connection_refused() unsafe {\n                 impl_gl_tcp_ipv4_client_error_connection_refused();\n             }\n@@ -1342,6 +1351,52 @@ mod test {\n         assert str::contains(actual_req, expected_req);\n         assert str::contains(actual_resp, expected_resp);\n     }\n+    fn impl_gl_tcp_ipv4_get_peer_name() {\n+        let hl_loop = uv::global_loop::get();\n+        let server_ip = ~\"127.0.0.1\";\n+        let server_port = 8889u;\n+        let expected_resp = ~\"pong\";\n+\n+        let server_result_po = core::comm::Port::<~str>();\n+        let server_result_ch = core::comm::Chan(&server_result_po);\n+\n+        let cont_po = core::comm::Port::<()>();\n+        let cont_ch = core::comm::Chan(&cont_po);\n+        // server\n+        do task::spawn_sched(task::ManualThreads(1u)) {\n+            let actual_req = do comm::listen |server_ch| {\n+                run_tcp_test_server(\n+                    server_ip,\n+                    server_port,\n+                    expected_resp,\n+                    server_ch,\n+                    cont_ch,\n+                    hl_loop)\n+            };\n+            server_result_ch.send(actual_req);\n+        };\n+        core::comm::recv(cont_po);\n+        // client\n+        log(debug, ~\"server started, firing up client..\");\n+        do core::comm::listen |client_ch| {\n+            let server_ip_addr = ip::v4::parse_addr(server_ip);\n+            let iotask = uv::global_loop::get();\n+            let connect_result = connect(move server_ip_addr, server_port,\n+                                         iotask);\n+\n+            let sock = result::unwrap(move connect_result);\n+\n+            // This is what we are actually testing!\n+            assert net::ip::format_addr(&sock.getpeername()) == ~\"127.0.0.1\";\n+            assert net::ip::get_port(&sock.getpeername()) == 8889;\n+\n+            // Fulfill the protocol the test server expects\n+            let resp_bytes = str::to_bytes(~\"ping\");\n+            tcp_write_single(&sock, resp_bytes);\n+            let read_result = sock.read(0u);\n+            client_ch.send(str::from_bytes(read_result.get()));\n+        };\n+    }\n     fn impl_gl_tcp_ipv4_client_error_connection_refused() {\n         let hl_loop = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";"}]}