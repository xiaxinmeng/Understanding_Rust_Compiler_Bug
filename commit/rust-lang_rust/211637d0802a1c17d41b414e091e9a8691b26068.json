{"sha": "211637d0802a1c17d41b414e091e9a8691b26068", "node_id": "C_kwDOAAsO6NoAKDIxMTYzN2QwODAyYTFjMTdkNDFiNDE0ZTA5MWU5YTg2OTFiMjYwNjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-29T21:38:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-29T21:38:36Z"}, "message": "Auto merge of #99730 - lcnr:bound-vars-anon, r=jackh726\n\nanonymize all bound vars, not just regions\n\nfixes #98702\n\nr? types", "tree": {"sha": "8574ecbe226d6b5582b4d5aa5ac5d5c6fa2c1e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8574ecbe226d6b5582b4d5aa5ac5d5c6fa2c1e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211637d0802a1c17d41b414e091e9a8691b26068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211637d0802a1c17d41b414e091e9a8691b26068", "html_url": "https://github.com/rust-lang/rust/commit/211637d0802a1c17d41b414e091e9a8691b26068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211637d0802a1c17d41b414e091e9a8691b26068/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3924dac7bb29bc8eb348059c901e8f912399c857", "url": "https://api.github.com/repos/rust-lang/rust/commits/3924dac7bb29bc8eb348059c901e8f912399c857", "html_url": "https://github.com/rust-lang/rust/commit/3924dac7bb29bc8eb348059c901e8f912399c857"}, {"sha": "1436fa9e90a180d0985cef9fe79b556106c967ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1436fa9e90a180d0985cef9fe79b556106c967ae", "html_url": "https://github.com/rust-lang/rust/commit/1436fa9e90a180d0985cef9fe79b556106c967ae"}], "stats": {"total": 398, "additions": 260, "deletions": 138}, "files": [{"sha": "34b6113427d489a0b1ab9d588e6184086363c69b", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -7,7 +7,7 @@\n //! [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html\n \n use crate::infer::canonical::{Canonical, CanonicalVarValues};\n-use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::ty::fold::{FnMutDelegate, TypeFoldable};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -71,21 +71,21 @@ where\n     if var_values.var_values.is_empty() {\n         value\n     } else {\n-        let fld_r = |br: ty::BoundRegion| match var_values.var_values[br.var].unpack() {\n-            GenericArgKind::Lifetime(l) => l,\n-            r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n+        let delegate = FnMutDelegate {\n+            regions: |br: ty::BoundRegion| match var_values.var_values[br.var].unpack() {\n+                GenericArgKind::Lifetime(l) => l,\n+                r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n+            },\n+            types: |bound_ty: ty::BoundTy| match var_values.var_values[bound_ty.var].unpack() {\n+                GenericArgKind::Type(ty) => ty,\n+                r => bug!(\"{:?} is a type but value is {:?}\", bound_ty, r),\n+            },\n+            consts: |bound_ct: ty::BoundVar, _| match var_values.var_values[bound_ct].unpack() {\n+                GenericArgKind::Const(ct) => ct,\n+                c => bug!(\"{:?} is a const but value is {:?}\", bound_ct, c),\n+            },\n         };\n \n-        let fld_t = |bound_ty: ty::BoundTy| match var_values.var_values[bound_ty.var].unpack() {\n-            GenericArgKind::Type(ty) => ty,\n-            r => bug!(\"{:?} is a type but value is {:?}\", bound_ty, r),\n-        };\n-\n-        let fld_c = |bound_ct: ty::BoundVar, _| match var_values.var_values[bound_ct].unpack() {\n-            GenericArgKind::Const(ct) => ct,\n-            c => bug!(\"{:?} is a const but value is {:?}\", bound_ct, c),\n-        };\n-\n-        tcx.replace_escaping_bound_vars_uncached(value, fld_r, fld_t, fld_c)\n+        tcx.replace_escaping_bound_vars_uncached(value, delegate)\n     }\n }"}, {"sha": "ed257c144e0aacb3b1d9cf2d7da7cd2f907d7123", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -4,6 +4,7 @@\n use super::combine::CombineFields;\n use super::{HigherRankedType, InferCtxt};\n use crate::infer::CombinedSnapshot;\n+use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Binder, TypeFoldable};\n \n@@ -79,31 +80,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let next_universe = self.create_next_universe();\n \n-        let fld_r = |br: ty::BoundRegion| {\n-            self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n-                universe: next_universe,\n-                name: br.kind,\n-            }))\n-        };\n-\n-        let fld_t = |bound_ty: ty::BoundTy| {\n-            self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n-                universe: next_universe,\n-                name: bound_ty.var,\n-            }))\n-        };\n-\n-        let fld_c = |bound_var: ty::BoundVar, ty| {\n-            self.tcx.mk_const(ty::ConstS {\n-                kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+        let delegate = FnMutDelegate {\n+            regions: |br: ty::BoundRegion| {\n+                self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n+                    universe: next_universe,\n+                    name: br.kind,\n+                }))\n+            },\n+            types: |bound_ty: ty::BoundTy| {\n+                self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n-                    name: ty::BoundConst { var: bound_var, ty },\n-                }),\n-                ty,\n-            })\n+                    name: bound_ty.var,\n+                }))\n+            },\n+            consts: |bound_var: ty::BoundVar, ty| {\n+                self.tcx.mk_const(ty::ConstS {\n+                    kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                        universe: next_universe,\n+                        name: ty::BoundConst { var: bound_var, ty },\n+                    }),\n+                    ty,\n+                })\n+            },\n         };\n \n-        let result = self.tcx.replace_bound_vars_uncached(binder, fld_r, fld_t, fld_c);\n+        let result = self.tcx.replace_bound_vars_uncached(binder, delegate);\n         debug!(?next_universe, ?result);\n         result\n     }"}, {"sha": "21045a0585c625eafe4621637eb38bfbbd8e505f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -23,6 +23,7 @@ use rustc_middle::mir::interpret::{ErrorHandled, EvalToValTreeResult};\n use rustc_middle::traits::select;\n use rustc_middle::ty::abstract_const::{AbstractConst, FailureKind};\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n+use rustc_middle::ty::fold::BoundVarReplacerDelegate;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n@@ -1564,32 +1565,56 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return inner;\n         }\n \n-        let mut region_map = FxHashMap::default();\n-        let fld_r = |br: ty::BoundRegion| {\n-            *region_map\n-                .entry(br)\n-                .or_insert_with(|| self.next_region_var(LateBoundRegion(span, br.kind, lbrct)))\n-        };\n+        struct ToFreshVars<'a, 'tcx> {\n+            infcx: &'a InferCtxt<'a, 'tcx>,\n+            span: Span,\n+            lbrct: LateBoundRegionConversionTime,\n+            map: FxHashMap<ty::BoundVar, ty::GenericArg<'tcx>>,\n+        }\n \n-        let mut ty_map = FxHashMap::default();\n-        let fld_t = |bt: ty::BoundTy| {\n-            *ty_map.entry(bt).or_insert_with(|| {\n-                self.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::MiscVariable,\n-                    span,\n-                })\n-            })\n-        };\n-        let mut ct_map = FxHashMap::default();\n-        let fld_c = |bc: ty::BoundVar, ty| {\n-            *ct_map.entry(bc).or_insert_with(|| {\n-                self.next_const_var(\n-                    ty,\n-                    ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },\n-                )\n-            })\n-        };\n-        self.tcx.replace_bound_vars_uncached(value, fld_r, fld_t, fld_c)\n+        impl<'tcx> BoundVarReplacerDelegate<'tcx> for ToFreshVars<'_, 'tcx> {\n+            fn replace_region(&mut self, br: ty::BoundRegion) -> ty::Region<'tcx> {\n+                self.map\n+                    .entry(br.var)\n+                    .or_insert_with(|| {\n+                        self.infcx\n+                            .next_region_var(LateBoundRegion(self.span, br.kind, self.lbrct))\n+                            .into()\n+                    })\n+                    .expect_region()\n+            }\n+            fn replace_ty(&mut self, bt: ty::BoundTy) -> Ty<'tcx> {\n+                self.map\n+                    .entry(bt.var)\n+                    .or_insert_with(|| {\n+                        self.infcx\n+                            .next_ty_var(TypeVariableOrigin {\n+                                kind: TypeVariableOriginKind::MiscVariable,\n+                                span: self.span,\n+                            })\n+                            .into()\n+                    })\n+                    .expect_ty()\n+            }\n+            fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n+                self.map\n+                    .entry(bv)\n+                    .or_insert_with(|| {\n+                        self.infcx\n+                            .next_const_var(\n+                                ty,\n+                                ConstVariableOrigin {\n+                                    kind: ConstVariableOriginKind::MiscVariable,\n+                                    span: self.span,\n+                                },\n+                            )\n+                            .into()\n+                    })\n+                    .expect_const()\n+            }\n+        }\n+        let delegate = ToFreshVars { infcx: self, span, lbrct, map: Default::default() };\n+        self.tcx.replace_bound_vars_uncached(value, delegate)\n     }\n \n     /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method."}, {"sha": "f5a1edf6d813f239a3a65ac1240ccc702fb04cd1", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -11,7 +11,7 @@ pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n-    let new = tcx.anonymize_late_bound_regions(pred.kind());\n+    let new = tcx.anonymize_bound_vars(pred.kind());\n     tcx.reuse_or_mk_predicate(pred, new)\n }\n \n@@ -334,7 +334,7 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n \n     std::iter::from_fn(move || {\n         while let Some(trait_ref) = stack.pop() {\n-            let anon_trait_ref = tcx.anonymize_late_bound_regions(trait_ref);\n+            let anon_trait_ref = tcx.anonymize_bound_vars(trait_ref);\n             if visited.insert(anon_trait_ref) {\n                 let super_predicates = tcx.super_predicates_that_define_assoc_type((\n                     trait_ref.def_id(),"}, {"sha": "3226950e79e13258de17a136488a871510ab3634", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let u = self.tcx.anonymize_late_bound_regions(t);\n+        let u = self.tcx.anonymize_bound_vars(t);\n         u.super_fold_with(self)\n     }\n "}, {"sha": "5e96e278b9cad5f76008b2878a8bdfbe9c89b9af", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 122, "deletions": 71, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -44,7 +44,8 @@\n //! - u.fold_with(folder)\n //! ```\n use crate::mir;\n-use crate::ty::{self, Binder, Ty, TyCtxt, TypeVisitable};\n+use crate::ty::{self, Binder, BoundTy, Ty, TyCtxt, TypeVisitable};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n \n use std::collections::BTreeMap;\n@@ -370,31 +371,55 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Bound vars replacer\n \n+pub trait BoundVarReplacerDelegate<'tcx> {\n+    fn replace_region(&mut self, br: ty::BoundRegion) -> ty::Region<'tcx>;\n+    fn replace_ty(&mut self, bt: ty::BoundTy) -> Ty<'tcx>;\n+    fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx>;\n+}\n+\n+pub struct FnMutDelegate<R, T, C> {\n+    pub regions: R,\n+    pub types: T,\n+    pub consts: C,\n+}\n+impl<'tcx, R, T, C> BoundVarReplacerDelegate<'tcx> for FnMutDelegate<R, T, C>\n+where\n+    R: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n+    T: FnMut(ty::BoundTy) -> Ty<'tcx>,\n+    C: FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx>,\n+{\n+    fn replace_region(&mut self, br: ty::BoundRegion) -> ty::Region<'tcx> {\n+        (self.regions)(br)\n+    }\n+    fn replace_ty(&mut self, bt: ty::BoundTy) -> Ty<'tcx> {\n+        (self.types)(bt)\n+    }\n+    fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n+        (self.consts)(bv, ty)\n+    }\n+}\n+\n /// Replaces the escaping bound vars (late bound regions or bound types) in a type.\n-struct BoundVarReplacer<'a, 'tcx> {\n+struct BoundVarReplacer<'tcx, D> {\n     tcx: TyCtxt<'tcx>,\n \n     /// As with `RegionFolder`, represents the index of a binder *just outside*\n     /// the ones we have visited.\n     current_index: ty::DebruijnIndex,\n \n-    fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n-    fld_t: &'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a),\n-    fld_c: &'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx> + 'a),\n+    delegate: D,\n }\n \n-impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {\n-    fn new(\n-        tcx: TyCtxt<'tcx>,\n-        fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n-        fld_t: &'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a),\n-        fld_c: &'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx> + 'a),\n-    ) -> Self {\n-        BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }\n+impl<'tcx, D: BoundVarReplacerDelegate<'tcx>> BoundVarReplacer<'tcx, D> {\n+    fn new(tcx: TyCtxt<'tcx>, delegate: D) -> Self {\n+        BoundVarReplacer { tcx, current_index: ty::INNERMOST, delegate }\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n+impl<'tcx, D> TypeFolder<'tcx> for BoundVarReplacer<'tcx, D>\n+where\n+    D: BoundVarReplacerDelegate<'tcx>,\n+{\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -412,7 +437,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {\n-                let ty = (self.fld_t)(bound_ty);\n+                let ty = self.delegate.replace_ty(bound_ty);\n                 ty::fold::shift_vars(self.tcx, ty, self.current_index.as_u32())\n             }\n             _ if t.has_vars_bound_at_or_above(self.current_index) => t.super_fold_with(self),\n@@ -423,14 +448,14 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n             ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {\n-                let region = (self.fld_r)(br);\n+                let region = self.delegate.replace_region(br);\n                 if let ty::ReLateBound(debruijn1, br) = *region {\n                     // If the callback returns a late-bound region,\n                     // that region should always use the INNERMOST\n                     // debruijn index. Then we adjust it to the\n                     // correct depth.\n                     assert_eq!(debruijn1, ty::INNERMOST);\n-                    self.tcx.mk_region(ty::ReLateBound(debruijn, br))\n+                    self.tcx.reuse_or_mk_region(region, ty::ReLateBound(debruijn, br))\n                 } else {\n                     region\n                 }\n@@ -442,7 +467,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         match ct.kind() {\n             ty::ConstKind::Bound(debruijn, bound_const) if debruijn == self.current_index => {\n-                let ct = (self.fld_c)(bound_const, ct.ty());\n+                let ct = self.delegate.replace_const(bound_const, ct.ty());\n                 ty::fold::shift_vars(self.tcx, ct, self.current_index.as_u32())\n             }\n             _ => ct.super_fold_with(self),\n@@ -486,64 +511,51 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_late_bound_regions_uncached<T, F>(\n         self,\n         value: Binder<'tcx, T>,\n-        mut fld_r: F,\n+        replace_regions: F,\n     ) -> T\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n         T: TypeFoldable<'tcx>,\n     {\n-        let mut fld_t = |b| bug!(\"unexpected bound ty in binder: {b:?}\");\n-        let mut fld_c = |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\");\n         let value = value.skip_binder();\n         if !value.has_escaping_bound_vars() {\n             value\n         } else {\n-            let mut replacer = BoundVarReplacer::new(self, &mut fld_r, &mut fld_t, &mut fld_c);\n+            let delegate = FnMutDelegate {\n+                regions: replace_regions,\n+                types: |b| bug!(\"unexpected bound ty in binder: {b:?}\"),\n+                consts: |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\"),\n+            };\n+            let mut replacer = BoundVarReplacer::new(self, delegate);\n             value.fold_with(&mut replacer)\n         }\n     }\n \n     /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping\n     /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`\n     /// closure replaces escaping bound consts.\n-    pub fn replace_escaping_bound_vars_uncached<T, F, G, H>(\n+    pub fn replace_escaping_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n         self,\n         value: T,\n-        mut fld_r: F,\n-        mut fld_t: G,\n-        mut fld_c: H,\n-    ) -> T\n-    where\n-        F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-        G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n-        H: FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx>,\n-        T: TypeFoldable<'tcx>,\n-    {\n+        delegate: impl BoundVarReplacerDelegate<'tcx>,\n+    ) -> T {\n         if !value.has_escaping_bound_vars() {\n             value\n         } else {\n-            let mut replacer = BoundVarReplacer::new(self, &mut fld_r, &mut fld_t, &mut fld_c);\n+            let mut replacer = BoundVarReplacer::new(self, delegate);\n             value.fold_with(&mut replacer)\n         }\n     }\n \n     /// Replaces all types or regions bound by the given `Binder`. The `fld_r`\n     /// closure replaces bound regions, the `fld_t` closure replaces bound\n     /// types, and `fld_c` replaces bound constants.\n-    pub fn replace_bound_vars_uncached<T, F, G, H>(\n+    pub fn replace_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n         self,\n         value: Binder<'tcx, T>,\n-        fld_r: F,\n-        fld_t: G,\n-        fld_c: H,\n-    ) -> T\n-    where\n-        F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-        G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n-        H: FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx>,\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.replace_escaping_bound_vars_uncached(value.skip_binder(), fld_r, fld_t, fld_c)\n+        delegate: impl BoundVarReplacerDelegate<'tcx>,\n+    ) -> T {\n+        self.replace_escaping_bound_vars_uncached(value.skip_binder(), delegate)\n     }\n \n     /// Replaces any late-bound regions bound in `value` with\n@@ -568,34 +580,28 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n+        let shift_bv = |bv: ty::BoundVar| ty::BoundVar::from_usize(bv.as_usize() + bound_vars);\n         self.replace_escaping_bound_vars_uncached(\n             value,\n-            |r| {\n-                self.mk_region(ty::ReLateBound(\n-                    ty::INNERMOST,\n-                    ty::BoundRegion {\n-                        var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),\n-                        kind: r.kind,\n-                    },\n-                ))\n-            },\n-            |t| {\n-                self.mk_ty(ty::Bound(\n-                    ty::INNERMOST,\n-                    ty::BoundTy {\n-                        var: ty::BoundVar::from_usize(t.var.as_usize() + bound_vars),\n-                        kind: t.kind,\n-                    },\n-                ))\n-            },\n-            |c, ty| {\n-                self.mk_const(ty::ConstS {\n-                    kind: ty::ConstKind::Bound(\n+            FnMutDelegate {\n+                regions: |r: ty::BoundRegion| {\n+                    self.mk_region(ty::ReLateBound(\n                         ty::INNERMOST,\n-                        ty::BoundVar::from_usize(c.as_usize() + bound_vars),\n-                    ),\n-                    ty,\n-                })\n+                        ty::BoundRegion { var: shift_bv(r.var), kind: r.kind },\n+                    ))\n+                },\n+                types: |t: ty::BoundTy| {\n+                    self.mk_ty(ty::Bound(\n+                        ty::INNERMOST,\n+                        ty::BoundTy { var: shift_bv(t.var), kind: t.kind },\n+                    ))\n+                },\n+                consts: |c, ty: Ty<'tcx>| {\n+                    self.mk_const(ty::ConstS {\n+                        kind: ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)),\n+                        ty,\n+                    })\n+                },\n             },\n         )\n     }\n@@ -638,6 +644,51 @@ impl<'tcx> TyCtxt<'tcx> {\n         );\n         Binder::bind_with_vars(inner, bound_vars)\n     }\n+\n+    /// Anonymize all bound variables in `value`, this is mostly used to improve caching.\n+    pub fn anonymize_bound_vars<T>(self, value: Binder<'tcx, T>) -> Binder<'tcx, T>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        struct Anonymize<'a, 'tcx> {\n+            tcx: TyCtxt<'tcx>,\n+            map: &'a mut FxIndexMap<ty::BoundVar, ty::BoundVariableKind>,\n+        }\n+        impl<'tcx> BoundVarReplacerDelegate<'tcx> for Anonymize<'_, 'tcx> {\n+            fn replace_region(&mut self, br: ty::BoundRegion) -> ty::Region<'tcx> {\n+                let entry = self.map.entry(br.var);\n+                let index = entry.index();\n+                let var = ty::BoundVar::from_usize(index);\n+                let kind = entry\n+                    .or_insert_with(|| ty::BoundVariableKind::Region(ty::BrAnon(index as u32)))\n+                    .expect_region();\n+                let br = ty::BoundRegion { var, kind };\n+                self.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br))\n+            }\n+            fn replace_ty(&mut self, bt: ty::BoundTy) -> Ty<'tcx> {\n+                let entry = self.map.entry(bt.var);\n+                let index = entry.index();\n+                let var = ty::BoundVar::from_usize(index);\n+                let kind = entry\n+                    .or_insert_with(|| ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon))\n+                    .expect_ty();\n+                self.tcx.mk_ty(ty::Bound(ty::INNERMOST, BoundTy { var, kind }))\n+            }\n+            fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n+                let entry = self.map.entry(bv);\n+                let index = entry.index();\n+                let var = ty::BoundVar::from_usize(index);\n+                let () = entry.or_insert_with(|| ty::BoundVariableKind::Const).expect_const();\n+                self.tcx.mk_const(ty::ConstS { ty, kind: ty::ConstKind::Bound(ty::INNERMOST, var) })\n+            }\n+        }\n+\n+        let mut map = Default::default();\n+        let delegate = Anonymize { tcx: self, map: &mut map };\n+        let inner = self.replace_escaping_bound_vars_uncached(value.skip_binder(), delegate);\n+        let bound_vars = self.mk_bound_variable_kinds(map.into_values());\n+        Binder::bind_with_vars(inner, bound_vars)\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "a152ba843b46c50b485f557c2d7dfab952d6516d", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -976,6 +976,29 @@ pub enum BoundVariableKind {\n     Const,\n }\n \n+impl BoundVariableKind {\n+    pub fn expect_region(self) -> BoundRegionKind {\n+        match self {\n+            BoundVariableKind::Region(lt) => lt,\n+            _ => bug!(\"expected a region, but found another kind\"),\n+        }\n+    }\n+\n+    pub fn expect_ty(self) -> BoundTyKind {\n+        match self {\n+            BoundVariableKind::Ty(ty) => ty,\n+            _ => bug!(\"expected a type, but found another kind\"),\n+        }\n+    }\n+\n+    pub fn expect_const(self) {\n+        match self {\n+            BoundVariableKind::Const => (),\n+            _ => bug!(\"expected a const, but found another kind\"),\n+        }\n+    }\n+}\n+\n /// Binder is a binder for higher-ranked lifetimes or types. It is part of the\n /// compiler's representation for things like `for<'a> Fn(&'a isize)`\n /// (which would be represented by the type `PolyTraitRef =="}, {"sha": "6262aa180757786a22ed16d2a677f1f577198878", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -164,6 +164,14 @@ impl<'tcx> GenericArg<'tcx> {\n         }\n     }\n \n+    /// Unpack the `GenericArg` as a region when it is known certainly to be a region.\n+    pub fn expect_region(self) -> ty::Region<'tcx> {\n+        match self.unpack() {\n+            GenericArgKind::Lifetime(lt) => lt,\n+            _ => bug!(\"expected a region, but found another kind\"),\n+        }\n+    }\n+\n     /// Unpack the `GenericArg` as a type when it is known certainly to be a type.\n     /// This is true in cases where `Substs` is used in places where the kinds are known\n     /// to be limited (e.g. in tuples, where the only parameters are type parameters)."}, {"sha": "321064ec0fc9130eec9db2fb95b97ecbf5d298d2", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -318,8 +318,8 @@ impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n \n         // Anonymizing the LBRs is necessary to solve (Issue #59497).\n         // After we do so, it should be totally fine to skip the binders.\n-        let anon_a = self.tcx.anonymize_late_bound_regions(a);\n-        let anon_b = self.tcx.anonymize_late_bound_regions(b);\n+        let anon_a = self.tcx.anonymize_bound_vars(a);\n+        let anon_b = self.tcx.anonymize_bound_vars(b);\n         self.relate(anon_a.skip_binder(), anon_b.skip_binder())?;\n \n         Ok(a)"}, {"sha": "1ec9c69989a7f4ac358211e5d7e3abe4b385a321", "filename": "src/test/ui/generic-associated-types/anonymize-bound-vars.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/211637d0802a1c17d41b414e091e9a8691b26068/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211637d0802a1c17d41b414e091e9a8691b26068/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs?ref=211637d0802a1c17d41b414e091e9a8691b26068", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+//\n+// regression test for #98702\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Assoc<T>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<T> = [T; 2*2];\n+}\n+\n+fn main() {}"}]}