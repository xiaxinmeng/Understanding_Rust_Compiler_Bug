{"sha": "2e0cc8b62a760b0a333ed500df27625fcbc9cecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMGNjOGI2MmE3NjBiMGEzMzNlZDUwMGRmMjc2MjVmY2JjOWNlY2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-27T11:26:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-27T11:26:17Z"}, "message": "Merge #3344\n\n3344: Split loop into orthogonal phases r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "32bad598576fb4e8d7be50c4fba152ae0c3da96f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32bad598576fb4e8d7be50c4fba152ae0c3da96f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e0cc8b62a760b0a333ed500df27625fcbc9cecd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeV6dZCRBK7hj4Ov3rIwAAdHIIACBeUpHmegGRqryN0a09jKcq\n5jbIFw/w+MgHN9/+NlVt9e1ko+LoYAiiwRWGE0ALQ9tQyJVB2jx9OMb/Yg5pv3Uj\nsVGrwspdznDcLWRnSUUBajNd9Bb2IrAvXedSoFotOCPt8xgecy2WYziru1od8sLt\nKthd65oWl3ZDeJIKCAR8buCXRyVjNKewLFjlQKrgU1YogLbJbiIBApVEXdlxNfYA\nJLnTgFHAyjS9xkzyecSui2b9r6vJIP5nvs2tnB2w6PqVfcLZvMH/TMAUXwYCmYH/\ndNFaM14NoqdSjBDQ/5d7jxhhGHIxsrppUwJX086OvaZqwIN1IM0LHdTXcMgKviU=\n=4DZ5\n-----END PGP SIGNATURE-----\n", "payload": "tree 32bad598576fb4e8d7be50c4fba152ae0c3da96f\nparent 405e3d20a902cff0db74b9d69a812a201301cd2d\nparent a2dbdbba00376305a0cbcd98cd36cd53d5139d96\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582802777 +0000\ncommitter GitHub <noreply@github.com> 1582802777 +0000\n\nMerge #3344\n\n3344: Split loop into orthogonal phases r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0cc8b62a760b0a333ed500df27625fcbc9cecd", "html_url": "https://github.com/rust-lang/rust/commit/2e0cc8b62a760b0a333ed500df27625fcbc9cecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e0cc8b62a760b0a333ed500df27625fcbc9cecd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405e3d20a902cff0db74b9d69a812a201301cd2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/405e3d20a902cff0db74b9d69a812a201301cd2d", "html_url": "https://github.com/rust-lang/rust/commit/405e3d20a902cff0db74b9d69a812a201301cd2d"}, {"sha": "a2dbdbba00376305a0cbcd98cd36cd53d5139d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dbdbba00376305a0cbcd98cd36cd53d5139d96", "html_url": "https://github.com/rust-lang/rust/commit/a2dbdbba00376305a0cbcd98cd36cd53d5139d96"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "e8ca7d6526d381fa7be284e9b1be1a4dd9733606", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 64, "deletions": 65, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/2e0cc8b62a760b0a333ed500df27625fcbc9cecd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0cc8b62a760b0a333ed500df27625fcbc9cecd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=2e0cc8b62a760b0a333ed500df27625fcbc9cecd", "patch": "@@ -46,93 +46,92 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n pub(crate) fn highlight(\n     db: &RootDatabase,\n     file_id: FileId,\n-    range: Option<TextRange>,\n+    range_to_highlight: Option<TextRange>,\n ) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n     let sema = Semantics::new(db);\n-    let root = sema.parse(file_id).syntax().clone();\n+\n+    // Determine the root based on the given range.\n+    let (root, range_to_highlight) = {\n+        let source_file = sema.parse(file_id);\n+        match range_to_highlight {\n+            Some(range) => {\n+                let node = match source_file.syntax().covering_element(range) {\n+                    NodeOrToken::Node(it) => it,\n+                    NodeOrToken::Token(it) => it.parent(),\n+                };\n+                (node, range)\n+            }\n+            None => (source_file.syntax().clone(), source_file.syntax().text_range()),\n+        }\n+    };\n \n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n     let mut res = Vec::new();\n \n-    let mut in_macro_call = None;\n+    let mut current_macro_call: Option<ast::MacroCall> = None;\n \n-    // Determine the root based on the given range.\n-    let (root, highlight_range) = if let Some(range) = range {\n-        let root = match root.covering_element(range) {\n-            NodeOrToken::Node(node) => node,\n-            NodeOrToken::Token(token) => token.parent(),\n+    for event in root.preorder_with_tokens() {\n+        let event_range = match &event {\n+            WalkEvent::Enter(it) => it.text_range(),\n+            WalkEvent::Leave(it) => it.text_range(),\n         };\n-        (root, range)\n-    } else {\n-        (root.clone(), root.text_range())\n-    };\n \n-    for event in root.preorder_with_tokens() {\n-        match event {\n-            WalkEvent::Enter(node) => {\n-                if node.text_range().intersection(&highlight_range).is_none() {\n-                    continue;\n-                }\n+        if event_range.intersection(&range_to_highlight).is_none() {\n+            continue;\n+        }\n \n-                match node.kind() {\n-                    MACRO_CALL => {\n-                        in_macro_call = Some(node.clone());\n-                        if let Some(range) = highlight_macro(node) {\n-                            res.push(HighlightedRange {\n-                                range,\n-                                highlight: HighlightTag::Macro.into(),\n-                                binding_hash: None,\n-                            });\n-                        }\n-                    }\n-                    _ if in_macro_call.is_some() => {\n-                        if let Some(token) = node.as_token() {\n-                            if let Some((highlight, binding_hash)) = highlight_token_tree(\n-                                &sema,\n-                                &mut bindings_shadow_count,\n-                                token.clone(),\n-                            ) {\n-                                res.push(HighlightedRange {\n-                                    range: node.text_range(),\n-                                    highlight,\n-                                    binding_hash,\n-                                });\n-                            }\n-                        }\n-                    }\n-                    _ => {\n-                        if let Some((highlight, binding_hash)) =\n-                            highlight_node(&sema, &mut bindings_shadow_count, node.clone())\n-                        {\n-                            res.push(HighlightedRange {\n-                                range: node.text_range(),\n-                                highlight,\n-                                binding_hash,\n-                            });\n-                        }\n-                    }\n+        match event.clone().map(|it| it.into_node().and_then(ast::MacroCall::cast)) {\n+            WalkEvent::Enter(Some(mc)) => {\n+                current_macro_call = Some(mc.clone());\n+                if let Some(range) = highlight_macro(&mc) {\n+                    res.push(HighlightedRange {\n+                        range,\n+                        highlight: HighlightTag::Macro.into(),\n+                        binding_hash: None,\n+                    });\n                 }\n+                continue;\n             }\n-            WalkEvent::Leave(node) => {\n-                if node.text_range().intersection(&highlight_range).is_none() {\n-                    continue;\n-                }\n+            WalkEvent::Leave(Some(mc)) => {\n+                assert!(current_macro_call == Some(mc));\n+                current_macro_call = None;\n+                continue;\n+            }\n+            _ => (),\n+        }\n \n-                if let Some(m) = in_macro_call.as_ref() {\n-                    if *m == node {\n-                        in_macro_call = None;\n-                    }\n+        let node = match event {\n+            WalkEvent::Enter(it) => it,\n+            WalkEvent::Leave(_) => continue,\n+        };\n+\n+        if current_macro_call.is_some() {\n+            if let Some(token) = node.into_token() {\n+                if let Some((highlight, binding_hash)) =\n+                    highlight_token_tree(&sema, &mut bindings_shadow_count, token.clone())\n+                {\n+                    res.push(HighlightedRange {\n+                        range: token.text_range(),\n+                        highlight,\n+                        binding_hash,\n+                    });\n                 }\n             }\n+            continue;\n+        }\n+\n+        if let Some((highlight, binding_hash)) =\n+            highlight_node(&sema, &mut bindings_shadow_count, node.clone())\n+        {\n+            res.push(HighlightedRange { range: node.text_range(), highlight, binding_hash });\n         }\n     }\n \n     res\n }\n \n-fn highlight_macro(node: SyntaxElement) -> Option<TextRange> {\n-    let macro_call = ast::MacroCall::cast(node.as_node()?.clone())?;\n+fn highlight_macro(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     let path = macro_call.path()?;\n     let name_ref = path.segment()?.name_ref()?;\n "}]}