{"sha": "9712fa405944cb8d5416556ac4b1f26365a10658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MTJmYTQwNTk0NGNiOGQ1NDE2NTU2YWM0YjFmMjYzNjVhMTA2NTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-03-06T02:53:26Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-03-06T02:53:26Z"}, "message": "Fix #69191", "tree": {"sha": "2391c0b3e5ed03be361a1dcb635a5c2d41f19195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2391c0b3e5ed03be361a1dcb635a5c2d41f19195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9712fa405944cb8d5416556ac4b1f26365a10658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9712fa405944cb8d5416556ac4b1f26365a10658", "html_url": "https://github.com/rust-lang/rust/commit/9712fa405944cb8d5416556ac4b1f26365a10658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9712fa405944cb8d5416556ac4b1f26365a10658/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79f5f064725535f7520e693e69c65c3d0f2730f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79f5f064725535f7520e693e69c65c3d0f2730f", "html_url": "https://github.com/rust-lang/rust/commit/c79f5f064725535f7520e693e69c65c3d0f2730f"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "33161dfa52c7b285cacbd91aaee303b5b2a7976f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9712fa405944cb8d5416556ac4b1f26365a10658/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712fa405944cb8d5416556ac4b1f26365a10658/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=9712fa405944cb8d5416556ac4b1f26365a10658", "patch": "@@ -410,6 +410,12 @@ where\n                 stride * field\n             }\n             layout::FieldPlacement::Union(count) => {\n+                // This is a narrow bug-fix for rust-lang/rust#69191: if we are\n+                // trying to access absent field of uninhabited variant, then\n+                // signal UB (but don't ICE the compiler).\n+                if field >= count as u64 && base.layout.abi == layout::Abi::Uninhabited {\n+                    throw_ub!(Unreachable);\n+                }\n                 assert!(\n                     field < count as u64,\n                     \"Tried to access field {} of union {:#?} with {} fields\","}, {"sha": "e22ddb0f5ae0c690d84cf2044bea5b2eefa1fd49", "filename": "src/test/ui/consts/issue-69191-ice-on-uninhabited-enum-field.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9712fa405944cb8d5416556ac4b1f26365a10658/src%2Ftest%2Fui%2Fconsts%2Fissue-69191-ice-on-uninhabited-enum-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712fa405944cb8d5416556ac4b1f26365a10658/src%2Ftest%2Fui%2Fconsts%2Fissue-69191-ice-on-uninhabited-enum-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69191-ice-on-uninhabited-enum-field.rs?ref=9712fa405944cb8d5416556ac4b1f26365a10658", "patch": "@@ -0,0 +1,31 @@\n+// build-pass\n+//\n+// (this is deliberately *not* check-pass; I have confirmed that the bug in\n+// question does not replicate when one uses `cargo check` alone.)\n+\n+pub enum Void {}\n+\n+enum UninhabitedUnivariant { _Variant(Void), }\n+\n+#[repr(C)]\n+enum UninhabitedUnivariantC { _Variant(Void), }\n+\n+#[repr(i32)]\n+enum UninhabitedUnivariant32 { _Variant(Void), }\n+\n+fn main() {\n+    let _seed: UninhabitedUnivariant = None.unwrap();\n+    match _seed {\n+        UninhabitedUnivariant::_Variant(_x) => {}\n+    }\n+\n+    let _seed: UninhabitedUnivariantC = None.unwrap();\n+    match _seed {\n+        UninhabitedUnivariantC::_Variant(_x) => {}\n+    }\n+\n+    let _seed: UninhabitedUnivariant32 = None.unwrap();\n+    match _seed {\n+        UninhabitedUnivariant32::_Variant(_x) => {}\n+    }\n+}"}]}