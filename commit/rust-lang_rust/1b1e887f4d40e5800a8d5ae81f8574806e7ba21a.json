{"sha": "1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMWU4ODdmNGQ0MGU1ODAwYThkNWFlODFmODU3NDgwNmU3YmEyMWE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-05T07:48:40Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-02-05T07:48:40Z"}, "message": "Override try_[r]fold for RangeInclusive\n\nBecause the last item needs special handling, it seems that LLVM has trouble canonicalizing the loops in external iteration.  With the override, it becomes obvious that the start==end case exits the loop (as opposed to the one *after* that exiting the loop in external iteration).", "tree": {"sha": "3ecc366222ea48517be24d4949ead79116800698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ecc366222ea48517be24d4949ead79116800698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "html_url": "https://github.com/rust-lang/rust/commit/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8f2674ea47f4f3cf5d90d0428bf8b8025d7f8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f2674ea47f4f3cf5d90d0428bf8b8025d7f8d8", "html_url": "https://github.com/rust-lang/rust/commit/b8f2674ea47f4f3cf5d90d0428bf8b8025d7f8d8"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "3b034efcce14ccbcc972b01090d564a32a630517", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "patch": "@@ -10,7 +10,7 @@\n \n use convert::TryFrom;\n use mem;\n-use ops::{self, Add, Sub};\n+use ops::{self, Add, Sub, Try};\n use usize;\n \n use super::{FusedIterator, TrustedLen};\n@@ -397,6 +397,28 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     fn max(mut self) -> Option<A> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    {\n+        let mut accum = init;\n+        if self.start <= self.end {\n+            loop {\n+                let (x, done) =\n+                    if self.start < self.end {\n+                        let n = self.start.add_one();\n+                        (mem::replace(&mut self.start, n), false)\n+                    } else {\n+                        self.end.replace_zero();\n+                        (self.start.replace_one(), true)\n+                    };\n+                accum = f(accum, x)?;\n+                if done { break }\n+            }\n+        }\n+        Try::from_ok(accum)\n+    }\n }\n \n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n@@ -418,6 +440,28 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n             _ => None,\n         }\n     }\n+\n+    #[inline]\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n+        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    {\n+        let mut accum = init;\n+        if self.start <= self.end {\n+            loop {\n+                let (x, done) =\n+                    if self.start < self.end {\n+                        let n = self.end.sub_one();\n+                        (mem::replace(&mut self.end, n), false)\n+                    } else {\n+                        self.start.replace_one();\n+                        (self.end.replace_zero(), true)\n+                    };\n+                accum = f(accum, x)?;\n+                if done { break }\n+            }\n+        }\n+        Try::from_ok(accum)\n+    }\n }\n \n #[unstable(feature = \"fused\", issue = \"35602\")]"}, {"sha": "e33a0b6224e54b1022a60a2a28a9fc75b320eb4d", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1e887f4d40e5800a8d5ae81f8574806e7ba21a/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=1b1e887f4d40e5800a8d5ae81f8574806e7ba21a", "patch": "@@ -1397,6 +1397,26 @@ fn test_range_inclusive_min() {\n     assert_eq!(r.min(), None);\n }\n \n+#[test]\n+fn test_range_inclusive_folds() {\n+    assert_eq!((1..=10).sum::<i32>(), 55);\n+    assert_eq!((1..=10).rev().sum::<i32>(), 55);\n+\n+    let mut it = 40..=50;\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it, 44..=50);\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it, 44..=47);\n+\n+    let mut it = 10..=20;\n+    assert_eq!(it.try_fold(0, |a,b| Some(a+b)), Some(165));\n+    assert_eq!(it, 1..=0);\n+\n+    let mut it = 10..=20;\n+    assert_eq!(it.try_rfold(0, |a,b| Some(a+b)), Some(165));\n+    assert_eq!(it, 1..=0);\n+}\n+\n #[test]\n fn test_repeat() {\n     let mut it = repeat(42);"}]}