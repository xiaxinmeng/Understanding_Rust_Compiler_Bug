{"sha": "2d53b6b82412a18734478c0086090dc3a2b5c5cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNTNiNmI4MjQxMmExODczNDQ3OGMwMDg2MDkwZGMzYTJiNWM1Y2M=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-08T10:29:36Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-03-08T10:29:36Z"}, "message": "Move `test_no_deps_ignores_path_deps_in_workspaces()` out of `dogfood_subprojects()`", "tree": {"sha": "54387a80f5c45c8c1d7894ecff5e65673f558de2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54387a80f5c45c8c1d7894ecff5e65673f558de2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d53b6b82412a18734478c0086090dc3a2b5c5cc", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYEX8kBUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLipFwD/SPev3+gn+j4FWlRp8eWxY+wrMLUk\naX7cF13iXv2jE54A/1UMO2dm6szyAoJEEG/g47ORnk9aiLLvIHk+i8EJlb8C\n=2bTE\n-----END PGP SIGNATURE-----", "payload": "tree 54387a80f5c45c8c1d7894ecff5e65673f558de2\nparent 2d07c33c86c2576326c97bf6641621bdd90e934a\nauthor hyd-dev <yd-huang@outlook.com> 1615199376 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1615199376 +0800\n\nMove `test_no_deps_ignores_path_deps_in_workspaces()` out of `dogfood_subprojects()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d53b6b82412a18734478c0086090dc3a2b5c5cc", "html_url": "https://github.com/rust-lang/rust/commit/2d53b6b82412a18734478c0086090dc3a2b5c5cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d53b6b82412a18734478c0086090dc3a2b5c5cc/comments", "author": null, "committer": null, "parents": [{"sha": "2d07c33c86c2576326c97bf6641621bdd90e934a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d07c33c86c2576326c97bf6641621bdd90e934a", "html_url": "https://github.com/rust-lang/rust/commit/2d07c33c86c2576326c97bf6641621bdd90e934a"}], "stats": {"total": 158, "additions": 79, "deletions": 79}, "files": [{"sha": "296eeb4aabd99282c91bdab20da84d17521e7ab8", "filename": "tests/dogfood.rs", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/2d53b6b82412a18734478c0086090dc3a2b5c5cc/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d53b6b82412a18734478c0086090dc3a2b5c5cc/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=2d53b6b82412a18734478c0086090dc3a2b5c5cc", "patch": "@@ -46,38 +46,81 @@ fn dogfood_clippy() {\n     assert!(output.status.success());\n }\n \n-#[test]\n-fn dogfood_subprojects() {\n-    fn test_no_deps_ignores_path_deps_in_workspaces() {\n-        if cargo::is_rustc_test_suite() {\n-            return;\n-        }\n-        let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-        let target_dir = root.join(\"target\").join(\"dogfood\");\n-        let cwd = root.join(\"clippy_workspace_tests\");\n-\n-        // Make sure we start with a clean state\n-        Command::new(\"cargo\")\n+fn test_no_deps_ignores_path_deps_in_workspaces() {\n+    if cargo::is_rustc_test_suite() {\n+        return;\n+    }\n+    let root = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let target_dir = root.join(\"target\").join(\"dogfood\");\n+    let cwd = root.join(\"clippy_workspace_tests\");\n+\n+    // Make sure we start with a clean state\n+    Command::new(\"cargo\")\n+        .current_dir(&cwd)\n+        .env(\"CARGO_TARGET_DIR\", &target_dir)\n+        .arg(\"clean\")\n+        .args(&[\"-p\", \"subcrate\"])\n+        .args(&[\"-p\", \"path_dep\"])\n+        .output()\n+        .unwrap();\n+\n+    // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n+    // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n+    let output = Command::new(&*CLIPPY_PATH)\n+        .current_dir(&cwd)\n+        .env(\"CLIPPY_DOGFOOD\", \"1\")\n+        .env(\"CARGO_INCREMENTAL\", \"0\")\n+        .arg(\"clippy\")\n+        .args(&[\"-p\", \"subcrate\"])\n+        .arg(\"--\")\n+        .arg(\"--no-deps\")\n+        .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+        .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n+        .output()\n+        .unwrap();\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+    assert!(output.status.success());\n+\n+    let lint_path_dep = || {\n+        // Test that without the `--no-deps` argument, `path_dep` is linted.\n+        let output = Command::new(&*CLIPPY_PATH)\n             .current_dir(&cwd)\n-            .env(\"CARGO_TARGET_DIR\", &target_dir)\n-            .arg(\"clean\")\n+            .env(\"CLIPPY_DOGFOOD\", \"1\")\n+            .env(\"CARGO_INCREMENTAL\", \"0\")\n+            .arg(\"clippy\")\n             .args(&[\"-p\", \"subcrate\"])\n-            .args(&[\"-p\", \"path_dep\"])\n+            .arg(\"--\")\n+            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n+            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n             .output()\n             .unwrap();\n+        println!(\"status: {}\", output.status);\n+        println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+        println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+        assert!(!output.status.success());\n+        assert!(\n+            String::from_utf8(output.stderr)\n+                .unwrap()\n+                .contains(\"error: empty `loop {}` wastes CPU cycles\")\n+        );\n+    };\n+\n+    // Make sure Cargo is aware of the removal of `--no-deps`.\n+    lint_path_dep();\n \n-        // `path_dep` is a path dependency of `subcrate` that would trigger a denied lint.\n-        // Make sure that with the `--no-deps` argument Clippy does not run on `path_dep`.\n+    let successful_build = || {\n         let output = Command::new(&*CLIPPY_PATH)\n             .current_dir(&cwd)\n             .env(\"CLIPPY_DOGFOOD\", \"1\")\n             .env(\"CARGO_INCREMENTAL\", \"0\")\n             .arg(\"clippy\")\n             .args(&[\"-p\", \"subcrate\"])\n             .arg(\"--\")\n-            .arg(\"--no-deps\")\n             .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n             .output()\n             .unwrap();\n         println!(\"status: {}\", output.status);\n@@ -86,67 +129,24 @@ fn dogfood_subprojects() {\n \n         assert!(output.status.success());\n \n-        let lint_path_dep = || {\n-            // Test that without the `--no-deps` argument, `path_dep` is linted.\n-            let output = Command::new(&*CLIPPY_PATH)\n-                .current_dir(&cwd)\n-                .env(\"CLIPPY_DOGFOOD\", \"1\")\n-                .env(\"CARGO_INCREMENTAL\", \"0\")\n-                .arg(\"clippy\")\n-                .args(&[\"-p\", \"subcrate\"])\n-                .arg(\"--\")\n-                .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-                .args(&[\"--cfg\", r#\"feature=\"primary_package_test\"\"#])\n-                .output()\n-                .unwrap();\n-            println!(\"status: {}\", output.status);\n-            println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-            println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n-\n-            assert!(!output.status.success());\n-            assert!(\n-                String::from_utf8(output.stderr)\n-                    .unwrap()\n-                    .contains(\"error: empty `loop {}` wastes CPU cycles\")\n-            );\n-        };\n-\n-        // Make sure Cargo is aware of the removal of `--no-deps`.\n-        lint_path_dep();\n-\n-        let successful_build = || {\n-            let output = Command::new(&*CLIPPY_PATH)\n-                .current_dir(&cwd)\n-                .env(\"CLIPPY_DOGFOOD\", \"1\")\n-                .env(\"CARGO_INCREMENTAL\", \"0\")\n-                .arg(\"clippy\")\n-                .args(&[\"-p\", \"subcrate\"])\n-                .arg(\"--\")\n-                .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-                .output()\n-                .unwrap();\n-            println!(\"status: {}\", output.status);\n-            println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n-            println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n-\n-            assert!(output.status.success());\n-\n-            output\n-        };\n-\n-        // Trigger a sucessful build, so Cargo would like to cache the build result.\n-        successful_build();\n-\n-        // Make sure there's no spurious rebuild when nothing changes.\n-        let stderr = String::from_utf8(successful_build().stderr).unwrap();\n-        assert!(!stderr.contains(\"Compiling\"));\n-        assert!(!stderr.contains(\"Checking\"));\n-        assert!(stderr.contains(\"Finished\"));\n-\n-        // Make sure Cargo is aware of the new `--cfg` flag.\n-        lint_path_dep();\n-    }\n+        output\n+    };\n+\n+    // Trigger a sucessful build, so Cargo would like to cache the build result.\n+    successful_build();\n+\n+    // Make sure there's no spurious rebuild when nothing changes.\n+    let stderr = String::from_utf8(successful_build().stderr).unwrap();\n+    assert!(!stderr.contains(\"Compiling\"));\n+    assert!(!stderr.contains(\"Checking\"));\n+    assert!(stderr.contains(\"Finished\"));\n \n+    // Make sure Cargo is aware of the new `--cfg` flag.\n+    lint_path_dep();\n+}\n+\n+#[test]\n+fn dogfood_subprojects() {\n     // run clippy on remaining subprojects and fail the test if lint warnings are reported\n     if cargo::is_rustc_test_suite() {\n         return;"}]}