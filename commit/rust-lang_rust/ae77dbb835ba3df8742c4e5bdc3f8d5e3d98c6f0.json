{"sha": "ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNzdkYmI4MzViYTNkZjg3NDJjNGU1YmRjM2Y4ZDVlM2Q5OGM2ZjA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-20T00:34:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-22T16:52:53Z"}, "message": "Use Names in HIR visitors and folders", "tree": {"sha": "a8ff409593160b86887f400ffc48105dde053ed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8ff409593160b86887f400ffc48105dde053ed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "html_url": "https://github.com/rust-lang/rust/commit/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885d2242305e5523c3cc9b459180ef5ccc19cf85", "url": "https://api.github.com/repos/rust-lang/rust/commits/885d2242305e5523c3cc9b459180ef5ccc19cf85", "html_url": "https://github.com/rust-lang/rust/commit/885d2242305e5523c3cc9b459180ef5ccc19cf85"}], "stats": {"total": 132, "additions": 67, "deletions": 65}, "files": [{"sha": "4cd2246f140658b5da65f0c945cbc14a7b025d5b", "filename": "src/librustc/front/map/blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -189,13 +189,13 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n-            FnKind::ItemFn(p.ident, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n+            FnKind::ItemFn(p.ident.name, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n         };\n         let closure = |_: ClosureParts| {\n             FnKind::Closure\n         };\n-        let method = |_, ident, sig: &'a ast::MethodSig, vis, _, _| {\n-            FnKind::Method(ident, sig, vis)\n+        let method = |_, ident: Ident, sig: &'a ast::MethodSig, vis, _, _| {\n+            FnKind::Method(ident.name, sig, vis)\n         };\n         self.handle(item, method, closure)\n     }"}, {"sha": "ae9c3ce7e0b4689988d6a2d499431d7270561847", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -663,12 +663,12 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n \n     fn visit_struct_def(&mut self,\n                         s: &hir::StructDef,\n-                        ident: ast::Ident,\n+                        name: ast::Name,\n                         g: &hir::Generics,\n                         id: ast::NodeId) {\n-        run_lints!(self, check_struct_def, late_passes, s, ident, g, id);\n+        run_lints!(self, check_struct_def, late_passes, s, name, g, id);\n         hir_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, late_passes, s, ident, g, id);\n+        run_lints!(self, check_struct_def_post, late_passes, s, name, g, id);\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n@@ -691,8 +691,8 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n         hir_visit::walk_ty(self, t);\n     }\n \n-    fn visit_ident(&mut self, sp: Span, id: ast::Ident) {\n-        run_lints!(self, check_ident, late_passes, sp, id);\n+    fn visit_name(&mut self, sp: Span, name: ast::Name) {\n+        run_lints!(self, check_name, late_passes, sp, name);\n     }\n \n     fn visit_mod(&mut self, m: &hir::Mod, s: Span, n: ast::NodeId) {"}, {"sha": "b30ac7033b7bc1d55f2cc7ec79d5a8beb4d0c2d7", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -130,7 +130,7 @@ pub trait LintPass {\n // FIXME: eliminate the duplication with `Visitor`. But this also\n // contains a few lint-specific methods with no equivalent in `Visitor`.\n pub trait LateLintPass: LintPass {\n-    fn check_ident(&mut self, _: &LateContext, _: Span, _: ast::Ident) { }\n+    fn check_name(&mut self, _: &LateContext, _: Span, _: ast::Name) { }\n     fn check_crate(&mut self, _: &LateContext, _: &hir::Crate) { }\n     fn check_mod(&mut self, _: &LateContext, _: &hir::Mod, _: Span, _: ast::NodeId) { }\n     fn check_foreign_item(&mut self, _: &LateContext, _: &hir::ForeignItem) { }\n@@ -150,9 +150,9 @@ pub trait LateLintPass: LintPass {\n     fn check_trait_item(&mut self, _: &LateContext, _: &hir::TraitItem) { }\n     fn check_impl_item(&mut self, _: &LateContext, _: &hir::ImplItem) { }\n     fn check_struct_def(&mut self, _: &LateContext,\n-        _: &hir::StructDef, _: ast::Ident, _: &hir::Generics, _: ast::NodeId) { }\n+        _: &hir::StructDef, _: ast::Name, _: &hir::Generics, _: ast::NodeId) { }\n     fn check_struct_def_post(&mut self, _: &LateContext,\n-        _: &hir::StructDef, _: ast::Ident, _: &hir::Generics, _: ast::NodeId) { }\n+        _: &hir::StructDef, _: ast::Name, _: &hir::Generics, _: ast::NodeId) { }\n     fn check_struct_field(&mut self, _: &LateContext, _: &hir::StructField) { }\n     fn check_variant(&mut self, _: &LateContext, _: &hir::Variant, _: &hir::Generics) { }\n     fn check_variant_post(&mut self, _: &LateContext, _: &hir::Variant, _: &hir::Generics) { }"}, {"sha": "dc95e86f80f67f3d7367266c0f97012eb26612b1", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n \n-    fn visit_struct_def(&mut self, def: &hir::StructDef, _: ast::Ident,\n+    fn visit_struct_def(&mut self, def: &hir::StructDef, _: ast::Name,\n                         _: &hir::Generics, _: ast::NodeId) {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;"}, {"sha": "93c7c928b3c912c2b1b6542ae4e563ebdb36c231", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -131,7 +131,7 @@ mod svh_visitor {\n     pub use self::SawExprComponent::*;\n     pub use self::SawStmtComponent::*;\n     use self::SawAbiComponent::*;\n-    use syntax::ast::{self, NodeId, Ident};\n+    use syntax::ast::{self, Name, NodeId};\n     use syntax::codemap::Span;\n     use syntax::parse::token;\n     use rustc_front::visit;\n@@ -302,9 +302,9 @@ mod svh_visitor {\n     }\n \n     impl<'a, 'v> Visitor<'v> for StrictVersionHashVisitor<'a> {\n-        fn visit_struct_def(&mut self, s: &StructDef, ident: Ident,\n+        fn visit_struct_def(&mut self, s: &StructDef, name: Name,\n                             g: &Generics, _: NodeId) {\n-            SawStructDef(ident.name.as_str()).hash(self.st);\n+            SawStructDef(name.as_str()).hash(self.st);\n             visit::walk_generics(self, g);\n             visit::walk_struct_def(self, s)\n         }\n@@ -341,8 +341,8 @@ mod svh_visitor {\n         // (If you edit a method such that it deviates from the\n         // pattern, please move that method up above this comment.)\n \n-        fn visit_ident(&mut self, _: Span, ident: Ident) {\n-            SawIdent(ident.name.as_str()).hash(self.st);\n+        fn visit_name(&mut self, _: Span, name: Name) {\n+            SawIdent(name.as_str()).hash(self.st);\n         }\n \n         fn visit_lifetime_ref(&mut self, l: &Lifetime) {"}, {"sha": "cd97baf91208ef7dd04f953ba38847338366ddfd", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -12,7 +12,7 @@\n //! and returns a piece of the same type.\n \n use hir::*;\n-use syntax::ast::{Ident, NodeId, DUMMY_NODE_ID, Attribute, Attribute_, MetaItem};\n+use syntax::ast::{Ident, Name, NodeId, DUMMY_NODE_ID, Attribute, Attribute_, MetaItem};\n use syntax::ast::{MetaWord, MetaList, MetaNameValue};\n use hir;\n use syntax::codemap::{respan, Span, Spanned};\n@@ -147,8 +147,8 @@ pub trait Folder : Sized {\n         noop_fold_variant(v, self)\n     }\n \n-    fn fold_ident(&mut self, i: Ident) -> Ident {\n-        noop_fold_ident(i, self)\n+    fn fold_name(&mut self, n: Name) -> Name {\n+        noop_fold_name(n, self)\n     }\n \n     fn fold_usize(&mut self, i: usize) -> usize {\n@@ -284,6 +284,10 @@ pub trait Folder : Sized {\n     }\n }\n \n+fn fold_ident<T: Folder>(f: &mut T, i: Ident) -> Ident {\n+    Ident { name: f.fold_name(i.name), ctxt: i.ctxt }\n+}\n+\n pub fn noop_fold_meta_items<T: Folder>(meta_items: Vec<P<MetaItem>>, fld: &mut T)\n                                        -> Vec<P<MetaItem>> {\n     meta_items.move_map(|x| fld.fold_meta_item(x))\n@@ -435,8 +439,8 @@ pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n     })\n }\n \n-pub fn noop_fold_ident<T: Folder>(i: Ident, _: &mut T) -> Ident {\n-    i\n+pub fn noop_fold_name<T: Folder>(n: Name, _: &mut T) -> Name {\n+    n\n }\n \n pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize {\n@@ -447,7 +451,7 @@ pub fn noop_fold_path<T: Folder>(Path {global, segments, span}: Path, fld: &mut\n     Path {\n         global: global,\n         segments: segments.move_map(|PathSegment {identifier, parameters}| PathSegment {\n-            identifier: fld.fold_ident(identifier),\n+            identifier: fold_ident(fld, identifier),\n             parameters: fld.fold_path_parameters(parameters),\n         }),\n         span: fld.new_span(span)\n@@ -719,7 +723,7 @@ pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructF\n \n pub fn noop_fold_field<T: Folder>(Field {ident, expr, span}: Field, folder: &mut T) -> Field {\n     Field {\n-        ident: respan(ident.span, folder.fold_ident(ident.node)),\n+        ident: respan(ident.span, fold_ident(folder, ident.node)),\n         expr: folder.fold_expr(expr),\n         span: folder.new_span(span)\n     }\n@@ -835,7 +839,7 @@ pub fn noop_fold_trait_item<T: Folder>(i: P<TraitItem>, folder: &mut T)\n                                        -> SmallVector<P<TraitItem>> {\n     SmallVector::one(i.map(|TraitItem {id, ident, attrs, node, span}| TraitItem {\n         id: folder.new_id(id),\n-        ident: folder.fold_ident(ident),\n+        ident: fold_ident(folder, ident),\n         attrs: fold_attrs(attrs, folder),\n         node: match node {\n             ConstTraitItem(ty, default) => {\n@@ -859,7 +863,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T)\n                                       -> SmallVector<P<ImplItem>> {\n     SmallVector::one(i.map(|ImplItem {id, ident, attrs, node, vis, span}| ImplItem {\n         id: folder.new_id(id),\n-        ident: folder.fold_ident(ident),\n+        ident: fold_ident(folder, ident),\n         attrs: fold_attrs(attrs, folder),\n         vis: vis,\n         node: match node  {\n@@ -943,7 +947,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n \n     Item {\n         id: id,\n-        ident: folder.fold_ident(ident),\n+        ident: fold_ident(folder, ident),\n         attrs: fold_attrs(attrs, folder),\n         node: node,\n         vis: vis,\n@@ -954,7 +958,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) -> P<ForeignItem> {\n     ni.map(|ForeignItem {id, ident, attrs, node, span, vis}| ForeignItem {\n         id: folder.new_id(id),\n-        ident: folder.fold_ident(ident),\n+        ident: fold_ident(folder, ident),\n         attrs: fold_attrs(attrs, folder),\n         node: match node {\n             ForeignItemFn(fdec, generics) => {\n@@ -988,7 +992,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             PatIdent(binding_mode, pth1, sub) => {\n                 PatIdent(binding_mode,\n                         Spanned{span: folder.new_span(pth1.span),\n-                                node: folder.fold_ident(pth1.node)},\n+                                node: fold_ident(folder, pth1.node)},\n                         sub.map(|x| folder.fold_pat(x)))\n             }\n             PatLit(e) => PatLit(folder.fold_expr(e)),\n@@ -1048,7 +1052,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprMethodCall(i, tps, args) => {\n                 ExprMethodCall(\n-                    respan(folder.new_span(i.span), folder.fold_ident(i.node)),\n+                    respan(folder.new_span(i.span), fold_ident(folder, i.node)),\n                     tps.move_map(|x| folder.fold_ty(x)),\n                     args.move_map(|x| folder.fold_expr(x)))\n             }\n@@ -1073,11 +1077,11 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             ExprWhile(cond, body, opt_ident) => {\n                 ExprWhile(folder.fold_expr(cond),\n                           folder.fold_block(body),\n-                          opt_ident.map(|i| folder.fold_ident(i)))\n+                          opt_ident.map(|i| fold_ident(folder, i)))\n             }\n             ExprLoop(body, opt_ident) => {\n                 ExprLoop(folder.fold_block(body),\n-                        opt_ident.map(|i| folder.fold_ident(i)))\n+                        opt_ident.map(|i| fold_ident(folder, i)))\n             }\n             ExprMatch(expr, arms, source) => {\n                 ExprMatch(folder.fold_expr(expr),\n@@ -1101,7 +1105,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             ExprField(el, ident) => {\n                 ExprField(folder.fold_expr(el),\n                           respan(folder.new_span(ident.span),\n-                                 folder.fold_ident(ident.node)))\n+                                 fold_ident(folder, ident.node)))\n             }\n             ExprTupField(el, ident) => {\n                 ExprTupField(folder.fold_expr(el),\n@@ -1126,11 +1130,11 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|label|\n                 respan(folder.new_span(label.span),\n-                       folder.fold_ident(label.node)))\n+                       fold_ident(folder, label.node)))\n             ),\n             ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|label|\n                 respan(folder.new_span(label.span),\n-                       folder.fold_ident(label.node)))\n+                       fold_ident(folder, label.node)))\n             ),\n             ExprRet(e) => ExprRet(e.map(|x| folder.fold_expr(x))),\n             ExprInlineAsm(InlineAsm {"}, {"sha": "00abb14d40ff83f9bcd2b454098881aa2af9b1be", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -12,7 +12,7 @@ use hir;\n use hir::*;\n use visit::{self, Visitor, FnKind};\n use syntax::ast_util;\n-use syntax::ast::{Ident, NodeId, DUMMY_NODE_ID};\n+use syntax::ast::{Ident, Name, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use syntax::owned_slice::OwnedSlice;\n@@ -286,7 +286,7 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n \n     fn visit_struct_def(&mut self,\n                         struct_def: &StructDef,\n-                        _: Ident,\n+                        _: Name,\n                         _: &hir::Generics,\n                         id: NodeId) {\n         self.operation.visit_id(id);"}, {"sha": "356fb52599e3763b4da0bd5e5898b9f411702413", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -24,7 +24,7 @@\n //! those that are created by the expansion of a macro.\n \n use syntax::abi::Abi;\n-use syntax::ast::{Ident, NodeId, CRATE_NODE_ID, Name, Attribute};\n+use syntax::ast::{NodeId, CRATE_NODE_ID, Name, Attribute};\n use hir::*;\n use hir;\n use syntax::codemap::Span;\n@@ -34,10 +34,10 @@ use syntax::owned_slice::OwnedSlice;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, Visibility),\n+    ItemFn(Name, &'a Generics, Unsafety, Constness, Abi, Visibility),\n \n     /// fn foo(&self)\n-    Method(Ident, &'a MethodSig, Option<Visibility>),\n+    Method(Name, &'a MethodSig, Option<Visibility>),\n \n     /// |x, y| ...\n     /// proc(x, y) ...\n@@ -57,9 +57,6 @@ pub trait Visitor<'v> : Sized {\n     fn visit_name(&mut self, _span: Span, _name: Name) {\n         // Nothing to do.\n     }\n-    fn visit_ident(&mut self, span: Span, ident: Ident) {\n-        self.visit_name(span, ident.name);\n-    }\n     fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n     fn visit_foreign_item(&mut self, i: &'v ForeignItem) { walk_foreign_item(self, i) }\n     fn visit_item(&mut self, i: &'v Item) { walk_item(self, i) }\n@@ -85,7 +82,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_struct_def(&mut self, s: &'v StructDef, _: Ident, _: &'v Generics, _: NodeId) {\n+    fn visit_struct_def(&mut self, s: &'v StructDef, _: Name, _: &'v Generics, _: NodeId) {\n         walk_struct_def(self, s)\n     }\n     fn visit_struct_field(&mut self, s: &'v StructField) { walk_struct_field(self, s) }\n@@ -201,12 +198,13 @@ pub fn walk_trait_ref<'v,V>(visitor: &mut V,\n }\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n-    visitor.visit_ident(item.span, item.ident);\n+    visitor.visit_name(item.span, item.ident.name);\n     match item.node {\n         ItemExternCrate(..) => {}\n         ItemUse(ref vp) => {\n             match vp.node {\n-                ViewPathSimple(_ident, ref path) => {\n+                ViewPathSimple(name, ref path) => {\n+                    visitor.visit_name(vp.span, name);\n                     visitor.visit_path(path, item.id);\n                 }\n                 ViewPathGlob(ref path) => {\n@@ -229,7 +227,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_expr(&**expr);\n         }\n         ItemFn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n-            visitor.visit_fn(FnKind::ItemFn(item.ident, generics, unsafety,\n+            visitor.visit_fn(FnKind::ItemFn(item.ident.name, generics, unsafety,\n                                             constness, abi, item.vis),\n                              &**declaration,\n                              &**body,\n@@ -273,7 +271,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n             visitor.visit_struct_def(&**struct_definition,\n-                                     item.ident,\n+                                     item.ident.name,\n                                      generics,\n                                      item.id)\n         }\n@@ -301,7 +299,7 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics) {\n-    visitor.visit_ident(variant.span, variant.node.name);\n+    visitor.visit_name(variant.span, variant.node.name.name);\n \n     match variant.node.kind {\n         TupleVariantKind(ref variant_arguments) => {\n@@ -311,7 +309,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n         }\n         StructVariantKind(ref struct_definition) => {\n             visitor.visit_struct_def(&**struct_definition,\n-                                     variant.node.name,\n+                                     variant.node.name.name,\n                                      generics,\n                                      variant.node.id)\n         }\n@@ -411,7 +409,7 @@ pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V, prefix: &'v Path\n pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              path_span: Span,\n                                              segment: &'v PathSegment) {\n-    visitor.visit_ident(path_span, segment.identifier);\n+    visitor.visit_name(path_span, segment.identifier.name);\n     visitor.visit_path_parameters(path_span, &segment.parameters);\n }\n \n@@ -443,7 +441,7 @@ pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                    type_binding: &'v TypeBinding) {\n-    visitor.visit_ident(type_binding.span, type_binding.ident);\n+    visitor.visit_name(type_binding.span, type_binding.ident.name);\n     visitor.visit_ty(&*type_binding.ty);\n }\n \n@@ -477,7 +475,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_pat(&**subpattern)\n         }\n         PatIdent(_, ref pth1, ref optional_subpattern) => {\n-            visitor.visit_ident(pth1.span, pth1.node);\n+            visitor.visit_name(pth1.span, pth1.node.name);\n             match *optional_subpattern {\n                 None => {}\n                 Some(ref subpattern) => visitor.visit_pat(&**subpattern),\n@@ -505,7 +503,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n \n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              foreign_item: &'v ForeignItem) {\n-    visitor.visit_ident(foreign_item.span, foreign_item.ident);\n+    visitor.visit_name(foreign_item.span, foreign_item.ident.name);\n \n     match foreign_item.node {\n         ForeignItemFn(ref function_declaration, ref generics) => {\n@@ -541,7 +539,7 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     for param in generics.ty_params.iter() {\n-        visitor.visit_ident(param.span, param.ident);\n+        visitor.visit_name(param.span, param.ident.name);\n         walk_ty_param_bounds_helper(visitor, &param.bounds);\n         walk_ty_opt(visitor, &param.default);\n     }\n@@ -613,7 +611,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n }\n \n pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) {\n-    visitor.visit_ident(trait_item.span, trait_item.ident);\n+    visitor.visit_name(trait_item.span, trait_item.ident.name);\n     for attr in &trait_item.attrs {\n         visitor.visit_attribute(attr);\n     }\n@@ -630,7 +628,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         MethodTraitItem(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FnKind::Method(trait_item.ident, sig, None), &sig.decl,\n+            visitor.visit_fn(FnKind::Method(trait_item.ident.name, sig, None), &sig.decl,\n                              body, trait_item.span, trait_item.id);\n         }\n         TypeTraitItem(ref bounds, ref default) => {\n@@ -641,7 +639,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n }\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) {\n-    visitor.visit_ident(impl_item.span, impl_item.ident);\n+    visitor.visit_name(impl_item.span, impl_item.ident.name);\n     for attr in &impl_item.attrs {\n         visitor.visit_attribute(attr);\n     }\n@@ -651,8 +649,8 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_expr(expr);\n         }\n         MethodImplItem(ref sig, ref body) => {\n-            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n-                             body, impl_item.span, impl_item.id);\n+            visitor.visit_fn(FnKind::Method(impl_item.ident.name, sig, Some(impl_item.vis)),\n+                             &sig.decl, body, impl_item.span, impl_item.id);\n         }\n         TypeImplItem(ref ty) => {\n             visitor.visit_ty(ty);\n@@ -670,7 +668,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              struct_field: &'v StructField) {\n     if let NamedField(name, _) = struct_field.node.kind {\n-        visitor.visit_ident(struct_field.span, name);\n+        visitor.visit_name(struct_field.span, name.name);\n     }\n \n     visitor.visit_ty(&*struct_field.node.ty);"}, {"sha": "713d7fba7caefdf265ef6de0662372cc48f92414", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -1081,12 +1081,12 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_struct_def(&mut self, _: &LateContext, _: &hir::StructDef,\n-                        _: ast::Ident, _: &hir::Generics, id: ast::NodeId) {\n+                        _: ast::Name, _: &hir::Generics, id: ast::NodeId) {\n         self.struct_def_stack.push(id);\n     }\n \n     fn check_struct_def_post(&mut self, _: &LateContext, _: &hir::StructDef,\n-                             _: ast::Ident, _: &hir::Generics, id: ast::NodeId) {\n+                             _: ast::Name, _: &hir::Generics, id: ast::NodeId) {\n         let popped = self.struct_def_stack.pop().expect(\"empty struct_def_stack\");\n         assert!(popped == id);\n     }"}, {"sha": "58a21340d3b8cd340854ad43bb210e68499a41f2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -128,7 +128,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n         visit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_struct_def(&mut self, s: &hir::StructDef, _: ast::Ident,\n+    fn visit_struct_def(&mut self, s: &hir::StructDef, _: ast::Name,\n                         _: &'v hir::Generics, n: ast::NodeId) {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions."}, {"sha": "0e585386d2e684473e9e1a29fa5ba28c9f40e9eb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ae77dbb835ba3df8742c4e5bdc3f8d5e3d98c6f0", "patch": "@@ -509,7 +509,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n             }\n             hir::StructVariantKind(ref struct_definition) => {\n                 self.visit_struct_def(&**struct_definition,\n-                                      variant.node.name,\n+                                      variant.node.name.name,\n                                       generics,\n                                       variant.node.id);\n             }"}]}