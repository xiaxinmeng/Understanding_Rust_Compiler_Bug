{"sha": "f6b57883e0cd4ba5f1bfd8d4484778c5852ce585", "node_id": "C_kwDOAAsO6NoAKGY2YjU3ODgzZTBjZDRiYTVmMWJmZDhkNDQ4NDc3OGM1ODUyY2U1ODU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-19T23:33:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-19T23:33:08Z"}, "message": "Remove `TokenStream::from_streams`.\n\nBy inlining it into the only non-test call site. The one test call site\nis changed to use `TokenStreamBuilder`.", "tree": {"sha": "7b3ffdacd5bc6cccf74dcda13ecbcef3958919c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b3ffdacd5bc6cccf74dcda13ecbcef3958919c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585", "html_url": "https://github.com/rust-lang/rust/commit/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178b746d0416a6daa18f70423d25392f0c2e03e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/178b746d0416a6daa18f70423d25392f0c2e03e1", "html_url": "https://github.com/rust-lang/rust/commit/178b746d0416a6daa18f70423d25392f0c2e03e1"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "66b9e9c7eaf5209221c76f2c0c5cfbb90a700f9b", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=f6b57883e0cd4ba5f1bfd8d4484778c5852ce585", "patch": "@@ -399,45 +399,6 @@ impl TokenStream {\n         self.0.len()\n     }\n \n-    pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {\n-        match streams.len() {\n-            0 => TokenStream::default(),\n-            1 => streams.pop().unwrap(),\n-            _ => {\n-                // We are going to extend the first stream in `streams` with\n-                // the elements from the subsequent streams. This requires\n-                // using `make_mut()` on the first stream, and in practice this\n-                // doesn't cause cloning 99.9% of the time.\n-                //\n-                // One very common use case is when `streams` has two elements,\n-                // where the first stream has any number of elements within\n-                // (often 1, but sometimes many more) and the second stream has\n-                // a single element within.\n-\n-                // Determine how much the first stream will be extended.\n-                // Needed to avoid quadratic blow up from on-the-fly\n-                // reallocations (#57735).\n-                let num_appends = streams.iter().skip(1).map(|ts| ts.len()).sum();\n-\n-                // Get the first stream. If it's `None`, create an empty\n-                // stream.\n-                let mut iter = streams.drain(..);\n-                let mut first_stream_lrc = iter.next().unwrap().0;\n-\n-                // Append the elements to the first stream, after reserving\n-                // space for them.\n-                let first_vec_mut = Lrc::make_mut(&mut first_stream_lrc);\n-                first_vec_mut.reserve(num_appends);\n-                for stream in iter {\n-                    first_vec_mut.extend(stream.0.iter().cloned());\n-                }\n-\n-                // Create the final `TokenStream`.\n-                TokenStream(first_stream_lrc)\n-            }\n-        }\n-    }\n-\n     pub fn trees(&self) -> CursorRef<'_> {\n         CursorRef::new(self)\n     }\n@@ -605,7 +566,43 @@ impl TokenStreamBuilder {\n     }\n \n     pub fn build(self) -> TokenStream {\n-        TokenStream::from_streams(self.0)\n+        let mut streams = self.0;\n+        match streams.len() {\n+            0 => TokenStream::default(),\n+            1 => streams.pop().unwrap(),\n+            _ => {\n+                // We are going to extend the first stream in `streams` with\n+                // the elements from the subsequent streams. This requires\n+                // using `make_mut()` on the first stream, and in practice this\n+                // doesn't cause cloning 99.9% of the time.\n+                //\n+                // One very common use case is when `streams` has two elements,\n+                // where the first stream has any number of elements within\n+                // (often 1, but sometimes many more) and the second stream has\n+                // a single element within.\n+\n+                // Determine how much the first stream will be extended.\n+                // Needed to avoid quadratic blow up from on-the-fly\n+                // reallocations (#57735).\n+                let num_appends = streams.iter().skip(1).map(|ts| ts.len()).sum();\n+\n+                // Get the first stream. If it's `None`, create an empty\n+                // stream.\n+                let mut iter = streams.drain(..);\n+                let mut first_stream_lrc = iter.next().unwrap().0;\n+\n+                // Append the elements to the first stream, after reserving\n+                // space for them.\n+                let first_vec_mut = Lrc::make_mut(&mut first_stream_lrc);\n+                first_vec_mut.reserve(num_appends);\n+                for stream in iter {\n+                    first_vec_mut.extend(stream.0.iter().cloned());\n+                }\n+\n+                // Create the final `TokenStream`.\n+                TokenStream(first_stream_lrc)\n+            }\n+        }\n     }\n }\n "}, {"sha": "e4a4db204d922e32099c9a0a87f901655935c373", "filename": "compiler/rustc_expand/src/tokenstream/tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b57883e0cd4ba5f1bfd8d4484778c5852ce585/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs?ref=f6b57883e0cd4ba5f1bfd8d4484778c5852ce585", "patch": "@@ -4,7 +4,6 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::{Spacing, TokenStream, TokenStreamBuilder, TokenTree};\n use rustc_span::create_default_session_globals_then;\n use rustc_span::{BytePos, Span, Symbol};\n-use smallvec::smallvec;\n \n fn string_to_ts(string: &str) -> TokenStream {\n     string_to_stream(string.to_owned())\n@@ -24,7 +23,10 @@ fn test_concat() {\n         let test_res = string_to_ts(\"foo::bar::baz\");\n         let test_fst = string_to_ts(\"foo::bar\");\n         let test_snd = string_to_ts(\"::baz\");\n-        let eq_res = TokenStream::from_streams(smallvec![test_fst, test_snd]);\n+        let mut builder = TokenStreamBuilder::new();\n+        builder.push(test_fst);\n+        builder.push(test_snd);\n+        let eq_res = builder.build();\n         assert_eq!(test_res.trees().count(), 5);\n         assert_eq!(eq_res.trees().count(), 5);\n         assert_eq!(test_res.eq_unspanned(&eq_res), true);"}]}