{"sha": "6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZDFhOWZmZjc5ZDkwNmVjYWRjYzllYWIzOTYyZDg0ZDM4YzcwNjE=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-11T06:14:12Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-13T05:51:30Z"}, "message": "Don't try to suggest `ref mut` for implicit `ref`", "tree": {"sha": "e77f59500f70b41fb1954cdffa1c38f15bfcbdaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77f59500f70b41fb1954cdffa1c38f15bfcbdaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "html_url": "https://github.com/rust-lang/rust/commit/6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd1a9fff79d906ecadcc9eab3962d84d38c7061/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d6ae854d0f4c33aa65ad1c151bf7e1700de476", "html_url": "https://github.com/rust-lang/rust/commit/52d6ae854d0f4c33aa65ad1c151bf7e1700de476"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "95601f1337139cd5a2b7456fb543dd69b415088d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6fd1a9fff79d906ecadcc9eab3962d84d38c7061/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd1a9fff79d906ecadcc9eab3962d84d38c7061/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "patch": "@@ -1841,9 +1841,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 elem: ProjectionElem::Deref,\n             }) if self.mir.local_decls[*local].is_user_variable.is_some() => {\n                 let local_decl = &self.mir.local_decls[*local];\n-                let (err_help_span, suggested_code) = match local_decl.is_user_variable {\n+                let suggestion = match local_decl.is_user_variable {\n                     Some(ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf)) => {\n-                        suggest_ampmut_self(local_decl)\n+                        Some(suggest_ampmut_self(local_decl))\n                     },\n \n                     Some(ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n@@ -1854,9 +1854,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         if let Some(x) = try_suggest_ampmut_rhs(\n                             self.tcx, self.mir, *local,\n                         ) {\n-                            x\n+                            Some(x)\n                         } else {\n-                            suggest_ampmut_type(local_decl, opt_ty_info)\n+                            Some(suggest_ampmut_type(local_decl, opt_ty_info))\n                         }\n                     },\n \n@@ -1872,11 +1872,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     None => bug!(),\n                 };\n \n-                err.span_suggestion(\n-                    err_help_span,\n-                    \"consider changing this to be a mutable reference\",\n-                    suggested_code,\n-                );\n+                if let Some((err_help_span, suggested_code)) = suggestion {\n+                    err.span_suggestion(\n+                        err_help_span,\n+                        \"consider changing this to be a mutable reference\",\n+                        suggested_code,\n+                    );\n+                }\n \n                 if let Some(name) = local_decl.name {\n                     err.span_label(\n@@ -1967,13 +1969,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n             tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n             local_decl: &mir::LocalDecl<'tcx>,\n-        ) -> (Span, String) {\n+        ) -> Option<(Span, String)> {\n             let hi_span = local_decl.source_info.span;\n             let hi_src = tcx.sess.codemap().span_to_snippet(hi_span).unwrap();\n-            assert!(hi_src.starts_with(\"ref\"));\n-            assert!(hi_src[\"ref\".len()..].starts_with(Pattern_White_Space));\n-            let suggestion = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n-            (hi_span, suggestion)\n+            if hi_src.starts_with(\"ref\")\n+                && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n+            {\n+                let suggestion = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n+                Some((hi_span, suggestion))\n+            } else {\n+                None\n+            }\n         }\n     }\n "}, {"sha": "a9b2bca434cbac08a5409d17cc837dd4c7c323ae", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd1a9fff79d906ecadcc9eab3962d84d38c7061/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fd1a9fff79d906ecadcc9eab3962d84d38c7061/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.nll.stderr?ref=6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "patch": "@@ -2,19 +2,19 @@ error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:19:5\n    |\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n-   |     ^^^^^^^ cannot assign\n+   |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:23:9\n    |\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot assign\n+   |         ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*x` which is behind a `&` reference\n   --> $DIR/enum.rs:29:9\n    |\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n-   |         ^^^^^^^ cannot assign\n+   |         ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4c6149a8b7b30e8d93031a76839e67808bd07d62", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fd1a9fff79d906ecadcc9eab3962d84d38c7061/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fd1a9fff79d906ecadcc9eab3962d84d38c7061/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.nll.stderr?ref=6fd1a9fff79d906ecadcc9eab3962d84d38c7061", "patch": "@@ -2,19 +2,19 @@ error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:17:13\n    |\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot assign\n+   |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:25:13\n    |\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot assign\n+   |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*n` which is behind a `&` reference\n   --> $DIR/explicit-mut.rs:33:13\n    |\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n-   |             ^^^^^^^ cannot assign\n+   |             ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n \n error: aborting due to 3 previous errors\n "}]}