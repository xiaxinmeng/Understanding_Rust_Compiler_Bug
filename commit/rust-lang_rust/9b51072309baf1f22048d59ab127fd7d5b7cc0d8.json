{"sha": "9b51072309baf1f22048d59ab127fd7d5b7cc0d8", "node_id": "C_kwDOAAsO6NoAKDliNTEwNzIzMDliYWYxZjIyMDQ4ZDU5YWIxMjdmZDdkNWI3Y2MwZDg", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:42:38Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T22:05:42Z"}, "message": "Remove a Clean impl for a tuple (4)", "tree": {"sha": "50b20c4c87af96c6f6a640c47876531eb2ad50a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b20c4c87af96c6f6a640c47876531eb2ad50a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b51072309baf1f22048d59ab127fd7d5b7cc0d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b51072309baf1f22048d59ab127fd7d5b7cc0d8", "html_url": "https://github.com/rust-lang/rust/commit/9b51072309baf1f22048d59ab127fd7d5b7cc0d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b51072309baf1f22048d59ab127fd7d5b7cc0d8/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ed012000e6b97878abe6ad41c7842be23590c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ed012000e6b97878abe6ad41c7842be23590c3", "html_url": "https://github.com/rust-lang/rust/commit/f9ed012000e6b97878abe6ad41c7842be23590c3"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "efc0e1945a13a66692b5ab8a118f03df81f4a5f7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b51072309baf1f22048d59ab127fd7d5b7cc0d8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b51072309baf1f22048d59ab127fd7d5b7cc0d8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b51072309baf1f22048d59ab127fd7d5b7cc0d8", "patch": "@@ -730,7 +730,7 @@ fn clean_fn_or_proc_macro(\n             ProcMacroItem(ProcMacro { kind, helpers })\n         }\n         None => {\n-            let mut func = (sig, generics, body_id).clean(cx);\n+            let mut func = clean_function(cx, sig, generics, body_id);\n             let def_id = item.def_id.to_def_id();\n             func.header.constness =\n                 if cx.tcx.is_const_fn(def_id) && is_unstable_const_fn(cx.tcx, def_id).is_none() {\n@@ -774,17 +774,20 @@ fn clean_fn_decl_legacy_const_generics(func: &mut Function, attrs: &[ast::Attrib\n     }\n }\n \n-impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::BodyId) {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Function {\n-        let (generics, decl) = enter_impl_trait(cx, |cx| {\n-            // NOTE: generics must be cleaned before args\n-            let generics = self.1.clean(cx);\n-            let args = (self.0.decl.inputs, self.2).clean(cx);\n-            let decl = clean_fn_decl_with_args(cx, self.0.decl, args);\n-            (generics, decl)\n-        });\n-        Function { decl, generics, header: self.0.header }\n-    }\n+fn clean_function(\n+    cx: &mut DocContext<'_>,\n+    sig: &hir::FnSig<'_>,\n+    generics: &hir::Generics<'_>,\n+    body_id: hir::BodyId,\n+) -> Function {\n+    let (generics, decl) = enter_impl_trait(cx, |cx| {\n+        // NOTE: generics must be cleaned before args\n+        let generics = generics.clean(cx);\n+        let args = (sig.decl.inputs, body_id).clean(cx);\n+        let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n+        (generics, decl)\n+    });\n+    Function { decl, generics, header: sig.header }\n }\n \n impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n@@ -901,7 +904,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx.tcx, e)))\n                 }\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                    let mut m = (sig, &self.generics, body).clean(cx);\n+                    let mut m = clean_function(cx, sig, &self.generics, body);\n                     if m.header.constness == hir::Constness::Const\n                         && is_unstable_const_fn(cx.tcx, local_did).is_some()\n                     {\n@@ -948,7 +951,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     AssocConstItem(ty.clean(cx), Some(print_const_expr(cx.tcx, expr)))\n                 }\n                 hir::ImplItemKind::Fn(ref sig, body) => {\n-                    let mut m = (sig, &self.generics, body).clean(cx);\n+                    let mut m = clean_function(cx, sig, &self.generics, body);\n                     if m.header.constness == hir::Constness::Const\n                         && is_unstable_const_fn(cx.tcx, local_did).is_some()\n                     {"}]}