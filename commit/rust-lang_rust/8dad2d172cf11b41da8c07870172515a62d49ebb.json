{"sha": "8dad2d172cf11b41da8c07870172515a62d49ebb", "node_id": "C_kwDOAAsO6NoAKDhkYWQyZDE3MmNmMTFiNDFkYThjMDc4NzAxNzI1MTVhNjJkNDllYmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-13T19:02:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-13T19:02:00Z"}, "message": "Rollup merge of #94816 - WaffleLapkin:atomic_get_mut_slice, r=Mark-Simulacrum\n\nAdd `Atomic*::get_mut_slice`\n\nThis PR adds the inverse of `Atomic*::from_mut_slice` introduced in #94384 with the following API:\n```rust\n// core::sync::atomic\n\nimpl Atomic* {\n    fn get_mut_slice(this: &mut [Self]) -> &mut [*];\n}\n```\n\ncc `@cuviper`\n\n-----\n\nFor now I've used the same tracking issue as `Atomic*::from_mut_slice`, should I open a new one?", "tree": {"sha": "50e866526b06d1e4d867ef7e4bdb348d5edbc769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e866526b06d1e4d867ef7e4bdb348d5edbc769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dad2d172cf11b41da8c07870172515a62d49ebb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLj+pCRBK7hj4Ov3rIwAAlK8IAE2jFcQvZs5hIEdbjexhWPCa\n0CbU7gnjEdUHYduCivaz5PtkRLk4ey4GhvzblHMBZo2wTgpdVqR5Q10jh3bewT/3\nXqRTHH5kCsSVUY8UG6G//Lqf2/M8y4PP9+Gzl6+KIMg4UawlAPVHTtwYXWm3jkAL\nC+0nXyJ1Z/JkvWgl8HPLxdJrVJvOFVdk6GQpBr0qd0snw+dbuZgULKS2wFZZF+Lk\nkHlAq/pfFVfsgNsFgk2s8zb995LbYGlt6Z27Z0Dk4I525Jk4fcYznuiA09A8AcCq\nvYDLCFxq018dss5ltpz8Jza8MYLBkmdpzRRxJp0ltKZeghb3vjOtuIYGgzayrLk=\n=q7ML\n-----END PGP SIGNATURE-----\n", "payload": "tree 50e866526b06d1e4d867ef7e4bdb348d5edbc769\nparent 3c943d0eaad441784b6f79cdaaa99f6b7ff2ad63\nparent ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647198120 +0100\ncommitter GitHub <noreply@github.com> 1647198120 +0100\n\nRollup merge of #94816 - WaffleLapkin:atomic_get_mut_slice, r=Mark-Simulacrum\n\nAdd `Atomic*::get_mut_slice`\n\nThis PR adds the inverse of `Atomic*::from_mut_slice` introduced in #94384 with the following API:\n```rust\n// core::sync::atomic\n\nimpl Atomic* {\n    fn get_mut_slice(this: &mut [Self]) -> &mut [*];\n}\n```\n\ncc `@cuviper`\n\n-----\n\nFor now I've used the same tracking issue as `Atomic*::from_mut_slice`, should I open a new one?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dad2d172cf11b41da8c07870172515a62d49ebb", "html_url": "https://github.com/rust-lang/rust/commit/8dad2d172cf11b41da8c07870172515a62d49ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dad2d172cf11b41da8c07870172515a62d49ebb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c943d0eaad441784b6f79cdaaa99f6b7ff2ad63", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c943d0eaad441784b6f79cdaaa99f6b7ff2ad63", "html_url": "https://github.com/rust-lang/rust/commit/3c943d0eaad441784b6f79cdaaa99f6b7ff2ad63"}, {"sha": "ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33", "html_url": "https://github.com/rust-lang/rust/commit/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "a9edec80540dd1d375292c398c45bd9dd0d2605e", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/8dad2d172cf11b41da8c07870172515a62d49ebb/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dad2d172cf11b41da8c07870172515a62d49ebb/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=8dad2d172cf11b41da8c07870172515a62d49ebb", "patch": "@@ -340,6 +340,40 @@ impl AtomicBool {\n         unsafe { &mut *(v as *mut bool as *mut Self) }\n     }\n \n+    /// Get non-atomic access to a `&mut [AtomicBool]` slice.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let mut some_bools = [const { AtomicBool::new(false) }; 10];\n+    ///\n+    /// let view: &mut [bool] = AtomicBool::get_mut_slice(&mut some_bools);\n+    /// assert_eq!(view, [false; 10]);\n+    /// view[..5].copy_from_slice(&[true; 5]);\n+    ///\n+    /// std::thread::scope(|s| {\n+    ///     for t in &some_bools[..5] {\n+    ///         s.spawn(move || assert_eq!(t.load(Ordering::Relaxed), true));\n+    ///     }\n+    ///\n+    ///     for f in &some_bools[5..] {\n+    ///         s.spawn(move || assert_eq!(f.load(Ordering::Relaxed), false));\n+    ///     }\n+    /// });\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn get_mut_slice(this: &mut [Self]) -> &mut [bool] {\n+        // SAFETY: the mutable reference guarantees unique ownership.\n+        unsafe { &mut *(this as *mut [Self] as *mut [bool]) }\n+    }\n+\n     /// Get atomic access to a `&mut [bool]` slice.\n     ///\n     /// # Examples\n@@ -971,6 +1005,46 @@ impl<T> AtomicPtr<T> {\n         unsafe { &mut *(v as *mut *mut T as *mut Self) }\n     }\n \n+    /// Get non-atomic access to a `&mut [AtomicPtr]` slice.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// use std::ptr::null_mut;\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let mut some_ptrs = [const { AtomicPtr::new(null_mut::<String>()) }; 10];\n+    ///\n+    /// let view: &mut [*mut String] = AtomicPtr::get_mut_slice(&mut some_ptrs);\n+    /// assert_eq!(view, [null_mut::<String>(); 10]);\n+    /// view\n+    ///     .iter_mut()\n+    ///     .enumerate()\n+    ///     .for_each(|(i, ptr)| *ptr = Box::into_raw(Box::new(format!(\"iteration#{i}\"))));\n+    ///\n+    /// std::thread::scope(|s| {\n+    ///     for ptr in &some_ptrs {\n+    ///         s.spawn(move || {\n+    ///             let ptr = ptr.load(Ordering::Relaxed);\n+    ///             assert!(!ptr.is_null());\n+    ///\n+    ///             let name = unsafe { Box::from_raw(ptr) };\n+    ///             println!(\"Hello, {name}!\");\n+    ///         });\n+    ///     }\n+    /// });\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn get_mut_slice(this: &mut [Self]) -> &mut [*mut T] {\n+        // SAFETY: the mutable reference guarantees unique ownership.\n+        unsafe { &mut *(this as *mut [Self] as *mut [*mut T]) }\n+    }\n+\n     /// Get atomic access to a slice of pointers.\n     ///\n     /// # Examples\n@@ -1521,6 +1595,42 @@ macro_rules! atomic_int {\n                 unsafe { &mut *(v as *mut $int_type as *mut Self) }\n             }\n \n+            #[doc = concat!(\"Get non-atomic access to a `&mut [\", stringify!($atomic_type), \"]` slice\")]\n+            ///\n+            /// This is safe because the mutable reference guarantees that no other threads are\n+            /// concurrently accessing the atomic data.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n+            ///\n+            #[doc = concat!(\"let mut some_ints = [const { \", stringify!($atomic_type), \"::new(0) }; 10];\")]\n+            ///\n+            #[doc = concat!(\"let view: &mut [\", stringify!($int_type), \"] = \", stringify!($atomic_type), \"::get_mut_slice(&mut some_ints);\")]\n+            /// assert_eq!(view, [0; 10]);\n+            /// view\n+            ///     .iter_mut()\n+            ///     .enumerate()\n+            ///     .for_each(|(idx, int)| *int = idx as _);\n+            ///\n+            /// std::thread::scope(|s| {\n+            ///     some_ints\n+            ///         .iter()\n+            ///         .enumerate()\n+            ///         .for_each(|(idx, int)| {\n+            ///             s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));\n+            ///         })\n+            /// });\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+            pub fn get_mut_slice(this: &mut [Self]) -> &mut [$int_type] {\n+                // SAFETY: the mutable reference guarantees unique ownership.\n+                unsafe { &mut *(this as *mut [Self] as *mut [$int_type]) }\n+            }\n+\n             #[doc = concat!(\"Get atomic access to a `&mut [\", stringify!($int_type), \"]` slice.\")]\n             ///\n             /// # Examples"}]}