{"sha": "eed1e1ecd265071dc45abcd331272e6bb1b919d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDFlMWVjZDI2NTA3MWRjNDVhYmNkMzMxMjcyZTZiYjFiOTE5ZDc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-17T13:27:08Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-17T13:27:08Z"}, "message": "Remove unused field from StableHasher.", "tree": {"sha": "7d2c1a4fbf1dc5b7e0112a194781ef6ca6866e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d2c1a4fbf1dc5b7e0112a194781ef6ca6866e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed1e1ecd265071dc45abcd331272e6bb1b919d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed1e1ecd265071dc45abcd331272e6bb1b919d7", "html_url": "https://github.com/rust-lang/rust/commit/eed1e1ecd265071dc45abcd331272e6bb1b919d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed1e1ecd265071dc45abcd331272e6bb1b919d7/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68fd80fa1efb74863bda050b21edcd44125ee85b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fd80fa1efb74863bda050b21edcd44125ee85b", "html_url": "https://github.com/rust-lang/rust/commit/68fd80fa1efb74863bda050b21edcd44125ee85b"}], "stats": {"total": 20, "additions": 0, "deletions": 20}, "files": [{"sha": "13e245d3c01e6a72b367f6c16812d92e1ff47a42", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eed1e1ecd265071dc45abcd331272e6bb1b919d7/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed1e1ecd265071dc45abcd331272e6bb1b919d7/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=eed1e1ecd265071dc45abcd331272e6bb1b919d7", "patch": "@@ -15,7 +15,6 @@ use crate::bit_set;\n /// extended to 64 bits if needed.\n pub struct StableHasher<W> {\n     state: SipHasher128,\n-    bytes_hashed: u64,\n     width: PhantomData<W>,\n }\n \n@@ -33,7 +32,6 @@ impl<W: StableHasherResult> StableHasher<W> {\n     pub fn new() -> Self {\n         StableHasher {\n             state: SipHasher128::new_with_keys(0, 0),\n-            bytes_hashed: 0,\n             width: PhantomData,\n         }\n     }\n@@ -61,11 +59,6 @@ impl<W> StableHasher<W> {\n     pub fn finalize(self) -> (u64, u64) {\n         self.state.finish128()\n     }\n-\n-    #[inline]\n-    pub fn bytes_hashed(&self) -> u64 {\n-        self.bytes_hashed\n-    }\n }\n \n impl<W> Hasher for StableHasher<W> {\n@@ -76,37 +69,31 @@ impl<W> Hasher for StableHasher<W> {\n     #[inline]\n     fn write(&mut self, bytes: &[u8]) {\n         self.state.write(bytes);\n-        self.bytes_hashed += bytes.len() as u64;\n     }\n \n     #[inline]\n     fn write_u8(&mut self, i: u8) {\n         self.state.write_u8(i);\n-        self.bytes_hashed += 1;\n     }\n \n     #[inline]\n     fn write_u16(&mut self, i: u16) {\n         self.state.write_u16(i.to_le());\n-        self.bytes_hashed += 2;\n     }\n \n     #[inline]\n     fn write_u32(&mut self, i: u32) {\n         self.state.write_u32(i.to_le());\n-        self.bytes_hashed += 4;\n     }\n \n     #[inline]\n     fn write_u64(&mut self, i: u64) {\n         self.state.write_u64(i.to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_u128(&mut self, i: u128) {\n         self.state.write_u128(i.to_le());\n-        self.bytes_hashed += 16;\n     }\n \n     #[inline]\n@@ -115,37 +102,31 @@ impl<W> Hasher for StableHasher<W> {\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example.\n         self.state.write_u64((i as u64).to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_i8(&mut self, i: i8) {\n         self.state.write_i8(i);\n-        self.bytes_hashed += 1;\n     }\n \n     #[inline]\n     fn write_i16(&mut self, i: i16) {\n         self.state.write_i16(i.to_le());\n-        self.bytes_hashed += 2;\n     }\n \n     #[inline]\n     fn write_i32(&mut self, i: i32) {\n         self.state.write_i32(i.to_le());\n-        self.bytes_hashed += 4;\n     }\n \n     #[inline]\n     fn write_i64(&mut self, i: i64) {\n         self.state.write_i64(i.to_le());\n-        self.bytes_hashed += 8;\n     }\n \n     #[inline]\n     fn write_i128(&mut self, i: i128) {\n         self.state.write_i128(i.to_le());\n-        self.bytes_hashed += 16;\n     }\n \n     #[inline]\n@@ -154,7 +135,6 @@ impl<W> Hasher for StableHasher<W> {\n         // platforms. This is important for symbol hashes when cross compiling,\n         // for example.\n         self.state.write_i64((i as i64).to_le());\n-        self.bytes_hashed += 8;\n     }\n }\n "}]}