{"sha": "e4a98ea8d81fec630d4f7d3793bd0c550049edaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YTk4ZWE4ZDgxZmVjNjMwZDRmN2QzNzkzYmQwYzU1MDA0OWVkYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-06T09:40:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-06T09:40:51Z"}, "message": "Auto merge of #826 - RalfJung:uninit, r=RalfJung\n\nuninit intrinsic is gone\n\nFinally. :D\n\nHowever, to land this we'll need to fix the intptrcast issues that block https://github.com/rust-lang/miri/pull/803.", "tree": {"sha": "b49944fb4ac6d3fa52cb855f485114d45d32d1d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b49944fb4ac6d3fa52cb855f485114d45d32d1d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a98ea8d81fec630d4f7d3793bd0c550049edaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a98ea8d81fec630d4f7d3793bd0c550049edaa", "html_url": "https://github.com/rust-lang/rust/commit/e4a98ea8d81fec630d4f7d3793bd0c550049edaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a98ea8d81fec630d4f7d3793bd0c550049edaa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e734f1286b23b0610f56c3c99530aaa4009d9b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/e734f1286b23b0610f56c3c99530aaa4009d9b35", "html_url": "https://github.com/rust-lang/rust/commit/e734f1286b23b0610f56c3c99530aaa4009d9b35"}, {"sha": "fa290f1a481b0f98ed1de06206e643af8e04acd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa290f1a481b0f98ed1de06206e643af8e04acd5", "html_url": "https://github.com/rust-lang/rust/commit/fa290f1a481b0f98ed1de06206e643af8e04acd5"}], "stats": {"total": 30, "additions": 0, "deletions": 30}, "files": [{"sha": "d62e921695905dc315ce69a529820f470665370b", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e4a98ea8d81fec630d4f7d3793bd0c550049edaa/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a98ea8d81fec630d4f7d3793bd0c550049edaa/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=e4a98ea8d81fec630d4f7d3793bd0c550049edaa", "patch": "@@ -481,36 +481,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(res, dest)?;\n             }\n \n-            \"uninit\" => {\n-                // Check fast path: we don't want to force an allocation in case the destination is a simple value,\n-                // but we also do not want to create a new allocation with 0s and then copy that over.\n-                // FIXME: We do not properly validate in case of ZSTs and when doing it in memory!\n-                // However, this only affects direct calls of the intrinsic; calls to the stable\n-                // functions wrapping them do get their validation.\n-                // FIXME: should we check alignment for ZSTs?\n-                if !dest.layout.is_zst() {\n-                    match dest.layout.abi {\n-                        layout::Abi::Scalar(..) => {\n-                            let x = ScalarMaybeUndef::Undef;\n-                            this.write_immediate(Immediate::Scalar(x), dest)?;\n-                        }\n-                        layout::Abi::ScalarPair(..) => {\n-                            let x = ScalarMaybeUndef::Undef;\n-                            this.write_immediate(Immediate::ScalarPair(x, x), dest)?;\n-                        }\n-                        _ => {\n-                            // Do it in memory\n-                            let mplace = this.force_allocation(dest)?;\n-                            assert!(mplace.meta.is_none());\n-                            let ptr = mplace.ptr.to_ptr()?;\n-                            this.memory_mut()\n-                                .get_mut(ptr.alloc_id)?\n-                                .mark_definedness(ptr, dest.layout.size, false);\n-                        }\n-                    }\n-                }\n-            }\n-\n             \"write_bytes\" => {\n                 let ty = substs.type_at(0);\n                 let ty_layout = this.layout_of(ty)?;"}]}