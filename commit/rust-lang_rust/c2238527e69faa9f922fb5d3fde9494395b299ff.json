{"sha": "c2238527e69faa9f922fb5d3fde9494395b299ff", "node_id": "C_kwDOAAsO6NoAKGMyMjM4NTI3ZTY5ZmFhOWY5MjJmYjVkM2ZkZTk0OTQzOTViMjk5ZmY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-03T21:27:25Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-06T14:35:17Z"}, "message": "Add tcx::lower_impl_trait_in_trait_to_assoc_ty to avoid accessing through sess.opts.unstable_opts", "tree": {"sha": "268ec8d067678c9e91168bff80bdca8ff3c8e387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/268ec8d067678c9e91168bff80bdca8ff3c8e387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2238527e69faa9f922fb5d3fde9494395b299ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQF+iUACgkQgTGiTgx5\n769bkA//cyScvGGEI7PY8lnH++M1gsukeO4/lgRpyA9IPksNtzPDiXHG3G25LkCd\ni/8Gcbdm06Bfn45Z04LK0JXhICsHlZnSLZ3PzAv5NzFqzUnFgPdvAvPwevczRsF3\n+qfv5IixGXuCneHkyIZ81Jc7t8BDeXhlUP5XhfH1snWgiWDpbaUkuP3QFz4ebRpJ\ncG5E6LLhEdu9VyAmQA9maVEvy+RLLs+tsmGmkVU+ja7NfSRWENknNA2EyRT5Bulx\nOmlXRCACQGHRCGk4I3P1GSATnPplblwD7lBSD/gcuT5VL+SRCvIcAu4tGtADdik2\nLppwnQAxR8QRpHK8lx8FIlLn9JKWv3fyyLfFE6u7qcTe3aZYNFgGO7pRmLY87QMa\nNvRhJl0mLhJB0ASJ4X1cbnqxbwOfr/Xi5hHNlxzZ3/mZWhEbNtnUCaQiG8slYtvC\nDE2skLIH8NxtLWU1CRfJOyistYWBCQGNJAIM2Hvf7Nrg65kmE0OTu2Fh3ekd6JrR\n131N2I9NlMpzNlQ3RTdS/J3dBc0rsfKtgNvpcrsHwkWziYRj+Fc0225I9sJqZP1C\nyF0eF21oIDVoAiTCt9NUxD16wvv20/T0fGXG6oGgoWn5pJmC/ASJa2fjarBR2xxG\nSW5AsffH6odlH9H78THfypxgHx8JDhRh6EOpXB37/1S9T4B3YlY=\n=cV7W\n-----END PGP SIGNATURE-----", "payload": "tree 268ec8d067678c9e91168bff80bdca8ff3c8e387\nparent 7820b62d20bc548096d4632a3487987308cb4b5d\nauthor Santiago Pastorino <spastorino@gmail.com> 1677878845 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678113317 -0300\n\nAdd tcx::lower_impl_trait_in_trait_to_assoc_ty to avoid accessing through sess.opts.unstable_opts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2238527e69faa9f922fb5d3fde9494395b299ff", "html_url": "https://github.com/rust-lang/rust/commit/c2238527e69faa9f922fb5d3fde9494395b299ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2238527e69faa9f922fb5d3fde9494395b299ff/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7820b62d20bc548096d4632a3487987308cb4b5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7820b62d20bc548096d4632a3487987308cb4b5d", "html_url": "https://github.com/rust-lang/rust/commit/7820b62d20bc548096d4632a3487987308cb4b5d"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "238142a484527d32f6b58e11c8104f1a9207bc4a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2238527e69faa9f922fb5d3fde9494395b299ff/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2238527e69faa9f922fb5d3fde9494395b299ff/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c2238527e69faa9f922fb5d3fde9494395b299ff", "patch": "@@ -1104,7 +1104,7 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n // We only encode impl trait in trait when using `lower-impl-trait-in-trait-to-assoc-ty` unstable\n // option.\n fn should_encode_fn_impl_trait_in_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty\n+    if tcx.lower_impl_trait_in_trait_to_assoc_ty()\n         && let Some(assoc_item) = tcx.opt_associated_item(def_id)\n         && assoc_item.container == ty::AssocItemContainer::TraitContainer\n         && assoc_item.kind == ty::AssocKind::Fn"}, {"sha": "f87bc45e4f2817da07a8186bacf18731c05663fc", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2238527e69faa9f922fb5d3fde9494395b299ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2238527e69faa9f922fb5d3fde9494395b299ff/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c2238527e69faa9f922fb5d3fde9494395b299ff", "patch": "@@ -2439,6 +2439,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn trait_solver_next(self) -> bool {\n         self.sess.opts.unstable_opts.trait_solver == rustc_session::config::TraitSolver::Next\n     }\n+\n+    pub fn lower_impl_trait_in_trait_to_assoc_ty(self) -> bool {\n+        self.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {"}, {"sha": "050fd5660493b4732947e53bac9afb6bd4a7d1f3", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2238527e69faa9f922fb5d3fde9494395b299ff/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2238527e69faa9f922fb5d3fde9494395b299ff/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=c2238527e69faa9f922fb5d3fde9494395b299ff", "patch": "@@ -23,7 +23,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     let item = tcx.hir().expect_item(def_id.expect_local());\n     match item.kind {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n-            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+            if tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 // We collect RPITITs for each trait method's return type and create a\n                 // corresponding associated item using associated_items_for_impl_trait_in_trait\n                 // query.\n@@ -54,7 +54,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n             }\n         }\n         hir::ItemKind::Impl(ref impl_) => {\n-            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+            if tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 // We collect RPITITs for each trait method's return type, on the impl side too and\n                 // create a corresponding associated item using\n                 // associated_items_for_impl_trait_in_trait query."}]}