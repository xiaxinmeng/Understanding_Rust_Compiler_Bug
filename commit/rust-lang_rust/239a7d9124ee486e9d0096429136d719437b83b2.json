{"sha": "239a7d9124ee486e9d0096429136d719437b83b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOWE3ZDkxMjRlZTQ4NmU5ZDAwOTY0MjkxMzZkNzE5NDM3YjgzYjI=", "commit": {"author": {"name": "Vita Batrla", "email": "vita.batrla@gmail.com", "date": "2020-01-17T23:38:37Z"}, "committer": {"name": "Vita Batrla", "email": "vita.batrla@gmail.com", "date": "2020-01-17T23:47:20Z"}, "message": "refactor fix using cfg_if! (fix build)", "tree": {"sha": "8669c8cb9646073b71e5d38318d75acdf4c05a84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8669c8cb9646073b71e5d38318d75acdf4c05a84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/239a7d9124ee486e9d0096429136d719437b83b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/239a7d9124ee486e9d0096429136d719437b83b2", "html_url": "https://github.com/rust-lang/rust/commit/239a7d9124ee486e9d0096429136d719437b83b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/239a7d9124ee486e9d0096429136d719437b83b2/comments", "author": null, "committer": null, "parents": [{"sha": "dda32e4e535fb3fb9e728b8c96386db7d231b247", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda32e4e535fb3fb9e728b8c96386db7d231b247", "html_url": "https://github.com/rust-lang/rust/commit/dda32e4e535fb3fb9e728b8c96386db7d231b247"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "7e603a8682ba528927ba1e004ddc0ffd096ac320", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/239a7d9124ee486e9d0096429136d719437b83b2/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239a7d9124ee486e9d0096429136d719437b83b2/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=239a7d9124ee486e9d0096429136d719437b83b2", "patch": "@@ -44,9 +44,9 @@ cfg_if::cfg_if! {\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"openbsd\", target_os = \"netbsd\",\n         target_os = \"solaris\"))] {\n-        type ip_mcast_type_v4 = c_uchar;\n+        type IpV4MultiCastType = c_uchar;\n     } else {\n-        type ip_mcast_type_v4 = c_int;\n+        type IpV4MultiCastType = c_int;\n     }\n }\n \n@@ -533,20 +533,30 @@ impl UdpSocket {\n     }\n \n     pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {\n-        setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP, multicast_loop_v4 as ip_mcast_type_v4)\n+        setsockopt(\n+            &self.inner,\n+            c::IPPROTO_IP,\n+            c::IP_MULTICAST_LOOP,\n+            multicast_loop_v4 as IpV4MultiCastType,\n+        )\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        let raw: ip_mcast_type_v4 = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP)?;\n+        let raw: IpV4MultiCastType = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP)?;\n         Ok(raw != 0)\n     }\n \n     pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {\n-        setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL, multicast_ttl_v4 as ip_mcast_type_v4)\n+        setsockopt(\n+            &self.inner,\n+            c::IPPROTO_IP,\n+            c::IP_MULTICAST_TTL,\n+            multicast_ttl_v4 as IpV4MultiCastType,\n+        )\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        let raw: ip_mcast_type_v4 = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL)?;\n+        let raw: IpV4MultiCastType = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL)?;\n         Ok(raw as u32)\n     }\n "}]}