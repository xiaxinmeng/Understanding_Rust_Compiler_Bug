{"sha": "2fdcd245dfdb317b9c78a3850fbea143270429a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZGNkMjQ1ZGZkYjMxN2I5Yzc4YTM4NTBmYmVhMTQzMjcwNDI5YTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-19T15:26:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-19T15:26:35Z"}, "message": "Rollup merge of #79117 - cjkenn:mir-fuel, r=oli-obk\n\nadd optimization fuel checks to some mir passes\n\nFixes #77402\n\nInserts a bunch of calls to `consider_optimizing`. Note that `consider_optimizing` is the method that actually decrements the fuel count, so the point at which it's called is when the optimization takes place, from a fuel perspective. This means that where we call it has some thought behind it:\n\n1. We probably don't want to decrement the fuel count before other simple checks, otherwise we count an optimization as being performed even if nothing was mutated (ie. it returned early).\n2. In cases like `InstCombine`, where we gather optimizations in a pass and then mutate values, we probably would rather skip the gathering pass for performance reasons rather than skip the mutations afterwards.", "tree": {"sha": "11ca88671df711256f89ebd6fb345dad207775c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ca88671df711256f89ebd6fb345dad207775c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fdcd245dfdb317b9c78a3850fbea143270429a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfto6rCRBK7hj4Ov3rIwAAdHIIAGu5H+ZFudnrOeSdsLy4pWj7\nSPKVPndWRk9GnCMP8UsbZujgTHku5VWgR6KvmJ+1RbHYTI4xxOjUH/fEc+3Rn4HG\nksXn1p1PwAgsX5wJxPz6R8dnb9qLntjCUgfpiDxrJqWM/HZms7BF4RElTuB2BhCm\n6K9laFdiPKJIirzAUmdJH86zWCMOLNTsEtD5kRmtafC/j9FUIXfHh5bWSHpGoNA0\n1gCRQnUH4KpNzryCxLcR8+qd9NmFAmx/0WdIX45ZfTGQDqppLkO6WWr5mdOHMUoK\nDpf08yyVEaqRBMXChwAqS2czPjQktCGyRURHfsfdH2X+aL8QfbyiFWXtgcrxPQQ=\n=I2vC\n-----END PGP SIGNATURE-----\n", "payload": "tree 11ca88671df711256f89ebd6fb345dad207775c0\nparent 04a4404016c0ce526db5a6a0c45b2014f6653504\nparent 07de70250bd350befde0bf80fcb0e2836cd5d8b9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605799595 +0100\ncommitter GitHub <noreply@github.com> 1605799595 +0100\n\nRollup merge of #79117 - cjkenn:mir-fuel, r=oli-obk\n\nadd optimization fuel checks to some mir passes\n\nFixes #77402\n\nInserts a bunch of calls to `consider_optimizing`. Note that `consider_optimizing` is the method that actually decrements the fuel count, so the point at which it's called is when the optimization takes place, from a fuel perspective. This means that where we call it has some thought behind it:\n\n1. We probably don't want to decrement the fuel count before other simple checks, otherwise we count an optimization as being performed even if nothing was mutated (ie. it returned early).\n2. In cases like `InstCombine`, where we gather optimizations in a pass and then mutate values, we probably would rather skip the gathering pass for performance reasons rather than skip the mutations afterwards.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdcd245dfdb317b9c78a3850fbea143270429a7", "html_url": "https://github.com/rust-lang/rust/commit/2fdcd245dfdb317b9c78a3850fbea143270429a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fdcd245dfdb317b9c78a3850fbea143270429a7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a4404016c0ce526db5a6a0c45b2014f6653504", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a4404016c0ce526db5a6a0c45b2014f6653504", "html_url": "https://github.com/rust-lang/rust/commit/04a4404016c0ce526db5a6a0c45b2014f6653504"}, {"sha": "07de70250bd350befde0bf80fcb0e2836cd5d8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07de70250bd350befde0bf80fcb0e2836cd5d8b9", "html_url": "https://github.com/rust-lang/rust/commit/07de70250bd350befde0bf80fcb0e2836cd5d8b9"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "abcf1862fd87366e052a8895ea6199d5adcce75c", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -800,7 +800,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             }\n         }\n \n-        trace!(\"attepting to replace {:?} with {:?}\", rval, value);\n+        trace!(\"attempting to replace {:?} with {:?}\", rval, value);\n         if let Err(e) = self.ecx.const_validate_operand(\n             value,\n             vec![],\n@@ -890,6 +890,10 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return false;\n         }\n \n+        if !self.tcx.consider_optimizing(|| format!(\"ConstantPropagation - OpTy: {:?}\", op)) {\n+            return false;\n+        }\n+\n         match *op {\n             interpret::Operand::Immediate(Immediate::Scalar(ScalarMaybeUninit::Scalar(s))) => {\n                 s.is_bits()"}, {"sha": "f91477911a489015363ab72bcd08ca9c6dbfd1aa", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -46,6 +46,10 @@ impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n         let should_cleanup = !opts_to_apply.is_empty();\n \n         for opt_to_apply in opts_to_apply {\n+            if !tcx.consider_optimizing(|| format!(\"EarlyOtherwiseBranch {:?}\", &opt_to_apply)) {\n+                break;\n+            }\n+\n             trace!(\"SUCCESS: found optimization possibility to apply: {:?}\", &opt_to_apply);\n \n             let statements_before ="}, {"sha": "3eb2b500d6627324dd0950e91556b780511286d3", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -39,13 +39,21 @@ pub struct InstCombineVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n+impl<'tcx> InstCombineVisitor<'tcx> {\n+    fn should_combine(&self, rvalue: &Rvalue<'tcx>, location: Location) -> bool {\n+        self.tcx.consider_optimizing(|| {\n+            format!(\"InstCombine - Rvalue: {:?} Location: {:?}\", rvalue, location)\n+        })\n+    }\n+}\n+\n impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n-        if self.optimizations.and_stars.remove(&location) {\n+        if self.optimizations.and_stars.remove(&location) && self.should_combine(rvalue, location) {\n             debug!(\"replacing `&*`: {:?}\", rvalue);\n             let new_place = match rvalue {\n                 Rvalue::Ref(_, _, place) => {\n@@ -67,18 +75,24 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n         }\n \n         if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n-            debug!(\"replacing `Len([_; N])`: {:?}\", rvalue);\n-            *rvalue = Rvalue::Use(Operand::Constant(box constant));\n+            if self.should_combine(rvalue, location) {\n+                debug!(\"replacing `Len([_; N])`: {:?}\", rvalue);\n+                *rvalue = Rvalue::Use(Operand::Constant(box constant));\n+            }\n         }\n \n         if let Some(operand) = self.optimizations.unneeded_equality_comparison.remove(&location) {\n-            debug!(\"replacing {:?} with {:?}\", rvalue, operand);\n-            *rvalue = Rvalue::Use(operand);\n+            if self.should_combine(rvalue, location) {\n+                debug!(\"replacing {:?} with {:?}\", rvalue, operand);\n+                *rvalue = Rvalue::Use(operand);\n+            }\n         }\n \n         if let Some(place) = self.optimizations.unneeded_deref.remove(&location) {\n-            debug!(\"unneeded_deref: replacing {:?} with {:?}\", rvalue, place);\n-            *rvalue = Rvalue::Use(Operand::Copy(place));\n+            if self.should_combine(rvalue, location) {\n+                debug!(\"unneeded_deref: replacing {:?} with {:?}\", rvalue, place);\n+                *rvalue = Rvalue::Use(Operand::Copy(place));\n+            }\n         }\n \n         self.super_rvalue(rvalue, location)"}, {"sha": "53eeecc780f6f1ed628c1ec766ac147b24aa3d1f", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -43,8 +43,13 @@ impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n         }\n \n         let param_env = tcx.param_env(body.source.def_id());\n+        let def_id = body.source.def_id();\n         let (bbs, local_decls) = body.basic_blocks_and_local_decls_mut();\n         'outer: for bb_idx in bbs.indices() {\n+            if !tcx.consider_optimizing(|| format!(\"MatchBranchSimplification {:?} \", def_id)) {\n+                continue;\n+            }\n+\n             let (discr, val, switch_ty, first, second) = match bbs[bb_idx].terminator().kind {\n                 TerminatorKind::SwitchInt {\n                     discr: ref discr @ (Operand::Copy(_) | Operand::Move(_)),"}, {"sha": "617086622cc1ac7728317681276c6ca473849b10", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -16,6 +16,7 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n \n         // find basic blocks with no statement and a return terminator\n         let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks().len());\n+        let def_id = body.source.def_id();\n         let bbs = body.basic_blocks_mut();\n         for idx in bbs.indices() {\n             if bbs[idx].statements.is_empty()\n@@ -26,6 +27,10 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n         }\n \n         for bb in bbs {\n+            if !tcx.consider_optimizing(|| format!(\"MultipleReturnTerminators {:?} \", def_id)) {\n+                break;\n+            }\n+\n             if let TerminatorKind::Goto { target } = bb.terminator().kind {\n                 if bbs_simple_returns.contains(target) {\n                     bb.terminator_mut().kind = TerminatorKind::Return;"}, {"sha": "ce02fb261df6f981991fa955cc3772d72861fe65", "filename": "compiler/rustc_mir/src/transform/nrvo.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -38,18 +38,22 @@ impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n             return;\n         }\n \n+        let def_id = body.source.def_id();\n         let returned_local = match local_eligible_for_nrvo(body) {\n             Some(l) => l,\n             None => {\n-                debug!(\"`{:?}` was ineligible for NRVO\", body.source.def_id());\n+                debug!(\"`{:?}` was ineligible for NRVO\", def_id);\n                 return;\n             }\n         };\n \n+        if !tcx.consider_optimizing(|| format!(\"RenameReturnPlace {:?}\", def_id)) {\n+            return;\n+        }\n+\n         debug!(\n             \"`{:?}` was eligible for NRVO, making {:?} the return place\",\n-            body.source.def_id(),\n-            returned_local\n+            def_id, returned_local\n         );\n \n         RenameToReturnPlace { tcx, to_rename: returned_local }.visit_body(body);"}, {"sha": "221114eebaa45a670c93b8699c9906160eb4ee1e", "filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -21,6 +21,12 @@ impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n         opt_finder.visit_body(body);\n         let should_simplify = !opt_finder.optimizations.is_empty();\n         for (loc, target) in opt_finder.optimizations {\n+            if !tcx\n+                .consider_optimizing(|| format!(\"RemoveUnneededDrops {:?} \", body.source.def_id()))\n+            {\n+                break;\n+            }\n+\n             let terminator = body.basic_blocks_mut()[loc.block].terminator_mut();\n             debug!(\"SUCCESS: replacing `drop` with goto({:?})\", target);\n             terminator.kind = TerminatorKind::Goto { target };"}, {"sha": "e39c8656021b25a245d1dcd667d002a4f5a16302", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -50,6 +50,12 @@ impl MirPass<'_> for UnreachablePropagation {\n \n         let replaced = !replacements.is_empty();\n         for (bb, terminator_kind) in replacements {\n+            if !tcx.consider_optimizing(|| {\n+                format!(\"UnreachablePropagation {:?} \", body.source.def_id())\n+            }) {\n+                break;\n+            }\n+\n             body.basic_blocks_mut()[bb].terminator_mut().kind = terminator_kind;\n         }\n "}, {"sha": "f68de00b9b5915bc4c9220fc0bf78f56a6c9d915", "filename": "src/test/ui/print-fuel/print-fuel.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fdcd245dfdb317b9c78a3850fbea143270429a7/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdcd245dfdb317b9c78a3850fbea143270429a7/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs?ref=2fdcd245dfdb317b9c78a3850fbea143270429a7", "patch": "@@ -2,8 +2,8 @@\n #![allow(dead_code)]\n \n // (#55495: The --error-format is to sidestep an issue in our test harness)\n-// compile-flags: --error-format human -Z print-fuel=foo\n-// build-pass (FIXME(62277): could be check-pass?)\n+// compile-flags: -C opt-level=0 --error-format human -Z print-fuel=foo\n+// check-pass\n \n struct S1(u8, u16, u8);\n struct S2(u8, u16, u8);"}]}