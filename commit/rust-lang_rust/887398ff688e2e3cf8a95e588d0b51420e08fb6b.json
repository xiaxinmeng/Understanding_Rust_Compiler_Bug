{"sha": "887398ff688e2e3cf8a95e588d0b51420e08fb6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzM5OGZmNjg4ZTJlM2NmOGE5NWU1ODhkMGI1MTQyMGUwOGZiNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T07:49:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T07:49:01Z"}, "message": "Auto merge of #80610 - Aaron1011:unhash-def-path-hash, r=varkor\n\nUse `UnhashMap` whenever we have a key of `DefPathHash`", "tree": {"sha": "1ebb603e27d7a0696901a9dec22d2a46077f0d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ebb603e27d7a0696901a9dec22d2a46077f0d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887398ff688e2e3cf8a95e588d0b51420e08fb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887398ff688e2e3cf8a95e588d0b51420e08fb6b", "html_url": "https://github.com/rust-lang/rust/commit/887398ff688e2e3cf8a95e588d0b51420e08fb6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887398ff688e2e3cf8a95e588d0b51420e08fb6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd459fd629bc5444cdbda3ceb341cd0bf6eece2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd459fd629bc5444cdbda3ceb341cd0bf6eece2", "html_url": "https://github.com/rust-lang/rust/commit/0cd459fd629bc5444cdbda3ceb341cd0bf6eece2"}, {"sha": "0dc9b265232183c1b8fed68cfeedcf25a093ba05", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc9b265232183c1b8fed68cfeedcf25a093ba05", "html_url": "https://github.com/rust-lang/rust/commit/0dc9b265232183c1b8fed68cfeedcf25a093ba05"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "c94893bb3a25342d5354000cd3d79baed3a442fc", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/887398ff688e2e3cf8a95e588d0b51420e08fb6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887398ff688e2e3cf8a95e588d0b51420e08fb6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=887398ff688e2e3cf8a95e588d0b51420e08fb6b", "patch": "@@ -11,6 +11,7 @@ use rustc_data_structures::fingerprint::{Fingerprint, FingerprintDecoder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{AtomicCell, Lock, LockGuard, Lrc, OnceCell};\n+use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::ErrorReported;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n@@ -80,7 +81,7 @@ crate struct CrateMetadata {\n     /// For every definition in this crate, maps its `DefPathHash` to its\n     /// `DefIndex`. See `raw_def_id_to_def_id` for more details about how\n     /// this is used.\n-    def_path_hash_map: OnceCell<FxHashMap<DefPathHash, DefIndex>>,\n+    def_path_hash_map: OnceCell<UnhashMap<DefPathHash, DefIndex>>,\n     /// Used for decoding interpret::AllocIds in a cached & thread-safe manner.\n     alloc_decoding_state: AllocDecodingState,\n     /// The `DepNodeIndex` of the `DepNode` representing this upstream crate.\n@@ -1555,7 +1556,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         // stored in this crate.\n         let map = self.cdata.def_path_hash_map.get_or_init(|| {\n             let end_id = self.root.tables.def_path_hashes.size() as u32;\n-            let mut map = FxHashMap::with_capacity_and_hasher(end_id as usize, Default::default());\n+            let mut map = UnhashMap::with_capacity_and_hasher(end_id as usize, Default::default());\n             for i in 0..end_id {\n                 let def_index = DefIndex::from_u32(i);\n                 // There may be gaps in the encoded table if we're decoding a proc-macro crate"}, {"sha": "eb4f1b958be593d0e7a3f88297ca07d63624f49d", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/887398ff688e2e3cf8a95e588d0b51420e08fb6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887398ff688e2e3cf8a95e588d0b51420e08fb6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=887398ff688e2e3cf8a95e588d0b51420e08fb6b", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fingerprint::{Fingerprint, FingerprintDecoder, Finger\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, OnceCell};\n use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathHash;\n@@ -87,27 +88,27 @@ pub struct OnDiskCache<'sess> {\n     // compilation session. This is used as an initial 'guess' when\n     // we try to map a `DefPathHash` to its `DefId` in the current compilation\n     // session.\n-    foreign_def_path_hashes: FxHashMap<DefPathHash, RawDefId>,\n+    foreign_def_path_hashes: UnhashMap<DefPathHash, RawDefId>,\n \n     // The *next* compilation sessison's `foreign_def_path_hashes` - at\n     // the end of our current compilation session, this will get written\n     // out to the `foreign_def_path_hashes` field of the `Footer`, which\n     // will become `foreign_def_path_hashes` of the next compilation session.\n     // This stores any `DefPathHash` that we may need to map to a `DefId`\n     // during the next compilation session.\n-    latest_foreign_def_path_hashes: Lock<FxHashMap<DefPathHash, RawDefId>>,\n+    latest_foreign_def_path_hashes: Lock<UnhashMap<DefPathHash, RawDefId>>,\n \n     // Maps `DefPathHashes` to their corresponding `LocalDefId`s for all\n     // local items in the current compilation session. This is only populated\n     // when we are in incremental mode and have loaded a pre-existing cache\n     // from disk, since this map is only used when deserializing a `DefPathHash`\n     // from the incremental cache.\n-    local_def_path_hash_to_def_id: FxHashMap<DefPathHash, LocalDefId>,\n+    local_def_path_hash_to_def_id: UnhashMap<DefPathHash, LocalDefId>,\n     // Caches all lookups of `DefPathHashes`, both for local and foreign\n     // definitions. A definition from the previous compilation session\n     // may no longer exist in the current compilation session, so\n     // we use `Option<DefId>` so that we can cache a lookup failure.\n-    def_path_hash_to_def_id_cache: Lock<FxHashMap<DefPathHash, Option<DefId>>>,\n+    def_path_hash_to_def_id_cache: Lock<UnhashMap<DefPathHash, Option<DefId>>>,\n }\n \n // This type is used only for serialization and deserialization.\n@@ -123,7 +124,7 @@ struct Footer {\n     syntax_contexts: FxHashMap<u32, AbsoluteBytePos>,\n     // See `OnDiskCache.expn_data`\n     expn_data: FxHashMap<u32, AbsoluteBytePos>,\n-    foreign_def_path_hashes: FxHashMap<DefPathHash, RawDefId>,\n+    foreign_def_path_hashes: UnhashMap<DefPathHash, RawDefId>,\n }\n \n type EncodedQueryResultIndex = Vec<(SerializedDepNodeIndex, AbsoluteBytePos)>;\n@@ -160,8 +161,8 @@ crate struct RawDefId {\n     pub index: u32,\n }\n \n-fn make_local_def_path_hash_map(definitions: &Definitions) -> FxHashMap<DefPathHash, LocalDefId> {\n-    FxHashMap::from_iter(\n+fn make_local_def_path_hash_map(definitions: &Definitions) -> UnhashMap<DefPathHash, LocalDefId> {\n+    UnhashMap::from_iter(\n         definitions\n             .def_path_table()\n             .all_def_path_hashes_and_def_ids(LOCAL_CRATE)\n@@ -973,7 +974,7 @@ struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n     source_map: CachingSourceMapView<'tcx>,\n     file_to_file_index: FxHashMap<*const SourceFile, SourceFileIndex>,\n     hygiene_context: &'a HygieneEncodeContext,\n-    latest_foreign_def_path_hashes: FxHashMap<DefPathHash, RawDefId>,\n+    latest_foreign_def_path_hashes: UnhashMap<DefPathHash, RawDefId>,\n }\n \n impl<'a, 'tcx, E> CacheEncoder<'a, 'tcx, E>"}]}