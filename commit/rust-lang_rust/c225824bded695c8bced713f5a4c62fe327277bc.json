{"sha": "c225824bded695c8bced713f5a4c62fe327277bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMjU4MjRiZGVkNjk1YzhiY2VkNzEzZjVhNGM2MmZlMzI3Mjc3YmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-18T13:22:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-19T00:07:27Z"}, "message": "Require braces when a closure has an explicit return type. This is a\n[breaking-change]: instead of a closure like `|| -> i32 22`, prefer `||\n-> i32 { 22 }`.\n\nFixes #23420.", "tree": {"sha": "6c204a6e9a86dd6c23edf942abfd4abf14e1cf39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c204a6e9a86dd6c23edf942abfd4abf14e1cf39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c225824bded695c8bced713f5a4c62fe327277bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c225824bded695c8bced713f5a4c62fe327277bc", "html_url": "https://github.com/rust-lang/rust/commit/c225824bded695c8bced713f5a4c62fe327277bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c225824bded695c8bced713f5a4c62fe327277bc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966", "html_url": "https://github.com/rust-lang/rust/commit/f9a7bc58f89b9b15eb1269f0c0d68baf5fc7e966"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "968d2fd7e2a47c6e216845b527b97e82a8548a79", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -404,7 +404,7 @@ pub fn char_lit(lit: &str) -> (char, isize) {\n         .map(|x| (x, len as isize))\n     }\n \n-    let unicode_escape = || -> Option<(char, isize)>\n+    let unicode_escape = || -> Option<(char, isize)> {\n         if lit.as_bytes()[2] == b'{' {\n             let idx = lit.find('}').expect(msg2);\n             let subslice = &lit[3..idx];\n@@ -413,7 +413,8 @@ pub fn char_lit(lit: &str) -> (char, isize) {\n                 .map(|x| (x, subslice.chars().count() as isize + 4))\n         } else {\n             esc(6, lit)\n-        };\n+        }\n+    };\n \n     // Unicode escapes\n     return match lit.as_bytes()[1] as char {"}, {"sha": "d76355f9af00db6efb3039e0dfa47279dd4b838f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -2101,10 +2101,7 @@ impl<'a> Parser<'a> {\n                 }\n             },\n             token::OpenDelim(token::Brace) => {\n-                self.bump();\n-                let blk = self.parse_block_tail(lo, DefaultBlock);\n-                return self.mk_expr(blk.span.lo, blk.span.hi,\n-                                    ExprBlock(blk));\n+                return self.parse_block_expr(lo, DefaultBlock);\n             },\n             token::BinOp(token::Or) |  token::OrOr => {\n                 return self.parse_lambda_expr(CaptureByRef);\n@@ -3000,19 +2997,30 @@ impl<'a> Parser<'a> {\n     {\n         let lo = self.span.lo;\n         let decl = self.parse_fn_block_decl();\n-        let body = self.parse_expr();\n-        let fakeblock = P(ast::Block {\n-            id: ast::DUMMY_NODE_ID,\n-            stmts: vec![],\n-            span: body.span,\n-            expr: Some(body),\n-            rules: DefaultBlock,\n-        });\n+        let body = match decl.output {\n+            DefaultReturn(_) => {\n+                // If no explicit return type is given, parse any\n+                // expr and wrap it up in a dummy block:\n+                let body_expr = self.parse_expr();\n+                P(ast::Block {\n+                    id: ast::DUMMY_NODE_ID,\n+                    stmts: vec![],\n+                    span: body_expr.span,\n+                    expr: Some(body_expr),\n+                    rules: DefaultBlock,\n+                })\n+            }\n+            _ => {\n+                // If an explicit return type is given, require a\n+                // block to appear (RFC 968).\n+                self.parse_block()\n+            }\n+        };\n \n         self.mk_expr(\n             lo,\n-            fakeblock.span.hi,\n-            ExprClosure(capture_clause, decl, fakeblock))\n+            body.span.hi,\n+            ExprClosure(capture_clause, decl, body))\n     }\n \n     pub fn parse_else_expr(&mut self) -> P<Expr> {"}, {"sha": "b58c121c5fd54730df170197ef956b41145b95cc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -1777,7 +1777,12 @@ impl<'a> State<'a> {\n                 try!(self.print_fn_block_args(&**decl));\n                 try!(space(&mut self.s));\n \n-                if !body.stmts.is_empty() || !body.expr.is_some() {\n+                let default_return = match decl.output {\n+                    ast::DefaultReturn(..) => true,\n+                    _ => false\n+                };\n+\n+                if !default_return || !body.stmts.is_empty() || body.expr.is_none() {\n                     try!(self.print_block_unclosed(&**body));\n                 } else {\n                     // we extract the block, so as not to create another set of boxes"}, {"sha": "35c551931366d28c732260ef2d523197a14c4759", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     //~| found `Box<core::ops::Fn(isize, isize)>`\n     //~| expected ()\n     //~| found box\n-    let _: () = (box || -> isize unimplemented!()) as Box<FnMut() -> isize>;\n+    let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected `()`\n     //~| found `Box<core::ops::FnMut() -> isize>`"}, {"sha": "7c94e33b47b38c4296012d4aa7d63a6bacbf5b2a", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -13,6 +13,6 @@ use std::vec::Vec;\n fn main() {\n     let a: Vec<isize> = Vec::new();\n     a.iter().all(|_| -> bool {\n-        //~^ ERROR mismatched types\n+        //~^ ERROR not all control paths return a value\n     });\n }"}, {"sha": "da6245597f8f42518847ea4663c57a9770c62860", "filename": "src/test/parse-fail/closure-return-syntax.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fclosure-return-syntax.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we cannot parse a closure with an explicit return type\n+// unless it uses braces.\n+\n+fn main() {\n+    let x = || -> i32 22; //~ ERROR expected `{`, found `22`\n+}"}, {"sha": "835d356d8aaa1d98106622ff8df38de6c514baae", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     fn as_buf<T, F>(s: String, f: F) -> T where F: FnOnce(String) -> T { f(s) }\n-    as_buf(\"foo\".to_string(), |foo: String| -> () println!(\"{}\", foo) );\n+    as_buf(\"foo\".to_string(), |foo: String| -> () { println!(\"{}\", foo) });\n }"}, {"sha": "4364391cf0c60c9d403250ba778af1ac69bdb926", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -14,6 +14,6 @@\n \n pub fn main() {\n     let bar: Box<_> = box 3;\n-    let h = || -> int *bar;\n+    let h = || -> int { *bar };\n     assert_eq!(h(), 3);\n }"}, {"sha": "8e3cb414566c7577279db2ba4f0fc60d45c7af7b", "filename": "src/test/run-pass/issue-17816.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225824bded695c8bced713f5a4c62fe327277bc/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17816.rs?ref=c225824bded695c8bced713f5a4c62fe327277bc", "patch": "@@ -14,7 +14,7 @@ use std::marker::PhantomData;\n \n fn main() {\n     struct Symbol<'a, F: Fn(Vec<&'a str>) -> &'a str> { function: F, marker: PhantomData<&'a ()> }\n-    let f = |x: Vec<&str>| -> &str \"foobar\";\n+    let f = |x: Vec<&str>| -> &str { \"foobar\" };\n     let sym = Symbol { function: f, marker: PhantomData };\n     (sym.function)(vec![]);\n }"}]}