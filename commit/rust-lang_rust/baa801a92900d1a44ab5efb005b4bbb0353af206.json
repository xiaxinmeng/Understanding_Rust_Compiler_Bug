{"sha": "baa801a92900d1a44ab5efb005b4bbb0353af206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYTgwMWE5MjkwMGQxYTQ0YWI1ZWZiMDA1YjRiYmIwMzUzYWYyMDY=", "commit": {"author": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-22T12:38:46Z"}, "committer": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-24T06:20:40Z"}, "message": "Minor fixes, as requested in PR review", "tree": {"sha": "28d2798ba9f793f4505daac72bdb45bcb69a61fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d2798ba9f793f4505daac72bdb45bcb69a61fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa801a92900d1a44ab5efb005b4bbb0353af206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa801a92900d1a44ab5efb005b4bbb0353af206", "html_url": "https://github.com/rust-lang/rust/commit/baa801a92900d1a44ab5efb005b4bbb0353af206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa801a92900d1a44ab5efb005b4bbb0353af206/comments", "author": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77f73e8818453afd513f96e98cf7e0c889cdbd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77f73e8818453afd513f96e98cf7e0c889cdbd9", "html_url": "https://github.com/rust-lang/rust/commit/d77f73e8818453afd513f96e98cf7e0c889cdbd9"}], "stats": {"total": 156, "additions": 80, "deletions": 76}, "files": [{"sha": "f3b46dd322a39988e31a6d4ab77d80055febc5f5", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=baa801a92900d1a44ab5efb005b4bbb0353af206", "patch": "@@ -414,8 +414,6 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass) -> String {\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => \"r\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => \"l\",\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg32) => \"f\",\n-            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg64) => \"d\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg) => \"r\",\n@@ -512,8 +510,6 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => cx.type_i32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => cx.type_i64(),\n-        InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg32) => cx.type_f32(),\n-        InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg64) => cx.type_f64(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)"}, {"sha": "1bbaa4c4c002ed0c22d29ea57bb1317ea75e07bc", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=baa801a92900d1a44ab5efb005b4bbb0353af206", "patch": "@@ -52,6 +52,30 @@ macro_rules! def_reg_class {\n \n #[macro_use]\n macro_rules! def_regs {\n+    ($arch:ident $arch_reg:ident $arch_regclass:ident {}) => {\n+        #[allow(unreachable_code)]\n+        #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, Eq, PartialEq, Hash, HashStable_Generic)]\n+        pub enum $arch_reg {}\n+\n+        impl $arch_reg {\n+            pub fn parse(\n+                _arch: super::InlineAsmArch,\n+                mut _has_feature: impl FnMut(&str) -> bool,\n+                _name: &str,\n+            ) -> Result<Self, &'static str> {\n+                Err(\"unknown register\")\n+            }\n+        }\n+\n+        pub(super) fn fill_reg_map(\n+            _arch: super::InlineAsmArch,\n+            mut _has_feature: impl FnMut(&str) -> bool,\n+            _map: &mut rustc_data_structures::fx::FxHashMap<\n+                super::InlineAsmRegClass,\n+                rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n+            >,\n+        ) {}\n+    };\n     ($arch:ident $arch_reg:ident $arch_regclass:ident {\n         $(\n             $reg:ident: $class:ident $(, $extra_class:ident)* = [$reg_name:literal $(, $alias:literal)*] $(% $filter:ident)?,\n@@ -210,7 +234,6 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.name(),\n             Self::AArch64(r) => r.name(),\n             Self::RiscV(r) => r.name(),\n-            Self::Nvptx(r) => r.name(),\n         }\n     }\n \n@@ -220,7 +243,6 @@ impl InlineAsmReg {\n             Self::Arm(r) => InlineAsmRegClass::Arm(r.reg_class()),\n             Self::AArch64(r) => InlineAsmRegClass::AArch64(r.reg_class()),\n             Self::RiscV(r) => InlineAsmRegClass::RiscV(r.reg_class()),\n-            Self::Nvptx(r) => InlineAsmRegClass::Nvptx(r.reg_class()),\n         }\n     }\n \n@@ -262,7 +284,6 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.emit(out, arch, modifier),\n             Self::AArch64(r) => r.emit(out, arch, modifier),\n             Self::RiscV(r) => r.emit(out, arch, modifier),\n-            Self::Nvptx(r) => r.emit(out, arch, modifier),\n         }\n     }\n \n@@ -272,7 +293,6 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.overlapping_regs(|r| cb(Self::Arm(r))),\n             Self::AArch64(_) => cb(self),\n             Self::RiscV(_) => cb(self),\n-            Self::Nvptx(_) => cb(self),\n         }\n     }\n }"}, {"sha": "cba069cd0542c2ef35a2ff9957e04282278fd1b9", "filename": "src/librustc_target/asm/nvptx.rs", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Flibrustc_target%2Fasm%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Flibrustc_target%2Fasm%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fnvptx.rs?ref=baa801a92900d1a44ab5efb005b4bbb0353af206", "patch": "@@ -1,14 +1,11 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n-use std::fmt;\n \n def_reg_class! {\n     Nvptx NvptxInlineAsmRegClass {\n         reg16,\n         reg32,\n         reg64,\n-        freg32,\n-        freg64,\n     }\n }\n \n@@ -39,52 +36,12 @@ impl NvptxInlineAsmRegClass {\n     ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n         match self {\n             Self::reg16 => types! { _: I8, I16; },\n-            Self::reg32 => types! { _: I8, I16, I32; },\n-            Self::reg64 => types! { _: I8, I16, I32, I64; },\n-            Self::freg32 => types! { _: F32; },\n-            Self::freg64 => types! { _: F32, F64; },\n+            Self::reg32 => types! { _: I8, I16, I32, F32; },\n+            Self::reg64 => types! { _: I8, I16, I32, F32, I64, F64; },\n         }\n     }\n }\n \n def_regs! {\n-    Nvptx NvptxInlineAsmReg NvptxInlineAsmRegClass {\n-        // We have to define a register, otherwise we get warnings/errors about unused imports and\n-        // unreachable code. Do what clang does and define r0.\n-        r0: reg32 = [\"r0\"],\n-        #error = [\"tid\", \"tid.x\", \"tid.y\", \"tid.z\"] => \"tid not supported for inline asm\",\n-        #error = [\"ntid\", \"ntid.x\", \"ntid.y\", \"ntid.z\"] => \"ntid not supported for inline asm\",\n-        #error = [\"laneid\"] => \"laneid not supported for inline asm\",\n-        #error = [\"warpid\"] => \"warpid not supported for inline asm\",\n-        #error = [\"nwarpid\"] => \"nwarpid not supported for inline asm\",\n-        #error = [\"ctaid\", \"ctaid.x\", \"ctaid.y\", \"ctaid.z\"] => \"ctaid not supported for inline asm\",\n-        #error = [\"nctaid\", \"nctaid.x\", \"nctaid.y\", \"nctaid.z\"] => \"nctaid not supported for inline asm\",\n-        #error = [\"smid\"] => \"smid not supported for inline asm\",\n-        #error = [\"nsmid\"] => \"nsmid not supported for inline asm\",\n-        #error = [\"gridid\"] => \"gridid not supported for inline asm\",\n-        #error = [\"lanemask_eq\"] => \"lanemask_eq not supported for inline asm\",\n-        #error = [\"lanemask_le\"] => \"lanemask_le not supported for inline asm\",\n-        #error = [\"lanemask_lt\"] => \"lanemask_lt not supported for inline asm\",\n-        #error = [\"lanemask_ge\"] => \"lanemask_ge not supported for inline asm\",\n-        #error = [\"lanemask_gt\"] => \"lanemask_gt not supported for inline asm\",\n-        #error = [\"clock\", \"clock_hi\"] => \"clock not supported for inline asm\",\n-        #error = [\"clock64\"] => \"clock64 not supported for inline asm\",\n-        #error = [\"pm0\", \"pm1\", \"pm2\", \"pm3\", \"pm4\", \"pm5\", \"pm6\", \"pm7\"] => \"pm not supported for inline asm\",\n-        #error = [\"pm0_64\", \"pm1_64\", \"pm2_64\", \"pm3_64\", \"pm4_64\", \"pm5_64\", \"pm6_64\", \"pm7_64\"] => \"pm_64 not supported for inline asm\",\n-        #error = [\"envreg0\", \"envreg1\", \"envreg2\", \"envreg3\", \"envreg4\", \"envreg5\", \"envreg6\", \"envreg7\", \"envreg8\", \"envreg9\", \"envreg10\", \"envreg11\", \"envreg12\", \"envreg13\", \"envreg14\", \"envreg15\", \"envreg16\", \"envreg17\", \"envreg18\", \"envreg19\", \"envreg20\", \"envreg21\", \"envreg22\", \"envreg23\", \"envreg24\", \"envreg25\", \"envreg26\", \"envreg27\", \"envreg28\", \"envreg29\", \"envreg30\", \"envreg31\"] => \"envreg not supported for inline asm\",\n-        #error = [\"globaltimer\", \"globaltimer_lo\", \"globaltimer_hi\"] => \"globaltimer not supported for inline asm\",\n-        #error = [\"total_mem_size\"] => \"total_mem_size not supported for inline asm\",\n-        #error = [\"dynamic_mem_size\"] => \"dynamic_mem_size not supported for inline asm\",\n-    }\n-}\n-\n-impl NvptxInlineAsmReg {\n-    pub fn emit(\n-        self,\n-        out: &mut dyn fmt::Write,\n-        _arch: InlineAsmArch,\n-        _modifier: Option<char>,\n-    ) -> fmt::Result {\n-        out.write_str(self.name())\n-    }\n+    Nvptx NvptxInlineAsmReg NvptxInlineAsmRegClass {}\n }"}, {"sha": "5faf4082f327c222ebd71d02337431c33f68b5ad", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa801a92900d1a44ab5efb005b4bbb0353af206/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=baa801a92900d1a44ab5efb005b4bbb0353af206", "patch": "@@ -1,6 +1,7 @@\n // no-system-llvm\n // assembly-output: emit-asm\n // compile-flags: --target --nvptx64-nvidia-cuda\n+// compile-flags: -Z merge-functions=disabled\n // only-nvptx64\n // ignore-nvptx64\n \n@@ -53,57 +54,87 @@ macro_rules! check {\n     ($func:ident $ty:ident, $class:ident $mov:literal) => {\n         #[no_mangle]\n         pub unsafe fn $func(x: $ty) -> $ty {\n-            // Hack to avoid function merging\n-            extern \"Rust\" {\n-                fn dont_merge(s: &str);\n-            }\n-            dont_merge(stringify!($func));\n-\n             let y;\n             asm!(concat!($mov, \" {}, {};\"), out($class) y, in($class) x);\n             y\n         }\n     };\n }\n \n-// CHECK-LABEL: reg_i8\n+// CHECK-LABEL: reg16_i8\n // CHECK: #APP\n // CHECK: mov.i16 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n // CHECK: #NO_APP\n-check!(reg_i8 i8 reg16 \"mov.i16\");\n+check!(reg16_i8 i8 reg16 \"mov.i16\");\n \n-// CHECK-LABEL: reg_i16\n+// CHECK-LABEL: reg16_i16\n // CHECK: #APP\n // CHECK: mov.i16 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n // CHECK: #NO_APP\n-check!(reg_i16 i16 reg16 \"mov.i16\");\n+check!(reg16_i16 i16 reg16 \"mov.i16\");\n+\n+// CHECK-LABEL: reg32_i8\n+// CHECK: #APP\n+// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg32_i8 i8 reg32 \"mov.i32\");\n+\n+// CHECK-LABEL: reg32_i16\n+// CHECK: #APP\n+// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg32_i16 i16 reg32 \"mov.i32\");\n \n-// CHECK-LABEL: reg_i32\n+// CHECK-LABEL: reg32_i32\n // CHECK: #APP\n // CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n // CHECK: #NO_APP\n-check!(reg_i32 i32 reg32 \"mov.i32\");\n+check!(reg32_i32 i32 reg32 \"mov.i32\");\n \n-// CHECK-LABEL: reg_f32\n+// CHECK-LABEL: reg32_f32\n // CHECK: #APP\n-// CHECK: mov.f32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg32_f32 f32 reg32 \"mov.i32\");\n+\n+// CHECK-LABEL: reg64_i8\n+// CHECK: #APP\n+// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n // CHECK: #NO_APP\n-check!(reg_f32 f32 freg32 \"mov.f32\");\n+check!(reg64_i8 i8 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg_i54\n+// CHECK-LABEL: reg64_i16\n // CHECK: #APP\n // CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n // CHECK: #NO_APP\n-check!(reg_i64 i64 reg64 \"mov.i64\");\n+check!(reg64_i16 i16 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg_f64\n+// CHECK-LABEL: reg64_i32\n // CHECK: #APP\n-// CHECK: mov.f64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg64_i32 i32 reg64 \"mov.i64\");\n+\n+// CHECK-LABEL: reg64_f32\n+// CHECK: #APP\n+// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg64_f32 f32 reg64 \"mov.i64\");\n+\n+// CHECK-LABEL: reg64_i64\n+// CHECK: #APP\n+// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg64_i64 i64 reg64 \"mov.i64\");\n+\n+// CHECK-LABEL: reg64_f64\n+// CHECK: #APP\n+// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n // CHECK: #NO_APP\n-check!(reg_f64 f64 freg64 \"mov.f64\");\n+check!(reg64_f64 f64 reg64 \"mov.i64\");\n \n-// CHECK-LABEL: reg_ptr\n+// CHECK-LABEL: reg64_ptr\n // CHECK: #APP\n // CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n // CHECK: #NO_APP\n-check!(reg_ptr ptr reg64 \"mov.i64\");\n+check!(reg64_ptr ptr reg64 \"mov.i64\");"}]}