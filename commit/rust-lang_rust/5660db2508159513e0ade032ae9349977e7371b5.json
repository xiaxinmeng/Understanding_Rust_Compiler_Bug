{"sha": "5660db2508159513e0ade032ae9349977e7371b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NjBkYjI1MDgxNTk1MTNlMGFkZTAzMmFlOTM0OTk3N2U3MzcxYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-05T07:17:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-05T07:17:09Z"}, "message": "auto merge of #16970 : kmcallister/rust/llvm-unreachable, r=thestinger\n\nI'm not sure how to add an automated test for this.", "tree": {"sha": "2a873cd9ebba0cd0ea61745ae4e08f35fb98cd1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a873cd9ebba0cd0ea61745ae4e08f35fb98cd1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5660db2508159513e0ade032ae9349977e7371b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5660db2508159513e0ade032ae9349977e7371b5", "html_url": "https://github.com/rust-lang/rust/commit/5660db2508159513e0ade032ae9349977e7371b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5660db2508159513e0ade032ae9349977e7371b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b8c528d083b2e1f6b34eceb518d60c5efdb4ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8c528d083b2e1f6b34eceb518d60c5efdb4ef4", "html_url": "https://github.com/rust-lang/rust/commit/3b8c528d083b2e1f6b34eceb518d60c5efdb4ef4"}, {"sha": "675aa7692dd1b75e63b11cd991be5efddbdb2acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/675aa7692dd1b75e63b11cd991be5efddbdb2acd", "html_url": "https://github.com/rust-lang/rust/commit/675aa7692dd1b75e63b11cd991be5efddbdb2acd"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "7d86b65168f3cdc2763cb5bc6a785196ee6bcd86", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5660db2508159513e0ade032ae9349977e7371b5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5660db2508159513e0ade032ae9349977e7371b5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5660db2508159513e0ade032ae9349977e7371b5", "patch": "@@ -250,6 +250,13 @@ extern \"rust-intrinsic\" {\n     /// Abort the execution of the process.\n     pub fn abort() -> !;\n \n+    /// Tell LLVM that this point in the code is not reachable,\n+    /// enabling further optimizations.\n+    ///\n+    /// NB: This is very different from the `unreachable!()` macro!\n+    #[cfg(not(stage0))]\n+    pub fn unreachable() -> !;\n+\n     /// Execute a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n "}, {"sha": "f9d55143c840073695079e4eabaccbd4137a6c6f", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5660db2508159513e0ade032ae9349977e7371b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5660db2508159513e0ade032ae9349977e7371b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=5660db2508159513e0ade032ae9349977e7371b5", "patch": "@@ -228,6 +228,10 @@ pub fn trans_intrinsic_call<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>, node: ast::N\n             Unreachable(bcx);\n             v\n         }\n+        (_, \"unreachable\") => {\n+            Unreachable(bcx);\n+            C_nil(ccx)\n+        }\n         (_, \"breakpoint\") => {\n             let llfn = ccx.get_intrinsic(&(\"llvm.debugtrap\"));\n             Call(bcx, llfn, [], None)"}, {"sha": "8aa78614d2e7e3df699cb78c414cec15ef4477f2", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5660db2508159513e0ade032ae9349977e7371b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5660db2508159513e0ade032ae9349977e7371b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5660db2508159513e0ade032ae9349977e7371b5", "patch": "@@ -5586,6 +5586,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n     } else {\n         match name.get() {\n             \"abort\" => (0, Vec::new(), ty::mk_bot()),\n+            \"unreachable\" => (0, Vec::new(), ty::mk_bot()),\n             \"breakpoint\" => (0, Vec::new(), ty::mk_nil()),\n             \"size_of\" |\n             \"pref_align_of\" | \"min_align_of\" => (1u, Vec::new(), ty::mk_uint()),"}, {"sha": "305e8a7ddc96894d79c54ebedbed52a666f8dc11", "filename": "src/test/run-make/intrinsic-unreachable/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2FMakefile?ref=5660db2508159513e0ade032ae9349977e7371b5", "patch": "@@ -0,0 +1,15 @@\n+-include ../tools.mk\n+\n+ifndef IS_WINDOWS\n+# The assembly for exit-unreachable.rs should be shorter because it's missing\n+# (at minimum) a return instruction.\n+\n+all:\n+\t$(RUSTC) -O --emit asm exit-ret.rs\n+\t$(RUSTC) -O --emit asm exit-unreachable.rs\n+\ttest `wc -l < $(TMPDIR)/exit-unreachable.s` -lt `wc -l < $(TMPDIR)/exit-ret.s`\n+else\n+# Because of Windows exception handling, the code is not necessarily any shorter.\n+# https://github.com/llvm-mirror/llvm/commit/64b2297786f7fd6f5fa24cdd4db0298fbf211466\n+all:\n+endif"}, {"sha": "02c03445ef4e6d804773e8c3fa300dd40353f15e", "filename": "src/test/run-make/intrinsic-unreachable/exit-ret.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-ret.rs?ref=5660db2508159513e0ade032ae9349977e7371b5", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(asm)]\n+#![crate_type=\"lib\"]\n+\n+pub fn exit(n: uint) {\n+    unsafe {\n+        // Pretend this asm is an exit() syscall.\n+        asm!(\"\" :: \"r\"(n) :: \"volatile\");\n+        // Can't actually reach this point, but rustc doesn't know that.\n+    }\n+}"}, {"sha": "835e068c15cfd2b468e3d851a069de3f692f7d67", "filename": "src/test/run-make/intrinsic-unreachable/exit-unreachable.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=5660db2508159513e0ade032ae9349977e7371b5", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(asm)]\n+#![crate_type=\"lib\"]\n+\n+use std::intrinsics;\n+\n+pub fn exit(n: uint) -> ! {\n+    unsafe {\n+        // Pretend this asm is an exit() syscall.\n+        asm!(\"\" :: \"r\"(n) :: \"volatile\");\n+        intrinsics::unreachable()\n+    }\n+}"}, {"sha": "5e8b758cdf68f873dec08f8ff88690caa65a7c99", "filename": "src/test/run-pass/intrinsic-unreachable.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5660db2508159513e0ade032ae9349977e7371b5/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs?ref=5660db2508159513e0ade032ae9349977e7371b5", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::intrinsics;\n+\n+// See also src/test/run-make/intrinsic-unreachable.\n+\n+unsafe fn f(x: uint) -> uint {\n+    match x {\n+        17 => 23,\n+        _ => intrinsics::unreachable(),\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(unsafe { f(17) }, 23);\n+}"}]}