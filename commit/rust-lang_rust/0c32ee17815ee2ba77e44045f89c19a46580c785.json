{"sha": "0c32ee17815ee2ba77e44045f89c19a46580c785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzJlZTE3ODE1ZWUyYmE3N2U0NDA0NWY4OWMxOWE0NjU4MGM3ODU=", "commit": {"author": {"name": "A C", "email": "achan1989@gmail.com", "date": "2019-09-16T20:45:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "Clean up `parse_bottom_expr`", "tree": {"sha": "aabe5241453e801d3a6ce4417fb0d9d113884c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aabe5241453e801d3a6ce4417fb0d9d113884c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c32ee17815ee2ba77e44045f89c19a46580c785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c32ee17815ee2ba77e44045f89c19a46580c785", "html_url": "https://github.com/rust-lang/rust/commit/0c32ee17815ee2ba77e44045f89c19a46580c785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c32ee17815ee2ba77e44045f89c19a46580c785/comments", "author": {"login": "achan1989", "id": 5672219, "node_id": "MDQ6VXNlcjU2NzIyMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5672219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achan1989", "html_url": "https://github.com/achan1989", "followers_url": "https://api.github.com/users/achan1989/followers", "following_url": "https://api.github.com/users/achan1989/following{/other_user}", "gists_url": "https://api.github.com/users/achan1989/gists{/gist_id}", "starred_url": "https://api.github.com/users/achan1989/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achan1989/subscriptions", "organizations_url": "https://api.github.com/users/achan1989/orgs", "repos_url": "https://api.github.com/users/achan1989/repos", "events_url": "https://api.github.com/users/achan1989/events{/privacy}", "received_events_url": "https://api.github.com/users/achan1989/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7908c550a2db5358a6d82a5bbc93a5fff4cec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7908c550a2db5358a6d82a5bbc93a5fff4cec5", "html_url": "https://github.com/rust-lang/rust/commit/0b7908c550a2db5358a6d82a5bbc93a5fff4cec5"}], "stats": {"total": 99, "additions": 39, "deletions": 60}, "files": [{"sha": "1033a815985f56a8695421c3b895097b3438344e", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 39, "deletions": 60, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0c32ee17815ee2ba77e44045f89c19a46580c785/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c32ee17815ee2ba77e44045f89c19a46580c785/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=0c32ee17815ee2ba77e44045f89c19a46580c785", "patch": "@@ -91,24 +91,29 @@ impl<'a> Parser<'a> {\n         self.parse_expr_res(Restrictions::empty(), None)\n     }\n \n+    fn parse_expr_catch_underscore(&mut self) -> PResult<'a, P<Expr>> {\n+        match self.parse_expr() {\n+            Ok(expr) => Ok(expr),\n+            Err(mut err) => match self.token.kind {\n+                token::Ident(name, false)\n+                if name == kw::Underscore && self.look_ahead(1, |t| {\n+                    t == &token::Comma\n+                }) => {\n+                    // Special-case handling of `foo(_, _, _)`\n+                    err.emit();\n+                    let sp = self.token.span;\n+                    self.bump();\n+                    Ok(self.mk_expr(sp, ExprKind::Err, ThinVec::new()))\n+                }\n+                _ => Err(err),\n+            },\n+        }\n+    }\n+\n+    /// Parses a sequence of expressions bounded by parentheses.\n     fn parse_paren_expr_seq(&mut self) -> PResult<'a, Vec<P<Expr>>> {\n         self.parse_paren_comma_seq(|p| {\n-            match p.parse_expr() {\n-                Ok(expr) => Ok(expr),\n-                Err(mut err) => match p.token.kind {\n-                    token::Ident(name, false)\n-                    if name == kw::Underscore && p.look_ahead(1, |t| {\n-                        t == &token::Comma\n-                    }) => {\n-                        // Special-case handling of `foo(_, _, _)`\n-                        err.emit();\n-                        let sp = p.token.span;\n-                        p.bump();\n-                        Ok(p.mk_expr(sp, ExprKind::Err, ThinVec::new()))\n-                    }\n-                    _ => Err(err),\n-                },\n-            }\n+            p.parse_expr_catch_underscore()\n         }).map(|(r, _)| r)\n     }\n \n@@ -845,51 +850,25 @@ impl<'a> Parser<'a> {\n                 parse_lit!()\n             }\n             token::OpenDelim(token::Paren) => {\n-                self.bump();\n-\n-                attrs.extend(self.parse_inner_attributes()?);\n-\n-                // `(e)` is parenthesized `e`.\n-                // `(e,)` is a tuple with only one field, `e`.\n-                let mut es = vec![];\n-                let mut trailing_comma = false;\n-                let mut recovered = false;\n-                while self.token != token::CloseDelim(token::Paren) {\n-                    es.push(match self.parse_expr() {\n-                        Ok(es) => es,\n-                        Err(mut err) => {\n-                            // Recover from parse error in tuple list.\n-                            match self.token.kind {\n-                                token::Ident(name, false)\n-                                if name == kw::Underscore && self.look_ahead(1, |t| {\n-                                    t == &token::Comma\n-                                }) => {\n-                                    // Special-case handling of `Foo<(_, _, _)>`\n-                                    err.emit();\n-                                    let sp = self.token.span;\n-                                    self.bump();\n-                                    self.mk_expr(sp, ExprKind::Err, ThinVec::new())\n-                                }\n-                                _ => return Ok(\n-                                    self.recover_seq_parse_error(token::Paren, lo, Err(err)),\n-                                ),\n-                            }\n-                        }\n-                    });\n-                    recovered = self.expect_one_of(\n-                        &[],\n-                        &[token::Comma, token::CloseDelim(token::Paren)],\n-                    )?;\n-                    if self.eat(&token::Comma) {\n-                        trailing_comma = true;\n-                    } else {\n-                        trailing_comma = false;\n-                        break;\n+                let mut first = true;\n+                let parse_leading_attr_expr = |this: &mut Parser<'a>| {\n+                    if first {\n+                        attrs.extend(this.parse_inner_attributes()?);\n+                        first = false;\n                     }\n-                }\n-                if !recovered {\n-                    self.bump();\n-                }\n+                    this.parse_expr_catch_underscore()\n+                };\n+\n+                // (e) is parenthesized e\n+                // (e,) is a tuple with only one field, e\n+                let (es, trailing_comma) =\n+                    match self.parse_paren_comma_seq(parse_leading_attr_expr)\n+                {\n+                    Ok(x) => x,\n+                    Err(err) => return Ok(\n+                        self.recover_seq_parse_error(token::Paren, lo, Err(err)),\n+                    ),\n+                };\n \n                 hi = self.prev_span;\n                 ex = if es.len() == 1 && !trailing_comma {"}]}