{"sha": "5299441954b4678f23f3c0c0b2080b3430a2d028", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOTk0NDE5NTRiNDY3OGYyM2YzYzBjMGIyMDgwYjM0MzBhMmQwMjg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-12-10T18:30:37Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-12-15T14:18:45Z"}, "message": "Regression tests for Issue 29793.", "tree": {"sha": "e826d69e511c46e5dba09c789f3a1e42e2736843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e826d69e511c46e5dba09c789f3a1e42e2736843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5299441954b4678f23f3c0c0b2080b3430a2d028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5299441954b4678f23f3c0c0b2080b3430a2d028", "html_url": "https://github.com/rust-lang/rust/commit/5299441954b4678f23f3c0c0b2080b3430a2d028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5299441954b4678f23f3c0c0b2080b3430a2d028/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00574848b029d3458326a728dae682e60323a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00574848b029d3458326a728dae682e60323a0d", "html_url": "https://github.com/rust-lang/rust/commit/c00574848b029d3458326a728dae682e60323a0d"}], "stats": {"total": 307, "additions": 307, "deletions": 0}, "files": [{"sha": "887f7836ee143e933d0d10cd0d29cd8b2f64e813", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-big.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5299441954b4678f23f3c0c0b2080b3430a2d028/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5299441954b4678f23f3c0c0b2080b3430a2d028/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs?ref=5299441954b4678f23f3c0c0b2080b3430a2d028", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #29793, big regression test: do not let borrows of\n+// parameters to ever be returned (expanded with exploration of\n+// variations).\n+//\n+// This is the version of the test that actually exposed unsound\n+// behavior (because the improperly accepted closure was actually\n+// able to be invoked).\n+\n+struct WrapA<F>(Option<F>);\n+\n+impl<F> WrapA<F> {\n+    fn new() -> WrapA<F> {\n+        WrapA(None)\n+    }\n+    fn set(mut self, f: F) -> Self {\n+        self.0 = Some(f);\n+        self\n+    }\n+}\n+\n+struct WrapB<F>(Option<F>);\n+\n+impl<F> WrapB<F> {\n+    fn new() -> WrapB<F> {\n+        WrapB(None)\n+    }\n+    fn set(mut self, f: F) -> Self {\n+        self.0 = Some(f);\n+        self\n+    }\n+}\n+\n+trait DoStuff : Sized {\n+    fn handle(self);\n+}\n+\n+impl<F, T> DoStuff for WrapA<F>\n+    where F: FnMut(usize, usize) -> T, T: DoStuff {\n+        fn handle(mut self) {\n+            if let Some(ref mut f) = self.0 {\n+                let x = f(1, 2);\n+                let _foo = [0usize; 16];\n+                x.handle();\n+            }\n+        }\n+    }\n+\n+impl<F> DoStuff for WrapB<F> where F: FnMut(bool) -> usize {\n+    fn handle(mut self) {\n+        if let Some(ref mut f) = self.0 {\n+            println!(\"{}\", f(true));\n+        }\n+    }\n+}\n+\n+impl<F, T> WrapA<F>\n+    where F: FnMut(usize, usize) -> T, T: DoStuff {\n+        fn handle_ref(&mut self) {\n+            if let Some(ref mut f) = self.0 {\n+                let x = f(1, 2);\n+            }\n+        }\n+    }\n+\n+fn main() {\n+    let mut w = WrapA::new().set(|x: usize, y: usize| {\n+        WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n+            //~^ ERROR `x` does not live long enough\n+            //~| ERROR `y` does not live long enough\n+    });\n+\n+    w.handle(); // This works\n+    // w.handle_ref(); // This doesn't\n+}"}, {"sha": "4fda8ec3f384ebaa2185e6c365d1bbefd54730be", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-small.rs", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/5299441954b4678f23f3c0c0b2080b3430a2d028/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5299441954b4678f23f3c0c0b2080b3430a2d028/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-small.rs?ref=5299441954b4678f23f3c0c0b2080b3430a2d028", "patch": "@@ -0,0 +1,223 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #29793, small regression tests: do not let borrows of\n+// parameters to ever be returned (expanded with exploration of\n+// variations).\n+\n+// CLOSURES\n+\n+fn escaping_borrow_of_closure_params_1() {\n+    let g = |x: usize, y:usize| {\n+        let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+        //~^ ERROR `x` does not live long enough\n+        //~| ERROR `y` does not live long enough\n+        return f;\n+    };\n+\n+    // We delberately do not call `g`; this small version of the test,\n+    // after adding such a call, was (properly) rejected even when the\n+    // system still suffered from issue #29793.\n+\n+    // g(10, 20)(true);\n+}\n+\n+fn escaping_borrow_of_closure_params_2() {\n+    let g = |x: usize, y:usize| {\n+        let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+        //~^ ERROR `x` does not live long enough\n+        //~| ERROR `y` does not live long enough\n+        f\n+    };\n+\n+    // (we don't call `g`; see above)\n+}\n+\n+fn move_of_closure_params() {\n+    let g = |x: usize, y:usize| {\n+        let f = move |t: bool| if t { x } else { y };\n+        f;\n+    };\n+    // (this code is fine, so lets go ahead and ensure rustc accepts call of `g`)\n+    (g(1,2));\n+}\n+\n+fn ok_borrow_of_fn_params(a: usize, b:usize) {\n+    let g = |x: usize, y:usize| {\n+        let f = |t: bool| if t { a } else { b };\n+        return f;\n+    };\n+    // (this code is fine, so lets go ahead and ensure rustc accepts call of `g`)\n+    (g(1,2))(true);\n+}\n+\n+// TOP-LEVEL FN'S\n+\n+fn escaping_borrow_of_fn_params_1() {\n+    fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+        let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+        //~^ ERROR E0373\n+        //~| ERROR E0373\n+        return Box::new(f);\n+    };\n+\n+    // (we don't call `g`; see above)\n+}\n+\n+fn escaping_borrow_of_fn_params_2() {\n+    fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+        let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+        //~^ ERROR E0373\n+        //~| ERROR E0373\n+        Box::new(f)\n+    };\n+\n+    // (we don't call `g`; see above)\n+}\n+\n+fn move_of_fn_params() {\n+    fn g<'a>(x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+        let f = move |t: bool| if t { x } else { y };\n+        return Box::new(f);\n+    };\n+    // (this code is fine, so lets go ahead and ensure rustc accepts call of `g`)\n+    (g(1,2))(true);\n+}\n+\n+// INHERENT METHODS\n+\n+fn escaping_borrow_of_method_params_1() {\n+    struct S;\n+    impl S {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+            //~^ ERROR E0373\n+            //~| ERROR E0373\n+            return Box::new(f);\n+        }\n+    }\n+\n+    // (we don't call `g`; see above)\n+}\n+\n+fn escaping_borrow_of_method_params_2() {\n+    struct S;\n+    impl S {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+            //~^ ERROR E0373\n+            //~| ERROR E0373\n+            Box::new(f)\n+        }\n+    }\n+    // (we don't call `g`; see above)\n+}\n+\n+fn move_of_method_params() {\n+    struct S;\n+    impl S {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = move |t: bool| if t { x } else { y };\n+            return Box::new(f);\n+        }\n+    }\n+    // (this code is fine, so lets go ahead and ensure rustc accepts call of `g`)\n+    (S.g(1,2))(true);\n+}\n+\n+// TRAIT IMPL METHODS\n+\n+fn escaping_borrow_of_trait_impl_params_1() {\n+    trait T { fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a>; }\n+    struct S;\n+    impl T for S {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+            //~^ ERROR E0373\n+            //~| ERROR E0373\n+            return Box::new(f);\n+        }\n+    }\n+\n+    // (we don't call `g`; see above)\n+}\n+\n+fn escaping_borrow_of_trait_impl_params_2() {\n+    trait T { fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a>; }\n+    struct S;\n+    impl T for S {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+            //~^ ERROR E0373\n+            //~| ERROR E0373\n+            Box::new(f)\n+        }\n+    }\n+    // (we don't call `g`; see above)\n+}\n+\n+fn move_of_trait_impl_params() {\n+    trait T { fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a>; }\n+    struct S;\n+    impl T for S {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = move |t: bool| if t { x } else { y };\n+            return Box::new(f);\n+        }\n+    }\n+    // (this code is fine, so lets go ahead and ensure rustc accepts call of `g`)\n+    (S.g(1,2))(true);\n+}\n+\n+// TRAIT DEFAULT METHODS\n+\n+fn escaping_borrow_of_trait_default_params_1() {\n+    struct S;\n+    trait T {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+            //~^ ERROR E0373\n+            //~| ERROR E0373\n+            return Box::new(f);\n+        }\n+    }\n+    impl T for S {}\n+    // (we don't call `g`; see above)\n+}\n+\n+fn escaping_borrow_of_trait_default_params_2() {\n+    struct S;\n+    trait T {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+            //~^ ERROR E0373\n+            //~| ERROR E0373\n+            Box::new(f)\n+        }\n+    }\n+    impl T for S {}\n+    // (we don't call `g`; see above)\n+}\n+\n+fn move_of_trait_default_params() {\n+    struct S;\n+    trait T {\n+        fn g<'a>(&self, x: usize, y:usize) -> Box<Fn(bool) -> usize + 'a> {\n+            let f = move |t: bool| if t { x } else { y };\n+            return Box::new(f);\n+        }\n+    }\n+    impl T for S {}\n+    // (this code is fine, so lets go ahead and ensure rustc accepts call of `g`)\n+    (S.g(1,2))(true);\n+}\n+\n+fn main() { }\n+"}]}