{"sha": "21be1379d561b6679a8a2ea47dce88f948c5acca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmUxMzc5ZDU2MWI2Njc5YThhMmVhNDdkY2U4OGY5NDhjNWFjY2E=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-02T22:34:49Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-02T23:12:49Z"}, "message": "Rename some core::option functions\n\nfrom_maybe => get_with_default\nmaybe => with_option\nmay => with_option_do\n\nI know these names are kind of ridiculous, but it's the best I could think of.\nFeel free to bikeshed. Closes #2081", "tree": {"sha": "25b911b9e5071d1512a3e5ff5d66b91716645c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25b911b9e5071d1512a3e5ff5d66b91716645c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21be1379d561b6679a8a2ea47dce88f948c5acca", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21be1379d561b6679a8a2ea47dce88f948c5acca", "html_url": "https://github.com/rust-lang/rust/commit/21be1379d561b6679a8a2ea47dce88f948c5acca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21be1379d561b6679a8a2ea47dce88f948c5acca/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987bc2362926d0672a01e8d5964940743df48cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/987bc2362926d0672a01e8d5964940743df48cb6", "html_url": "https://github.com/rust-lang/rust/commit/987bc2362926d0672a01e8d5964940743df48cb6"}], "stats": {"total": 131, "additions": 67, "deletions": 64}, "files": [{"sha": "66f3070de6c4ea81c39a6b11277e3d40ee9a5af9", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -1551,7 +1551,7 @@ programs that just can't be typed.\n \n ~~~~\n let n = option::none;\n-# option::may(n, fn&(&&x:int) {})\n+# option::with_option_do(n, fn&(&&x:int) {})\n ~~~~\n \n If you never do anything else with `n`, the compiler will not be able"}, {"sha": "004fa08960fac373ab629a76435111f87b3aceb3", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -40,7 +40,7 @@ fn load_props(testfile: str) -> test_props {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n \n-        option::may(parse_aux_build(ln)) {|ab|\n+        option::with_option_do(parse_aux_build(ln)) {|ab|\n             aux_builds += [ab];\n         }\n     };"}, {"sha": "9e8abefb4a04a43f0845368a677cfee6d536641a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -29,7 +29,7 @@ impl<A> of iterable<A> for [A] {\n \n impl<A> of iterable<A> for option<A> {\n     fn iter(blk: fn(A)) {\n-        option::may(self, blk)\n+        option::with_option_do(self, blk)\n     }\n }\n "}, {"sha": "daf9a2293542f3a074e43e28c27d8918de05513d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -52,19 +52,19 @@ pure fn is_some<T>(opt: option<T>) -> bool {\n     !is_none(opt)\n }\n \n-pure fn from_maybe<T: copy>(opt: option<T>, def: T) -> T {\n+pure fn get_or_default<T: copy>(opt: option<T>, def: T) -> T {\n     #[doc = \"Returns the contained value or a default\"];\n \n     alt opt { some(x) { x } none { def } }\n }\n \n-fn maybe<T, U: copy>(opt: option<T>, def: U, f: fn(T) -> U) -> U {\n+fn with_option<T, U: copy>(opt: option<T>, def: U, f: fn(T) -> U) -> U {\n     #[doc = \"Applies a function to the contained value or returns a default\"];\n \n     alt opt { none { def } some(t) { f(t) } }\n }\n \n-fn may<T>(opt: option<T>, f: fn(T)) {\n+fn with_option_do<T>(opt: option<T>, f: fn(T)) {\n     #[doc = \"Performs an operation on the contained value or does nothing\"];\n \n     alt opt { none { } some(t) { f(t); } }\n@@ -94,11 +94,12 @@ impl extensions<T:copy> for option<T> {\n     \"]\n     fn chain<U>(f: fn(T) -> option<U>) -> option<U> { chain(self, f) }\n     #[doc = \"Returns the contained value or a default\"]\n-    fn from_maybe(def: T) -> T { from_maybe(self, def) }\n+    fn get_or_default(def: T) -> T { get_or_default(self, def) }\n     #[doc = \"Applies a function to the contained value or returns a default\"]\n-    fn maybe<U: copy>(def: U, f: fn(T) -> U) -> U { maybe(self, def, f) }\n+    fn with_option<U: copy>(def: U, f: fn(T) -> U) -> U\n+        { with_option(self, def, f) }\n     #[doc = \"Performs an operation on the contained value or does nothing\"]\n-    fn may(f: fn(T)) { may(self, f) }\n+    fn with_option_do(f: fn(T)) { with_option_do(self, f) }\n     #[doc = \"\n     Gets the value out of an option\n "}, {"sha": "3e7b2dba94380e41d8b8f96f9ea892a8459ae832", "filename": "src/libcore/os.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -702,7 +702,7 @@ mod tests {\n         setenv(\"HOME\", \"\");\n         assert os::homedir() == none;\n \n-        option::may(oldhome, {|s| setenv(\"HOME\", s)});\n+        option::with_option_do(oldhome, {|s| setenv(\"HOME\", s)});\n     }\n \n     #[test]\n@@ -732,8 +732,9 @@ mod tests {\n         setenv(\"USERPROFILE\", \"/home/PaloAlto\");\n         assert os::homedir() == some(\"/home/MountainView\");\n \n-        option::may(oldhome, {|s| setenv(\"HOME\", s)});\n-        option::may(olduserprofile, {|s| setenv(\"USERPROFILE\", s)});\n+        option::with_option_do(oldhome, {|s| setenv(\"HOME\", s)});\n+        option::with_option_do(olduserprofile,\n+                               {|s| setenv(\"USERPROFILE\", s)});\n     }\n \n     // Issue #712"}, {"sha": "3957bd31a1092d7ec7b3685ede3e8103d57dd46c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -20,10 +20,9 @@ If the result is an error\n pure fn get<T: copy, U>(res: result<T, U>) -> T {\n     alt res {\n       ok(t) { t }\n-      err(_) {\n-        // FIXME: Serialize the error value\n-        // and include it in the fail message (maybe just note it)\n-        fail \"get called on error result\";\n+      err(the_err) {\n+        // FIXME: have a run-fail test for this\n+        unchecked{ fail #fmt(\"get called on error result: %?\", the_err); }\n       }\n     }\n }"}, {"sha": "dc2dd5d179e26854314c2fc5f80414c6de126890", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -498,7 +498,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n       }\n     };\n \n-    option::may(opts.notify_chan) {|c|\n+    option::with_option_do(opts.notify_chan) {|c|\n         // FIXME (1087): Would like to do notification in Rust\n         rustrt::rust_task_config_notify(new_task, c);\n     }"}, {"sha": "e29c11cbb116fe6dba56d3923501a8f875aaf694", "filename": "src/librustsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fdiagnostic.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -243,8 +243,8 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n }\n \n fn print_macro_backtrace(cm: codemap::codemap, sp: span) {\n-    option::may (sp.expn_info) {|ei|\n-        let ss = option::maybe(ei.callie.span, \"\",\n+    option::with_option_do (sp.expn_info) {|ei|\n+        let ss = option::with_option(ei.callie.span, \"\",\n                                bind codemap::span_to_str(_, cm));\n         print_diagnostic(ss, note,\n                          #fmt(\"in expansion of #%s\", ei.callie.name));"}, {"sha": "b38dbccd7b1852f059c62ec34d9d5d9d4317a6ae", "filename": "src/librustsyntax/ext/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fqquote.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -135,7 +135,7 @@ fn expand_ast(ecx: ext_ctxt, _sp: span,\n     -> @ast::expr\n {\n     let mut what = \"expr\";\n-    option::may(arg) {|arg|\n+    option::with_option_do(arg) {|arg|\n         let args: [@ast::expr] =\n             alt arg.node {\n               ast::expr_vec(elts, _) { elts }"}, {"sha": "a9e0ce9845e604c50e5e98bfdd20073e1eeebe8f", "filename": "src/librustsyntax/parse/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Feval.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -23,7 +23,7 @@ fn eval_crate_directives_to_mod(cx: ctx, cdirs: [@ast::crate_directive],\n     -> (ast::_mod, [ast::attribute]) {\n     #debug(\"eval crate prefix: %s\", prefix);\n     #debug(\"eval crate suffix: %s\",\n-           option::from_maybe(suffix, \"none\"));\n+           option::get_or_default(suffix, \"none\"));\n     let (cview_items, citems, cattrs)\n         = parse_companion_mod(cx, prefix, suffix);\n     let mut view_items: [@ast::view_item] = [];"}, {"sha": "6f53344926b5e8bf222aea826892d44d85c6f489", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -792,7 +792,7 @@ fn print_mac(s: ps, m: ast::mac) {\n           some(@{node: ast::expr_vec(_, _), _}) { }\n           _ { word(s.s, \" \"); }\n         }\n-        option::may(arg, bind print_expr(s, _));\n+        option::with_option_do(arg, bind print_expr(s, _));\n         // FIXME: extension 'body'\n       }\n       ast::mac_embed_type(ty) {"}, {"sha": "c4e5da667432edbe1c82f89a136f0b3221fb0b9a", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -225,7 +225,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n       }\n       pat_ident(path, inner) {\n           visit_path(path, e, v);\n-          option::may(inner, {|subpat| v.visit_pat(subpat, e, v)});\n+          option::with_option_do(inner, {|subpat| v.visit_pat(subpat, e, v)});\n       }\n       pat_lit(ex) { v.visit_expr(ex, e, v); }\n       pat_range(e1, e2) { v.visit_expr(e1, e, v); v.visit_expr(e2, e, v); }"}, {"sha": "8bc96a45ed6d9465b9eec68ccd48d8be5a406532", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -692,15 +692,15 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n \n     #debug[\"Encoding side tables for id %d\", id];\n \n-    option::may(tcx.def_map.find(id)) {|def|\n+    option::with_option_do(tcx.def_map.find(id)) {|def|\n         ebml_w.tag(c::tag_table_def) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n                 ast::serialize_def(ebml_w, def)\n             }\n         }\n     }\n-    option::may((*tcx.node_types).find(id as uint)) {|ty|\n+    option::with_option_do((*tcx.node_types).find(id as uint)) {|ty|\n         ebml_w.tag(c::tag_table_node_type) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -709,7 +709,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::may(tcx.node_type_substs.find(id)) {|tys|\n+    option::with_option_do(tcx.node_type_substs.find(id)) {|tys|\n         ebml_w.tag(c::tag_table_node_type_subst) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -718,7 +718,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::may(tcx.freevars.find(id)) {|fv|\n+    option::with_option_do(tcx.freevars.find(id)) {|fv|\n         ebml_w.tag(c::tag_table_freevars) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -730,7 +730,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     }\n \n     let lid = {crate: ast::local_crate, node: id};\n-    option::may(tcx.tcache.find(lid)) {|tpbt|\n+    option::with_option_do(tcx.tcache.find(lid)) {|tpbt|\n         ebml_w.tag(c::tag_table_tcache) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -739,7 +739,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::may(tcx.ty_param_bounds.find(id)) {|pbs|\n+    option::with_option_do(tcx.ty_param_bounds.find(id)) {|pbs|\n         ebml_w.tag(c::tag_table_param_bounds) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -753,7 +753,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     // is what we actually use in trans, all modes will have been\n     // resolved.\n     //\n-    //option::may(tcx.inferred_modes.find(id)) {|m|\n+    //option::with_option_do(tcx.inferred_modes.find(id)) {|m|\n     //    ebml_w.tag(c::tag_table_inferred_modes) {||\n     //        ebml_w.id(id);\n     //        ebml_w.tag(c::tag_table_val) {||\n@@ -762,25 +762,25 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     //    }\n     //}\n \n-    option::may(ccx.maps.mutbl_map.find(id)) {|_m|\n+    option::with_option_do(ccx.maps.mutbl_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_mutbl) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::may(ccx.maps.copy_map.find(id)) {|_m|\n+    option::with_option_do(ccx.maps.copy_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_copy) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::may(ccx.maps.spill_map.find(id)) {|_m|\n+    option::with_option_do(ccx.maps.spill_map.find(id)) {|_m|\n         ebml_w.tag(c::tag_table_spill) {||\n             ebml_w.id(id);\n         }\n     }\n \n-    option::may(ccx.maps.last_uses.find(id)) {|m|\n+    option::with_option_do(ccx.maps.last_uses.find(id)) {|m|\n         ebml_w.tag(c::tag_table_last_use) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -792,7 +792,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n     // impl_map is not used except when emitting metadata,\n     // don't need to keep it.\n \n-    option::may(ccx.maps.method_map.find(id)) {|mo|\n+    option::with_option_do(ccx.maps.method_map.find(id)) {|mo|\n         ebml_w.tag(c::tag_table_method_map) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||\n@@ -801,7 +801,7 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n-    option::may(ccx.maps.vtable_map.find(id)) {|dr|\n+    option::with_option_do(ccx.maps.vtable_map.find(id)) {|dr|\n         ebml_w.tag(c::tag_table_vtable_map) {||\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val) {||"}, {"sha": "473bf8b4e54de29aa0550657f7b87e698308a920", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -163,7 +163,7 @@ fn get_dep_hashes(cstore: cstore) -> [str] {\n \n fn get_path(cstore: cstore, d: ast::def_id) -> [str] {\n     // let f = bind str::split_str(_, \"::\");\n-    option::maybe(p(cstore).mod_path_map.find(d), [],\n+    option::with_option(p(cstore).mod_path_map.find(d), [],\n                   {|ds| str::split_str(ds, \"::\")})\n }\n // Local Variables:"}, {"sha": "2a2438b52a7bde64aeb47080f92cc230174e24f8", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -120,7 +120,7 @@ fn class_member_id(d: ebml::doc, cdata: cmd) -> ast::def_id {\n \n fn field_mutability(d: ebml::doc) -> ast::class_mutability {\n     // Use maybe_get_doc in case it's a method\n-    option::maybe(ebml::maybe_get_doc(d, tag_class_mut),\n+    option::with_option(ebml::maybe_get_doc(d, tag_class_mut),\n                   ast::class_immutable,\n                   {|d|\n                   alt ebml::doc_as_u8(d) as char {"}, {"sha": "0284bbd431055118034a4d0d3744edde991cdd34", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -19,7 +19,7 @@ fn check_item(it: @item, &&_is_const: bool, v: visit::vt<bool>) {\n       item_const(_, ex) { v.visit_expr(ex, true, v); }\n       item_enum(vs, _) {\n         for var in vs {\n-            option::may(var.node.disr_expr) {|ex|\n+            option::with_option_do(var.node.disr_expr) {|ex|\n                 v.visit_expr(ex, true, v);\n             }\n         }"}, {"sha": "8449e995eda2dbe3ca1618cf7b1b4ea742179509", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -183,7 +183,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         }\n       }\n       expr_path(_) | expr_field(_, _, _) {\n-        option::may(cx.tcx.node_type_substs.find(e.id)) {|ts|\n+        option::with_option_do(cx.tcx.node_type_substs.find(e.id)) {|ts|\n             let bounds = alt check e.node {\n               expr_path(_) {\n                 let did = ast_util::def_id_of_def(cx.tcx.def_map.get(e.id));\n@@ -235,7 +235,7 @@ fn check_stmt(stmt: @stmt, cx: ctx, v: visit::vt<ctx>) {\n fn check_ty(aty: @ty, cx: ctx, v: visit::vt<ctx>) {\n     alt aty.node {\n       ty_path(_, id) {\n-        option::may(cx.tcx.node_type_substs.find(id)) {|ts|\n+        option::with_option_do(cx.tcx.node_type_substs.find(id)) {|ts|\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(id));\n             let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n             vec::iter2(ts, *bounds) {|ty, bound|"}, {"sha": "08b6add9ccd22d1d9587b8f163219ff7c52d2a47", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -137,7 +137,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n             clear_in_current(cx, root_id, false);\n           }\n           _ {\n-            option::may(def_is_owned_local(cx, my_def)) {|nid|\n+            option::with_option_do(def_is_owned_local(cx, my_def)) {|nid|\n                 clear_in_current(cx, nid, false);\n                 cx.current += [{def: nid,\n                                 uses: cons(var_use(ex.id), @nil)}];\n@@ -192,7 +192,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n                 alt ty::arg_mode(cx.tcx, arg_t) {\n                   by_ref | by_val | by_mutbl_ref {\n                     let def = cx.def_map.get(arg.id);\n-                    option::may(def_is_owned_local(cx, def)) {|id|\n+                    option::with_option_do(def_is_owned_local(cx, def)) {|id|\n                         clear_in_current(cx, id, false);\n                         cx.spill_map.insert(id, ());\n                     }\n@@ -247,7 +247,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n         alt cx.tcx.freevars.find(id) {\n           some(vars) {\n             for v in *vars {\n-                option::may(def_is_owned_local(cx, v.def)) {|nid|\n+                option::with_option_do(def_is_owned_local(cx, v.def)) {|nid|\n                     clear_in_current(cx, nid, false);\n                     cx.current += [{def: nid,\n                                     uses: cons(close_over(id), @nil)}];"}, {"sha": "972fdc186a9c6f9bb36eb90f7d0864ae8e026946", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -1936,7 +1936,7 @@ fn check_exports(e: @env) {\n \n \n     fn maybe_add_reexport(e: @env, export_id: node_id, def: option<def>) {\n-        option::may(def) {|def|\n+        option::with_option_do(def) {|def|\n             add_export(e, export_id, def_id_of_def(def), true);\n         }\n     }\n@@ -2118,7 +2118,7 @@ fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n           ast::view_path_simple(name, pt, id) {\n             let mut found = [];\n             if vec::len(*pt) == 1u {\n-                option::may(sc) {|sc|\n+                option::with_option_do(sc) {|sc|\n                     list::iter(sc) {|level|\n                         if vec::len(found) == 0u {\n                             for imp in *level {"}, {"sha": "0a3e20793e19df854e8ed318dfd71b723268bb5c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -1657,7 +1657,7 @@ fn trans_if(cx: block, cond: @ast::expr, thn: ast::blk,\n     let then_cx = scope_block(bcx, \"then\");\n     then_cx.block_span = some(thn.span);\n     let else_cx = scope_block(bcx, \"else\");\n-    option::may(els) {|e| else_cx.block_span = some(e.span); }\n+    option::with_option_do(els) {|e| else_cx.block_span = some(e.span); }\n     CondBr(bcx, cond_val, then_cx.llbb, else_cx.llbb);\n     let then_bcx = trans_block(then_cx, thn, then_dest);\n     let then_bcx = trans_block_cleanups(then_bcx, then_cx);\n@@ -2744,7 +2744,7 @@ fn trans_call_inner(in_cx: block, fn_expr_ty: ty::t, ret_ty: ty::t,\n             Unreachable(bcx);\n         } else if ret_in_loop {\n             bcx = with_cond(bcx, Load(bcx, option::get(ret_flag))) {|bcx|\n-                option::may(bcx.fcx.loop_ret) {|lret|\n+                option::with_option_do(bcx.fcx.loop_ret) {|lret|\n                     Store(bcx, C_bool(true), lret.flagptr);\n                     Store(bcx, C_bool(false), bcx.fcx.llretptr);\n                 }\n@@ -3816,7 +3816,7 @@ fn alloc_local(cx: block, local: @ast::local) -> block {\n     }\n     let val = alloc_ty(cx, t);\n     if cx.sess().opts.debuginfo {\n-        option::may(simple_name) {|name|\n+        option::with_option_do(simple_name) {|name|\n             str::as_c_str(name, {|buf|\n                 llvm::LLVMSetValueName(val, buf)\n             });"}, {"sha": "8bcb022799c3a9547d31d34cf5ea7f5f9abeb577", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -325,7 +325,7 @@ fn build_closure(bcx0: block,\n           }\n         }\n     }\n-    option::may(include_ret_handle) {|flagptr|\n+    option::with_option_do(include_ret_handle) {|flagptr|\n         let our_ret = alt bcx.fcx.loop_ret {\n           some({retptr, _}) { retptr }\n           none { bcx.fcx.llretptr }"}, {"sha": "2878180f96059c3bfb51aa3081876ba322156921", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -842,7 +842,7 @@ fn hash_mono_id(&&mi: mono_id) -> uint {\n         h = h * alt param {\n           mono_precise(ty, vts) {\n             let mut h = ty::type_id(ty);\n-            option::may(vts) {|vts|\n+            option::with_option_do(vts) {|vts|\n                 for vec::each(vts) {|vt| h += hash_mono_id(vt); }\n             }\n             h"}, {"sha": "00745b77f5765abbaebd86f95c851ec323f6e8bb", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -51,7 +51,7 @@ fn traverse_exports(cx: ctx, vis: [@view_item]) -> bool {\n }\n \n fn traverse_export(cx: ctx, exp_id: node_id) {\n-    option::may(cx.exp_map.find(exp_id)) {|defs|\n+    option::with_option_do(cx.exp_map.find(exp_id)) {|defs|\n         for vec::each(defs) {|def| traverse_def_id(cx, def.id); }\n     }\n }"}, {"sha": "4cf0899150a48c0535101893d18dd14f7824d9da", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -146,7 +146,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n         }\n       }\n       expr_path(_) {\n-        option::may(cx.ccx.tcx.node_type_substs.find(e.id)) {|ts|\n+        option::with_option_do(cx.ccx.tcx.node_type_substs.find(e.id)) {|ts|\n             let id = ast_util::def_id_of_def(cx.ccx.tcx.def_map.get(e.id));\n             vec::iter2(type_uses_for(cx.ccx, id, ts.len()), ts) {|uses, subst|\n                 type_needs(cx, uses, subst)\n@@ -215,7 +215,7 @@ fn handle_body(cx: ctx, body: blk) {\n         },\n         visit_block: {|b, cx, v|\n             visit::visit_block(b, cx, v);\n-            option::may(b.node.expr) {|e|\n+            option::with_option_do(b.node.expr) {|e|\n                 node_type_needs(cx, use_repr, e.id);\n             }\n         },"}, {"sha": "43ebc69ba3ff689fc6634eafa404fe59ce27966a", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -336,7 +336,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n \n         let use_cap_item = fn@(&&cap_item: @capture_item) {\n             let d = local_node_id_to_local_def_id(fcx, cap_item.id);\n-            option::may(d, { |id| use_var(fcx, id) });\n+            option::with_option_do(d, { |id| use_var(fcx, id) });\n         };\n         vec::iter(cap_clause.copies, use_cap_item);\n         vec::iter(cap_clause.moves, use_cap_item);"}, {"sha": "8f1b11fd576545d1ef67a91f61c19f2589a7b534", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -410,7 +410,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n \n         let base_pres = alt vec::last_opt(exs) { none { pres }\n                           some(f) { expr_poststate(fcx.ccx, f) }};\n-        option::may(maybe_base, {|base|\n+        option::with_option_do(maybe_base, {|base|\n             changed |= find_pre_post_state_expr(fcx, base_pres, base) |\n               set_poststate_ann(fcx.ccx, e.id,\n                                 expr_poststate(fcx.ccx, base))});\n@@ -611,7 +611,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         handle_fail(fcx, pres, post);\n         ret set_prestate_ann(fcx.ccx, e.id, pres) |\n                 set_poststate_ann(fcx.ccx, e.id, post) |\n-                option::maybe(maybe_fail_val, false, {|fail_val|\n+                option::with_option(maybe_fail_val, false, {|fail_val|\n                         find_pre_post_state_expr(fcx, pres, fail_val)});\n       }\n       expr_check(_, p) {"}, {"sha": "6a7f7e1a05dd38248afcdc5e6cfeda608d2aa591", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -385,7 +385,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            region_map: @middle::region::region_map) -> ctxt {\n     let interner = map::hashmap({|&&k: intern_key|\n         hash_type_structure(k.struct) +\n-            option::maybe(k.o_def_id, 0u, ast_util::hash_def_id)\n+            option::with_option(k.o_def_id, 0u, ast_util::hash_def_id)\n     }, {|&&a, &&b| a == b});\n     @{interner: interner,\n       mut next_id: 0u,"}, {"sha": "db8bc72c0aeb26264e0ca8f916fc51dadb15a769", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -3170,7 +3170,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_rec(fields, base) {\n-        option::may(base) {|b| check_expr(fcx, b); }\n+        option::with_option_do(base) {|b| check_expr(fcx, b); }\n         let fields_t = vec::map(fields, {|f|\n             bot |= check_expr(fcx, f.node.expr);\n             let expr_t = fcx.expr_ty(f.node.expr);"}, {"sha": "f36f3688a3abf1b21e7ea3743417083b846aed7c", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -50,7 +50,7 @@ fn fold_crate(\n     {\n         topmod: {\n             item: {\n-                name: option::from_maybe(attrs.name, doc.topmod.name())\n+                name: option::get_or_default(attrs.name, doc.topmod.name())\n                 with doc.topmod.item\n             }\n             with doc.topmod"}, {"sha": "eda5acb18117e6056bfc9cea5d8b75eab69b872b", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -125,14 +125,15 @@ fn config_from_opts(\n     let result = result::chain(result) {|config|\n         let output_dir = getopts::opt_maybe_str(match, opt_output_dir());\n         result::ok({\n-            output_dir: option::from_maybe(output_dir, config.output_dir)\n+            output_dir: option::get_or_default(output_dir, config.output_dir)\n             with config\n         })\n     };\n     let result = result::chain(result) {|config|\n         let output_format = getopts::opt_maybe_str(\n             match, opt_output_format());\n-        option::maybe(output_format, result::ok(config)) {|output_format|\n+        option::with_option(output_format, result::ok(config))\n+           {|output_format|\n             result::chain(parse_output_format(output_format)) {|output_format|\n                 result::ok({\n                     output_format: output_format\n@@ -143,7 +144,8 @@ fn config_from_opts(\n     };\n     let result = result::chain(result) {|config|\n         let output_style = getopts::opt_maybe_str(match, opt_output_style());\n-        option::maybe(output_style, result::ok(config)) {|output_style|\n+        option::with_option(output_style, result::ok(config))\n+          {|output_style|\n             result::chain(parse_output_style(output_style)) {|output_style|\n                 result::ok({\n                     output_style: output_style"}, {"sha": "f50e93e1464ff3f53005ce0628b59be42806ed2e", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be1379d561b6679a8a2ea47dce88f948c5acca/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=21be1379d561b6679a8a2ea47dce88f948c5acca", "patch": "@@ -195,7 +195,7 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n             }\n \n             if reexportdocs.len() > 0u {\n-                option::may(path_map.find(modpath)) {|docs|\n+                option::with_option_do(path_map.find(modpath)) {|docs|\n                     reexportdocs = docs + vec::filter(reexportdocs, {|x|\n                         !vec::contains(docs, x)\n                     });"}]}