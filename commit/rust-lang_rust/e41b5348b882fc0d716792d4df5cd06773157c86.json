{"sha": "e41b5348b882fc0d716792d4df5cd06773157c86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MWI1MzQ4Yjg4MmZjMGQ3MTY3OTJkNGRmNWNkMDY3NzMxNTdjODY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-03T21:42:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-03T21:42:59Z"}, "message": "`replace_qualified_name_with_use` insert qualified import paths", "tree": {"sha": "2dd96d18ec0cb0173eb7a1f2370363cce49b6cae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dd96d18ec0cb0173eb7a1f2370363cce49b6cae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41b5348b882fc0d716792d4df5cd06773157c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41b5348b882fc0d716792d4df5cd06773157c86", "html_url": "https://github.com/rust-lang/rust/commit/e41b5348b882fc0d716792d4df5cd06773157c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41b5348b882fc0d716792d4df5cd06773157c86/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73328f22a35af388c835bec827c1e3422250cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73328f22a35af388c835bec827c1e3422250cab", "html_url": "https://github.com/rust-lang/rust/commit/e73328f22a35af388c835bec827c1e3422250cab"}], "stats": {"total": 514, "additions": 76, "deletions": 438}, "files": [{"sha": "7aad4a44b6af6ab6906d960d8d0e0ae3457b3e1d", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 70, "deletions": 434, "changes": 504, "blob_url": "https://github.com/rust-lang/rust/blob/e41b5348b882fc0d716792d4df5cd06773157c86/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41b5348b882fc0d716792d4df5cd06773157c86/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=e41b5348b882fc0d716792d4df5cd06773157c86", "patch": "@@ -1,4 +1,8 @@\n-use ide_db::helpers::insert_use::{insert_use, ImportScope};\n+use hir::AsAssocItem;\n+use ide_db::helpers::{\n+    insert_use::{insert_use, ImportScope},\n+    mod_path_to_ast,\n+};\n use syntax::{ast, match_ast, ted, AstNode, SyntaxNode};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -8,12 +12,14 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // Adds a use statement for a given fully-qualified name.\n //\n // ```\n+// # mod std { pub mod collections { pub struct HashMap<T, U>(T, U); } }\n // fn process(map: std::collections::$0HashMap<String, String>) {}\n // ```\n // ->\n // ```\n // use std::collections::HashMap;\n //\n+// # mod std { pub mod collections { pub struct HashMap<T, U>(T, U); } }\n // fn process(map: HashMap<String, String>) {}\n // ```\n pub(crate) fn replace_qualified_name_with_use(\n@@ -22,16 +28,30 @@ pub(crate) fn replace_qualified_name_with_use(\n ) -> Option<()> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n-    if path.syntax().ancestors().find_map(ast::Use::cast).is_some() {\n+    if path.syntax().ancestors().find_map(ast::UseTree::cast).is_some() {\n+        cov_mark::hit!(not_applicable_in_use);\n         return None;\n     }\n+\n     if path.qualifier().is_none() {\n         cov_mark::hit!(dont_import_trivial_paths);\n         return None;\n     }\n \n+    let res = ctx.sema.resolve_path(&path)?;\n+    let def: hir::ItemInNs = match res {\n+        hir::PathResolution::Def(def) if def.as_assoc_item(ctx.sema.db).is_none() => def.into(),\n+        hir::PathResolution::Macro(mac) => mac.into(),\n+        _ => return None,\n+    };\n+\n     let target = path.syntax().text_range();\n     let scope = ImportScope::find_insert_use_container_with_macros(path.syntax(), &ctx.sema)?;\n+    let mod_path = ctx.sema.scope(path.syntax()).module()?.find_use_path_prefixed(\n+        ctx.sema.db,\n+        def,\n+        ctx.config.insert_use.prefix_kind,\n+    )?;\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n         \"Replace qualified path with use\",\n@@ -44,6 +64,7 @@ pub(crate) fn replace_qualified_name_with_use(\n                 ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n                 ImportScope::Block(it) => ImportScope::Block(builder.make_mut(it)),\n             };\n+            let path = mod_path_to_ast(&mod_path);\n             shorten_paths(scope.as_syntax_node(), &path.clone_for_update());\n             insert_use(&scope, path, &ctx.config.insert_use);\n         },\n@@ -59,6 +80,7 @@ fn shorten_paths(node: &SyntaxNode, path: &ast::Path) {\n                 // import into the use tree.\n                 ast::Use(_it) => continue,\n                 // Don't descend into submodules, they don't have the same `use` items in scope.\n+                // FIXME: This isn't true due to `super::*` imports?\n                 ast::Module(_it) => continue,\n                 ast::Path(p) => if maybe_replace_path(p.clone(), path.clone()).is_none() {\n                     shorten_paths(p.syntax(), path);\n@@ -70,7 +92,7 @@ fn shorten_paths(node: &SyntaxNode, path: &ast::Path) {\n }\n \n fn maybe_replace_path(path: ast::Path, target: ast::Path) -> Option<()> {\n-    if !path_eq(path.clone(), target) {\n+    if !path_eq_no_generics(path.clone(), target) {\n         return None;\n     }\n \n@@ -85,12 +107,20 @@ fn maybe_replace_path(path: ast::Path, target: ast::Path) -> Option<()> {\n     Some(())\n }\n \n-fn path_eq(lhs: ast::Path, rhs: ast::Path) -> bool {\n+fn path_eq_no_generics(lhs: ast::Path, rhs: ast::Path) -> bool {\n     let mut lhs_curr = lhs;\n     let mut rhs_curr = rhs;\n     loop {\n-        match (lhs_curr.segment(), rhs_curr.segment()) {\n-            (Some(lhs), Some(rhs)) if lhs.syntax().text() == rhs.syntax().text() => (),\n+        match lhs_curr.segment().zip(rhs_curr.segment()) {\n+            Some((lhs, rhs))\n+                if lhs.coloncolon_token().is_some() == rhs.coloncolon_token().is_some()\n+                    && lhs\n+                        .name_ref()\n+                        .zip(rhs.name_ref())\n+                        .map_or(false, |(lhs, rhs)| lhs.text() == rhs.text()) =>\n+            {\n+                ()\n+            }\n             _ => return false,\n         }\n \n@@ -115,12 +145,16 @@ mod tests {\n     fn test_replace_already_imported() {\n         check_assist(\n             replace_qualified_name_with_use,\n-            r\"use std::fs;\n+            r\"\n+mod std { pub mod fs { pub struct Path; } }\n+use std::fs;\n \n fn main() {\n     std::f$0s::Path\n }\",\n-            r\"use std::fs;\n+            r\"\n+mod std { pub mod fs { pub struct Path; } }\n+use std::fs;\n \n fn main() {\n     fs::Path\n@@ -133,394 +167,53 @@ fn main() {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n-std::fmt::Debug$0\n-    \",\n-            r\"\n-use std::fmt::Debug;\n-\n-Debug\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_use_no_anchor_with_item_below() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-std::fmt::Debug$0\n-\n-fn main() {\n-}\n-    \",\n-            r\"\n-use std::fmt::Debug;\n-\n-Debug\n-\n-fn main() {\n-}\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_use_no_anchor_with_item_above() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-fn main() {\n-}\n-\n-std::fmt::Debug$0\n-    \",\n-            r\"\n-use std::fmt::Debug;\n-\n-fn main() {\n-}\n-\n-Debug\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_use_no_anchor_2seg() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-std::fmt$0::Debug\n-    \",\n-            r\"\n-use std::fmt;\n-\n-fmt::Debug\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_use() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use stdx;\n-\n-impl std::fmt::Debug$0 for Foo {\n-}\n+mod std { pub mod fs { pub struct Path; } }\n+std::fs::Path$0\n     \",\n             r\"\n-use std::fmt::Debug;\n+use std::fs::Path;\n \n-use stdx;\n-\n-impl Debug for Foo {\n-}\n+mod std { pub mod fs { pub struct Path; } }\n+Path\n     \",\n         );\n     }\n \n     #[test]\n-    fn test_replace_file_use_other_anchor() {\n+    fn test_replace_add_use_no_anchor_middle_segment() {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n-impl std::fmt::Debug$0 for Foo {\n-}\n+mod std { pub mod fs { pub struct Path; } }\n+std::fs$0::Path\n     \",\n             r\"\n-use std::fmt::Debug;\n+use std::fs;\n \n-impl Debug for Foo {\n-}\n+mod std { pub mod fs { pub struct Path; } }\n+fs::Path\n     \",\n         );\n     }\n-\n-    #[test]\n-    fn test_replace_add_use_other_anchor_indent() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-    impl std::fmt::Debug$0 for Foo {\n-    }\n-    \",\n-            r\"\n-    use std::fmt::Debug;\n-\n-    impl Debug for Foo {\n-    }\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_split_different() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt;\n-\n-impl std::io$0 for Foo {\n-}\n-    \",\n-            r\"\n-use std::{fmt, io};\n-\n-impl io for Foo {\n-}\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_split_self_for_use() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt;\n-\n-impl std::fmt::Debug$0 for Foo {\n-}\n-    \",\n-            r\"\n-use std::fmt::{self, Debug};\n-\n-impl Debug for Foo {\n-}\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_split_self_for_target() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt::Debug;\n-\n-impl std::fmt$0 for Foo {\n-}\n-    \",\n-            r\"\n-use std::fmt::{self, Debug};\n-\n-impl fmt for Foo {\n-}\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_to_nested_self_nested() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt::{Debug, nested::{Display}};\n-\n-impl std::fmt::nested$0 for Foo {\n-}\n-\",\n-            r\"\n-use std::fmt::{Debug, nested::{self, Display}};\n-\n-impl nested for Foo {\n-}\n-\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_to_nested_self_already_included() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt::{Debug, nested::{self, Display}};\n-\n-impl std::fmt::nested$0 for Foo {\n-}\n-\",\n-            r\"\n-use std::fmt::{Debug, nested::{self, Display}};\n-\n-impl nested for Foo {\n-}\n-\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_to_nested_nested() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt::{Debug, nested::{Display}};\n-\n-impl std::fmt::nested::Debug$0 for Foo {\n-}\n-\",\n-            r\"\n-use std::fmt::{Debug, nested::{Debug, Display}};\n-\n-impl Debug for Foo {\n-}\n-\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_split_common_target_longer() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt::Debug;\n-\n-impl std::fmt::nested::Display$0 for Foo {\n-}\n-\",\n-            r\"\n-use std::fmt::{Debug, nested::Display};\n-\n-impl Display for Foo {\n-}\n-\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_split_common_use_longer() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt::nested::Debug;\n-\n-impl std::fmt::Display$0 for Foo {\n-}\n-\",\n-            r\"\n-use std::fmt::{Display, nested::Debug};\n-\n-impl Display for Foo {\n-}\n-\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_use_nested_import() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use crate::{\n-    ty::{Substs, Ty},\n-    AssocItem,\n-};\n-\n-fn foo() { crate::ty::lower$0::trait_env() }\n-\",\n-            r\"\n-use crate::{AssocItem, ty::{Substs, Ty, lower}};\n-\n-fn foo() { lower::trait_env() }\n-\",\n-        );\n-    }\n-\n     #[test]\n-    fn test_replace_alias() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt as foo;\n-\n-impl foo::Debug$0 for Foo {\n-}\n-\",\n-            r\"\n-use std::fmt as foo;\n-\n-use foo::Debug;\n-\n-impl Debug for Foo {\n-}\n-\",\n-        );\n-    }\n-\n     #[test]\n     fn dont_import_trivial_paths() {\n         cov_mark::check!(dont_import_trivial_paths);\n-        check_assist_not_applicable(\n-            replace_qualified_name_with_use,\n-            r\"\n-impl foo$0 for Foo {\n-}\n-\",\n-        );\n+        check_assist_not_applicable(replace_qualified_name_with_use, r\"impl foo$0 for () {}\");\n     }\n \n     #[test]\n     fn test_replace_not_applicable_in_use() {\n-        check_assist_not_applicable(\n-            replace_qualified_name_with_use,\n-            r\"\n-use std::fmt$0;\n-\",\n-        );\n-    }\n-\n-    #[test]\n-    fn test_replace_add_use_no_anchor_in_mod_mod() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-mod foo {\n-    mod bar {\n-        std::fmt::Debug$0\n-    }\n-}\n-    \",\n-            r\"\n-mod foo {\n-    mod bar {\n-        use std::fmt::Debug;\n-\n-        Debug\n-    }\n-}\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn inserts_imports_after_inner_attributes() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-#![allow(dead_code)]\n-\n-fn main() {\n-    std::fmt::Debug$0\n-}\n-    \",\n-            r\"\n-#![allow(dead_code)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {\n-    Debug\n-}\n-    \",\n-        );\n+        cov_mark::check!(not_applicable_in_use);\n+        check_assist_not_applicable(replace_qualified_name_with_use, r\"use std::fmt$0;\");\n     }\n \n     #[test]\n     fn replaces_all_affected_paths() {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n+mod std { pub mod fmt { pub trait Debug {} } }\n fn main() {\n     std::fmt::Debug$0;\n     let x: std::fmt::Debug = std::fmt::Debug;\n@@ -529,6 +222,7 @@ fn main() {\n             r\"\n use std::fmt::Debug;\n \n+mod std { pub mod fmt { pub trait Debug {} } }\n fn main() {\n     Debug;\n     let x: Debug = Debug;\n@@ -537,50 +231,12 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn replaces_all_affected_paths_mod() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-mod m {\n-    fn f() {\n-        std::fmt::Debug$0;\n-        let x: std::fmt::Debug = std::fmt::Debug;\n-    }\n-    fn g() {\n-        std::fmt::Debug;\n-    }\n-}\n-\n-fn f() {\n-    std::fmt::Debug;\n-}\n-    \",\n-            r\"\n-mod m {\n-    use std::fmt::Debug;\n-\n-    fn f() {\n-        Debug;\n-        let x: Debug = Debug;\n-    }\n-    fn g() {\n-        Debug;\n-    }\n-}\n-\n-fn f() {\n-    std::fmt::Debug;\n-}\n-    \",\n-        );\n-    }\n-\n     #[test]\n     fn does_not_replace_in_submodules() {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n+mod std { pub mod fmt { pub trait Debug {} } }\n fn main() {\n     std::fmt::Debug$0;\n }\n@@ -594,6 +250,7 @@ mod sub {\n             r\"\n use std::fmt::Debug;\n \n+mod std { pub mod fmt { pub trait Debug {} } }\n fn main() {\n     Debug;\n }\n@@ -612,13 +269,15 @@ mod sub {\n         check_assist(\n             replace_qualified_name_with_use,\n             r\"\n+mod std { pub mod fmt { pub trait Display {} } }\n use std::fmt::Display;\n \n fn main() {\n     std::fmt$0;\n }\n     \",\n             r\"\n+mod std { pub mod fmt { pub trait Display {} } }\n use std::fmt::{self, Display};\n \n fn main() {\n@@ -629,42 +288,19 @@ fn main() {\n     }\n \n     #[test]\n-    fn does_not_replace_pub_use() {\n-        check_assist(\n-            replace_qualified_name_with_use,\n-            r\"\n-pub use std::fmt;\n-\n-impl std::io$0 for Foo {\n-}\n-    \",\n-            r\"\n-pub use std::fmt;\n-use std::io;\n-\n-impl io for Foo {\n-}\n-    \",\n-        );\n-    }\n-\n-    #[test]\n-    fn does_not_replace_pub_crate_use() {\n-        check_assist(\n+    fn does_not_replace_assoc_item_path() {\n+        check_assist_not_applicable(\n             replace_qualified_name_with_use,\n             r\"\n-pub(crate) use std::fmt;\n-\n-impl std::io$0 for Foo {\n+pub struct Foo;\n+impl Foo {\n+    pub fn foo() {}\n }\n-    \",\n-            r\"\n-pub(crate) use std::fmt;\n-use std::io;\n \n-impl io for Foo {\n+fn main() {\n+    Foo::foo$0();\n }\n-    \",\n+\",\n         );\n     }\n }"}, {"sha": "5132f94cd6d22c5cb86f950c5768df6629c8b381", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e41b5348b882fc0d716792d4df5cd06773157c86/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41b5348b882fc0d716792d4df5cd06773157c86/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e41b5348b882fc0d716792d4df5cd06773157c86", "patch": "@@ -1479,11 +1479,13 @@ fn doctest_replace_qualified_name_with_use() {\n     check_doc_test(\n         \"replace_qualified_name_with_use\",\n         r#####\"\n+mod std { pub mod collections { pub struct HashMap<T, U>(T, U); } }\n fn process(map: std::collections::$0HashMap<String, String>) {}\n \"#####,\n         r#####\"\n use std::collections::HashMap;\n \n+mod std { pub mod collections { pub struct HashMap<T, U>(T, U); } }\n fn process(map: HashMap<String, String>) {}\n \"#####,\n     )"}, {"sha": "4e12fe15079701f6f9b54ca19ed5fa5f916e0433", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e41b5348b882fc0d716792d4df5cd06773157c86/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41b5348b882fc0d716792d4df5cd06773157c86/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=e41b5348b882fc0d716792d4df5cd06773157c86", "patch": "@@ -214,7 +214,7 @@ pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfi\n \n     // either we weren't allowed to merge or there is no import that fits the merge conditions\n     // so look for the place we have to insert to\n-    insert_use_(scope, path, cfg.group, use_item);\n+    insert_use_(scope, &path, cfg.group, use_item);\n }\n \n #[derive(Eq, PartialEq, PartialOrd, Ord)]\n@@ -253,12 +253,12 @@ impl ImportGroup {\n \n fn insert_use_(\n     scope: &ImportScope,\n-    insert_path: ast::Path,\n+    insert_path: &ast::Path,\n     group_imports: bool,\n     use_item: ast::Use,\n ) {\n     let scope_syntax = scope.as_syntax_node();\n-    let group = ImportGroup::new(&insert_path);\n+    let group = ImportGroup::new(insert_path);\n     let path_node_iter = scope_syntax\n         .children()\n         .filter_map(|node| ast::Use::cast(node.clone()).zip(Some(node)))\n@@ -294,7 +294,7 @@ fn insert_use_(\n     let post_insert: Option<(_, _, SyntaxNode)> = group_iter\n         .inspect(|(.., node)| last = Some(node.clone()))\n         .find(|&(ref path, has_tl, _)| {\n-            use_tree_path_cmp(&insert_path, false, path, has_tl) != Ordering::Greater\n+            use_tree_path_cmp(insert_path, false, path, has_tl) != Ordering::Greater\n         });\n \n     if let Some((.., node)) = post_insert {"}]}