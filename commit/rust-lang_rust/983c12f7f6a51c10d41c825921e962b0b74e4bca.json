{"sha": "983c12f7f6a51c10d41c825921e962b0b74e4bca", "node_id": "C_kwDOAAsO6NoAKDk4M2MxMmY3ZjZhNTFjMTBkNDFjODI1OTIxZTk2MmIwYjc0ZTRiY2E", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-15T15:32:52Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:23:58Z"}, "message": "update ui tests", "tree": {"sha": "b2b1de13b10b95961d5ff434a748e88101fca8f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2b1de13b10b95961d5ff434a748e88101fca8f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/983c12f7f6a51c10d41c825921e962b0b74e4bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/983c12f7f6a51c10d41c825921e962b0b74e4bca", "html_url": "https://github.com/rust-lang/rust/commit/983c12f7f6a51c10d41c825921e962b0b74e4bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/983c12f7f6a51c10d41c825921e962b0b74e4bca/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef6f3e895beede5bfd5ba4bb12898615c156d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef6f3e895beede5bfd5ba4bb12898615c156d59", "html_url": "https://github.com/rust-lang/rust/commit/bef6f3e895beede5bfd5ba4bb12898615c156d59"}], "stats": {"total": 149, "additions": 23, "deletions": 126}, "files": [{"sha": "5b9e41231e3e3ee92ac43ed2cfce99c2ba12431c", "filename": "src/test/rustdoc/intra-doc/prim-self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-self.rs?ref=983c12f7f6a51c10d41c825921e962b0b74e4bca", "patch": "@@ -1,4 +1,5 @@\n #![deny(rustdoc::broken_intra_doc_links)]\n+#![rustc_coherence_is_core]\n #![allow(incomplete_features)] // inherent_associated_types\n #![feature(lang_items)]\n #![feature(no_core)]"}, {"sha": "fe04190162af430e4c442a42396882e1a84513ea", "filename": "src/test/ui/error-codes/E0118-2.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.rs?ref=bef6f3e895beede5bfd5ba4bb12898615c156d59", "patch": "@@ -1,8 +0,0 @@\n-struct Foo;\n-\n-impl &mut Foo {\n-    //~^ ERROR E0118\n-    fn bar(self) {}\n-}\n-\n-fn main() {}"}, {"sha": "2a1fe23111687b54487edbd572c6a5221b081f17", "filename": "src/test/ui/error-codes/E0118-2.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118-2.stderr?ref=bef6f3e895beede5bfd5ba4bb12898615c156d59", "patch": "@@ -1,12 +0,0 @@\n-error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/E0118-2.rs:3:6\n-   |\n-LL | impl &mut Foo {\n-   |      ^^^^^^^^ impl requires a nominal type\n-   |\n-   = note: either implement a trait on it or create a newtype to wrap it instead\n-   = note: you could also try moving the reference to uses of `Foo` (such as `self`) within the implementation\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0118`."}, {"sha": "7bf36210f3a3896471a947d64b428079c42b807f", "filename": "src/test/ui/error-codes/E0118.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.rs?ref=bef6f3e895beede5bfd5ba4bb12898615c156d59", "patch": "@@ -1,8 +0,0 @@\n-impl (u8, u8) { //~ ERROR E0118\n-    fn get_state(&self) -> String {\n-        String::new()\n-    }\n-}\n-\n-fn main() {\n-}"}, {"sha": "2693a93213a3b322cf0aaf571c3746c2e9140b89", "filename": "src/test/ui/error-codes/E0118.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0118.stderr?ref=bef6f3e895beede5bfd5ba4bb12898615c156d59", "patch": "@@ -1,11 +0,0 @@\n-error[E0118]: no nominal type found for inherent implementation\n-  --> $DIR/E0118.rs:1:6\n-   |\n-LL | impl (u8, u8) {\n-   |      ^^^^^^^^ impl requires a nominal type\n-   |\n-   = note: either implement a trait on it or create a newtype to wrap it instead\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0118`."}, {"sha": "4a3f466007018618027b0b92bd2bf4e5a25bf664", "filename": "src/test/ui/error-codes/E0390.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr?ref=983c12f7f6a51c10d41c825921e962b0b74e4bca", "patch": "@@ -1,10 +1,10 @@\n-error[E0390]: only a single inherent implementation marked with `#[lang = \"mut_ptr\"]` is allowed for the `*mut T` primitive\n-  --> $DIR/E0390.rs:5:1\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/E0390.rs:5:6\n    |\n LL | impl *mut Foo {}\n-   | ^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^\n    |\n-   = help: consider using a trait\n+   = help: consider using a trait instead\n \n error: aborting due to previous error\n "}, {"sha": "9eba72e76275da2865e128db99a10ac7848034c9", "filename": "src/test/ui/kinds-of-primitive-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.rs?ref=983c12f7f6a51c10d41c825921e962b0b74e4bca", "patch": "@@ -1,16 +1,16 @@\n impl u8 {\n-//~^ error: only a single inherent implementation marked with `#[lang = \"u8\"]` is allowed for the `u8` primitive\n+//~^ error: cannot define inherent `impl` for primitive types\n     pub const B: u8 = 0;\n }\n \n impl str {\n-//~^ error: only a single inherent implementation marked with `#[lang = \"str\"]` is allowed for the `str` primitive\n+//~^ error: cannot define inherent `impl` for primitive types\n     fn foo() {}\n     fn bar(self) {}\n }\n \n impl char {\n-//~^ error: only a single inherent implementation marked with `#[lang = \"char\"]` is allowed for the `char` primitive\n+//~^ error: cannot define inherent `impl` for primitive types\n     pub const B: u8 = 0;\n     pub const C: u8 = 0;\n     fn foo() {}"}, {"sha": "c49396a53a891fc79427b739b6b4463019c40cc9", "filename": "src/test/ui/kinds-of-primitive-impl.stderr", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/983c12f7f6a51c10d41c825921e962b0b74e4bca/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr?ref=983c12f7f6a51c10d41c825921e962b0b74e4bca", "patch": "@@ -1,39 +1,26 @@\n-error[E0390]: only a single inherent implementation marked with `#[lang = \"u8\"]` is allowed for the `u8` primitive\n-  --> $DIR/kinds-of-primitive-impl.rs:1:1\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/kinds-of-primitive-impl.rs:1:6\n    |\n-LL | / impl u8 {\n-LL | |\n-LL | |     pub const B: u8 = 0;\n-LL | | }\n-   | |_^\n+LL | impl u8 {\n+   |      ^^\n    |\n-   = help: consider using a trait to implement this constant\n+   = help: consider using a trait instead\n \n-error[E0390]: only a single inherent implementation marked with `#[lang = \"str\"]` is allowed for the `str` primitive\n-  --> $DIR/kinds-of-primitive-impl.rs:6:1\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/kinds-of-primitive-impl.rs:6:6\n    |\n-LL | / impl str {\n-LL | |\n-LL | |     fn foo() {}\n-LL | |     fn bar(self) {}\n-LL | | }\n-   | |_^\n+LL | impl str {\n+   |      ^^^\n    |\n-   = help: consider using a trait to implement these methods\n+   = help: consider using a trait instead\n \n-error[E0390]: only a single inherent implementation marked with `#[lang = \"char\"]` is allowed for the `char` primitive\n-  --> $DIR/kinds-of-primitive-impl.rs:12:1\n+error[E0390]: cannot define inherent `impl` for primitive types\n+  --> $DIR/kinds-of-primitive-impl.rs:12:6\n    |\n-LL | / impl char {\n-LL | |\n-LL | |     pub const B: u8 = 0;\n-LL | |     pub const C: u8 = 0;\n-LL | |     fn foo() {}\n-LL | |     fn bar(self) {}\n-LL | | }\n-   | |_^\n+LL | impl char {\n+   |      ^^^^\n    |\n-   = help: consider using a trait to implement these associated items\n+   = help: consider using a trait instead\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a3287db74e7338382b635ecade8e4133e8d0de4b", "filename": "src/test/ui/lang-items/lang-item-correct-generics.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Flang-items%2Flang-item-correct-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Flang-items%2Flang-item-correct-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-correct-generics.rs?ref=bef6f3e895beede5bfd5ba4bb12898615c156d59", "patch": "@@ -1,28 +0,0 @@\n-// build-pass\n-\n-#![feature(lang_items,no_core)]\n-#![no_core]\n-#![crate_type=\"lib\"]\n-\n-#[lang = \"sized\"]\n-trait MySized {}\n-\n-#[lang = \"copy\"]\n-trait MyCopy {}\n-\n-#[lang = \"drop\"]\n-trait MyDrop<T> {}\n-\n-struct S;\n-\n-impl<T> MyDrop<T> for S {}\n-\n-#[lang = \"i32\"]\n-impl<'a> i32 {\n-    fn foo() {}\n-}\n-\n-fn bar() {\n-    i32::foo();\n-    S;\n-}"}, {"sha": "75c62feec32d0f992df29d5771456170eefa10d5", "filename": "src/test/ui/single-primitive-inherent-impl.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.rs?ref=bef6f3e895beede5bfd5ba4bb12898615c156d59", "patch": "@@ -1,11 +0,0 @@\n-#![crate_type = \"lib\"]\n-#![feature(lang_items)]\n-#![no_std]\n-\n-// OK\n-#[lang = \"str_alloc\"]\n-impl str {}\n-\n-impl str {\n-//~^ error: only a single inherent implementation marked with `#[lang = \"str\"]` is allowed for the `str` primitive\n-}"}, {"sha": "349a12eac05a0e4376e8dcaae2ac901af1a8141b", "filename": "src/test/ui/single-primitive-inherent-impl.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef6f3e895beede5bfd5ba4bb12898615c156d59/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr?ref=bef6f3e895beede5bfd5ba4bb12898615c156d59", "patch": "@@ -1,13 +0,0 @@\n-error[E0390]: only a single inherent implementation marked with `#[lang = \"str\"]` is allowed for the `str` primitive\n-  --> $DIR/single-primitive-inherent-impl.rs:9:1\n-   |\n-LL | / impl str {\n-LL | |\n-LL | | }\n-   | |_^\n-   |\n-   = help: consider using a trait\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0390`."}]}