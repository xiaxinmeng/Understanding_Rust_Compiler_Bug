{"sha": "91db254c81f3c90d5d9d8b5db2660a918efef8bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZGIyNTRjODFmM2M5MGQ1ZDlkOGI1ZGIyNjYwYTkxOGVmZWY4YmI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-26T11:33:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T13:11:30Z"}, "message": "More rebase fixes.", "tree": {"sha": "140cd42aa68752ae7760bf9f2765bf1ff8835189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140cd42aa68752ae7760bf9f2765bf1ff8835189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91db254c81f3c90d5d9d8b5db2660a918efef8bb", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91db254c81f3c90d5d9d8b5db2660a918efef8bb", "html_url": "https://github.com/rust-lang/rust/commit/91db254c81f3c90d5d9d8b5db2660a918efef8bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91db254c81f3c90d5d9d8b5db2660a918efef8bb/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c21a0ff69ee44a0e2892968dabc3804ebe056ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c21a0ff69ee44a0e2892968dabc3804ebe056ed", "html_url": "https://github.com/rust-lang/rust/commit/7c21a0ff69ee44a0e2892968dabc3804ebe056ed"}], "stats": {"total": 112, "additions": 60, "deletions": 52}, "files": [{"sha": "3e9eaf7eea207776ded94417fa1dff962841df2f", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -83,7 +83,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n                 ast::TyF64 => mywrite!(w, \"MF\"),\n             }\n         }\n-        ty::ty_enum(def, ref substs) => {\n+        ty::ty_enum(def, substs) => {\n             mywrite!(w, \"t[{}|\", (cx.ds)(def));\n             enc_substs(w, cx, substs);\n             mywrite!(w, \"]\");\n@@ -104,7 +104,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_ptr(mt) => { mywrite!(w, \"*\"); enc_mt(w, cx, mt); }\n         ty::ty_rptr(r, mt) => {\n             mywrite!(w, \"&\");\n-            enc_region(w, cx, r);\n+            enc_region(w, cx, *r);\n             enc_mt(w, cx, mt);\n         }\n         ty::ty_vec(t, sz) => {\n@@ -123,12 +123,12 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n             mywrite!(w, \"f\");\n             enc_closure_ty(w, cx, &**f);\n         }\n-        ty::ty_bare_fn(Some(def_id), ref f) => {\n+        ty::ty_bare_fn(Some(def_id), f) => {\n             mywrite!(w, \"F\");\n             mywrite!(w, \"{}|\", (cx.ds)(def_id));\n             enc_bare_fn_ty(w, cx, f);\n         }\n-        ty::ty_bare_fn(None, ref f) => {\n+        ty::ty_bare_fn(None, f) => {\n             mywrite!(w, \"G\");\n             enc_bare_fn_ty(w, cx, f);\n         }\n@@ -138,14 +138,14 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_param(ParamTy {space, idx: id, def_id: did}) => {\n             mywrite!(w, \"p{}|{}|{}|\", (cx.ds)(did), id, space.to_uint())\n         }\n-        ty::ty_struct(def, ref substs) => {\n+        ty::ty_struct(def, substs) => {\n             mywrite!(w, \"a[{}|\", (cx.ds)(def));\n             enc_substs(w, cx, substs);\n             mywrite!(w, \"]\");\n         }\n-        ty::ty_unboxed_closure(def, region, ref substs) => {\n+        ty::ty_unboxed_closure(def, region, substs) => {\n             mywrite!(w, \"k[{}|\", (cx.ds)(def));\n-            enc_region(w, cx, region);\n+            enc_region(w, cx, *region);\n             enc_substs(w, cx, substs);\n             mywrite!(w, \"]\");\n         }"}, {"sha": "13017da508d28eada44d42e871878c6540ddf07c", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -499,7 +499,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     fn coerce_from_fn_item(&self,\n                            a: Ty<'tcx>,\n                            fn_def_id_a: ast::DefId,\n-                           fn_ty_a: &ty::BareFnTy<'tcx>,\n+                           fn_ty_a: &'tcx ty::BareFnTy<'tcx>,\n                            b: Ty<'tcx>)\n                            -> CoerceResult<'tcx> {\n         /*!\n@@ -528,7 +528,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     Ok(Some(adj))\n                 }\n                 ty::ty_bare_fn(None, _) => {\n-                    let a_fn_pointer = ty::mk_bare_fn(self.tcx(), None, (*fn_ty_a).clone());\n+                    let a_fn_pointer = ty::mk_bare_fn(self.tcx(), None, fn_ty_a);\n                     try!(self.subtype(a_fn_pointer, b));\n                     Ok(Some(ty::AdjustReifyFnPointer(fn_def_id_a)))\n                 }"}, {"sha": "04ae0a5a6043219220c9d5cb1ea46231438d5a9a", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -343,8 +343,8 @@ pub trait Combine<'tcx> {\n         if a.def_id != b.def_id {\n             Err(ty::terr_traits(expected_found(self, a.def_id, b.def_id)))\n         } else {\n-            let substs = try!(self.substs(a.def_id, &a.substs, &b.substs));\n-            Ok(ty::TraitRef { def_id: a.def_id, substs: substs })\n+            let substs = try!(self.substs(a.def_id, a.substs, b.substs));\n+            Ok(ty::TraitRef { def_id: a.def_id, substs: self.tcx().mk_substs(substs) })\n         }\n     }\n \n@@ -572,7 +572,7 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n             if a_opt_def_id == b_opt_def_id =>\n         {\n             let fty = try!(this.bare_fn_tys(a_fty, b_fty));\n-            Ok(ty::mk_bare_fn(tcx, a_opt_def_id, fty))\n+            Ok(ty::mk_bare_fn(tcx, a_opt_def_id, tcx.mk_bare_fn(fty)))\n         }\n \n       (&ty::ty_closure(ref a_fty), &ty::ty_closure(ref b_fty)) => {"}, {"sha": "97fab3bc9395a4796e5a19076d30cb86b3984809", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -219,7 +219,7 @@ pub struct RegionVarBindings<'a, 'tcx: 'a> {\n #[allow(missing_copy_implementations)]\n pub struct RegionSnapshot {\n     length: uint,\n-    skolemization_count: uint,\n+    skolemization_count: u32,\n }\n \n impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {"}, {"sha": "49a1e6f9263125478dee022f1bec603328dfe561", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -15,7 +15,7 @@ use self::UndoEntry::*;\n use middle::ty::{mod, Ty};\n use std::cmp::min;\n use std::mem;\n-use std::uint;\n+use std::u32;\n use util::snapshot_vec as sv;\n \n pub struct TypeVariableTable<'tcx> {\n@@ -161,7 +161,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n          * unified `V1` with `T1`, this function would return `{T0}`.\n          */\n \n-        let mut new_elem_threshold = uint::MAX;\n+        let mut new_elem_threshold = u32::MAX;\n         let mut escaping_types = Vec::new();\n         let actions_since_snapshot = self.values.actions_since_snapshot(&s.snapshot);\n         debug!(\"actions_since_snapshot.len() = {}\", actions_since_snapshot.len());\n@@ -173,7 +173,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n                     // always be the first one we see). Note that this\n                     // action must precede those variables being\n                     // specified.\n-                    new_elem_threshold = min(new_elem_threshold, index);\n+                    new_elem_threshold = min(new_elem_threshold, index as u32);\n                     debug!(\"NewElem({}) new_elem_threshold={}\", index, new_elem_threshold);\n                 }\n "}, {"sha": "b10b1ce35c4361c9ba379b9985842b528bb25d32", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -1100,7 +1100,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         } else {\n                             // Recursively check all supertraits to find out if any further\n                             // bounds are required and thus we must fulfill.\n-                            let tmp_tr = data.principal_trait_ref_with_self_ty(ty::mk_err());\n+                            let tmp_tr = data.principal_trait_ref_with_self_ty(self.tcx(),\n+                                                                               ty::mk_err());\n                             for tr in util::supertraits(self.tcx(), tmp_tr) {\n                                 let td = ty::lookup_trait_def(self.tcx(), tr.def_id());\n "}, {"sha": "398e52cf0430b3082b149f457df4a9d9bbdd9429", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -1383,12 +1383,13 @@ impl<'tcx> TyTrait<'tcx> {\n     /// we convert the principal trait-ref into a normal trait-ref,\n     /// you must give *some* self-type. A common choice is `mk_err()`\n     /// or some skolemized type.\n-    pub fn principal_trait_ref_with_self_ty(&self, self_ty: Ty<'tcx>)\n+    pub fn principal_trait_ref_with_self_ty(&self,\n+                                            tcx: &ctxt<'tcx>, self_ty: Ty<'tcx>)\n                                             -> Rc<ty::PolyTraitRef<'tcx>>\n     {\n         Rc::new(ty::Binder(ty::TraitRef {\n             def_id: self.principal.def_id(),\n-            substs: self.principal.substs().with_self_ty(self_ty),\n+            substs: tcx.mk_substs(self.principal.substs().with_self_ty(self_ty)),\n         }))\n     }\n }\n@@ -1425,8 +1426,8 @@ impl<'tcx> PolyTraitRef<'tcx> {\n         self.0.def_id\n     }\n \n-    pub fn substs(&self) -> &Substs<'tcx> {\n-        &self.0.substs\n+    pub fn substs(&self) -> &'tcx Substs<'tcx> {\n+        self.0.substs\n     }\n \n     pub fn input_types(&self) -> &[Ty<'tcx>] {\n@@ -4159,8 +4160,8 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n \n                 AdjustReifyFnPointer(_) => {\n                     match unadjusted_ty.sty {\n-                        ty::ty_bare_fn(Some(_), ref b) => {\n-                            ty::mk_bare_fn(cx, None, (*b).clone())\n+                        ty::ty_bare_fn(Some(_), b) => {\n+                            ty::mk_bare_fn(cx, None, b)\n                         }\n                         ref b => {\n                             cx.sess.bug(\n@@ -6727,42 +6728,42 @@ pub trait RegionEscape {\n         self.has_regions_escaping_depth(0)\n     }\n \n-    fn has_regions_escaping_depth(&self, depth: uint) -> bool;\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool;\n }\n \n impl<'tcx> RegionEscape for Ty<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: uint) -> bool {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         ty::type_escapes_depth(*self, depth)\n     }\n }\n \n impl RegionEscape for Region {\n-    fn has_regions_escaping_depth(&self, depth: uint) -> bool {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.escapes_depth(depth)\n     }\n }\n \n impl<'tcx> RegionEscape for TraitRef<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: uint) -> bool {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.substs.types.iter().any(|t| t.has_regions_escaping_depth(depth)) &&\n             self.substs.regions().iter().any(|t| t.has_regions_escaping_depth(depth))\n     }\n }\n \n impl<'tcx,T:RegionEscape> RegionEscape for Binder<T> {\n-    fn has_regions_escaping_depth(&self, depth: uint) -> bool {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.0.has_regions_escaping_depth(depth + 1)\n     }\n }\n \n impl<'tcx> RegionEscape for EquatePredicate<'tcx> {\n-    fn has_regions_escaping_depth(&self, depth: uint) -> bool {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.0.has_regions_escaping_depth(depth) || self.1.has_regions_escaping_depth(depth)\n     }\n }\n \n impl<T:RegionEscape,U:RegionEscape> RegionEscape for OutlivesPredicate<T,U> {\n-    fn has_regions_escaping_depth(&self, depth: uint) -> bool {\n+    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n         self.0.has_regions_escaping_depth(depth) || self.1.has_regions_escaping_depth(depth)\n     }\n }"}, {"sha": "782b464ed96d5c2fbd9847bcbbf652a7d48f2a8b", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -527,7 +527,8 @@ pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n             ty::ty_open(typ.fold_with(this))\n         }\n         ty::ty_enum(tid, ref substs) => {\n-            ty::ty_enum(tid, substs.fold_with(this))\n+            let substs = substs.fold_with(this);\n+            ty::ty_enum(tid, this.tcx().mk_substs(substs))\n         }\n         ty::ty_trait(box ty::TyTrait { ref principal, bounds }) => {\n             ty::ty_trait(box ty::TyTrait {\n@@ -539,19 +540,24 @@ pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n             ty::ty_tup(ts.fold_with(this))\n         }\n         ty::ty_bare_fn(opt_def_id, ref f) => {\n-            ty::ty_bare_fn(opt_def_id, f.fold_with(this))\n+            let bfn = f.fold_with(this);\n+            ty::ty_bare_fn(opt_def_id, this.tcx().mk_bare_fn(bfn))\n         }\n         ty::ty_closure(ref f) => {\n             ty::ty_closure(box f.fold_with(this))\n         }\n         ty::ty_rptr(r, ref tm) => {\n-            ty::ty_rptr(r.fold_with(this), tm.fold_with(this))\n+            let r = r.fold_with(this);\n+            ty::ty_rptr(this.tcx().mk_region(r), tm.fold_with(this))\n         }\n         ty::ty_struct(did, ref substs) => {\n-            ty::ty_struct(did, substs.fold_with(this))\n+            let substs = substs.fold_with(this);\n+            ty::ty_struct(did, this.tcx().mk_substs(substs))\n         }\n         ty::ty_unboxed_closure(did, ref region, ref substs) => {\n-            ty::ty_unboxed_closure(did, region.fold_with(this), substs.fold_with(this))\n+            let r = region.fold_with(this);\n+            let s = substs.fold_with(this);\n+            ty::ty_unboxed_closure(did, this.tcx().mk_region(r), this.tcx().mk_substs(s))\n         }\n         ty::ty_bool | ty::ty_char | ty::ty_str |\n         ty::ty_int(_) | ty::ty_uint(_) | ty::ty_float(_) |\n@@ -624,6 +630,7 @@ pub fn super_fold_trait_ref<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n                                                        t: &ty::TraitRef<'tcx>)\n                                                        -> ty::TraitRef<'tcx>\n {\n+    let substs = t.substs.fold_with(this);\n     ty::TraitRef {\n         def_id: t.def_id,\n         substs: this.tcx().mk_substs(substs),\n@@ -745,7 +752,7 @@ pub fn fold_regions<'tcx,T,F>(tcx: &ty::ctxt<'tcx>,\n                               value: &T,\n                               mut f: F)\n                               -> T\n-    where F : FnMut(ty::Region, uint) -> ty::Region,\n+    where F : FnMut(ty::Region, u32) -> ty::Region,\n           T : TypeFoldable<'tcx>,\n {\n     value.fold_with(&mut RegionFolder::new(tcx, &mut f))"}, {"sha": "3a383dd5a3b7c3f14e6405c667aa88461c11f0d0", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -1211,8 +1211,6 @@ impl<'tcx> UserString<'tcx> for ty::TraitRef<'tcx> {\n         let trait_def = ty::lookup_trait_def(tcx, self.def_id);\n         parameterized(tcx, path_str.as_slice(), self.substs,\n                       &trait_def.generics, self.def_id)\n-        let did = trait_def.trait_ref.def_id;\n-        parameterized(tcx, base.as_slice(), trait_ref.substs, &trait_def.generics, did)\n     }\n }\n "}, {"sha": "941155ac5e7e349b7ddc108b2da9c8a6f25f3943", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -256,15 +256,15 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         let input_args = input_tys.iter().map(|ty| *ty).collect();\n         ty::mk_bare_fn(self.infcx.tcx,\n                        None,\n-                       ty::BareFnTy {\n+                       self.infcx.tcx.mk_bare_fn(ty::BareFnTy {\n                            unsafety: ast::Unsafety::Normal,\n                            abi: abi::Rust,\n                            sig: ty::Binder(ty::FnSig {\n                                inputs: input_args,\n                                output: ty::FnConverging(output_ty),\n                                variadic: false\n                            })\n-                       })\n+                       }))\n     }\n \n     pub fn t_nil(&self) -> Ty<'tcx> {"}, {"sha": "595d252a0b1a0826807b443a542142f236497641", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -361,7 +361,7 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n         },\n \n         // Is this the NonZero lang item wrapping a pointer or integer type?\n-        ty::ty_struct(did, ref substs) if Some(did) == tcx.lang_items.non_zero() => {\n+        ty::ty_struct(did, substs) if Some(did) == tcx.lang_items.non_zero() => {\n             let nonzero_fields = ty::lookup_struct_fields(tcx, did);\n             assert_eq!(nonzero_fields.len(), 1);\n             let nonzero_field = ty::lookup_field_type(tcx, did, nonzero_fields[0].id, substs);\n@@ -376,7 +376,7 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n         // Perhaps one of the fields of this struct is non-zero\n         // let's recurse and find out\n-        ty::ty_struct(def_id, ref substs) => {\n+        ty::ty_struct(def_id, substs) => {\n             let fields = ty::lookup_struct_fields(tcx, def_id);\n             for (j, field) in fields.iter().enumerate() {\n                 let field_ty = ty::lookup_field_type(tcx, def_id, field.id, substs);"}, {"sha": "e3fe749b49003a2cf2d12fd4a1a832633404cd36", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -299,12 +299,12 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n                                      tcx.mk_bare_fn(ty::BareFnTy {\n                                          unsafety: ast::Unsafety::Normal,\n                                          abi: synabi::RustCall,\n-                                         sig: ty::FnSig {\n+                                         sig: ty::Binder(ty::FnSig {\n                                              inputs: vec![bare_fn_ty_ref,\n                                                           tuple_input_ty],\n                                              output: output_ty,\n                                              variadic: false\n-                                         }}));\n+                                         })}));\n     debug!(\"tuple_fn_ty: {}\", tuple_fn_ty.repr(tcx));\n \n     //"}, {"sha": "60b5a08c7c5df59e584c6c23b1f388b629950953", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -1085,7 +1085,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              None,\n                              expr.span,\n                              expr.id,\n-                             ty::mk_struct(tcx, did, substs),\n+                             ty::mk_struct(tcx, did, tcx.mk_substs(substs)),\n                              dest)\n             } else {\n                 tcx.sess.span_bug(expr.span,"}, {"sha": "8ce7a7edb46d1011b631e2d7d6b3c9ed504a0fb4", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -223,7 +223,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                     // been ruled out when we deemed the trait to be\n                     // \"object safe\".\n                     let original_poly_trait_ref =\n-                        data.principal_trait_ref_with_self_ty(object_ty);\n+                        data.principal_trait_ref_with_self_ty(this.tcx(), object_ty);\n                     let upcast_poly_trait_ref =\n                         this.upcast(original_poly_trait_ref.clone(), trait_def_id);\n                     let upcast_trait_ref ="}, {"sha": "0c094823a75751d55478ffcc2c45ac719a87b3cd", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -200,6 +200,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n                                                                        &fn_sig).0;\n     let transformed_self_ty = fn_sig.inputs[0];\n     let fty = ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(ty::BareFnTy {\n+        sig: ty::Binder(fn_sig),\n         unsafety: bare_fn_ty.unsafety,\n         abi: bare_fn_ty.abi.clone(),\n     }));"}, {"sha": "3ecd2007ff13cc775d0dacfb39befd6ace8c75a0", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -305,7 +305,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // a substitution that replaces `Self` with the object type\n         // itself. Hence, a `&self` method will wind up with an\n         // argument type like `&Trait`.\n-        let trait_ref = data.principal_trait_ref_with_self_ty(self_ty);\n+        let trait_ref = data.principal_trait_ref_with_self_ty(self.tcx(), self_ty);\n         self.elaborate_bounds(&[trait_ref.clone()], false, |this, new_trait_ref, m, method_num| {\n             let vtable_index =\n                 get_method_index(tcx, &*new_trait_ref, trait_ref.clone(), method_num);"}, {"sha": "68cf139338aa2f5b7beb03eb123ddc6519571f3a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -4355,7 +4355,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                  traits::ItemObligation(did)),\n                     &bounds);\n \n-                ty::mk_struct(tcx, did, substs)\n+                ty::mk_struct(tcx, did, tcx.mk_substs(substs))\n             } else {\n                 ty::mk_err()\n             }"}, {"sha": "ff16568aa63fcc92cfa343a8aff7e7c7e038c957", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -133,7 +133,7 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                  object_trait: &ty::TyTrait<'tcx>,\n                                  span: Span)\n {\n-    let object_trait_ref = object_trait.principal_trait_ref_with_self_ty(ty::mk_err());\n+    let object_trait_ref = object_trait.principal_trait_ref_with_self_ty(tcx, ty::mk_err());\n     for tr in traits::supertraits(tcx, object_trait_ref) {\n         check_object_safety_inner(tcx, &*tr, span);\n     }\n@@ -251,7 +251,7 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // Create the obligation for casting from T to Trait.\n     let object_trait_ref =\n-        object_trait.principal_trait_ref_with_self_ty(referent_ty);\n+        object_trait.principal_trait_ref_with_self_ty(fcx.tcx(), referent_ty);\n     let object_obligation =\n         Obligation::new(\n             ObligationCause::new(span,"}, {"sha": "0308194527e9538a904986b188409160aebee3ad", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91db254c81f3c90d5d9d8b5db2660a918efef8bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=91db254c81f3c90d5d9d8b5db2660a918efef8bb", "patch": "@@ -620,7 +620,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         let fqn = fqn.into_iter().map(|i| i.to_string())\n                      .collect::<Vec<String>>();\n         let path = external_path(cx, fqn.last().unwrap().as_slice(),\n-                                 Some(self.def_id), &self.substs);\n+                                 Some(self.def_id), self.substs);\n         cx.external_paths.borrow_mut().as_mut().unwrap().insert(self.def_id,\n                                                             (fqn, TypeTrait));\n \n@@ -634,7 +634,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n             if let sty::ty_tup(ref ts) = ty_s.sty {\n                 for &ty_s in ts.iter() {\n                     if let sty::ty_rptr(ref reg, _) = ty_s.sty {\n-                        if let &Region::ReLateBound(_, _) = reg {\n+                        if let &Region::ReLateBound(_, _) = *reg {\n                             debug!(\"  hit an ReLateBound {}\", reg);\n                             if let Some(lt) = reg.clean(cx) {\n                                 late_bounds.push(lt)"}]}