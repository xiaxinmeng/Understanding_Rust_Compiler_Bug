{"sha": "ddbc45673b11f706e94fa17730eaa5c113f224d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYmM0NTY3M2IxMWY3MDZlOTRmYTE3NzMwZWFhNWMxMTNmMjI0ZDc=", "commit": {"author": {"name": "Greg V", "email": "greg@unrelenting.technology", "date": "2020-07-30T23:55:12Z"}, "committer": {"name": "Greg V", "email": "greg@unrelenting.technology", "date": "2020-08-09T14:52:00Z"}, "message": "Add RUST_STD_FREEBSD_12_ABI env variable\n\nUnfortunately, sanitizers do not support versioned symbols[1],\nso they break filesystem access via the legacy, pre-ino64 ABI.\n\nTo use sanitizers on FreeBSD >= 12, we need to build the libc\ncrate with LIBC_CI=1 to use the new ABI -- including the libc\nused for std. But that removes the st_lspare field std was\nexpecting for the deprecated metadata extension.\n\nAdd a way to skip that field to allow the build to work.\n\n[1]: https://github.com/google/sanitizers/issues/628", "tree": {"sha": "dbb045a5f104185487eb9927913306a966a22f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb045a5f104185487eb9927913306a966a22f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddbc45673b11f706e94fa17730eaa5c113f224d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbc45673b11f706e94fa17730eaa5c113f224d7", "html_url": "https://github.com/rust-lang/rust/commit/ddbc45673b11f706e94fa17730eaa5c113f224d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddbc45673b11f706e94fa17730eaa5c113f224d7/comments", "author": {"login": "valpackett", "id": 208340, "node_id": "MDQ6VXNlcjIwODM0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valpackett", "html_url": "https://github.com/valpackett", "followers_url": "https://api.github.com/users/valpackett/followers", "following_url": "https://api.github.com/users/valpackett/following{/other_user}", "gists_url": "https://api.github.com/users/valpackett/gists{/gist_id}", "starred_url": "https://api.github.com/users/valpackett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valpackett/subscriptions", "organizations_url": "https://api.github.com/users/valpackett/orgs", "repos_url": "https://api.github.com/users/valpackett/repos", "events_url": "https://api.github.com/users/valpackett/events{/privacy}", "received_events_url": "https://api.github.com/users/valpackett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "valpackett", "id": 208340, "node_id": "MDQ6VXNlcjIwODM0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valpackett", "html_url": "https://github.com/valpackett", "followers_url": "https://api.github.com/users/valpackett/followers", "following_url": "https://api.github.com/users/valpackett/following{/other_user}", "gists_url": "https://api.github.com/users/valpackett/gists{/gist_id}", "starred_url": "https://api.github.com/users/valpackett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valpackett/subscriptions", "organizations_url": "https://api.github.com/users/valpackett/orgs", "repos_url": "https://api.github.com/users/valpackett/repos", "events_url": "https://api.github.com/users/valpackett/events{/privacy}", "received_events_url": "https://api.github.com/users/valpackett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f39477ecffb0dd3a08bf76bfb44aafcdb4aae6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f39477ecffb0dd3a08bf76bfb44aafcdb4aae6a", "html_url": "https://github.com/rust-lang/rust/commit/2f39477ecffb0dd3a08bf76bfb44aafcdb4aae6a"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "04bfed12153ec42a3f3e69893fd2a2ffe80a3a0e", "filename": "library/std/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbc45673b11f706e94fa17730eaa5c113f224d7/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbc45673b11f706e94fa17730eaa5c113f224d7/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=ddbc45673b11f706e94fa17730eaa5c113f224d7", "patch": "@@ -16,6 +16,9 @@ fn main() {\n     } else if target.contains(\"freebsd\") {\n         println!(\"cargo:rustc-link-lib=execinfo\");\n         println!(\"cargo:rustc-link-lib=pthread\");\n+        if env::var(\"RUST_STD_FREEBSD_12_ABI\").is_ok() {\n+            println!(\"cargo:rustc-cfg=freebsd12\");\n+        }\n     } else if target.contains(\"netbsd\") {\n         println!(\"cargo:rustc-link-lib=pthread\");\n         println!(\"cargo:rustc-link-lib=rt\");"}, {"sha": "fa440548050783163770a897d5e3a34e556662fb", "filename": "library/std/src/os/freebsd/fs.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddbc45673b11f706e94fa17730eaa5c113f224d7/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbc45673b11f706e94fa17730eaa5c113f224d7/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffreebsd%2Ffs.rs?ref=ddbc45673b11f706e94fa17730eaa5c113f224d7", "patch": "@@ -74,7 +74,14 @@ pub trait MetadataExt {\n impl MetadataExt for Metadata {\n     #[allow(deprecated)]\n     fn as_raw_stat(&self) -> &raw::stat {\n-        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n+        // The methods below use libc::stat, so they work fine when libc is built with FreeBSD 12 ABI.\n+        // This method would just return nonsense.\n+        #[cfg(freebsd12)]\n+        panic!(\"as_raw_stat not supported with FreeBSD 12 ABI\");\n+        #[cfg(not(freebsd12))]\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat)\n+        }\n     }\n     fn st_dev(&self) -> u64 {\n         self.as_inner().as_inner().st_dev as u64\n@@ -136,6 +143,11 @@ impl MetadataExt for Metadata {\n     fn st_flags(&self) -> u32 {\n         self.as_inner().as_inner().st_flags as u32\n     }\n+    #[cfg(freebsd12)]\n+    fn st_lspare(&self) -> u32 {\n+        panic!(\"st_lspare not supported with FreeBSD 12 ABI\");\n+    }\n+    #[cfg(not(freebsd12))]\n     fn st_lspare(&self) -> u32 {\n         self.as_inner().as_inner().st_lspare as u32\n     }"}]}