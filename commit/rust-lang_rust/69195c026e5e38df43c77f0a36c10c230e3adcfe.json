{"sha": "69195c026e5e38df43c77f0a36c10c230e3adcfe", "node_id": "C_kwDOAAsO6NoAKDY5MTk1YzAyNmU1ZTM4ZGY0M2M3N2YwYTM2YzEwYzIzMGUzYWRjZmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-05T15:08:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-05T15:08:10Z"}, "message": "Rollup merge of #98860 - RalfJung:dangling-int-ptr, r=davidtwco\n\nadjust dangling-int-ptr error message\n\nbased on suggestions by `@saethlin` in https://github.com/rust-lang/miri/issues/2163\n\nFixes https://github.com/rust-lang/miri/issues/2163\n\nI also did a bit of refactoring on this, so we have a helper method to create a `Pointer` with `None` provenance.", "tree": {"sha": "f66cd46ffa30e31a73e0610080f2f5f323d80228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f66cd46ffa30e31a73e0610080f2f5f323d80228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69195c026e5e38df43c77f0a36c10c230e3adcfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixFPaCRBK7hj4Ov3rIwAAz4EIAFdHKpThGawQIvRkCQabGmQk\nsUedkftkxPIoRRYByjftHbDGjAl4O8zAqqDlzcATVSJjLyj6ZlQ872EYn0WWsZDn\nbCHhrtzqQ8TANGtUZGHXqV2wePzrPNiM/B/pAN7gfbP7Fn0EFQ/J36xpA6QBOgF5\n3saUB2ehHPNYx/etI0nj+e28p8cj61e5ZvLIJFg757FgsP9kStFbyig0YRM8+3pY\nGr9onXheG/6/usK5mQOTixIVRIctQVwJrFZ4W6FdtyY5vmoMo/Owq0MHHDwESUU+\nvDmGk50eqb5ZrUigcN0FTyc5Kix6dcxQzw506cXHiAScFnC6RXLr+BliP0WB9mo=\n=neQq\n-----END PGP SIGNATURE-----\n", "payload": "tree f66cd46ffa30e31a73e0610080f2f5f323d80228\nparent 54f79babae06d3772c067f696e5b12db822ae25f\nparent 46956f76ca6f02e64c372d334be586650e396963\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657033690 +0200\ncommitter GitHub <noreply@github.com> 1657033690 +0200\n\nRollup merge of #98860 - RalfJung:dangling-int-ptr, r=davidtwco\n\nadjust dangling-int-ptr error message\n\nbased on suggestions by `@saethlin` in https://github.com/rust-lang/miri/issues/2163\n\nFixes https://github.com/rust-lang/miri/issues/2163\n\nI also did a bit of refactoring on this, so we have a helper method to create a `Pointer` with `None` provenance.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69195c026e5e38df43c77f0a36c10c230e3adcfe", "html_url": "https://github.com/rust-lang/rust/commit/69195c026e5e38df43c77f0a36c10c230e3adcfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69195c026e5e38df43c77f0a36c10c230e3adcfe/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f79babae06d3772c067f696e5b12db822ae25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f79babae06d3772c067f696e5b12db822ae25f", "html_url": "https://github.com/rust-lang/rust/commit/54f79babae06d3772c067f696e5b12db822ae25f"}, {"sha": "46956f76ca6f02e64c372d334be586650e396963", "url": "https://api.github.com/repos/rust-lang/rust/commits/46956f76ca6f02e64c372d334be586650e396963", "html_url": "https://github.com/rust-lang/rust/commit/46956f76ca6f02e64c372d334be586650e396963"}], "stats": {"total": 107, "additions": 60, "deletions": 47}, "files": [{"sha": "ac380c7ac180071c603a47eb058c06a2675fae1d", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -513,7 +513,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         _ecx: &InterpCx<$mir, $tcx, Self>,\n         addr: u64,\n     ) -> Pointer<Option<AllocId>> {\n-        Pointer::new(None, Size::from_bytes(addr))\n+        Pointer::from_addr(addr)\n     }\n \n     #[inline(always)]\n@@ -523,7 +523,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     ) -> InterpResult<$tcx, Pointer<Option<AllocId>>> {\n         // Allow these casts, but make the pointer not dereferenceable.\n         // (I.e., they behave like transmutation.)\n-        Ok(Pointer::new(None, Size::from_bytes(addr)))\n+        Ok(Pointer::from_addr(addr))\n     }\n \n     #[inline(always)]"}, {"sha": "926afe757ed60b6d366138016977e1bdfce3e0df", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -188,7 +188,7 @@ impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {\n     #[inline]\n     pub fn dangling(layout: TyAndLayout<'tcx>) -> Self {\n         let align = layout.align.abi;\n-        let ptr = Pointer::new(None, Size::from_bytes(align.bytes())); // no provenance, absolute address\n+        let ptr = Pointer::from_addr(align.bytes()); // no provenance, absolute address\n         // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.\n         MPlaceTy { mplace: MemPlace { ptr, meta: MemPlaceMeta::Poison }, layout, align }\n     }"}, {"sha": "f70727b12bae430cd47997a1abe51fb32fe290a1", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -186,17 +186,17 @@ pub enum CheckInAllocMsg {\n \n impl fmt::Display for CheckInAllocMsg {\n     /// When this is printed as an error the context looks like this:\n-    /// \"{msg}0x01 is not a valid pointer\".\n+    /// \"{msg}{pointer} is a dangling pointer\".\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"{}\",\n             match *self {\n                 CheckInAllocMsg::DerefTest => \"dereferencing pointer failed: \",\n                 CheckInAllocMsg::MemoryAccessTest => \"memory access failed: \",\n-                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic failed: \",\n+                CheckInAllocMsg::PointerArithmeticTest => \"out-of-bounds pointer arithmetic: \",\n                 CheckInAllocMsg::OffsetFromTest => \"out-of-bounds offset_from: \",\n-                CheckInAllocMsg::InboundsTest => \"\",\n+                CheckInAllocMsg::InboundsTest => \"out-of-bounds pointer use: \",\n             }\n         )\n     }\n@@ -350,14 +350,12 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 ptr_size = ptr_size.bytes(),\n                 ptr_size_p = pluralize!(ptr_size.bytes()),\n             ),\n-            DanglingIntPointer(0, CheckInAllocMsg::InboundsTest) => {\n-                write!(f, \"null pointer is not a valid pointer for this operation\")\n-            }\n-            DanglingIntPointer(0, msg) => {\n-                write!(f, \"{msg}null pointer is not a valid pointer\")\n-            }\n             DanglingIntPointer(i, msg) => {\n-                write!(f, \"{msg}{i:#x} is not a valid pointer\")\n+                write!(\n+                    f,\n+                    \"{msg}{pointer} is a dangling pointer (it has no provenance)\",\n+                    pointer = Pointer::<Option<AllocId>>::from_addr(*i),\n+                )\n             }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,"}, {"sha": "d4cdf45d186616aa4a4784930c5e0deb60f5d9c7", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -181,7 +181,17 @@ impl<Tag: Provenance> fmt::Debug for Pointer<Option<Tag>> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.provenance {\n             Some(tag) => Provenance::fmt(&Pointer::new(tag, self.offset), f),\n-            None => write!(f, \"{:#x}\", self.offset.bytes()),\n+            None => write!(f, \"{:#x}[noalloc]\", self.offset.bytes()),\n+        }\n+    }\n+}\n+\n+impl<Tag: Provenance> fmt::Display for Pointer<Option<Tag>> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.provenance.is_none() && self.offset.bytes() == 0 {\n+            write!(f, \"null pointer\")\n+        } else {\n+            fmt::Debug::fmt(self, f)\n         }\n     }\n }\n@@ -226,9 +236,14 @@ impl<Tag> Pointer<Option<Tag>> {\n }\n \n impl<Tag> Pointer<Option<Tag>> {\n+    #[inline(always)]\n+    pub fn from_addr(addr: u64) -> Self {\n+        Pointer { provenance: None, offset: Size::from_bytes(addr) }\n+    }\n+\n     #[inline(always)]\n     pub fn null() -> Self {\n-        Pointer { provenance: None, offset: Size::ZERO }\n+        Pointer::from_addr(0)\n     }\n }\n "}, {"sha": "c0092ff3be6d152f565669e7e87db7ef73a8e6dd", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:19:34\n@@ -18,7 +18,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:20:33\n@@ -104,7 +104,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  out-of-bounds offset_from: null pointer is not a valid pointer\n+   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -144,7 +144,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }\n@@ -205,7 +205,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }"}, {"sha": "0aa37452f1c53a8c51932ec5471ef9858c746ec4", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:19:34\n@@ -18,7 +18,7 @@ error[E0080]: could not evaluate static initializer\n LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         dereferencing pointer failed: null pointer is not a valid pointer\n+   |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n    |         inside `std::slice::from_raw_parts::<()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n   ::: $DIR/forbidden_slices.rs:20:33\n@@ -104,7 +104,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  out-of-bounds offset_from: null pointer is not a valid pointer\n+   |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -144,7 +144,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }\n@@ -205,7 +205,7 @@ error[E0080]: could not evaluate static initializer\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n ...\n LL |         unsafe { self.offset(count as isize) }"}, {"sha": "22cb6451e874a6cb1519d2caf55723c7eb3ea401", "filename": "src/test/ui/consts/const-deref-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/const-deref-ptr.rs:4:29\n    |\n LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0xdeadbeef is not a valid pointer\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0xdeadbeef[noalloc] is a dangling pointer (it has no provenance)\n \n error: aborting due to previous error\n "}, {"sha": "ec5508a1e90c9e30f4bd7a991bd206bbe20b6c0f", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.rs?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -5,6 +5,6 @@ const Z: i32 = unsafe { *(&1 as *const i32) };\n \n // bad, will thus error in miri\n const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR evaluation of constant value failed\n-//~| is not a valid pointer\n+//~| is a dangling pointer\n const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR evaluation of constant value failed\n-//~| is not a valid pointer\n+//~| is a dangling pointer"}, {"sha": "e41dea873ac1a9c60d59c7500ef3bf60b6bd99dc", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:7:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:9:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2c is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2c[noalloc] is a dangling pointer (it has no provenance)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2fd98ea322b023fc96b9baa3bd620170cb925dda", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -319,7 +319,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:147:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:151:5"}, {"sha": "bae249076598ef4bc1f302f7ca191fafc853a11d", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -319,7 +319,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:147:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:151:5"}, {"sha": "074beaab2c4d0db481cdc5f37a72340191bd3431", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -11,7 +11,7 @@ const fn helper() -> Option<&'static mut i32> { unsafe {\n     // Undefined behaviour (integer as pointer), who doesn't love tests like this.\n     // This code never gets executed, because the static checks fail before that.\n     Some(&mut *(42 as *mut i32)) //~ ERROR evaluation of constant value failed\n-    //~| 0x2a is not a valid pointer\n+    //~| 0x2a[noalloc] is a dangling pointer\n } }\n // The error is an evaluation error and not a validation error, so the error is reported\n // directly at the site where it occurs."}, {"sha": "234e55e3a96c8beb7e5cb0cd84e332fa35ceeade", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |          |\n-   |          dereferencing pointer failed: 0x2a is not a valid pointer\n+   |          dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n    |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n ...\n LL | const A: Option<&mut i32> = helper();"}, {"sha": "db2d421427c3ebc26a9bc5376b675938da1e268d", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -34,14 +34,14 @@ pub const NOT_MULTIPLE_OF_SIZE: isize = {\n pub const OFFSET_FROM_NULL: isize = {\n     let ptr = 0 as *const u8;\n     unsafe { ptr_offset_from(ptr, ptr) } //~ERROR evaluation of constant value failed\n-    //~| null pointer is not a valid pointer\n+    //~| null pointer is a dangling pointer\n };\n \n pub const DIFFERENT_INT: isize = { // offset_from with two different integers: like DIFFERENT_ALLOC\n     let ptr1 = 8 as *const u8;\n     let ptr2 = 16 as *const u8;\n     unsafe { ptr_offset_from(ptr2, ptr1) } //~ERROR evaluation of constant value failed\n-    //~| 0x8 is not a valid pointer\n+    //~| 0x8[noalloc] is a dangling pointer\n };\n \n const OUT_OF_BOUNDS_1: isize = {"}, {"sha": "daa1d736758c1ff08d0e877457b943e9da21f7aa", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -28,13 +28,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:36:14\n    |\n LL |     unsafe { ptr_offset_from(ptr, ptr) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is not a valid pointer\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:43:14\n    |\n LL |     unsafe { ptr_offset_from(ptr2, ptr1) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: 0x8 is not a valid pointer\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: 0x8[noalloc] is a dangling pointer (it has no provenance)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:52:14"}, {"sha": "5a792bba50cb2ecb20e42fd29a21f248a09f8784", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -18,7 +18,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:8:43\n@@ -32,7 +32,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:9:45\n@@ -102,7 +102,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:15:49\n@@ -116,7 +116,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:17:50\n@@ -130,7 +130,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: 0x1 is not a valid pointer\n+   |                  out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:18:42\n@@ -144,7 +144,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: null pointer is not a valid pointer\n+   |                  out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:21:50\n@@ -158,7 +158,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: 0x7f..f is not a valid pointer\n+   |                  out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:24:47"}, {"sha": "67b9fec4a0e11e0392b26562a6bdc56d59e080d0", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n+   |                  out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/ptr_comparisons.rs:58:34"}, {"sha": "2efbd6989ad61ae26f04e08ee4155657a3edeb06", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69195c026e5e38df43c77f0a36c10c230e3adcfe/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=69195c026e5e38df43c77f0a36c10c230e3adcfe", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/E0396-fixed.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n-   |                            ^^^^^^^^^ dereferencing pointer failed: 0x5f3759df is not a valid pointer\n+   |                            ^^^^^^^^^ dereferencing pointer failed: 0x5f3759df[noalloc] is a dangling pointer (it has no provenance)\n \n error: aborting due to previous error\n "}]}