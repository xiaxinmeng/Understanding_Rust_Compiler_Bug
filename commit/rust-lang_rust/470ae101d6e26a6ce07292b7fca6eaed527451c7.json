{"sha": "470ae101d6e26a6ce07292b7fca6eaed527451c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MGFlMTAxZDZlMjZhNmNlMDcyOTJiN2ZjYTZlYWVkNTI3NDUxYzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:38:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T07:55:49Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "b976bc0eb040da67646a9d99bb9b901cb9f55abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b976bc0eb040da67646a9d99bb9b901cb9f55abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/470ae101d6e26a6ce07292b7fca6eaed527451c7", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/470ae101d6e26a6ce07292b7fca6eaed527451c7", "html_url": "https://github.com/rust-lang/rust/commit/470ae101d6e26a6ce07292b7fca6eaed527451c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/470ae101d6e26a6ce07292b7fca6eaed527451c7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb7599b83e8f072a8871db3fb238f50e067794de", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7599b83e8f072a8871db3fb238f50e067794de", "html_url": "https://github.com/rust-lang/rust/commit/cb7599b83e8f072a8871db3fb238f50e067794de"}], "stats": {"total": 79, "additions": 38, "deletions": 41}, "files": [{"sha": "b0fa5434a1474c65f2ebb64be23a4316f337b87f", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -412,7 +412,7 @@ impl<T> TypedArenaChunk<T> {\n         let size = calculate_size::<T>(self.capacity);\n         deallocate(self as *mut TypedArenaChunk<T> as *mut u8, size,\n                    mem::min_align_of::<TypedArenaChunk<T>>());\n-        if next.is_not_null() {\n+        if !next.is_null() {\n             let capacity = (*next).capacity;\n             (*next).destroy(capacity);\n         }"}, {"sha": "fe9d8de440a17aca42c15bad4f6d11fc071b031b", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -114,14 +114,14 @@ mod prelude {\n     pub use core::ops::{Drop, Fn, FnMut, FnOnce};\n     pub use core::option::Option;\n     pub use core::option::Option::{Some, None};\n-    pub use core::ptr::RawPtr;\n+    pub use core::ptr::PtrExt;\n     pub use core::result::Result;\n     pub use core::result::Result::{Ok, Err};\n \n     // in core and collections (may differ).\n     pub use slice::{PartialEqSliceExt, OrdSliceExt};\n     pub use slice::{AsSlice, SliceExt};\n-    pub use str::{from_str, Str};\n+    pub use str::{from_str, Str, StrExt};\n \n     // from other crates.\n     pub use alloc::boxed::Box;"}, {"sha": "7c7a7e19a2f18c92ece50074a8dceaf1e5992643", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -1770,15 +1770,9 @@ mod tests {\n \n     use core::default::Default;\n     use core::iter::AdditiveIterator;\n-    use super::{eq_slice, from_utf8, is_utf8, is_utf16, raw};\n-    use super::truncate_utf16_at_nul;\n+    use super::{from_utf8, is_utf8, raw};\n     use super::MaybeOwned::{Owned, Slice};\n-    use std::slice::{AsSlice, SliceExt};\n-    use string::{String, ToString};\n-    use vec::Vec;\n-    use slice::CloneSliceExt;\n-\n-    use unicode::char::UnicodeChar;\n+    use super::Utf8Error;\n \n     #[test]\n     fn test_le() {"}, {"sha": "c6c19cae75f1efc1b55a005d0f6a8eeb6cf307d6", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -1082,7 +1082,7 @@ mod tests {\n     use prelude::*;\n     use test::Bencher;\n \n-    use str::{StrExt, Utf8Error};\n+    use str::Utf8Error;\n     use str;\n     use super::as_string;\n "}, {"sha": "f28abcc10cfd8dcf0d651005566e08a61a67834c", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -538,7 +538,7 @@ pub unsafe fn from_c_multistring<F>(buf: *const libc::c_char,\n mod tests {\n     use super::*;\n     use prelude::{spawn, Some, None, Option, FnOnce, ToString, CloneSliceExt};\n-    use prelude::{Clone, RawPtr, Iterator, SliceExt, StrExt};\n+    use prelude::{Clone, PtrExt, Iterator, SliceExt, StrExt};\n     use ptr;\n     use thread::Thread;\n     use libc;"}, {"sha": "7b7473b2c993c27d3cd13d6e9cd86034f3eed7ab", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -278,7 +278,7 @@ fn test_resize_policy() {\n ///\n /// impl Viking {\n ///     /// Create a new Viking.\n-///     pub fn new(name: &str, country: &str) -> Viking {\n+///     fn new(name: &str, country: &str) -> Viking {\n ///         Viking { name: name.to_string(), country: country.to_string() }\n ///     }\n /// }"}, {"sha": "b127507f048d22ff0d7751feb212277d075979f4", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -1207,6 +1207,7 @@ mod tests {\n     #[test]\n     #[cfg(windows)]\n     fn env_map_keys_ci() {\n+        use c_str::ToCStr;\n         use super::EnvKey;\n         let mut cmd = Command::new(\"\");\n         cmd.env(\"path\", \"foo\");"}, {"sha": "989f44f7b8e4239326adf25ac0ec1be2cf154474", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -731,7 +731,7 @@ fn real_args() -> Vec<String> {\n         let ptr = ptr as *const u16;\n         let buf = slice::from_raw_buf(&ptr, len);\n         let opt_s = String::from_utf16(sys::os::truncate_utf16_at_nul(buf));\n-        opt_s.expect(\"CommandLineToArgvW returned invalid UTF-16\")\n+        opt_s.ok().expect(\"CommandLineToArgvW returned invalid UTF-16\")\n     });\n \n     unsafe {"}, {"sha": "3eeb0ad3968fe9b091e77cc9f4154d5466a98c4a", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -60,19 +60,19 @@ mod test {\n         t!(\"_ZN4$UP$E\", \"Box\");\n         t!(\"_ZN8$UP$testE\", \"Boxtest\");\n         t!(\"_ZN8$UP$test4foobE\", \"Boxtest::foob\");\n-        t!(\"_ZN8$x20test4foobE\", \" test::foob\");\n+        t!(\"_ZN10$u{20}test4foobE\", \" test::foob\");\n     }\n \n     #[test]\n     fn demangle_many_dollars() {\n-        t!(\"_ZN12test$x20test4foobE\", \"test test::foob\");\n+        t!(\"_ZN14test$u{20}test4foobE\", \"test test::foob\");\n         t!(\"_ZN12test$UP$test4foobE\", \"testBoxtest::foob\");\n     }\n \n     #[test]\n     fn demangle_windows() {\n         t!(\"ZN4testE\", \"test\");\n-        t!(\"ZN12test$x20test4foobE\", \"test test::foob\");\n+        t!(\"ZN14test$u{20}test4foobE\", \"test test::foob\");\n         t!(\"ZN12test$UP$test4foobE\", \"testBoxtest::foob\");\n     }\n }"}, {"sha": "52004bb4a8f5f4a99f59658424c13ed59af0cb91", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -234,23 +234,25 @@ impl<T: Send> Drop for Mutex<T> {\n     }\n }\n \n-static DUMMY: UnsafeCell<()> = UnsafeCell { value: () };\n+struct Dummy(UnsafeCell<()>);\n+unsafe impl Sync for Dummy {}\n+static DUMMY: Dummy = Dummy(UnsafeCell { value: () });\n \n impl StaticMutex {\n     /// Acquires this lock, see `Mutex::lock`\n     #[inline]\n     #[unstable = \"may be merged with Mutex in the future\"]\n     pub fn lock(&'static self) -> LockResult<MutexGuard<()>> {\n         unsafe { self.lock.lock() }\n-        MutexGuard::new(self, &DUMMY)\n+        MutexGuard::new(self, &DUMMY.0)\n     }\n \n     /// Attempts to grab this lock, see `Mutex::try_lock`\n     #[inline]\n     #[unstable = \"may be merged with Mutex in the future\"]\n     pub fn try_lock(&'static self) -> TryLockResult<MutexGuard<()>> {\n         if unsafe { self.lock.try_lock() } {\n-            Ok(try!(MutexGuard::new(self, &DUMMY)))\n+            Ok(try!(MutexGuard::new(self, &DUMMY.0)))\n         } else {\n             Err(TryLockError::WouldBlock)\n         }"}, {"sha": "7f3c77c97adefdeb10c055ca31d74de7c5d9eaf7", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -233,7 +233,9 @@ impl<T> Drop for RWLock<T> {\n     }\n }\n \n-static DUMMY: UnsafeCell<()> = UnsafeCell { value: () };\n+struct Dummy(UnsafeCell<()>);\n+unsafe impl Sync for Dummy {}\n+static DUMMY: Dummy = Dummy(UnsafeCell { value: () });\n \n impl StaticRWLock {\n     /// Locks this rwlock with shared read access, blocking the current thread\n@@ -244,7 +246,7 @@ impl StaticRWLock {\n     #[unstable = \"may be merged with RWLock in the future\"]\n     pub fn read(&'static self) -> LockResult<RWLockReadGuard<'static, ()>> {\n         unsafe { self.lock.read() }\n-        RWLockReadGuard::new(self, &DUMMY)\n+        RWLockReadGuard::new(self, &DUMMY.0)\n     }\n \n     /// Attempt to acquire this lock with shared read access.\n@@ -255,7 +257,7 @@ impl StaticRWLock {\n     pub fn try_read(&'static self)\n                     -> TryLockResult<RWLockReadGuard<'static, ()>> {\n         if unsafe { self.lock.try_read() } {\n-            Ok(try!(RWLockReadGuard::new(self, &DUMMY)))\n+            Ok(try!(RWLockReadGuard::new(self, &DUMMY.0)))\n         } else {\n             Err(TryLockError::WouldBlock)\n         }\n@@ -269,7 +271,7 @@ impl StaticRWLock {\n     #[unstable = \"may be merged with RWLock in the future\"]\n     pub fn write(&'static self) -> LockResult<RWLockWriteGuard<'static, ()>> {\n         unsafe { self.lock.write() }\n-        RWLockWriteGuard::new(self, &DUMMY)\n+        RWLockWriteGuard::new(self, &DUMMY.0)\n     }\n \n     /// Attempt to lock this rwlock with exclusive write access.\n@@ -280,7 +282,7 @@ impl StaticRWLock {\n     pub fn try_write(&'static self)\n                      -> TryLockResult<RWLockWriteGuard<'static, ()>> {\n         if unsafe { self.lock.try_write() } {\n-            Ok(try!(RWLockWriteGuard::new(self, &DUMMY)))\n+            Ok(try!(RWLockWriteGuard::new(self, &DUMMY.0)))\n         } else {\n             Err(TryLockError::WouldBlock)\n         }"}, {"sha": "7a09137a225dca5e21dc6d68994a9c71ee947e63", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -669,7 +669,7 @@ impl TcpStream {\n     fn lock_nonblocking<'a>(&'a self) -> Guard<'a> {\n         let ret = Guard {\n             fd: self.fd(),\n-            guard: self.inner.lock.lock(),\n+            guard: self.inner.lock.lock().unwrap(),\n         };\n         assert!(set_nonblocking(self.fd(), true).is_ok());\n         ret\n@@ -808,7 +808,7 @@ impl UdpSocket {\n     fn lock_nonblocking<'a>(&'a self) -> Guard<'a> {\n         let ret = Guard {\n             fd: self.fd(),\n-            guard: self.inner.lock.lock(),\n+            guard: self.inner.lock.lock().unwrap(),\n         };\n         assert!(set_nonblocking(self.fd(), true).is_ok());\n         ret"}, {"sha": "868b460aa5ed3897e807bc667aaf05babd764949", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -145,7 +145,7 @@ impl UnixStream {\n     fn lock_nonblocking<'a>(&'a self) -> Guard<'a> {\n         let ret = Guard {\n             fd: self.fd(),\n-            guard: unsafe { self.inner.lock.lock() },\n+            guard: unsafe { self.inner.lock.lock().unwrap() },\n         };\n         assert!(set_nonblocking(self.fd(), true).is_ok());\n         ret"}, {"sha": "06259d61fcb8413bfa24b78e6cd36ed7352b7a87", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -131,7 +131,6 @@ extern \"system\" {\n \n pub mod compat {\n     use intrinsics::{atomic_store_relaxed, transmute};\n-    use iter::IteratorExt;\n     use libc::types::os::arch::extra::{LPCWSTR, HMODULE, LPCSTR, LPVOID};\n     use prelude::*;\n "}, {"sha": "3ad439078b9a146767660b3469ca6d93586add35", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -265,8 +265,8 @@ pub fn readdir(p: &Path) -> IoResult<Vec<Path>> {\n                 {\n                     let filename = os::truncate_utf16_at_nul(&wfd.cFileName);\n                     match String::from_utf16(filename) {\n-                        Some(filename) => paths.push(Path::new(filename)),\n-                        None => {\n+                        Ok(filename) => paths.push(Path::new(filename)),\n+                        Err(..) => {\n                             assert!(libc::FindClose(find_handle) != 0);\n                             return Err(IoError {\n                                 kind: io::InvalidInput,"}, {"sha": "fa08290a888e9f3a2f86d1dcc303eec09aae1e2e", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -99,8 +99,9 @@ pub fn error_string(errnum: i32) -> String {\n \n         let msg = String::from_utf16(truncate_utf16_at_nul(&buf));\n         match msg {\n-            Some(msg) => format!(\"OS Error {}: {}\", errnum, msg),\n-            None => format!(\"OS Error {} (FormatMessageW() returned invalid UTF-16)\", errnum),\n+            Ok(msg) => format!(\"OS Error {}: {}\", errnum, msg),\n+            Err(..) => format!(\"OS Error {} (FormatMessageW() returned \\\n+                                invalid UTF-16)\", errnum),\n         }\n     }\n }\n@@ -147,7 +148,7 @@ pub fn fill_utf16_buf_and_decode(f: |*mut u16, DWORD| -> DWORD) -> Option<String\n                 // We want to explicitly catch the case when the\n                 // closure returned invalid UTF-16, rather than\n                 // set `res` to None and continue.\n-                let s = String::from_utf16(sub)\n+                let s = String::from_utf16(sub).ok()\n                     .expect(\"fill_utf16_buf_and_decode: closure created invalid UTF-16\");\n                 res = Some(s)\n             }\n@@ -169,8 +170,8 @@ pub fn getcwd() -> IoResult<Path> {\n     }\n \n     match String::from_utf16(truncate_utf16_at_nul(&buf)) {\n-        Some(ref cwd) => Ok(Path::new(cwd)),\n-        None => Err(IoError {\n+        Ok(ref cwd) => Ok(Path::new(cwd)),\n+        Err(..) => Err(IoError {\n             kind: OtherIoError,\n             desc: \"GetCurrentDirectoryW returned invalid UTF-16\",\n             detail: None,"}, {"sha": "99292b3b44bd1749b3b84ca51e3d1c4d06fdd97c", "filename": "src/libstd/sys/windows/tty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftty.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -101,8 +101,8 @@ impl TTY {\n             };\n             utf16.truncate(num as uint);\n             let utf8 = match String::from_utf16(utf16.as_slice()) {\n-                Some(utf8) => utf8.into_bytes(),\n-                None => return Err(invalid_encoding()),\n+                Ok(utf8) => utf8.into_bytes(),\n+                Err(..) => return Err(invalid_encoding()),\n             };\n             self.utf8 = MemReader::new(utf8);\n         }"}, {"sha": "77836143f27dd8824c8d91c7831d44f8d3b7cb64", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -16,6 +16,5 @@ static boxed: Box<RefCell<int>> = box RefCell::new(0);\n //~^ ERROR statics are not allowed to have custom pointers\n //~| ERROR: the trait `core::kinds::Sync` is not implemented for the type\n //~| ERROR: the trait `core::kinds::Sync` is not implemented for the type\n-//~| ERROR: the trait `core::kinds::Sync` is not implemented for the type\n \n fn main() { }"}, {"sha": "95ebb8bd882215524fe298fbe46989142cba7c91", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470ae101d6e26a6ce07292b7fca6eaed527451c7/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=470ae101d6e26a6ce07292b7fca6eaed527451c7", "patch": "@@ -17,5 +17,4 @@ fn main() {\n     f(x);\n     //~^ ERROR `core::kinds::Sync` is not implemented\n     //~^^ ERROR `core::kinds::Sync` is not implemented\n-    //~^^^ ERROR `core::kinds::Sync` is not implemented\n }"}]}