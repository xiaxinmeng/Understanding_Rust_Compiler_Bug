{"sha": "6843d8ccd562c5c5d45c0bba570908d5aa765610", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDNkOGNjZDU2MmM1YzVkNDVjMGJiYTU3MDkwOGQ1YWE3NjU2MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-23T14:30:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-23T14:30:57Z"}, "message": "auto merge of #16693 : vadimcn/rust/rename--win32, r=pcwalton", "tree": {"sha": "8110d5487f05c4193c86af69cb99dd491d990720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8110d5487f05c4193c86af69cb99dd491d990720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6843d8ccd562c5c5d45c0bba570908d5aa765610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6843d8ccd562c5c5d45c0bba570908d5aa765610", "html_url": "https://github.com/rust-lang/rust/commit/6843d8ccd562c5c5d45c0bba570908d5aa765610", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6843d8ccd562c5c5d45c0bba570908d5aa765610/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f66fd2eed10de2acacd8af73c704bf4d140410bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66fd2eed10de2acacd8af73c704bf4d140410bb", "html_url": "https://github.com/rust-lang/rust/commit/f66fd2eed10de2acacd8af73c704bf4d140410bb"}, {"sha": "68811817f723e57354b0137b1c9bc6b28016ecbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/68811817f723e57354b0137b1c9bc6b28016ecbc", "html_url": "https://github.com/rust-lang/rust/commit/68811817f723e57354b0137b1c9bc6b28016ecbc"}], "stats": {"total": 81, "additions": 24, "deletions": 57}, "files": [{"sha": "b36bc96cd351cd6098fad4675770e6d4be8baa11", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -17,7 +17,6 @@ use header;\n use procsrv;\n use util::logv;\n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n use util;\n \n use std::io::File;\n@@ -819,7 +818,6 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n     }).collect::<Vec<String> >();\n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     fn to_lower( s : &str ) -> String {\n         let i = s.chars();\n         let c : Vec<char> = i.map( |c| {\n@@ -833,7 +831,6 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n     }\n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     fn prefix_matches( line : &str, prefix : &str ) -> bool {\n         to_lower(line).as_slice().starts_with(to_lower(prefix).as_slice())\n     }\n@@ -1251,15 +1248,13 @@ fn make_cmdline(_libpath: &str, prog: &str, args: &[String]) -> String {\n }\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn make_cmdline(libpath: &str, prog: &str, args: &[String]) -> String {\n     format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.connect(\" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n // for diagnostic purposes\n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn lib_path_cmd_prefix(path: &str) -> String {\n     format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n }"}, {"sha": "22b5600d5bfcc197e61b9d844805e194be1a0c3c", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -11,7 +11,6 @@\n use common::Config;\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n use std::os::getenv;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n@@ -36,7 +35,6 @@ pub fn get_os(triple: &str) -> &'static str {\n }\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn make_new_path(path: &str) -> String {\n \n     // Windows just uses PATH as the library search path, so we have to\n@@ -50,11 +48,9 @@ pub fn make_new_path(path: &str) -> String {\n }\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn lib_path_env_var() -> &'static str { \"PATH\" }\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub fn path_div() -> &'static str { \";\" }\n \n pub fn logv(config: &Config, s: String) {"}, {"sha": "f184e07891b9642cd2487cff40ef70eb5c04a744", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -68,8 +68,6 @@ def run(args):\n     ]\n \n     f.write(\"#[cfg(\" + ', '.join(cfg) + \")]\\n\")\n-    if os == \"windows\": # NOTE: Remove after snapshot\n-        f.write(\"#[cfg(stage0, target_arch = \\\"%s\\\", target_os = \\\"win32\\\")]\\n\" % (arch,))\n \n     version = run([llconfig, '--version']).strip()\n "}, {"sha": "949dd08eaa343cc098db121f0f9aae587bea5f56", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -64,7 +64,7 @@\n * sanity while editing, filling-in-details and eliminating duplication) into\n * definitions common-to-all (held in modules named c95, c99, posix88, posix01\n * and posix08) and definitions that appear only on *some* platforms (named\n-* 'extra'). This would be things like significant OSX foundation kit, or win32\n+* 'extra'). This would be things like significant OSX foundation kit, or Windows\n * library kernel32.dll, or various fancy glibc, linux or BSD extensions.\n *\n * In addition to the per-platform 'extra' modules, we define a module of\n@@ -1195,15 +1195,14 @@ pub mod types {\n     }\n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_short, time_t, c_long};\n                 use types::os::arch::extra::{int64, time64_t};\n                 use types::os::arch::posix88::{dev_t, ino_t};\n \n-                // pub Note: this is the struct called stat64 in win32. Not stat,\n+                // pub Note: this is the struct called stat64 in Windows. Not stat,\n                 // nor stati64.\n                 #[repr(C)]\n                 pub struct stat {\n@@ -1220,7 +1219,7 @@ pub mod types {\n                     pub st_ctime: time64_t,\n                 }\n \n-                // note that this is called utimbuf64 in win32\n+                // note that this is called utimbuf64 in Windows\n                 #[repr(C)]\n                 pub struct utimbuf {\n                     pub actime: time64_t,\n@@ -1915,7 +1914,6 @@ pub mod consts {\n     // into this module.\n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod os {\n         pub mod c95 {\n             use types::os::arch::c95::{c_int, c_uint};\n@@ -4000,7 +3998,6 @@ pub mod funcs {\n     // with the same POSIX functions and types as other platforms.\n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod posix88 {\n         pub mod stat_ {\n             use types::os::common::posix01::{stat, utimbuf};\n@@ -4430,7 +4427,6 @@ pub mod funcs {\n     }\n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod posix01 {\n         pub mod stat_ {\n         }\n@@ -4447,7 +4443,6 @@ pub mod funcs {\n \n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"android\")]\n     #[cfg(target_os = \"macos\")]\n@@ -4586,7 +4581,6 @@ pub mod funcs {\n \n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod bsd44 {\n     }\n \n@@ -4613,7 +4607,6 @@ pub mod funcs {\n \n \n     #[cfg(target_os = \"windows\")]\n-    #[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n     pub mod extra {\n \n         pub mod kernel32 {"}, {"sha": "80c9e91b48f7a5e24e3ba6db156d142c94090133", "filename": "src/libnative/io/c_windows.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fc_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fc_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_windows.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "previous_filename": "src/libnative/io/c_win32.rs"}, {"sha": "cb1d79b8397face0ab6dbba21f148ff37084eef7", "filename": "src/libnative/io/file_windows.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Ffile_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Ffile_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_windows.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Blocking win32-based file I/O\n+//! Blocking Windows-based file I/O\n \n use alloc::arc::Arc;\n use libc::{c_int, c_void};\n use libc;\n use std::c_str::CString;\n use std::mem;\n-use std::os::win32::fill_utf16_buf_and_decode;\n+use std::os::windows::fill_utf16_buf_and_decode;\n use std::ptr;\n use std::rt::rtio;\n use std::rt::rtio::{IoResult, IoError};", "previous_filename": "src/libnative/io/file_win32.rs"}, {"sha": "2dc6539b1780620b904ea408c3a6194a4268bd73", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -46,7 +46,7 @@ mod util;\n #[path = \"file_unix.rs\"]\n pub mod file;\n #[cfg(windows)]\n-#[path = \"file_win32.rs\"]\n+#[path = \"file_windows.rs\"]\n pub mod file;\n \n #[cfg(target_os = \"macos\")]\n@@ -59,24 +59,23 @@ pub mod file;\n pub mod timer;\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n-#[path = \"timer_win32.rs\"]\n+#[path = \"timer_windows.rs\"]\n pub mod timer;\n \n #[cfg(unix)]\n #[path = \"pipe_unix.rs\"]\n pub mod pipe;\n \n #[cfg(windows)]\n-#[path = \"pipe_win32.rs\"]\n+#[path = \"pipe_windows.rs\"]\n pub mod pipe;\n \n #[cfg(windows)]\n-#[path = \"tty_win32.rs\"]\n+#[path = \"tty_windows.rs\"]\n mod tty;\n \n #[cfg(unix)]    #[path = \"c_unix.rs\"]  mod c;\n-#[cfg(windows)] #[path = \"c_win32.rs\"] mod c;\n+#[cfg(windows)] #[path = \"c_windows.rs\"] mod c;\n \n fn unimpl() -> IoError {\n     #[cfg(unix)] use libc::ENOSYS as ERROR;"}, {"sha": "717915e5d23bde51c181ace0c4768f436dec4738", "filename": "src/libnative/io/pipe_windows.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fpipe_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fpipe_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_windows.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "previous_filename": "src/libnative/io/pipe_win32.rs"}, {"sha": "d1b2885415747b8cc4d80e8301cd62bb21c77bb6", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -786,7 +786,7 @@ fn with_envp<T>(env: Option<&[(&CString, &CString)]>,\n \n #[cfg(windows)]\n fn with_envp<T>(env: Option<&[(&CString, &CString)]>, cb: |*mut c_void| -> T) -> T {\n-    // On win32 we pass an \"environment block\" which is not a char**, but\n+    // On Windows we pass an \"environment block\" which is not a char**, but\n     // rather a concatenation of null-terminated k=v\\0 sequences, with a final\n     // \\0 to terminate.\n     match env {"}, {"sha": "8d781f50d35d4949b91d5ec1c5f5b0a209a4f510", "filename": "src/libnative/io/timer_windows.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Ftimer_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Ftimer_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_windows.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Timers based on win32 WaitableTimers\n+//! Timers based on Windows WaitableTimers\n //!\n //! This implementation is meant to be used solely on windows. As with other\n //! implementations, there is a worker thread which is doing all the waiting on", "previous_filename": "src/libnative/io/timer_win32.rs"}, {"sha": "e98fe1e20b19e7be92cf6a9266e5103abf964fb7", "filename": "src/libnative/io/tty_windows.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Ftty_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibnative%2Fio%2Ftty_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftty_windows.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "previous_filename": "src/libnative/io/tty_win32.rs"}, {"sha": "7c2b0ba6168177dceb0e43ccbb3bac10c0345ad9", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -856,7 +856,7 @@ pub fn get_cc_prog(sess: &Session) -> String {\n     // In the future, FreeBSD will use clang as default compiler.\n     // It would be flexible to use cc (system's default C compiler)\n     // instead of hard-coded gcc.\n-    // For win32, there is no cc command, so we add a condition to make it use gcc.\n+    // For Windows, there is no cc command, so we add a condition to make it use gcc.\n     match sess.targ_cfg.os {\n         abi::OsWindows => \"gcc\",\n         _ => \"cc\","}, {"sha": "bf8caef2e97430ef8d0a26909be64eb8d18a0339", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -876,7 +876,7 @@ pub fn trans_drop_flag_ptr<'b>(mut bcx: &'b Block<'b>, r: &Repr,\n  * depending on which case of an enum it is.\n  *\n  * To understand the alignment situation, consider `enum E { V64(u64),\n- * V32(u32, u32) }` on win32.  The type has 8-byte alignment to\n+ * V32(u32, u32) }` on Windows.  The type has 8-byte alignment to\n  * accommodate the u64, but `V32(x, y)` would have LLVM type `{i32,\n  * i32, i32}`, which is 4-byte aligned.\n  *"}, {"sha": "fe217a6d123aa3c84268ed45819dac064410c9a7", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -74,7 +74,6 @@ impl PluginManager {\n }\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n fn libname(mut n: String) -> String {\n     n.push_str(\".dll\");\n     n\n@@ -86,8 +85,7 @@ fn libname(mut n: String) -> String {\n     n\n }\n \n-#[cfg(not(stage0), not(target_os=\"windows\"), not(target_os=\"macos\"))]\n-#[cfg(stage0, not(target_os=\"win32\"), not(target_os=\"macos\"))] // NOTE: Remove after snapshot\n+#[cfg(not(target_os=\"windows\"), not(target_os=\"macos\"))]\n fn libname(n: String) -> String {\n     let mut i = String::from_str(\"lib\");\n     i.push_str(n.as_slice());"}, {"sha": "6ac36f8b856b7d93549937cb131837606e640e14", "filename": "src/librustrt/args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustrt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustrt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fargs.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -148,7 +148,6 @@ mod imp {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"ios\")]\n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n mod imp {\n     use core::prelude::*;\n     use collections::vec::Vec;"}, {"sha": "a43920d27a763115e0b9203dcb2ae6572945c5d8", "filename": "src/librustrt/libunwind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustrt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustrt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flibunwind.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -88,7 +88,6 @@ pub type _Unwind_Exception_Cleanup_Fn =\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"freebsd\")]\n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[link(name = \"gcc_s\")]\n extern {}\n "}, {"sha": "3190e9f784149a2d0130d6e8cf391cf3c13b7818", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -200,7 +200,6 @@ pub unsafe fn record_sp_limit(limit: uint) {\n         asm!(\"movq $0, %fs:112\" :: \"r\"(limit) :: \"volatile\")\n     }\n     #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n-    #[cfg(stage0, target_arch = \"x86_64\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_record_sp_limit(limit: uint) {\n         // see: http://en.wikipedia.org/wiki/Win32_Thread_Information_Block\n         // store this inside of the \"arbitrary data slot\", but double the size\n@@ -229,7 +228,6 @@ pub unsafe fn record_sp_limit(limit: uint) {\n         asm!(\"movl $0, %gs:48\" :: \"r\"(limit) :: \"volatile\")\n     }\n     #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n-    #[cfg(stage0, target_arch = \"x86\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_record_sp_limit(limit: uint) {\n         // see: http://en.wikipedia.org/wiki/Win32_Thread_Information_Block\n         // store this inside of the \"arbitrary data slot\"\n@@ -283,7 +281,6 @@ pub unsafe fn get_sp_limit() -> uint {\n         return limit;\n     }\n     #[cfg(target_arch = \"x86_64\", target_os = \"windows\")] #[inline(always)]\n-    #[cfg(stage0, target_arch = \"x86_64\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movq %gs:0x28, $0\" : \"=r\"(limit) ::: \"volatile\");\n@@ -320,7 +317,6 @@ pub unsafe fn get_sp_limit() -> uint {\n         return limit;\n     }\n     #[cfg(target_arch = \"x86\", target_os = \"windows\")] #[inline(always)]\n-    #[cfg(stage0, target_arch = \"x86\", target_os = \"win32\")] // NOTE: Remove after snapshot\n     unsafe fn target_get_sp_limit() -> uint {\n         let limit;\n         asm!(\"movl %fs:0x14, $0\" : \"=r\"(limit) ::: \"volatile\");"}, {"sha": "c7c278675c1821c2c5353b7bfa8f67cab29d1946", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -733,7 +733,6 @@ extern {}\n extern {}\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n #[link(name = \"ws2_32\")]\n #[link(name = \"psapi\")]\n #[link(name = \"iphlpapi\")]"}, {"sha": "16c00d76c54655957413db569a200e899d0899d7", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -279,7 +279,6 @@ pub mod dl {\n }\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub mod dl {\n     use c_str::ToCStr;\n     use iter::Iterator;"}, {"sha": "dc6478df3605d947e2cbbefad906c6ea2573e87d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -348,7 +348,7 @@ impl IoError {\n                 // libuv maps this error code to EISDIR. we do too. if it is found\n                 // to be incorrect, we can add in some more machinery to only\n                 // return this message when ERROR_INVALID_FUNCTION after certain\n-                // win32 calls.\n+                // Windows calls.\n                 libc::ERROR_INVALID_FUNCTION => (InvalidInput,\n                                                  \"illegal operation on a directory\"),\n "}, {"sha": "ad666d70034842a8ac7733ae171c27a24d0b7184", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -139,7 +139,7 @@ pub fn getcwd() -> Path {\n }\n \n #[cfg(windows)]\n-pub mod win32 {\n+pub mod windows {\n     use libc::types::os::arch::extra::DWORD;\n     use libc;\n     use option::{None, Option};\n@@ -362,7 +362,7 @@ pub fn getenv_as_bytes(n: &str) -> Option<Vec<u8>> {\n pub fn getenv(n: &str) -> Option<String> {\n     unsafe {\n         with_env_lock(|| {\n-            use os::win32::{fill_utf16_buf_and_decode};\n+            use os::windows::{fill_utf16_buf_and_decode};\n             let n: Vec<u16> = n.utf16_units().collect();\n             let n = n.append_one(0);\n             fill_utf16_buf_and_decode(|buf, sz| {\n@@ -707,7 +707,7 @@ pub fn self_exe_name() -> Option<Path> {\n     #[cfg(windows)]\n     fn load_self() -> Option<Vec<u8>> {\n         unsafe {\n-            use os::win32::fill_utf16_buf_and_decode;\n+            use os::windows::fill_utf16_buf_and_decode;\n             fill_utf16_buf_and_decode(|buf, sz| {\n                 libc::GetModuleFileNameW(0u as libc::DWORD, buf, sz)\n             }).map(|s| s.into_string().into_bytes())\n@@ -1315,7 +1315,7 @@ pub fn page_size() -> uint {\n \n /// A memory mapped file or chunk of memory. This is a very system-specific\n /// interface to the OS's memory mapping facilities (`mmap` on POSIX,\n-/// `VirtualAlloc`/`CreateFileMapping` on win32). It makes no attempt at\n+/// `VirtualAlloc`/`CreateFileMapping` on Windows). It makes no attempt at\n /// abstracting platform differences, besides in error values returned. Consider\n /// yourself warned.\n ///\n@@ -1385,7 +1385,7 @@ pub enum MapError {\n     ErrZeroLength,\n     /// Unrecognized error. The inner value is the unrecognized errno.\n     ErrUnknown(int),\n-    /// ## The following are win32-specific\n+    /// ## The following are Windows-specific\n     ///\n     /// Unsupported combination of protection flags\n     /// (`MapReadable`/`MapWritable`/`MapExecutable`).\n@@ -1843,14 +1843,13 @@ pub mod consts {\n }\n \n #[cfg(target_os = \"windows\")]\n-#[cfg(stage0, target_os = \"win32\")] // NOTE: Remove after snapshot\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n     pub static FAMILY: &'static str = \"windows\";\n \n     /// A string describing the specific operating system in use: in this\n-    /// case, `win32`.\n+    /// case, `windows`.\n     pub static SYSNAME: &'static str = \"windows\";\n \n     /// Specifies the filename prefix used for shared libraries on this"}, {"sha": "64a61cc6b3bdcd8d53fcf21745aa188d24b67285", "filename": "src/libterm/win.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -10,7 +10,7 @@\n \n //! Windows console handling\n \n-// FIXME (#13400): this is only a tiny fraction of the win32 console api\n+// FIXME (#13400): this is only a tiny fraction of the Windows console api\n \n extern crate libc;\n "}, {"sha": "30d6b934fa277a06b83e8bd7792bf218f741df18", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -18,7 +18,6 @@ mod hello;\n mod hello;\n \n #[cfg(target_os = \"windows\")]\n-/* NOTE: Remove after snapshot */#[cfg(stage0, target_os = \"win32\")]\n mod hello;\n \n #[cfg(target_os = \"freebsd\")]"}, {"sha": "4873dc13c40c912d5e3d59b557b13771e3fe8556", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -43,7 +43,6 @@ mod m {\n }\n \n #[cfg(target_os = \"windows\")]\n-/* NOTE: Remove after snapshot */#[cfg(stage0, target_os = \"win32\")]\n mod m {\n     #[main]\n     #[cfg(target_arch = \"x86\")]"}, {"sha": "c647a8eb0397f7a45b44ec1a7316a8a524e8c48d", "filename": "src/test/run-pass/linkage-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:linkage-visibility.rs\n // ignore-android: FIXME(#10379)\n-// ignore-windows: std::dynamic_lib does not work on win32 well\n+// ignore-windows: std::dynamic_lib does not work on Windows well\n \n extern crate foo = \"linkage-visibility\";\n "}, {"sha": "8bd7a499de66288734fd4903019d2206a0b16b54", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6843d8ccd562c5c5d45c0bba570908d5aa765610/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=6843d8ccd562c5c5d45c0bba570908d5aa765610", "patch": "@@ -56,7 +56,6 @@ mod m {\n }\n \n #[cfg(target_os = \"windows\")]\n-/* NOTE: Remove after snapshot */#[cfg(stage0, target_os = \"win32\")]\n mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub mod m {"}]}