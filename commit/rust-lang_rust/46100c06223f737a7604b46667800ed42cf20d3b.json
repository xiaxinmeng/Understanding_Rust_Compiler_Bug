{"sha": "46100c06223f737a7604b46667800ed42cf20d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MTAwYzA2MjIzZjczN2E3NjA0YjQ2NjY3ODAwZWQ0MmNmMjBkM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-11T05:56:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-11T05:56:08Z"}, "message": "auto merge of #10408 : alexcrichton/rust/snapshots, r=huonw\n\nMostly just using the `system` abi where possible.", "tree": {"sha": "03a4791a263cabaa75471632553f1adc3aa9ab30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a4791a263cabaa75471632553f1adc3aa9ab30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46100c06223f737a7604b46667800ed42cf20d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46100c06223f737a7604b46667800ed42cf20d3b", "html_url": "https://github.com/rust-lang/rust/commit/46100c06223f737a7604b46667800ed42cf20d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46100c06223f737a7604b46667800ed42cf20d3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63cfc9989d62e0047c2f9597d2b2283717397dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cfc9989d62e0047c2f9597d2b2283717397dea", "html_url": "https://github.com/rust-lang/rust/commit/63cfc9989d62e0047c2f9597d2b2283717397dea"}, {"sha": "7407bcc1a2aa46949d3dadd1d9b79c76ad18d4cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7407bcc1a2aa46949d3dadd1d9b79c76ad18d4cf", "html_url": "https://github.com/rust-lang/rust/commit/7407bcc1a2aa46949d3dadd1d9b79c76ad18d4cf"}], "stats": {"total": 219, "additions": 24, "deletions": 195}, "files": [{"sha": "e68018e6b51b782da3bd5e4b1b7d0205e50600fa", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 1, "deletions": 110, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=46100c06223f737a7604b46667800ed42cf20d3b", "patch": "@@ -3387,8 +3387,7 @@ pub mod funcs {\n                                                LPSYSTEM_INFO};\n             use libc::types::os::arch::extra::{HANDLE, LPHANDLE};\n \n-            #[cfg(target_arch = \"x86\")]\n-            extern \"stdcall\" {\n+            extern \"system\" {\n                 pub fn GetEnvironmentVariableW(n: LPCWSTR,\n                                                v: LPWSTR,\n                                                nsize: DWORD)\n@@ -3494,114 +3493,6 @@ pub mod funcs {\n                                      -> LPVOID;\n                 pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n             }\n-\n-            #[cfg(target_arch = \"x86_64\")]\n-            extern {\n-                pub fn GetEnvironmentVariableW(n: LPCWSTR,\n-                                               v: LPWSTR,\n-                                               nsize: DWORD)\n-                                               -> DWORD;\n-                pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n-                                               -> BOOL;\n-                pub fn GetEnvironmentStringsA() -> LPTCH;\n-                pub fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n-                pub fn GetModuleFileNameW(hModule: HMODULE,\n-                                          lpFilename: LPWSTR,\n-                                          nSize: DWORD)\n-                                          -> DWORD;\n-                pub fn CreateDirectoryW(lpPathName: LPCWSTR,\n-                                        lpSecurityAttributes:\n-                                        LPSECURITY_ATTRIBUTES)\n-                                        -> BOOL;\n-                pub fn CopyFileW(lpExistingFileName: LPCWSTR,\n-                                        lpNewFileName: LPCWSTR,\n-                                        bFailIfExists: BOOL)\n-                                        -> BOOL;\n-                pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n-                pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-                pub fn GetCurrentDirectoryW(nBufferLength: DWORD,\n-                                            lpBuffer: LPWSTR)\n-                                            -> DWORD;\n-                pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-                pub fn GetLastError() -> DWORD;\n-                pub fn FindFirstFileW(fileName: *u16, findFileData: HANDLE)\n-                                      -> HANDLE;\n-                pub fn FindNextFileW(findFile: HANDLE, findFileData: HANDLE)\n-                                     -> BOOL;\n-                pub fn FindClose(findFile: HANDLE) -> BOOL;\n-                pub fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n-                                       hSourceHandle: HANDLE,\n-                                       hTargetProcessHandle: HANDLE,\n-                                       lpTargetHandle: LPHANDLE,\n-                                       dwDesiredAccess: DWORD,\n-                                       bInheritHandle: BOOL,\n-                                       dwOptions: DWORD)\n-                                       -> BOOL;\n-                pub fn CloseHandle(hObject: HANDLE) -> BOOL;\n-                pub fn OpenProcess(dwDesiredAccess: DWORD,\n-                                   bInheritHandle: BOOL,\n-                                   dwProcessId: DWORD)\n-                                   -> HANDLE;\n-                pub fn GetCurrentProcess() -> HANDLE;\n-                pub fn CreateProcessA(lpApplicationName: LPCTSTR,\n-                                      lpCommandLine: LPTSTR,\n-                                      lpProcessAttributes:\n-                                      LPSECURITY_ATTRIBUTES,\n-                                      lpThreadAttributes:\n-                                      LPSECURITY_ATTRIBUTES,\n-                                      bInheritHandles: BOOL,\n-                                      dwCreationFlags: DWORD,\n-                                      lpEnvironment: LPVOID,\n-                                      lpCurrentDirectory: LPCTSTR,\n-                                      lpStartupInfo: LPSTARTUPINFO,\n-                                      lpProcessInformation:\n-                                      LPPROCESS_INFORMATION)\n-                                      -> BOOL;\n-                pub fn WaitForSingleObject(hHandle: HANDLE,\n-                                           dwMilliseconds: DWORD)\n-                                           -> DWORD;\n-                pub fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint)\n-                                        -> BOOL;\n-                pub fn GetExitCodeProcess(hProcess: HANDLE,\n-                                          lpExitCode: LPDWORD)\n-                                          -> BOOL;\n-                pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n-                pub fn VirtualAlloc(lpAddress: LPVOID,\n-                                    dwSize: SIZE_T,\n-                                    flAllocationType: DWORD,\n-                                    flProtect: DWORD)\n-                                    -> LPVOID;\n-                pub fn VirtualFree(lpAddress: LPVOID,\n-                                   dwSize: SIZE_T,\n-                                   dwFreeType: DWORD)\n-                                   -> BOOL;\n-                pub fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n-                pub fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T)\n-                                     -> BOOL;\n-                pub fn VirtualProtect(lpAddress: LPVOID,\n-                                      dwSize: SIZE_T,\n-                                      flNewProtect: DWORD,\n-                                      lpflOldProtect: LPDWORD)\n-                                      -> BOOL;\n-                pub fn VirtualQuery(lpAddress: LPCVOID,\n-                                    lpBuffer: LPMEMORY_BASIC_INFORMATION,\n-                                    dwLength: SIZE_T)\n-                                    -> SIZE_T;\n-                pub fn CreateFileMappingW(hFile: HANDLE,\n-                                          lpAttributes: LPSECURITY_ATTRIBUTES,\n-                                          flProtect: DWORD,\n-                                          dwMaximumSizeHigh: DWORD,\n-                                          dwMaximumSizeLow: DWORD,\n-                                          lpName: LPCTSTR)\n-                                          -> HANDLE;\n-                pub fn MapViewOfFile(hFileMappingObject: HANDLE,\n-                                     dwDesiredAccess: DWORD,\n-                                     dwFileOffsetHigh: DWORD,\n-                                     dwFileOffsetLow: DWORD,\n-                                     dwNumberOfBytesToMap: SIZE_T)\n-                                     -> LPVOID;\n-                pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n-            }\n         }\n \n         pub mod msvcrt {"}, {"sha": "de4fb54be958b5caef799dca72add2209075303b", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=46100c06223f737a7604b46667800ed42cf20d3b", "patch": "@@ -615,15 +615,8 @@ pub fn errno() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];\n     use libc::types::os::arch::extra::DWORD;\n \n-    #[cfg(target_arch = \"x86\")]\n-    #[link_name = \"kernel32\"]\n-    extern \"stdcall\" {\n-        fn GetLastError() -> DWORD;\n-    }\n-\n-    #[cfg(target_arch = \"x86_64\")]\n     #[link_name = \"kernel32\"]\n-    extern {\n+    extern \"system\" {\n         fn GetLastError() -> DWORD;\n     }\n \n@@ -693,22 +686,8 @@ pub fn last_os_error() -> ~str {\n         use libc::types::os::arch::extra::LPVOID;\n         use libc::types::os::arch::extra::WCHAR;\n \n-        #[cfg(target_arch = \"x86\")]\n         #[link_name = \"kernel32\"]\n-        extern \"stdcall\" {\n-            fn FormatMessageW(flags: DWORD,\n-                              lpSrc: LPVOID,\n-                              msgId: DWORD,\n-                              langId: DWORD,\n-                              buf: LPWSTR,\n-                              nsize: DWORD,\n-                              args: *c_void)\n-                              -> DWORD;\n-        }\n-\n-        #[cfg(target_arch = \"x86_64\")]\n-        #[link_name = \"kernel32\"]\n-        extern {\n+        extern \"system\" {\n             fn FormatMessageW(flags: DWORD,\n                               lpSrc: LPVOID,\n                               msgId: DWORD,\n@@ -833,31 +812,16 @@ fn real_args() -> ~[~str] {\n \n type LPCWSTR = *u16;\n \n-#[cfg(windows, target_arch = \"x86\")]\n+#[cfg(windows)]\n #[link_name=\"kernel32\"]\n-#[abi=\"stdcall\"]\n-extern \"stdcall\" {\n+extern \"system\" {\n     fn GetCommandLineW() -> LPCWSTR;\n     fn LocalFree(ptr: *c_void);\n }\n \n-#[cfg(windows, target_arch = \"x86_64\")]\n-#[link_name=\"kernel32\"]\n-extern {\n-    fn GetCommandLineW() -> LPCWSTR;\n-    fn LocalFree(ptr: *c_void);\n-}\n-\n-#[cfg(windows, target_arch = \"x86\")]\n-#[link_name=\"shell32\"]\n-#[abi=\"stdcall\"]\n-extern \"stdcall\" {\n-    fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: *mut c_int) -> **u16;\n-}\n-\n-#[cfg(windows, target_arch = \"x86_64\")]\n+#[cfg(windows)]\n #[link_name=\"shell32\"]\n-extern {\n+extern \"system\" {\n     fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: *mut c_int) -> **u16;\n }\n "}, {"sha": "b21a8f5981db4546a6f3fae338edeaf6d54e9525", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=46100c06223f737a7604b46667800ed42cf20d3b", "patch": "@@ -118,16 +118,8 @@ impl Drop for Thread {\n     }\n }\n \n-#[cfg(windows, target_arch = \"x86\")]\n-extern \"stdcall\" {\n-    fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T,\n-                    lpStartAddress: extern \"C\" fn(*libc::c_void) -> rust_thread_return,\n-                    lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) -> HANDLE;\n-    fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;\n-}\n-\n-#[cfg(windows, target_arch = \"x86_64\")]\n-extern {\n+#[cfg(windows)]\n+extern \"system\" {\n     fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T,\n                     lpStartAddress: extern \"C\" fn(*libc::c_void) -> rust_thread_return,\n                     lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) -> HANDLE;"}, {"sha": "4ae1fe59a37d74e544dae5d0e69987c53edb7bdf", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=46100c06223f737a7604b46667800ed42cf20d3b", "patch": "@@ -88,8 +88,8 @@ pub unsafe fn get(key: Key) -> *mut c_void {\n     TlsGetValue(key)\n }\n \n-#[cfg(windows, target_arch = \"x86\")]\n-extern \"stdcall\" {\n+#[cfg(windows)]\n+extern \"system\" {\n     fn TlsAlloc() -> DWORD;\n \n     // See the reasoning in pthread_getspecific as to why this has the\n@@ -101,17 +101,6 @@ extern \"stdcall\" {\n     fn TlsSetValue(dwTlsIndex: DWORD, lpTlsvalue: LPVOID) -> BOOL;\n }\n \n-#[cfg(windows, target_arch = \"x86_64\")]\n-extern {\n-    fn TlsAlloc() -> DWORD;\n-\n-    // See above.\n-    #[rust_stack]\n-    fn TlsGetValue(dwTlsIndex: DWORD) -> LPVOID;\n-    #[rust_stack]\n-    fn TlsSetValue(dwTlsIndex: DWORD, lpTlsvalue: LPVOID) -> BOOL;\n-}\n-\n #[test]\n fn tls_smoke_test() {\n     use cast::transmute;"}, {"sha": "7db59f2103fcb5772f322b1ee8588d5ed3cf9b63", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46100c06223f737a7604b46667800ed42cf20d3b/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=46100c06223f737a7604b46667800ed42cf20d3b", "patch": "@@ -264,20 +264,8 @@ pub mod dl {\n         FreeLibrary(handle); ()\n     }\n \n-    #[cfg(target_arch = \"x86\")]\n     #[link_name = \"kernel32\"]\n-    extern \"stdcall\" {\n-        fn SetLastError(error: u32);\n-        fn LoadLibraryW(name: *u16) -> *libc::c_void;\n-        fn GetModuleHandleExW(dwFlags: libc::DWORD, name: *u16,\n-                              handle: **libc::c_void) -> *libc::c_void;\n-        fn GetProcAddress(handle: *libc::c_void, name: *libc::c_char) -> *libc::c_void;\n-        fn FreeLibrary(handle: *libc::c_void);\n-    }\n-\n-    #[cfg(target_arch = \"x86_64\")]\n-    #[link_name = \"kernel32\"]\n-    extern {\n+    extern \"system\" {\n         fn SetLastError(error: u32);\n         fn LoadLibraryW(name: *u16) -> *libc::c_void;\n         fn GetModuleHandleExW(dwFlags: libc::DWORD, name: *u16,"}, {"sha": "59e287daf381a9f462d06402e48a3842982c3d0a", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46100c06223f737a7604b46667800ed42cf20d3b/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/46100c06223f737a7604b46667800ed42cf20d3b/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=46100c06223f737a7604b46667800ed42cf20d3b", "patch": "@@ -1,3 +1,11 @@\n+S 2013-11-10 b5e602a\n+  freebsd-x86_64 bdcfcfa63216559765b83fe4056abb953da25da0\n+  linux-i386 0fb5cdff8a46e9a02bcdba100803bb5504b6f332\n+  linux-x86_64 fe861214208cacef085bfc13c22ce655c207facc\n+  macos-i386 83d7853554e5d5404227924cc3cbf86c673f4626\n+  macos-x86_64 27a71031d9030057746199a3c82efac8f8607093\n+  winnt-i386 d1a0e2a3cfbc09e360aa0ac4f47b3e8a638b39f7\n+\n S 2013-11-06 fdc830d\n   freebsd-x86_64 ef38f3acf8d05eda3c9f21e75c2bbd2f90a614a3\n   linux-i386 6ad20f6722c15a71fe7654d187dc431e26c1da6f"}, {"sha": "9eb6f14256e6392140cea49f6d65d4810f7ba7ca", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46100c06223f737a7604b46667800ed42cf20d3b/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46100c06223f737a7604b46667800ed42cf20d3b/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=46100c06223f737a7604b46667800ed42cf20d3b", "patch": "@@ -14,11 +14,11 @@ pub type SIZE_T = u32;\n pub type LPVOID = uint;\n pub type BOOL = u8;\n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n mod kernel32 {\n     use super::{HANDLE, DWORD, SIZE_T, LPVOID, BOOL};\n \n-    extern \"stdcall\" {\n+    extern \"system\" {\n         pub fn GetProcessHeap() -> HANDLE;\n         pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T)\n                       -> LPVOID;\n@@ -27,7 +27,7 @@ mod kernel32 {\n }\n \n \n-#[cfg(target_os = \"win32\")]\n+#[cfg(windows)]\n #[fixed_stack_segment]\n pub fn main() {\n     let heap = unsafe { kernel32::GetProcessHeap() };\n@@ -37,8 +37,5 @@ pub fn main() {\n     assert!(res != 0u8);\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(not(windows))]\n pub fn main() { }"}]}