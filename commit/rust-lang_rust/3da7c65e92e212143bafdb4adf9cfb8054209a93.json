{"sha": "3da7c65e92e212143bafdb4adf9cfb8054209a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYTdjNjVlOTJlMjEyMTQzYmFmZGI0YWRmOWNmYjgwNTQyMDlhOTM=", "commit": {"author": {"name": "Colin Pronovost", "email": "colin.pron@live.com", "date": "2018-05-30T20:46:56Z"}, "committer": {"name": "Colin Pronovost", "email": "colin.pron@live.com", "date": "2018-08-01T04:27:25Z"}, "message": "Make sure we prepare for thin LTO whenever we are emitting bitcode\n\nEmitting LLVM bitcode uses ThinLTOBuffers, so we need to prepare for\nthin LTO or we will likely cause errors in LLVM.", "tree": {"sha": "890f86cba2043b42fe79797a2721f7338fba509a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/890f86cba2043b42fe79797a2721f7338fba509a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3da7c65e92e212143bafdb4adf9cfb8054209a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3da7c65e92e212143bafdb4adf9cfb8054209a93", "html_url": "https://github.com/rust-lang/rust/commit/3da7c65e92e212143bafdb4adf9cfb8054209a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3da7c65e92e212143bafdb4adf9cfb8054209a93/comments", "author": {"login": "AstralSorcerer", "id": 8902883, "node_id": "MDQ6VXNlcjg5MDI4ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/8902883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AstralSorcerer", "html_url": "https://github.com/AstralSorcerer", "followers_url": "https://api.github.com/users/AstralSorcerer/followers", "following_url": "https://api.github.com/users/AstralSorcerer/following{/other_user}", "gists_url": "https://api.github.com/users/AstralSorcerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/AstralSorcerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AstralSorcerer/subscriptions", "organizations_url": "https://api.github.com/users/AstralSorcerer/orgs", "repos_url": "https://api.github.com/users/AstralSorcerer/repos", "events_url": "https://api.github.com/users/AstralSorcerer/events{/privacy}", "received_events_url": "https://api.github.com/users/AstralSorcerer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AstralSorcerer", "id": 8902883, "node_id": "MDQ6VXNlcjg5MDI4ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/8902883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AstralSorcerer", "html_url": "https://github.com/AstralSorcerer", "followers_url": "https://api.github.com/users/AstralSorcerer/followers", "following_url": "https://api.github.com/users/AstralSorcerer/following{/other_user}", "gists_url": "https://api.github.com/users/AstralSorcerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/AstralSorcerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AstralSorcerer/subscriptions", "organizations_url": "https://api.github.com/users/AstralSorcerer/orgs", "repos_url": "https://api.github.com/users/AstralSorcerer/repos", "events_url": "https://api.github.com/users/AstralSorcerer/events{/privacy}", "received_events_url": "https://api.github.com/users/AstralSorcerer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02190f397ecb32bca42e5b631dc235381d01b377", "url": "https://api.github.com/repos/rust-lang/rust/commits/02190f397ecb32bca42e5b631dc235381d01b377", "html_url": "https://github.com/rust-lang/rust/commit/02190f397ecb32bca42e5b631dc235381d01b377"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "5cb7215a1981d99d760fffc0206865fc4d1bd733", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=3da7c65e92e212143bafdb4adf9cfb8054209a93", "patch": "@@ -541,11 +541,23 @@ unsafe fn optimize(cgcx: &CodegenContext,\n             };\n \n             if config.verify_llvm_ir { assert!(addpass(\"verify\")); }\n+\n+            // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n+            // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n+            // we'll get errors in LLVM.\n+            let using_thin_buffers = llvm::LLVMRustThinLTOAvailable() && (config.emit_bc\n+                || config.obj_is_bitcode || config.emit_bc_compressed || config.embed_bitcode);\n+            let mut have_name_anon_globals_pass = false;\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n                 let opt_level = config.opt_level.unwrap_or(llvm::CodeGenOptLevel::None);\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal;\n+                have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n+                if using_thin_buffers && !prepare_for_thin_lto {\n+                    assert!(addpass(\"name-anon-globals\"));\n+                    have_name_anon_globals_pass = true;\n+                }\n                 with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {\n                     llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n                     llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n@@ -557,6 +569,9 @@ unsafe fn optimize(cgcx: &CodegenContext,\n                     diag_handler.warn(&format!(\"unknown pass `{}`, ignoring\",\n                                             pass));\n                 }\n+                if pass == \"name-anon-globals\" {\n+                    have_name_anon_globals_pass = true;\n+                }\n             }\n \n             for pass in &cgcx.plugin_passes {\n@@ -565,6 +580,22 @@ unsafe fn optimize(cgcx: &CodegenContext,\n                                             `{}` but LLVM does not \\\n                                             recognize it\", pass));\n                 }\n+                if pass == \"name-anon-globals\" {\n+                    have_name_anon_globals_pass = true;\n+                }\n+            }\n+\n+            if using_thin_buffers && !have_name_anon_globals_pass {\n+                // As described above, this will probably cause an error in LLVM\n+                if config.no_prepopulate_passes {\n+                    diag_handler.err(\"The current compilation is going to use thin LTO buffers \\\n+                                     without running LLVM's NameAnonGlobals pass. \\\n+                                     This will likely cause errors in LLVM. Consider adding \\\n+                                     -C passes=name-anon-globals to the compiler command line.\");\n+                } else {\n+                    bug!(\"We are using thin LTO buffers without running the NameAnonGlobals pass. \\\n+                         This will likely cause errors in LLVM and shoud never happen.\");\n+                }\n             }\n         }\n "}, {"sha": "baf27d6f57c3cda9c3c45953636b2e59eb9c1452", "filename": "src/test/run-pass-fulldeps/myriad-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmyriad-closures.rs?ref=3da7c65e92e212143bafdb4adf9cfb8054209a93", "patch": "@@ -14,7 +14,7 @@\n // See https://github.com/rust-lang/rust/issues/34793 for more information.\n \n // Make sure we don't optimize anything away:\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Cpasses=name-anon-globals\n \n // Expand something exponentially\n macro_rules! go_bacterial {"}, {"sha": "dd9f9be7da713de4bfa956db02e81f85c161a843", "filename": "src/test/run-pass/issue-38226.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38226.rs?ref=3da7c65e92e212143bafdb4adf9cfb8054209a93", "patch": "@@ -15,7 +15,7 @@\n \n // Need -Cno-prepopulate-passes to really disable inlining, otherwise the faulty\n // code gets optimized out:\n-// compile-flags: -Cno-prepopulate-passes\n+// compile-flags: -Cno-prepopulate-passes -Cpasses=name-anon-globals\n \n extern crate issue_38226_aux;\n "}, {"sha": "681842e30e006c8ea1415a112a59d7c2465c3e0f", "filename": "src/test/ui/feature-gate-unwind-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da7c65e92e212143bafdb4adf9cfb8054209a93/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.rs?ref=3da7c65e92e212143bafdb4adf9cfb8054209a93", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Cpasses=name-anon-globals\n \n #![crate_type = \"lib\"]\n "}]}