{"sha": "0ac4456351b3767c0bd46af312cf6635cc98f6ef", "node_id": "C_kwDOAAsO6NoAKDBhYzQ0NTYzNTFiMzc2N2MwYmQ0NmFmMzEyY2Y2NjM1Y2M5OGY2ZWY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T17:51:54Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T17:51:54Z"}, "message": "Move rtstartup build to build_clif_sysroot_for_triple\n\nAlso pass build/rtstartup as sysroot when building the standard library", "tree": {"sha": "a357418bdd12d6395444bc88cb92ef767182523a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a357418bdd12d6395444bc88cb92ef767182523a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac4456351b3767c0bd46af312cf6635cc98f6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac4456351b3767c0bd46af312cf6635cc98f6ef", "html_url": "https://github.com/rust-lang/rust/commit/0ac4456351b3767c0bd46af312cf6635cc98f6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac4456351b3767c0bd46af312cf6635cc98f6ef/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f1e1775d3586d0f82bd202de461e4de27a0fe1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e1775d3586d0f82bd202de461e4de27a0fe1c", "html_url": "https://github.com/rust-lang/rust/commit/6f1e1775d3586d0f82bd202de461e4de27a0fe1c"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "e8c45643765f4c7f7d3a5cf122ee92bfa0bb371f", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0ac4456351b3767c0bd46af312cf6635cc98f6ef/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac4456351b3767c0bd46af312cf6635cc98f6ef/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=0ac4456351b3767c0bd46af312cf6635cc98f6ef", "patch": "@@ -56,28 +56,6 @@ pub(crate) fn build_sysroot(\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n-    if target_triple.ends_with(\"windows-gnu\") {\n-        eprintln!(\"[BUILD] rtstartup for {target_triple}\");\n-\n-        let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n-        let mut target_libs = SysrootTarget { triple: target_triple.clone(), libs: vec![] };\n-\n-        for file in [\"rsbegin\", \"rsend\"] {\n-            let obj = RelPath::BUILD.to_path(dirs).join(format!(\"{file}.o\"));\n-            let mut build_rtstartup_cmd = Command::new(&bootstrap_host_compiler.rustc);\n-            build_rtstartup_cmd\n-                .arg(\"--target\")\n-                .arg(&target_triple)\n-                .arg(\"--emit=obj\")\n-                .arg(\"-o\")\n-                .arg(&obj)\n-                .arg(rtstartup_src.join(format!(\"{file}.rs\")));\n-            spawn_and_wait(build_rtstartup_cmd);\n-            target_libs.libs.push(obj);\n-        }\n-\n-        target_libs.install_into_sysroot(&DIST_DIR.to_path(dirs))\n-    }\n     match sysroot_kind {\n         SysrootKind::None => {} // Nothing to do\n         SysrootKind::Llvm => {\n@@ -190,6 +168,7 @@ pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_ver\n pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n pub(crate) static STANDARD_LIBRARY: CargoProject =\n     CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n+pub(crate) static RTSTARTUP_SYSROOT: RelPath = RelPath::BUILD.join(\"rtstartup\");\n \n #[must_use]\n fn build_clif_sysroot_for_triple(\n@@ -216,6 +195,35 @@ fn build_clif_sysroot_for_triple(\n         }\n     }\n \n+    let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n+\n+    if compiler.triple.ends_with(\"windows-gnu\") {\n+        eprintln!(\"[BUILD] rtstartup for {}\", compiler.triple);\n+\n+        RTSTARTUP_SYSROOT.ensure_fresh(dirs);\n+\n+        let rtstartup_src = SYSROOT_SRC.to_path(dirs).join(\"library\").join(\"rtstartup\");\n+        let mut rtstartup_target_libs =\n+            SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n+\n+        for file in [\"rsbegin\", \"rsend\"] {\n+            let obj = RTSTARTUP_SYSROOT.to_path(dirs).join(format!(\"{file}.o\"));\n+            let mut build_rtstartup_cmd = Command::new(&compiler.rustc);\n+            build_rtstartup_cmd\n+                .arg(\"--target\")\n+                .arg(&compiler.triple)\n+                .arg(\"--emit=obj\")\n+                .arg(\"-o\")\n+                .arg(&obj)\n+                .arg(rtstartup_src.join(format!(\"{file}.rs\")));\n+            spawn_and_wait(build_rtstartup_cmd);\n+            rtstartup_target_libs.libs.push(obj.clone());\n+            target_libs.libs.push(obj);\n+        }\n+\n+        rtstartup_target_libs.install_into_sysroot(&RTSTARTUP_SYSROOT.to_path(dirs));\n+    }\n+\n     let build_dir = STANDARD_LIBRARY.target_dir(dirs).join(&compiler.triple).join(channel);\n \n     if !super::config::get_bool(\"keep_sysroot\") {\n@@ -230,7 +238,8 @@ fn build_clif_sysroot_for_triple(\n     let mut rustflags = \" -Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     // Necessary for MinGW to find rsbegin.o and rsend.o\n-    rustflags.push_str(&format!(\" --sysroot={}\", DIST_DIR.to_path(dirs).to_str().unwrap()));\n+    rustflags\n+        .push_str(&format!(\" --sysroot={}\", RTSTARTUP_SYSROOT.to_path(dirs).to_str().unwrap()));\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n@@ -242,8 +251,6 @@ fn build_clif_sysroot_for_triple(\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n     spawn_and_wait(build_cmd);\n \n-    let mut target_libs = SysrootTarget { triple: compiler.triple, libs: vec![] };\n-\n     for entry in fs::read_dir(build_dir.join(\"deps\")).unwrap() {\n         let entry = entry.unwrap();\n         if let Some(ext) = entry.path().extension() {"}]}