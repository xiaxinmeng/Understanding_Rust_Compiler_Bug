{"sha": "abc0784e57610a0cceca63301489918015418df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYzA3ODRlNTc2MTBhMGNjZWNhNjMzMDE0ODk5MTgwMTU0MThkZjY=", "commit": {"author": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2019-06-27T11:30:23Z"}, "committer": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2019-06-29T07:39:36Z"}, "message": "Fix `cargo watch` code action filtering\n\nThere are two issues with the implementation of `provideCodeActions`\nintroduced in #1439:\n\n1. We're returning the code action based on the file its diagnostic is\n   in; not the file the suggested fix is in. I'm not sure how often\n   fixes are suggested cross-file but it's something we should handle.\n\n2. We're not filtering code actions based on the passed range. The means\n   if there is any suggestion in a file we'll show an action for every\n   line of the file. I naively thought that VS Code would filter for us\n   but that was wrong.\n\nUnfortunately the VS Code `CodeAction` object is very complex - it can\nhandle edits across multiple files, run commands, etc. This makes it\ncomplex to check them for equality or see if any of their edits\nintersects with a specified range.\n\nTo make it easier to work with suggestions this introduces a\n`SuggestedFix` model object and a `SuggestFixCollection` code action\nprovider. This is a layer between the raw Rust JSON and VS Code's\n`CodeAction`s. I was reluctant to introduce another layer of abstraction\nhere but my attempt to work directly with VS Code's model objects was\nworse.", "tree": {"sha": "05aec9fef88f31cee82e3507903a1dbcd6b4d30d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05aec9fef88f31cee82e3507903a1dbcd6b4d30d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc0784e57610a0cceca63301489918015418df6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc0784e57610a0cceca63301489918015418df6", "html_url": "https://github.com/rust-lang/rust/commit/abc0784e57610a0cceca63301489918015418df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc0784e57610a0cceca63301489918015418df6/comments", "author": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e1912de528b5092c10eedaf94c43c67d5f86f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1912de528b5092c10eedaf94c43c67d5f86f1a", "html_url": "https://github.com/rust-lang/rust/commit/0e1912de528b5092c10eedaf94c43c67d5f86f1a"}], "stats": {"total": 749, "additions": 495, "deletions": 254}, "files": [{"sha": "4c3c10c8b10836030fa0eab67100a133d77654ba", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 21, "deletions": 46, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -5,16 +5,15 @@ import * as vscode from 'vscode';\n \n import { Server } from '../server';\n import { terminate } from '../utils/processes';\n+import { LineBuffer } from './line_buffer';\n+import { StatusDisplay } from './watch_status';\n+\n import {\n     mapRustDiagnosticToVsCode,\n     RustDiagnostic\n-} from '../utils/rust_diagnostics';\n-import {\n-    areCodeActionsEqual,\n-    areDiagnosticsEqual\n-} from '../utils/vscode_diagnostics';\n-import { LineBuffer } from './line_buffer';\n-import { StatusDisplay } from './watch_status';\n+} from '../utils/diagnostics/rust';\n+import SuggestedFixCollection from '../utils/diagnostics/SuggestedFixCollection';\n+import { areDiagnosticsEqual } from '../utils/diagnostics/vscode';\n \n export function registerCargoWatchProvider(\n     subscriptions: vscode.Disposable[]\n@@ -42,16 +41,13 @@ export function registerCargoWatchProvider(\n     return provider;\n }\n \n-export class CargoWatchProvider\n-    implements vscode.Disposable, vscode.CodeActionProvider {\n+export class CargoWatchProvider implements vscode.Disposable {\n     private readonly diagnosticCollection: vscode.DiagnosticCollection;\n     private readonly statusDisplay: StatusDisplay;\n     private readonly outputChannel: vscode.OutputChannel;\n \n-    private codeActions: {\n-        [fileUri: string]: vscode.CodeAction[];\n-    };\n-    private readonly codeActionDispose: vscode.Disposable;\n+    private suggestedFixCollection: SuggestedFixCollection;\n+    private codeActionDispose: vscode.Disposable;\n \n     private cargoProcess?: child_process.ChildProcess;\n \n@@ -66,13 +62,14 @@ export class CargoWatchProvider\n             'Cargo Watch Trace'\n         );\n \n-        // Register code actions for rustc's suggested fixes\n-        this.codeActions = {};\n+        // Track `rustc`'s suggested fixes so we can convert them to code actions\n+        this.suggestedFixCollection = new SuggestedFixCollection();\n         this.codeActionDispose = vscode.languages.registerCodeActionsProvider(\n             [{ scheme: 'file', language: 'rust' }],\n-            this,\n+            this.suggestedFixCollection,\n             {\n-                providedCodeActionKinds: [vscode.CodeActionKind.QuickFix]\n+                providedCodeActionKinds:\n+                    SuggestedFixCollection.PROVIDED_CODE_ACTION_KINDS\n             }\n         );\n     }\n@@ -156,13 +153,6 @@ export class CargoWatchProvider\n         this.codeActionDispose.dispose();\n     }\n \n-    public provideCodeActions(\n-        document: vscode.TextDocument\n-    ): vscode.ProviderResult<Array<vscode.Command | vscode.CodeAction>> {\n-        const documentActions = this.codeActions[document.uri.toString()];\n-        return documentActions || [];\n-    }\n-\n     private logInfo(line: string) {\n         if (Server.config.cargoWatchOptions.trace === 'verbose') {\n             this.outputChannel.append(line);\n@@ -181,7 +171,7 @@ export class CargoWatchProvider\n     private parseLine(line: string) {\n         if (line.startsWith('[Running')) {\n             this.diagnosticCollection.clear();\n-            this.codeActions = {};\n+            this.suggestedFixCollection.clear();\n             this.statusDisplay.show();\n         }\n \n@@ -225,7 +215,7 @@ export class CargoWatchProvider\n                 return;\n             }\n \n-            const { location, diagnostic, codeActions } = mapResult;\n+            const { location, diagnostic, suggestedFixes } = mapResult;\n             const fileUri = location.uri;\n \n             const diagnostics: vscode.Diagnostic[] = [\n@@ -236,37 +226,22 @@ export class CargoWatchProvider\n             const isDuplicate = diagnostics.some(d =>\n                 areDiagnosticsEqual(d, diagnostic)\n             );\n-\n             if (isDuplicate) {\n                 return;\n             }\n \n             diagnostics.push(diagnostic);\n             this.diagnosticCollection!.set(fileUri, diagnostics);\n \n-            if (codeActions.length) {\n-                const fileUriString = fileUri.toString();\n-                const existingActions = this.codeActions[fileUriString] || [];\n-\n-                for (const newAction of codeActions) {\n-                    const existingAction = existingActions.find(existing =>\n-                        areCodeActionsEqual(existing, newAction)\n+            if (suggestedFixes.length) {\n+                for (const suggestedFix of suggestedFixes) {\n+                    this.suggestedFixCollection.addSuggestedFixForDiagnostic(\n+                        suggestedFix,\n+                        diagnostic\n                     );\n-\n-                    if (existingAction) {\n-                        if (!existingAction.diagnostics) {\n-                            existingAction.diagnostics = [];\n-                        }\n-                        // This action also applies to this diagnostic\n-                        existingAction.diagnostics.push(diagnostic);\n-                    } else {\n-                        newAction.diagnostics = [diagnostic];\n-                        existingActions.push(newAction);\n-                    }\n                 }\n \n                 // Have VsCode query us for the code actions\n-                this.codeActions[fileUriString] = existingActions;\n                 vscode.commands.executeCommand(\n                     'vscode.executeCodeActionProvider',\n                     fileUri,"}, {"sha": "6c7f436f35905defa25dec8c3c8b220ae994fedb", "filename": "editors/code/src/test/utils/diagnotics/SuggestedFix.test.ts", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -0,0 +1,133 @@\n+import * as assert from 'assert';\n+import * as vscode from 'vscode';\n+\n+import { SuggestionApplicability } from '../../../utils/diagnostics/rust';\n+import SuggestedFix from '../../../utils/diagnostics/SuggestedFix';\n+\n+const location1 = new vscode.Location(\n+    vscode.Uri.file('/file/1'),\n+    new vscode.Range(new vscode.Position(1, 2), new vscode.Position(3, 4))\n+);\n+\n+const location2 = new vscode.Location(\n+    vscode.Uri.file('/file/2'),\n+    new vscode.Range(new vscode.Position(5, 6), new vscode.Position(7, 8))\n+);\n+\n+describe('SuggestedFix', () => {\n+    describe('isEqual', () => {\n+        it('should treat identical instances as equal', () => {\n+            const suggestion1 = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With this!'\n+            );\n+\n+            const suggestion2 = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With this!'\n+            );\n+\n+            assert(suggestion1.isEqual(suggestion2));\n+        });\n+\n+        it('should treat instances with different titles as inequal', () => {\n+            const suggestion1 = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With this!'\n+            );\n+\n+            const suggestion2 = new SuggestedFix(\n+                'Not the same title!',\n+                location1,\n+                'With this!'\n+            );\n+\n+            assert(!suggestion1.isEqual(suggestion2));\n+        });\n+\n+        it('should treat instances with different replacements as inequal', () => {\n+            const suggestion1 = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With this!'\n+            );\n+\n+            const suggestion2 = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With something else!'\n+            );\n+\n+            assert(!suggestion1.isEqual(suggestion2));\n+        });\n+\n+        it('should treat instances with different locations as inequal', () => {\n+            const suggestion1 = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With this!'\n+            );\n+\n+            const suggestion2 = new SuggestedFix(\n+                'Replace me!',\n+                location2,\n+                'With this!'\n+            );\n+\n+            assert(!suggestion1.isEqual(suggestion2));\n+        });\n+\n+        it('should treat instances with different applicability as inequal', () => {\n+            const suggestion1 = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With this!',\n+                SuggestionApplicability.MachineApplicable\n+            );\n+\n+            const suggestion2 = new SuggestedFix(\n+                'Replace me!',\n+                location2,\n+                'With this!',\n+                SuggestionApplicability.HasPlaceholders\n+            );\n+\n+            assert(!suggestion1.isEqual(suggestion2));\n+        });\n+    });\n+\n+    describe('toCodeAction', () => {\n+        it('should map a simple suggestion', () => {\n+            const suggestion = new SuggestedFix(\n+                'Replace me!',\n+                location1,\n+                'With this!'\n+            );\n+\n+            const codeAction = suggestion.toCodeAction();\n+            assert.strictEqual(codeAction.kind, vscode.CodeActionKind.QuickFix);\n+            assert.strictEqual(codeAction.title, 'Replace me!');\n+            assert.strictEqual(codeAction.isPreferred, false);\n+\n+            const edit = codeAction.edit;\n+            if (!edit) {\n+                return assert.fail('Code Action edit unexpectedly missing');\n+            }\n+\n+            const editEntries = edit.entries();\n+            assert.strictEqual(editEntries.length, 1);\n+\n+            const [[editUri, textEdits]] = editEntries;\n+            assert.strictEqual(editUri.toString(), location1.uri.toString());\n+\n+            assert.strictEqual(textEdits.length, 1);\n+            const [textEdit] = textEdits;\n+\n+            assert(textEdit.range.isEqual(location1.range));\n+            assert.strictEqual(textEdit.newText, 'With this!');\n+        });\n+    });\n+});"}, {"sha": "f0328893e7369cfcbb9f6b8b4b7733af8f52d976", "filename": "editors/code/src/test/utils/diagnotics/SuggestedFixCollection.test.ts", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -0,0 +1,125 @@\n+import * as assert from 'assert';\n+import * as vscode from 'vscode';\n+\n+import SuggestedFix from '../../../utils/diagnostics/SuggestedFix';\n+import SuggestedFixCollection from '../../../utils/diagnostics/SuggestedFixCollection';\n+\n+const uri1 = vscode.Uri.file('/file/1');\n+const uri2 = vscode.Uri.file('/file/2');\n+\n+const mockDocument1 = ({\n+    uri: uri1\n+} as unknown) as vscode.TextDocument;\n+\n+const mockDocument2 = ({\n+    uri: uri2\n+} as unknown) as vscode.TextDocument;\n+\n+const range1 = new vscode.Range(\n+    new vscode.Position(1, 2),\n+    new vscode.Position(3, 4)\n+);\n+const range2 = new vscode.Range(\n+    new vscode.Position(5, 6),\n+    new vscode.Position(7, 8)\n+);\n+\n+const diagnostic1 = new vscode.Diagnostic(range1, 'First diagnostic');\n+const diagnostic2 = new vscode.Diagnostic(range2, 'Second diagnostic');\n+\n+// This is a mutable object so return a fresh instance every time\n+function suggestion1(): SuggestedFix {\n+    return new SuggestedFix(\n+        'Replace me!',\n+        new vscode.Location(uri1, range1),\n+        'With this!'\n+    );\n+}\n+\n+describe('SuggestedFixCollection', () => {\n+    it('should add a suggestion then return it as a code action', () => {\n+        const suggestedFixes = new SuggestedFixCollection();\n+        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n+\n+        // Specify the document and range that exactly matches\n+        const codeActions = suggestedFixes.provideCodeActions(\n+            mockDocument1,\n+            range1\n+        );\n+\n+        assert.strictEqual(codeActions.length, 1);\n+        const [codeAction] = codeActions;\n+        assert.strictEqual(codeAction.title, suggestion1().title);\n+\n+        const { diagnostics } = codeAction;\n+        if (!diagnostics) {\n+            return assert.fail('Diagnostics unexpectedly missing');\n+        }\n+\n+        assert.strictEqual(diagnostics.length, 1);\n+        assert.strictEqual(diagnostics[0], diagnostic1);\n+    });\n+\n+    it('should not return code actions for different ranges', () => {\n+        const suggestedFixes = new SuggestedFixCollection();\n+        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n+\n+        const codeActions = suggestedFixes.provideCodeActions(\n+            mockDocument1,\n+            range2\n+        );\n+\n+        assert(!codeActions || codeActions.length === 0);\n+    });\n+\n+    it('should not return code actions for different documents', () => {\n+        const suggestedFixes = new SuggestedFixCollection();\n+        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n+\n+        const codeActions = suggestedFixes.provideCodeActions(\n+            mockDocument2,\n+            range1\n+        );\n+\n+        assert(!codeActions || codeActions.length === 0);\n+    });\n+\n+    it('should not return code actions that have been cleared', () => {\n+        const suggestedFixes = new SuggestedFixCollection();\n+        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n+        suggestedFixes.clear();\n+\n+        const codeActions = suggestedFixes.provideCodeActions(\n+            mockDocument1,\n+            range1\n+        );\n+\n+        assert(!codeActions || codeActions.length === 0);\n+    });\n+\n+    it('should merge identical suggestions together', () => {\n+        const suggestedFixes = new SuggestedFixCollection();\n+\n+        // Add the same suggestion for two diagnostics\n+        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n+        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic2);\n+\n+        const codeActions = suggestedFixes.provideCodeActions(\n+            mockDocument1,\n+            range1\n+        );\n+\n+        assert.strictEqual(codeActions.length, 1);\n+        const [codeAction] = codeActions;\n+        const { diagnostics } = codeAction;\n+\n+        if (!diagnostics) {\n+            return assert.fail('Diagnostics unexpectedly missing');\n+        }\n+\n+        // We should be associated with both diagnostics\n+        assert.strictEqual(diagnostics.length, 2);\n+        assert.strictEqual(diagnostics[0], diagnostic1);\n+        assert.strictEqual(diagnostics[1], diagnostic2);\n+    });\n+});"}, {"sha": "b555a481986e09d6fce9164521d32333623c7c30", "filename": "editors/code/src/test/utils/diagnotics/rust.test.ts", "status": "renamed", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -5,14 +5,15 @@ import * as vscode from 'vscode';\n import {\n     MappedRustDiagnostic,\n     mapRustDiagnosticToVsCode,\n-    RustDiagnostic\n-} from '../utils/rust_diagnostics';\n+    RustDiagnostic,\n+    SuggestionApplicability\n+} from '../../../utils/diagnostics/rust';\n \n function loadDiagnosticFixture(name: string): RustDiagnostic {\n     const jsonText = fs\n         .readFileSync(\n             // We're actually in our JavaScript output directory, climb out\n-            `${__dirname}/../../src/test/fixtures/rust-diagnostics/${name}.json`\n+            `${__dirname}/../../../../src/test/fixtures/rust-diagnostics/${name}.json`\n         )\n         .toString();\n \n@@ -31,7 +32,9 @@ function mapFixtureToVsCode(name: string): MappedRustDiagnostic {\n \n describe('mapRustDiagnosticToVsCode', () => {\n     it('should map an incompatible type for trait error', () => {\n-        const { diagnostic, codeActions } = mapFixtureToVsCode('error/E0053');\n+        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n+            'error/E0053'\n+        );\n \n         assert.strictEqual(\n             diagnostic.severity,\n@@ -52,12 +55,12 @@ describe('mapRustDiagnosticToVsCode', () => {\n         // No related information\n         assert.deepStrictEqual(diagnostic.relatedInformation, []);\n \n-        // There are no code actions available\n-        assert.strictEqual(codeActions.length, 0);\n+        // There are no suggested fixes\n+        assert.strictEqual(suggestedFixes.length, 0);\n     });\n \n     it('should map an unused variable warning', () => {\n-        const { diagnostic, codeActions } = mapFixtureToVsCode(\n+        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n             'warning/unused_variables'\n         );\n \n@@ -81,18 +84,23 @@ describe('mapRustDiagnosticToVsCode', () => {\n         // No related information\n         assert.deepStrictEqual(diagnostic.relatedInformation, []);\n \n-        // One code action available to prefix the variable\n-        assert.strictEqual(codeActions.length, 1);\n-        const [codeAction] = codeActions;\n+        // One suggested fix available to prefix the variable\n+        assert.strictEqual(suggestedFixes.length, 1);\n+        const [suggestedFix] = suggestedFixes;\n         assert.strictEqual(\n-            codeAction.title,\n+            suggestedFix.title,\n             'consider prefixing with an underscore: `_foo`'\n         );\n-        assert(codeAction.isPreferred);\n+        assert.strictEqual(\n+            suggestedFix.applicability,\n+            SuggestionApplicability.MachineApplicable\n+        );\n     });\n \n     it('should map a wrong number of parameters error', () => {\n-        const { diagnostic, codeActions } = mapFixtureToVsCode('error/E0061');\n+        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n+            'error/E0061'\n+        );\n \n         assert.strictEqual(\n             diagnostic.severity,\n@@ -115,12 +123,12 @@ describe('mapRustDiagnosticToVsCode', () => {\n         const [related] = relatedInformation;\n         assert.strictEqual(related.message, 'defined here');\n \n-        // There are no actions available\n-        assert.strictEqual(codeActions.length, 0);\n+        // There are no suggested fixes\n+        assert.strictEqual(suggestedFixes.length, 0);\n     });\n \n     it('should map a Clippy copy pass by ref warning', () => {\n-        const { diagnostic, codeActions } = mapFixtureToVsCode(\n+        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n             'clippy/trivially_copy_pass_by_ref'\n         );\n \n@@ -149,14 +157,17 @@ describe('mapRustDiagnosticToVsCode', () => {\n         const [related] = relatedInformation;\n         assert.strictEqual(related.message, 'lint level defined here');\n \n-        // One code action available to pass by value\n-        assert.strictEqual(codeActions.length, 1);\n-        const [codeAction] = codeActions;\n+        // One suggested fix to pass by value\n+        assert.strictEqual(suggestedFixes.length, 1);\n+        const [suggestedFix] = suggestedFixes;\n         assert.strictEqual(\n-            codeAction.title,\n+            suggestedFix.title,\n             'consider passing by value instead: `self`'\n         );\n-        // Clippy does not mark this as machine applicable\n-        assert.strictEqual(codeAction.isPreferred, false);\n+        // Clippy does not mark this with any applicability\n+        assert.strictEqual(\n+            suggestedFix.applicability,\n+            SuggestionApplicability.Unspecified\n+        );\n     });\n });", "previous_filename": "editors/code/src/test/rust_diagnostics.test.ts"}, {"sha": "542dec1f54f833fce9ea36a861760dd81dbbb5e2", "filename": "editors/code/src/test/utils/diagnotics/vscode.test.ts", "status": "renamed", "additions": 1, "deletions": 85, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -1,12 +1,7 @@\n import * as assert from 'assert';\n import * as vscode from 'vscode';\n \n-import {\n-    areCodeActionsEqual,\n-    areDiagnosticsEqual\n-} from '../utils/vscode_diagnostics';\n-\n-const uri = vscode.Uri.file('/file/1');\n+import { areDiagnosticsEqual } from '../../../utils/diagnostics/vscode';\n \n const range1 = new vscode.Range(\n     new vscode.Position(1, 2),\n@@ -101,82 +96,3 @@ describe('areDiagnosticsEqual', () => {\n         assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n     });\n });\n-\n-describe('areCodeActionsEqual', () => {\n-    it('should treat identical actions as equal', () => {\n-        const codeAction1 = new vscode.CodeAction(\n-            'Fix me!',\n-            vscode.CodeActionKind.QuickFix\n-        );\n-\n-        const codeAction2 = new vscode.CodeAction(\n-            'Fix me!',\n-            vscode.CodeActionKind.QuickFix\n-        );\n-\n-        const edit = new vscode.WorkspaceEdit();\n-        edit.replace(uri, range1, 'Replace with this');\n-        codeAction1.edit = edit;\n-        codeAction2.edit = edit;\n-\n-        assert(areCodeActionsEqual(codeAction1, codeAction2));\n-    });\n-\n-    it('should treat actions with different types as inequal', () => {\n-        const codeAction1 = new vscode.CodeAction(\n-            'Fix me!',\n-            vscode.CodeActionKind.Refactor\n-        );\n-\n-        const codeAction2 = new vscode.CodeAction(\n-            'Fix me!',\n-            vscode.CodeActionKind.QuickFix\n-        );\n-\n-        const edit = new vscode.WorkspaceEdit();\n-        edit.replace(uri, range1, 'Replace with this');\n-        codeAction1.edit = edit;\n-        codeAction2.edit = edit;\n-\n-        assert(!areCodeActionsEqual(codeAction1, codeAction2));\n-    });\n-\n-    it('should treat actions with different titles as inequal', () => {\n-        const codeAction1 = new vscode.CodeAction(\n-            'Fix me!',\n-            vscode.CodeActionKind.Refactor\n-        );\n-\n-        const codeAction2 = new vscode.CodeAction(\n-            'Do something different!',\n-            vscode.CodeActionKind.Refactor\n-        );\n-\n-        const edit = new vscode.WorkspaceEdit();\n-        edit.replace(uri, range1, 'Replace with this');\n-        codeAction1.edit = edit;\n-        codeAction2.edit = edit;\n-\n-        assert(!areCodeActionsEqual(codeAction1, codeAction2));\n-    });\n-\n-    it('should treat actions with different edits as inequal', () => {\n-        const codeAction1 = new vscode.CodeAction(\n-            'Fix me!',\n-            vscode.CodeActionKind.Refactor\n-        );\n-        const edit1 = new vscode.WorkspaceEdit();\n-        edit1.replace(uri, range1, 'Replace with this');\n-        codeAction1.edit = edit1;\n-\n-        const codeAction2 = new vscode.CodeAction(\n-            'Fix me!',\n-            vscode.CodeActionKind.Refactor\n-        );\n-        const edit2 = new vscode.WorkspaceEdit();\n-        edit2.replace(uri, range1, 'Replace with this other thing');\n-        codeAction2.edit = edit2;\n-\n-        assert(!areCodeActionsEqual(codeAction1, codeAction2));\n-    });\n-});", "previous_filename": "editors/code/src/test/vscode_diagnostics.test.ts"}, {"sha": "b1be2a225b6ca4d09d5dd41209b2eafb10826a44", "filename": "editors/code/src/utils/diagnostics/SuggestedFix.ts", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -0,0 +1,67 @@\n+import * as vscode from 'vscode';\n+\n+import { SuggestionApplicability } from './rust';\n+\n+/**\n+ * Model object for text replacements suggested by the Rust compiler\n+ *\n+ * This is an intermediate form between the raw `rustc` JSON and a\n+ * `vscode.CodeAction`. It's optimised for the use-cases of\n+ * `SuggestedFixCollection`.\n+ */\n+export default class SuggestedFix {\n+    public readonly title: string;\n+    public readonly location: vscode.Location;\n+    public readonly replacement: string;\n+    public readonly applicability: SuggestionApplicability;\n+\n+    /**\n+     * Diagnostics this suggested fix could resolve\n+     */\n+    public diagnostics: vscode.Diagnostic[];\n+\n+    constructor(\n+        title: string,\n+        location: vscode.Location,\n+        replacement: string,\n+        applicability: SuggestionApplicability = SuggestionApplicability.Unspecified\n+    ) {\n+        this.title = title;\n+        this.location = location;\n+        this.replacement = replacement;\n+        this.applicability = applicability;\n+        this.diagnostics = [];\n+    }\n+\n+    /**\n+     * Determines if this suggested fix is equivalent to another instance\n+     */\n+    public isEqual(other: SuggestedFix): boolean {\n+        return (\n+            this.title === other.title &&\n+            this.location.range.isEqual(other.location.range) &&\n+            this.replacement === other.replacement &&\n+            this.applicability === other.applicability\n+        );\n+    }\n+\n+    /**\n+     * Converts this suggested fix to a VS Code Quick Fix code action\n+     */\n+    public toCodeAction(): vscode.CodeAction {\n+        const codeAction = new vscode.CodeAction(\n+            this.title,\n+            vscode.CodeActionKind.QuickFix\n+        );\n+\n+        const edit = new vscode.WorkspaceEdit();\n+        edit.replace(this.location.uri, this.location.range, this.replacement);\n+        codeAction.edit = edit;\n+\n+        codeAction.isPreferred =\n+            this.applicability === SuggestionApplicability.MachineApplicable;\n+\n+        codeAction.diagnostics = [...this.diagnostics];\n+        return codeAction;\n+    }\n+}"}, {"sha": "3b0bf7468b939071376415cfea026c775ef3354c", "filename": "editors/code/src/utils/diagnostics/SuggestedFixCollection.ts", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -0,0 +1,74 @@\n+import * as vscode from 'vscode';\n+import SuggestedFix from './SuggestedFix';\n+\n+/**\n+ * Collection of suggested fixes across multiple documents\n+ *\n+ * This stores `SuggestedFix` model objects and returns them via the\n+ * `vscode.CodeActionProvider` interface.\n+ */\n+export default class SuggestedFixCollection\n+    implements vscode.CodeActionProvider {\n+    public static PROVIDED_CODE_ACTION_KINDS = [vscode.CodeActionKind.QuickFix];\n+\n+    private suggestedFixes: Map<string, SuggestedFix[]>;\n+\n+    constructor() {\n+        this.suggestedFixes = new Map();\n+    }\n+\n+    /**\n+     * Clears all suggested fixes across all documents\n+     */\n+    public clear(): void {\n+        this.suggestedFixes = new Map();\n+    }\n+\n+    /**\n+     * Adds a suggested fix for the given diagnostic\n+     *\n+     * Some suggested fixes will appear in multiple diagnostics. For example,\n+     * forgetting a `mut` on a variable will suggest changing the delaration on\n+     * every mutable usage site. If the suggested fix has already been added\n+     * this method will instead associate the existing fix with the new\n+     * diagnostic.\n+     */\n+    public addSuggestedFixForDiagnostic(\n+        suggestedFix: SuggestedFix,\n+        diagnostic: vscode.Diagnostic\n+    ): void {\n+        const fileUriString = suggestedFix.location.uri.toString();\n+        const fileSuggestions = this.suggestedFixes.get(fileUriString) || [];\n+\n+        const existingSuggestion = fileSuggestions.find(s =>\n+            s.isEqual(suggestedFix)\n+        );\n+\n+        if (existingSuggestion) {\n+            // The existing suggestion also applies to this new diagnostic\n+            existingSuggestion.diagnostics.push(diagnostic);\n+        } else {\n+            // We haven't seen this suggestion before\n+            suggestedFix.diagnostics.push(diagnostic);\n+            fileSuggestions.push(suggestedFix);\n+        }\n+\n+        this.suggestedFixes.set(fileUriString, fileSuggestions);\n+    }\n+\n+    /**\n+     * Filters suggested fixes by their document and range and converts them to\n+     * code actions\n+     */\n+    public provideCodeActions(\n+        document: vscode.TextDocument,\n+        range: vscode.Range\n+    ): vscode.CodeAction[] {\n+        const documentUriString = document.uri.toString();\n+\n+        const suggestedFixes = this.suggestedFixes.get(documentUriString);\n+        return (suggestedFixes || [])\n+            .filter(({ location }) => location.range.intersection(range))\n+            .map(suggestedEdit => suggestedEdit.toCodeAction());\n+    }\n+}"}, {"sha": "d16576eb1e565ba21ef8c1bea702f73f98361998", "filename": "editors/code/src/utils/diagnostics/rust.ts", "status": "renamed", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -1,6 +1,15 @@\n import * as path from 'path';\n import * as vscode from 'vscode';\n \n+import SuggestedFix from './SuggestedFix';\n+\n+export enum SuggestionApplicability {\n+    MachineApplicable = 'MachineApplicable',\n+    HasPlaceholders = 'HasPlaceholders',\n+    MaybeIncorrect = 'MaybeIncorrect',\n+    Unspecified = 'Unspecified'\n+}\n+\n // Reference:\n // https://github.com/rust-lang/rust/blob/master/src/libsyntax/json.rs\n export interface RustDiagnosticSpan {\n@@ -12,11 +21,7 @@ export interface RustDiagnosticSpan {\n     file_name: string;\n     label?: string;\n     suggested_replacement?: string;\n-    suggestion_applicability?:\n-        | 'MachineApplicable'\n-        | 'HasPlaceholders'\n-        | 'MaybeIncorrect'\n-        | 'Unspecified';\n+    suggestion_applicability?: SuggestionApplicability;\n }\n \n export interface RustDiagnostic {\n@@ -33,12 +38,12 @@ export interface RustDiagnostic {\n export interface MappedRustDiagnostic {\n     location: vscode.Location;\n     diagnostic: vscode.Diagnostic;\n-    codeActions: vscode.CodeAction[];\n+    suggestedFixes: SuggestedFix[];\n }\n \n interface MappedRustChildDiagnostic {\n     related?: vscode.DiagnosticRelatedInformation;\n-    codeAction?: vscode.CodeAction;\n+    suggestedFix?: SuggestedFix;\n     messageLine?: string;\n }\n \n@@ -130,24 +135,19 @@ function mapRustChildDiagnostic(rd: RustDiagnostic): MappedRustChildDiagnostic {\n \n     // We need to distinguish `null` from an empty string\n     if (span && typeof span.suggested_replacement === 'string') {\n-        const edit = new vscode.WorkspaceEdit();\n-        edit.replace(location.uri, location.range, span.suggested_replacement);\n-\n-        // Include our replacement in the label unless it's empty\n+        // Include our replacement in the title unless it's empty\n         const title = span.suggested_replacement\n             ? `${rd.message}: \\`${span.suggested_replacement}\\``\n             : rd.message;\n \n-        const codeAction = new vscode.CodeAction(\n-            title,\n-            vscode.CodeActionKind.QuickFix\n-        );\n-\n-        codeAction.edit = edit;\n-        codeAction.isPreferred =\n-            span.suggestion_applicability === 'MachineApplicable';\n-\n-        return { codeAction };\n+        return {\n+            suggestedFix: new SuggestedFix(\n+                title,\n+                location,\n+                span.suggested_replacement,\n+                span.suggestion_applicability\n+            )\n+        };\n     } else {\n         const related = new vscode.DiagnosticRelatedInformation(\n             location,\n@@ -165,16 +165,14 @@ function mapRustChildDiagnostic(rd: RustDiagnostic): MappedRustChildDiagnostic {\n  *\n  * 1. Creating a `vscode.Diagnostic` with the root message and primary span.\n  * 2. Adding any labelled secondary spans to `relatedInformation`\n- * 3. Categorising child diagnostics as either Quick Fix actions,\n+ * 3. Categorising child diagnostics as either `SuggestedFix`es,\n  *    `relatedInformation` or additional message lines.\n  *\n  * If the diagnostic has no primary span this will return `undefined`\n  */\n export function mapRustDiagnosticToVsCode(\n     rd: RustDiagnostic\n ): MappedRustDiagnostic | undefined {\n-    const codeActions = [];\n-\n     const primarySpan = rd.spans.find(s => s.is_primary);\n     if (!primarySpan) {\n         return;\n@@ -208,16 +206,17 @@ export function mapRustDiagnosticToVsCode(\n         }\n     }\n \n+    const suggestedFixes = [];\n     for (const child of rd.children) {\n-        const { related, codeAction, messageLine } = mapRustChildDiagnostic(\n+        const { related, suggestedFix, messageLine } = mapRustChildDiagnostic(\n             child\n         );\n \n         if (related) {\n             vd.relatedInformation.push(related);\n         }\n-        if (codeAction) {\n-            codeActions.push(codeAction);\n+        if (suggestedFix) {\n+            suggestedFixes.push(suggestedFix);\n         }\n         if (messageLine) {\n             vd.message += `\\n${messageLine}`;\n@@ -231,6 +230,6 @@ export function mapRustDiagnosticToVsCode(\n     return {\n         location,\n         diagnostic: vd,\n-        codeActions\n+        suggestedFixes\n     };\n }", "previous_filename": "editors/code/src/utils/rust_diagnostics.ts"}, {"sha": "d8b85b7200b3ccb2f55ab87375c831c80fac2a70", "filename": "editors/code/src/utils/diagnostics/vscode.ts", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts", "raw_url": "https://github.com/rust-lang/rust/raw/abc0784e57610a0cceca63301489918015418df6/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts?ref=abc0784e57610a0cceca63301489918015418df6", "patch": "@@ -0,0 +1,14 @@\n+import * as vscode from 'vscode';\n+\n+/** Compares two `vscode.Diagnostic`s for equality */\n+export function areDiagnosticsEqual(\n+    left: vscode.Diagnostic,\n+    right: vscode.Diagnostic\n+): boolean {\n+    return (\n+        left.source === right.source &&\n+        left.severity === right.severity &&\n+        left.range.isEqual(right.range) &&\n+        left.message === right.message\n+    );\n+}"}, {"sha": "9d763c8d64a8bd7de699cf57ba1d31ae3d7fa9e9", "filename": "editors/code/src/utils/vscode_diagnostics.ts", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0e1912de528b5092c10eedaf94c43c67d5f86f1a/editors%2Fcode%2Fsrc%2Futils%2Fvscode_diagnostics.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0e1912de528b5092c10eedaf94c43c67d5f86f1a/editors%2Fcode%2Fsrc%2Futils%2Fvscode_diagnostics.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fvscode_diagnostics.ts?ref=0e1912de528b5092c10eedaf94c43c67d5f86f1a", "patch": "@@ -1,73 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-/** Compares two `vscode.Diagnostic`s for equality */\n-export function areDiagnosticsEqual(\n-    left: vscode.Diagnostic,\n-    right: vscode.Diagnostic\n-): boolean {\n-    return (\n-        left.source === right.source &&\n-        left.severity === right.severity &&\n-        left.range.isEqual(right.range) &&\n-        left.message === right.message\n-    );\n-}\n-\n-/** Compares two `vscode.TextEdit`s for equality */\n-function areTextEditsEqual(\n-    left: vscode.TextEdit,\n-    right: vscode.TextEdit\n-): boolean {\n-    if (!left.range.isEqual(right.range)) {\n-        return false;\n-    }\n-\n-    if (left.newText !== right.newText) {\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n-/** Compares two `vscode.CodeAction`s for equality */\n-export function areCodeActionsEqual(\n-    left: vscode.CodeAction,\n-    right: vscode.CodeAction\n-): boolean {\n-    if (\n-        left.kind !== right.kind ||\n-        left.title !== right.title ||\n-        !left.edit ||\n-        !right.edit\n-    ) {\n-        return false;\n-    }\n-\n-    const leftEditEntries = left.edit.entries();\n-    const rightEditEntries = right.edit.entries();\n-\n-    if (leftEditEntries.length !== rightEditEntries.length) {\n-        return false;\n-    }\n-\n-    for (let i = 0; i < leftEditEntries.length; i++) {\n-        const [leftUri, leftEdits] = leftEditEntries[i];\n-        const [rightUri, rightEdits] = rightEditEntries[i];\n-\n-        if (leftUri.toString() !== rightUri.toString()) {\n-            return false;\n-        }\n-\n-        if (leftEdits.length !== rightEdits.length) {\n-            return false;\n-        }\n-\n-        for (let j = 0; j < leftEdits.length; j++) {\n-            if (!areTextEditsEqual(leftEdits[j], rightEdits[j])) {\n-                return false;\n-            }\n-        }\n-    }\n-\n-    return true;\n-}"}]}