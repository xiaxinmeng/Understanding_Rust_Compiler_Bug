{"sha": "d8bf2223672973f9d86f6c173793bcfce7890cd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YmYyMjIzNjcyOTczZjlkODZmNmMxNzM3OTNiY2ZjZTc4OTBjZDg=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-06-30T19:16:44Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-07-02T11:59:40Z"}, "message": "Add lifetime to `FutureObj`", "tree": {"sha": "641557daeb359a6b32a1b2eca7af0bded0b80b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641557daeb359a6b32a1b2eca7af0bded0b80b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8bf2223672973f9d86f6c173793bcfce7890cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bf2223672973f9d86f6c173793bcfce7890cd8", "html_url": "https://github.com/rust-lang/rust/commit/d8bf2223672973f9d86f6c173793bcfce7890cd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8bf2223672973f9d86f6c173793bcfce7890cd8/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f70e7fe3c4126bf8390a78e4740ade3261ac4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f70e7fe3c4126bf8390a78e4740ade3261ac4df", "html_url": "https://github.com/rust-lang/rust/commit/9f70e7fe3c4126bf8390a78e4740ade3261ac4df"}], "stats": {"total": 99, "additions": 60, "deletions": 39}, "files": [{"sha": "5984a992afc6371a9850fd8e7059979d8ff14c22", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -66,7 +66,8 @@ use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::task::{Context, Poll, UnsafeFutureObj, FutureObj, LocalFutureObj};\n+use core::future::{FutureObj, LocalFutureObj, UnsafeFutureObj};\n+use core::task::{Context, Poll};\n use core::convert::From;\n \n use raw_vec::RawVec;\n@@ -915,7 +916,7 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}\n impl<T: ?Sized> Unpin for PinBox<T> {}\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: ?Sized + Future + Unpin> Future for Box<F> {\n+impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     type Output = F::Output;\n \n     fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n@@ -924,7 +925,7 @@ impl<'a, F: ?Sized + Future + Unpin> Future for Box<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n+impl<F: ?Sized + Future> Future for PinBox<F> {\n     type Output = F::Output;\n \n     fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n@@ -933,7 +934,7 @@ impl<'a, F: ?Sized + Future> Future for PinBox<F> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-unsafe impl<T, F: Future<Output = T> + 'static> UnsafeFutureObj<T> for PinBox<F> {\n+unsafe impl<'a, T, F: Future<Output = T> + 'a> UnsafeFutureObj<'a, T> for PinBox<F> {\n     fn into_raw(self) -> *mut () {\n         PinBox::into_raw(self) as *mut ()\n     }\n@@ -950,28 +951,28 @@ unsafe impl<T, F: Future<Output = T> + 'static> UnsafeFutureObj<T> for PinBox<F>\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + Send + 'static> From<PinBox<F>> for FutureObj<()> {\n+impl<'a, F: Future<Output = ()> + Send + 'a> From<PinBox<F>> for FutureObj<'a, ()> {\n     fn from(boxed: PinBox<F>) -> Self {\n         FutureObj::new(boxed)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + Send + 'static> From<Box<F>> for FutureObj<()> {\n+impl<'a, F: Future<Output = ()> + Send + 'a> From<Box<F>> for FutureObj<'a, ()> {\n     fn from(boxed: Box<F>) -> Self {\n         FutureObj::new(PinBox::from(boxed))\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + 'static> From<PinBox<F>> for LocalFutureObj<()> {\n+impl<'a, F: Future<Output = ()> + 'a> From<PinBox<F>> for LocalFutureObj<'a, ()> {\n     fn from(boxed: PinBox<F>) -> Self {\n         LocalFutureObj::new(boxed)\n     }\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: Future<Output = ()> + 'static> From<Box<F>> for LocalFutureObj<()> {\n+impl<'a, F: Future<Output = ()> + 'a> From<Box<F>> for LocalFutureObj<'a, ()> {\n     fn from(boxed: Box<F>) -> Self {\n         LocalFutureObj::new(PinBox::from(boxed))\n     }"}, {"sha": "10b4ca9b0b27a5e55f089501c1bf45f8ebaf633e", "filename": "src/libcore/future/future.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -12,8 +12,6 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-//! Asynchronous values.\n-\n use mem::PinMut;\n use marker::Unpin;\n use task::{self, Poll};", "previous_filename": "src/libcore/future.rs"}, {"sha": "c60b8b97d34ecd88e0ee29e1a52a1a4fb2099e0a", "filename": "src/libcore/future/future_obj.rs", "status": "renamed", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture_obj.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -21,22 +21,24 @@ use task::{Context, Poll};\n /// A custom trait object for polling futures, roughly akin to\n /// `Box<dyn Future<Output = T>>`.\n /// Contrary to `FutureObj`, `LocalFutureObj` does not have a `Send` bound.\n-pub struct LocalFutureObj<T> {\n+pub struct LocalFutureObj<'a, T> {\n     ptr: *mut (),\n     poll_fn: unsafe fn(*mut (), &mut Context) -> Poll<T>,\n     drop_fn: unsafe fn(*mut ()),\n-    _marker: PhantomData<T>,\n+    _marker1: PhantomData<T>,\n+    _marker2: PhantomData<&'a ()>,\n }\n \n-impl<T> LocalFutureObj<T> {\n+impl<'a, T> LocalFutureObj<'a, T> {\n     /// Create a `LocalFutureObj` from a custom trait object representation.\n     #[inline]\n-    pub fn new<F: UnsafeFutureObj<T>>(f: F) -> LocalFutureObj<T> {\n+    pub fn new<F: UnsafeFutureObj<'a, T> + 'a>(f: F) -> LocalFutureObj<'a, T> {\n         LocalFutureObj {\n             ptr: f.into_raw(),\n             poll_fn: F::poll,\n             drop_fn: F::drop,\n-            _marker: PhantomData,\n+            _marker1: PhantomData,\n+            _marker2: PhantomData,\n         }\n     }\n \n@@ -45,26 +47,26 @@ impl<T> LocalFutureObj<T> {\n     /// instance from which this `LocalFutureObj` was created actually\n     /// implements `Send`.\n     #[inline]\n-    pub unsafe fn as_future_obj(self) -> FutureObj<T> {\n+    pub unsafe fn as_future_obj(self) -> FutureObj<'a, T> {\n         FutureObj(self)\n     }\n }\n \n-impl<T> fmt::Debug for LocalFutureObj<T> {\n+impl<'a, T> fmt::Debug for LocalFutureObj<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"LocalFutureObj\")\n             .finish()\n     }\n }\n \n-impl<T> From<FutureObj<T>> for LocalFutureObj<T> {\n+impl<'a, T> From<FutureObj<'a, T>> for LocalFutureObj<'a, T> {\n     #[inline]\n-    fn from(f: FutureObj<T>) -> LocalFutureObj<T> {\n+    fn from(f: FutureObj<'a, T>) -> LocalFutureObj<'a, T> {\n         f.0\n     }\n }\n \n-impl<T> Future for LocalFutureObj<T> {\n+impl<'a, T> Future for LocalFutureObj<'a, T> {\n     type Output = T;\n \n     #[inline]\n@@ -75,7 +77,7 @@ impl<T> Future for LocalFutureObj<T> {\n     }\n }\n \n-impl<T> Drop for LocalFutureObj<T> {\n+impl<'a, T> Drop for LocalFutureObj<'a, T> {\n     fn drop(&mut self) {\n         unsafe {\n             (self.drop_fn)(self.ptr)\n@@ -85,26 +87,26 @@ impl<T> Drop for LocalFutureObj<T> {\n \n /// A custom trait object for polling futures, roughly akin to\n /// `Box<dyn Future<Output = T>> + Send`.\n-pub struct FutureObj<T>(LocalFutureObj<T>);\n+pub struct FutureObj<'a, T>(LocalFutureObj<'a, T>);\n \n-unsafe impl<T> Send for FutureObj<T> {}\n+unsafe impl<'a, T> Send for FutureObj<'a, T> {}\n \n-impl<T> FutureObj<T> {\n+impl<'a, T> FutureObj<'a, T> {\n     /// Create a `FutureObj` from a custom trait object representation.\n     #[inline]\n-    pub fn new<F: UnsafeFutureObj<T> + Send>(f: F) -> FutureObj<T> {\n+    pub fn new<F: UnsafeFutureObj<'a, T> + Send>(f: F) -> FutureObj<'a, T> {\n         FutureObj(LocalFutureObj::new(f))\n     }\n }\n \n-impl<T> fmt::Debug for FutureObj<T> {\n+impl<'a, T> fmt::Debug for FutureObj<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"FutureObj\")\n             .finish()\n     }\n }\n \n-impl<T> Future for FutureObj<T> {\n+impl<'a, T> Future for FutureObj<'a, T> {\n     type Output = T;\n \n     #[inline]\n@@ -123,7 +125,7 @@ impl<T> Future for FutureObj<T> {\n /// The implementor must guarantee that it is safe to call `poll` repeatedly (in\n /// a non-concurrent fashion) with the result of `into_raw` until `drop` is\n /// called.\n-pub unsafe trait UnsafeFutureObj<T>: 'static {\n+pub unsafe trait UnsafeFutureObj<'a, T>: 'a {\n     /// Convert a owned instance into a (conceptually owned) void pointer.\n     fn into_raw(self) -> *mut ();\n ", "previous_filename": "src/libcore/task/future_obj.rs"}, {"sha": "f9361a0f4e7a3ecc9e5175c4959c3874242c72fd", "filename": "src/libcore/future/mod.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![unstable(feature = \"futures_api\",\n+            reason = \"futures in libcore are unstable\",\n+            issue = \"50547\")]\n+\n+//! Asynchronous values.\n+\n+mod future;\n+pub use self::future::Future;\n+\n+mod future_obj;\n+pub use self::future_obj::{FutureObj, LocalFutureObj, UnsafeFutureObj};"}, {"sha": "f1db5093e9880ab84fe4940c455bbd893700d073", "filename": "src/libcore/task/executor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ftask%2Fexecutor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ftask%2Fexecutor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fexecutor.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -13,7 +13,7 @@\n             issue = \"50547\")]\n \n use fmt;\n-use super::{FutureObj, LocalFutureObj};\n+use future::{FutureObj, LocalFutureObj};\n \n /// A task executor.\n ///\n@@ -29,7 +29,7 @@ pub trait Executor {\n     ///\n     /// The executor may be unable to spawn tasks, either because it has\n     /// been shut down or is resource-constrained.\n-    fn spawn_obj(&mut self, task: FutureObj<()>) -> Result<(), SpawnObjError>;\n+    fn spawn_obj(&mut self, task: FutureObj<'static, ()>) -> Result<(), SpawnObjError>;\n \n     /// Determine whether the executor is able to spawn new tasks.\n     ///\n@@ -76,7 +76,7 @@ pub struct SpawnObjError {\n     pub kind: SpawnErrorKind,\n \n     /// The task for which spawning was attempted\n-    pub task: FutureObj<()>,\n+    pub task: FutureObj<'static, ()>,\n }\n \n /// The result of a failed spawn\n@@ -86,5 +86,5 @@ pub struct SpawnLocalObjError {\n     pub kind: SpawnErrorKind,\n \n     /// The task for which spawning was attempted\n-    pub task: LocalFutureObj<()>,\n+    pub task: LocalFutureObj<'static, ()>,\n }"}, {"sha": "c4f075361640f1b887e099b8c797b0ded7082265", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -25,8 +25,5 @@ pub use self::executor::{\n mod poll;\n pub use self::poll::Poll;\n \n-mod future_obj;\n-pub use self::future_obj::{FutureObj, LocalFutureObj, UnsafeFutureObj};\n-\n mod wake;\n pub use self::wake::{Waker, LocalWaker, UnsafeWake};"}, {"sha": "0ac37485d3dc81df976de0d747b979be4c3e0592", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -19,9 +19,10 @@ use std::sync::{\n     Arc,\n     atomic::{self, AtomicUsize},\n };\n+use std::future::FutureObj;\n use std::task::{\n     Context, Poll, Wake,\n-    Executor, FutureObj, SpawnObjError,\n+    Executor, SpawnObjError,\n     local_waker_from_nonlocal,\n };\n \n@@ -37,7 +38,7 @@ impl Wake for Counter {\n \n struct NoopExecutor;\n impl Executor for NoopExecutor {\n-    fn spawn_obj(&mut self, _: FutureObj<T>) -> Result<(), SpawnObjError> {\n+    fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n }"}, {"sha": "6cb975a9560b9403cb726ea043dee7744eaf7bb9", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8bf2223672973f9d86f6c173793bcfce7890cd8/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=d8bf2223672973f9d86f6c173793bcfce7890cd8", "patch": "@@ -19,10 +19,11 @@ use std::sync::{\n     Arc,\n     atomic::{self, AtomicUsize},\n };\n+use std::future::FutureObj;\n use std::task::{\n     Context, Poll,\n     Wake, Waker, LocalWaker,\n-    Executor, FutureObj, SpawnObjError,\n+    Executor, SpawnObjError,\n     local_waker, local_waker_from_nonlocal,\n };\n \n@@ -44,7 +45,7 @@ impl Wake for Counter {\n struct NoopExecutor;\n \n impl Executor for NoopExecutor {\n-    fn spawn_obj(&mut self, _: FutureObj<()>) -> Result<(), SpawnObjError> {\n+    fn spawn_obj(&mut self, _: FutureObj<'static, ()>) -> Result<(), SpawnObjError> {\n         Ok(())\n     }\n }"}]}