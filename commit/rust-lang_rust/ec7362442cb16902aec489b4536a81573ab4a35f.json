{"sha": "ec7362442cb16902aec489b4536a81573ab4a35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNzM2MjQ0MmNiMTY5MDJhZWM0ODliNDUzNmE4MTU3M2FiNGEzNWY=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-23T20:03:27Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:15Z"}, "message": "Return an instantiated environment instead of a generic one", "tree": {"sha": "f1eb2b526b494fbdce3324604eca5e8ef4b85fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1eb2b526b494fbdce3324604eca5e8ef4b85fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7362442cb16902aec489b4536a81573ab4a35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7362442cb16902aec489b4536a81573ab4a35f", "html_url": "https://github.com/rust-lang/rust/commit/ec7362442cb16902aec489b4536a81573ab4a35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7362442cb16902aec489b4536a81573ab4a35f/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cadd59674be7211edf32485f562b6d75c578155", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cadd59674be7211edf32485f562b6d75c578155", "html_url": "https://github.com/rust-lang/rust/commit/8cadd59674be7211edf32485f562b6d75c578155"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "1c92f6bc0916fa4e15f7e77392b04f449507ea53", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=ec7362442cb16902aec489b4536a81573ab4a35f", "patch": "@@ -684,7 +684,7 @@ define_queries! { <'tcx>\n         ) -> Clauses<'tcx>,\n \n         // Get the chalk-style environment of the given item.\n-        [] fn environment: Environment(DefId) -> ty::Binder<traits::Environment<'tcx>>,\n+        [] fn environment: Environment(DefId) -> traits::Environment<'tcx>,\n     },\n \n     Linking {"}, {"sha": "2b4970124e3d66fbcb4c093022387cd15ddac087", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=ec7362442cb16902aec489b4536a81573ab4a35f", "patch": "@@ -256,6 +256,8 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n     ) -> Vec<Clause<'tcx>> {\n         use rustc::traits::WhereClause::*;\n \n+        debug!(\"program_clauses(goal = {:?})\", goal);\n+\n         let mut clauses = match goal {\n             DomainGoal::Holds(Implemented(trait_predicate)) => {\n                 // These come from:\n@@ -345,20 +347,21 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                         self.infcx.tcx.program_clauses_for(data.item_def_id)\n                     }\n \n-                    // These types are always WF and non-parametric.\n+                    // These types are always WF.\n                     ty::Bool |\n                     ty::Char |\n                     ty::Int(..) |\n                     ty::Uint(..) |\n                     ty::Float(..) |\n                     ty::Str |\n+                    ty::Param(..) |\n                     ty::Never => {\n                         let wf_clause = ProgramClause {\n                             goal: DomainGoal::WellFormed(WellFormed::Ty(ty)),\n                             hypotheses: ty::List::empty(),\n                             category: ProgramClauseCategory::WellFormed,\n                         };\n-                        let wf_clause = Clause::ForAll(ty::Binder::dummy(wf_clause));\n+                        let wf_clause = Clause::Implies(wf_clause);\n \n                         self.infcx.tcx.mk_clauses(iter::once(wf_clause))\n                     }\n@@ -415,7 +418,6 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     ty::UnnormalizedProjection(..) |\n                     ty::Infer(..) |\n                     ty::Bound(..) |\n-                    ty::Param(..) |\n                     ty::Error => {\n                         bug!(\"unexpected type {:?}\", ty)\n                     }\n@@ -458,13 +460,18 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n             }\n         };\n \n+        debug!(\"program_clauses: clauses = {:?}\", clauses);\n+        debug!(\"program_clauses: adding clauses from environment = {:?}\", environment);\n+\n         let environment = self.infcx.tcx.lift_to_global(environment)\n             .expect(\"environment is not global\");\n-        clauses.extend(\n-            self.infcx.tcx.program_clauses_for_env(environment)\n-                .into_iter()\n-                .cloned()\n-        );\n+\n+        let env_clauses = self.infcx.tcx.program_clauses_for_env(environment);\n+\n+        debug!(\"program_clauses: env_clauses = {:?}\", env_clauses);\n+\n+        clauses.extend(env_clauses.into_iter().cloned());\n+        clauses.extend(environment.clauses.iter().cloned());\n         clauses\n     }\n }"}, {"sha": "e21428acf63cdda2520afbc603f1485c0d90e5d3", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=ec7362442cb16902aec489b4536a81573ab4a35f", "patch": "@@ -105,11 +105,11 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n             ty::Never |\n             ty::Infer(..) |\n             ty::Placeholder(..) |\n+            ty::Param(..) |\n             ty::Bound(..) => (),\n \n             ty::GeneratorWitness(..) |\n             ty::UnnormalizedProjection(..) |\n-            ty::Param(..) |\n             ty::Error => {\n                 bug!(\"unexpected type {:?}\", ty);\n             }\n@@ -192,25 +192,23 @@ crate fn program_clauses_for_env<'a, 'tcx>(\n crate fn environment<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId\n-) -> ty::Binder<Environment<'tcx>> {\n+) -> Environment<'tcx> {\n     use super::{Lower, IntoFromEnvGoal};\n     use rustc::hir::{Node, TraitItemKind, ImplItemKind, ItemKind, ForeignItemKind};\n-    use rustc::ty::subst::{Subst, Substs};\n+\n+    debug!(\"environment(def_id = {:?})\", def_id);\n \n     // The environment of an impl Trait type is its defining function's environment.\n     if let Some(parent) = ty::is_impl_trait_defn(tcx, def_id) {\n         return environment(tcx, parent);\n     }\n \n-    let bound_vars = Substs::bound_vars_for_item(tcx, def_id);\n-\n     // Compute the bounds on `Self` and the type parameters.\n     let ty::InstantiatedPredicates { predicates } = tcx.predicates_of(def_id)\n         .instantiate_identity(tcx);\n \n     let clauses = predicates.into_iter()\n         .map(|predicate| predicate.lower())\n-        .map(|predicate| predicate.subst(tcx, bound_vars))\n         .map(|domain_goal| domain_goal.map_bound(|bound| bound.into_from_env_goal()))\n         .map(|domain_goal| domain_goal.map_bound(|bound| bound.into_program_clause()))\n \n@@ -255,20 +253,18 @@ crate fn environment<'a, 'tcx>(\n     // are well-formed.\n     if is_impl {\n         let trait_ref = tcx.impl_trait_ref(def_id)\n-            .expect(\"not an impl\")\n-            .subst(tcx, bound_vars);\n+            .expect(\"not an impl\");\n \n         input_tys.extend(\n-            trait_ref.substs.types().flat_map(|ty| ty.walk())\n+            trait_ref.input_types().flat_map(|ty| ty.walk())\n         );\n     }\n \n     // In an fn, we assume that the arguments and all their constituents are\n     // well-formed.\n     if is_fn {\n-        // `skip_binder` because we move region parameters to the root binder,\n-        // restored in the return type of this query\n-        let fn_sig = tcx.fn_sig(def_id).skip_binder().subst(tcx, bound_vars);\n+        let fn_sig = tcx.fn_sig(def_id);\n+        let fn_sig = tcx.liberate_late_bound_regions(def_id, &fn_sig);\n \n         input_tys.extend(\n             fn_sig.inputs().iter().flat_map(|ty| ty.walk())\n@@ -277,17 +273,14 @@ crate fn environment<'a, 'tcx>(\n \n     let clauses = clauses.chain(\n         input_tys.into_iter()\n-            // Filter out type parameters\n-            .filter(|ty| match ty.sty {\n-                ty::Bound(..) => false,\n-                _ => true,\n-            })\n             .map(|ty| DomainGoal::FromEnv(FromEnv::Ty(ty)))\n             .map(|domain_goal| domain_goal.into_program_clause())\n             .map(Clause::Implies)\n     );\n \n-    ty::Binder::bind(Environment {\n+    debug!(\"environment: clauses = {:?}\", clauses);\n+\n+    Environment {\n         clauses: tcx.mk_clauses(clauses),\n-    })\n+    }\n }"}, {"sha": "51d2894cbf45a814ba5ebc23e492750d4582e41f", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7362442cb16902aec489b4536a81573ab4a35f/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=ec7362442cb16902aec489b4536a81573ab4a35f", "patch": "@@ -626,7 +626,7 @@ impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n \n             if attr.check_name(\"rustc_dump_env_program_clauses\") {\n                 let environment = self.tcx.environment(def_id);\n-                clauses = Some(self.tcx.program_clauses_for_env(*environment.skip_binder()));\n+                clauses = Some(self.tcx.program_clauses_for_env(environment));\n             }\n \n             if let Some(clauses) = clauses {"}]}