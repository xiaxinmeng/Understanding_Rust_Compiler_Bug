{"sha": "5b2314b3cacf10e79082180c24c79599e63dbaa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjMxNGIzY2FjZjEwZTc5MDgyMTgwYzI0Yzc5NTk5ZTYzZGJhYTk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-01T08:13:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-08T08:10:53Z"}, "message": "Use `SmallVec` outparams in several functions.\n\nThis avoids some allocations, reducing instruction counts by 1% on a\ncouple of benchmarks.", "tree": {"sha": "bc4fd1dae3b181fbd09fc61beb54e7ee9de3b71f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4fd1dae3b181fbd09fc61beb54e7ee9de3b71f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2314b3cacf10e79082180c24c79599e63dbaa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2314b3cacf10e79082180c24c79599e63dbaa9", "html_url": "https://github.com/rust-lang/rust/commit/5b2314b3cacf10e79082180c24c79599e63dbaa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2314b3cacf10e79082180c24c79599e63dbaa9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0117b42f66632f1f0fc08f1cdd8ca264c10bba94", "url": "https://api.github.com/repos/rust-lang/rust/commits/0117b42f66632f1f0fc08f1cdd8ca264c10bba94", "html_url": "https://github.com/rust-lang/rust/commit/0117b42f66632f1f0fc08f1cdd8ca264c10bba94"}], "stats": {"total": 98, "additions": 56, "deletions": 42}, "files": [{"sha": "cc73dd63816aa466b4b75c1eaab89f59e65c120f", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -366,7 +366,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let mut types = vec![concrete_ty];\n         let bound_region = |r| self.sub_regions(infer::CallReturn(span), least_region, r);\n         while let Some(ty) = types.pop() {\n-            let mut components = self.tcx.outlives_components(ty);\n+            let mut components = smallvec![];\n+            self.tcx.push_outlives_components(ty, &mut components);\n             while let Some(component) = components.pop() {\n                 match component {\n                     Component::Region(r) => {"}, {"sha": "f2825887f36e2d28dae70de54776647af151f6ee", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! Code that handles \"type-outlives\" constraints like `T: 'a`. This\n-//! is based on the `outlives_components` function defined on the tcx,\n+//! is based on the `push_outlives_components` function defined on the tcx,\n //! but it adds a bit of heuristics on top, in particular to deal with\n //! associated types and projections.\n //!\n@@ -307,31 +307,32 @@ where\n \n         assert!(!ty.has_escaping_bound_vars());\n \n-        let components = self.tcx.outlives_components(ty);\n-        self.components_must_outlive(origin, components, region);\n+        let mut components = smallvec![];\n+        self.tcx.push_outlives_components(ty, &mut components);\n+        self.components_must_outlive(origin, &components, region);\n     }\n \n     fn components_must_outlive(\n         &mut self,\n         origin: infer::SubregionOrigin<'tcx>,\n-        components: Vec<Component<'tcx>>,\n+        components: &[Component<'tcx>],\n         region: ty::Region<'tcx>,\n     ) {\n-        for component in components {\n+        for component in components.iter() {\n             let origin = origin.clone();\n             match component {\n                 Component::Region(region1) => {\n                     self.delegate\n                         .push_sub_region_constraint(origin, region, region1);\n                 }\n                 Component::Param(param_ty) => {\n-                    self.param_ty_must_outlive(origin, region, param_ty);\n+                    self.param_ty_must_outlive(origin, region, *param_ty);\n                 }\n                 Component::Projection(projection_ty) => {\n-                    self.projection_must_outlive(origin, region, projection_ty);\n+                    self.projection_must_outlive(origin, region, *projection_ty);\n                 }\n                 Component::EscapingProjection(subcomponents) => {\n-                    self.components_must_outlive(origin, subcomponents, region);\n+                    self.components_must_outlive(origin, &subcomponents, region);\n                 }\n                 Component::UnresolvedInferenceVariable(v) => {\n                     // ignore this, we presume it will yield an error"}, {"sha": "a7a79dd2e6560e6113407cfdb3c1fef2dc9f5971", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -155,7 +155,8 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n             .map(|subty| self.type_bound(subty))\n             .collect::<Vec<_>>();\n \n-        let mut regions = ty.regions();\n+        let mut regions = smallvec![];\n+        ty.push_regions(&mut regions);\n         regions.retain(|r| !r.is_late_bound()); // ignore late-bound regions\n         bounds.push(VerifyBound::AllBounds(\n             regions"}, {"sha": "9a2f484125de716455168a9409ed31799d109e6e", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -200,8 +200,10 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                 }\n \n                 let visited = &mut self.visited;\n+                let mut components = smallvec![];\n+                tcx.push_outlives_components(ty_max, &mut components);\n                 self.stack.extend(\n-                    tcx.outlives_components(ty_max)\n+                    components\n                        .into_iter()\n                        .filter_map(|component| match component {\n                            Component::Region(r) => if r.is_late_bound() {"}, {"sha": "7fac88a3d78f1855b97371e8dd793adf88572625", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -12,6 +12,7 @@\n // refers to rules defined in RFC 1214 (`OutlivesFooBar`), so see that\n // RFC for reference.\n \n+use smallvec::SmallVec;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n \n #[derive(Debug)]\n@@ -55,17 +56,15 @@ pub enum Component<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    /// Returns all the things that must outlive `'a` for the condition\n+    /// Push onto `out` all the things that must outlive `'a` for the condition\n     /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n-    pub fn outlives_components(&self, ty0: Ty<'tcx>)\n-                               -> Vec<Component<'tcx>> {\n-        let mut components = vec![];\n-        self.compute_components(ty0, &mut components);\n-        debug!(\"components({:?}) = {:?}\", ty0, components);\n-        components\n+    pub fn push_outlives_components(&self, ty0: Ty<'tcx>,\n+                                    out: &mut SmallVec<[Component<'tcx>; 4]>) {\n+        self.compute_components(ty0, out);\n+        debug!(\"components({:?}) = {:?}\", ty0, out);\n     }\n \n-    fn compute_components(&self, ty: Ty<'tcx>, out: &mut Vec<Component<'tcx>>) {\n+    fn compute_components(&self, ty: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n         // Descend through the types, looking for the various \"base\"\n         // components and collecting them into `out`. This is not written\n         // with `collect()` because of the need to sometimes skip subtrees\n@@ -164,7 +163,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 // list is maintained explicitly, because bound regions\n                 // themselves can be readily identified.\n \n-                push_region_constraints(out, ty.regions());\n+                push_region_constraints(ty, out);\n                 for subty in ty.walk_shallow() {\n                     self.compute_components(subty, out);\n                 }\n@@ -173,15 +172,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn capture_components(&self, ty: Ty<'tcx>) -> Vec<Component<'tcx>> {\n-        let mut temp = vec![];\n-        push_region_constraints(&mut temp, ty.regions());\n+        let mut temp = smallvec![];\n+        push_region_constraints(ty, &mut temp);\n         for subty in ty.walk_shallow() {\n             self.compute_components(subty, &mut temp);\n         }\n-        temp\n+        temp.into_iter().collect()\n     }\n }\n \n-fn push_region_constraints<'tcx>(out: &mut Vec<Component<'tcx>>, regions: Vec<ty::Region<'tcx>>) {\n+fn push_region_constraints<'tcx>(ty: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n+    let mut regions = smallvec![];\n+    ty.push_regions(&mut regions);\n     out.extend(regions.iter().filter(|&r| !r.is_late_bound()).map(|r| Component::Region(r)));\n }"}, {"sha": "5084f859c0782dbede0e4bed79a15bbdc1a7e5f8", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -22,6 +22,7 @@ use ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use util::captures::Captures;\n use mir::interpret::{Scalar, Pointer};\n \n+use smallvec::SmallVec;\n use std::iter;\n use std::cmp::Ordering;\n use rustc_target::spec::abi;\n@@ -1846,28 +1847,27 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Returns the regions directly referenced from this type (but\n-    /// not types reachable from this type via `walk_tys`). This\n-    /// ignores late-bound regions binders.\n-    pub fn regions(&self) -> Vec<ty::Region<'tcx>> {\n+    /// Push onto `out` the regions directly referenced from this type (but not\n+    /// types reachable from this type via `walk_tys`). This ignores late-bound\n+    /// regions binders.\n+    pub fn push_regions(&self, out: &mut SmallVec<[ty::Region<'tcx>; 4]>) {\n         match self.sty {\n             Ref(region, _, _) => {\n-                vec![region]\n+                out.push(region);\n             }\n             Dynamic(ref obj, region) => {\n-                let mut v = vec![region];\n-                v.extend(obj.principal().skip_binder().substs.regions());\n-                v\n+                out.push(region);\n+                out.extend(obj.principal().skip_binder().substs.regions());\n             }\n             Adt(_, substs) | Opaque(_, substs) => {\n-                substs.regions().collect()\n+                out.extend(substs.regions())\n             }\n             Closure(_, ClosureSubsts { ref substs }) |\n             Generator(_, GeneratorSubsts { ref substs }, _) => {\n-                substs.regions().collect()\n+                out.extend(substs.regions())\n             }\n             Projection(ref data) | UnnormalizedProjection(ref data) => {\n-                data.substs.regions().collect()\n+                out.extend(data.substs.regions())\n             }\n             FnDef(..) |\n             FnPtr(_) |\n@@ -1887,9 +1887,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             Param(_) |\n             Bound(..) |\n             Infer(_) |\n-            Error => {\n-                vec![]\n-            }\n+            Error => {}\n         }\n     }\n "}, {"sha": "98311444e28718d3b24aef07a04d92ba9a221e22", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -37,6 +37,7 @@ use rustc::mir::{BasicBlock, FakeReadCause, Local, Location, Mir, Place};\n use rustc::mir::{Rvalue, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::ty::{Ty, RegionKind, TyCtxt};\n+use smallvec::smallvec;\n use transform::{MirPass, MirSource};\n \n pub struct CleanEndRegions;\n@@ -80,7 +81,11 @@ impl<'tcx> Visitor<'tcx> for GatherBorrowedRegions {\n \n     fn visit_ty(&mut self, ty: &Ty<'tcx>, _: TyContext) {\n         // Gather regions that occur in types\n-        for re in ty.walk().flat_map(|t| t.regions()) {\n+        let mut regions = smallvec![];\n+        for t in ty.walk() {\n+            t.push_regions(&mut regions);\n+        }\n+        for re in regions {\n             match *re {\n                 RegionKind::ReScope(ce) => { self.seen_regions.insert(ce); }\n                 _ => {},"}, {"sha": "7514c2c18e7ca8f77aec0fbe7fcd15be28e12c8a", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -20,6 +20,7 @@ use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::outlives::Component;\n use rustc::ty::query::Providers;\n use rustc::ty::wf;\n+use smallvec::{SmallVec, smallvec};\n use syntax::ast::DUMMY_NODE_ID;\n use syntax::source_map::DUMMY_SP;\n use rustc::traits::FulfillmentContext;\n@@ -133,7 +134,8 @@ fn compute_implied_outlives_bounds<'tcx>(\n                     None => vec![],\n                     Some(ty::OutlivesPredicate(ty_a, r_b)) => {\n                         let ty_a = infcx.resolve_type_vars_if_possible(&ty_a);\n-                        let components = tcx.outlives_components(ty_a);\n+                        let mut components = smallvec![];\n+                        tcx.push_outlives_components(ty_a, &mut components);\n                         implied_bounds_from_components(r_b, components)\n                     }\n                 },\n@@ -155,7 +157,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n /// those relationships.\n fn implied_bounds_from_components(\n     sub_region: ty::Region<'tcx>,\n-    sup_components: Vec<Component<'tcx>>,\n+    sup_components: SmallVec<[Component<'tcx>; 4]>,\n ) -> Vec<OutlivesBound<'tcx>> {\n     sup_components\n         .into_iter()"}, {"sha": "6ed59837eb49a2c23a709491a25918c5e49d4c03", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2314b3cacf10e79082180c24c79599e63dbaa9/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=5b2314b3cacf10e79082180c24c79599e63dbaa9", "patch": "@@ -11,6 +11,7 @@\n use rustc::ty::outlives::Component;\n use rustc::ty::subst::{Kind, UnpackedKind};\n use rustc::ty::{self, Region, RegionKind, Ty, TyCtxt};\n+use smallvec::smallvec;\n use std::collections::BTreeSet;\n \n /// Tracks the `T: 'a` or `'a: 'a` predicates that we have inferred\n@@ -40,7 +41,9 @@ pub fn insert_outlives_predicate<'tcx>(\n             //\n             // Or if within `struct Foo<U>` you had `T = Vec<U>`, then\n             // we would want to add `U: 'outlived_region`\n-            for component in tcx.outlives_components(ty) {\n+            let mut components = smallvec![];\n+            tcx.push_outlives_components(ty, &mut components);\n+            for component in components {\n                 match component {\n                     Component::Region(r) => {\n                         // This would arise from something like:"}]}