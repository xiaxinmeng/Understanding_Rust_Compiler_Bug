{"sha": "4da9a147e196c5024e5cc4d49405d785fbfc465f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTlhMTQ3ZTE5NmM1MDI0ZTVjYzRkNDk0MDVkNzg1ZmJmYzQ2NWY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-13T03:45:54Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-13T03:45:54Z"}, "message": "Collapse multiple blocks in closures\n\nFixes #1524", "tree": {"sha": "6d8586dc129ef69e96478d607da66916323fedf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8586dc129ef69e96478d607da66916323fedf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da9a147e196c5024e5cc4d49405d785fbfc465f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da9a147e196c5024e5cc4d49405d785fbfc465f", "html_url": "https://github.com/rust-lang/rust/commit/4da9a147e196c5024e5cc4d49405d785fbfc465f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da9a147e196c5024e5cc4d49405d785fbfc465f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6e493ce07048787fb72d2679764f7afac70c5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6e493ce07048787fb72d2679764f7afac70c5f", "html_url": "https://github.com/rust-lang/rust/commit/bc6e493ce07048787fb72d2679764f7afac70c5f"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "a180e116a8be2b637f4bba30ddc22f21eaccf02e", "filename": "src/closures.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4da9a147e196c5024e5cc4d49405d785fbfc465f/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da9a147e196c5024e5cc4d49405d785fbfc465f/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=4da9a147e196c5024e5cc4d49405d785fbfc465f", "patch": "@@ -48,7 +48,19 @@ pub fn rewrite_closure(\n     let body_shape = shape.offset_left(extra_offset)?;\n \n     if let ast::ExprKind::Block(ref block) = body.node {\n-        try_rewrite_without_block(block, fn_decl, &prefix, context, shape, body_shape).or_else(|| {\n+        // The body of the closure is an empty block.\n+        if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) {\n+            return Some(format!(\"{} {{}}\", prefix));\n+        }\n+\n+        let result = match fn_decl.output {\n+            ast::FunctionRetTy::Default(_) => {\n+                try_rewrite_without_block(body, &prefix, context, shape, body_shape)\n+            }\n+            _ => None,\n+        };\n+\n+        result.or_else(|| {\n             // Either we require a block, or tried without and failed.\n             rewrite_closure_block(block, &prefix, context, body_shape)\n         })\n@@ -62,43 +74,36 @@ pub fn rewrite_closure(\n }\n \n fn try_rewrite_without_block(\n-    block: &ast::Block,\n-    fn_decl: &ast::FnDecl,\n+    expr: &ast::Expr,\n     prefix: &str,\n     context: &RewriteContext,\n     shape: Shape,\n     body_shape: Shape,\n ) -> Option<String> {\n-    // The body of the closure is an empty block.\n-    if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) {\n-        return Some(format!(\"{} {{}}\", prefix));\n-    }\n+    let expr = get_inner_expr(expr, prefix, context);\n \n-    match fn_decl.output {\n-        ast::FunctionRetTy::Default(_) => {}\n-        _ => return None,\n+    if is_block_closure_forced(expr) {\n+        rewrite_closure_with_block(expr, prefix, context, shape)\n+    } else {\n+        rewrite_closure_expr(expr, prefix, context, body_shape)\n     }\n-\n-    get_inner_expr(block, prefix, context).and_then(|expr| {\n-        return if is_block_closure_forced(expr) {\n-            rewrite_closure_with_block(expr, prefix, context, shape)\n-        } else {\n-            rewrite_closure_expr(expr, prefix, context, body_shape)\n-        };\n-    })\n }\n \n fn get_inner_expr<'a>(\n-    block: &'a ast::Block,\n+    expr: &'a ast::Expr,\n     prefix: &str,\n     context: &RewriteContext,\n-) -> Option<&'a ast::Expr> {\n-    if !needs_block(block, prefix, context) {\n-        // block.stmts.len() == 1\n-        stmt_expr(&block.stmts[0])\n-    } else {\n-        None\n+) -> &'a ast::Expr {\n+    if let ast::ExprKind::Block(ref block) = expr.node {\n+        if !needs_block(block, prefix, context) {\n+            // block.stmts.len() == 1\n+            if let Some(expr) = stmt_expr(&block.stmts[0]) {\n+                return get_inner_expr(expr, prefix, context);\n+            }\n+        }\n     }\n+\n+    expr\n }\n \n // Figure out if a block is necessary."}]}