{"sha": "35dfcc007868e3fe1118c677efc1594bfce9c575", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZGZjYzAwNzg2OGUzZmUxMTE4YzY3N2VmYzE1OTRiZmNlOWM1NzU=", "commit": {"author": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-11T21:18:30Z"}, "committer": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-11T21:18:30Z"}, "message": "Adding trait formatting\ntrait header formatting finished\ngeneric formatting finished\nadded basic trait bounds formatting", "tree": {"sha": "3529f09c30419572914045472bf7528d586204f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3529f09c30419572914045472bf7528d586204f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35dfcc007868e3fe1118c677efc1594bfce9c575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35dfcc007868e3fe1118c677efc1594bfce9c575", "html_url": "https://github.com/rust-lang/rust/commit/35dfcc007868e3fe1118c677efc1594bfce9c575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35dfcc007868e3fe1118c677efc1594bfce9c575/comments", "author": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b236819f7222c43749e500970b52ee671d68a67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b236819f7222c43749e500970b52ee671d68a67a", "html_url": "https://github.com/rust-lang/rust/commit/b236819f7222c43749e500970b52ee671d68a67a"}], "stats": {"total": 90, "additions": 83, "deletions": 7}, "files": [{"sha": "5586ad165649a4580e7489ef137f955d4997428e", "filename": "src/items.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/35dfcc007868e3fe1118c677efc1594bfce9c575/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dfcc007868e3fe1118c677efc1594bfce9c575/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=35dfcc007868e3fe1118c677efc1594bfce9c575", "patch": "@@ -22,7 +22,7 @@ use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n \n-use syntax::{ast, abi};\n+use syntax::{ast, abi, ptr};\n use syntax::codemap::{Span, BytePos, mk_sp};\n use syntax::parse::token;\n \n@@ -572,6 +572,50 @@ pub fn format_struct(context: &RewriteContext,\n     }\n }\n \n+pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent) -> Option<String> {\n+    if let ast::Item_::ItemTrait(unsafety, ref generics, ref type_param_bounds, ref trait_items) =\n+           item.node {\n+        let mut result = String::new();\n+        let header = format!(\"{}{}trait {}\",\n+                             format_visibility(item.vis),\n+                             format_unsafety(unsafety),\n+                             item.ident);\n+\n+        result.push_str(&header);\n+\n+        // TODO: Add max_width checking\n+        // let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n+        // let indent = offset + result.len();\n+\n+        let body_lo = span_after(item.span, \"{\", context.codemap);\n+\n+        let generics_str = try_opt!(rewrite_generics(context,\n+                                                     generics,\n+                                                     offset,\n+                                                     context.config.max_width,\n+                                                     offset + result.len(),\n+                                                     mk_sp(item.span.lo, body_lo)));\n+        result.push_str(&generics_str);\n+\n+        let trait_bound_str = try_opt!(rewrite_trait_bounds(context,\n+                                                            type_param_bounds,\n+                                                            offset,\n+                                                            0));\n+\n+        result.push_str(&trait_bound_str);\n+\n+        if trait_items.len() > 0 {\n+            result.push_str(\" {\");\n+        } else {\n+            result.push_str(\" {}\");\n+        }\n+\n+        Some(result)\n+    } else {\n+        unreachable!();\n+    }\n+}\n+\n fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: ast::Visibility) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n@@ -1437,6 +1481,28 @@ fn rewrite_generics(context: &RewriteContext,\n     Some(format!(\"<{}>\", list_str))\n }\n \n+fn rewrite_trait_bounds(context: &RewriteContext,\n+                      param_bounds: &ast::TyParamBounds,\n+                      indent: Indent,\n+                      width: usize)\n+                      -> Option<String> {\n+    let bounds: &[_] = &param_bounds.as_slice();\n+\n+    if bounds.is_empty() {\n+        return Some(String::new());\n+    }\n+\n+    let bound_str = bounds.iter()\n+                            .filter_map(|ty_bound| ty_bound.rewrite(&context, 100, indent))\n+                            .collect::<Vec<String>>()\n+                            .join(\" + \");\n+\n+    let mut result = String::new();\n+    result.push_str(\" : \");\n+    result.push_str(&bound_str);\n+    Some(result)\n+}\n+\n fn rewrite_where_clause(context: &RewriteContext,\n                         where_clause: &ast::WhereClause,\n                         config: &Config,"}, {"sha": "8e4c22814424e1d6d2a4423162e777bbdc20297b", "filename": "src/missed_spans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35dfcc007868e3fe1118c677efc1594bfce9c575/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dfcc007868e3fe1118c677efc1594bfce9c575/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=35dfcc007868e3fe1118c677efc1594bfce9c575", "patch": "@@ -47,10 +47,10 @@ impl<'a> FmtVisitor<'a> {\n             return;\n         }\n \n-        assert!(start < end,\n-                \"Request to format inverted span: {:?} to {:?}\",\n-                self.codemap.lookup_char_pos(start),\n-                self.codemap.lookup_char_pos(end));\n+        // assert!(start < end,\n+        //         \"Request to format inverted span: {:?} to {:?}\",\n+        //         self.codemap.lookup_char_pos(start),\n+        //         self.codemap.lookup_char_pos(end));\n \n         self.last_pos = end;\n         let span = codemap::mk_sp(start, end);"}, {"sha": "3a8bb0bae8f3ddc5d55dbf132d312283169ba7b5", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35dfcc007868e3fe1118c677efc1594bfce9c575/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dfcc007868e3fe1118c677efc1594bfce9c575/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=35dfcc007868e3fe1118c677efc1594bfce9c575", "patch": "@@ -21,7 +21,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::{rewrite_static, rewrite_type_alias, format_impl};\n+use items::{rewrite_static, rewrite_type_alias, format_impl, format_trait};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -209,8 +209,14 @@ impl<'a> FmtVisitor<'a> {\n                 }\n             }\n             // FIXME(#78): format traits.\n-            ast::Item_::ItemTrait(_, _, _, ref trait_items) => {\n+            ast::Item_::ItemTrait(unsafety, ref generics, ref param_bounds, ref trait_items) => {\n                 self.format_missing_with_indent(item.span.lo);\n+                if let Some(trait_str) = format_trait(&self.get_context(),\n+                                                      item,\n+                                                      self.block_indent) {\n+                    self.buffer.push_str(&trait_str);\n+                    self.last_pos = item.span.hi;\n+                }\n                 self.block_indent = self.block_indent.block_indent(self.config);\n                 for item in trait_items {\n                     self.visit_trait_item(&item);"}, {"sha": "49b314358f2ed3ee634a50c25832631f95282cab", "filename": "tests/source/trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35dfcc007868e3fe1118c677efc1594bfce9c575/tests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dfcc007868e3fe1118c677efc1594bfce9c575/tests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrait.rs?ref=35dfcc007868e3fe1118c677efc1594bfce9c575", "patch": "@@ -35,3 +35,5 @@ trait TraitWithExpr {\n trait Test {\n     fn read_struct<T, F>(&mut self, s_name: &str, len: usize, f: F) -> Result<T, Self::Error> where F: FnOnce(&mut Self) -> Result<T, Self::Error>;\n }\n+\n+trait T<> {}"}, {"sha": "32389431284abff81f3d062f422a9f6b64b4b62c", "filename": "tests/target/trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35dfcc007868e3fe1118c677efc1594bfce9c575/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dfcc007868e3fe1118c677efc1594bfce9c575/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=35dfcc007868e3fe1118c677efc1594bfce9c575", "patch": "@@ -34,3 +34,5 @@ trait Test {\n     fn read_struct<T, F>(&mut self, s_name: &str, len: usize, f: F) -> Result<T, Self::Error>\n         where F: FnOnce(&mut Self) -> Result<T, Self::Error>;\n }\n+\n+trait T {}"}]}