{"sha": "8fe7543191e10145ba56f676f529e9db4664dee0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTc1NDMxOTFlMTAxNDViYTU2ZjY3NmY1MjllOWRiNDY2NGRlZTA=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-08T18:29:26Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-19T22:47:34Z"}, "message": "add helper function for target platform checks", "tree": {"sha": "b5e8288ddbc452122686dc011610a80b20e5d2b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5e8288ddbc452122686dc011610a80b20e5d2b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe7543191e10145ba56f676f529e9db4664dee0", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXk27IQAKCRAnUl7150IK\nUA84AP9vOz0lQoAj4VKt+2Hchdv0OFbgKA28HMDrkFS/L5sjgAEAxDC90bsnSWKd\nOQKzqOqyEPyifH7Y49XcnprYF+j48wU=\n=tWEG\n-----END PGP SIGNATURE-----", "payload": "tree b5e8288ddbc452122686dc011610a80b20e5d2b8\nparent c233c4ad9c84e138bc05db4fd5953239a9b0cd0a\nauthor Christian Poveda <git@christianpoveda.xyz> 1581186566 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1582152454 -0500\n\nadd helper function for target platform checks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe7543191e10145ba56f676f529e9db4664dee0", "html_url": "https://github.com/rust-lang/rust/commit/8fe7543191e10145ba56f676f529e9db4664dee0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe7543191e10145ba56f676f529e9db4664dee0/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c233c4ad9c84e138bc05db4fd5953239a9b0cd0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c233c4ad9c84e138bc05db4fd5953239a9b0cd0a", "html_url": "https://github.com/rust-lang/rust/commit/c233c4ad9c84e138bc05db4fd5953239a9b0cd0a"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "c92aa6dfaa7cb4a1570c847c66a52b723448d807", "filename": "src/helpers.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fe7543191e10145ba56f676f529e9db4664dee0/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe7543191e10145ba56f676f529e9db4664dee0/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=8fe7543191e10145ba56f676f529e9db4664dee0", "patch": "@@ -368,6 +368,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n+    /// Helper function used inside the shims of foreign functions to check that the target\n+    /// platform is `platform`. It returns an error using the `name` of the foreign function if\n+    /// this is not the case.\n+    fn check_platform(&mut self, platform: &str, name: &str) -> InterpResult<'tcx> {\n+        if self.eval_context_mut().tcx.sess.target.target.target_os.to_lowercase() != platform {\n+            throw_unsup_format!(\n+                \"`{}` is only available in the `{}` platform\",\n+                name,\n+                platform,\n+            )\n+        }\n+        Ok(())\n+    }\n \n     /// Sets the last error variable.\n     fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {"}, {"sha": "42a860780ff8b05fbb07bcaf5bd151f797f9ea7e", "filename": "src/shims/fs.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fe7543191e10145ba56f676f529e9db4664dee0/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe7543191e10145ba56f676f529e9db4664dee0/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=8fe7543191e10145ba56f676f529e9db4664dee0", "patch": "@@ -347,6 +347,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.check_no_isolation(\"stat\")?;\n+        this.check_platform(\"macos\", \"stat\")?;\n         // `stat` always follows symlinks.\n         this.stat_or_lstat(true, path_op, buf_op)\n     }\n@@ -359,6 +360,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.check_no_isolation(\"lstat\")?;\n+        this.check_platform(\"macos\", \"lstat\")?;\n         this.stat_or_lstat(false, path_op, buf_op)\n     }\n \n@@ -370,10 +372,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"fstat\")?;\n-\n-        if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n-            throw_unsup_format!(\"The `fstat` shim is only available for `macos` targets.\")\n-        }\n+        this.check_platform(\"macos\", \"fstat\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n@@ -392,10 +391,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n-            throw_unsup_format!(\"The `stat` and `lstat` shims are only available for `macos` targets.\")\n-        }\n-\n         let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n         let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n \n@@ -417,10 +412,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.check_no_isolation(\"statx\")?;\n-\n-        if this.tcx.sess.target.target.target_os.to_lowercase() != \"linux\" {\n-            throw_unsup_format!(\"The `statx` shim is only available for `linux` targets.\")\n-        }\n+        this.check_platform(\"linux\", \"statx\")?;\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n         let pathname_scalar = this.read_scalar(pathname_op)?.not_undef()?;"}]}