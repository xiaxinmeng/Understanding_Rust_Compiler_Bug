{"sha": "f615efdfc3b4655e4f74068769905404cd911b5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MTVlZmRmYzNiNDY1NWU0Zjc0MDY4NzY5OTA1NDA0Y2Q5MTFiNWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-22T15:28:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-22T15:50:15Z"}, "message": "Factor out `pick_best_token` ide pattern into `ide_db`", "tree": {"sha": "8e7d42ad63269c668b189c0a59d55ebd53328f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e7d42ad63269c668b189c0a59d55ebd53328f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f615efdfc3b4655e4f74068769905404cd911b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f615efdfc3b4655e4f74068769905404cd911b5e", "html_url": "https://github.com/rust-lang/rust/commit/f615efdfc3b4655e4f74068769905404cd911b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f615efdfc3b4655e4f74068769905404cd911b5e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e2ec914f4b9609d162c3fd1776e8d293428fe5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2ec914f4b9609d162c3fd1776e8d293428fe5a", "html_url": "https://github.com/rust-lang/rust/commit/4e2ec914f4b9609d162c3fd1776e8d293428fe5a"}], "stats": {"total": 163, "additions": 62, "deletions": 101}, "files": [{"sha": "7bf35d2b36b565f86a4bd36000318560e1a17fae", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -3,8 +3,7 @@\n use indexmap::IndexMap;\n \n use hir::Semantics;\n-use ide_db::call_info::FnCallNode;\n-use ide_db::RootDatabase;\n+use ide_db::{call_info::FnCallNode, RootDatabase};\n use syntax::{ast, AstNode, TextRange};\n \n use crate::{"}, {"sha": "dfab8d313ada5c2d067432177943e2174f6968da", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -16,11 +16,10 @@ use hir::{\n };\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n+    helpers::pick_best_token,\n     RootDatabase,\n };\n-use syntax::{\n-    ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode, SyntaxToken, TextRange, TokenAtOffset, T,\n-};\n+use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode, TextRange, T};\n \n use crate::{FilePosition, Semantics};\n \n@@ -102,7 +101,12 @@ pub(crate) fn external_docs(\n ) -> Option<DocumentationLink> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n-    let token = pick_best(file.token_at_offset(position.offset))?;\n+    let token = pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n+        IDENT | INT_NUMBER => 3,\n+        T!['('] | T![')'] => 2,\n+        kind if kind.is_trivia() => 0,\n+        _ => 1,\n+    })?;\n     let token = sema.descend_into_macros(token);\n \n     let node = token.parent()?;\n@@ -522,18 +526,6 @@ fn get_symbol_fragment(db: &dyn HirDatabase, field_or_assoc: &FieldOrAssocItem)\n     })\n }\n \n-fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n-    return tokens.max_by_key(priority);\n-    fn priority(n: &SyntaxToken) -> usize {\n-        match n.kind() {\n-            IDENT | INT_NUMBER => 3,\n-            T!['('] | T![')'] => 2,\n-            kind if kind.is_trivia() => 0,\n-            _ => 1,\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}, {"sha": "854d54b7116fb8e9b3693935dd317da02035e345", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -1,11 +1,8 @@\n use std::iter;\n \n use hir::Semantics;\n-use ide_db::RootDatabase;\n-use syntax::{\n-    ast, ted, AstNode, NodeOrToken, SyntaxKind, SyntaxKind::*, SyntaxNode, SyntaxToken,\n-    TokenAtOffset, WalkEvent, T,\n-};\n+use ide_db::{helpers::pick_best_token, RootDatabase};\n+use syntax::{ast, ted, AstNode, NodeOrToken, SyntaxKind, SyntaxKind::*, SyntaxNode, WalkEvent, T};\n \n use crate::FilePosition;\n \n@@ -29,7 +26,10 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id);\n \n-    let tok = pick_best(file.syntax().token_at_offset(position.offset))?;\n+    let tok = pick_best_token(file.syntax().token_at_offset(position.offset), |kind| match kind {\n+        SyntaxKind::IDENT => 1,\n+        _ => 0,\n+    })?;\n     let mut expanded = None;\n     let mut name = None;\n     for node in tok.ancestors() {\n@@ -57,16 +57,6 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     Some(ExpandedMacro { name: name?, expansion })\n }\n \n-fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n-    return tokens.max_by_key(priority);\n-    fn priority(n: &SyntaxToken) -> usize {\n-        match n.kind() {\n-            IDENT => 1,\n-            _ => 0,\n-        }\n-    }\n-}\n-\n fn expand_macro_recur(\n     sema: &Semantics<RootDatabase>,\n     macro_call: &ast::MacroCall,"}, {"sha": "df6c35780c9b7390aef96d5cb72985db9c8aab9d", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -5,11 +5,10 @@ use hir::{AsAssocItem, InFile, ModuleDef, Semantics};\n use ide_db::{\n     base_db::{AnchoredPath, FileId, FileLoader},\n     defs::{Definition, NameClass, NameRefClass},\n+    helpers::pick_best_token,\n     RootDatabase,\n };\n-use syntax::{\n-    ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextRange, TokenAtOffset, T,\n-};\n+use syntax::{ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n use crate::{\n     display::TryToNav,\n@@ -34,7 +33,12 @@ pub(crate) fn goto_definition(\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n-    let original_token = pick_best(file.token_at_offset(position.offset))?;\n+    let original_token =\n+        pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n+            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | COMMENT => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        })?;\n     let token = sema.descend_into_macros(original_token.clone());\n     let parent = token.parent()?;\n     if let Some(_) = ast::Comment::cast(token.clone()) {\n@@ -128,17 +132,6 @@ fn try_find_trait_item_definition(db: &RootDatabase, def: &Definition) -> Option\n         .find_map(|itm| (itm.name(db)? == name).then(|| itm.try_to_nav(db)).flatten())\n }\n \n-fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n-    return tokens.max_by_key(priority);\n-    fn priority(n: &SyntaxToken) -> usize {\n-        match n.kind() {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | COMMENT => 2,\n-            kind if kind.is_trivia() => 0,\n-            _ => 1,\n-        }\n-    }\n-}\n-\n pub(crate) fn reference_definition(\n     sema: &Semantics<RootDatabase>,\n     name_ref: Either<&ast::Lifetime, &ast::NameRef>,"}, {"sha": "6263d3d4f03afcd35be403c9c326f9d56b2ee260", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -1,6 +1,7 @@\n use ide_db::base_db::Upcast;\n+use ide_db::helpers::pick_best_token;\n use ide_db::RootDatabase;\n-use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, T};\n \n use crate::{display::TryToNav, FilePosition, NavigationTarget, RangeInfo};\n \n@@ -22,7 +23,12 @@ pub(crate) fn goto_type_definition(\n     let sema = hir::Semantics::new(db);\n \n     let file: ast::SourceFile = sema.parse(position.file_id);\n-    let token: SyntaxToken = pick_best(file.syntax().token_at_offset(position.offset))?;\n+    let token: SyntaxToken =\n+        pick_best_token(file.syntax().token_at_offset(position.offset), |kind| match kind {\n+            IDENT | INT_NUMBER | T![self] => 2,\n+            kind if kind.is_trivia() => 0,\n+            _ => 1,\n+        })?;\n     let token: SyntaxToken = sema.descend_into_macros(token);\n \n     let (ty, node) = sema.token_ancestors_with_macros(token).find_map(|node| {\n@@ -56,17 +62,6 @@ pub(crate) fn goto_type_definition(\n     Some(RangeInfo::new(node.text_range(), vec![nav]))\n }\n \n-fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n-    return tokens.max_by_key(priority);\n-    fn priority(n: &SyntaxToken) -> usize {\n-        match n.kind() {\n-            IDENT | INT_NUMBER | T![self] => 2,\n-            kind if kind.is_trivia() => 0,\n-            _ => 1,\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use ide_db::base_db::FileRange;"}, {"sha": "0eeea4efb11e6240fcef7cec4f7922127cb6f381", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -5,16 +5,13 @@ use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     helpers::{\n         generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},\n-        FamousDefs,\n+        pick_best_token, FamousDefs,\n     },\n     RootDatabase,\n };\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::{\n-    algo, ast, match_ast, AstNode, AstToken, Direction, SyntaxKind::*, SyntaxToken, TokenAtOffset,\n-    T,\n-};\n+use syntax::{algo, ast, match_ast, AstNode, AstToken, Direction, SyntaxKind::*, SyntaxToken, T};\n \n use crate::{\n     display::{macro_label, TryToNav},\n@@ -80,7 +77,12 @@ pub(crate) fn hover(\n ) -> Option<RangeInfo<HoverResult>> {\n     let sema = hir::Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n-    let token = pick_best(file.token_at_offset(position.offset))?;\n+    let token = pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n+        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n+        T!['('] | T![')'] => 2,\n+        kind if kind.is_trivia() => 0,\n+        _ => 1,\n+    })?;\n     let token = sema.descend_into_macros(token);\n \n     let mut res = HoverResult::default();\n@@ -519,19 +521,6 @@ fn find_std_module(famous_defs: &FamousDefs, name: &str) -> Option<hir::Module>\n         .find(|module| module.name(db).map_or(false, |module| module.to_string() == name))\n }\n \n-fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n-    return tokens.max_by_key(priority);\n-\n-    fn priority(n: &SyntaxToken) -> usize {\n-        match n.kind() {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n-            T!['('] | T![')'] => 2,\n-            kind if kind.is_trivia() => 0,\n-            _ => 1,\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}, {"sha": "ca14533f388bcedc08161f95e2f19b7bc227a521", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -439,7 +439,7 @@ impl Analysis {\n         self.with_db(|db| call_hierarchy::incoming_calls(db, position))\n     }\n \n-    /// Computes incoming calls for the given file position.\n+    /// Computes outgoing calls for the given file position.\n     pub fn outgoing_calls(&self, position: FilePosition) -> Cancellable<Option<Vec<CallItem>>> {\n         self.with_db(|db| call_hierarchy::outgoing_calls(db, position))\n     }"}, {"sha": "1223c2810f2972e2ee21351e8374268d35c1b921", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -1,12 +1,9 @@\n use std::{iter::once, mem};\n \n use hir::Semantics;\n-use ide_db::{base_db::FileRange, RootDatabase};\n+use ide_db::{base_db::FileRange, helpers::pick_best_token, RootDatabase};\n use itertools::Itertools;\n-use syntax::{\n-    algo, ast, match_ast, AstNode, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange,\n-    TokenAtOffset,\n-};\n+use syntax::{algo, ast, match_ast, AstNode, SyntaxElement, SyntaxKind, SyntaxNode, TextRange};\n use text_edit::{TextEdit, TextEditBuilder};\n \n #[derive(Copy, Clone, Debug)]\n@@ -36,7 +33,14 @@ pub(crate) fn move_item(\n     let file = sema.parse(range.file_id);\n \n     let item = if range.range.is_empty() {\n-        SyntaxElement::Token(pick_best(file.syntax().token_at_offset(range.range.start()))?)\n+        SyntaxElement::Token(pick_best_token(\n+            file.syntax().token_at_offset(range.range.start()),\n+            |kind| match kind {\n+                SyntaxKind::IDENT | SyntaxKind::LIFETIME_IDENT => 2,\n+                kind if kind.is_trivia() => 0,\n+                _ => 1,\n+            },\n+        )?)\n     } else {\n         file.syntax().covering_element(range.range)\n     };\n@@ -170,18 +174,6 @@ fn replace_nodes<'a>(\n     edit.finish()\n }\n \n-fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n-    return tokens.max_by_key(priority);\n-\n-    fn priority(n: &SyntaxToken) -> usize {\n-        match n.kind() {\n-            SyntaxKind::IDENT | SyntaxKind::LIFETIME_IDENT => 2,\n-            kind if kind.is_trivia() => 0,\n-            _ => 1,\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::fixture;"}, {"sha": "bc21977e36cab4835015a133e3b2f46fbf4a82ff", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f615efdfc3b4655e4f74068769905404cd911b5e/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=f615efdfc3b4655e4f74068769905404cd911b5e", "patch": "@@ -10,7 +10,10 @@ use std::collections::VecDeque;\n use base_db::FileId;\n use either::Either;\n use hir::{Crate, Enum, ItemInNs, MacroDef, Module, ModuleDef, Name, ScopeDef, Semantics, Trait};\n-use syntax::ast::{self, make};\n+use syntax::{\n+    ast::{self, make},\n+    SyntaxKind, SyntaxToken, TokenAtOffset,\n+};\n \n use crate::RootDatabase;\n \n@@ -22,6 +25,14 @@ pub fn item_name(db: &RootDatabase, item: ItemInNs) -> Option<Name> {\n     }\n }\n \n+/// Picks the token with the highest rank returned by the passed in function.\n+pub fn pick_best_token(\n+    tokens: TokenAtOffset<SyntaxToken>,\n+    f: impl Fn(SyntaxKind) -> usize,\n+) -> Option<SyntaxToken> {\n+    tokens.max_by_key(move |t| f(t.kind()))\n+}\n+\n /// Converts the mod path struct into its ast representation.\n pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n     let _p = profile::span(\"mod_path_to_ast\");"}]}