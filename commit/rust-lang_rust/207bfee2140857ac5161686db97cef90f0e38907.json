{"sha": "207bfee2140857ac5161686db97cef90f0e38907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwN2JmZWUyMTQwODU3YWM1MTYxNjg2ZGI5N2NlZjkwZjBlMzg5MDc=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-06-04T22:55:10Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-06-17T21:08:56Z"}, "message": "rustc: Add self/super hint for extern crate resolve errors.", "tree": {"sha": "559220b627d0acc29dd5ea3f7b9ee6716ba95807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559220b627d0acc29dd5ea3f7b9ee6716ba95807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207bfee2140857ac5161686db97cef90f0e38907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207bfee2140857ac5161686db97cef90f0e38907", "html_url": "https://github.com/rust-lang/rust/commit/207bfee2140857ac5161686db97cef90f0e38907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207bfee2140857ac5161686db97cef90f0e38907/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db298145c702c49e5f3cc17adeafe58c8b1bbd6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/db298145c702c49e5f3cc17adeafe58c8b1bbd6a", "html_url": "https://github.com/rust-lang/rust/commit/db298145c702c49e5f3cc17adeafe58c8b1bbd6a"}], "stats": {"total": 122, "additions": 92, "deletions": 30}, "files": [{"sha": "7710ef8d733b7d5a0c5f645696793b1486c632d7", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 56, "deletions": 26, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/207bfee2140857ac5161686db97cef90f0e38907/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207bfee2140857ac5161686db97cef90f0e38907/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=207bfee2140857ac5161686db97cef90f0e38907", "patch": "@@ -1485,26 +1485,21 @@ impl<'a> Resolver<'a> {\n \n             ViewItemExternCrate(name, _, node_id) => {\n                 // n.b. we don't need to look at the path option here, because cstore already did\n-                match self.session.cstore.find_extern_mod_stmt_cnum(node_id) {\n-                    Some(crate_id) => {\n-                        let def_id = DefId { krate: crate_id, node: 0 };\n-                        self.external_exports.insert(def_id);\n-                        let parent_link = ModuleParentLink\n-                            (parent.module().downgrade(), name);\n-                        let external_module = Rc::new(Module::new(parent_link,\n-                                                                  Some(def_id),\n-                                                                  NormalModuleKind,\n-                                                                  false,\n-                                                                  true));\n-\n-                        parent.module().external_module_children\n-                              .borrow_mut().insert(name.name,\n-                                                   external_module.clone());\n-\n-                        self.build_reduced_graph_for_external_crate(\n-                            external_module);\n-                    }\n-                    None => {}  // Ignore.\n+                for &crate_id in self.session.cstore.find_extern_mod_stmt_cnum(node_id).iter() {\n+                    let def_id = DefId { krate: crate_id, node: 0 };\n+                    self.external_exports.insert(def_id);\n+                    let parent_link = ModuleParentLink(parent.module().downgrade(), name);\n+                    let external_module = Rc::new(Module::new(parent_link,\n+                                                              Some(def_id),\n+                                                              NormalModuleKind,\n+                                                              false,\n+                                                              true));\n+                    debug!(\"(build reduced graph for item) found extern `{}`\",\n+                            self.module_to_str(&*external_module));\n+                    parent.module().external_module_children.borrow_mut()\n+                                                            .insert(name.name,\n+                                                                    external_module.clone());\n+                    self.build_reduced_graph_for_external_crate(external_module);\n                 }\n             }\n         }\n@@ -1997,7 +1992,9 @@ impl<'a> Resolver<'a> {\n     fn resolve_imports_for_module_subtree(&mut self, module_: Rc<Module>) {\n         debug!(\"(resolving imports for module subtree) resolving {}\",\n                self.module_to_str(&*module_));\n+        let orig_module = replace(&mut self.current_module, module_.clone());\n         self.resolve_imports_for_module(module_.clone());\n+        self.current_module = orig_module;\n \n         self.populate_module_if_necessary(&module_);\n         for (_, child_node) in module_.children.borrow().iter() {\n@@ -2611,6 +2608,22 @@ impl<'a> Resolver<'a> {\n                                      name_search_type: NameSearchType,\n                                      lp: LastPrivate)\n                                 -> ResolveResult<(Rc<Module>, LastPrivate)> {\n+        fn search_parent_externals(needle: Name, module: &Rc<Module>)\n+                                -> Option<Rc<Module>> {\n+            module.external_module_children.borrow()\n+                                            .find_copy(&needle)\n+                                            .map(|_| module.clone())\n+                                            .or_else(|| {\n+                match module.parent_link.clone() {\n+                    ModuleParentLink(parent, _) => {\n+                        search_parent_externals(needle,\n+                                                &parent.upgrade().unwrap())\n+                    }\n+                   _ => None\n+                }\n+            })\n+        }\n+\n         let mut search_module = module_;\n         let mut index = index;\n         let module_path_len = module_path.len();\n@@ -2635,11 +2648,28 @@ impl<'a> Resolver<'a> {\n                             hi: span.lo + Pos::from_uint(segment_name.get().len()),\n                             expn_info: span.expn_info,\n                         };\n-                        self.resolve_error(span,\n-                                           format!(\"unresolved import. maybe \\\n-                                                    a missing `extern crate \\\n-                                                    {}`?\",\n-                                                   segment_name).as_slice());\n+\n+                        match search_parent_externals(name.name, &self.current_module) {\n+                            Some(module) => {\n+                                let path_str = self.idents_to_str(module_path);\n+                                let target_mod_str = self.module_to_str(&*module);\n+                                let current_mod_str = self.module_to_str(&*self.current_module);\n+\n+                                let prefix = if target_mod_str == current_mod_str {\n+                                    \"self::\".to_string()\n+                                } else {\n+                                    format!(\"{}::\", target_mod_str)\n+                                };\n+\n+                                self.resolve_error(span, format!(\"unresolved import. Did you mean \\\n+                                                                `{}{}`?\",\n+                                                                prefix, path_str).as_slice());\n+                            },\n+                            None => self.resolve_error(span, format!(\"unresolved import. Maybe a \\\n+                                                                    missing `extern crate {}`?\",\n+                                                                    segment_name).as_slice()),\n+                        }\n+\n                         return Failed;\n                     }\n                     self.resolve_error(span,\n@@ -5480,7 +5510,7 @@ impl<'a> Resolver<'a> {\n     //\n \n     /// A somewhat inefficient routine to obtain the name of a module.\n-    fn module_to_str(&mut self, module: &Module) -> String {\n+    fn module_to_str(&self, module: &Module) -> String {\n         let mut idents = Vec::new();\n \n         fn collect_mod(idents: &mut Vec<ast::Ident>, module: &Module) {"}, {"sha": "84ff07facee5aa0c6c6b5be8827d9caf28d4e97c", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207bfee2140857ac5161686db97cef90f0e38907/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207bfee2140857ac5161686db97cef90f0e38907/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=207bfee2140857ac5161686db97cef90f0e38907", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,7 +12,7 @@\n \n #![feature(globs)]\n \n-use unresolved::*; //~ ERROR unresolved import. maybe a missing\n+use unresolved::*; //~ ERROR unresolved import. Maybe a missing\n //~^ ERROR failed to resolve import\n \n fn main() {"}, {"sha": "f900d3a74ed905d567b735b374adf6dece8db614", "filename": "src/test/compile-fail/resolve_self_super_hint.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/207bfee2140857ac5161686db97cef90f0e38907/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207bfee2140857ac5161686db97cef90f0e38907/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve_self_super_hint.rs?ref=207bfee2140857ac5161686db97cef90f0e38907", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod a {\n+    extern crate collections;\n+    use collections::HashMap;\n+    //~^ ERROR unresolved import. Did you mean `self::collections`?\n+    //~^^ ERROR failed to resolve import `collections::HashMap`\n+\n+    mod b {\n+        use collections::HashMap;\n+//~^ ERROR unresolved import. Did you mean `a::collections`?\n+//~^^ ERROR failed to resolve import `collections::HashMap`\n+        mod c {\n+            use collections::HashMap;\n+//~^ ERROR unresolved import. Did you mean `a::collections`?\n+//~^^ ERROR failed to resolve import `collections::HashMap`\n+            mod d {\n+                use collections::HashMap;\n+//~^ ERROR unresolved import. Did you mean `a::collections`\n+//~^^ ERROR failed to resolve import `collections::HashMap`\n+            }\n+        }\n+    }\n+}"}, {"sha": "a614ed109d872fee76b1b6cfe47952272b4b3f00", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/207bfee2140857ac5161686db97cef90f0e38907/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207bfee2140857ac5161686db97cef90f0e38907/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=207bfee2140857ac5161686db97cef90f0e38907", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use foo::bar; //~ ERROR unresolved import. maybe a missing `extern crate foo`?\n+use foo::bar; //~ ERROR unresolved import. Maybe a missing `extern crate foo`?\n               //~^ ERROR failed to resolve import `foo::bar`\n use x = bar::baz; //~ ERROR unresolved import: there is no `baz` in `bar`\n                   //~^ ERROR failed to resolve import `bar::baz`"}]}