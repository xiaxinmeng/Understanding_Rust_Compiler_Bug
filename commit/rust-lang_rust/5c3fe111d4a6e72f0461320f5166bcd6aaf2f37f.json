{"sha": "5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjM2ZlMTExZDRhNmU3MmYwNDYxMzIwZjUxNjZiY2Q2YWFmMmYzN2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-01T20:04:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-09T15:56:44Z"}, "message": "std: Avoid use of `libc` in portable modules\n\nThis commit removes usage of the `libc` crate in \"portable\" modules like\nthose at the top level and `sys_common`. Instead common types like `*mut\nu8` or `u32` are used instead of `*mut c_void` or `c_int` as well as\nswitching to platform-specific functions like `sys::strlen` instead of\n`libc::strlen`.", "tree": {"sha": "48f0b9a3b4a7d115bd9bf29916adc437fed669fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f0b9a3b4a7d115bd9bf29916adc437fed669fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "html_url": "https://github.com/rust-lang/rust/commit/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/348930eb4e75ee9ce42e783fe9942c8eb5165bc1", "html_url": "https://github.com/rust-lang/rust/commit/348930eb4e75ee9ce42e783fe9942c8eb5165bc1"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "1aa47f066b69fc7f7177f929eaee2dc93933b3c5", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -14,14 +14,14 @@ use cmp::Ordering;\n use error::Error;\n use fmt::{self, Write};\n use io;\n-use libc;\n use mem;\n use memchr;\n use ops;\n use os::raw::c_char;\n use ptr;\n use slice;\n use str::{self, Utf8Error};\n+use sys;\n \n /// A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\n /// middle.\n@@ -404,7 +404,7 @@ impl CString {\n     /// ```\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n-        let len = libc::strlen(ptr) + 1; // Including the NUL byte\n+        let len = sys::strlen(ptr) + 1; // Including the NUL byte\n         let slice = slice::from_raw_parts_mut(ptr, len as usize);\n         CString { inner: Box::from_raw(slice as *mut [c_char] as *mut [u8]) }\n     }\n@@ -861,7 +861,7 @@ impl CStr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n-        let len = libc::strlen(ptr);\n+        let len = sys::strlen(ptr);\n         let ptr = ptr as *const u8;\n         CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n     }"}, {"sha": "0a174b3c3f58687b33d55a5769962d8f0491d823", "filename": "src/libstd/sys/redox/backtrace/tracing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fbacktrace%2Ftracing.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -96,8 +96,8 @@ extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n \n     if cx.idx < cx.frames.len() {\n         cx.frames[cx.idx] = Frame {\n-            symbol_addr: symaddr,\n-            exact_position: ip,\n+            symbol_addr: symaddr as *mut u8,\n+            exact_position: ip as *mut u8,\n         };\n         cx.idx += 1;\n     }"}, {"sha": "4352b72c307735b40d55f4d8da879c706f325e89", "filename": "src/libstd/sys/redox/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -12,6 +12,7 @@\n \n use io::{self, ErrorKind};\n \n+pub use libc::strlen;\n pub use self::rand::hashmap_random_keys;\n \n pub mod args;"}, {"sha": "bc56fd6594ea6940369ecf5e9e4c4296477c0520", "filename": "src/libstd/sys/unix/backtrace/printing/dladdr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -22,7 +22,7 @@ pub fn resolve_symname<F>(frame: Frame,\n {\n     unsafe {\n         let mut info: Dl_info = intrinsics::init();\n-        let symname = if dladdr(frame.exact_position, &mut info) == 0 ||\n+        let symname = if dladdr(frame.exact_position as *mut _, &mut info) == 0 ||\n                          info.dli_sname.is_null() {\n             None\n         } else {\n@@ -41,6 +41,5 @@ struct Dl_info {\n }\n \n extern {\n-    fn dladdr(addr: *const libc::c_void,\n-              info: *mut Dl_info) -> libc::c_int;\n+    fn dladdr(addr: *const libc::c_void, info: *mut Dl_info) -> libc::c_int;\n }"}, {"sha": "caa60712b1d585bbc59111a3852d270d3aa28ef1", "filename": "src/libstd/sys/unix/backtrace/printing/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fmod.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -20,7 +20,7 @@ pub use self::dladdr::resolve_symname;\n #[cfg(target_os = \"emscripten\")]\n pub fn foreach_symbol_fileline<F>(_: Frame, _: F, _: &BacktraceContext) -> io::Result<bool>\n where\n-    F: FnMut(&[u8], ::libc::c_int) -> io::Result<()>\n+    F: FnMut(&[u8], u32) -> io::Result<()>\n {\n     Ok(false)\n }"}, {"sha": "400d39cd4bdcbcb93334cf73479cc11b19433050", "filename": "src/libstd/sys/unix/backtrace/tracing/backtrace_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fbacktrace_fn.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -36,8 +36,8 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n     } as usize;\n     for (from, to) in raw_frames.iter().zip(frames.iter_mut()).take(nb_frames) {\n         *to = Frame {\n-            exact_position: *from,\n-            symbol_addr: *from,\n+            exact_position: *from as *mut u8,\n+            symbol_addr: *from as *mut u8,\n         };\n     }\n     Ok((nb_frames as usize, BacktraceContext))"}, {"sha": "000c08d2e0d198d33c81eb47eebf6f188a63ba3c", "filename": "src/libstd/sys/unix/backtrace/tracing/gcc_s.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Ftracing%2Fgcc_s.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -96,8 +96,8 @@ extern fn trace_fn(ctx: *mut uw::_Unwind_Context,\n \n     if cx.idx < cx.frames.len() {\n         cx.frames[cx.idx] = Frame {\n-            symbol_addr: symaddr,\n-            exact_position: ip,\n+            symbol_addr: symaddr as *mut u8,\n+            exact_position: ip as *mut u8,\n         };\n         cx.idx += 1;\n     }"}, {"sha": "9bdea945ea42eacf52a993f91f6912bcbb675a08", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -30,6 +30,7 @@ use libc;\n #[cfg(all(not(dox), target_os = \"l4re\"))]      pub use os::linux as platform;\n \n pub use self::rand::hashmap_random_keys;\n+pub use libc::strlen;\n \n #[macro_use]\n pub mod weak;"}, {"sha": "9da33f5adac140a6db751515978e10a7dbdde9b8", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -87,7 +87,7 @@ impl Thread {\n         };\n \n         extern fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {\n-            unsafe { start_thread(main); }\n+            unsafe { start_thread(main as *mut u8); }\n             ptr::null_mut()\n         }\n     }"}, {"sha": "176891fff23f8fbcd3fb2d8f3234a3159dca921b", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -95,8 +95,8 @@ pub fn unwind_backtrace(frames: &mut [Frame])\n                frame.AddrReturn.Offset == 0 { break }\n \n             frames[i] = Frame {\n-                symbol_addr: (addr - 1) as *const c_void,\n-                exact_position: (addr - 1) as *const c_void,\n+                symbol_addr: (addr - 1) as *const u8,\n+                exact_position: (addr - 1) as *const u8,\n             };\n             i += 1;\n         }"}, {"sha": "5a49b77af8e75a39c92d7b27a99e02d122c94cbd", "filename": "src/libstd/sys/windows/backtrace/printing/msvc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fprinting%2Fmsvc.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -10,7 +10,7 @@\n \n use ffi::CStr;\n use io;\n-use libc::{c_ulong, c_int, c_char};\n+use libc::{c_ulong, c_char};\n use mem;\n use sys::c;\n use sys::backtrace::BacktraceContext;\n@@ -59,7 +59,7 @@ pub fn foreach_symbol_fileline<F>(frame: Frame,\n                                   mut f: F,\n                                   context: &BacktraceContext)\n     -> io::Result<bool>\n-    where F: FnMut(&[u8], c_int) -> io::Result<()>\n+    where F: FnMut(&[u8], u32) -> io::Result<()>\n {\n     let SymGetLineFromAddr64 = sym!(&context.dbghelp,\n                                     \"SymGetLineFromAddr64\",\n@@ -76,7 +76,7 @@ pub fn foreach_symbol_fileline<F>(frame: Frame,\n                                        &mut line);\n         if ret == c::TRUE {\n             let name = CStr::from_ptr(line.Filename).to_bytes();\n-            f(name, line.LineNumber as c_int)?;\n+            f(name, line.LineNumber as u32)?;\n         }\n         Ok(false)\n     }"}, {"sha": "0d12ecf8fe3a1e12024088e54e202da0c2c8bd41", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -17,6 +17,7 @@ use os::windows::ffi::{OsStrExt, OsStringExt};\n use path::PathBuf;\n use time::Duration;\n \n+pub use libc::strlen;\n pub use self::rand::hashmap_random_keys;\n \n #[macro_use] pub mod compat;"}, {"sha": "74786d092855f091d8b51e9d837d2040d72d1a29", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -52,7 +52,7 @@ impl Thread {\n         };\n \n         extern \"system\" fn thread_start(main: *mut c_void) -> c::DWORD {\n-            unsafe { start_thread(main); }\n+            unsafe { start_thread(main as *mut u8); }\n             0\n         }\n     }"}, {"sha": "9f0214f5f0510c8cc44280305c06755166cac6a0", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -14,7 +14,6 @@\n use env;\n use io::prelude::*;\n use io;\n-use libc;\n use str;\n use sync::atomic::{self, Ordering};\n use path::{self, Path};\n@@ -39,9 +38,9 @@ pub const HEX_WIDTH: usize = 10;\n #[derive(Debug, Copy, Clone)]\n pub struct Frame {\n     /// Exact address of the call that failed.\n-    pub exact_position: *const libc::c_void,\n+    pub exact_position: *const u8,\n     /// Address of the enclosing function.\n-    pub symbol_addr: *const libc::c_void,\n+    pub symbol_addr: *const u8,\n }\n \n /// Max number of frames to print.\n@@ -201,8 +200,10 @@ fn output(w: &mut Write, idx: usize, frame: Frame,\n ///\n /// See also `output`.\n #[allow(dead_code)]\n-fn output_fileline(w: &mut Write, file: &[u8], line: libc::c_int,\n-                       format: PrintFormat) -> io::Result<()> {\n+fn output_fileline(w: &mut Write,\n+                   file: &[u8],\n+                   line: u32,\n+                   format: PrintFormat) -> io::Result<()> {\n     // prior line: \"  ##: {:2$} - func\"\n     w.write_all(b\"\")?;\n     match format {"}, {"sha": "75c6bd5d2a2ba46e73bc213f07f2783f8352fd1c", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -20,13 +20,13 @@ use sys_common::backtrace::Frame;\n pub fn foreach_symbol_fileline<F>(frame: Frame,\n                                   mut f: F,\n                                   _: &BacktraceContext) -> io::Result<bool>\n-where F: FnMut(&[u8], libc::c_int) -> io::Result<()>\n+where F: FnMut(&[u8], u32) -> io::Result<()>\n {\n     // pcinfo may return an arbitrary number of file:line pairs,\n     // in the order of stack trace (i.e. inlined calls first).\n     // in order to avoid allocation, we stack-allocate a fixed size of entries.\n     const FILELINE_SIZE: usize = 32;\n-    let mut fileline_buf = [(ptr::null(), -1); FILELINE_SIZE];\n+    let mut fileline_buf = [(ptr::null(), !0); FILELINE_SIZE];\n     let ret;\n     let fileline_count = {\n         let state = unsafe { init_state() };\n@@ -136,7 +136,7 @@ extern {\n // helper callbacks\n ////////////////////////////////////////////////////////////////////////\n \n-type FileLine = (*const libc::c_char, libc::c_int);\n+type FileLine = (*const libc::c_char, u32);\n \n extern fn error_cb(_data: *mut libc::c_void, _msg: *const libc::c_char,\n                    _errnum: libc::c_int) {\n@@ -162,7 +162,7 @@ extern fn pcinfo_cb(data: *mut libc::c_void,\n         // if the buffer is not full, add file:line to the buffer\n         // and adjust the buffer for next possible calls to pcinfo_cb.\n         if !buffer.is_empty() {\n-            buffer[0] = (filename, lineno);\n+            buffer[0] = (filename, lineno as u32);\n             unsafe { ptr::write(slot, &mut buffer[1..]); }\n         }\n     }"}, {"sha": "c19424f295226cf7e075c6e15da232a39fd1eb23", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=5c3fe111d4a6e72f0461320f5166bcd6aaf2f37f", "patch": "@@ -10,12 +10,11 @@\n \n use env;\n use alloc::boxed::FnBox;\n-use libc;\n use sync::atomic::{self, Ordering};\n use sys::stack_overflow;\n use sys::thread as imp;\n \n-pub unsafe fn start_thread(main: *mut libc::c_void) {\n+pub unsafe fn start_thread(main: *mut u8) {\n     // Next, set up our stack overflow handler which may get triggered if we run\n     // out of stack.\n     let _handler = stack_overflow::Handler::new();"}]}