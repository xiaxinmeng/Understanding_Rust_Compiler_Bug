{"sha": "ae44a1a172a8ec1b358a174b5a306b2b017cf133", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNDRhMWExNzJhOGVjMWIzNThhMTc0YjVhMzA2YjJiMDE3Y2YxMzM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-24T12:10:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-24T12:10:53Z"}, "message": "Add support for metadata loading", "tree": {"sha": "bf6ecfd9fade9533d5aaa4ded2e4b6d3c14c5ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf6ecfd9fade9533d5aaa4ded2e4b6d3c14c5ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae44a1a172a8ec1b358a174b5a306b2b017cf133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae44a1a172a8ec1b358a174b5a306b2b017cf133", "html_url": "https://github.com/rust-lang/rust/commit/ae44a1a172a8ec1b358a174b5a306b2b017cf133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae44a1a172a8ec1b358a174b5a306b2b017cf133/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb077f67ac23cd546ab6c1c1be48bbc819d41617", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb077f67ac23cd546ab6c1c1be48bbc819d41617", "html_url": "https://github.com/rust-lang/rust/commit/eb077f67ac23cd546ab6c1c1be48bbc819d41617"}], "stats": {"total": 251, "additions": 163, "deletions": 88}, "files": [{"sha": "b20a0c7ec2cc8e074f1b8bd25c90343902bac804", "filename": "Cargo.lock", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae44a1a172a8ec1b358a174b5a306b2b017cf133/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ae44a1a172a8ec1b358a174b5a306b2b017cf133/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ae44a1a172a8ec1b358a174b5a306b2b017cf133", "patch": "@@ -14,6 +14,14 @@ dependencies = [\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ar\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"atty\"\n version = \"0.2.10\"\n@@ -55,6 +63,11 @@ name = \"bitflags\"\n version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"byteorder\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"cc\"\n version = \"1.0.18\"\n@@ -391,10 +404,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n dependencies = [\n+ \"ar 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cranelift 0.16.1\",\n  \"cranelift-faerie 0.16.1\",\n  \"cranelift-module 0.16.1\",\n  \"cranelift-simplejit 0.16.1\",\n+ \"faerie 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -618,11 +633,13 @@ dependencies = [\n [metadata]\n \"checksum aho-corasick 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1c6d463cbe7ed28720b5b489e7c083eeb8f90d08be2a0d6bb9e1ffea9ce1afa\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n+\"checksum ar 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"095515608290b62ac2427084f9ac3cfeb5dc76067f7d94564db9db1c46cc0a85\"\n \"checksum atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fc4a1aa4c24c0718a250f0681885c1af91419d242f29eb8f2ab28502d80dbd1\"\n \"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n \"checksum backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bff67d0c06556c0b8e6b5f090f0eac52d950d9dfd1d35ba04e4ca3543eaf6a7e\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0c54bb8f454c567f21197eefcdbf5679d0bd99f2ddbe52e84c77061952e6789\"\n+\"checksum byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74c0b906e9446b0a2e4f760cdb3fa4b2c48cdc6db8766a845c54b6ff063fd2e9\"\n \"checksum cc 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2119ea4867bd2b8ed3aecab467709720b2d55b1bcfe09f772fd68066eaf15275\"\n \"checksum cfg-if 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efe5c877e17a9c717a0bf3613b2709f723202c4e4675cc8f12926ded29bcb17e\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\""}, {"sha": "dc4f2d93fafc48cf088ce416b720b085fe8f291f", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae44a1a172a8ec1b358a174b5a306b2b017cf133/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ae44a1a172a8ec1b358a174b5a306b2b017cf133/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=ae44a1a172a8ec1b358a174b5a306b2b017cf133", "patch": "@@ -17,3 +17,6 @@ cranelift-module = { path = \"./cranelift/lib/module\" }\n cranelift-simplejit = { path = \"./cranelift/lib/simplejit\" }\n cranelift-faerie = { path = \"./cranelift/lib/faerie\" }\n target-lexicon = \"0.0.3\"\n+#goblin = \"0.0.17\"\n+faerie = \"0.4.4\"\n+ar = \"0.6.0\""}, {"sha": "85c673d1377c4b3f93a28b174a858bb8f1e66610", "filename": "build.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae44a1a172a8ec1b358a174b5a306b2b017cf133/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ae44a1a172a8ec1b358a174b5a306b2b017cf133/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=ae44a1a172a8ec1b358a174b5a306b2b017cf133", "patch": "@@ -1,4 +1,5 @@\n cargo build || exit 1\n \n-rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so example.rs --crate-type lib -Og\n+rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so mini_core.rs --crate-name mini_core --crate-type lib -Og &&\n+rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so -L crate=. example.rs --crate-type lib -Og &&\n rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.so ./target/libcore/src/libcore/lib.rs --crate-type lib -Og"}, {"sha": "0df10254f760b6b41663baa5286990486c315b5f", "filename": "example.rs", "status": "modified", "additions": 3, "deletions": 72, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ae44a1a172a8ec1b358a174b5a306b2b017cf133/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae44a1a172a8ec1b358a174b5a306b2b017cf133/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=ae44a1a172a8ec1b358a174b5a306b2b017cf133", "patch": "@@ -1,79 +1,10 @@\n-#![feature(no_core, lang_items, intrinsics)]\n+#![feature(no_core)]\n #![no_core]\n #![allow(dead_code)]\n \n-#[lang=\"sized\"]\n-pub trait Sized {}\n+extern crate mini_core;\n \n-#[lang=\"copy\"]\n-unsafe trait Copy {}\n-\n-unsafe impl Copy for u8 {}\n-unsafe impl Copy for u16 {}\n-unsafe impl Copy for u32 {}\n-unsafe impl Copy for u64 {}\n-unsafe impl Copy for usize {}\n-unsafe impl Copy for i8 {}\n-unsafe impl Copy for i16 {}\n-unsafe impl Copy for i32 {}\n-unsafe impl Copy for isize {}\n-unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n-unsafe impl<T: ?Sized> Copy for *const T {}\n-\n-#[lang=\"freeze\"]\n-trait Freeze {}\n-\n-#[lang=\"mul\"]\n-trait Mul<RHS = Self> {\n-    type Output;\n-\n-    #[must_use]\n-    fn mul(self, rhs: RHS) -> Self::Output;\n-}\n-\n-impl Mul for u8 {\n-    type Output = Self;\n-\n-    fn mul(self, rhs: Self) -> Self {\n-        self * rhs\n-    }\n-}\n-\n-#[lang = \"eq\"]\n-pub trait PartialEq<Rhs: ?Sized = Self> {\n-    fn eq(&self, other: &Rhs) -> bool;\n-    fn ne(&self, other: &Rhs) -> bool;\n-}\n-\n-impl PartialEq for u8 {\n-    fn eq(&self, other: &u8) -> bool { (*self) == (*other) }\n-    fn ne(&self, other: &u8) -> bool { (*self) != (*other) }\n-}\n-\n-impl<T: ?Sized> PartialEq for *const T {\n-    fn eq(&self, other: &*const T) -> bool { *self == *other }\n-    fn ne(&self, other: &*const T) -> bool { *self != *other }\n-}\n-\n-#[lang=\"panic\"]\n-fn panic(_expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n-    loop {}\n-}\n-\n-#[lang = \"drop_in_place\"]\n-#[allow(unconditional_recursion)]\n-unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-    // Code here does not matter - this is replaced by the\n-    // real drop glue by the compiler.\n-    drop_in_place(to_drop);\n-}\n-\n-mod intrinsics {\n-    extern \"rust-intrinsic\" {\n-        pub fn size_of<T>() -> usize;\n-        pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n-    }\n-}\n+use mini_core::*;\n \n fn abc(a: u8) -> u8 {\n     a * 2"}, {"sha": "efd0b8818b123e5c7576917ae6648daf16555cba", "filename": "mini_core.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ae44a1a172a8ec1b358a174b5a306b2b017cf133/mini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae44a1a172a8ec1b358a174b5a306b2b017cf133/mini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini_core.rs?ref=ae44a1a172a8ec1b358a174b5a306b2b017cf133", "patch": "@@ -0,0 +1,76 @@\n+#![feature(no_core, lang_items, intrinsics)]\n+#![no_core]\n+#![allow(dead_code)]\n+\n+#[lang=\"sized\"]\n+pub trait Sized {}\n+\n+#[lang=\"copy\"]\n+pub unsafe trait Copy {}\n+\n+unsafe impl Copy for u8 {}\n+unsafe impl Copy for u16 {}\n+unsafe impl Copy for u32 {}\n+unsafe impl Copy for u64 {}\n+unsafe impl Copy for usize {}\n+unsafe impl Copy for i8 {}\n+unsafe impl Copy for i16 {}\n+unsafe impl Copy for i32 {}\n+unsafe impl Copy for isize {}\n+unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n+unsafe impl<T: ?Sized> Copy for *const T {}\n+\n+#[lang=\"freeze\"]\n+trait Freeze {}\n+\n+#[lang=\"mul\"]\n+pub trait Mul<RHS = Self> {\n+    type Output;\n+\n+    #[must_use]\n+    fn mul(self, rhs: RHS) -> Self::Output;\n+}\n+\n+impl Mul for u8 {\n+    type Output = Self;\n+\n+    fn mul(self, rhs: Self) -> Self {\n+        self * rhs\n+    }\n+}\n+\n+#[lang = \"eq\"]\n+pub trait PartialEq<Rhs: ?Sized = Self> {\n+    fn eq(&self, other: &Rhs) -> bool;\n+    fn ne(&self, other: &Rhs) -> bool;\n+}\n+\n+impl PartialEq for u8 {\n+    fn eq(&self, other: &u8) -> bool { (*self) == (*other) }\n+    fn ne(&self, other: &u8) -> bool { (*self) != (*other) }\n+}\n+\n+impl<T: ?Sized> PartialEq for *const T {\n+    fn eq(&self, other: &*const T) -> bool { *self == *other }\n+    fn ne(&self, other: &*const T) -> bool { *self != *other }\n+}\n+\n+#[lang=\"panic\"]\n+pub fn panic(_expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"drop_in_place\"]\n+#[allow(unconditional_recursion)]\n+pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+    // Code here does not matter - this is replaced by the\n+    // real drop glue by the compiler.\n+    drop_in_place(to_drop);\n+}\n+\n+pub mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn size_of<T>() -> usize;\n+        pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+}"}, {"sha": "53abaca552e3c2808f88f008811e1192f9225b40", "filename": "src/lib.rs", "status": "modified", "additions": 62, "deletions": 15, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ae44a1a172a8ec1b358a174b5a306b2b017cf133/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae44a1a172a8ec1b358a174b5a306b2b017cf133/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ae44a1a172a8ec1b358a174b5a306b2b017cf133", "patch": "@@ -8,8 +8,12 @@ extern crate rustc_mir;\n extern crate rustc_codegen_utils;\n extern crate rustc_target;\n extern crate rustc_incremental;\n+#[macro_use]\n extern crate rustc_data_structures;\n \n+extern crate ar;\n+extern crate faerie;\n+//extern crate goblin;\n extern crate target_lexicon;\n extern crate cranelift;\n extern crate cranelift_module;\n@@ -20,7 +24,6 @@ use std::any::Any;\n use std::sync::{mpsc, Arc};\n use std::path::Path;\n use std::fs::File;\n-use std::io::Write;\n \n use syntax::symbol::Symbol;\n use rustc::session::{\n@@ -35,7 +38,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::ty::query::Providers;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::{out_filename, build_link_meta};\n-use rustc_data_structures::owning_ref;\n+use rustc_data_structures::owning_ref::{self, OwningRef};\n \n use cranelift::codegen::settings;\n use cranelift_faerie::*;\n@@ -91,19 +94,53 @@ pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n struct CraneliftMetadataLoader;\n \n impl MetadataLoader for CraneliftMetadataLoader {\n-    fn get_rlib_metadata(&self, target: &rustc_target::spec::Target, path: &Path) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n-        self.get_dylib_metadata(target, path)\n+    fn get_rlib_metadata(&self, _target: &rustc_target::spec::Target, path: &Path) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n+        let mut archive = ar::Archive::new(File::open(path).map_err(|e|format!(\"{:?}\", e))?);\n+        // Iterate over all entries in the archive:\n+        while let Some(entry_result) = archive.next_entry() {\n+            let mut entry = entry_result.map_err(|e|format!(\"{:?}\", e))?;\n+            if entry.header().identifier() == b\".rustc.clif_metadata\" {\n+                let mut buf = Vec::new();\n+                ::std::io::copy(&mut entry, &mut buf).map_err(|e|format!(\"{:?}\", e))?;\n+                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n+            }\n+        }\n+\n+        Err(\"couldn't find metadata entry\".to_string())\n+        //self.get_dylib_metadata(target, path)\n     }\n \n     fn get_dylib_metadata(&self, _target: &rustc_target::spec::Target, _path: &Path) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n-        Err(\"metadata loading is not yet supported\".to_string())\n+        //use goblin::Object;\n+\n+        //let buffer = ::std::fs::read(path).map_err(|e|format!(\"{:?}\", e))?;\n+        /*match Object::parse(&buffer).map_err(|e|format!(\"{:?}\", e))? {\n+            Object::Elf(elf) => {\n+                println!(\"elf: {:#?}\", &elf);\n+            },\n+            Object::PE(pe) => {\n+                println!(\"pe: {:#?}\", &pe);\n+            },\n+            Object::Mach(mach) => {\n+                println!(\"mach: {:#?}\", &mach);\n+            },\n+            Object::Archive(archive) => {\n+                return Err(format!(\"archive: {:#?}\", &archive));\n+            },\n+            Object::Unknown(magic) => {\n+                return Err(format!(\"unknown magic: {:#x}\", magic))\n+            }\n+        }*/\n+        Err(\"dylib metadata loading is not yet supported\".to_string())\n     }\n }\n \n struct CraneliftCodegenBackend;\n \n struct OngoingCodegen {\n-    translated_module: Module<cranelift_faerie::FaerieBackend>,\n+    product: cranelift_faerie::FaerieProduct,\n+    metadata: Vec<u8>,\n     crate_name: Symbol,\n }\n \n@@ -231,7 +268,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             module.finish();\n         }\n \n-        let mut translated_module = Module::new(\n+        let mut translated_module: Module<FaerieBackend> = Module::new(\n             FaerieBuilder::new(\n                 isa,\n                 \"some_file.o\".to_string(),\n@@ -241,13 +278,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 .unwrap()\n         );\n \n-        let metadata_id = translated_module.declare_data(\".rustc.metadata\", Linkage::Export, false).unwrap();\n-        let mut data_ctx = DataContext::new();\n-        data_ctx.define(metadata.raw_data.clone().into_boxed_slice(), Writability::Readonly);\n-        translated_module.define_data(metadata_id, &data_ctx).unwrap();\n-\n         Box::new(::OngoingCodegen {\n-            translated_module,\n+            product: translated_module.finish(),\n+            metadata: metadata.raw_data,\n             crate_name: tcx.crate_name(LOCAL_CRATE),\n         })\n     }\n@@ -261,15 +294,29 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     ) -> Result<(), CompileIncomplete> {\n         let ongoing_codegen = *ongoing_codegen.downcast::<OngoingCodegen>()\n             .expect(\"Expected CraneliftCodegenBackend's OngoingCodegen, found Box<Any>\");\n-        let artifact = ongoing_codegen.translated_module.finish().artifact;\n+\n+        let mut artifact = ongoing_codegen.product.artifact;\n+        let metadata = ongoing_codegen.metadata;\n+\n+        artifact.declare_with(\n+            \".rustc.clif_metadata\",\n+            faerie::artifact::Decl::Data {\n+                global: true,\n+                writeable: false\n+            },\n+            metadata.clone(),\n+        ).unwrap();\n+\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::CrateTypeRlib /*&& crate_type != CrateType::CrateTypeDylib*/ {\n                 sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type));\n             }\n             let output_name =\n                 out_filename(sess, crate_type, &outputs, &ongoing_codegen.crate_name.as_str());\n             let file = File::create(&output_name).unwrap();\n-            artifact.write(file).unwrap();\n+            let mut builder = ar::Builder::new(file);\n+            builder.append(&ar::Header::new(b\".rustc.clif_metadata\".to_vec(), metadata.len() as u64), ::std::io::Cursor::new(metadata.clone())).unwrap();\n+            //artifact.write(file).unwrap();\n         }\n \n         sess.abort_if_errors();"}]}