{"sha": "3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNzM0YWM2ZWY4MzhiMjAxZDljZWI4OTA3YmFiMmYwZWVmNmM2Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-11T18:57:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-11T18:57:28Z"}, "message": "Auto merge of #1475 - RalfJung:dangcast, r=RalfJung\n\ntest casting a dangling ptr back from an int", "tree": {"sha": "88f9a815fbe69050439ec6ec602456ee1e4a21ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f9a815fbe69050439ec6ec602456ee1e4a21ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9", "html_url": "https://github.com/rust-lang/rust/commit/3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eee22ffddab20f51e1866bcbe4c5a69a90bdd260", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee22ffddab20f51e1866bcbe4c5a69a90bdd260", "html_url": "https://github.com/rust-lang/rust/commit/eee22ffddab20f51e1866bcbe4c5a69a90bdd260"}, {"sha": "f68bba9906c85a508531daaa1f64da723185b6c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68bba9906c85a508531daaa1f64da723185b6c4", "html_url": "https://github.com/rust-lang/rust/commit/f68bba9906c85a508531daaa1f64da723185b6c4"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "6e72d30d412357fb51ba8367fd124a72cbd8bdc5", "filename": "tests/run-pass/intptrcast.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9/tests%2Frun-pass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9/tests%2Frun-pass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast.rs?ref=3e734ac6ef838b201d9ceb8907bab2f0eef6c6c9", "patch": "@@ -12,6 +12,20 @@ fn cast() {\n     assert_eq!(z, y % 256);\n }\n \n+/// Test usize->ptr cast for dangling and OOB address.\n+/// That is safe, and thus has to work.\n+fn cast_dangling() {\n+    let b = Box::new(0);\n+    let x = &*b as *const i32 as usize;\n+    drop(b);\n+    let _val = x as *const i32;\n+\n+    let b = Box::new(0);\n+    let mut x = &*b as *const i32 as usize;\n+    x += 0x100;\n+    let _val = x as *const i32;\n+}\n+\n fn format() {\n     // Pointer string formatting! We can't check the output as it changes when libstd changes,\n     // but we can make sure Miri does not error.\n@@ -47,8 +61,7 @@ fn ptr_eq_dangling() {\n     drop(b);\n     let b = Box::new(0);\n     let y = &*b as *const i32; // different allocation\n-    // We cannot compare these even though both are inbounds -- they *could* be\n-    // equal if memory was reused.\n+    // They *could* be equal if memory was reused, but probably are not.\n     assert!(x != y);\n }\n \n@@ -57,27 +70,27 @@ fn ptr_eq_out_of_bounds() {\n     let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n     let b = Box::new(0);\n     let y = &*b as *const i32; // different allocation\n-    // We cannot compare these even though both allocations are live -- they *could* be\n-    // equal (with the right base addresses).\n+    // They *could* be equal (with the right base addresses), but probably are not.\n     assert!(x != y);\n }\n \n fn ptr_eq_out_of_bounds_null() {\n     let b = Box::new(0);\n     let x = (&*b as *const i32).wrapping_sub(0x800); // out-of-bounds\n-    // We cannot compare this with NULL. After all, this *could* be NULL (with the right base address).\n+    // This *could* be NULL (with the right base address), but probably is not.\n     assert!(x != std::ptr::null());\n }\n \n fn ptr_eq_integer() {\n     let b = Box::new(0);\n     let x = &*b as *const i32;\n-    // We cannot compare this with a non-NULL integer. After all, these *could* be equal (with the right base address).\n+    // These *could* be equal (with the right base address), but probably are not.\n     assert!(x != 64 as *const i32);\n }\n \n fn main() {\n     cast();\n+    cast_dangling();\n     format();\n     transmute();\n     ptr_bitops1();"}]}