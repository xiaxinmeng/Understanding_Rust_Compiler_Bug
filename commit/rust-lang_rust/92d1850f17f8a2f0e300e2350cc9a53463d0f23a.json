{"sha": "92d1850f17f8a2f0e300e2350cc9a53463d0f23a", "node_id": "C_kwDOAAsO6NoAKDkyZDE4NTBmMTdmOGEyZjBlMzAwZTIzNTBjYzlhNTM0NjNkMGYyM2E", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-01T20:15:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-06T21:25:50Z"}, "message": "Introduce `ConstAllocation`.\n\nCurrently some `Allocation`s are interned, some are not, and it's very\nhard to tell at a use point which is which.\n\nThis commit introduces `ConstAllocation` for the known-interned ones,\nwhich makes the division much clearer. `ConstAllocation::inner()` is\nused to get the underlying `Allocation`.\n\nIn some places it's natural to use an `Allocation`, in some it's natural\nto use a `ConstAllocation`, and in some places there's no clear choice.\nI've tried to make things look as nice as possible, while generally\nfavouring `ConstAllocation`, which is the type that embodies more\ninformation. This does require quite a few calls to `inner()`.\n\nThe commit also tweaks how `PartialOrd` works for `Interned`. The\nprevious code was too clever by half, building on `T: Ord` to make the\ncode shorter. That caused problems with deriving `PartialOrd` and `Ord`\nfor `ConstAllocation`, so I changed it to build on `T: PartialOrd`,\nwhich is slightly more verbose but much more standard and avoided the\nproblems.", "tree": {"sha": "4a86249815f23b1b3463da8531048c2bc4eee021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a86249815f23b1b3463da8531048c2bc4eee021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92d1850f17f8a2f0e300e2350cc9a53463d0f23a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92d1850f17f8a2f0e300e2350cc9a53463d0f23a", "html_url": "https://github.com/rust-lang/rust/commit/92d1850f17f8a2f0e300e2350cc9a53463d0f23a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92d1850f17f8a2f0e300e2350cc9a53463d0f23a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8238b914028fddeeb89d2df84988c97dc89fccfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8238b914028fddeeb89d2df84988c97dc89fccfb", "html_url": "https://github.com/rust-lang/rust/commit/8238b914028fddeeb89d2df84988c97dc89fccfb"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "a80b8e5b76c7c365cbb63db1a00b657593edfed3", "filename": "src/common.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/92d1850f17f8a2f0e300e2350cc9a53463d0f23a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1850f17f8a2f0e300e2350cc9a53463d0f23a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=92d1850f17f8a2f0e300e2350cc9a53463d0f23a", "patch": "@@ -13,7 +13,7 @@ use rustc_codegen_ssa::traits::{\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::ScalarInt;\n use rustc_middle::ty::layout::{TyAndLayout, LayoutOf};\n-use rustc_middle::mir::interpret::{Allocation, GlobalAlloc, Scalar};\n+use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n use rustc_span::Symbol;\n use rustc_target::abi::{self, HasDataLayout, Pointer, Size};\n \n@@ -230,6 +230,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                     match self.tcx.global_alloc(alloc_id) {\n                         GlobalAlloc::Memory(alloc) => {\n                             let init = const_alloc_to_gcc(self, alloc);\n+                            let alloc = alloc.inner();\n                             let value =\n                                 match alloc.mutability {\n                                     Mutability::Mut => self.static_addr_of_mut(init, alloc.align, None),\n@@ -262,21 +263,21 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         }\n     }\n \n-    fn const_data_from_alloc(&self, alloc: &Allocation) -> Self::Value {\n+    fn const_data_from_alloc(&self, alloc: ConstAllocation<'tcx>) -> Self::Value {\n         const_alloc_to_gcc(self, alloc)\n     }\n \n-    fn from_const_alloc(&self, layout: TyAndLayout<'tcx>, alloc: &Allocation, offset: Size) -> PlaceRef<'tcx, RValue<'gcc>> {\n-        assert_eq!(alloc.align, layout.align.abi);\n+    fn from_const_alloc(&self, layout: TyAndLayout<'tcx>, alloc: ConstAllocation<'tcx>, offset: Size) -> PlaceRef<'tcx, RValue<'gcc>> {\n+        assert_eq!(alloc.inner().align, layout.align.abi);\n         let ty = self.type_ptr_to(layout.gcc_type(self, true));\n         let value =\n             if layout.size == Size::ZERO {\n-                let value = self.const_usize(alloc.align.bytes());\n+                let value = self.const_usize(alloc.inner().align.bytes());\n                 self.context.new_cast(None, value, ty)\n             }\n             else {\n                 let init = const_alloc_to_gcc(self, alloc);\n-                let base_addr = self.static_addr_of(init, alloc.align, None);\n+                let base_addr = self.static_addr_of(init, alloc.inner().align, None);\n \n                 let array = self.const_bitcast(base_addr, self.type_i8p());\n                 let value = self.context.new_array_access(None, array, self.const_usize(offset.bytes())).get_address(None);"}, {"sha": "d53b15159fa44d3d135a56e3fdcff90c576b7a53", "filename": "src/consts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92d1850f17f8a2f0e300e2350cc9a53463d0f23a/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1850f17f8a2f0e300e2350cc9a53463d0f23a/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=92d1850f17f8a2f0e300e2350cc9a53463d0f23a", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs}\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::mir::interpret::{self, Allocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n+use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n use rustc_span::Span;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRange};\n@@ -284,7 +284,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     }\n }\n \n-pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: &Allocation) -> RValue<'gcc> {\n+pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAllocation<'tcx>) -> RValue<'gcc> {\n+    let alloc = alloc.inner();\n     let mut llvals = Vec::with_capacity(alloc.relocations().len() + 1);\n     let dl = cx.data_layout();\n     let pointer_size = dl.pointer_size.bytes() as usize;\n@@ -338,7 +339,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: &Alloca\n     cx.const_struct(&llvals, true)\n }\n \n-pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id: DefId) -> Result<(RValue<'gcc>, &'tcx Allocation), ErrorHandled> {\n+pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id: DefId) -> Result<(RValue<'gcc>, ConstAllocation<'tcx>), ErrorHandled> {\n     let alloc = cx.tcx.eval_static_initializer(def_id)?;\n     Ok((const_alloc_to_gcc(cx, alloc), alloc))\n }"}]}