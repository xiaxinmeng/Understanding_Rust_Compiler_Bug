{"sha": "2aa36777f1da8383cd62be6f75ecdaed283b253d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYTM2Nzc3ZjFkYTgzODNjZDYyYmU2Zjc1ZWNkYWVkMjgzYjI1M2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-01-12T19:05:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-01-12T19:05:38Z"}, "message": "Figure out what tydescs we need to pass when translating parametric function calls", "tree": {"sha": "349e3b2095a0601a4da5404dcea4bdcc0704322d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/349e3b2095a0601a4da5404dcea4bdcc0704322d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2aa36777f1da8383cd62be6f75ecdaed283b253d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa36777f1da8383cd62be6f75ecdaed283b253d", "html_url": "https://github.com/rust-lang/rust/commit/2aa36777f1da8383cd62be6f75ecdaed283b253d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2aa36777f1da8383cd62be6f75ecdaed283b253d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c9e6caffadcfee9216ac289ae0b306fc2e55eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c9e6caffadcfee9216ac289ae0b306fc2e55eb", "html_url": "https://github.com/rust-lang/rust/commit/59c9e6caffadcfee9216ac289ae0b306fc2e55eb"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "09fa0a8d634323e102d5268b9f15a93873fa8902", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2aa36777f1da8383cd62be6f75ecdaed283b253d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa36777f1da8383cd62be6f75ecdaed283b253d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2aa36777f1da8383cd62be6f75ecdaed283b253d", "patch": "@@ -1772,8 +1772,8 @@ fn lval_val(@block_ctxt cx, ValueRef val) -> lval_result {\n             llobj=none[ValueRef]);\n }\n \n-fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n-    -> lval_result {\n+fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt,\n+        &ast.ann ann) -> lval_result {\n     alt (dopt) {\n         case (some[ast.def](?def)) {\n             alt (def) {\n@@ -1795,6 +1795,15 @@ fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n                 }\n                 case (ast.def_fn(?did)) {\n                     check (cx.fcx.ccx.fn_pairs.contains_key(did));\n+                    check (cx.fcx.ccx.item_ids.contains_key(did));\n+\n+                    auto fn_item = cx.fcx.ccx.items.get(did);\n+                    auto monoty = node_ann_type(cx.fcx.ccx, ann);\n+                    auto tys = ty.resolve_ty_params(fn_item, monoty);\n+\n+                    // TODO: build a closure with the type parameters that\n+                    // result\n+\n                     ret lval_val(cx, cx.fcx.ccx.fn_pairs.get(did));\n                 }\n                 case (ast.def_obj(?did)) {\n@@ -1897,8 +1906,8 @@ impure fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n \n impure fn trans_lval(@block_ctxt cx, @ast.expr e) -> lval_result {\n     alt (e.node) {\n-        case (ast.expr_name(?n, ?dopt, _)) {\n-            ret trans_name(cx, n, dopt);\n+        case (ast.expr_name(?n, ?dopt, ?ann)) {\n+            ret trans_name(cx, n, dopt, ann);\n         }\n         case (ast.expr_field(?base, ?ident, ?ann)) {\n             ret trans_field(cx, e.span, base, ident, ann);"}, {"sha": "ff54a0a1604be3f54f0ad874d264434caa68d9c4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2aa36777f1da8383cd62be6f75ecdaed283b253d/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2aa36777f1da8383cd62be6f75ecdaed283b253d/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=2aa36777f1da8383cd62be6f75ecdaed283b253d", "patch": "@@ -12,6 +12,7 @@ import front.ast;\n import front.ast.mutability;\n import util.common;\n import util.common.append;\n+import util.common.new_def_hash;\n import util.common.span;\n \n // Data types\n@@ -1194,3 +1195,46 @@ fn type_err_to_str(&ty.type_err err) -> str {\n     }\n }\n \n+// Type parameter resolution, used in translation\n+\n+fn resolve_ty_params(@ast.item item, @t monoty) -> vec[@t] {\n+    obj resolve_ty_params_handler(@hashmap[ast.def_id,@t] bindings) {\n+        fn resolve_local(ast.def_id id) -> @t { log \"resolve local\"; fail; }\n+        fn record_local(ast.def_id id, @t ty) { log \"record local\"; fail; }\n+        fn unify_expected_param(ast.def_id id, @t expected, @t actual)\n+                -> unify_result {\n+            bindings.insert(id, actual);\n+            ret ures_ok(actual);\n+        }\n+        fn unify_actual_param(ast.def_id id, @t expected, @t actual)\n+                -> unify_result {\n+            bindings.insert(id, expected);\n+            ret ures_ok(expected);\n+        }\n+    }\n+\n+    auto ty_params_and_polyty = item_ty(item);\n+\n+    auto bindings = @new_def_hash[@t]();\n+    auto handler = resolve_ty_params_handler(bindings);\n+\n+    auto unify_res = unify(ty_params_and_polyty._1, monoty, handler);\n+    alt (unify_res) {\n+        case (ures_ok(_))       { /* fall through */ }\n+        case (ures_err(_,?exp,?act))  {\n+            log \"resolve_ty_params mismatch: \" + ty_to_str(exp) + \" \" +\n+                ty_to_str(act);\n+            fail;\n+        }\n+    }\n+\n+    let vec[@t] result_tys = vec();\n+    auto ty_param_ids = ty_params_and_polyty._0;\n+    for (ast.def_id tp in ty_param_ids) {\n+        check (bindings.contains_key(tp));\n+        result_tys += vec(bindings.get(tp));\n+    }\n+\n+    ret result_tys;\n+}\n+"}]}