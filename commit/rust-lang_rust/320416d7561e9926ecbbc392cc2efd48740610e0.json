{"sha": "320416d7561e9926ecbbc392cc2efd48740610e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMDQxNmQ3NTYxZTk5MjZlY2JiYzM5MmNjMmVmZDQ4NzQwNjEwZTA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-13T15:55:51Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-18T03:20:22Z"}, "message": "Add TokenTextRange", "tree": {"sha": "f20bbcfca5e079582ecd6ea87b2b4972b34fe7f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f20bbcfca5e079582ecd6ea87b2b4972b34fe7f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/320416d7561e9926ecbbc392cc2efd48740610e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/320416d7561e9926ecbbc392cc2efd48740610e0", "html_url": "https://github.com/rust-lang/rust/commit/320416d7561e9926ecbbc392cc2efd48740610e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/320416d7561e9926ecbbc392cc2efd48740610e0/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59295854f892b0a8f42a6fbc80b04d1f1c695828", "url": "https://api.github.com/repos/rust-lang/rust/commits/59295854f892b0a8f42a6fbc80b04d1f1c695828", "html_url": "https://github.com/rust-lang/rust/commit/59295854f892b0a8f42a6fbc80b04d1f1c695828"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "720a29ea58d763c2addf42f3f0f27e9fbf446884", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/320416d7561e9926ecbbc392cc2efd48740610e0/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320416d7561e9926ecbbc392cc2efd48740610e0/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=320416d7561e9926ecbbc392cc2efd48740610e0", "patch": "@@ -227,7 +227,7 @@ impl ExpansionInfo {\n         let token_id = self.macro_arg.1.token_by_range(range)?;\n         let token_id = self.macro_def.0.map_id_down(token_id);\n \n-        let range = self.exp_map.range_by_token(token_id)?;\n+        let range = self.exp_map.range_by_token(token_id)?.range(token.value.kind())?;\n \n         let token = algo::find_covering_element(&self.expanded.value, range).into_token()?;\n \n@@ -248,7 +248,7 @@ impl ExpansionInfo {\n             }\n         };\n \n-        let range = token_map.range_by_token(token_id)?;\n+        let range = token_map.range_by_token(token_id)?.range(token.value.kind())?;\n         let token = algo::find_covering_element(&tt.value, range + tt.value.text_range().start())\n             .into_token()?;\n         Some((tt.with_value(token), origin))"}, {"sha": "44a51b7a5124a3b145a85a03a3cb7435c667f145", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/320416d7561e9926ecbbc392cc2efd48740610e0/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/320416d7561e9926ecbbc392cc2efd48740610e0/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=320416d7561e9926ecbbc392cc2efd48740610e0", "patch": "@@ -12,11 +12,30 @@ use tt::buffer::{Cursor, TokenBuffer};\n use crate::subtree_source::SubtreeTokenSource;\n use crate::ExpandError;\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub enum TokenTextRange {\n+    Token(TextRange),\n+    Delimiter(TextRange, TextRange),\n+}\n+\n+impl TokenTextRange {\n+    pub fn range(self, kind: SyntaxKind) -> Option<TextRange> {\n+        match self {\n+            TokenTextRange::Token(it) => Some(it),\n+            TokenTextRange::Delimiter(open, close) => match kind {\n+                T!['{'] | T!['('] | T!['['] => Some(open),\n+                T!['}'] | T![')'] | T![']'] => Some(close),\n+                _ => None,\n+            },\n+        }\n+    }\n+}\n+\n /// Maps `tt::TokenId` to the relative range of the original token.\n #[derive(Debug, PartialEq, Eq, Default)]\n pub struct TokenMap {\n     /// Maps `tt::TokenId` to the *relative* source range.\n-    entries: Vec<(tt::TokenId, TextRange)>,\n+    entries: Vec<(tt::TokenId, TokenTextRange)>,\n }\n \n /// Convert the syntax tree (what user has written) to a `TokenTree` (what macro\n@@ -72,26 +91,32 @@ pub fn token_tree_to_syntax_node(\n \n impl TokenMap {\n     pub fn token_by_range(&self, relative_range: TextRange) -> Option<tt::TokenId> {\n-        let &(token_id, _) = self.entries.iter().find(|(_, range)| *range == relative_range)?;\n+        let &(token_id, _) = self.entries.iter().find(|(_, range)| match range {\n+            TokenTextRange::Token(it) => *it == relative_range,\n+            TokenTextRange::Delimiter(open, close) => {\n+                *open == relative_range || *close == relative_range\n+            }\n+        })?;\n         Some(token_id)\n     }\n \n-    pub fn range_by_token(&self, token_id: tt::TokenId) -> Option<TextRange> {\n+    pub fn range_by_token(&self, token_id: tt::TokenId) -> Option<TokenTextRange> {\n         let &(_, range) = self.entries.iter().find(|(tid, _)| *tid == token_id)?;\n         Some(range)\n     }\n \n     fn insert(&mut self, token_id: tt::TokenId, relative_range: TextRange) {\n-        self.entries.push((token_id, relative_range));\n+        self.entries.push((token_id, TokenTextRange::Token(relative_range)));\n     }\n \n     fn insert_delim(\n         &mut self,\n-        _token_id: tt::TokenId,\n-        _open_relative_range: TextRange,\n-        _close_relative_range: TextRange,\n+        token_id: tt::TokenId,\n+        open_relative_range: TextRange,\n+        close_relative_range: TextRange,\n     ) {\n-        // FIXME: Add entries for delimiter\n+        self.entries\n+            .push((token_id, TokenTextRange::Delimiter(open_relative_range, close_relative_range)));\n     }\n }\n "}]}