{"sha": "44eb607d7665f09967403a1999d99f4559be1c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZWI2MDdkNzY2NWYwOTk2NzQwM2ExOTk5ZDk5ZjQ1NTliZTFjMjE=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-05-14T15:53:01Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-05-14T15:53:01Z"}, "message": "removes `AbiMethods`", "tree": {"sha": "980505b102ed756737dd382708c9c955a20cf1d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/980505b102ed756737dd382708c9c955a20cf1d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44eb607d7665f09967403a1999d99f4559be1c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44eb607d7665f09967403a1999d99f4559be1c21", "html_url": "https://github.com/rust-lang/rust/commit/44eb607d7665f09967403a1999d99f4559be1c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44eb607d7665f09967403a1999d99f4559be1c21/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b3c79d5c9ff805a03b478e77b44f9b48d848f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b3c79d5c9ff805a03b478e77b44f9b48d848f0", "html_url": "https://github.com/rust-lang/rust/commit/e1b3c79d5c9ff805a03b478e77b44f9b48d848f0"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "38d4b7e3f9d85504db9548447f19f8e294fec49f", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -12,8 +12,8 @@ use rustc_target::abi::call::ArgType;\n use rustc_codegen_ssa::traits::*;\n \n use rustc_target::abi::{HasDataLayout, LayoutOf};\n-use rustc::ty::{self, Ty, Instance};\n-use rustc::ty::layout::{self, FnTypeExt};\n+use rustc::ty::{Ty};\n+use rustc::ty::layout::{self};\n \n use libc::c_uint;\n \n@@ -471,22 +471,6 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n     }\n }\n \n-impl AbiMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n-    fn new_fn_type(&self, sig: ty::FnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> FnType<'tcx, Ty<'tcx>> {\n-        FnType::new(self, sig, extra_args)\n-    }\n-    fn new_vtable(\n-        &self,\n-        sig: ty::FnSig<'tcx>,\n-        extra_args: &[Ty<'tcx>]\n-    ) -> FnType<'tcx, Ty<'tcx>> {\n-        FnType::new_vtable(self, sig, extra_args)\n-    }\n-    fn fn_type_of_instance(&self, instance: &Instance<'tcx>) -> FnType<'tcx, Ty<'tcx>> {\n-        FnType::of_instance(self, instance)\n-    }\n-}\n-\n impl AbiBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn apply_attrs_callsite(\n         &mut self,"}, {"sha": "48808eea3045ea892382cf08046db9297eb4c466", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -18,6 +18,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::base::to_immediate;\n use rustc_codegen_ssa::mir::operand::{OperandValue, OperandRef};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n+use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ops::{Deref, Range};\n use std::ptr;\n@@ -72,6 +73,12 @@ impl ty::layout::HasParamEnv<'tcx> for Builder<'_, '_, 'tcx> {\n     }\n }\n \n+impl HasTargetSpec for Builder<'_, '_, 'tcx> {\n+    fn target_spec(&self) -> &Target {\n+        &self.cx.target_spec()\n+    }\n+}\n+\n impl ty::layout::LayoutOf for Builder<'_, '_, 'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyLayout = TyLayout<'tcx>;"}, {"sha": "bcb14b8899ec245bb728af3535bc91e0557bf1f8", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -100,7 +100,7 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let sig = self.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         debug!(\"declare_rust_fn (after region erasure) sig={:?}\", sig);\n \n-        let fty= FnType::new(self, sig, &[]);\n+        let fty = FnType::new(self, sig, &[]);\n         let llfn = declare_raw_fn(self, name, fty.llvm_cconv(), fty.llvm_type(self));\n \n         if self.layout_of(sig.output()).abi.is_uninhabited() {"}, {"sha": "96b8558c1d2c447f2b8149f6d71cf647f5696260", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -1,6 +1,6 @@\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n+use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n use rustc::mir::interpret::InterpError;\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n@@ -334,14 +334,14 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     ty::ParamEnv::reveal_all(),\n                     &sig,\n                 );\n-                let fn_ty = bx.new_vtable(sig, &[]);\n+                let fn_ty = FnType::new_vtable(&bx, sig, &[]);\n                 let vtable = args[1];\n                 args = &args[..1];\n                 (meth::DESTRUCTOR.get_fn(&mut bx, vtable, &fn_ty), fn_ty)\n             }\n             _ => {\n                 (bx.get_fn(drop_fn),\n-                 bx.fn_type_of_instance(&drop_fn))\n+                 FnType::of_instance(&bx, &drop_fn))\n             }\n         };\n         helper.do_call(self, &mut bx, fn_ty, drop_fn, args,\n@@ -439,7 +439,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // Obtain the panic entry point.\n         let def_id = common::langcall(bx.tcx(), Some(span), \"\", lang_item);\n         let instance = ty::Instance::mono(bx.tcx(), def_id);\n-        let fn_ty = bx.fn_type_of_instance(&instance);\n+        let fn_ty = FnType::of_instance(&bx, &instance);\n         let llfn = bx.get_fn(instance);\n \n         // Codegen the actual panic invoke/call.\n@@ -518,15 +518,15 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         let fn_ty = match def {\n             Some(ty::InstanceDef::Virtual(..)) => {\n-                bx.new_vtable(sig, &extra_args)\n+                FnType::new_vtable(&bx, sig, &extra_args)\n             }\n             Some(ty::InstanceDef::DropGlue(_, None)) => {\n                 // Empty drop glue; a no-op.\n                 let &(_, target) = destination.as_ref().unwrap();\n                 helper.funclet_br(self, &mut bx, target);\n                 return;\n             }\n-            _ => bx.new_fn_type(sig, &extra_args)\n+            _ => FnType::new(&bx, sig, &extra_args)\n         };\n \n         // Emit a panic or a no-op for `panic_if_uninhabited`.\n@@ -556,7 +556,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let def_id =\n                     common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let fn_ty = bx.fn_type_of_instance(&instance);\n+                let fn_ty = FnType::of_instance(&bx, &instance);\n                 let llfn = bx.get_fn(instance);\n \n                 // Codegen the actual panic invoke/call."}, {"sha": "060d7d18625fcd358323405f1570db82a632d9cc", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n-use rustc::ty::layout::{TyLayout, HasTyCtxt};\n+use rustc::ty::layout::{TyLayout, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Mir};\n use rustc::session::config::DebugInfo;\n use rustc_mir::monomorphize::Instance;\n@@ -202,7 +202,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n ) {\n     assert!(!instance.substs.needs_infer());\n \n-    let fn_ty = cx.new_fn_type(sig, &[]);\n+    let fn_ty = FnType::new(cx, sig, &[]);\n     debug!(\"fn_ty: {:?}\", fn_ty);\n     let mut debug_context =\n         cx.create_function_debug_context(instance, sig, llfn, mir);"}, {"sha": "509255c37be701853dd2f00e15406fa77c0d189e", "filename": "src/librustc_codegen_ssa/traits/abi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fabi.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -1,13 +1,7 @@\n use super::BackendTypes;\n-use rustc::ty::{FnSig, Instance, Ty};\n+use rustc::ty::{Ty};\n use rustc_target::abi::call::FnType;\n \n-pub trait AbiMethods<'tcx> {\n-    fn new_fn_type(&self, sig: FnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> FnType<'tcx, Ty<'tcx>>;\n-    fn new_vtable(&self, sig: FnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> FnType<'tcx, Ty<'tcx>>;\n-    fn fn_type_of_instance(&self, instance: &Instance<'tcx>) -> FnType<'tcx, Ty<'tcx>>;\n-}\n-\n pub trait AbiBuilderMethods<'tcx>: BackendTypes {\n     fn apply_attrs_callsite(&mut self, ty: &FnType<'tcx, Ty<'tcx>>, callsite: Self::Value);\n     fn get_param(&self, index: usize) -> Self::Value;"}, {"sha": "0c4c4547a7955a1f0ad3ffdd391ea11d678509b4", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -11,6 +11,7 @@ use crate::mir::place::PlaceRef;\n use crate::MemFlags;\n use rustc::ty::Ty;\n use rustc::ty::layout::{Align, Size, HasParamEnv};\n+use rustc_target::spec::{HasTargetSpec};\n use std::ops::Range;\n use std::iter::TrustedLen;\n \n@@ -30,6 +31,7 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     + AsmBuilderMethods<'tcx>\n     + StaticBuilderMethods<'tcx>\n     + HasParamEnv<'tcx>\n+    + HasTargetSpec\n \n {\n     fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Value, name: &'b str) -> Self;"}, {"sha": "2bb619e79f5e06ee0b0781c46463e0433d94ca41", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44eb607d7665f09967403a1999d99f4559be1c21/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=44eb607d7665f09967403a1999d99f4559be1c21", "patch": "@@ -27,7 +27,7 @@ mod statics;\n mod type_;\n mod write;\n \n-pub use self::abi::{AbiBuilderMethods, AbiMethods};\n+pub use self::abi::{AbiBuilderMethods};\n pub use self::asm::{AsmBuilderMethods, AsmMethods};\n pub use self::backend::{Backend, BackendTypes, ExtraBackendMethods};\n pub use self::builder::{BuilderMethods, OverflowOp};\n@@ -41,7 +41,8 @@ pub use self::type_::{\n     ArgTypeMethods, BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods, TypeMethods,\n };\n pub use self::write::{ModuleBufferMethods, ThinBufferMethods, WriteBackendMethods};\n-use rustc::ty::layout::{HasParamEnv};\n+use rustc::ty::layout::{HasParamEnv, HasTyCtxt};\n+use rustc_target::spec::{HasTargetSpec};\n \n \n use std::fmt;\n@@ -56,11 +57,12 @@ pub trait CodegenMethods<'tcx>:\n     + ConstMethods<'tcx>\n     + StaticMethods\n     + DebugInfoMethods<'tcx>\n-    + AbiMethods<'tcx>\n     + DeclareMethods<'tcx>\n     + AsmMethods<'tcx>\n     + PreDefineMethods<'tcx>\n     + HasParamEnv<'tcx>\n+    + HasTyCtxt<'tcx>\n+    + HasTargetSpec\n {\n }\n \n@@ -71,11 +73,12 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n         + ConstMethods<'tcx>\n         + StaticMethods\n         + DebugInfoMethods<'tcx>\n-        + AbiMethods<'tcx>\n         + DeclareMethods<'tcx>\n         + AsmMethods<'tcx>\n         + PreDefineMethods<'tcx>\n         + HasParamEnv<'tcx>\n+        + HasTyCtxt<'tcx>\n+        + HasTargetSpec\n {\n }\n "}]}