{"sha": "c86a5ccd2ee3165690386faad06ffdb4f4b59187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmE1Y2NkMmVlMzE2NTY5MDM4NmZhYWQwNmZmZGI0ZjRiNTkxODc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-22T12:24:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-22T13:05:48Z"}, "message": "Upgrade Rust to rustc 1.8.0-nightly (18b851bc5 2016-01-22)\n\nfixes #573", "tree": {"sha": "734b8229ee5080077d1af69b88b4d563ea92a66a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734b8229ee5080077d1af69b88b4d563ea92a66a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86a5ccd2ee3165690386faad06ffdb4f4b59187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86a5ccd2ee3165690386faad06ffdb4f4b59187", "html_url": "https://github.com/rust-lang/rust/commit/c86a5ccd2ee3165690386faad06ffdb4f4b59187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86a5ccd2ee3165690386faad06ffdb4f4b59187/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28b043735468936cc23b4cc7a4ce5ed3246524c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/28b043735468936cc23b4cc7a4ce5ed3246524c8", "html_url": "https://github.com/rust-lang/rust/commit/28b043735468936cc23b4cc7a4ce5ed3246524c8"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "36b95ebe30fba3763c44857e165376a20603806b", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.36\"\n+version = \"0.0.37\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\","}, {"sha": "6c6d277e25b78d6a0b6f25ec375dc2b360ddab0e", "filename": "src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::middle::const_eval::lookup_const_by_id;\n-use rustc::middle::def::*;\n+use rustc::middle::def::{Def, PathResolution};\n use rustc_front::hir::*;\n use rustc_front::util::is_comparison_binop;\n use syntax::codemap::Span;\n@@ -274,7 +274,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u64> {\n                 // borrowing.\n                 let def_map = cx.tcx.def_map.borrow();\n                 match def_map.get(&lit.id) {\n-                    Some(&PathResolution { base_def: DefConst(def_id), ..}) => Some(def_id),\n+                    Some(&PathResolution { base_def: Def::Const(def_id), ..}) => Some(def_id),\n                     _ => None,\n                 }\n             }"}, {"sha": "34f7e924de7feeb76a83504dc843036161076718", "filename": "src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -3,7 +3,7 @@\n use rustc::lint::LateContext;\n use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::PathResolution;\n-use rustc::middle::def::Def::*;\n+use rustc::middle::def::Def;\n use rustc_front::hir::*;\n use syntax::ptr::P;\n use std::char;\n@@ -481,7 +481,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     fn fetch_path(&mut self, e: &Expr) -> Option<Constant> {\n         if let Some(lcx) = self.lcx {\n             let mut maybe_id = None;\n-            if let Some(&PathResolution { base_def: DefConst(id), ..}) = lcx.tcx.def_map.borrow().get(&e.id) {\n+            if let Some(&PathResolution { base_def: Def::Const(id), ..}) = lcx.tcx.def_map.borrow().get(&e.id) {\n                 maybe_id = Some(id);\n             }\n             // separate if lets to avoid double borrowing the def_map"}, {"sha": "32dbbb992267d878ce3110c42a0c4e7fb8c05b4b", "filename": "src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n+use rustc::front::map::Node::NodeStmt;\n use rustc_front::hir::*;\n use rustc_front::intravisit as visit;\n-use rustc::front::map::Node;\n use rustc::middle::ty;\n use rustc::middle::ty::adjustment::AutoAdjustment;\n use rustc::middle::expr_use_visitor::*;\n@@ -91,7 +91,7 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             return;\n         }\n         if let Categorization::Rvalue(..) = cmt.cat {\n-            if let Some(Node::NodeStmt(st)) = self.cx\n+            if let Some(NodeStmt(st)) = self.cx\n                                                   .tcx\n                                                   .map\n                                                   .find(self.cx.tcx.map.get_parent_node(cmt.id)) {"}, {"sha": "b83ac390edf259ff3bf88dc6842155a38a36781c", "filename": "src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -3,7 +3,7 @@ use reexport::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n use rustc_front::intravisit::{Visitor, walk_ty, walk_ty_param_bound, walk_fn_decl, walk_generics};\n-use rustc::middle::def::Def::{DefTy, DefTrait, DefStruct};\n+use rustc::middle::def::Def;\n use std::collections::{HashSet, HashMap};\n \n use utils::{in_external_macro, span_lint};\n@@ -206,13 +206,13 @@ impl<'v, 't> RefVisitor<'v, 't> {\n             if params.lifetimes.is_empty() {\n                 if let Some(def) = self.cx.tcx.def_map.borrow().get(&ty.id).map(|r| r.full_def()) {\n                     match def {\n-                        DefTy(def_id, _) | DefStruct(def_id) => {\n+                        Def::TyAlias(def_id) | Def::Struct(def_id) => {\n                             let type_scheme = self.cx.tcx.lookup_item_type(def_id);\n                             for _ in type_scheme.generics.regions.as_slice() {\n                                 self.record(&None);\n                             }\n                         }\n-                        DefTrait(def_id) => {\n+                        Def::Trait(def_id) => {\n                             let trait_def = self.cx.tcx.trait_defs.borrow()[&def_id];\n                             for _ in &trait_def.generics.regions {\n                                 self.record(&None);"}, {"sha": "699e6e525dab4b1014701c594a608d5be1efb020", "filename": "src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -3,7 +3,7 @@ use rustc_front::hir::*;\n use reexport::*;\n use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use rustc::middle::ty;\n-use rustc::middle::def::DefLocal;\n+use rustc::middle::def::Def;\n use consts::{constant_simple, Constant};\n use rustc::front::map::Node::NodeBlock;\n use std::borrow::Cow;\n@@ -768,7 +768,7 @@ impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n \n fn var_def_id(cx: &LateContext, expr: &Expr) -> Option<NodeId> {\n     if let Some(path_res) = cx.tcx.def_map.borrow().get(&expr.id) {\n-        if let DefLocal(_, node_id) = path_res.base_def {\n+        if let Def::Local(_, node_id) = path_res.base_def {\n             return Some(node_id);\n         }\n     }"}, {"sha": "075b9b628005abff4e8eeb4650232ae2cf046634", "filename": "src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fno_effect.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::middle::def::{DefStruct, DefVariant};\n+use rustc::middle::def::Def;\n use rustc_front::hir::{Expr, ExprCall, ExprLit, ExprPath, ExprStruct};\n use rustc_front::hir::{Stmt, StmtSemi};\n \n@@ -36,8 +36,8 @@ fn has_no_effect(cx: &LateContext, expr: &Expr) -> bool {\n         ExprCall(ref callee, ref args) => {\n             let def = cx.tcx.def_map.borrow().get(&callee.id).map(|d| d.full_def());\n             match def {\n-                Some(DefStruct(..)) |\n-                Some(DefVariant(..)) => args.iter().all(|arg| has_no_effect(cx, arg)),\n+                Some(Def::Struct(..)) |\n+                Some(Def::Variant(..)) => args.iter().all(|arg| has_no_effect(cx, arg)),\n                 _ => false,\n             }\n         }"}, {"sha": "75ce96f63505da580332784e13884d05248c1d43", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -4,8 +4,8 @@\n \n use rustc::lint::*;\n use rustc_front::hir::*;\n+use rustc::front::map::NodeItem;\n use rustc::middle::ty;\n-use rustc::front::map::Node;\n \n use utils::{span_lint, match_type};\n use utils::{STRING_PATH, VEC_PATH};\n@@ -42,7 +42,7 @@ impl LateLintPass for PtrArg {\n \n     fn check_impl_item(&mut self, cx: &LateContext, item: &ImplItem) {\n         if let ImplItemKind::Method(ref sig, _) = item.node {\n-            if let Some(Node::NodeItem(it)) = cx.tcx.map.find(cx.tcx.map.get_parent(item.id)) {\n+            if let Some(NodeItem(it)) = cx.tcx.map.find(cx.tcx.map.get_parent(item.id)) {\n                 if let ItemImpl(_, _, _, Some(_), _, _) = it.node {\n                     return; // ignore trait impls\n                 }"}, {"sha": "1c445f42b559ddac6d82d62d2bfd074a605868ac", "filename": "src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -5,7 +5,7 @@ use syntax::codemap::Span;\n use rustc_front::intravisit::{Visitor, FnKind};\n \n use rustc::lint::*;\n-use rustc::middle::def::Def::{DefVariant, DefStruct};\n+use rustc::middle::def::Def;\n \n use utils::{is_from_for_desugar, in_external_macro, snippet, span_lint, span_note_and_lint, DiagnosticWrapper};\n \n@@ -103,7 +103,7 @@ fn check_decl(cx: &LateContext, decl: &Decl, bindings: &mut Vec<(Name, Span)>) {\n \n fn is_binding(cx: &LateContext, pat: &Pat) -> bool {\n     match cx.tcx.def_map.borrow().get(&pat.id).map(|d| d.full_def()) {\n-        Some(DefVariant(..)) | Some(DefStruct(..)) => false,\n+        Some(Def::Variant(..)) | Some(Def::Struct(..)) => false,\n         _ => true,\n     }\n }"}, {"sha": "323f0592d970536005394e178e7de9be615fdbe5", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a5ccd2ee3165690386faad06ffdb4f4b59187/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=c86a5ccd2ee3165690386faad06ffdb4f4b59187", "patch": "@@ -235,7 +235,7 @@ pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n     };\n \n     match def {\n-        cstore::DlDef(def::DefTrait(trait_id)) => Some(trait_id),\n+        cstore::DlDef(def::Def::Trait(trait_id)) => Some(trait_id),\n         _ => None,\n     }\n }"}]}