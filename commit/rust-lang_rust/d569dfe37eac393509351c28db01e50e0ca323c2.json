{"sha": "d569dfe37eac393509351c28db01e50e0ca323c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjlkZmUzN2VhYzM5MzUwOTM1MWMyOGRiMDFlNTBlMGNhMzIzYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-09T03:07:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-09T03:07:27Z"}, "message": "auto merge of #17871 : michaelwoerister/rust/lldb-versioning, r=alexcrichton\n\nApart from making the build system determine the LLDB version, this PR also fixes an issue with enums in LLDB pretty printers. In order for GDB's pretty printers to know for sure if a field of some value is an enum discriminant, I had rustc mark discriminant fields with the `artificial` DWARF tag. This worked out nicely for GDB but it turns out that one can't access artificial fields from LLDB. So I changed the debuginfo representation so that enum discriminants are marked by the special field name `RUST$ENUM$DISR` instead, which works in both cases.\r\n\r\nThe PR does not activate the LLDB test suite yet.", "tree": {"sha": "761cf6e3627b6053894ada01c0189eb25602a3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/761cf6e3627b6053894ada01c0189eb25602a3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d569dfe37eac393509351c28db01e50e0ca323c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d569dfe37eac393509351c28db01e50e0ca323c2", "html_url": "https://github.com/rust-lang/rust/commit/d569dfe37eac393509351c28db01e50e0ca323c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d569dfe37eac393509351c28db01e50e0ca323c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63fe80e1ffd036e99e1c707116774ac10203e2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/63fe80e1ffd036e99e1c707116774ac10203e2f1", "html_url": "https://github.com/rust-lang/rust/commit/63fe80e1ffd036e99e1c707116774ac10203e2f1"}, {"sha": "98a0f9166c38d9a761a840de15a668ea001c9e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a0f9166c38d9a761a840de15a668ea001c9e9c", "html_url": "https://github.com/rust-lang/rust/commit/98a0f9166c38d9a761a840de15a668ea001c9e9c"}], "stats": {"total": 200, "additions": 152, "deletions": 48}, "files": [{"sha": "aced2fd64dbb28106be16ad47bff25b64e1e47e6", "filename": "configure", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -535,13 +535,17 @@ probe CFG_LLDB             lldb\n \n if [ ! -z \"$CFG_GDB\" ]\n then\n-    # Extract the version\n+    # Store GDB's version\n     CFG_GDB_VERSION=$($CFG_GDB --version 2>/dev/null | head -1)\n     putvar CFG_GDB_VERSION\n fi\n \n if [ ! -z \"$CFG_LLDB\" ]\n then\n+    # Store LLDB's version\n+    CFG_LLDB_VERSION=$($CFG_LLDB --version 2>/dev/null | head -1)\n+    putvar CFG_LLDB_VERSION\n+\n     # If CFG_LLDB_PYTHON_DIR is not already set from the outside and valid, try to read it from\n     # LLDB via the -P commandline options.\n     if [ -z \"$CFG_LLDB_PYTHON_DIR\" ] || [ ! -d \"$CFG_LLDB_PYTHON_DIR\" ]"}, {"sha": "04be295c27136193aabae39594bf7b5ae67490b8", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -625,6 +625,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         --target $(2) \\\n         --host $(3) \\\n         --gdb-version=\"$(CFG_GDB_VERSION)\" \\\n+        --lldb-version=\"$(CFG_LLDB_VERSION)\" \\\n         --android-cross-path=$(CFG_ANDROID_CROSS_PATH) \\\n         --adb-path=$(CFG_ADB) \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR) \\"}, {"sha": "4c602b8e1a3a5ac2e49391c338d551c56cc8be2a", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -133,6 +133,9 @@ pub struct Config {\n     // Version of GDB\n     pub gdb_version: Option<String>,\n \n+    // Version of LLDB\n+    pub lldb_version: Option<String>,\n+\n     // Path to the android tools\n     pub android_cross_path: Path,\n "}, {"sha": "95bc79f1208ca843ea1505710e9ca1b64061a032", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -71,7 +71,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optflag(\"\", \"jit\", \"run tests under the JIT\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n-          optopt(\"\", \"gdb-version\", \"the version of GDB used\", \"MAJOR.MINOR\"),\n+          optopt(\"\", \"gdb-version\", \"the version of GDB used\", \"VERSION STRING\"),\n+          optopt(\"\", \"lldb-version\", \"the version of LLDB used\", \"VERSION STRING\"),\n           optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\"),\n           optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n           optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n@@ -149,6 +150,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         target: opt_str2(matches.opt_str(\"target\")),\n         host: opt_str2(matches.opt_str(\"host\")),\n         gdb_version: extract_gdb_version(matches.opt_str(\"gdb-version\")),\n+        lldb_version: extract_lldb_version(matches.opt_str(\"lldb-version\")),\n         android_cross_path: opt_path(matches, \"android-cross-path\"),\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n         adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")),\n@@ -391,3 +393,37 @@ fn extract_gdb_version(full_version_line: Option<String>) -> Option<String> {\n         _ => None\n     }\n }\n+\n+fn extract_lldb_version(full_version_line: Option<String>) -> Option<String> {\n+    // Extract the major LLDB version from the given version string.\n+    // LLDB version strings are different for Apple and non-Apple platforms.\n+    // At the moment, this function only supports the Apple variant, which looks\n+    // like this:\n+    //\n+    // LLDB-179.5 (older versions)\n+    // lldb-300.2.51 (new versions)\n+    //\n+    // We are only interested in the major version number, so this function\n+    // will return `Some(\"179\")` and `Some(\"300\")` respectively.\n+\n+    match full_version_line {\n+        Some(ref full_version_line)\n+          if full_version_line.as_slice().trim().len() > 0 => {\n+            let full_version_line = full_version_line.as_slice().trim();\n+\n+            let re = Regex::new(r\"[Ll][Ll][Dd][Bb]-([0-9]+)\").unwrap();\n+\n+            match re.captures(full_version_line) {\n+                Some(captures) => {\n+                    Some(captures.at(1).to_string())\n+                }\n+                None => {\n+                    println!(\"Could not extract LLDB version from line '{}'\",\n+                             full_version_line);\n+                    None\n+                }\n+            }\n+        },\n+        _ => None\n+    }\n+}"}, {"sha": "a9c984d8061df8f6d97feee053cfd47eeb3f3cee", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -181,14 +181,42 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n         }\n     }\n \n+    fn ignore_lldb(config: &Config, line: &str) -> bool {\n+        if config.mode != common::DebugInfoLldb {\n+            return false;\n+        }\n+\n+        if parse_name_directive(line, \"ignore-lldb\") {\n+            return true;\n+        }\n+\n+        match config.lldb_version {\n+            Some(ref actual_version) => {\n+                if line.contains(\"min-lldb-version\") {\n+                    let min_version = line.trim()\n+                                          .split(' ')\n+                                          .last()\n+                                          .expect(\"Malformed lldb version directive\");\n+                    // Ignore if actual version is smaller the minimum required\n+                    // version\n+                    lldb_version_to_int(actual_version.as_slice()) <\n+                        lldb_version_to_int(min_version.as_slice())\n+                } else {\n+                    false\n+                }\n+            }\n+            None => false\n+        }\n+    }\n+\n     let val = iter_header(testfile, |ln| {\n         !parse_name_directive(ln, \"ignore-test\") &&\n         !parse_name_directive(ln, ignore_target(config).as_slice()) &&\n         !parse_name_directive(ln, ignore_stage(config).as_slice()) &&\n         !(config.mode == common::Pretty && parse_name_directive(ln, \"ignore-pretty\")) &&\n         !(config.target != config.host && parse_name_directive(ln, \"ignore-cross-compile\")) &&\n         !ignore_gdb(config, ln) &&\n-        !(config.mode == common::DebugInfoLldb && parse_name_directive(ln, \"ignore-lldb\"))\n+        !ignore_lldb(config, ln)\n     });\n \n     !val\n@@ -330,3 +358,12 @@ pub fn gdb_version_to_int(version_string: &str) -> int {\n \n     return major * 1000 + minor;\n }\n+\n+pub fn lldb_version_to_int(version_string: &str) -> int {\n+    let error_string = format!(\n+        \"Encountered LLDB version string with unexpected format: {}\",\n+        version_string);\n+    let error_string = error_string.as_slice();\n+    let major: int = FromStr::from_str(version_string).expect(error_string);\n+    return major;\n+}"}, {"sha": "2b52ac65e4788b66621c544874e77371b34fc7fd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -626,6 +626,17 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n \n     let exe_file = make_exe_name(config, testfile);\n \n+    match config.lldb_version {\n+        Some(ref version) => {\n+            println!(\"NOTE: compiletest thinks it is using LLDB version {}\",\n+                     version.as_slice());\n+        }\n+        _ => {\n+            println!(\"NOTE: compiletest does not know which version of \\\n+                      LLDB it is using\");\n+        }\n+    }\n+\n     // Parse debugger commands etc from test files\n     let DebuggerCommands {\n         commands,"}, {"sha": "1af649f0731766c2c3db3612c5c204c16559569e", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -196,7 +196,7 @@ def classify_struct(type):\n   if field_count == 0:\n     return STRUCT_KIND_REGULAR_STRUCT\n \n-  if fields[0].artificial:\n+  if fields[0].name == \"RUST$ENUM$DISR\":\n     if field_count == 1:\n       return STRUCT_KIND_CSTYLE_VARIANT\n     elif fields[1].name == None:"}, {"sha": "ca895414635b6ae302186430a78bfa85698cd34d", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -117,11 +117,19 @@ def print_enum_val(val, internal_dict):\n \n   assert val.GetType().GetTypeClass() == lldb.eTypeClassUnion\n \n+\n   if val.num_children == 1:\n+    # This is either an enum with just one variant, or it is an Option-like enum\n+    # where the discriminant is encoded in a non-nullable pointer field. We find\n+    # out which one it is by looking at the member name of the sole union\n+    # variant. If it starts with \"RUST$ENCODED$ENUM$\" then we have an\n+    # Option-like enum.\n     first_variant_name = val.GetChildAtIndex(0).GetName()\n     if first_variant_name and first_variant_name.startswith(\"RUST$ENCODED$ENUM$\"):\n-      # Try to extract the\n \n+      # This is an Option-like enum. The position of the discriminator field is\n+      # encoded in the name which has the format:\n+      #  RUST$ENCODED$ENUM$<index of discriminator field>$<name of null variant>\n       last_separator_index = first_variant_name.rfind(\"$\")\n       if last_separator_index == -1:\n         return \"<invalid enum encoding: %s>\" % first_variant_name\n@@ -130,25 +138,30 @@ def print_enum_val(val, internal_dict):\n       if second_last_separator_index == -1:\n         return \"<invalid enum encoding: %s>\" % first_variant_name\n \n+      # Extract index of the discriminator field\n       try:\n         disr_field_index = first_variant_name[second_last_separator_index + 1 :\n                                               last_separator_index]\n         disr_field_index = int(disr_field_index)\n       except:\n         return \"<invalid enum encoding: %s>\" % first_variant_name\n \n+      # Read the discriminant\n       disr_val = val.GetChildAtIndex(0).GetChildAtIndex(disr_field_index).GetValueAsUnsigned()\n \n       if disr_val == 0:\n+        # Null case: Print the name of the null-variant\n         null_variant_name = first_variant_name[last_separator_index + 1:]\n         return null_variant_name\n       else:\n+        # Non-null case: Interpret the data as a value of the non-null variant type\n         return print_struct_val_starting_from(0, val.GetChildAtIndex(0), internal_dict)\n     else:\n+      # This is just a regular uni-variant enum without discriminator field\n       return print_struct_val_starting_from(0, val.GetChildAtIndex(0), internal_dict)\n \n-  # extract the discriminator value by\n-  disr_val = val.GetChildAtIndex(0).GetChildAtIndex(0)\n+  # If we are here, this is a regular enum with more than one variant\n+  disr_val = val.GetChildAtIndex(0).GetChildMemberWithName(\"RUST$ENUM$DISR\")\n   disr_type = disr_val.GetType()\n \n   if disr_type.GetTypeClass() != lldb.eTypeClassEnumeration:"}, {"sha": "a2b7cb159d9dc17705476f1602a236e56b450ad8", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -242,7 +242,6 @@ static UNKNOWN_FILE_METADATA: DIFile = (0 as DIFile);\n static UNKNOWN_SCOPE_METADATA: DIScope = (0 as DIScope);\n \n static FLAGS_NONE: c_uint = 0;\n-static FLAGS_ARTIFICAL: c_uint = llvm::debuginfo::FlagArtificial as c_uint;\n \n //=-----------------------------------------------------------------------------\n //  Public Interface of debuginfo module\n@@ -2276,11 +2275,7 @@ impl VariantMemberDescriptionFactory {\n                     _ => type_metadata(cx, ty, self.span)\n                 },\n                 offset: ComputedMemberOffset,\n-                flags: if self.discriminant_type_metadata.is_some() &&  i == 0 {\n-                    FLAGS_ARTIFICAL\n-                } else {\n-                    FLAGS_NONE\n-                }\n+                flags: FLAGS_NONE\n             }\n         }).collect()\n     }\n@@ -2339,9 +2334,9 @@ fn describe_enum_variant(cx: &CrateContext,\n         None => variant_info.args.iter().map(|_| \"\".to_string()).collect()\n     };\n \n-    // If this is not a univariant enum, there is also the (unnamed) discriminant field.\n+    // If this is not a univariant enum, there is also the discriminant field.\n     match discriminant_info {\n-        RegularDiscriminant(_) => arg_names.insert(0, \"\".to_string()),\n+        RegularDiscriminant(_) => arg_names.insert(0, \"RUST$ENUM$DISR\".to_string()),\n         _ => { /* do nothing */ }\n     };\n \n@@ -2713,14 +2708,14 @@ fn vec_slice_metadata(cx: &CrateContext,\n             llvm_type: *member_llvm_types.get(0),\n             type_metadata: element_type_metadata,\n             offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL\n+            flags: FLAGS_NONE\n         },\n         MemberDescription {\n             name: \"length\".to_string(),\n             llvm_type: *member_llvm_types.get(1),\n             type_metadata: type_metadata(cx, ty::mk_uint(), span),\n             offset: ComputedMemberOffset,\n-            flags: FLAGS_ARTIFICAL\n+            flags: FLAGS_NONE\n         },\n     ];\n "}, {"sha": "f018bd4668bb6e76e7dea7c087e22632792cbf9f", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n@@ -19,10 +20,10 @@\n // gdb-command:finish\n \n // gdb-command:print *the_a_ref\n-// gdb-check:$1 = {{TheA, x = 0, y = 8970181431921507452}, {TheA, 0, 2088533116, 2088533116}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, 0, 2088533116, 2088533116}}\n \n // gdb-command:print *the_b_ref\n-// gdb-check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n+// gdb-check:$2 = {{RUST$ENUM$DISR = TheB, x = 0, y = 1229782938247303441}, {RUST$ENUM$DISR = TheB, 0, 286331153, 286331153}}\n \n // gdb-command:print *univariant_ref\n // gdb-check:$3 = {{4820353753753434}}"}, {"sha": "60986c316176f3273b949ec1b316cfa055215a24", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n@@ -43,7 +44,7 @@\n \n // gdb-command:finish\n // gdb-command:print x\n-// gdb-check:$7 = {{Case1, x = 0, y = 8970181431921507452}, {Case1, 0, 2088533116, 2088533116}}\n+// gdb-check:$7 = {{RUST$ENUM$DISR = Case1, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = Case1, 0, 2088533116, 2088533116}}\n // gdb-command:continue\n \n "}, {"sha": "c0a07a0137488fc641a13efc471942b60e2dadd7", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -18,13 +18,13 @@\n // gdb-command:finish\n \n // gdb-command:print case1\n-// gdb-check:$1 = {{Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {Case1, a = 0, b = 2088533116, c = 2088533116}, {Case1, a = 0, b = 8970181431921507452}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, a = 0, b = 2088533116, c = 2088533116}, {RUST$ENUM$DISR = Case1, a = 0, b = 8970181431921507452}}\n \n // gdb-command:print case2\n-// gdb-check:$2 = {{Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {Case2, a = 0, b = 286331153, c = 286331153}, {Case2, a = 0, b = 1229782938247303441}}\n+// gdb-check:$2 = {{RUST$ENUM$DISR = Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, a = 0, b = 1229782938247303441}}\n \n // gdb-command:print case3\n-// gdb-check:$3 = {{Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {Case3, a = 0, b = 1499027801, c = 1499027801}, {Case3, a = 0, b = 6438275382588823897}}\n+// gdb-check:$3 = {{RUST$ENUM$DISR = Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {RUST$ENUM$DISR = Case3, a = 0, b = 1499027801, c = 1499027801}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n \n // gdb-command:print univariant\n // gdb-check:$4 = {{a = -1}}"}, {"sha": "867303d08777fe2668f8fcf6a2fa56e7376b982b", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -21,13 +21,13 @@\n // gdb-command:finish\n \n // gdb-command:print case1\n-// gdb-check:$1 = {{Case1, 0, 31868, 31868, 31868, 31868}, {Case1, 0, 2088533116, 2088533116}, {Case1, 0, 8970181431921507452}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Case1, 0, 31868, 31868, 31868, 31868}, {RUST$ENUM$DISR = Case1, 0, 2088533116, 2088533116}, {RUST$ENUM$DISR = Case1, 0, 8970181431921507452}}\n \n // gdb-command:print case2\n-// gdb-check:$2 = {{Case2, 0, 4369, 4369, 4369, 4369}, {Case2, 0, 286331153, 286331153}, {Case2, 0, 1229782938247303441}}\n+// gdb-check:$2 = {{RUST$ENUM$DISR = Case2, 0, 4369, 4369, 4369, 4369}, {RUST$ENUM$DISR = Case2, 0, 286331153, 286331153}, {RUST$ENUM$DISR = Case2, 0, 1229782938247303441}}\n \n // gdb-command:print case3\n-// gdb-check:$3 = {{Case3, 0, 22873, 22873, 22873, 22873}, {Case3, 0, 1499027801, 1499027801}, {Case3, 0, 6438275382588823897}}\n+// gdb-check:$3 = {{RUST$ENUM$DISR = Case3, 0, 22873, 22873, 22873, 22873}, {RUST$ENUM$DISR = Case3, 0, 1499027801, 1499027801}, {RUST$ENUM$DISR = Case3, 0, 6438275382588823897}}\n \n // gdb-command:print univariant\n // gdb-check:$4 = {{-1}}"}, {"sha": "3e6ea221f486a2a92650749f7b9addd43e76f392", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n@@ -20,7 +21,7 @@\n // STACK BY REF\n // gdb-command:finish\n // gdb-command:print *self\n-// gdb-check:$1 = {{Variant2, [...]}, {Variant2, 117901063}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Variant2, [...]}, {RUST$ENUM$DISR = Variant2, 117901063}}\n // gdb-command:print arg1\n // gdb-check:$2 = -1\n // gdb-command:print arg2\n@@ -30,7 +31,7 @@\n // STACK BY VAL\n // gdb-command:finish\n // gdb-command:print self\n-// gdb-check:$4 = {{Variant2, [...]}, {Variant2, 117901063}}\n+// gdb-check:$4 = {{RUST$ENUM$DISR = Variant2, [...]}, {RUST$ENUM$DISR = Variant2, 117901063}}\n // gdb-command:print arg1\n // gdb-check:$5 = -3\n // gdb-command:print arg2\n@@ -40,7 +41,7 @@\n // OWNED BY REF\n // gdb-command:finish\n // gdb-command:print *self\n-// gdb-check:$7 = {{Variant1, x = 1799, y = 1799}, {Variant1, [...]}}\n+// gdb-check:$7 = {{RUST$ENUM$DISR = Variant1, x = 1799, y = 1799}, {RUST$ENUM$DISR = Variant1, [...]}}\n // gdb-command:print arg1\n // gdb-check:$8 = -5\n // gdb-command:print arg2\n@@ -50,7 +51,7 @@\n // OWNED BY VAL\n // gdb-command:finish\n // gdb-command:print self\n-// gdb-check:$10 = {{Variant1, x = 1799, y = 1799}, {Variant1, [...]}}\n+// gdb-check:$10 = {{RUST$ENUM$DISR = Variant1, x = 1799, y = 1799}, {RUST$ENUM$DISR = Variant1, [...]}}\n // gdb-command:print arg1\n // gdb-check:$11 = -7\n // gdb-command:print arg2\n@@ -60,7 +61,7 @@\n // OWNED MOVED\n // gdb-command:finish\n // gdb-command:print *self\n-// gdb-check:$13 = {{Variant1, x = 1799, y = 1799}, {Variant1, [...]}}\n+// gdb-check:$13 = {{RUST$ENUM$DISR = Variant1, x = 1799, y = 1799}, {RUST$ENUM$DISR = Variant1, [...]}}\n // gdb-command:print arg1\n // gdb-check:$14 = -9\n // gdb-command:print arg2"}, {"sha": "d193cb78941118b03a588fd5d538a51d599ea816", "filename": "src/test/debuginfo/struct-in-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-in-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -21,10 +21,10 @@\n // gdb-command:finish\n \n // gdb-command:print case1\n-// gdb-check:$1 = {{Case1, 0, {x = 2088533116, y = 2088533116, z = 31868}}, {Case1, 0, 8970181431921507452, 31868}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Case1, 0, {x = 2088533116, y = 2088533116, z = 31868}}, {RUST$ENUM$DISR = Case1, 0, 8970181431921507452, 31868}}\n \n // gdb-command:print case2\n-// gdb-check:$2 = {{Case2, 0, {x = 286331153, y = 286331153, z = 4369}}, {Case2, 0, 1229782938247303441, 4369}}\n+// gdb-check:$2 = {{RUST$ENUM$DISR = Case2, 0, {x = 286331153, y = 286331153, z = 4369}}, {RUST$ENUM$DISR = Case2, 0, 1229782938247303441, 4369}}\n \n // gdb-command:print univariant\n // gdb-check:$3 = {{{x = 123, y = 456, z = 789}}}"}, {"sha": "79f0dc52190c17d04ee00d40d9fe501484f880eb", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -21,13 +21,13 @@\n // gdb-command:finish\n \n // gdb-command:print case1\n-// gdb-check:$1 = {{Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {Case1, a = 0, b = 2088533116, c = 2088533116}, {Case1, a = 0, b = 8970181431921507452}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {RUST$ENUM$DISR = Case1, a = 0, b = 2088533116, c = 2088533116}, {RUST$ENUM$DISR = Case1, a = 0, b = 8970181431921507452}}\n \n // gdb-command:print case2\n-// gdb-check:$2 = {{Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {Case2, a = 0, b = 286331153, c = 286331153}, {Case2, a = 0, b = 1229782938247303441}}\n+// gdb-check:$2 = {{RUST$ENUM$DISR = Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {RUST$ENUM$DISR = Case2, a = 0, b = 286331153, c = 286331153}, {RUST$ENUM$DISR = Case2, a = 0, b = 1229782938247303441}}\n \n // gdb-command:print case3\n-// gdb-check:$3 = {{Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {Case3, a = 0, b = 1499027801, c = 1499027801}, {Case3, a = 0, b = 6438275382588823897}}\n+// gdb-check:$3 = {{RUST$ENUM$DISR = Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {RUST$ENUM$DISR = Case3, a = 0, b = 1499027801, c = 1499027801}, {RUST$ENUM$DISR = Case3, a = 0, b = 6438275382588823897}}\n \n // gdb-command:print univariant\n // gdb-check:$4 = {{a = -1}}"}, {"sha": "ab06367512ab583df5615c1f4f8d67dcb0e961ff", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -21,13 +21,13 @@\n // gdb-command:finish\n \n // gdb-command:print case1\n-// gdb-check:$1 = {{Case1, 0, 31868, 31868, 31868, 31868}, {Case1, 0, 2088533116, 2088533116}, {Case1, 0, 8970181431921507452}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = Case1, 0, 31868, 31868, 31868, 31868}, {RUST$ENUM$DISR = Case1, 0, 2088533116, 2088533116}, {RUST$ENUM$DISR = Case1, 0, 8970181431921507452}}\n \n // gdb-command:print case2\n-// gdb-check:$2 = {{Case2, 0, 4369, 4369, 4369, 4369}, {Case2, 0, 286331153, 286331153}, {Case2, 0, 1229782938247303441}}\n+// gdb-check:$2 = {{RUST$ENUM$DISR = Case2, 0, 4369, 4369, 4369, 4369}, {RUST$ENUM$DISR = Case2, 0, 286331153, 286331153}, {RUST$ENUM$DISR = Case2, 0, 1229782938247303441}}\n \n // gdb-command:print case3\n-// gdb-check:$3 = {{Case3, 0, 22873, 22873, 22873, 22873}, {Case3, 0, 1499027801, 1499027801}, {Case3, 0, 6438275382588823897}}\n+// gdb-check:$3 = {{RUST$ENUM$DISR = Case3, 0, 22873, 22873, 22873, 22873}, {RUST$ENUM$DISR = Case3, 0, 1499027801, 1499027801}, {RUST$ENUM$DISR = Case3, 0, 6438275382588823897}}\n \n // gdb-command:print univariant\n // gdb-check:$4 = {{-1}}"}, {"sha": "6932676df58cde64aeb2d7248be40310d1507a09", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // ignore-android: FIXME(#10381)\n \n // compile-flags:-g\n@@ -19,10 +20,10 @@\n // gdb-command:finish\n \n // gdb-command:print *the_a\n-// gdb-check:$1 = {{TheA, x = 0, y = 8970181431921507452}, {TheA, 0, 2088533116, 2088533116}}\n+// gdb-check:$1 = {{RUST$ENUM$DISR = TheA, x = 0, y = 8970181431921507452}, {RUST$ENUM$DISR = TheA, 0, 2088533116, 2088533116}}\n \n // gdb-command:print *the_b\n-// gdb-check:$2 = {{TheB, x = 0, y = 1229782938247303441}, {TheB, 0, 286331153, 286331153}}\n+// gdb-check:$2 = {{RUST$ENUM$DISR = TheB, x = 0, y = 1229782938247303441}, {RUST$ENUM$DISR = TheB, 0, 286331153, 286331153}}\n \n // gdb-command:print *univariant\n // gdb-check:$3 = {{123234}}"}, {"sha": "c46b1aca3b4c6ed47c5b9679373ec8ce70234cbf", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d569dfe37eac393509351c28db01e50e0ca323c2/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=d569dfe37eac393509351c28db01e50e0ca323c2", "patch": "@@ -63,21 +63,21 @@\n // lldb-command:print *owned\n // lldb-check:[...]$4 = 6\n // lldb-command:print closure_local\n-// lldb-check:[...]$6 = 8\n+// lldb-check:[...]$5 = 8\n // lldb-command:continue\n \n // lldb-command:print variable\n-// lldb-check:[...]$7 = 1\n+// lldb-check:[...]$6 = 1\n // lldb-command:print constant\n-// lldb-check:[...]$8 = 2\n+// lldb-check:[...]$7 = 2\n // lldb-command:print a_struct\n-// lldb-check:[...]$9 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-check:[...]$8 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *struct_ref\n-// lldb-check:[...]$10 = Struct { a: -3, b: 4.5, c: 5 }\n+// lldb-check:[...]$9 = Struct { a: -3, b: 4.5, c: 5 }\n // lldb-command:print *owned\n-// lldb-check:[...]$11 = 6\n+// lldb-check:[...]$10 = 6\n // lldb-command:print closure_local\n-// lldb-check:[...]$13 = 8\n+// lldb-check:[...]$11 = 8\n // lldb-command:continue\n \n #![allow(unused_variable)]"}]}