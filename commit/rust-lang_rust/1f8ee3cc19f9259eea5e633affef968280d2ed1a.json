{"sha": "1f8ee3cc19f9259eea5e633affef968280d2ed1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOGVlM2NjMTlmOTI1OWVlYTVlNjMzYWZmZWY5NjgyODBkMmVkMWE=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-16T02:20:51Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-16T02:20:51Z"}, "message": "Handle struct ctor case", "tree": {"sha": "f19191db10c5b3c78e6e3f962a33fa3c7dd22e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f19191db10c5b3c78e6e3f962a33fa3c7dd22e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f8ee3cc19f9259eea5e633affef968280d2ed1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8ee3cc19f9259eea5e633affef968280d2ed1a", "html_url": "https://github.com/rust-lang/rust/commit/1f8ee3cc19f9259eea5e633affef968280d2ed1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f8ee3cc19f9259eea5e633affef968280d2ed1a/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb91c76586a3a01fef6a8c49edb9e4598fbd138f", "html_url": "https://github.com/rust-lang/rust/commit/fb91c76586a3a01fef6a8c49edb9e4598fbd138f"}], "stats": {"total": 154, "additions": 145, "deletions": 9}, "files": [{"sha": "33a577f336dec455c69df1940b5ae4dfb34bcb8d", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1f8ee3cc19f9259eea5e633affef968280d2ed1a/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8ee3cc19f9259eea5e633affef968280d2ed1a/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=1f8ee3cc19f9259eea5e633affef968280d2ed1a", "patch": "@@ -64,7 +64,7 @@ struct NumericFallbackVisitor<'a, 'tcx> {\n impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n-            ty_bounds: Vec::new(),\n+            ty_bounds: vec![TyBound::Nothing],\n             cx,\n         }\n     }\n@@ -121,6 +121,42 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                 }\n             },\n \n+            ExprKind::Struct(qpath, fields, base) => {\n+                if_chain! {\n+                    if let Some(def_id) = self.cx.qpath_res(qpath, expr.hir_id).opt_def_id();\n+                    let ty = self.cx.tcx.type_of(def_id);\n+                    if let Some(adt_def) = ty.ty_adt_def();\n+                    if adt_def.is_struct();\n+                    if let Some(variant) = adt_def.variants.iter().next();\n+                    then {\n+                        let fields_def = &variant.fields;\n+\n+                        // Push field type then visit each field expr.\n+                        for field in fields.iter() {\n+                            let bound =\n+                                fields_def\n+                                    .iter()\n+                                    .find_map(|f_def| {\n+                                        if f_def.ident == field.ident\n+                                            { Some(self.cx.tcx.type_of(f_def.did)) }\n+                                        else { None }\n+                                    });\n+                            self.ty_bounds.push(bound.into());\n+                            self.visit_expr(field.expr);\n+                            self.ty_bounds.pop();\n+                        }\n+\n+                        // Visit base with no bound.\n+                        if let Some(base) = base {\n+                            self.ty_bounds.push(TyBound::Nothing);\n+                            self.visit_expr(base);\n+                            self.ty_bounds.pop();\n+                        }\n+                        return;\n+                    }\n+                }\n+            },\n+\n             ExprKind::Lit(lit) => {\n                 let ty = self.cx.typeck_results().expr_ty(expr);\n                 self.check_lit(lit, ty);\n@@ -166,13 +202,13 @@ fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'\n }\n \n #[derive(Debug, Clone, Copy)]\n-enum TyBound<'ctx> {\n+enum TyBound<'tcx> {\n     Any,\n-    Ty(Ty<'ctx>),\n+    Ty(Ty<'tcx>),\n     Nothing,\n }\n \n-impl<'ctx> TyBound<'ctx> {\n+impl<'tcx> TyBound<'tcx> {\n     fn is_integral(self) -> bool {\n         match self {\n             TyBound::Any => true,\n@@ -181,3 +217,12 @@ impl<'ctx> TyBound<'ctx> {\n         }\n     }\n }\n+\n+impl<'tcx> From<Option<Ty<'tcx>>> for TyBound<'tcx> {\n+    fn from(v: Option<Ty<'tcx>>) -> Self {\n+        match v {\n+            Some(t) => TyBound::Ty(t),\n+            None => TyBound::Nothing,\n+        }\n+    }\n+}"}, {"sha": "0b3758952ac6d7d80a36c5a24d11efab76292135", "filename": "tests/ui/default_numeric_fallback.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1f8ee3cc19f9259eea5e633affef968280d2ed1a/tests%2Fui%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8ee3cc19f9259eea5e633affef968280d2ed1a/tests%2Fui%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.rs?ref=1f8ee3cc19f9259eea5e633affef968280d2ed1a", "patch": "@@ -39,14 +39,28 @@ mod nested_local {\n             // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n             1\n         };\n+\n+        let x: _ = if true {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            1\n+        } else {\n+            // Should lint this because this literal is not bound to any types.\n+            let y = 1;\n+\n+            // Should NOT lint this because this literal is bound to `_` of outer `Local`.\n+            2\n+        };\n     }\n }\n \n mod function_def {\n     fn ret_i32() -> i32 {\n         // Even though the output type is specified,\n         // this unsuffixed literal is linted to reduce heuristics and keep codebase simple.\n-        23\n+        1\n     }\n \n     fn test() {\n@@ -77,6 +91,27 @@ mod function_calls {\n     }\n }\n \n+mod struct_ctor {\n+    struct ConcreteStruct {\n+        x: i32,\n+    }\n+\n+    struct GenericStruct<T> {\n+        x: T,\n+    }\n+\n+    fn test() {\n+        // Should NOT lint this because the field type is bound to a concrete type.\n+        ConcreteStruct { x: 1 };\n+\n+        // Should lint this because the field type is inferred to `i32` and NOT bound to a concrete type.\n+        GenericStruct { x: 1 };\n+\n+        // Should lint this because the field type is inferred to `i32` and NOT bound to a concrete type.\n+        let _ = GenericStruct { x: 1 };\n+    }\n+}\n+\n mod method_calls {\n     struct StructForMethodCallTest {}\n "}, {"sha": "50fcdfb510e52910fec195fb0e50f15567aacc8d", "filename": "tests/ui/default_numeric_fallback.stderr", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1f8ee3cc19f9259eea5e633affef968280d2ed1a/tests%2Fui%2Fdefault_numeric_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f8ee3cc19f9259eea5e633affef968280d2ed1a/tests%2Fui%2Fdefault_numeric_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.stderr?ref=1f8ee3cc19f9259eea5e633affef968280d2ed1a", "patch": "@@ -112,28 +112,84 @@ LL |             let y = 1;\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:73:21\n+  --> $DIR/default_numeric_fallback.rs:45:21\n+   |\n+LL |             let y = 1;\n+   |                     ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:51:21\n+   |\n+LL |             let y = 1;\n+   |                     ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:63:9\n+   |\n+LL |         1\n+   |         ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:69:27\n+   |\n+LL |         let f = || -> _ { 1 };\n+   |                           ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:73:29\n+   |\n+LL |         let f = || -> i32 { 1 };\n+   |                             ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:87:21\n    |\n LL |         generic_arg(1);\n    |                     ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:76:32\n+  --> $DIR/default_numeric_fallback.rs:90:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:96:23\n+  --> $DIR/default_numeric_fallback.rs:108:28\n+   |\n+LL |         GenericStruct { x: 1 };\n+   |                            ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:111:36\n+   |\n+LL |         let _ = GenericStruct { x: 1 };\n+   |                                    ^\n+   |\n+   = help: consider adding suffix to avoid default numeric fallback\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:131:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^\n    |\n    = help: consider adding suffix to avoid default numeric fallback\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 24 previous errors\n "}]}