{"sha": "ed1e943bc55764c67645e7648abeee3b52023774", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMWU5NDNiYzU1NzY0YzY3NjQ1ZTc2NDhhYmVlZTNiNTIwMjM3NzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T13:37:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:42Z"}, "message": "lowering: extract lower_expr_if", "tree": {"sha": "0b5bb9efa55565db6b2ba9c70e8b011acf973d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b5bb9efa55565db6b2ba9c70e8b011acf973d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed1e943bc55764c67645e7648abeee3b52023774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1e943bc55764c67645e7648abeee3b52023774", "html_url": "https://github.com/rust-lang/rust/commit/ed1e943bc55764c67645e7648abeee3b52023774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed1e943bc55764c67645e7648abeee3b52023774/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11251b9dab81048c94555c948914995bf8d0f3fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/11251b9dab81048c94555c948914995bf8d0f3fd", "html_url": "https://github.com/rust-lang/rust/commit/11251b9dab81048c94555c948914995bf8d0f3fd"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "547224f35cf7e84af3da14344d1d4d5c0a5b632f", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 53, "deletions": 40, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ed1e943bc55764c67645e7648abeee3b52023774/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1e943bc55764c67645e7648abeee3b52023774/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=ed1e943bc55764c67645e7648abeee3b52023774", "patch": "@@ -101,47 +101,8 @@ impl LoweringContext<'_> {\n                     hir::MatchSource::Normal,\n                 )\n             }\n-            // FIXME(#53667): handle lowering of && and parens.\n             ExprKind::If(ref cond, ref then, ref else_opt) => {\n-                // `_ => else_block` where `else_block` is `{}` if there's `None`:\n-                let else_pat = self.pat_wild(e.span);\n-                let (else_expr, contains_else_clause) = match else_opt {\n-                    None => (self.expr_block_empty(e.span), false),\n-                    Some(els) => (self.lower_expr(els), true),\n-                };\n-                let else_arm = self.arm(hir_vec![else_pat], P(else_expr));\n-\n-                // Handle then + scrutinee:\n-                let then_blk = self.lower_block(then, false);\n-                let then_expr = self.expr_block(then_blk, ThinVec::new());\n-                let (then_pats, scrutinee, desugar) = match cond.node {\n-                    // `<pat> => <then>`:\n-                    ExprKind::Let(ref pats, ref scrutinee) => {\n-                        let scrutinee = self.lower_expr(scrutinee);\n-                        let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n-                        let desugar = hir::MatchSource::IfLetDesugar { contains_else_clause };\n-                        (pats, scrutinee, desugar)\n-                    }\n-                    // `true => <then>`:\n-                    _ => {\n-                        // Lower condition:\n-                        let cond = self.lower_expr(cond);\n-                        let span_block = self.mark_span_with_reason(\n-                            DesugaringKind::CondTemporary, cond.span, None\n-                        );\n-                        // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n-                        // to preserve drop semantics since `if cond { ... }` does not\n-                        // let temporaries live outside of `cond`.\n-                        let cond = self.expr_drop_temps(span_block, P(cond), ThinVec::new());\n-\n-                        let desugar = hir::MatchSource::IfDesugar { contains_else_clause };\n-                        let pats = hir_vec![self.pat_bool(e.span, true)];\n-                        (pats, cond, desugar)\n-                    }\n-                };\n-                let then_arm = self.arm(then_pats, P(then_expr));\n-\n-                hir::ExprKind::Match(P(scrutinee), vec![then_arm, else_arm].into(), desugar)\n+                self.lower_expr_if(e.span, cond, then, else_opt.as_deref())\n             }\n             ExprKind::While(ref cond, ref body, opt_label) => self.with_loop_scope(e.id, |this| {\n                 this.lower_expr_while_in_loop_scope(e.span, cond, body, opt_label)\n@@ -279,6 +240,58 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    fn lower_expr_if(\n+        &mut self,\n+        span: Span,\n+        cond: &Expr,\n+        then: &Block,\n+        else_opt: Option<&Expr>,\n+    ) -> hir::ExprKind {\n+        // FIXME(#53667): handle lowering of && and parens.\n+\n+        // `_ => else_block` where `else_block` is `{}` if there's `None`:\n+        let else_pat = self.pat_wild(span);\n+        let (else_expr, contains_else_clause) = match else_opt {\n+            None => (self.expr_block_empty(span), false),\n+            Some(els) => (self.lower_expr(els), true),\n+        };\n+        let else_arm = self.arm(hir_vec![else_pat], P(else_expr));\n+\n+        // Handle then + scrutinee:\n+        let then_blk = self.lower_block(then, false);\n+        let then_expr = self.expr_block(then_blk, ThinVec::new());\n+        let (then_pats, scrutinee, desugar) = match cond.node {\n+            // `<pat> => <then>`:\n+            ExprKind::Let(ref pats, ref scrutinee) => {\n+                let scrutinee = self.lower_expr(scrutinee);\n+                let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n+                let desugar = hir::MatchSource::IfLetDesugar { contains_else_clause };\n+                (pats, scrutinee, desugar)\n+            }\n+            // `true => <then>`:\n+            _ => {\n+                // Lower condition:\n+                let cond = self.lower_expr(cond);\n+                let span_block = self.mark_span_with_reason(\n+                    DesugaringKind::CondTemporary,\n+                    cond.span,\n+                    None\n+                );\n+                // Wrap in a construct equivalent to `{ let _t = $cond; _t }`\n+                // to preserve drop semantics since `if cond { ... }` does not\n+                // let temporaries live outside of `cond`.\n+                let cond = self.expr_drop_temps(span_block, P(cond), ThinVec::new());\n+\n+                let desugar = hir::MatchSource::IfDesugar { contains_else_clause };\n+                let pats = hir_vec![self.pat_bool(span, true)];\n+                (pats, cond, desugar)\n+            }\n+        };\n+        let then_arm = self.arm(then_pats, P(then_expr));\n+\n+        hir::ExprKind::Match(P(scrutinee), vec![then_arm, else_arm].into(), desugar)\n+    }\n+\n     fn lower_expr_while_in_loop_scope(\n         &mut self,\n         span: Span,"}]}