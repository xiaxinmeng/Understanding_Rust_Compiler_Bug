{"sha": "14ea6e50c1534a23cb51375552c14568db9ee130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZWE2ZTUwYzE1MzRhMjNjYjUxMzc1NTUyYzE0NTY4ZGI5ZWUxMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-15T13:56:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-15T13:56:16Z"}, "message": "Auto merge of #57630 - Centril:rollup, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #56044 (Drop partially bound function parameters in the expected order)\n - #57352 (forbid manually impl'ing one of an object type's marker traits)\n - #57456 (RawVec doesn't always abort on allocation errors)\n - #57467 (Implement `check_attribute` to forbid `#[allow_internal_unsafe]`)\n - #57579 (Add core::iter::once_with())\n - #57587 (Add 'rustc-env:RUST_BACKTRACE=0' to const-pat-ice test)\n - #57608 (Simplify 'product' factorial example)\n - #57614 ([rustdoc] Fix crates filtering box not being filled)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6758b33999db15ce1380535345a94afb2cb8d788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6758b33999db15ce1380535345a94afb2cb8d788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14ea6e50c1534a23cb51375552c14568db9ee130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea6e50c1534a23cb51375552c14568db9ee130", "html_url": "https://github.com/rust-lang/rust/commit/14ea6e50c1534a23cb51375552c14568db9ee130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14ea6e50c1534a23cb51375552c14568db9ee130/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920192490f3eea0cf3b2e58e28912eb68423fdde", "url": "https://api.github.com/repos/rust-lang/rust/commits/920192490f3eea0cf3b2e58e28912eb68423fdde", "html_url": "https://github.com/rust-lang/rust/commit/920192490f3eea0cf3b2e58e28912eb68423fdde"}, {"sha": "9947b3060c165ef2677c0e0454991a53ef743224", "url": "https://api.github.com/repos/rust-lang/rust/commits/9947b3060c165ef2677c0e0454991a53ef743224", "html_url": "https://github.com/rust-lang/rust/commit/9947b3060c165ef2677c0e0454991a53ef743224"}], "stats": {"total": 452, "additions": 417, "deletions": 35}, "files": [{"sha": "5e4aac9ce7871bc45a3276a4e732b5d11d153566", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -22,7 +22,7 @@ use boxed::Box;\n /// * Catches all overflows in capacity computations (promotes them to \"capacity overflow\" panics)\n /// * Guards against 32-bit systems allocating more than isize::MAX bytes\n /// * Guards against overflowing your length\n-/// * Aborts on OOM\n+/// * Aborts on OOM or calls handle_alloc_error as applicable\n /// * Avoids freeing Unique::empty()\n /// * Contains a ptr::Unique and thus endows the user with all related benefits\n ///"}, {"sha": "0ad29afbadeacff0589750ffcea2914cadbe6828", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -2358,7 +2358,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// fn factorial(n: u32) -> u32 {\n-    ///     (1..).take_while(|&i| i <= n).product()\n+    ///     (1..=n).product()\n     /// }\n     /// assert_eq!(factorial(0), 1);\n     /// assert_eq!(factorial(1), 1);"}, {"sha": "974906b682d21c1b9e4aa7ae4aabc3cecb1151c7", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -329,6 +329,8 @@ pub use self::sources::{RepeatWith, repeat_with};\n pub use self::sources::{Empty, empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::sources::{Once, once};\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+pub use self::sources::{OnceWith, once_with};\n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n pub use self::sources::{Unfold, unfold, Successors, successors};\n "}, {"sha": "2590fa6023a5333996565c53376b7d0bc23a16ad", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -377,6 +377,119 @@ pub fn once<T>(value: T) -> Once<T> {\n     Once { inner: Some(value).into_iter() }\n }\n \n+/// An iterator that repeats elements of type `A` endlessly by\n+/// applying the provided closure `F: FnMut() -> A`.\n+///\n+/// This `struct` is created by the [`once_with`] function.\n+/// See its documentation for more.\n+///\n+/// [`once_with`]: fn.once_with.html\n+#[derive(Copy, Clone, Debug)]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+pub struct OnceWith<F> {\n+    gen: Option<F>,\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n+    type Item = A;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        self.gen.take().map(|f| f())\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.gen.iter().size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> DoubleEndedIterator for OnceWith<F> {\n+    fn next_back(&mut self) -> Option<A> {\n+        self.next()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> ExactSizeIterator for OnceWith<F> {\n+    fn len(&self) -> usize {\n+        self.gen.iter().len()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+impl<A, F: FnOnce() -> A> FusedIterator for OnceWith<F> {}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n+\n+/// Creates an iterator that lazily generates a value exactly once by invoking\n+/// the provided closure.\n+///\n+/// This is commonly used to adapt a single value generator into a [`chain`] of\n+/// other kinds of iteration. Maybe you have an iterator that covers almost\n+/// everything, but you need an extra special case. Maybe you have a function\n+/// which works on iterators, but you only need to process one value.\n+///\n+/// Unlike [`once`], this function will lazily generate the value on request.\n+///\n+/// [`once`]: fn.once.html\n+/// [`chain`]: trait.Iterator.html#method.chain\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// #![feature(iter_once_with)]\n+///\n+/// use std::iter;\n+///\n+/// // one is the loneliest number\n+/// let mut one = iter::once_with(|| 1);\n+///\n+/// assert_eq!(Some(1), one.next());\n+///\n+/// // just one, that's all we get\n+/// assert_eq!(None, one.next());\n+/// ```\n+///\n+/// Chaining together with another iterator. Let's say that we want to iterate\n+/// over each file of the `.foo` directory, but also a configuration file,\n+/// `.foorc`:\n+///\n+/// ```no_run\n+/// #![feature(iter_once_with)]\n+///\n+/// use std::iter;\n+/// use std::fs;\n+/// use std::path::PathBuf;\n+///\n+/// let dirs = fs::read_dir(\".foo\").unwrap();\n+///\n+/// // we need to convert from an iterator of DirEntry-s to an iterator of\n+/// // PathBufs, so we use map\n+/// let dirs = dirs.map(|file| file.unwrap().path());\n+///\n+/// // now, our iterator just for our config file\n+/// let config = iter::once_with(|| PathBuf::from(\".foorc\"));\n+///\n+/// // chain the two iterators together into one big iterator\n+/// let files = dirs.chain(config);\n+///\n+/// // this will give us all of the files in .foo as well as .foorc\n+/// for f in files {\n+///     println!(\"{:?}\", f);\n+/// }\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iter_once_with\", issue = \"57581\")]\n+pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n+    OnceWith { gen: Some(gen) }\n+}\n+\n /// Creates a new iterator where each iteration calls the provided closure\n /// `F: FnMut(&mut St) -> Option<T>`.\n ///"}, {"sha": "33c0da8a540491953bd7d037853436a832baaab7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -79,6 +79,7 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]\n+#![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]"}, {"sha": "3944bc749d0296b75fbdbc5e49bcb527c24b7e63", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -1,3 +1,4 @@\n+use core::cell::Cell;\n use core::iter::*;\n use core::{i8, i16, isize};\n use core::usize;\n@@ -1906,6 +1907,23 @@ fn test_once() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_once_with() {\n+    let count = Cell::new(0);\n+    let mut it = once_with(|| {\n+        count.set(count.get() + 1);\n+        42\n+    });\n+\n+    assert_eq!(count.get(), 0);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(count.get(), 1);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(count.get(), 1);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(count.get(), 1);\n+}\n+\n #[test]\n fn test_empty() {\n     let mut it = empty::<i32>();"}, {"sha": "a9b8decfd0262beb381f0bffbf55e1b5a0c1a2da", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -12,6 +12,7 @@\n #![feature(hashmap_internals)]\n #![feature(iter_copied)]\n #![feature(iter_nth_back)]\n+#![feature(iter_once_with)]\n #![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}, {"sha": "ddb397b7c7ff431310820af8b2fbaf52060a967c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -40,9 +40,9 @@ use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n use syntax::errors::{Applicability, DiagnosticBuilder};\n use syntax::print::pprust::expr_to_string;\n+use syntax::visit::FnKind;\n \n use rustc::hir::{self, GenericParamKind, PatKind};\n-use rustc::hir::intravisit::FnKind;\n \n use nonstandard_style::{MethodLateContext, method_context};\n \n@@ -216,7 +216,7 @@ impl LintPass for UnsafeCode {\n }\n \n impl UnsafeCode {\n-    fn report_unsafe(&self, cx: &LateContext, span: Span, desc: &'static str) {\n+    fn report_unsafe(&self, cx: &EarlyContext, span: Span, desc: &'static str) {\n         // This comes from a macro that has #[allow_internal_unsafe].\n         if span.allows_unsafe() {\n             return;\n@@ -226,23 +226,31 @@ impl UnsafeCode {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n-    fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        if let hir::ExprKind::Block(ref blk, _) = e.node {\n+impl EarlyLintPass for UnsafeCode {\n+    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n+        if attr.check_name(\"allow_internal_unsafe\") {\n+            self.report_unsafe(cx, attr.span, \"`allow_internal_unsafe` allows defining \\\n+                                               macros using unsafe without triggering \\\n+                                               the `unsafe_code` lint at their call site\");\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n+        if let ast::ExprKind::Block(ref blk, _) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n-            if blk.rules == hir::UnsafeBlock(hir::UserProvided) {\n+            if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n                 self.report_unsafe(cx, blk.span, \"usage of an `unsafe` block\");\n             }\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         match it.node {\n-            hir::ItemKind::Trait(_, hir::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Trait(_, ast::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n             }\n \n-            hir::ItemKind::Impl(hir::Unsafety::Unsafe, ..) => {\n+            ast::ItemKind::Impl(ast::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"implementation of an `unsafe` trait\")\n             }\n \n@@ -251,19 +259,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n     }\n \n     fn check_fn(&mut self,\n-                cx: &LateContext,\n-                fk: FnKind<'tcx>,\n-                _: &hir::FnDecl,\n-                _: &hir::Body,\n+                cx: &EarlyContext,\n+                fk: FnKind,\n+                _: &ast::FnDecl,\n                 span: Span,\n                 _: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, _, hir::FnHeader { unsafety: hir::Unsafety::Unsafe, .. }, ..) => {\n+            FnKind::ItemFn(_, ast::FnHeader { unsafety: ast::Unsafety::Unsafe, .. }, ..) => {\n                 self.report_unsafe(cx, span, \"declaration of an `unsafe` function\")\n             }\n \n             FnKind::Method(_, sig, ..) => {\n-                if sig.header.unsafety == hir::Unsafety::Unsafe {\n+                if sig.header.unsafety == ast::Unsafety::Unsafe {\n                     self.report_unsafe(cx, span, \"implementation of an `unsafe` method\")\n                 }\n             }\n@@ -272,9 +279,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(_)) = item.node {\n-            if sig.header.unsafety == hir::Unsafety::Unsafe {\n+    fn check_trait_item(&mut self, cx: &EarlyContext, item: &ast::TraitItem) {\n+        if let ast::TraitItemKind::Method(ref sig, None) = item.node {\n+            if sig.header.unsafety == ast::Unsafety::Unsafe {\n                 self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n         }"}, {"sha": "0d05cc1b2be9e0b71a2ac1592ca4d13db2bc8a39", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -111,6 +111,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     add_early_builtin!(sess,\n                        UnusedParens,\n                        UnusedImportBraces,\n+                       UnsafeCode,\n                        AnonymousParameters,\n                        UnusedDocComment,\n                        BadRepr,\n@@ -134,7 +135,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         NonSnakeCase: NonSnakeCase,\n         NonUpperCaseGlobals: NonUpperCaseGlobals,\n         NonShorthandFieldPatterns: NonShorthandFieldPatterns,\n-        UnsafeCode: UnsafeCode,\n         UnusedAllocation: UnusedAllocation,\n         MissingCopyImplementations: MissingCopyImplementations,\n         UnstableFeatures: UnstableFeatures,"}, {"sha": "2bf2824d835cc83564d9b65e54143ccb403faa6d", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -910,6 +910,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let place = Place::Local(local);\n             let &ArgInfo(ty, opt_ty_info, pattern, ref self_binding) = arg_info;\n \n+            // Make sure we drop (parts of) the argument even when not matched on.\n+            self.schedule_drop(\n+                pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n+                argument_scope, &place, ty,\n+                DropKind::Value { cached_block: CachedBlock::default() },\n+            );\n+\n             if let Some(pattern) = pattern {\n                 let pattern = self.hir.pattern_from_hir(pattern);\n                 let span = pattern.span;\n@@ -941,13 +948,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-\n-            // Make sure we drop (parts of) the argument even when not matched on.\n-            self.schedule_drop(\n-                pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n-                argument_scope, &place, ty,\n-                DropKind::Value { cached_block: CachedBlock::default() },\n-            );\n         }\n \n         // Enter the argument pattern bindings source scope, if it exists."}, {"sha": "8053ed130e91b44c759dea78d7b16ca8b7b54eee", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -171,13 +171,23 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n         // This is something like impl Trait1 for Trait2. Illegal\n         // if Trait1 is a supertrait of Trait2 or Trait2 is not object safe.\n \n-        if let Some(principal_def_id) = data.principal_def_id() {\n-            if !tcx.is_object_safe(principal_def_id) {\n+        let component_def_ids = data.iter().flat_map(|predicate| {\n+            match predicate.skip_binder() {\n+                ty::ExistentialPredicate::Trait(tr) => Some(tr.def_id),\n+                ty::ExistentialPredicate::AutoTrait(def_id) => Some(*def_id),\n+                // An associated type projection necessarily comes with\n+                // an additional `Trait` requirement.\n+                ty::ExistentialPredicate::Projection(..) => None,\n+            }\n+        });\n+\n+        for component_def_id in component_def_ids {\n+            if !tcx.is_object_safe(component_def_id) {\n                 // This is an error, but it will be reported by wfcheck.  Ignore it here.\n                 // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`.\n             } else {\n                 let mut supertrait_def_ids =\n-                    traits::supertrait_def_ids(tcx, principal_def_id);\n+                    traits::supertrait_def_ids(tcx, component_def_id);\n                 if supertrait_def_ids.any(|d| d == trait_def_id) {\n                     let sp = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n                     struct_span_err!(tcx.sess,\n@@ -193,6 +203,5 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n                 }\n             }\n         }\n-        // FIXME: also check auto-trait def-ids? (e.g. `impl Sync for Foo+Sync`)?\n     }\n }"}, {"sha": "ceadbd5afac5f99fcfd20128766c56aeea379d4c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -2431,7 +2431,7 @@ if (!DOMTokenList.prototype.remove) {\n             return;\n         }\n         var crates_text = [];\n-        if (crates.length > 1) {\n+        if (Object.keys(crates).length > 1) {\n             for (var crate in crates) {\n                 if (crates.hasOwnProperty(crate)) {\n                     crates_text.push(crate);"}, {"sha": "99ab9fbcf5fa029049ad9d156cc20a55a15c28db", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -853,13 +853,13 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BlockCheckMode {\n     Default,\n     Unsafe(UnsafeSource),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,"}, {"sha": "4d5a6fbba28575eb0926315c8a5ec9cd1db01ca4", "filename": "src/test/run-pass/binding/fn-arg-incomplete-pattern-drop-order.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Frun-pass%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Frun-pass%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -0,0 +1,68 @@\n+// Check that partially moved from function parameters are dropped after the\n+// named bindings that move from them.\n+\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+use std::{panic, cell::RefCell};\n+\n+struct LogDrop<'a>(i32, Context<'a>);\n+\n+#[derive(Copy, Clone)]\n+struct Context<'a> {\n+    panic_on: i32,\n+    drops: &'a RefCell<Vec<i32>>,\n+}\n+\n+impl<'a> Context<'a> {\n+    fn record_drop(self, index: i32) {\n+        self.drops.borrow_mut().push(index);\n+        if index == self.panic_on {\n+            panic!();\n+        }\n+    }\n+}\n+\n+impl<'a> Drop for LogDrop<'a> {\n+    fn drop(&mut self) {\n+        self.1.record_drop(self.0);\n+    }\n+}\n+\n+fn bindings_in_params((_x, _): (LogDrop, LogDrop), (_, _y): (LogDrop, LogDrop)) {}\n+fn bindings_with_let(a: (LogDrop, LogDrop), b: (LogDrop, LogDrop)) {\n+    // Drop order in foo is the same as the following bindings.\n+    // _temp2 is declared after _x to avoid a difference between `_: T` and\n+    // `x: T` in function parameters.\n+    let _temp1 = a;\n+    let (_x, _) = _temp1;\n+\n+    let _temp2 = b;\n+    let (_, _y) = _temp2;\n+}\n+\n+fn test_drop_order(panic_on: i32, fun: fn((LogDrop, LogDrop), (LogDrop, LogDrop))) {\n+    let context = Context {\n+        panic_on,\n+        drops: &RefCell::new(Vec::new()),\n+    };\n+    let one = LogDrop(1, context);\n+    let two = LogDrop(2, context);\n+    let three = LogDrop(3, context);\n+    let four = LogDrop(4, context);\n+\n+    let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        fun((three, four), (two, one));\n+    }));\n+    if panic_on == 0 {\n+        assert!(res.is_ok(), \"should not have panicked\");\n+    } else {\n+        assert!(res.is_err(), \"should have panicked\");\n+    }\n+    assert_eq!(*context.drops.borrow(), [1, 2, 3, 4], \"incorrect drop order\");\n+}\n+\n+fn main() {\n+    (0..=4).for_each(|i| test_drop_order(i, bindings_in_params));\n+    (0..=4).for_each(|i| test_drop_order(i, bindings_with_let));\n+    (0..=4).for_each(|i| test_drop_order(i, |(_x, _), (_, _y)| {}));\n+}"}, {"sha": "5ea69190951e1acb6dd60f06254446dcee8098c7", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -0,0 +1,29 @@\n+#![feature(optin_builtin_traits)]\n+\n+// Test for issue #56934 - that it is impossible to redundantly\n+// implement an auto-trait for a trait object type that contains it.\n+\n+// Negative impl variant.\n+\n+auto trait Marker1 {}\n+auto trait Marker2 {}\n+\n+trait Object: Marker1 {}\n+\n+// A supertrait marker is illegal...\n+impl !Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+// ...and also a direct component.\n+impl !Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+\n+// But implementing a marker if it is not present is OK.\n+impl !Marker2 for dyn Object {} // OK\n+\n+// A non-principal trait-object type is orphan even in its crate.\n+impl !Send for dyn Marker2 {} //~ ERROR E0117\n+\n+// And impl'ing a remote marker for a local trait object is forbidden\n+// by one of these special orphan-like rules.\n+impl !Send for dyn Object {} //~ ERROR E0321\n+impl !Send for dyn Object + Marker2 {} //~ ERROR E0321\n+\n+fn main() { }"}, {"sha": "c8a146cdd445686c5141a852d0f8ea2f467a14bf", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -0,0 +1,37 @@\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:14:1\n+   |\n+LL | impl !Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n+\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:16:1\n+   |\n+LL | impl !Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:22:1\n+   |\n+LL | impl !Send for dyn Marker2 {} //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:26:1\n+   |\n+LL | impl !Send for dyn Object {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n+   |\n+LL | impl !Send for dyn Object + Marker2 {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0117, E0321, E0371.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "6b5689e8260f08fac2071f445aa1ecdff4015035", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -0,0 +1,29 @@\n+#![feature(optin_builtin_traits)]\n+\n+// Test for issue #56934 - that it is impossible to redundantly\n+// implement an auto-trait for a trait object type that contains it.\n+\n+// Positive impl variant.\n+\n+auto trait Marker1 {}\n+auto trait Marker2 {}\n+\n+trait Object: Marker1 {}\n+\n+// A supertrait marker is illegal...\n+impl Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+// ...and also a direct component.\n+impl Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+\n+// But implementing a marker if it is not present is OK.\n+impl Marker2 for dyn Object {} // OK\n+\n+// A non-principal trait-object type is orphan even in its crate.\n+unsafe impl Send for dyn Marker2 {} //~ ERROR E0117\n+\n+// And impl'ing a remote marker for a local trait object is forbidden\n+// by one of these special orphan-like rules.\n+unsafe impl Send for dyn Object {} //~ ERROR E0321\n+unsafe impl Send for dyn Object + Marker2 {} //~ ERROR E0321\n+\n+fn main() { }"}, {"sha": "78ca2f5279d634fdaf35d63dade61f1ccd21e2a8", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -0,0 +1,37 @@\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:14:1\n+   |\n+LL | impl Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n+\n+error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:16:1\n+   |\n+LL | impl Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:22:1\n+   |\n+LL | unsafe impl Send for dyn Marker2 {} //~ ERROR E0117\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   |\n+   = note: the impl does not reference only types defined in this crate\n+   = note: define and implement a trait or new type instead\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:26:1\n+   |\n+LL | unsafe impl Send for dyn Object {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n+   |\n+LL | unsafe impl Send for dyn Object + Marker2 {} //~ ERROR E0321\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0117, E0321, E0371.\n+For more information about an error, try `rustc --explain E0117`."}, {"sha": "b08fbf6f845f88d2b30656db5b132104e9e0c3cd", "filename": "src/test/ui/lint/lint-forbid-internal-unsafe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -0,0 +1,16 @@\n+#![forbid(unsafe_code)]\n+#![feature(allow_internal_unsafe)]\n+\n+#[allow_internal_unsafe]\n+//~^ ERROR: `allow_internal_unsafe` allows defining\n+macro_rules! evil {\n+    ($e:expr) => {\n+        unsafe {\n+            $e\n+        }\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", evil!(*(0 as *const u8)));\n+}"}, {"sha": "59dab119682c1a85f429094ea6a13a3c38de31c6", "filename": "src/test/ui/lint/lint-forbid-internal-unsafe.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-internal-unsafe.stderr?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -0,0 +1,14 @@\n+error: `allow_internal_unsafe` allows defining macros using unsafe without triggering the `unsafe_code` lint at their call site\n+  --> $DIR/lint-forbid-internal-unsafe.rs:4:1\n+   |\n+LL | #[allow_internal_unsafe]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-forbid-internal-unsafe.rs:1:11\n+   |\n+LL | #![forbid(unsafe_code)]\n+   |           ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "865c54be1ad7bec68f298668ae11a26ebe39f2a9", "filename": "src/test/ui/pattern/const-pat-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea6e50c1534a23cb51375552c14568db9ee130/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.rs?ref=14ea6e50c1534a23cb51375552c14568db9ee130", "patch": "@@ -1,4 +1,5 @@\n // failure-status: 101\n+// rustc-env:RUST_BACKTRACE=0\n \n // This is a repro test for an ICE in our pattern handling of constants.\n "}]}