{"sha": "95923d1676f565e6358183d5428513c1803f79c2", "node_id": "C_kwDOAAsO6NoAKDk1OTIzZDE2NzZmNTY1ZTYzNTgxODNkNTQyODUxM2MxODAzZjc5YzI", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-22T18:04:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-07-07T19:25:56Z"}, "message": "Review comments: wording", "tree": {"sha": "367d9fbc100645cda18aefcecdb25d470af908dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367d9fbc100645cda18aefcecdb25d470af908dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95923d1676f565e6358183d5428513c1803f79c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95923d1676f565e6358183d5428513c1803f79c2", "html_url": "https://github.com/rust-lang/rust/commit/95923d1676f565e6358183d5428513c1803f79c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95923d1676f565e6358183d5428513c1803f79c2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb1874cd6567b68ee6d3aba60449771cf868d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb1874cd6567b68ee6d3aba60449771cf868d5a", "html_url": "https://github.com/rust-lang/rust/commit/9cb1874cd6567b68ee6d3aba60449771cf868d5a"}], "stats": {"total": 134, "additions": 74, "deletions": 60}, "files": [{"sha": "8bdc45409f52ca0c3e40bb932499c7c8783e1cf5", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -329,32 +329,36 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         for init_idx in inits {\n             let init = &self.move_data.inits[*init_idx];\n             let span = init.span(&self.body);\n-            spans.push(span);\n+            if !span.is_dummy() {\n+                spans.push(span);\n+            }\n         }\n \n         let (binding, name, desc) =\n             match self.describe_place_with_options(used_place, IncludingDowncast(true)) {\n                 Some(name) => (format!(\"`{name}`\"), format!(\"`{name}`\"), format!(\"`{name}` \")),\n                 None => (\"value\".to_string(), \"the variable\".to_string(), String::new()),\n             };\n-        let initialized = if let InitializationRequiringAction::PartialAssignment = desired_action {\n-            // The same error is emitted for bindings that are *sometimes* initialized and the ones\n-            // that are *partially* initialized by assigning to a field of an uninitialized\n-            // binding. We differentiate between them for more accurate wording here.\n-            \"fully initialized\"\n-        } else if spans.iter().filter(|i| !i.contains(span)).count() == 0 {\n-            // We filter above to avoid misleading wording in cases like:\n-            // ```\n-            // let x;\n-            // x += 1;\n-            // ```\n-            \"initialized\"\n-        } else {\n-            \"initialized in all conditions\"\n-        };\n+        let isnt_initialized =\n+            if let InitializationRequiringAction::PartialAssignment = desired_action {\n+                // The same error is emitted for bindings that are *sometimes* initialized and the ones\n+                // that are *partially* initialized by assigning to a field of an uninitialized\n+                // binding. We differentiate between them for more accurate wording here.\n+                \"isn't fully initialized\"\n+            } else if spans.iter().filter(|i| !i.contains(span)).count() == 0 {\n+                // We filter above to avoid misleading wording in cases like the following, where `x`\n+                // has an `init`, but it is in the same place we're looking at:\n+                // ```\n+                // let x;\n+                // x += 1;\n+                // ```\n+                \"isn't initialized\"\n+            } else {\n+                \"is possibly-uninitialized\"\n+            };\n         let used = desired_action.as_general_verb_in_past_tense();\n         let mut err =\n-            struct_span_err!(self, span, E0381, \"{used} binding {desc}isn't {initialized}\");\n+            struct_span_err!(self, span, E0381, \"{used} binding {desc}{isnt_initialized}\");\n         use_spans.var_span_label_path_only(\n             &mut err,\n             format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n@@ -366,7 +370,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                  default value and mutate it, or use `std::mem::MaybeUninit`\",\n             );\n         }\n-        err.span_label(span, format!(\"{binding} {used} here but it isn't {initialized}\"));\n+        err.span_label(span, format!(\"{binding} {used} here but it {isnt_initialized}\"));\n \n         // We use the statements were the binding was initialized, and inspect the HIR to look\n         // for the branching codepaths that aren't covered, to point at them.\n@@ -2561,13 +2565,16 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                 v.visit_expr(body);\n                 if v.1 {\n                     self.errors.push((\n-                        ex.span.to(cond.span),\n+                        cond.span,\n                         format!(\n-                            \"this `if` expression might be missing an `else` arm that initializes \\\n-                             {}\",\n+                            \"if this `if` condition is `false`, {} is not initialized\",\n                             self.name,\n                         ),\n                     ));\n+                    self.errors.push((\n+                        ex.span.shrink_to_hi(),\n+                        format!(\"an `else` arm might be missing here, initializing {}\", self.name),\n+                    ));\n                 }\n             }\n             hir::ExprKind::If(cond, body, Some(other)) => {\n@@ -2584,16 +2591,17 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                             self.errors.push((\n                                 cond.span,\n                                 format!(\n-                                    \"{} is uninitialized if this condition isn't met and the \\\n-                                     `while` loop runs 0 times\",\n+                                    \"if this condition isn't met and the `while` loop runs 0 \\\n+                                     times, {} is not initialized\",\n                                     self.name\n                                 ),\n                             ));\n                         } else {\n                             self.errors.push((\n                                 body.span.shrink_to_hi().until(other.span),\n                                 format!(\n-                                    \"{} is uninitialized if this `else` arm is executed\",\n+                                    \"if the `if` condition is `false` and this `else` arm is \\\n+                                     executed, {} is not initialized\",\n                                     self.name\n                                 ),\n                             ));\n@@ -2602,7 +2610,10 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                     (false, true) => {\n                         self.errors.push((\n                             cond.span,\n-                            format!(\"{} is uninitialized if this condition is met\", self.name),\n+                            format!(\n+                                \"if this condition is `true`, {} is not initialized\",\n+                                self.name\n+                            ),\n                         ));\n                     }\n                 }\n@@ -2625,24 +2636,24 @@ impl<'b, 'v> Visitor<'v> for ConditionVisitor<'b> {\n                                 self.errors.push((\n                                     e.span,\n                                     format!(\n-                                        \"{} is uninitialized if the `for` loop runs 0 times\",\n+                                        \"if the `for` loop runs 0 times, {} is not initialized \",\n                                         self.name\n                                     ),\n                                 ));\n                             } else if let Some(guard) = &arm.guard {\n                                 self.errors.push((\n                                     arm.pat.span.to(guard.body().span),\n                                     format!(\n-                                        \"{} is uninitialized if this pattern and condition are \\\n-                                         matched\",\n+                                        \"if this pattern and condition are matched, {} is not \\\n+                                         initialized\",\n                                         self.name\n                                     ),\n                                 ));\n                             } else {\n                                 self.errors.push((\n                                     arm.pat.span,\n                                     format!(\n-                                        \"{} is uninitialized if this pattern is matched\",\n+                                        \"if this pattern is matched, {} is not initialized\",\n                                         self.name\n                                     ),\n                                 ));"}, {"sha": "12c15bf56ce22aa1b7b512b03e9922ed49d063c3", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,13 +1,15 @@\n-error[E0381]: used binding `y` isn't initialized in all conditions\n+error[E0381]: used binding `y` is possibly-uninitialized\n   --> $DIR/no-non-guaranteed-initialization.rs:9:5\n    |\n LL |     let y;\n    |         - binding declared here but left uninitialized\n LL |     if x > 5 {\n-   |        ----- this `if` expression might be missing an `else` arm that initializes `y`\n-...\n+   |        ----- if this `if` condition is `false`, `y` is not initialized\n+LL |         y = echo(10).await;\n+LL |     }\n+   |      - an `else` arm might be missing here, initializing `y`\n LL |     y\n-   |     ^ `y` used here but it isn't initialized in all conditions\n+   |     ^ `y` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "7f3d27d6091d83e8aec5fe9122e7318629861bd7", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `i` isn't initialized in all conditions\n+error[E0381]: used binding `i` is possibly-uninitialized\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n LL |     let i: isize;\n@@ -7,7 +7,7 @@ LL |\n LL |     println!(\"{}\", false && { i = 5; true });\n    |                               ----- binding initialized here in some conditions\n LL |     println!(\"{}\", i);\n-   |                    ^ `i` used here but it isn't initialized in all conditions\n+   |                    ^ `i` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "9eafc2c2a86e6b4051adef9e3e5a231c28e666c8", "filename": "src/test/ui/borrowck/borrowck-if-no-else.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,12 +1,13 @@\n-error[E0381]: used binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` is possibly-uninitialized\n   --> $DIR/borrowck-if-no-else.rs:5:9\n    |\n LL |     let x: isize; if 1 > 2 { x = 10; }\n-   |         -            ----- this `if` expression might be missing an `else` arm that initializes `x`\n-   |         |\n+   |         -            -----            - an `else` arm might be missing here, initializing `x`\n+   |         |            |\n+   |         |            if this `if` condition is `false`, `x` is not initialized\n    |         binding declared here but left uninitialized\n LL |     foo(x);\n-   |         ^ `x` used here but it isn't initialized in all conditions\n+   |         ^ `x` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "3f0fe291ca2508e44f723ca6ab88129117ad1bb3", "filename": "src/test/ui/borrowck/borrowck-if-with-else.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,13 +1,13 @@\n-error[E0381]: used binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` is possibly-uninitialized\n   --> $DIR/borrowck-if-with-else.rs:10:9\n    |\n LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     if 1 > 2 {\n-   |        ----- `x` is uninitialized if this condition is met\n+   |        ----- if this condition is `true`, `x` is not initialized\n ...\n LL |     foo(x);\n-   |         ^ `x` used here but it isn't initialized in all conditions\n+   |         ^ `x` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "0bc24f1b6932f2e56988f9d1f3d84a470ac37b55", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `i` isn't initialized in all conditions\n+error[E0381]: used binding `i` is possibly-uninitialized\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n LL |     let i: isize;\n@@ -7,7 +7,7 @@ LL |\n LL |     println!(\"{}\", false || { i = 5; true });\n    |                               ----- binding initialized here in some conditions\n LL |     println!(\"{}\", i);\n-   |                    ^ `i` used here but it isn't initialized in all conditions\n+   |                    ^ `i` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "44674febf4973b4c3929e779e62e4a8554a7947d", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,13 +1,13 @@\n-error[E0381]: used binding `v` isn't initialized in all conditions\n+error[E0381]: used binding `v` is possibly-uninitialized\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n LL |     let v;\n    |         - binding declared here but left uninitialized\n LL |     while cond {\n-   |           ---- `v` is uninitialized if this condition isn't met and the `while` loop runs 0 times\n+   |           ---- if this condition isn't met and the `while` loop runs 0 times, `v` is not initialized\n ...\n LL |     println!(\"{}\", v);\n-   |                    ^ `v` used here but it isn't initialized in all conditions\n+   |                    ^ `v` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c45235990c383c56783321d61b0e665adab05bf8", "filename": "src/test/ui/borrowck/borrowck-while.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,12 +1,12 @@\n-error[E0381]: used binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` is possibly-uninitialized\n   --> $DIR/borrowck-while.rs:4:12\n    |\n LL |     let mut x: isize;\n    |         ----- binding declared here but left uninitialized\n LL |     while 1 == 1 { x = 10; }\n-   |           ------ `x` is uninitialized if this condition isn't met and the `while` loop runs 0 times\n+   |           ------ if this condition isn't met and the `while` loop runs 0 times, `x` is not initialized\n LL |     return x;\n-   |            ^ `x` used here but it isn't initialized in all conditions\n+   |            ^ `x` used here but it is possibly-uninitialized\n \n error: aborting due to previous error\n "}, {"sha": "b7529389f0276a6f832e3e037ce449ab6b33d3f8", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,11 +1,11 @@\n-error[E0381]: used binding `x` isn't initialized in all conditions\n+error[E0381]: used binding `x` is possibly-uninitialized\n   --> $DIR/match-cfg-fake-edges.rs:21:13\n    |\n LL |     let x;\n    |         - binding declared here but left uninitialized\n ...\n LL |             x;\n-   |             ^ `x` used here but it isn't initialized in all conditions\n+   |             ^ `x` used here but it is possibly-uninitialized\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/match-cfg-fake-edges.rs:35:13"}, {"sha": "30d5a6779fcd7ba8de7b439272d0284c2a2905e4", "filename": "src/test/ui/rfc-2497-if-let-chains/chains-without-let.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fchains-without-let.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,30 +1,30 @@\n-error[E0381]: used binding `z` isn't initialized in all conditions\n+error[E0381]: used binding `z` is possibly-uninitialized\n   --> $DIR/chains-without-let.rs:3:34\n    |\n LL |     let z;\n    |         - binding declared here but left uninitialized\n LL |     if true && { z = 3; true} && z == 3 {}\n-   |                  -----           ^ `z` used here but it isn't initialized in all conditions\n+   |                  -----           ^ `z` used here but it is possibly-uninitialized\n    |                  |\n    |                  binding initialized here in some conditions\n \n-error[E0381]: used binding `z` isn't initialized in all conditions\n+error[E0381]: used binding `z` is possibly-uninitialized\n   --> $DIR/chains-without-let.rs:9:31\n    |\n LL |     let z;\n    |         - binding declared here but left uninitialized\n LL |     true && { z = 3; true} && z == 3;\n-   |               -----           ^ `z` used here but it isn't initialized in all conditions\n+   |               -----           ^ `z` used here but it is possibly-uninitialized\n    |               |\n    |               binding initialized here in some conditions\n \n-error[E0381]: used binding `z` isn't initialized in all conditions\n+error[E0381]: used binding `z` is possibly-uninitialized\n   --> $DIR/chains-without-let.rs:15:36\n    |\n LL |     let z;\n    |         - binding declared here but left uninitialized\n LL |     if false || { z = 3; false} || z == 3 {}\n-   |                   -----            ^ `z` used here but it isn't initialized in all conditions\n+   |                   -----            ^ `z` used here but it is possibly-uninitialized\n    |                   |\n    |                   binding initialized here in some conditions\n "}, {"sha": "c397385017ff487cdb2de28f6a57c40579394e12", "filename": "src/test/ui/try-block/try-block-opt-init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95923d1676f565e6358183d5428513c1803f79c2/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr?ref=95923d1676f565e6358183d5428513c1803f79c2", "patch": "@@ -1,4 +1,4 @@\n-error[E0381]: used binding `cfg_res` isn't initialized in all conditions\n+error[E0381]: used binding `cfg_res` is possibly-uninitialized\n   --> $DIR/try-block-opt-init.rs:15:5\n    |\n LL |     let cfg_res;\n@@ -8,7 +8,7 @@ LL |         cfg_res = 5;\n    |         ----------- binding initialized here in some conditions\n ...\n LL |     assert_eq!(cfg_res, 5);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ `cfg_res` used here but it isn't initialized in all conditions\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ `cfg_res` used here but it is possibly-uninitialized\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}]}