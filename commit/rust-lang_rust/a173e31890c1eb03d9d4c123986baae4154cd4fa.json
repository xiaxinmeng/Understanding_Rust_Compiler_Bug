{"sha": "a173e31890c1eb03d9d4c123986baae4154cd4fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzNlMzE4OTBjMWViMDNkOWQ0YzEyMzk4NmJhYWU0MTU0Y2Q0ZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T15:40:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T15:40:28Z"}, "message": "Make assists use ImportsLocator directly", "tree": {"sha": "a2b4de01cd6128b70f0fc0cf4156b6537304ae56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b4de01cd6128b70f0fc0cf4156b6537304ae56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a173e31890c1eb03d9d4c123986baae4154cd4fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a173e31890c1eb03d9d4c123986baae4154cd4fa", "html_url": "https://github.com/rust-lang/rust/commit/a173e31890c1eb03d9d4c123986baae4154cd4fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a173e31890c1eb03d9d4c123986baae4154cd4fa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0f0fc31e84deb7aebf8ab6ec510051d531c9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f0fc31e84deb7aebf8ab6ec510051d531c9f2", "html_url": "https://github.com/rust-lang/rust/commit/ff0f0fc31e84deb7aebf8ab6ec510051d531c9f2"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "f5d3f8ca23fadad46942e48792e37904795c8b8d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a173e31890c1eb03d9d4c123986baae4154cd4fa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a173e31890c1eb03d9d4c123986baae4154cd4fa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a173e31890c1eb03d9d4c123986baae4154cd4fa", "patch": "@@ -963,6 +963,7 @@ dependencies = [\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n+ \"ra_ide_db\",\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n@@ -1165,7 +1166,6 @@ dependencies = [\n  \"log\",\n  \"once_cell\",\n  \"proptest\",\n- \"ra_assists\",\n  \"ra_cfg\",\n  \"ra_db\",\n  \"ra_fmt\","}, {"sha": "6973038d4e99dc3c8551d8f140646a54d331340e", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=a173e31890c1eb03d9d4c123986baae4154cd4fa", "patch": "@@ -18,5 +18,6 @@ ra_text_edit = { path = \"../ra_text_edit\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n ra_db = { path = \"../ra_db\" }\n+ra_ide_db = { path = \"../ra_ide_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "0ebb8e8b018143dea4c20b03b29d4ab4164ddf05", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=a173e31890c1eb03d9d4c123986baae4154cd4fa", "patch": "@@ -16,6 +16,7 @@ pub mod ast_transform;\n use either::Either;\n use hir::{db::HirDatabase, ModuleDef};\n use ra_db::FileRange;\n+use ra_ide_db::{imports_locator::ImportsLocatorIde, RootDatabase};\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n@@ -88,20 +89,19 @@ pub trait ImportsLocator {\n     fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef>;\n }\n \n+impl ImportsLocator for ImportsLocatorIde<'_> {\n+    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n+        self.find_imports(name_to_import)\n+    }\n+}\n+\n /// Return all the assists applicable at the given position\n /// and additional assists that need the imports locator functionality to work.\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists_with_imports_locator<H, F>(\n-    db: &H,\n-    range: FileRange,\n-    mut imports_locator: F,\n-) -> Vec<ResolvedAssist>\n-where\n-    H: HirDatabase + 'static,\n-    F: ImportsLocator,\n-{\n+pub fn assists_with_imports_locator(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n+    let mut imports_locator = ImportsLocatorIde::new(db);\n     AssistCtx::with_ctx(db, range, true, |ctx| {\n         let mut assists = assists::all()\n             .iter()"}, {"sha": "6ee617e79dd37018772dd701b858593b9a2b9921", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=a173e31890c1eb03d9d4c123986baae4154cd4fa", "patch": "@@ -3,7 +3,7 @@\n use either::Either;\n use ra_assists::{AssistAction, AssistLabel};\n use ra_db::{FilePosition, FileRange};\n-use ra_ide_db::{imports_locator::ImportsLocatorIde, RootDatabase};\n+use ra_ide_db::RootDatabase;\n \n use crate::{FileId, SourceChange, SourceFileEdit};\n \n@@ -17,7 +17,7 @@ pub struct Assist {\n }\n \n pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n-    ra_assists::assists_with_imports_locator(db, frange, ImportsLocatorIde::new(db))\n+    ra_assists::assists_with_imports_locator(db, frange)\n         .into_iter()\n         .map(|assist| {\n             let file_id = frange.file_id;"}, {"sha": "716e88bc1bf0ea34a35117e383ee0714afb925ea", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=a173e31890c1eb03d9d4c123986baae4154cd4fa", "patch": "@@ -32,7 +32,6 @@ ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n test_utils = { path = \"../test_utils\" }\n-ra_assists = { path = \"../ra_assists\" }\n \n # ra_ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "d77fc53f3a3fccd95c8b6acd3723f618ca384e64", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a173e31890c1eb03d9d4c123986baae4154cd4fa/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=a173e31890c1eb03d9d4c123986baae4154cd4fa", "patch": "@@ -2,7 +2,6 @@\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n use hir::{db::HirDatabase, ModuleDef, SourceBinder};\n-use ra_assists::ImportsLocator;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n@@ -22,29 +21,7 @@ impl<'a> ImportsLocatorIde<'a> {\n         Self { source_binder: SourceBinder::new(db) }\n     }\n \n-    fn get_name_definition(\n-        &mut self,\n-        db: &impl HirDatabase,\n-        import_candidate: &FileSymbol,\n-    ) -> Option<NameKind> {\n-        let _p = profile(\"get_name_definition\");\n-        let file_id = import_candidate.file_id.into();\n-        let candidate_node = import_candidate.ptr.to_node(&db.parse_or_expand(file_id)?);\n-        let candidate_name_node = if candidate_node.kind() != NAME {\n-            candidate_node.children().find(|it| it.kind() == NAME)?\n-        } else {\n-            candidate_node\n-        };\n-        classify_name(\n-            &mut self.source_binder,\n-            hir::InFile { file_id, value: &ast::Name::cast(candidate_name_node)? },\n-        )\n-        .map(|it| it.kind)\n-    }\n-}\n-\n-impl ImportsLocator for ImportsLocatorIde<'_> {\n-    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n+    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.source_binder.db;\n \n@@ -72,4 +49,24 @@ impl ImportsLocator for ImportsLocatorIde<'_> {\n             })\n             .collect()\n     }\n+\n+    fn get_name_definition(\n+        &mut self,\n+        db: &impl HirDatabase,\n+        import_candidate: &FileSymbol,\n+    ) -> Option<NameKind> {\n+        let _p = profile(\"get_name_definition\");\n+        let file_id = import_candidate.file_id.into();\n+        let candidate_node = import_candidate.ptr.to_node(&db.parse_or_expand(file_id)?);\n+        let candidate_name_node = if candidate_node.kind() != NAME {\n+            candidate_node.children().find(|it| it.kind() == NAME)?\n+        } else {\n+            candidate_node\n+        };\n+        classify_name(\n+            &mut self.source_binder,\n+            hir::InFile { file_id, value: &ast::Name::cast(candidate_name_node)? },\n+        )\n+        .map(|it| it.kind)\n+    }\n }"}]}