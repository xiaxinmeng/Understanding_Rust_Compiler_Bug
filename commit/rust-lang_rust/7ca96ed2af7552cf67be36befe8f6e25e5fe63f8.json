{"sha": "7ca96ed2af7552cf67be36befe8f6e25e5fe63f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYTk2ZWQyYWY3NTUyY2Y2N2JlMzZiZWZlOGY2ZTI1ZTVmZTYzZjg=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-10T13:11:12Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-10T13:11:22Z"}, "message": "rewrite the comments", "tree": {"sha": "71a1fca9c2786817bc29d02161d495f7fc8fa779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a1fca9c2786817bc29d02161d495f7fc8fa779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8", "html_url": "https://github.com/rust-lang/rust/commit/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ffa2da18648afa75f272dfbd0182232c2ca87c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ffa2da18648afa75f272dfbd0182232c2ca87c1", "html_url": "https://github.com/rust-lang/rust/commit/0ffa2da18648afa75f272dfbd0182232c2ca87c1"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "7fa58dcd5f44f0aaf4b7bf5709be61d1bdb45559", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca96ed2af7552cf67be36befe8f6e25e5fe63f8/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7ca96ed2af7552cf67be36befe8f6e25e5fe63f8", "patch": "@@ -29,20 +29,28 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n         let parent_node = tcx.hir().get(parent_node_id);\n \n         match parent_node {\n-            // This matches on types who's paths couldn't be resolved without typeck'ing e.g.\n+            // This match arm is for when the def_id appears in a GAT whose\n+            // path can't be resolved without typechecking e.g.\n             //\n             // trait Foo {\n-            //   type Assoc<const N1: usize>;\n+            //   type Assoc<const N: usize>;\n             //   fn foo() -> Self::Assoc<3>;\n-            //   // note: if the def_id argument is the 3 then in this example\n-            //   // parent_node would be the node for Self::Assoc<_>\n             // }\n-            // We didnt write <Self as Foo>::Assoc so the Self::Assoc<_> is lowered to QPath::TypeRelative.\n+            //\n+            // In the above code we would call this query with the def_id of 3 and\n+            // the parent_node we match on would be the hir node for Self::Assoc<3>\n+            //\n+            // `Self::Assoc<3>` cant be resolved without typchecking here as we\n+            // didnt write <Self as Foo>::Assoc<3>. If we did then another match\n+            // arm would handle this.\n+            //\n             // I believe this match arm is only needed for GAT but I am not 100% sure - BoxyUwU\n             Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n-                // Walk up from the parent_node to find an item so that\n-                // we can resolve the relative path to an actual associated type.\n-                // For the code example above, this item would be the Foo trait.\n+                // Find the Item containing the associated type so we can create an ItemCtxt.\n+                // Using the ItemCtxt convert the HIR for the unresolved assoc type into a\n+                // ty which is a fully resolved projection.\n+                // For the code example above, this would mean converting Self::Assoc<3>\n+                // into a ty::Projection(<Self as Foo>::Assoc<3>)\n                 let item_hir_id = tcx\n                     .hir()\n                     .parent_iter(hir_id)\n@@ -52,11 +60,12 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     .unwrap();\n                 let item_did = tcx.hir().local_def_id(item_hir_id).to_def_id();\n                 let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n-\n-                // This ty will be the actual associated type so that we can\n-                // go through its generics to find which param our def_id corresponds to.\n-                // For the code example above, this ty would be the Assoc<const N1: usize>.\n                 let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n+\n+                // Iterate through the generics of the projection to find the one that corresponds to\n+                // the def_id that this query was called with. We filter to only const args here as a\n+                // precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n+                // but it can't hurt to be safe ^^\n                 if let ty::Projection(projection) = ty.kind() {\n                     let generics = tcx.generics_of(projection.item_def_id);\n "}]}