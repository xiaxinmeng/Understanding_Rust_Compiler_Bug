{"sha": "9e5453835572784dcdcdf63a4723254507282dc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNTQ1MzgzNTU3Mjc4NGRjZGNkZjYzYTQ3MjMyNTQ1MDcyODJkYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-05T14:09:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-05T14:09:24Z"}, "message": "Auto merge of #6849 - flip1995:dogfood-fix, r=matthiaskrgr\n\nDogfood and CI fixes\n\nThe CI fix is practically #6829 rebased and squashed into one commit\n\nDogfood fix is a follow up of #6802\n\nr? `@matthiaskrgr` for lintcheck changes\n\n(best reviewed with whitespace changes hidden)\n\nchangelog: none", "tree": {"sha": "c2deafa4b9c83d00f1b5150135f85cd2a4d1b6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2deafa4b9c83d00f1b5150135f85cd2a4d1b6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e5453835572784dcdcdf63a4723254507282dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5453835572784dcdcdf63a4723254507282dc7", "html_url": "https://github.com/rust-lang/rust/commit/9e5453835572784dcdcdf63a4723254507282dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e5453835572784dcdcdf63a4723254507282dc7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e6ce8035a8c12d2342c68814f00529a410b77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e6ce8035a8c12d2342c68814f00529a410b77d", "html_url": "https://github.com/rust-lang/rust/commit/f0e6ce8035a8c12d2342c68814f00529a410b77d"}, {"sha": "74eb44834cc12ce51396d94e98b04fdd0ad9bb64", "url": "https://api.github.com/repos/rust-lang/rust/commits/74eb44834cc12ce51396d94e98b04fdd0ad9bb64", "html_url": "https://github.com/rust-lang/rust/commit/74eb44834cc12ce51396d94e98b04fdd0ad9bb64"}], "stats": {"total": 286, "additions": 160, "deletions": 126}, "files": [{"sha": "32103f59d8b0e14d389e4b714c8fc419e9999ba9", "filename": ".github/workflows/clippy.yml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -27,6 +27,7 @@ env:\n \n jobs:\n   base:\n+    # NOTE: If you modify this job, make sure you copy the changes to clippy_bors.yml\n     runs-on: ubuntu-latest\n \n     steps:\n@@ -50,9 +51,6 @@ jobs:\n     - name: Build\n       run: cargo build --features deny-warnings,internal-lints\n \n-    - name: Test \"--fix -Zunstable-options\"\n-      run: cargo run --features deny-warnings,internal-lints --bin cargo-clippy -- clippy --fix -Zunstable-options\n-\n     - name: Test\n       run: cargo test --features deny-warnings,internal-lints\n \n@@ -72,6 +70,10 @@ jobs:\n       run: ../target/debug/cargo-clippy\n       working-directory: clippy_workspace_tests\n \n+    - name: Test cargo-clippy --fix\n+      run: ../target/debug/cargo-clippy clippy --fix -Zunstable-options\n+      working-directory: clippy_workspace_tests\n+\n     - name: Test clippy-driver\n       run: bash .github/driver.sh\n       env:"}, {"sha": "47253eecc4c4c03ccbcb2fbd10bf32ea15d22dc2", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -72,6 +72,7 @@ jobs:\n \n     runs-on: ${{ matrix.os }}\n \n+    # NOTE: If you modify this job, make sure you copy the changes to clippy.yml\n     steps:\n     # Setup\n     - uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n@@ -131,11 +132,22 @@ jobs:\n       run: ../target/debug/cargo-clippy\n       working-directory: clippy_workspace_tests\n \n+    - name: Test cargo-clippy --fix\n+      run: ../target/debug/cargo-clippy clippy --fix -Zunstable-options\n+      working-directory: clippy_workspace_tests\n+\n     - name: Test clippy-driver\n       run: bash .github/driver.sh\n       env:\n         OS: ${{ runner.os }}\n \n+    - name: Test cargo dev new lint\n+      run: |\n+        cargo dev new_lint --name new_early_pass --pass early\n+        cargo dev new_lint --name new_late_pass --pass late\n+        cargo check\n+        git reset --hard HEAD\n+\n   integration_build:\n     needs: changelog\n     runs-on: ubuntu-latest"}, {"sha": "0244ff2b6c27bd262d2e12178233dfdf65497814", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -530,7 +530,7 @@ fn test_gen_deprecated() {\n #[should_panic]\n fn test_gen_deprecated_fail() {\n     let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n-    let _ = gen_deprecated(lints.iter());\n+    let _deprecated_lints = gen_deprecated(lints.iter());\n }\n \n #[test]"}, {"sha": "f01f14eb458fd96dfb504ea957652fffd8bf1c33", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -6,13 +6,12 @@\n \n #![cfg(feature = \"lintcheck\")]\n #![allow(clippy::filter_map, clippy::collapsible_else_if)]\n-#![allow(clippy::blocks_in_if_conditions)] // FP on `if x.iter().any(|x| ...)`\n \n use crate::clippy_project_root;\n \n-use std::collections::HashMap;\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::{collections::HashMap, io::ErrorKind};\n use std::{\n     env, fmt,\n     fs::write,\n@@ -116,9 +115,7 @@ impl CrateSource {\n                 // url to download the crate from crates.io\n                 let url = format!(\"https://crates.io/api/v1/crates/{}/{}/download\", name, version);\n                 println!(\"Downloading and extracting {} {} from {}\", name, version, url);\n-                let _ = std::fs::create_dir(\"target/lintcheck/\");\n-                let _ = std::fs::create_dir(&krate_download_dir);\n-                let _ = std::fs::create_dir(&extract_dir);\n+                create_dirs(&krate_download_dir, &extract_dir);\n \n                 let krate_file_path = krate_download_dir.join(format!(\"{}-{}.crate.tar.gz\", name, version));\n                 // don't download/extract if we already have done so\n@@ -198,18 +195,18 @@ impl CrateSource {\n                 // the source path of the crate we copied,  ${copy_dest}/crate_name\n                 let crate_root = copy_dest.join(name); // .../crates/local_crate\n \n-                if !crate_root.exists() {\n-                    println!(\"Copying {} to {}\", path.display(), copy_dest.display());\n-\n-                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).unwrap_or_else(|_| {\n-                        panic!(\"Failed to copy from {}, to  {}\", path.display(), crate_root.display())\n-                    });\n-                } else {\n+                if crate_root.exists() {\n                     println!(\n                         \"Not copying {} to {}, destination already exists\",\n                         path.display(),\n                         crate_root.display()\n                     );\n+                } else {\n+                    println!(\"Copying {} to {}\", path.display(), copy_dest.display());\n+\n+                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).unwrap_or_else(|_| {\n+                        panic!(\"Failed to copy from {}, to  {}\", path.display(), crate_root.display())\n+                    });\n                 }\n \n                 Crate {\n@@ -236,8 +233,8 @@ impl Crate {\n         // advance the atomic index by one\n         let index = target_dir_index.fetch_add(1, Ordering::SeqCst);\n         // \"loop\" the index within 0..thread_limit\n-        let target_dir_index = index % thread_limit;\n-        let perc = ((index * 100) as f32 / total_crates_to_lint as f32) as u8;\n+        let thread_index = index % thread_limit;\n+        let perc = (index * 100) / total_crates_to_lint;\n \n         if thread_limit == 1 {\n             println!(\n@@ -247,7 +244,7 @@ impl Crate {\n         } else {\n             println!(\n                 \"{}/{} {}% Linting {} {} in target dir {:?}\",\n-                index, total_crates_to_lint, perc, &self.name, &self.version, target_dir_index\n+                index, total_crates_to_lint, perc, &self.name, &self.version, thread_index\n             );\n         }\n \n@@ -269,7 +266,7 @@ impl Crate {\n             // use the looping index to create individual target dirs\n             .env(\n                 \"CARGO_TARGET_DIR\",\n-                shared_target_dir.join(format!(\"_{:?}\", target_dir_index)),\n+                shared_target_dir.join(format!(\"_{:?}\", thread_index)),\n             )\n             // lint warnings will look like this:\n             // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n@@ -529,6 +526,10 @@ fn lintcheck_needs_rerun(lintcheck_logs_path: &Path) -> bool {\n }\n \n /// lintchecks `main()` function\n+///\n+/// # Panics\n+///\n+/// This function panics if the clippy binaries don't exist.\n pub fn run(clap_config: &ArgMatches) {\n     let config = LintcheckConfig::from_clap(clap_config);\n \n@@ -579,9 +580,9 @@ pub fn run(clap_config: &ArgMatches) {\n         // if we don't have the specified crate in the .toml, throw an error\n         if !crates.iter().any(|krate| {\n             let name = match krate {\n-                CrateSource::CratesIo { name, .. } => name,\n-                CrateSource::Git { name, .. } => name,\n-                CrateSource::Path { name, .. } => name,\n+                CrateSource::CratesIo { name, .. } | CrateSource::Git { name, .. } | CrateSource::Path { name, .. } => {\n+                    name\n+                },\n             };\n             name == only_one_crate\n         }) {\n@@ -597,8 +598,7 @@ pub fn run(clap_config: &ArgMatches) {\n             .into_iter()\n             .map(|krate| krate.download_and_extract())\n             .filter(|krate| krate.name == only_one_crate)\n-            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1))\n-            .flatten()\n+            .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1))\n             .collect()\n     } else {\n         if config.max_jobs > 1 {\n@@ -621,17 +621,15 @@ pub fn run(clap_config: &ArgMatches) {\n             crates\n                 .into_par_iter()\n                 .map(|krate| krate.download_and_extract())\n-                .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates))\n-                .flatten()\n+                .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates))\n                 .collect()\n         } else {\n             // run sequential\n             let num_crates = crates.len();\n             crates\n                 .into_iter()\n                 .map(|krate| krate.download_and_extract())\n-                .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates))\n-                .flatten()\n+                .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates))\n                 .collect()\n         }\n     };\n@@ -646,7 +644,7 @@ pub fn run(clap_config: &ArgMatches) {\n         .map(|w| (&w.crate_name, &w.message))\n         .collect();\n \n-    let mut all_msgs: Vec<String> = clippy_warnings.iter().map(|warning| warning.to_string()).collect();\n+    let mut all_msgs: Vec<String> = clippy_warnings.iter().map(ToString::to_string).collect();\n     all_msgs.sort();\n     all_msgs.push(\"\\n\\n\\n\\nStats:\\n\".into());\n     all_msgs.push(stats_formatted);\n@@ -673,13 +671,13 @@ fn read_stats_from_file(file_path: &Path) -> HashMap<String, usize> {\n         },\n     };\n \n-    let lines: Vec<String> = file_content.lines().map(|l| l.to_string()).collect();\n+    let lines: Vec<String> = file_content.lines().map(ToString::to_string).collect();\n \n     // search for the beginning \"Stats:\" and the end \"ICEs:\" of the section we want\n     let start = lines.iter().position(|line| line == \"Stats:\").unwrap();\n     let end = lines.iter().position(|line| line == \"ICEs:\").unwrap();\n \n-    let stats_lines = &lines[start + 1..=end - 1];\n+    let stats_lines = &lines[start + 1..end];\n \n     stats_lines\n         .iter()\n@@ -738,6 +736,29 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n         });\n }\n \n+/// Create necessary directories to run the lintcheck tool.\n+///\n+/// # Panics\n+///\n+/// This function panics if creating one of the dirs fails.\n+fn create_dirs(krate_download_dir: &Path, extract_dir: &Path) {\n+    std::fs::create_dir(\"target/lintcheck/\").unwrap_or_else(|err| {\n+        if err.kind() != ErrorKind::AlreadyExists {\n+            panic!(\"cannot create lintcheck target dir\");\n+        }\n+    });\n+    std::fs::create_dir(&krate_download_dir).unwrap_or_else(|err| {\n+        if err.kind() != ErrorKind::AlreadyExists {\n+            panic!(\"cannot create crate download dir\");\n+        }\n+    });\n+    std::fs::create_dir(&extract_dir).unwrap_or_else(|err| {\n+        if err.kind() != ErrorKind::AlreadyExists {\n+            panic!(\"cannot create crate extraction dir\");\n+        }\n+    });\n+}\n+\n #[test]\n fn lintcheck_test() {\n     let args = ["}, {"sha": "29d2450618a7e7ef5b3c7554b2cd35e7aa513bc5", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -17,28 +17,26 @@ pub(super) fn check<'tcx>(\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n-            {\n-                span_lint_and_then(\n-                    cx,\n-                    TRANSMUTE_INT_TO_CHAR,\n-                    e.span,\n-                    &format!(\"transmute from a `{}` to a `char`\", from_ty),\n-                    |diag| {\n-                        let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                        let arg = if let ty::Int(_) = from_ty.kind() {\n-                            arg.as_ty(ast::UintTy::U32.name_str())\n-                        } else {\n-                            arg\n-                        };\n-                        diag.span_suggestion(\n-                            e.span,\n-                            \"consider using\",\n-                            format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n-                            Applicability::Unspecified,\n-                        );\n-                    },\n-                )\n-            };\n+            span_lint_and_then(\n+                cx,\n+                TRANSMUTE_INT_TO_CHAR,\n+                e.span,\n+                &format!(\"transmute from a `{}` to a `char`\", from_ty),\n+                |diag| {\n+                    let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n+                    let arg = if let ty::Int(_) = from_ty.kind() {\n+                        arg.as_ty(ast::UintTy::U32.name_str())\n+                    } else {\n+                        arg\n+                    };\n+                    diag.span_suggestion(\n+                        e.span,\n+                        \"consider using\",\n+                        format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()),\n+                        Applicability::Unspecified,\n+                    );\n+                },\n+            );\n             true\n         },\n         _ => false,"}, {"sha": "f5dbbbe33bc640e5e1ca474875d1a92cacc1498d", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check<'tcx>(\n     qpath: &'tcx QPath<'_>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n-        (ty::RawPtr(from_pty), ty::Ref(_, to_ref_ty, mutbl)) => {\n+        (ty::RawPtr(from_ptr_ty), ty::Ref(_, to_ref_ty, mutbl)) => {\n             span_lint_and_then(\n                 cx,\n                 TRANSMUTE_PTR_TO_REF,\n@@ -34,7 +34,7 @@ pub(super) fn check<'tcx>(\n                         (\"&*\", \"*const\")\n                     };\n \n-                    let arg = if from_pty.ty == *to_ref_ty {\n+                    let arg = if from_ptr_ty.ty == *to_ref_ty {\n                         arg\n                     } else {\n                         arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, to_ref_ty)))"}, {"sha": "01b00bb0a222998c1df3ce3b6f29c62ce04ffcab", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 54, "deletions": 57, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -18,70 +18,67 @@ pub(super) fn check<'tcx>(\n ) -> bool {\n     let mut triggered = false;\n \n-    match (&from_ty.kind(), &to_ty.kind()) {\n-        (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) => {\n-            if_chain! {\n-                if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n-                if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n-                if from_mutbl == to_mutbl;\n-                then {\n-                    let postfix = if *from_mutbl == Mutability::Mut {\n-                        \"_mut\"\n-                    } else {\n-                        \"\"\n-                    };\n+    if let (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) = (&from_ty.kind(), &to_ty.kind()) {\n+        if_chain! {\n+            if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n+            if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n+            if from_mutbl == to_mutbl;\n+            then {\n+                let postfix = if *from_mutbl == Mutability::Mut {\n+                    \"_mut\"\n+                } else {\n+                    \"\"\n+                };\n \n-                    span_lint_and_sugg(\n+                span_lint_and_sugg(\n+                    cx,\n+                    TRANSMUTE_BYTES_TO_STR,\n+                    e.span,\n+                    &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                    \"consider using\",\n+                    format!(\n+                        \"std::str::from_utf8{}({}).unwrap()\",\n+                        postfix,\n+                        snippet(cx, args[0].span, \"..\"),\n+                    ),\n+                    Applicability::Unspecified,\n+                );\n+                triggered = true;\n+            } else {\n+                if (cx.tcx.erase_regions(from_ty) != cx.tcx.erase_regions(to_ty))\n+                    && !const_context {\n+                    span_lint_and_then(\n                         cx,\n-                        TRANSMUTE_BYTES_TO_STR,\n+                        TRANSMUTE_PTR_TO_PTR,\n                         e.span,\n-                        &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n-                        \"consider using\",\n-                        format!(\n-                            \"std::str::from_utf8{}({}).unwrap()\",\n-                            postfix,\n-                            snippet(cx, args[0].span, \"..\"),\n-                        ),\n-                        Applicability::Unspecified,\n+                        \"transmute from a reference to a reference\",\n+                        |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                            let ty_from_and_mut = ty::TypeAndMut {\n+                                ty: ty_from,\n+                                mutbl: *from_mutbl\n+                            };\n+                            let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: *to_mutbl };\n+                            let sugg_paren = arg\n+                                .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n+                                .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n+                            let sugg = if *to_mutbl == Mutability::Mut {\n+                                sugg_paren.mut_addr_deref()\n+                            } else {\n+                                sugg_paren.addr_deref()\n+                            };\n+                            diag.span_suggestion(\n+                                e.span,\n+                                \"try\",\n+                                sugg.to_string(),\n+                                Applicability::Unspecified,\n+                            );\n+                        },\n                     );\n-                    triggered = true;\n-                } else {\n-                    if (cx.tcx.erase_regions(from_ty) != cx.tcx.erase_regions(to_ty))\n-                        && !const_context {\n-                        span_lint_and_then(\n-                            cx,\n-                            TRANSMUTE_PTR_TO_PTR,\n-                            e.span,\n-                            \"transmute from a reference to a reference\",\n-                            |diag| if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                let ty_from_and_mut = ty::TypeAndMut {\n-                                    ty: ty_from,\n-                                    mutbl: *from_mutbl\n-                                };\n-                                let ty_to_and_mut = ty::TypeAndMut { ty: ty_to, mutbl: *to_mutbl };\n-                                let sugg_paren = arg\n-                                    .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n-                                    .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n-                                let sugg = if *to_mutbl == Mutability::Mut {\n-                                    sugg_paren.mut_addr_deref()\n-                                } else {\n-                                    sugg_paren.addr_deref()\n-                                };\n-                                diag.span_suggestion(\n-                                    e.span,\n-                                    \"try\",\n-                                    sugg.to_string(),\n-                                    Applicability::Unspecified,\n-                                );\n-                            },\n-                        );\n \n-                        triggered = true;\n-                    }\n+                    triggered = true;\n                 }\n             }\n-        },\n-        _ => {},\n+        }\n     }\n \n     triggered"}, {"sha": "f0523cec6211d7a8eb74a5dec59288a4421a3663", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -265,7 +265,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             let hir = cx.tcx.hir();\n             let id = hir.get_parent_node(hir_ty.hir_id);\n \n-            if !hir.opt_span(id).map(in_macro).unwrap_or(false) {\n+            if !hir.opt_span(id).map_or(false, in_macro) {\n                 match hir.find(id) {\n                     Some(Node::Expr(Expr {\n                         kind: ExprKind::Path(QPath::TypeRelative(_, segment)),"}, {"sha": "7bb80b1196e5900dd2169a91e6d7ab5977c918d6", "filename": "src/main.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -92,12 +92,6 @@ impl ClippyCmd {\n             panic!(\"Usage of `--fix` requires `-Z unstable-options`\");\n         }\n \n-        // Run the dogfood tests directly on nightly cargo. This is required due\n-        // to a bug in rustup.rs when running cargo on custom toolchains. See issue #3118.\n-        if env::var_os(\"CLIPPY_DOGFOOD\").is_some() && cfg!(windows) {\n-            args.insert(0, \"+nightly\".to_string());\n-        }\n-\n         let mut clippy_args: Vec<String> = old_args.collect();\n         if cargo_subcommand == \"fix\" && !clippy_args.iter().any(|arg| arg == \"--no-deps\") {\n             clippy_args.push(\"--no-deps\".into());"}, {"sha": "89526648d2e03e3092bbb4741fa7b614a1464a35", "filename": "tests/dogfood.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e5453835572784dcdcdf63a4723254507282dc7/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5453835572784dcdcdf63a4723254507282dc7/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=9e5453835572784dcdcdf63a4723254507282dc7", "patch": "@@ -23,10 +23,9 @@ fn dogfood_clippy() {\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n-        .arg(\"clippy-preview\")\n+        .arg(\"clippy\")\n         .arg(\"--all-targets\")\n         .arg(\"--all-features\")\n-        .args(&[\"-p\", \"clippy_lints\", \"-p\", \"clippy_utils\", \"-p\", \"rustc_tools_util\"])\n         .arg(\"--\")\n         .args(&[\"-D\", \"clippy::all\"])\n         .args(&[\"-D\", \"clippy::pedantic\"])\n@@ -125,19 +124,30 @@ fn dogfood_subprojects() {\n         \"clippy_workspace_tests/subcrate\",\n         \"clippy_workspace_tests/subcrate/src\",\n         \"clippy_dev\",\n+        \"clippy_lints\",\n+        \"clippy_utils\",\n         \"rustc_tools_util\",\n     ] {\n-        let output = Command::new(&*CLIPPY_PATH)\n+        let mut command = Command::new(&*CLIPPY_PATH);\n+        command\n             .current_dir(root_dir.join(d))\n             .env(\"CLIPPY_DOGFOOD\", \"1\")\n             .env(\"CARGO_INCREMENTAL\", \"0\")\n             .arg(\"clippy\")\n+            .arg(\"--all-targets\")\n+            .arg(\"--all-features\")\n             .arg(\"--\")\n             .args(&[\"-D\", \"clippy::all\"])\n             .args(&[\"-D\", \"clippy::pedantic\"])\n-            .arg(\"-Cdebuginfo=0\") // disable debuginfo to generate less data in the target dir\n-            .output()\n-            .unwrap();\n+            .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n+\n+        // internal lints only exist if we build with the internal-lints feature\n+        if cfg!(feature = \"internal-lints\") {\n+            command.args(&[\"-D\", \"clippy::internal\"]);\n+        }\n+\n+        let output = command.output().unwrap();\n+\n         println!(\"status: {}\", output.status);\n         println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n         println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));"}]}