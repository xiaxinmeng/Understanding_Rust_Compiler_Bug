{"sha": "67d30312d0741d3bcc45d794dc8c333f1a7d9ed8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZDMwMzEyZDA3NDFkM2JjYzQ1ZDc5NGRjOGMzMzNmMWE3ZDllZDg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T22:18:26Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T22:18:26Z"}, "message": "Simplify the code further", "tree": {"sha": "47c7d960b687405759fc8a2010fef3b21d3f5343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47c7d960b687405759fc8a2010fef3b21d3f5343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8", "html_url": "https://github.com/rust-lang/rust/commit/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addb61df36bff1e54e89c103922774e6f9dd4f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/addb61df36bff1e54e89c103922774e6f9dd4f21", "html_url": "https://github.com/rust-lang/rust/commit/addb61df36bff1e54e89c103922774e6f9dd4f21"}], "stats": {"total": 80, "additions": 35, "deletions": 45}, "files": [{"sha": "b426fc10700cc15ab2ffc2b90198492e40f7fd49", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d30312d0741d3bcc45d794dc8c333f1a7d9ed8/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=67d30312d0741d3bcc45d794dc8c333f1a7d9ed8", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use anyhow::{anyhow, bail, Context, Result};\n+use anyhow::{bail, Context, Result};\n use std::{\n     env,\n     path::{Path, PathBuf},\n@@ -48,17 +48,6 @@ impl Sysroot {\n \n     pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n         let src = get_or_install_rust_src(cargo_toml)?;\n-\n-        if !src.exists() {\n-            Err(anyhow!(\n-                \"can't load standard library from sysroot\\n\\\n-                {}\\n\\\n-                (discovered via `rustc --print sysroot`)\\n\\\n-                try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-                src.display(),\n-            ))?;\n-        }\n-\n         let mut sysroot = Sysroot { crates: Arena::default() };\n         for name in SYSROOT_CRATES.trim().lines() {\n             let root = src.join(format!(\"lib{}\", name)).join(\"lib.rs\");\n@@ -91,33 +80,7 @@ impl Sysroot {\n }\n \n fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n-    fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n-        if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n-            return Ok(path.into());\n-        }\n-\n-        let rustc_output = Command::new(\"rustc\")\n-            .current_dir(cargo_toml.parent().unwrap())\n-            .args(&[\"--print\", \"sysroot\"])\n-            .output()\n-            .context(\"rustc --print sysroot failed\")?;\n-        if !rustc_output.status.success() {\n-            match rustc_output.status.code() {\n-                Some(code) => bail!(\n-                    \"failed to locate sysroot: rustc --print sysroot exited with code {}\",\n-                    code\n-                ),\n-                None => {\n-                    bail!(\"failed to locate sysroot: rustc --print sysroot terminated by signal\")\n-                }\n-            };\n-        }\n-        let stdout = String::from_utf8(rustc_output.stdout)?;\n-        let sysroot_path = Path::new(stdout.trim());\n-        Ok(sysroot_path.join(\"lib/rustlib/src/rust/src\"))\n-    }\n-\n-    fn try_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n+    fn try_install_rust_src(cargo_toml: &Path) -> Result<()> {\n         let rustup_output = Command::new(\"rustup\")\n             .current_dir(cargo_toml.parent().unwrap())\n             .args(&[\"component\", \"add\", \"rust-src\"])\n@@ -134,15 +97,42 @@ fn get_or_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n                 ),\n             };\n         }\n-        try_find_src_path(cargo_toml)\n+        Ok(())\n     }\n \n-    let src = try_find_src_path(cargo_toml)?;\n-    if !src.exists() {\n-        try_install_rust_src(cargo_toml)\n-    } else {\n-        Ok(src)\n+    if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n+        return Ok(path.into());\n+    }\n+    let rustc_output = Command::new(\"rustc\")\n+        .current_dir(cargo_toml.parent().unwrap())\n+        .args(&[\"--print\", \"sysroot\"])\n+        .output()\n+        .context(\"rustc --print sysroot failed\")?;\n+    if !rustc_output.status.success() {\n+        match rustc_output.status.code() {\n+            Some(code) => {\n+                bail!(\"failed to locate sysroot: rustc --print sysroot exited with code {}\", code)\n+            }\n+            None => bail!(\"failed to locate sysroot: rustc --print sysroot terminated by signal\"),\n+        };\n+    }\n+    let stdout = String::from_utf8(rustc_output.stdout)?;\n+    let sysroot_path = Path::new(stdout.trim());\n+    let src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n+\n+    if !src_path.exists() {\n+        try_install_rust_src(cargo_toml)?\n+    }\n+    if !src_path.exists() {\n+        bail!(\n+            \"can't load standard library from sysroot\\n\\\n+            {}\\n\\\n+            (discovered via `rustc --print sysroot`)\\n\\\n+            try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+            src_path.display(),\n+        )\n     }\n+    Ok(src_path)\n }\n \n impl SysrootCrate {"}]}