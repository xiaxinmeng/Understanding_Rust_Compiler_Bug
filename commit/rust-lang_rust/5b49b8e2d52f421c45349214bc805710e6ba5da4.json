{"sha": "5b49b8e2d52f421c45349214bc805710e6ba5da4", "node_id": "C_kwDOAAsO6NoAKDViNDliOGUyZDUyZjQyMWM0NTM0OTIxNGJjODA1NzEwZTZiYTVkYTQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-27T14:45:15Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Remove unnecessary closure in favour of just passing the argument directly", "tree": {"sha": "17c2439396ba897889055eab2310b3b6f5435a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c2439396ba897889055eab2310b3b6f5435a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b49b8e2d52f421c45349214bc805710e6ba5da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b49b8e2d52f421c45349214bc805710e6ba5da4", "html_url": "https://github.com/rust-lang/rust/commit/5b49b8e2d52f421c45349214bc805710e6ba5da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b49b8e2d52f421c45349214bc805710e6ba5da4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcba8d31c44f6c18121e3d37311b0797bbeb033f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcba8d31c44f6c18121e3d37311b0797bbeb033f", "html_url": "https://github.com/rust-lang/rust/commit/fcba8d31c44f6c18121e3d37311b0797bbeb033f"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "2e3c8605486075edbd87222a2ddc321140d5962d", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5b49b8e2d52f421c45349214bc805710e6ba5da4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b49b8e2d52f421c45349214bc805710e6ba5da4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=5b49b8e2d52f421c45349214bc805710e6ba5da4", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !matches!(a.kind(), ty::Opaque(..)) {\n                     return None;\n                 }\n-                self.fold_opaque_ty_new(a, cause.clone(), param_env, |_, _| b)\n+                self.fold_opaque_ty_new(a, cause.clone(), param_env, b)\n             };\n             if let Some(res) = process(a, b) {\n                 res\n@@ -482,10 +482,10 @@ impl UseKind {\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn fold_opaque_ty_new(\n         &self,\n-        ty: Ty<'tcx>,\n+        opaque_type: Ty<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        mk_ty: impl FnOnce(&InferCtxt<'_, 'tcx>, Span) -> Ty<'tcx>,\n+        hidden_ty: Ty<'tcx>,\n     ) -> Option<InferResult<'tcx, ()>> {\n         // Check that this is `impl Trait` type is\n         // declared by `parent_def_id` -- i.e., one whose\n@@ -521,30 +521,35 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         //     let x = || foo(); // returns the Opaque assoc with `foo`\n         // }\n         // ```\n-        let opaque_type_key = ty.expect_opaque_type();\n+        let opaque_type_key = opaque_type.expect_opaque_type();\n         if let Some(origin) = self.opaque_type_origin(opaque_type_key.def_id, cause.span) {\n-            return Some(self.fold_opaque_ty(ty, cause, param_env, opaque_type_key, origin, mk_ty));\n+            return Some(self.fold_opaque_ty(\n+                opaque_type,\n+                cause,\n+                param_env,\n+                opaque_type_key,\n+                origin,\n+                hidden_ty,\n+            ));\n         }\n \n-        debug!(?ty, \"encountered opaque outside its definition scope\",);\n+        debug!(?opaque_type, \"encountered opaque outside its definition scope\",);\n         None\n     }\n \n-    #[instrument(skip(self, mk_ty), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\")]\n     fn fold_opaque_ty(\n         &self,\n-        ty: Ty<'tcx>,\n+        opaque_type: Ty<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         origin: hir::OpaqueTyOrigin,\n-        mk_ty: impl FnOnce(&InferCtxt<'_, 'tcx>, Span) -> Ty<'tcx>,\n+        hidden_ty: Ty<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         let tcx = self.tcx;\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n-        let ty_var = mk_ty(self, cause.span);\n-\n         // Ideally, we'd get the span where *this specific `ty` came\n         // from*, but right now we just use the span from the overall\n         // value being folded. In simple cases like `-> impl Foo`,\n@@ -555,16 +560,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let mut obligations = vec![];\n         let prev = self.inner.borrow_mut().opaque_types().register(\n             OpaqueTypeKey { def_id, substs },\n-            ty,\n-            OpaqueHiddenType { ty: ty_var, span },\n+            opaque_type,\n+            OpaqueHiddenType { ty: hidden_ty, span },\n             origin,\n         );\n         if let Some(prev) = prev {\n-            obligations = self.at(&cause, param_env).eq(prev, ty_var)?.obligations;\n+            obligations = self.at(&cause, param_env).eq(prev, hidden_ty)?.obligations;\n         }\n \n-        debug!(\"generated new type inference var {:?}\", ty_var.kind());\n-\n         let item_bounds = tcx.explicit_item_bounds(def_id);\n \n         for (predicate, _) in item_bounds {\n@@ -586,7 +589,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     // Replace all other mentions of the same opaque type with the hidden type,\n                     // as the bounds must hold on the hidden type after all.\n                     ty::Opaque(def_id2, substs2) if def_id == def_id2 && substs == substs2 => {\n-                        ty_var\n+                        hidden_ty\n                     }\n                     _ => ty,\n                 },"}]}