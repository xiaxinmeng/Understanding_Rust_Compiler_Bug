{"sha": "94c3c340cce53396d23a20b236fa94f1d34b6df7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzNjMzQwY2NlNTMzOTZkMjNhMjBiMjM2ZmE5NGYxZDM0YjZkZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-04T18:22:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-04T18:22:39Z"}, "message": "Auto merge of #52758 - Mark-Simulacrum:session-cleanup, r=pnkfelix\n\nCleanup for librustc::session\n\nSome rather straightforward cleanup. Each commit mostly stands alone.", "tree": {"sha": "5e4fd9877c9ae60131d28c97f15eac835b2030d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4fd9877c9ae60131d28c97f15eac835b2030d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c3c340cce53396d23a20b236fa94f1d34b6df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c3c340cce53396d23a20b236fa94f1d34b6df7", "html_url": "https://github.com/rust-lang/rust/commit/94c3c340cce53396d23a20b236fa94f1d34b6df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c3c340cce53396d23a20b236fa94f1d34b6df7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215bf3abd9c0eb1fd0c6cae7c92a842732dc033d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215bf3abd9c0eb1fd0c6cae7c92a842732dc033d", "html_url": "https://github.com/rust-lang/rust/commit/215bf3abd9c0eb1fd0c6cae7c92a842732dc033d"}, {"sha": "0ae2aa232047e16019d1b90726ca2c397371e5aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae2aa232047e16019d1b90726ca2c397371e5aa", "html_url": "https://github.com/rust-lang/rust/commit/0ae2aa232047e16019d1b90726ca2c397371e5aa"}], "stats": {"total": 659, "additions": 313, "deletions": 346}, "files": [{"sha": "a9c118d606b2eb1584a7d8dd9a546cb74e16c935", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -115,30 +115,30 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let preferred_linkage = match ty {\n         // cdylibs must have all static dependencies.\n-        config::CrateTypeCdylib => Linkage::Static,\n+        config::CrateType::Cdylib => Linkage::Static,\n \n         // Generating a dylib without `-C prefer-dynamic` means that we're going\n         // to try to eagerly statically link all dependencies. This is normally\n         // done for end-product dylibs, not intermediate products.\n-        config::CrateTypeDylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n-        config::CrateTypeDylib => Linkage::Dynamic,\n+        config::CrateType::Dylib if !sess.opts.cg.prefer_dynamic => Linkage::Static,\n+        config::CrateType::Dylib => Linkage::Dynamic,\n \n         // If the global prefer_dynamic switch is turned off, or the final\n         // executable will be statically linked, prefer static crate linkage.\n-        config::CrateTypeExecutable if !sess.opts.cg.prefer_dynamic ||\n+        config::CrateType::Executable if !sess.opts.cg.prefer_dynamic ||\n             sess.crt_static() => Linkage::Static,\n-        config::CrateTypeExecutable => Linkage::Dynamic,\n+        config::CrateType::Executable => Linkage::Dynamic,\n \n         // proc-macro crates are required to be dylibs, and they're currently\n         // required to link to libsyntax as well.\n-        config::CrateTypeProcMacro => Linkage::Dynamic,\n+        config::CrateType::ProcMacro => Linkage::Dynamic,\n \n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n-        config::CrateTypeRlib => Linkage::NotLinked,\n+        config::CrateType::Rlib => Linkage::NotLinked,\n \n         // staticlibs must have all static dependencies.\n-        config::CrateTypeStaticlib => Linkage::Static,\n+        config::CrateType::Staticlib => Linkage::Static,\n     };\n \n     if preferred_linkage == Linkage::NotLinked {\n@@ -155,8 +155,8 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Staticlibs, cdylibs, and static executables must have all static\n         // dependencies. If any are not found, generate some nice pretty errors.\n-        if ty == config::CrateTypeCdylib || ty == config::CrateTypeStaticlib ||\n-                (ty == config::CrateTypeExecutable && sess.crt_static() &&\n+        if ty == config::CrateType::Cdylib || ty == config::CrateType::Staticlib ||\n+                (ty == config::CrateType::Executable && sess.crt_static() &&\n                 !sess.target.target.options.crt_static_allows_dylibs) {\n             for &cnum in tcx.crates().iter() {\n                 if tcx.dep_kind(cnum).macros_only() { continue }"}, {"sha": "b0acc6f20e691f56a0c13070ef9203d9fa87776a", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -12,6 +12,7 @@\n use hir::map as hir_map;\n use hir::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n+use session::config::EntryFnType;\n use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n@@ -59,7 +60,7 @@ pub fn find_entry_point(session: &Session,\n                         hir_map: &hir_map::Map,\n                         crate_name: &str) {\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n-        *ty == config::CrateTypeExecutable\n+        *ty == config::CrateType::Executable\n     });\n     if !any_exe {\n         // No need to find a main function\n@@ -155,11 +156,11 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n \n fn configure_main(this: &mut EntryContext, crate_name: &str) {\n     if let Some((node_id, span)) = this.start_fn {\n-        this.session.entry_fn.set(Some((node_id, span, config::EntryStart)));\n+        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Start)));\n     } else if let Some((node_id, span)) = this.attr_main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, config::EntryMain)));\n+        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n     } else if let Some((node_id, span)) = this.main_fn {\n-        this.session.entry_fn.set(Some((node_id, span, config::EntryMain)));\n+        this.session.entry_fn.set(Some((node_id, span, EntryFnType::Main)));\n     } else {\n         // No main function\n         this.session.entry_fn.set(None);"}, {"sha": "94246db37069aedb56d409b6be983842279f4182", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -408,8 +408,8 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n-        *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||\n-        *ty == config::CrateTypeProcMacro\n+        *ty == config::CrateType::Rlib || *ty == config::CrateType::Dylib ||\n+        *ty == config::CrateType::ProcMacro\n     });\n     let mut reachable_context = ReachableContext {\n         tcx,"}, {"sha": "e8431ce3e109b4d9505fd0d96acd225d0c29fb2b", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -89,12 +89,12 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // emitting something that's not an rlib.\n     let needs_check = tcx.sess.crate_types.borrow().iter().any(|kind| {\n         match *kind {\n-            config::CrateTypeDylib |\n-            config::CrateTypeProcMacro |\n-            config::CrateTypeCdylib |\n-            config::CrateTypeExecutable |\n-            config::CrateTypeStaticlib => true,\n-            config::CrateTypeRlib => false,\n+            config::CrateType::Dylib |\n+            config::CrateType::ProcMacro |\n+            config::CrateType::Cdylib |\n+            config::CrateType::Executable |\n+            config::CrateType::Staticlib => true,\n+            config::CrateType::Rlib => false,\n         }\n     });\n     if !needs_check {"}, {"sha": "3111777f4ad5a212d4ba9fd1fbf468de09c99acd", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 123, "deletions": 109, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -11,11 +11,6 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command line options.\n \n-pub use self::EntryFnType::*;\n-pub use self::CrateType::*;\n-pub use self::Passes::*;\n-pub use self::DebugInfoLevel::*;\n-\n use std::str::FromStr;\n \n use session::{early_error, early_warn, Session};\n@@ -113,10 +108,10 @@ impl CrossLangLto {\n }\n \n #[derive(Clone, Copy, PartialEq, Hash)]\n-pub enum DebugInfoLevel {\n-    NoDebugInfo,\n-    LimitedDebugInfo,\n-    FullDebugInfo,\n+pub enum DebugInfo {\n+    None,\n+    Limited,\n+    Full,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n@@ -381,7 +376,7 @@ top_level_options!(\n         // Include the debug_assertions flag into dependency tracking, since it\n         // can influence whether overflow checks are done or not.\n         debug_assertions: bool [TRACKED],\n-        debuginfo: DebugInfoLevel [TRACKED],\n+        debuginfo: DebugInfo [TRACKED],\n         lint_opts: Vec<(String, lint::Level)> [TRACKED],\n         lint_cap: Option<lint::Level> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n@@ -601,37 +596,38 @@ pub fn host_triple() -> &'static str {\n     (option_env!(\"CFG_COMPILER_HOST_TRIPLE\")).expect(\"CFG_COMPILER_HOST_TRIPLE\")\n }\n \n-/// Some reasonable defaults\n-pub fn basic_options() -> Options {\n-    Options {\n-        crate_types: Vec::new(),\n-        optimize: OptLevel::No,\n-        debuginfo: NoDebugInfo,\n-        lint_opts: Vec::new(),\n-        lint_cap: None,\n-        describe_lints: false,\n-        output_types: OutputTypes(BTreeMap::new()),\n-        search_paths: SearchPaths::new(),\n-        maybe_sysroot: None,\n-        target_triple: TargetTriple::from_triple(host_triple()),\n-        test: false,\n-        incremental: None,\n-        debugging_opts: basic_debugging_options(),\n-        prints: Vec::new(),\n-        borrowck_mode: BorrowckMode::Ast,\n-        cg: basic_codegen_options(),\n-        error_format: ErrorOutputType::default(),\n-        externs: Externs(BTreeMap::new()),\n-        crate_name: None,\n-        alt_std_name: None,\n-        libs: Vec::new(),\n-        unstable_features: UnstableFeatures::Disallow,\n-        debug_assertions: true,\n-        actually_rustdoc: false,\n-        cli_forced_codegen_units: None,\n-        cli_forced_thinlto_off: false,\n-        remap_path_prefix: Vec::new(),\n-        edition: DEFAULT_EDITION,\n+impl Default for Options {\n+    fn default() -> Options {\n+        Options {\n+            crate_types: Vec::new(),\n+            optimize: OptLevel::No,\n+            debuginfo: DebugInfo::None,\n+            lint_opts: Vec::new(),\n+            lint_cap: None,\n+            describe_lints: false,\n+            output_types: OutputTypes(BTreeMap::new()),\n+            search_paths: SearchPaths::new(),\n+            maybe_sysroot: None,\n+            target_triple: TargetTriple::from_triple(host_triple()),\n+            test: false,\n+            incremental: None,\n+            debugging_opts: basic_debugging_options(),\n+            prints: Vec::new(),\n+            borrowck_mode: BorrowckMode::Ast,\n+            cg: basic_codegen_options(),\n+            error_format: ErrorOutputType::default(),\n+            externs: Externs(BTreeMap::new()),\n+            crate_name: None,\n+            alt_std_name: None,\n+            libs: Vec::new(),\n+            unstable_features: UnstableFeatures::Disallow,\n+            debug_assertions: true,\n+            actually_rustdoc: false,\n+            cli_forced_codegen_units: None,\n+            cli_forced_thinlto_off: false,\n+            remap_path_prefix: Vec::new(),\n+            edition: DEFAULT_EDITION,\n+        }\n     }\n }\n \n@@ -657,38 +653,56 @@ impl Options {\n         !self.debugging_opts.parse_only && // The file is just being parsed\n             !self.debugging_opts.ls // The file is just being queried\n     }\n+\n+    #[inline]\n+    pub fn share_generics(&self) -> bool {\n+        match self.debugging_opts.share_generics {\n+            Some(setting) => setting,\n+            None => {\n+                self.incremental.is_some() ||\n+                match self.optimize {\n+                    OptLevel::No   |\n+                    OptLevel::Less |\n+                    OptLevel::Size |\n+                    OptLevel::SizeMin => true,\n+                    OptLevel::Default    |\n+                    OptLevel::Aggressive => false,\n+                }\n+            }\n+        }\n+    }\n }\n \n // The type of entry function, so\n // users can have their own entry\n // functions\n #[derive(Copy, Clone, PartialEq)]\n pub enum EntryFnType {\n-    EntryMain,\n-    EntryStart,\n+    Main,\n+    Start,\n }\n \n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n-    CrateTypeExecutable,\n-    CrateTypeDylib,\n-    CrateTypeRlib,\n-    CrateTypeStaticlib,\n-    CrateTypeCdylib,\n-    CrateTypeProcMacro,\n+    Executable,\n+    Dylib,\n+    Rlib,\n+    Staticlib,\n+    Cdylib,\n+    ProcMacro,\n }\n \n #[derive(Clone, Hash)]\n pub enum Passes {\n-    SomePasses(Vec<String>),\n-    AllPasses,\n+    Some(Vec<String>),\n+    All,\n }\n \n impl Passes {\n     pub fn is_empty(&self) -> bool {\n         match *self {\n-            SomePasses(ref v) => v.is_empty(),\n-            AllPasses => false,\n+            Passes::Some(ref v) => v.is_empty(),\n+            Passes::All => false,\n         }\n     }\n }\n@@ -823,8 +837,7 @@ macro_rules! options {\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto,\n-                    CrossLangLto};\n+        use super::{$struct_name, Passes, Sanitizer, Lto, CrossLangLto};\n         use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n@@ -935,13 +948,13 @@ macro_rules! options {\n         fn parse_passes(slot: &mut Passes, v: Option<&str>) -> bool {\n             match v {\n                 Some(\"all\") => {\n-                    *slot = AllPasses;\n+                    *slot = Passes::All;\n                     true\n                 }\n                 v => {\n                     let mut passes = vec![];\n                     if parse_list(&mut passes, v) {\n-                        *slot = SomePasses(passes);\n+                        *slot = Passes::Some(passes);\n                         true\n                     } else {\n                         false\n@@ -1104,7 +1117,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          \"extra data to put in each output filename\"),\n     codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n-    remark: Passes = (SomePasses(Vec::new()), parse_passes, [UNTRACKED],\n+    remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     no_stack_check: bool = (false, parse_bool, [UNTRACKED],\n         \"the --no-stack-check flag is deprecated and does nothing\"),\n@@ -1374,7 +1387,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n }\n \n pub fn default_lib_output() -> CrateType {\n-    CrateTypeRlib\n+    CrateType::Rlib\n }\n \n pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n@@ -1432,7 +1445,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     if sess.opts.debug_assertions {\n         ret.insert((Symbol::intern(\"debug_assertions\"), None));\n     }\n-    if sess.opts.crate_types.contains(&CrateTypeProcMacro) {\n+    if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n         ret.insert((Symbol::intern(\"proc_macro\"), None));\n     }\n     return ret;\n@@ -2084,12 +2097,12 @@ pub fn build_session_options_and_crate_config(\n         if cg.debuginfo.is_some() {\n             early_error(error_format, \"-g and -C debuginfo both provided\");\n         }\n-        FullDebugInfo\n+        DebugInfo::Full\n     } else {\n         match cg.debuginfo {\n-            None | Some(0) => NoDebugInfo,\n-            Some(1) => LimitedDebugInfo,\n-            Some(2) => FullDebugInfo,\n+            None | Some(0) => DebugInfo::None,\n+            Some(1) => DebugInfo::Limited,\n+            Some(2) => DebugInfo::Full,\n             Some(arg) => {\n                 early_error(\n                     error_format,\n@@ -2188,7 +2201,7 @@ pub fn build_session_options_and_crate_config(\n         Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n     };\n \n-    if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n+    if !cg.remark.is_empty() && debuginfo == DebugInfo::None {\n         early_warn(\n             error_format,\n             \"-C remark will not show source locations without \\\n@@ -2277,12 +2290,12 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n         for part in unparsed_crate_type.split(',') {\n             let new_part = match part {\n                 \"lib\" => default_lib_output(),\n-                \"rlib\" => CrateTypeRlib,\n-                \"staticlib\" => CrateTypeStaticlib,\n-                \"dylib\" => CrateTypeDylib,\n-                \"cdylib\" => CrateTypeCdylib,\n-                \"bin\" => CrateTypeExecutable,\n-                \"proc-macro\" => CrateTypeProcMacro,\n+                \"rlib\" => CrateType::Rlib,\n+                \"staticlib\" => CrateType::Staticlib,\n+                \"dylib\" => CrateType::Dylib,\n+                \"cdylib\" => CrateType::Cdylib,\n+                \"bin\" => CrateType::Executable,\n+                \"proc-macro\" => CrateType::ProcMacro,\n                 _ => {\n                     return Err(format!(\"unknown crate type: `{}`\", part));\n                 }\n@@ -2360,12 +2373,12 @@ pub mod nightly_options {\n impl fmt::Display for CrateType {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            CrateTypeExecutable => \"bin\".fmt(f),\n-            CrateTypeDylib => \"dylib\".fmt(f),\n-            CrateTypeRlib => \"rlib\".fmt(f),\n-            CrateTypeStaticlib => \"staticlib\".fmt(f),\n-            CrateTypeCdylib => \"cdylib\".fmt(f),\n-            CrateTypeProcMacro => \"proc-macro\".fmt(f),\n+            CrateType::Executable => \"bin\".fmt(f),\n+            CrateType::Dylib => \"dylib\".fmt(f),\n+            CrateType::Rlib => \"rlib\".fmt(f),\n+            CrateType::Staticlib => \"staticlib\".fmt(f),\n+            CrateType::Cdylib => \"cdylib\".fmt(f),\n+            CrateType::ProcMacro => \"proc-macro\".fmt(f),\n         }\n     }\n }\n@@ -2395,7 +2408,7 @@ mod dep_tracking {\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n-    use super::{CrateType, DebugInfoLevel, ErrorOutputType, Lto, OptLevel, OutputTypes,\n+    use super::{CrateType, DebugInfo, ErrorOutputType, Lto, OptLevel, OutputTypes,\n                 Passes, Sanitizer, CrossLangLto};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_target::spec::{PanicStrategy, RelroLevel, TargetTriple};\n@@ -2452,7 +2465,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Passes);\n     impl_dep_tracking_hash_via_hash!(OptLevel);\n     impl_dep_tracking_hash_via_hash!(Lto);\n-    impl_dep_tracking_hash_via_hash!(DebugInfoLevel);\n+    impl_dep_tracking_hash_via_hash!(DebugInfo);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n@@ -2535,6 +2548,7 @@ mod tests {\n     use syntax::symbol::Symbol;\n     use syntax::edition::{Edition, DEFAULT_EDITION};\n     use syntax;\n+    use super::Options;\n \n     fn optgroups() -> getopts::Options {\n         let mut opts = getopts::Options::new();\n@@ -2619,9 +2633,9 @@ mod tests {\n \n     #[test]\n     fn test_output_types_tracking_hash_different_paths() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         v1.output_types =\n             OutputTypes::new(&[(OutputType::Exe, Some(PathBuf::from(\"./some/thing\")))]);\n@@ -2641,8 +2655,8 @@ mod tests {\n \n     #[test]\n     fn test_output_types_tracking_hash_different_construction_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n \n         v1.output_types = OutputTypes::new(&[\n             (OutputType::Exe, Some(PathBuf::from(\"./some/thing\"))),\n@@ -2662,9 +2676,9 @@ mod tests {\n \n     #[test]\n     fn test_externs_tracking_hash_different_construction_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         v1.externs = Externs::new(mk_map(vec![\n             (\n@@ -2711,9 +2725,9 @@ mod tests {\n \n     #[test]\n     fn test_lints_tracking_hash_different_values() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         v1.lint_opts = vec![\n             (String::from(\"a\"), lint::Allow),\n@@ -2748,8 +2762,8 @@ mod tests {\n \n     #[test]\n     fn test_lints_tracking_hash_different_construction_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n \n         v1.lint_opts = vec![\n             (String::from(\"a\"), lint::Allow),\n@@ -2774,10 +2788,10 @@ mod tests {\n \n     #[test]\n     fn test_search_paths_tracking_hash_different_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-        let mut v4 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n+        let mut v4 = Options::default();\n \n         // Reference\n         v1.search_paths\n@@ -2837,10 +2851,10 @@ mod tests {\n \n     #[test]\n     fn test_native_libs_tracking_hash_different_values() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-        let mut v4 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n+        let mut v4 = Options::default();\n \n         // Reference\n         v1.libs = vec![\n@@ -2887,9 +2901,9 @@ mod tests {\n \n     #[test]\n     fn test_native_libs_tracking_hash_different_order() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n+        let mut v1 = Options::default();\n+        let mut v2 = Options::default();\n+        let mut v3 = Options::default();\n \n         // Reference\n         v1.libs = vec![\n@@ -2922,8 +2936,8 @@ mod tests {\n \n     #[test]\n     fn test_codegen_options_tracking_hash() {\n-        let reference = super::basic_options();\n-        let mut opts = super::basic_options();\n+        let reference = Options::default();\n+        let mut opts = Options::default();\n \n         // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n         opts.cg.ar = Some(String::from(\"abc\"));\n@@ -2947,7 +2961,7 @@ mod tests {\n         opts.cg.codegen_units = Some(42);\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n-        opts.cg.remark = super::SomePasses(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n+        opts.cg.remark = super::Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         opts.cg.save_temps = true;\n@@ -3060,8 +3074,8 @@ mod tests {\n \n     #[test]\n     fn test_debugging_options_tracking_hash() {\n-        let reference = super::basic_options();\n-        let mut opts = super::basic_options();\n+        let reference = Options::default();\n+        let mut opts = Options::default();\n \n         // Make sure the changing an [UNTRACKED] option leaves the hash unchanged\n         opts.debugging_opts.verbose = true;\n@@ -3190,7 +3204,7 @@ mod tests {\n     #[test]\n     fn test_edition_parsing() {\n         // test default edition\n-        let options = super::basic_options();\n+        let options = Options::default();\n         assert!(options.edition == DEFAULT_EDITION);\n \n         let matches = optgroups()"}, {"sha": "0173c4933f821f08e92c2387275fec9a9ad6e7a1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::code_stats::{CodeStats, DataTypeKind, FieldInfo};\n-pub use self::code_stats::{SizeKind, TypeSizeInfo, VariantInfo};\n+pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n+use self::code_stats::CodeStats;\n \n use hir::def_id::CrateNum;\n use ich::Fingerprint;\n@@ -965,7 +965,7 @@ impl Session {\n     }\n \n     pub fn teach(&self, code: &DiagnosticId) -> bool {\n-        self.opts.debugging_opts.teach && self.parse_sess.span_diagnostic.must_teach(code)\n+        self.opts.debugging_opts.teach && self.diagnostic().must_teach(code)\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?"}, {"sha": "0cfdea68e881c80ee4625ec52eda3175a0cb2fa6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -14,8 +14,8 @@ use dep_graph::DepGraph;\n use dep_graph::{DepNode, DepConstructor};\n use errors::DiagnosticBuilder;\n use session::Session;\n-use session::config::{BorrowckMode, OutputFilenames, OptLevel};\n-use session::config::CrateType::*;\n+use session::config::{BorrowckMode, OutputFilenames};\n+use session::config::CrateType;\n use middle;\n use hir::{TraitCandidate, HirId, ItemLocalId};\n use hir::def::{Def, Export};\n@@ -1469,36 +1469,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.use_mir_borrowck()\n     }\n \n-    #[inline]\n-    pub fn share_generics(self) -> bool {\n-        match self.sess.opts.debugging_opts.share_generics {\n-            Some(setting) => setting,\n-            None => {\n-                self.sess.opts.incremental.is_some() ||\n-                match self.sess.opts.optimize {\n-                    OptLevel::No   |\n-                    OptLevel::Less |\n-                    OptLevel::Size |\n-                    OptLevel::SizeMin => true,\n-                    OptLevel::Default    |\n-                    OptLevel::Aggressive => false,\n-                }\n-            }\n-        }\n-    }\n-\n     #[inline]\n     pub fn local_crate_exports_generics(self) -> bool {\n-        debug_assert!(self.share_generics());\n+        debug_assert!(self.sess.opts.share_generics());\n \n         self.sess.crate_types.borrow().iter().any(|crate_type| {\n             match crate_type {\n-                CrateTypeExecutable |\n-                CrateTypeStaticlib  |\n-                CrateTypeProcMacro  |\n-                CrateTypeCdylib     => false,\n-                CrateTypeRlib       |\n-                CrateTypeDylib      => true,\n+                CrateType::Executable |\n+                CrateType::Staticlib  |\n+                CrateType::ProcMacro  |\n+                CrateType::Cdylib     => false,\n+                CrateType::Rlib       |\n+                CrateType::Dylib      => true,\n             }\n         })\n     }"}, {"sha": "108734b67d3b837a92efb20e85e24d56d719a3ee", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -17,7 +17,7 @@ use super::command::Command;\n use super::rpath::RPathConfig;\n use super::rpath;\n use metadata::METADATA_FILENAME;\n-use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType, PrintRequest};\n+use rustc::session::config::{self, DebugInfo, OutputFilenames, OutputType, PrintRequest};\n use rustc::session::config::{RUST_CGU_EXT, Lto};\n use rustc::session::filesearch;\n use rustc::session::search_paths::PathKind;\n@@ -151,7 +151,7 @@ pub(crate) fn link_binary(sess: &Session,\n         let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n         if (sess.opts.debugging_opts.no_codegen || !sess.opts.output_types.should_codegen()) &&\n            !output_metadata &&\n-           crate_type == config::CrateTypeExecutable {\n+           crate_type == config::CrateType::Executable {\n             continue;\n         }\n \n@@ -200,15 +200,15 @@ pub(crate) fn link_binary(sess: &Session,\n /// split-dwarf like schemes.\n fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // If the objects don't have debuginfo there's nothing to preserve.\n-    if sess.opts.debuginfo == NoDebugInfo {\n+    if sess.opts.debuginfo == DebugInfo::None {\n         return false\n     }\n \n     // If we're only producing artifacts that are archives, no need to preserve\n     // the objects as they're losslessly contained inside the archives.\n     let output_linked = sess.crate_types.borrow()\n         .iter()\n-        .any(|x| *x != config::CrateTypeRlib && *x != config::CrateTypeStaticlib);\n+        .any(|x| *x != config::CrateType::Rlib && *x != config::CrateType::Staticlib);\n     if !output_linked {\n         return false\n     }\n@@ -255,10 +255,10 @@ pub(crate) fn each_linked_rlib(sess: &Session,\n                                f: &mut dyn FnMut(CrateNum, &Path)) -> Result<(), String> {\n     let crates = info.used_crates_static.iter();\n     let fmts = sess.dependency_formats.borrow();\n-    let fmts = fmts.get(&config::CrateTypeExecutable)\n-                   .or_else(|| fmts.get(&config::CrateTypeStaticlib))\n-                   .or_else(|| fmts.get(&config::CrateTypeCdylib))\n-                   .or_else(|| fmts.get(&config::CrateTypeProcMacro));\n+    let fmts = fmts.get(&config::CrateType::Executable)\n+                   .or_else(|| fmts.get(&config::CrateType::Staticlib))\n+                   .or_else(|| fmts.get(&config::CrateType::Cdylib))\n+                   .or_else(|| fmts.get(&config::CrateType::ProcMacro));\n     let fmts = match fmts {\n         Some(f) => f,\n         None => return Err(\"could not find formats for rlibs\".to_string())\n@@ -344,14 +344,14 @@ fn link_binary_output(sess: &Session,\n     if outputs.outputs.should_codegen() {\n         let out_filename = out_filename(sess, crate_type, outputs, crate_name);\n         match crate_type {\n-            config::CrateTypeRlib => {\n+            config::CrateType::Rlib => {\n                 link_rlib(sess,\n                           codegen_results,\n                           RlibFlavor::Normal,\n                           &out_filename,\n                           &tmpdir).build();\n             }\n-            config::CrateTypeStaticlib => {\n+            config::CrateType::Staticlib => {\n                 link_staticlib(sess, codegen_results, &out_filename, &tmpdir);\n             }\n             _ => {\n@@ -644,7 +644,7 @@ fn link_natively(sess: &Session,\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_arg);\n \n-    let pre_link_objects = if crate_type == config::CrateTypeExecutable {\n+    let pre_link_objects = if crate_type == config::CrateType::Executable {\n         &sess.target.target.options.pre_link_objects_exe\n     } else {\n         &sess.target.target.options.pre_link_objects_dll\n@@ -653,7 +653,7 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n-    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static() {\n         for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n             cmd.arg(root.join(obj));\n         }\n@@ -834,7 +834,7 @@ fn link_natively(sess: &Session,\n     // the symbols. Note, though, that if the object files are being preserved\n     // for their debug information there's no need for us to run dsymutil.\n     if sess.target.target.options.is_like_osx &&\n-        sess.opts.debuginfo != NoDebugInfo &&\n+        sess.opts.debuginfo != DebugInfo::None &&\n         !preserve_objects_for_their_debuginfo(sess)\n     {\n         match Command::new(\"dsymutil\").arg(out_filename).output() {\n@@ -1013,7 +1013,7 @@ fn link_args(cmd: &mut dyn Linker,\n     }\n     cmd.output_filename(out_filename);\n \n-    if crate_type == config::CrateTypeExecutable &&\n+    if crate_type == config::CrateType::Executable &&\n        sess.target.target.options.is_like_windows {\n         if let Some(ref s) = codegen_results.windows_subsystem {\n             cmd.subsystem(s);\n@@ -1022,16 +1022,16 @@ fn link_args(cmd: &mut dyn Linker,\n \n     // If we're building a dynamic library then some platforms need to make sure\n     // that all symbols are exported correctly from the dynamic library.\n-    if crate_type != config::CrateTypeExecutable ||\n+    if crate_type != config::CrateType::Executable ||\n        sess.target.target.options.is_like_emscripten {\n         cmd.export_symbols(tmpdir, crate_type);\n     }\n \n     // When linking a dynamic library, we put the metadata into a section of the\n     // executable. This metadata is in a separate object file from the main\n     // object file, so we link that in here.\n-    if crate_type == config::CrateTypeDylib ||\n-       crate_type == config::CrateTypeProcMacro {\n+    if crate_type == config::CrateType::Dylib ||\n+       crate_type == config::CrateType::ProcMacro {\n         if let Some(obj) = codegen_results.metadata_module.object.as_ref() {\n             cmd.add_object(obj);\n         }\n@@ -1047,13 +1047,13 @@ fn link_args(cmd: &mut dyn Linker,\n     // Try to strip as much out of the generated object by removing unused\n     // sections if possible. See more comments in linker.rs\n     if !sess.opts.cg.link_dead_code {\n-        let keep_metadata = crate_type == config::CrateTypeDylib;\n+        let keep_metadata = crate_type == config::CrateType::Dylib;\n         cmd.gc_sections(keep_metadata);\n     }\n \n     let used_link_args = &codegen_results.crate_info.link_args;\n \n-    if crate_type == config::CrateTypeExecutable {\n+    if crate_type == config::CrateType::Executable {\n         let mut position_independent_executable = false;\n \n         if t.options.position_independent_executables {\n@@ -1145,10 +1145,10 @@ fn link_args(cmd: &mut dyn Linker,\n     add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n \n     // Tell the linker what we're doing.\n-    if crate_type != config::CrateTypeExecutable {\n+    if crate_type != config::CrateType::Executable {\n         cmd.build_dylib(out_filename);\n     }\n-    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+    if crate_type == config::CrateType::Executable && sess.crt_static() {\n         cmd.build_static_executable();\n     }\n \n@@ -1448,7 +1448,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n \n         if (!is_full_lto_enabled(sess) ||\n             ignored_for_lto(sess, &codegen_results.crate_info, cnum)) &&\n-           crate_type != config::CrateTypeDylib &&\n+           crate_type != config::CrateType::Dylib &&\n            !skip_native {\n             cmd.link_rlib(&fix_windows_verbatim_for_gcc(cratepath));\n             return\n@@ -1524,7 +1524,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n             // Note, though, that we don't want to include the whole of a\n             // compiler-builtins crate (e.g. compiler-rt) because it'll get\n             // repeatedly linked anyway.\n-            if crate_type == config::CrateTypeDylib &&\n+            if crate_type == config::CrateType::Dylib &&\n                 codegen_results.crate_info.compiler_builtins != Some(cnum) {\n                 cmd.link_whole_rlib(&fix_windows_verbatim_for_gcc(&dst));\n             } else {"}, {"sha": "e0a30ef5dbc9abe10befecbda24285ef84a394fd", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -21,7 +21,7 @@ use back::symbol_export;\n use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n-use rustc::session::config::{self, CrateType, OptLevel, DebugInfoLevel,\n+use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n                              CrossLangLto};\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n@@ -338,7 +338,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn debuginfo(&mut self) {\n         match self.sess.opts.debuginfo {\n-            DebugInfoLevel::NoDebugInfo => {\n+            DebugInfo::None => {\n                 // If we are building without debuginfo enabled and we were called with\n                 // `-Zstrip-debuginfo-if-disabled=yes`, tell the linker to strip any debuginfo\n                 // found when linking to get rid of symbols from libstd.\n@@ -387,8 +387,8 @@ impl<'a> Linker for GccLinker<'a> {\n         // exported symbols to ensure we don't expose any more. The object files\n         // have far more public symbols than we actually want to export, so we\n         // hide them all here.\n-        if crate_type == CrateType::CrateTypeDylib ||\n-           crate_type == CrateType::CrateTypeProcMacro {\n+        if crate_type == CrateType::Dylib ||\n+           crate_type == CrateType::ProcMacro {\n             return\n         }\n \n@@ -826,9 +826,9 @@ impl<'a> Linker for EmLinker<'a> {\n     fn debuginfo(&mut self) {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n-            DebugInfoLevel::NoDebugInfo => \"-g0\",\n-            DebugInfoLevel::LimitedDebugInfo => \"-g3\",\n-            DebugInfoLevel::FullDebugInfo => \"-g4\"\n+            DebugInfo::None => \"-g0\",\n+            DebugInfo::Limited => \"-g3\",\n+            DebugInfo::Full => \"-g4\"\n         });\n     }\n "}, {"sha": "098676c95a2892472c731c6db1098d09e45317e0", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -32,13 +32,13 @@ use std::sync::Arc;\n \n pub fn crate_type_allows_lto(crate_type: config::CrateType) -> bool {\n     match crate_type {\n-        config::CrateTypeExecutable |\n-        config::CrateTypeStaticlib  |\n-        config::CrateTypeCdylib     => true,\n+        config::CrateType::Executable |\n+        config::CrateType::Staticlib  |\n+        config::CrateType::Cdylib     => true,\n \n-        config::CrateTypeDylib     |\n-        config::CrateTypeRlib      |\n-        config::CrateTypeProcMacro => false,\n+        config::CrateType::Dylib     |\n+        config::CrateType::Rlib      |\n+        config::CrateType::ProcMacro => false,\n     }\n }\n "}, {"sha": "02434b7be0bda22aa1d024d96f6e0d14c694dc83", "filename": "src/librustc_codegen_llvm/back/symbol_export.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -37,12 +37,12 @@ pub fn threshold(tcx: TyCtxt) -> SymbolExportLevel {\n \n fn crate_export_threshold(crate_type: config::CrateType) -> SymbolExportLevel {\n     match crate_type {\n-        config::CrateTypeExecutable |\n-        config::CrateTypeStaticlib  |\n-        config::CrateTypeProcMacro  |\n-        config::CrateTypeCdylib     => SymbolExportLevel::C,\n-        config::CrateTypeRlib       |\n-        config::CrateTypeDylib      => SymbolExportLevel::Rust,\n+        config::CrateType::Executable |\n+        config::CrateType::Staticlib  |\n+        config::CrateType::ProcMacro  |\n+        config::CrateType::Cdylib     => SymbolExportLevel::C,\n+        config::CrateType::Rlib       |\n+        config::CrateType::Dylib      => SymbolExportLevel::Rust,\n     }\n }\n \n@@ -235,14 +235,14 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    if tcx.sess.crate_types.borrow().contains(&config::CrateTypeDylib) {\n+    if tcx.sess.crate_types.borrow().contains(&config::CrateType::Dylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));\n \n         symbols.push((exported_symbol, SymbolExportLevel::Rust));\n     }\n \n-    if tcx.share_generics() && tcx.local_crate_exports_generics() {\n+    if tcx.sess.opts.share_generics() && tcx.local_crate_exports_generics() {\n         use rustc::mir::mono::{Linkage, Visibility, MonoItem};\n         use rustc::ty::InstanceDef;\n "}, {"sha": "a5c6a0d5cd690e4828b2b4595db3220b9a7cb291", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -20,8 +20,7 @@ use consts;\n use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir};\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n-use rustc::session::config::{self, OutputFilenames, OutputType, Passes, SomePasses,\n-                             AllPasses, Sanitizer, Lto};\n+use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Sanitizer, Lto};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use time_graph::{self, TimeGraph, Timeline};\n@@ -345,7 +344,7 @@ pub struct CodegenContext {\n     pub tm_factory: Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync>,\n     pub msvc_imps_needed: bool,\n     pub target_pointer_width: String,\n-    debuginfo: config::DebugInfoLevel,\n+    debuginfo: config::DebugInfo,\n \n     // Number of cgus excluding the allocator/metadata modules\n     pub total_cgus: usize,\n@@ -461,8 +460,8 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n         llvm::diagnostic::Optimization(opt) => {\n             let enabled = match cgcx.remark {\n-                AllPasses => true,\n-                SomePasses(ref v) => v.iter().any(|s| *s == opt.pass_name),\n+                Passes::All => true,\n+                Passes::Some(ref v) => v.iter().any(|s| *s == opt.pass_name),\n             };\n \n             if enabled {\n@@ -875,7 +874,7 @@ pub(crate) struct CompiledModules {\n }\n \n fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n-    sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n+    sess.crate_types.borrow().contains(&config::CrateType::Rlib) &&\n     sess.opts.output_types.contains_key(&OutputType::Exe)\n }\n \n@@ -1341,7 +1340,7 @@ fn execute_work_item(cgcx: &CodegenContext,\n                 // anything about it yet until we've got a final product.\n                 Lto::Yes | Lto::Fat | Lto::Thin => {\n                     cgcx.crate_types.len() != 1 ||\n-                        cgcx.crate_types[0] != config::CrateTypeRlib\n+                        cgcx.crate_types[0] != config::CrateType::Rlib\n                 }\n \n                 // When we're automatically doing ThinLTO for multi-codegen-unit\n@@ -2346,7 +2345,7 @@ pub(crate) fn submit_codegened_module_to_llvm(tcx: TyCtxt,\n \n fn msvc_imps_needed(tcx: TyCtxt) -> bool {\n     tcx.sess.target.target.options.is_like_msvc &&\n-        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateTypeRlib)\n+        tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateType::Rlib)\n }\n \n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`."}, {"sha": "41336165684f61ff630eb59570c7653610dbd0b9", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -46,7 +46,7 @@ use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::middle::exported_symbols;\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::util::profiling::ProfileCategory;\n-use rustc::session::config::{self, NoDebugInfo};\n+use rustc::session::config::{self, DebugInfo, EntryFnType};\n use rustc::session::Session;\n use rustc_incremental;\n use allocator;\n@@ -560,8 +560,8 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n \n     let et = cx.sess().entry_fn.get().map(|e| e.2);\n     match et {\n-        Some(config::EntryMain) => create_entry_fn(cx, span, main_llfn, main_def_id, true),\n-        Some(config::EntryStart) => create_entry_fn(cx, span, main_llfn, main_def_id, false),\n+        Some(EntryFnType::Main) => create_entry_fn(cx, span, main_llfn, main_def_id, true),\n+        Some(EntryFnType::Start) => create_entry_fn(cx, span, main_llfn, main_def_id, false),\n         None => {}    // Do nothing.\n     }\n \n@@ -645,14 +645,14 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n \n     let kind = tcx.sess.crate_types.borrow().iter().map(|ty| {\n         match *ty {\n-            config::CrateTypeExecutable |\n-            config::CrateTypeStaticlib |\n-            config::CrateTypeCdylib => MetadataKind::None,\n+            config::CrateType::Executable |\n+            config::CrateType::Staticlib |\n+            config::CrateType::Cdylib => MetadataKind::None,\n \n-            config::CrateTypeRlib => MetadataKind::Uncompressed,\n+            config::CrateType::Rlib => MetadataKind::Uncompressed,\n \n-            config::CrateTypeDylib |\n-            config::CrateTypeProcMacro => MetadataKind::Compressed,\n+            config::CrateType::Dylib |\n+            config::CrateType::ProcMacro => MetadataKind::Compressed,\n         }\n     }).max().unwrap_or(MetadataKind::None);\n \n@@ -1102,7 +1102,7 @@ impl CrateInfo {\n \n         let load_wasm_items = tcx.sess.crate_types.borrow()\n             .iter()\n-            .any(|c| *c != config::CrateTypeRlib) &&\n+            .any(|c| *c != config::CrateType::Rlib) &&\n             tcx.sess.opts.target_triple.triple() == \"wasm32-unknown-unknown\";\n \n         if load_wasm_items {\n@@ -1249,7 +1249,7 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n \n             // Finalize debuginfo\n-            if cx.sess().opts.debuginfo != NoDebugInfo {\n+            if cx.sess().opts.debuginfo != DebugInfo::None {\n                 debuginfo::finalize(&cx);\n             }\n "}, {"sha": "3594351802fe91cabf67112f5c7b2f6ebae108ba", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -133,7 +133,7 @@ pub fn get_fn(\n                 // This is a monomorphization. Its expected visibility depends\n                 // on whether we are in share-generics mode.\n \n-                if cx.tcx.share_generics() {\n+                if cx.tcx.sess.opts.share_generics() {\n                     // We are in share_generics mode.\n \n                     if instance_def_id.is_local() {"}, {"sha": "2f557d0b099986eb9d716ce5f2569b28e4819709", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -26,7 +26,7 @@ use type_of::PointeeInfo;\n \n use rustc_data_structures::base_n;\n use rustc::mir::mono::Stats;\n-use rustc::session::config::{self, NoDebugInfo};\n+use rustc::session::config::{self, DebugInfo};\n use rustc::session::Session;\n use rustc::ty::layout::{LayoutError, LayoutOf, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -147,7 +147,7 @@ fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n \n fn is_any_library(sess: &Session) -> bool {\n     sess.crate_types.borrow().iter().any(|ty| {\n-        *ty != config::CrateTypeExecutable\n+        *ty != config::CrateType::Executable\n     })\n }\n \n@@ -270,7 +270,7 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n \n         let (llcx, llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n \n-        let dbg_cx = if tcx.sess.opts.debuginfo != NoDebugInfo {\n+        let dbg_cx = if tcx.sess.opts.debuginfo != DebugInfo::None {\n             let dctx = debuginfo::CrateDebugContext::new(llmod);\n             debuginfo::metadata::compile_unit_metadata(tcx,\n                                                         &codegen_unit.name().as_str(),\n@@ -770,7 +770,7 @@ fn declare_intrinsic(cx: &CodegenCx<'ll, '_>, key: &str) -> Option<&'ll Value> {\n     ifn!(\"llvm.assume\", fn(i1) -> void);\n     ifn!(\"llvm.prefetch\", fn(i8p, t_i32, t_i32, t_i32) -> void);\n \n-    if cx.sess().opts.debuginfo != NoDebugInfo {\n+    if cx.sess().opts.debuginfo != DebugInfo::None {\n         ifn!(\"llvm.dbg.declare\", fn(Type::metadata(cx), Type::metadata(cx)) -> void);\n         ifn!(\"llvm.dbg.value\", fn(Type::metadata(cx), t_i64, Type::metadata(cx)) -> void);\n     }"}, {"sha": "f6faddb894ffdf41c532659fffc92afea806f412", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -15,7 +15,7 @@ use llvm;\n use common::{C_bytes, CodegenCx, C_i32};\n use builder::Builder;\n use declare;\n-use rustc::session::config::NoDebugInfo;\n+use rustc::session::config::DebugInfo;\n use type_::Type;\n use value::Value;\n \n@@ -81,6 +81,6 @@ pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx) -> bool {\n                             \"omit_gdb_pretty_printer_section\");\n \n     !omit_gdb_pretty_printer_section &&\n-    cx.sess().opts.debuginfo != NoDebugInfo &&\n+    cx.sess().opts.debuginfo != DebugInfo::None &&\n     cx.sess().target.target.options.emit_debug_gdb_scripts\n }"}, {"sha": "d4fb2549a752c80f6d03c287c8462dfb07bf180c", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -32,7 +32,7 @@ use builder::Builder;\n use monomorphize::Instance;\n use rustc::ty::{self, ParamEnv, Ty, InstanceDef};\n use rustc::mir;\n-use rustc::session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n+use rustc::session::config::{self, DebugInfo};\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n use value::Value;\n \n@@ -214,7 +214,7 @@ pub fn create_function_debug_context(\n     llfn: &'ll Value,\n     mir: &mir::Mir,\n ) -> FunctionDebugContext<'ll> {\n-    if cx.sess().opts.debuginfo == NoDebugInfo {\n+    if cx.sess().opts.debuginfo == DebugInfo::None {\n         return FunctionDebugContext::DebugInfoDisabled;\n     }\n \n@@ -314,7 +314,7 @@ pub fn create_function_debug_context(\n         cx: &CodegenCx<'ll, 'tcx>,\n         sig: ty::FnSig<'tcx>,\n     ) -> &'ll DIArray {\n-        if cx.sess().opts.debuginfo == LimitedDebugInfo {\n+        if cx.sess().opts.debuginfo == DebugInfo::Limited {\n             return create_DIArray(DIB(cx), &[]);\n         }\n \n@@ -400,7 +400,7 @@ pub fn create_function_debug_context(\n         name_to_append_suffix_to.push('>');\n \n         // Again, only create type information if full debuginfo is enabled\n-        let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n+        let template_params: Vec<_> = if cx.sess().opts.debuginfo == DebugInfo::Full {\n             let names = get_parameter_names(cx, generics);\n             substs.iter().zip(names).filter_map(|(kind, name)| {\n                 if let UnpackedKind::Type(ty) = kind.unpack() {"}, {"sha": "0b5a6757333f252c2c32b4b993c7bd5322b5c477", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -1778,29 +1778,15 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n     match ty.sty {\n         ty::TyInt(t) => Some((match t {\n-            ast::IntTy::Isize => {\n-                match &cx.tcx.sess.target.target.target_pointer_width[..] {\n-                    \"16\" => 16,\n-                    \"32\" => 32,\n-                    \"64\" => 64,\n-                    tws => bug!(\"Unsupported target word size for isize: {}\", tws),\n-                }\n-            },\n+            ast::IntTy::Isize => cx.tcx.sess.target.isize_ty.bit_width().unwrap() as u64,\n             ast::IntTy::I8 => 8,\n             ast::IntTy::I16 => 16,\n             ast::IntTy::I32 => 32,\n             ast::IntTy::I64 => 64,\n             ast::IntTy::I128 => 128,\n         }, true)),\n         ty::TyUint(t) => Some((match t {\n-            ast::UintTy::Usize => {\n-                match &cx.tcx.sess.target.target.target_pointer_width[..] {\n-                    \"16\" => 16,\n-                    \"32\" => 32,\n-                    \"64\" => 64,\n-                    tws => bug!(\"Unsupported target word size for usize: {}\", tws),\n-                }\n-            },\n+            ast::UintTy::Usize => cx.tcx.sess.target.usize_ty.bit_width().unwrap() as u64,\n             ast::UintTy::U8 => 8,\n             ast::UintTy::U16 => 16,\n             ast::UintTy::U32 => 32,\n@@ -1813,14 +1799,9 @@ fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n \n // Returns the width of a float TypeVariant\n // Returns None if the type is not a float\n-fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>)\n-        -> Option<u64> {\n-    use rustc::ty::TyFloat;\n+fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>) -> Option<u64> {\n     match *sty {\n-        TyFloat(t) => Some(match t {\n-            ast::FloatTy::F32 => 32,\n-            ast::FloatTy::F64 => 64,\n-        }),\n+        ty::TyFloat(t) => Some(t.bit_width() as u64),\n         _ => None,\n     }\n }"}, {"sha": "8fdb67f5930cecb8f05d9eea7d86df76a79fd7aa", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::mir::{self, Mir};\n use rustc::ty::subst::Substs;\n-use rustc::session::config::FullDebugInfo;\n+use rustc::session::config::DebugInfo;\n use base;\n use builder::Builder;\n use common::{CodegenCx, Funclet};\n@@ -267,7 +267,7 @@ pub fn codegen_mir(\n             if let Some(name) = decl.name {\n                 // User variable\n                 let debug_scope = fx.scopes[decl.visibility_scope];\n-                let dbg = debug_scope.is_valid() && bx.sess().opts.debuginfo == FullDebugInfo;\n+                let dbg = debug_scope.is_valid() && bx.sess().opts.debuginfo == DebugInfo::Full;\n \n                 if !memory_locals.contains(local) && !dbg {\n                     debug!(\"alloc: {:?} ({}) -> operand\", local, name);\n@@ -426,7 +426,7 @@ fn arg_local_refs(\n \n     // Get the argument scope, if it exists and if we need it.\n     let arg_scope = scopes[mir::OUTERMOST_SOURCE_SCOPE];\n-    let arg_scope = if bx.sess().opts.debuginfo == FullDebugInfo {\n+    let arg_scope = if bx.sess().opts.debuginfo == DebugInfo::Full {\n         arg_scope.scope_metadata\n     } else {\n         None"}, {"sha": "dda33ae3fecdfde329941b07cc606f34322b9a85", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -733,18 +733,8 @@ fn get_overflow_intrinsic(oop: OverflowOp, bx: &Builder<'_, 'll, '_>, ty: Ty) ->\n     let tcx = bx.tcx();\n \n     let new_sty = match ty.sty {\n-        TyInt(Isize) => match &tcx.sess.target.target.target_pointer_width[..] {\n-            \"16\" => TyInt(I16),\n-            \"32\" => TyInt(I32),\n-            \"64\" => TyInt(I64),\n-            _ => panic!(\"unsupported target word size\")\n-        },\n-        TyUint(Usize) => match &tcx.sess.target.target.target_pointer_width[..] {\n-            \"16\" => TyUint(U16),\n-            \"32\" => TyUint(U32),\n-            \"64\" => TyUint(U64),\n-            _ => panic!(\"unsupported target word size\")\n-        },\n+        TyInt(Isize) => TyInt(tcx.sess.target.isize_ty),\n+        TyUint(Usize) => TyUint(tcx.sess.target.usize_ty),\n         ref t @ TyUint(_) | ref t @ TyInt(_) => t.clone(),\n         _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n     };"}, {"sha": "ae8f65303a7fec7b95cc4b869ea67e1c8d7b53b6", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -114,10 +114,9 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n     fn init(&self, sess: &Session) {\n         for cty in sess.opts.crate_types.iter() {\n             match *cty {\n-                CrateType::CrateTypeRlib | CrateType::CrateTypeDylib |\n-                CrateType::CrateTypeExecutable => {},\n+                CrateType::Rlib | CrateType::Dylib | CrateType::Executable => {},\n                 _ => {\n-                    sess.parse_sess.span_diagnostic.warn(\n+                    sess.diagnostic().warn(\n                         &format!(\"LLVM unsupported, so output type {} is not supported\", cty)\n                     );\n                 },\n@@ -201,13 +200,14 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         let ongoing_codegen = ongoing_codegen.downcast::<OngoingCodegen>()\n             .expect(\"Expected MetadataOnlyCodegenBackend's OngoingCodegen, found Box<dyn Any>\");\n         for &crate_type in sess.opts.crate_types.iter() {\n-            if crate_type != CrateType::CrateTypeRlib && crate_type != CrateType::CrateTypeDylib {\n+            if crate_type != CrateType::Rlib &&\n+               crate_type != CrateType::Dylib {\n                 continue;\n             }\n             let output_name =\n                 out_filename(sess, crate_type, &outputs, &ongoing_codegen.crate_name.as_str());\n             let mut compressed = ongoing_codegen.metadata_version.clone();\n-            let metadata = if crate_type == CrateType::CrateTypeDylib {\n+            let metadata = if crate_type == CrateType::Dylib {\n                 DeflateEncoder::new(&mut compressed, Compression::fast())\n                     .write_all(&ongoing_codegen.metadata.raw_data)\n                     .unwrap();\n@@ -220,8 +220,8 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         }\n \n         sess.abort_if_errors();\n-        if !sess.opts.crate_types.contains(&CrateType::CrateTypeRlib)\n-            && !sess.opts.crate_types.contains(&CrateType::CrateTypeDylib)\n+        if !sess.opts.crate_types.contains(&CrateType::Rlib)\n+            && !sess.opts.crate_types.contains(&CrateType::Dylib)\n         {\n             sess.fatal(\"Executables are not supported by the metadata-only backend.\");\n         }"}, {"sha": "73cffdf7d491d297667881481aa2129657426738", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -114,24 +114,24 @@ pub fn filename_for_input(sess: &Session,\n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n \n     match crate_type {\n-        config::CrateTypeRlib => {\n+        config::CrateType::Rlib => {\n             outputs.out_directory.join(&format!(\"lib{}.rlib\", libname))\n         }\n-        config::CrateTypeCdylib |\n-        config::CrateTypeProcMacro |\n-        config::CrateTypeDylib => {\n+        config::CrateType::Cdylib |\n+        config::CrateType::ProcMacro |\n+        config::CrateType::Dylib => {\n             let (prefix, suffix) = (&sess.target.target.options.dll_prefix,\n                                     &sess.target.target.options.dll_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname,\n                                                 suffix))\n         }\n-        config::CrateTypeStaticlib => {\n+        config::CrateType::Staticlib => {\n             let (prefix, suffix) = (&sess.target.target.options.staticlib_prefix,\n                                     &sess.target.target.options.staticlib_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname,\n                                                 suffix))\n         }\n-        config::CrateTypeExecutable => {\n+        config::CrateType::Executable => {\n             let suffix = &sess.target.target.options.exe_suffix;\n             let out_filename = outputs.path(OutputType::Exe);\n             if suffix.is_empty() {\n@@ -148,25 +148,25 @@ pub fn filename_for_input(sess: &Session,\n /// Default crate type is used when crate type isn't provided neither\n /// through cmd line arguments nor through crate attributes\n ///\n-/// It is CrateTypeExecutable for all platforms but iOS as there is no\n+/// It is CrateType::Executable for all platforms but iOS as there is no\n /// way to run iOS binaries anyway without jailbreaking and\n /// interaction with Rust code through static library is the only\n /// option for now\n pub fn default_output_for_target(sess: &Session) -> config::CrateType {\n     if !sess.target.target.options.executables {\n-        config::CrateTypeStaticlib\n+        config::CrateType::Staticlib\n     } else {\n-        config::CrateTypeExecutable\n+        config::CrateType::Executable\n     }\n }\n \n /// Checks if target supports crate_type as output\n pub fn invalid_output_for_target(sess: &Session,\n                                  crate_type: config::CrateType) -> bool {\n     match crate_type {\n-        config::CrateTypeCdylib |\n-        config::CrateTypeDylib |\n-        config::CrateTypeProcMacro => {\n+        config::CrateType::Cdylib |\n+        config::CrateType::Dylib |\n+        config::CrateType::ProcMacro => {\n             if !sess.target.target.options.dynamic_linking {\n                 return true\n             }\n@@ -178,12 +178,12 @@ pub fn invalid_output_for_target(sess: &Session,\n     }\n     if sess.target.target.options.only_cdylib {\n         match crate_type {\n-            config::CrateTypeProcMacro | config::CrateTypeDylib => return true,\n+            config::CrateType::ProcMacro | config::CrateType::Dylib => return true,\n             _ => {}\n         }\n     }\n     if !sess.target.target.options.executables {\n-        if crate_type == config::CrateTypeExecutable {\n+        if crate_type == config::CrateType::Executable {\n             return true\n         }\n     }"}, {"sha": "d834a6502b280fa8f9f4b391df546ccbf532f35a", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -201,7 +201,7 @@ fn get_symbol_hash<'a, 'tcx>(\n \n         if avoid_cross_crate_conflicts {\n             let instantiating_crate = if is_generic {\n-                if !def_id.is_local() && tcx.share_generics() {\n+                if !def_id.is_local() && tcx.sess.opts.share_generics() {\n                     // If we are re-using a monomorphization from another crate,\n                     // we have to compute the symbol hash accordingly.\n                     let upstream_monomorphizations = tcx.upstream_monomorphizations_for(def_id);"}, {"sha": "805a5ecd9913010a0ad68830b81c83f3a41cdc4d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -1058,7 +1058,7 @@ where\n         krate = time(sess, \"maybe creating a macro crate\", || {\n             let crate_types = sess.crate_types.borrow();\n             let num_crate_types = crate_types.len();\n-            let is_proc_macro_crate = crate_types.contains(&config::CrateTypeProcMacro);\n+            let is_proc_macro_crate = crate_types.contains(&config::CrateType::ProcMacro);\n             let is_test_crate = sess.opts.test;\n             syntax_ext::proc_macro_registrar::modify(\n                 &sess.parse_sess,\n@@ -1133,7 +1133,7 @@ where\n     // Unresolved macros might be due to mistyped `#[macro_use]`,\n     // so abort after checking for unknown attributes. (#49074)\n     if resolver.found_unresolved_macro {\n-        sess.parse_sess.span_diagnostic.abort_if_errors();\n+        sess.diagnostic().abort_if_errors();\n     }\n \n     // Lower ast -> hir.\n@@ -1501,13 +1501,13 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n         .filter_map(|a| {\n             if a.check_name(\"crate_type\") {\n                 match a.value_str() {\n-                    Some(ref n) if *n == \"rlib\" => Some(config::CrateTypeRlib),\n-                    Some(ref n) if *n == \"dylib\" => Some(config::CrateTypeDylib),\n-                    Some(ref n) if *n == \"cdylib\" => Some(config::CrateTypeCdylib),\n+                    Some(ref n) if *n == \"rlib\" => Some(config::CrateType::Rlib),\n+                    Some(ref n) if *n == \"dylib\" => Some(config::CrateType::Dylib),\n+                    Some(ref n) if *n == \"cdylib\" => Some(config::CrateType::Cdylib),\n                     Some(ref n) if *n == \"lib\" => Some(config::default_lib_output()),\n-                    Some(ref n) if *n == \"staticlib\" => Some(config::CrateTypeStaticlib),\n-                    Some(ref n) if *n == \"proc-macro\" => Some(config::CrateTypeProcMacro),\n-                    Some(ref n) if *n == \"bin\" => Some(config::CrateTypeExecutable),\n+                    Some(ref n) if *n == \"staticlib\" => Some(config::CrateType::Staticlib),\n+                    Some(ref n) if *n == \"proc-macro\" => Some(config::CrateType::ProcMacro),\n+                    Some(ref n) if *n == \"bin\" => Some(config::CrateType::Executable),\n                     Some(_) => {\n                         session.buffer_lint(\n                             lint::builtin::UNKNOWN_CRATE_TYPES,\n@@ -1534,7 +1534,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n     // If we're generating a test executable, then ignore all other output\n     // styles at all other locations\n     if session.opts.test {\n-        return vec![config::CrateTypeExecutable];\n+        return vec![config::CrateType::Executable];\n     }\n \n     // Only check command line flags if present. If no types are specified by\n@@ -1598,7 +1598,7 @@ pub fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {\n     let is_exe = session\n         .crate_types\n         .borrow()\n-        .contains(&config::CrateTypeExecutable);\n+        .contains(&config::CrateType::Executable);\n     hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n \n     CrateDisambiguator::from(hasher.finish())"}, {"sha": "03651322bc9806ae7dceacd35ca0aa2bb4bdc771", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -99,7 +99,7 @@ fn test_env<F>(source_string: &str,\n     where F: FnOnce(Env)\n {\n     syntax::with_globals(|| {\n-        let mut options = config::basic_options();\n+        let mut options = config::Options::default();\n         options.debugging_opts.verbose = true;\n         options.unstable_features = UnstableFeatures::Allow;\n "}, {"sha": "62c06aac1df0ecb5bb3006fdcc97a5ed4b8c9ecd", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -627,7 +627,7 @@ impl<'a> CrateLoader<'a> {\n         // If we're only compiling an rlib, then there's no need to select a\n         // panic runtime, so we just skip this section entirely.\n         let any_non_rlib = self.sess.crate_types.borrow().iter().any(|ct| {\n-            *ct != config::CrateTypeRlib\n+            *ct != config::CrateType::Rlib\n         });\n         if !any_non_rlib {\n             info!(\"panic runtime injection skipped, only generating rlib\");\n@@ -738,13 +738,13 @@ impl<'a> CrateLoader<'a> {\n                 if !self.sess.crate_types.borrow().iter().all(|ct| {\n                     match *ct {\n                         // Link the runtime\n-                        config::CrateTypeStaticlib |\n-                        config::CrateTypeExecutable => true,\n+                        config::CrateType::Staticlib |\n+                        config::CrateType::Executable => true,\n                         // This crate will be compiled with the required\n                         // instrumentation pass\n-                        config::CrateTypeRlib |\n-                        config::CrateTypeDylib |\n-                        config::CrateTypeCdylib =>\n+                        config::CrateType::Rlib |\n+                        config::CrateType::Dylib |\n+                        config::CrateType::Cdylib =>\n                             false,\n                         _ => {\n                             self.sess.err(&format!(\"Only executables, staticlibs, \\\n@@ -760,10 +760,10 @@ impl<'a> CrateLoader<'a> {\n                 if !self.sess.crate_types.borrow().iter().all(|ct| {\n                     match *ct {\n                         // Link the runtime\n-                        config::CrateTypeExecutable => true,\n+                        config::CrateType::Executable => true,\n                         // This crate will be compiled with the required\n                         // instrumentation pass\n-                        config::CrateTypeRlib => false,\n+                        config::CrateType::Rlib => false,\n                         _ => {\n                             self.sess.err(&format!(\"Only executables and rlibs can be \\\n                                                     compiled with `-Z sanitizer`\"));\n@@ -853,12 +853,12 @@ impl<'a> CrateLoader<'a> {\n         let mut need_exe_alloc = false;\n         for ct in self.sess.crate_types.borrow().iter() {\n             match *ct {\n-                config::CrateTypeExecutable => need_exe_alloc = true,\n-                config::CrateTypeDylib |\n-                config::CrateTypeProcMacro |\n-                config::CrateTypeCdylib |\n-                config::CrateTypeStaticlib => need_lib_alloc = true,\n-                config::CrateTypeRlib => {}\n+                config::CrateType::Executable => need_exe_alloc = true,\n+                config::CrateType::Dylib |\n+                config::CrateType::ProcMacro |\n+                config::CrateType::Cdylib |\n+                config::CrateType::Staticlib => need_lib_alloc = true,\n+                config::CrateType::Rlib => {}\n             }\n         }\n         if !need_lib_alloc && !need_exe_alloc {"}, {"sha": "4a02a278bc14ebb5bbe38370124840a98c739f90", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -28,7 +28,7 @@ use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt, ReprOptions, SymbolName};\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n \n-use rustc::session::config::{self, CrateTypeProcMacro};\n+use rustc::session::config::{self, CrateType};\n use rustc::util::nodemap::FxHashMap;\n \n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -478,7 +478,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let attrs = tcx.hir.krate_attrs();\n         let link_meta = self.link_meta;\n-        let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n+        let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateType::ProcMacro);\n         let has_default_lib_allocator = attr::contains_name(&attrs, \"default_lib_allocator\");\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n \n@@ -1542,7 +1542,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {\n-        match self.tcx.sess.dependency_formats.borrow().get(&config::CrateTypeDylib) {\n+        match self.tcx.sess.dependency_formats.borrow().get(&config::CrateType::Dylib) {\n             Some(arr) => {\n                 self.lazy_seq(arr.iter().map(|slot| {\n                     match *slot {"}, {"sha": "230d6f0472edde6f538b447f779b1adbdc057275", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -770,7 +770,7 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n         // If we are not in share generics mode, we don't link to upstream\n         // monomorphizations but always instantiate our own internal versions\n         // instead.\n-        if !tcx.share_generics() {\n+        if !tcx.sess.opts.share_generics() {\n             return false\n         }\n \n@@ -1047,7 +1047,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     /// the return type of `main`. This is not needed when\n     /// the user writes their own `start` manually.\n     fn push_extra_entry_roots(&mut self) {\n-        if self.tcx.sess.entry_fn.get().map(|e| e.2) != Some(config::EntryMain) {\n+        if self.tcx.sess.entry_fn.get().map(|e| e.2) != Some(config::EntryFnType::Main) {\n             return\n         }\n "}, {"sha": "8d6d01633a12ef8d5faa6bb52f12bef0475ec9fa", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -304,7 +304,7 @@ fn place_root_mono_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // available to downstream crates. This depends on whether we are in\n     // share-generics mode and whether the current crate can even have\n     // downstream crates.\n-    let export_generics = tcx.share_generics() &&\n+    let export_generics = tcx.sess.opts.share_generics() &&\n                           tcx.local_crate_exports_generics();\n \n     for mono_item in mono_items {"}, {"sha": "164790db4b5ec81b0f0ab62420b4481f8afc6419", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -42,7 +42,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext};\n-use rustc::session::config::FullDebugInfo;\n+use rustc::session::config::DebugInfo;\n use std::borrow::Cow;\n use transform::{MirPass, MirSource};\n \n@@ -294,7 +294,7 @@ impl MirPass for SimplifyLocals {\n         }\n \n         // We may need to keep dead user variables live for debuginfo.\n-        if tcx.sess.opts.debuginfo == FullDebugInfo {\n+        if tcx.sess.opts.debuginfo == DebugInfo::Full {\n             for local in mir.vars_iter() {\n                 marker.locals.insert(local);\n             }"}, {"sha": "0ea90e745319004513a8df8a740f08a95d1a618a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -32,7 +32,7 @@ struct AstValidator<'a> {\n \n impl<'a> AstValidator<'a> {\n     fn err_handler(&self) -> &errors::Handler {\n-        &self.session.parse_sess.span_diagnostic\n+        &self.session.diagnostic()\n     }\n \n     fn check_lifetime(&self, ident: Ident) {"}, {"sha": "6e49951ff298ac652ffd9a841ca50b6e7b20ffde", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -44,7 +44,7 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::map::{Node, NodeTraitItem, NodeImplItem};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::ExternCrate;\n-use rustc::session::config::CrateType::CrateTypeExecutable;\n+use rustc::session::config::CrateType;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -1048,7 +1048,7 @@ impl<'a> DumpHandler<'a> {\n                 let executable = sess.crate_types\n                     .borrow()\n                     .iter()\n-                    .any(|ct| *ct == CrateTypeExecutable);\n+                    .any(|ct| *ct == CrateType::Executable);\n                 let mut out_name = if executable {\n                     \"\".to_owned()\n                 } else {"}, {"sha": "8c47df8b04221318e4ca7ddf1db159d303c57349", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -1111,7 +1111,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         if let Some((id, _, entry_type)) = *fcx.tcx.sess.entry_fn.borrow() {\n             if id == fn_id {\n                 match entry_type {\n-                    config::EntryMain => {\n+                    config::EntryFnType::Main => {\n                         let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n                         let trait_ref = ty::TraitRef::new(term_id, substs);\n                         let return_ty_span = decl.output.span();\n@@ -1122,7 +1122,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                             traits::Obligation::new(\n                                 cause, param_env, trait_ref.to_predicate()));\n                     },\n-                    config::EntryStart => {},\n+                    config::EntryFnType::Start => {},\n                 }\n             }\n         }"}, {"sha": "9fd5db16fb1089081bc6c552bd4a4ad8704b7f06", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -318,8 +318,8 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     if let Some((id, sp, entry_type)) = *tcx.sess.entry_fn.borrow() {\n         match entry_type {\n-            config::EntryMain => check_main_fn_ty(tcx, id, sp),\n-            config::EntryStart => check_start_fn_ty(tcx, id, sp),\n+            config::EntryFnType::Main => check_main_fn_ty(tcx, id, sp),\n+            config::EntryFnType::Start => check_start_fn_ty(tcx, id, sp),\n         }\n     }\n }"}, {"sha": "f2327ba3e88343cdc2052143b6d33be12f2c0bd0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -43,7 +43,7 @@ use clean;\n use clean::Clean;\n use html::render::RenderInfo;\n \n-pub use rustc::session::config::{Input, CodegenOptions};\n+pub use rustc::session::config::{Input, Options, CodegenOptions};\n pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n@@ -127,7 +127,7 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::C\n {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n     // stick to the defaults\n-    let sessopts = config::basic_options();\n+    let sessopts = Options::default();\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(color_config) => Box::new(\n             EmitterWriter::stderr(\n@@ -223,7 +223,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let sessopts = config::Options {\n         maybe_sysroot,\n         search_paths,\n-        crate_types: vec![config::CrateTypeRlib],\n+        crate_types: vec![config::CrateType::Rlib],\n         lint_opts: if !allow_warnings {\n             lints\n         } else {\n@@ -243,7 +243,7 @@ pub fn run_core(search_paths: SearchPaths,\n         error_format,\n         edition,\n         describe_lints,\n-        ..config::basic_options()\n+        ..Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, move |sessopts| {\n         let codemap = Lrc::new(codemap::CodeMap::new(sessopts.file_path_mapping()));"}, {"sha": "d8e382f6998ceb1b66e108d7770a04c8feabe92f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -73,7 +73,7 @@ pub fn run(input_path: &Path,\n         maybe_sysroot: maybe_sysroot.clone().or_else(\n             || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs.clone(),\n-        crate_types: vec![config::CrateTypeDylib],\n+        crate_types: vec![config::CrateType::Dylib],\n         cg: cg.clone(),\n         externs: externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n@@ -83,7 +83,7 @@ pub fn run(input_path: &Path,\n             ..config::basic_debugging_options()\n         },\n         edition,\n-        ..config::basic_options().clone()\n+        ..config::Options::default()\n     };\n     driver::spawn_thread_pool(sessopts, |sessopts| {\n         let codemap = Lrc::new(CodeMap::new(sessopts.file_path_mapping()));\n@@ -216,7 +216,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         maybe_sysroot: maybe_sysroot.or_else(\n             || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),\n         search_paths: libs,\n-        crate_types: vec![config::CrateTypeExecutable],\n+        crate_types: vec![config::CrateType::Executable],\n         output_types: outputs,\n         externs,\n         cg: config::CodegenOptions {\n@@ -230,7 +230,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             ..config::basic_debugging_options()\n         },\n         edition,\n-        ..config::basic_options().clone()\n+        ..config::Options::default()\n     };\n \n     // Shuffle around a few input and output handles here. We're going to pass"}, {"sha": "87d2026fe2dc86c670c47c3a25df150aefe19468", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -63,7 +63,7 @@ impl CodegenBackend for TheBackend {\n         let crate_name = ongoing_codegen.downcast::<Symbol>()\n             .expect(\"in join_codegen_and_link: ongoing_codegen is not a Symbol\");\n         for &crate_type in sess.opts.crate_types.iter() {\n-            if crate_type != CrateType::CrateTypeRlib {\n+            if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));\n             }\n             let output_name ="}, {"sha": "d83b21e64415d1ddc21c9a30b8c717ad3e115a53", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c3c340cce53396d23a20b236fa94f1d34b6df7/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=94c3c340cce53396d23a20b236fa94f1d34b6df7", "patch": "@@ -19,7 +19,7 @@ extern crate rustc_codegen_utils;\n extern crate syntax;\n \n use rustc::session::{build_session, Session};\n-use rustc::session::config::{basic_options, Input, Options,\n+use rustc::session::config::{Input, Options,\n                              OutputType, OutputTypes};\n use rustc_driver::driver::{self, compile_input, CompileController};\n use rustc_metadata::cstore::CStore;\n@@ -63,7 +63,7 @@ fn basic_sess(opts: Options) -> (Session, Rc<CStore>, Box<CodegenBackend>) {\n \n fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     syntax::with_globals(|| {\n-        let mut opts = basic_options();\n+        let mut opts = Options::default();\n         opts.output_types = OutputTypes::new(&[(OutputType::Exe, None)]);\n         opts.maybe_sysroot = Some(sysroot);\n         if let Ok(linker) = std::env::var(\"RUSTC_LINKER\") {"}]}