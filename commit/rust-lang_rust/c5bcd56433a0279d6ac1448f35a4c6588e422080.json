{"sha": "c5bcd56433a0279d6ac1448f35a4c6588e422080", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YmNkNTY0MzNhMDI3OWQ2YWMxNDQ4ZjM1YTRjNjU4OGU0MjIwODA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-16T13:46:29Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-16T13:47:59Z"}, "message": "Cleanup tests", "tree": {"sha": "a79aafc206bffd8d05409991f6749c6e88702063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79aafc206bffd8d05409991f6749c6e88702063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5bcd56433a0279d6ac1448f35a4c6588e422080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bcd56433a0279d6ac1448f35a4c6588e422080", "html_url": "https://github.com/rust-lang/rust/commit/c5bcd56433a0279d6ac1448f35a4c6588e422080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5bcd56433a0279d6ac1448f35a4c6588e422080/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da00208ab94f1109c630f28adef033c83558a8e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da00208ab94f1109c630f28adef033c83558a8e3", "html_url": "https://github.com/rust-lang/rust/commit/da00208ab94f1109c630f28adef033c83558a8e3"}], "stats": {"total": 162, "additions": 23, "deletions": 139}, "files": [{"sha": "e6aab9e84813d9f3d8d5b8f70a46b69de4f11068", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 23, "deletions": 139, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/c5bcd56433a0279d6ac1448f35a4c6588e422080/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5bcd56433a0279d6ac1448f35a4c6588e422080/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=c5bcd56433a0279d6ac1448f35a4c6588e422080", "patch": "@@ -1,7 +1,7 @@\n use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, AstToken},\n-    match_ast, NodeOrToken, SyntaxElement, TextRange, TextSize, T,\n+    match_ast, NodeOrToken, SyntaxElement, TextSize, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -41,7 +41,6 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         .ok()?;\n \n     let parent = macro_call.syntax().parent()?;\n-    let parent_is_let_stmt = ast::LetStmt::can_cast(parent.kind());\n     let (range, text) = match &*input_expressions {\n         // dbg!()\n         [] => {\n@@ -75,7 +74,6 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                     (\n                         ast::Expr::BoxExpr(_) | ast::Expr::PrefixExpr(_) | ast::Expr::RefExpr(_),\n                         ast::Expr::AwaitExpr(_)\n-                        | ast::Expr::BinExpr(_)\n                         | ast::Expr::CallExpr(_)\n                         | ast::Expr::CastExpr(_)\n                         | ast::Expr::FieldExpr(_)\n@@ -108,13 +106,7 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             )\n         }\n         // dbg!(expr0, expr1, ...)\n-        exprs => (macro_call.syntax().text_range(), format!(\"({})\", exprs.iter().format(\",\"))),\n-    };\n-\n-    let range = if macro_call.semicolon_token().is_some() && parent_is_let_stmt {\n-        TextRange::new(range.start(), range.end() - TextSize::of(\";\"))\n-    } else {\n-        range\n+        exprs => (macro_call.syntax().text_range(), format!(\"({})\", exprs.iter().format(\", \"))),\n     };\n \n     acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", range, |builder| {\n@@ -143,18 +135,8 @@ mod tests {\n     #[test]\n     fn test_remove_dbg() {\n         check(\"$0dbg!(1 + 1)\", \"1 + 1\");\n-        check(\"dbg!$0((1 + 1))\", \"(1 + 1)\");\n+        check(\"dbg!$0(1 + 1)\", \"1 + 1\");\n         check(\"dbg!(1 $0+ 1)\", \"1 + 1\");\n-        check(\"let _ = $0dbg!(1 + 1)\", \"let _ = 1 + 1\");\n-        check(\n-            \"if let Some(_) = dbg!(n.$0checked_sub(4)) {}\",\n-            \"if let Some(_) = n.checked_sub(4) {}\",\n-        );\n-        check(\"$0dbg!(Foo::foo_test()).bar()\", \"Foo::foo_test().bar()\");\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_with_brackets_and_braces() {\n         check(\"dbg![$01 + 1]\", \"1 + 1\");\n         check(\"dbg!{$01 + 1}\", \"1 + 1\");\n     }\n@@ -167,100 +149,36 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_remove_dbg_keep_semicolon() {\n+    fn test_remove_dbg_keep_semicolon_in_let() {\n         // https://github.com/rust-analyzer/rust-analyzer/issues/5129#issuecomment-651399779\n-        // not quite though\n-        // adding a comment at the end of the line makes\n-        // the ast::MacroCall to include the semicolon at the end\n         check(\n             r#\"let res = $0dbg!(1 * 20); // needless comment\"#,\n             r#\"let res = 1 * 20; // needless comment\"#,\n         );\n-    }\n-\n-    #[test]\n-    fn remove_dbg_from_non_leaf_simple_expression() {\n-        check_assist(\n-            remove_dbg,\n-            r\"\n-fn main() {\n-    let mut a = 1;\n-    while dbg!$0(a) < 10000 {\n-        a += 1;\n-    }\n-}\n-\",\n-            r\"\n-fn main() {\n-    let mut a = 1;\n-    while a < 10000 {\n-        a += 1;\n-    }\n-}\n-\",\n+        check(r#\"let res = $0dbg!(); // needless comment\"#, r#\"let res = (); // needless comment\"#);\n+        check(\n+            r#\"let res = $0dbg!(1, 2); // needless comment\"#,\n+            r#\"let res = (1, 2); // needless comment\"#,\n         );\n     }\n \n     #[test]\n-    fn test_remove_dbg_keep_expression() {\n-        check(r#\"let res = $0dbg!(a + b).foo();\"#, r#\"let res = (a + b).foo();\"#);\n-        check(r#\"let res = $0dbg!(2 + 2) * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n-        check(r#\"let res = $0dbg![2 + 2] * 5\"#, r#\"let res = (2 + 2) * 5\"#);\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_method_chaining() {\n-        check(r#\"let res = $0dbg!(foo().bar()).baz();\"#, r#\"let res = foo().bar().baz();\"#);\n-        check(r#\"let res = $0dbg!(foo.bar()).baz();\"#, r#\"let res = foo.bar().baz();\"#);\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_field_chaining() {\n-        check(r#\"let res = $0dbg!(foo.bar).baz;\"#, r#\"let res = foo.bar.baz;\"#);\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_from_inside_fn() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"\n-fn square(x: u32) -> u32 {\n-    x * x\n-}\n-\n-fn main() {\n-    let x = square(dbg$0!(5 + 10));\n-    println!(\"{}\", x);\n-}\"#,\n-            r#\"\n-fn square(x: u32) -> u32 {\n-    x * x\n-}\n-\n-fn main() {\n-    let x = square(5 + 10);\n-    println!(\"{}\", x);\n-}\"#,\n-        );\n+    fn test_remove_dbg_cast_cast() {\n+        check(r#\"let res = $0dbg!(x as u32) as u32;\"#, r#\"let res = x as u32 as u32;\"#);\n     }\n \n     #[test]\n-    fn test_remove_dbg_try_expr() {\n-        check(r#\"let res = $0dbg!(result?).foo();\"#, r#\"let res = result?.foo();\"#);\n+    fn test_remove_dbg_prefix() {\n+        check(r#\"let res = $0dbg!(&result).foo();\"#, r#\"let res = (&result).foo();\"#);\n+        check(r#\"let res = &$0dbg!(&result);\"#, r#\"let res = &&result;\"#);\n+        check(r#\"let res = $0dbg!(!result) && true;\"#, r#\"let res = !result && true;\"#);\n     }\n \n     #[test]\n-    fn test_remove_dbg_await_expr() {\n+    fn test_remove_dbg_post_expr() {\n         check(r#\"let res = $0dbg!(fut.await).foo();\"#, r#\"let res = fut.await.foo();\"#);\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_as_cast() {\n-        check(r#\"let res = $0dbg!(3 as usize).foo();\"#, r#\"let res = (3 as usize).foo();\"#);\n-    }\n-\n-    #[test]\n-    fn test_remove_dbg_index_expr() {\n+        check(r#\"let res = $0dbg!(result?).foo();\"#, r#\"let res = result?.foo();\"#);\n+        check(r#\"let res = $0dbg!(foo as u32).foo();\"#, r#\"let res = (foo as u32).foo();\"#);\n         check(r#\"let res = $0dbg!(array[3]).foo();\"#, r#\"let res = array[3].foo();\"#);\n         check(r#\"let res = $0dbg!(tuple.3).foo();\"#, r#\"let res = tuple.3.foo();\"#);\n     }\n@@ -271,46 +189,6 @@ fn main() {\n         check(r#\"let res = $0dbg!(foo..=bar).foo();\"#, r#\"let res = (foo..=bar).foo();\"#);\n     }\n \n-    #[test]\n-    fn test_remove_dbg_followed_by_block() {\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    if $0dbg!(x || y) {}\n-}\"#,\n-            r#\"fn foo() {\n-    if x || y {}\n-}\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    while let foo = $0dbg!(&x) {}\n-}\"#,\n-            r#\"fn foo() {\n-    while let foo = &x {}\n-}\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    if let foo = $0dbg!(&x) {}\n-}\"#,\n-            r#\"fn foo() {\n-    if let foo = &x {}\n-}\"#,\n-        );\n-        check_assist(\n-            remove_dbg,\n-            r#\"fn foo() {\n-    match $0dbg!(&x) {}\n-}\"#,\n-            r#\"fn foo() {\n-    match &x {}\n-}\"#,\n-        );\n-    }\n-\n     #[test]\n     fn test_remove_empty_dbg() {\n         check_assist(remove_dbg, r#\"fn foo() { $0dbg!(); }\"#, r#\"fn foo() { }\"#);\n@@ -354,4 +232,10 @@ fn foo() {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_remove_multi_dbg() {\n+        check(r#\"$0dbg!(0, 1)\"#, r#\"(0, 1)\"#);\n+        check(r#\"$0dbg!(0, (1, 2))\"#, r#\"(0, (1, 2))\"#);\n+    }\n }"}]}