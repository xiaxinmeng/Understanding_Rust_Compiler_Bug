{"sha": "33535afda497e1de8a831e8270ae8099434f662b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTM1YWZkYTQ5N2UxZGU4YTgzMWU4MjcwYWU4MDk5NDM0ZjY2MmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T01:04:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-02T01:04:27Z"}, "message": "Auto merge of #40851 - oli-obk:multisugg, r=jonathandturner\n\nMinimize single span suggestions into a label\n\nchanges\n\n```\n14 |     println!(\"\u2603{}\", tup[0]);\n   |                     ^^^^^^\n   |\nhelp: to access tuple elements, use tuple indexing syntax as shown\n   |     println!(\"\u2603{}\", tup.0);\n```\n\ninto\n\n```\n14 |     println!(\"\u2603{}\", tup[0]);\n   |                     ^^^^^^ to access tuple elements, use `tup.0`\n```\n\nAlso makes suggestions explicit in the backend in preparation of adding multiple suggestions to a single diagnostic. Currently that's already possible, but results in a full help message + modified code snippet per suggestion, and has no rate limit (might show 100+ suggestions).", "tree": {"sha": "17b14bd7f6ab382784b26bdf01722525d3bbdb2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b14bd7f6ab382784b26bdf01722525d3bbdb2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33535afda497e1de8a831e8270ae8099434f662b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33535afda497e1de8a831e8270ae8099434f662b", "html_url": "https://github.com/rust-lang/rust/commit/33535afda497e1de8a831e8270ae8099434f662b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33535afda497e1de8a831e8270ae8099434f662b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de4bdd20f87d95d164c883dc141a2763e4df155a", "url": "https://api.github.com/repos/rust-lang/rust/commits/de4bdd20f87d95d164c883dc141a2763e4df155a", "html_url": "https://github.com/rust-lang/rust/commit/de4bdd20f87d95d164c883dc141a2763e4df155a"}, {"sha": "d64af4a627532c978ed2682de0e9411aa3a83e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/d64af4a627532c978ed2682de0e9411aa3a83e75", "html_url": "https://github.com/rust-lang/rust/commit/d64af4a627532c978ed2682de0e9411aa3a83e75"}], "stats": {"total": 247, "additions": 155, "deletions": 92}, "files": [{"sha": "38fa35ecb126299a7fec1f01638447bf3c510b07", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -11,7 +11,6 @@\n use CodeSuggestion;\n use Level;\n use RenderSpan;\n-use RenderSpan::Suggestion;\n use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n use snippet::Style;\n@@ -24,6 +23,7 @@ pub struct Diagnostic {\n     pub code: Option<String>,\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n+    pub suggestion: Option<CodeSuggestion>,\n }\n \n /// For example a note attached to an error.\n@@ -87,6 +87,7 @@ impl Diagnostic {\n             code: code,\n             span: MultiSpan::new(),\n             children: vec![],\n+            suggestion: None,\n         }\n     }\n \n@@ -202,19 +203,14 @@ impl Diagnostic {\n \n     /// Prints out a message with a suggested edit of the code.\n     ///\n-    /// See `diagnostic::RenderSpan::Suggestion` for more information.\n-    pub fn span_suggestion<S: Into<MultiSpan>>(&mut self,\n-                                               sp: S,\n-                                               msg: &str,\n-                                               suggestion: String)\n-                                               -> &mut Self {\n-        self.sub(Level::Help,\n-                 msg,\n-                 MultiSpan::new(),\n-                 Some(Suggestion(CodeSuggestion {\n-                     msp: sp.into(),\n-                     substitutes: vec![suggestion],\n-                 })));\n+    /// See `diagnostic::CodeSuggestion` for more information.\n+    pub fn span_suggestion(&mut self, sp: Span, msg: &str, suggestion: String) -> &mut Self {\n+        assert!(self.suggestion.is_none());\n+        self.suggestion = Some(CodeSuggestion {\n+            msp: sp.into(),\n+            substitutes: vec![suggestion],\n+            msg: msg.to_owned(),\n+        });\n         self\n     }\n "}, {"sha": "9dfd47b8464d78ed730e51879491f49f4a660133", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -141,11 +141,11 @@ impl<'a> DiagnosticBuilder<'a> {\n                                                   sp: S,\n                                                   msg: &str)\n                                                   -> &mut Self);\n-    forward!(pub fn span_suggestion<S: Into<MultiSpan>>(&mut self,\n-                                                        sp: S,\n-                                                        msg: &str,\n-                                                        suggestion: String)\n-                                                        -> &mut Self);\n+    forward!(pub fn span_suggestion(&mut self,\n+                                    sp: Span,\n+                                    msg: &str,\n+                                    suggestion: String)\n+                                    -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: String) -> &mut Self);\n "}, {"sha": "1a38018e1b378d0a68d586040bde249b2fac08e1", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -34,6 +34,27 @@ impl Emitter for EmitterWriter {\n     fn emit(&mut self, db: &DiagnosticBuilder) {\n         let mut primary_span = db.span.clone();\n         let mut children = db.children.clone();\n+\n+        if let Some(sugg) = db.suggestion.clone() {\n+            assert_eq!(sugg.msp.primary_spans().len(), sugg.substitutes.len());\n+            // don't display multispans as labels\n+            if sugg.substitutes.len() == 1 &&\n+               // don't display long messages as labels\n+               sugg.msg.split_whitespace().count() < 10 &&\n+               // don't display multiline suggestions as labels\n+               sugg.substitutes[0].find('\\n').is_none() {\n+                let msg = format!(\"help: {} `{}`\", sugg.msg, sugg.substitutes[0]);\n+                primary_span.push_span_label(sugg.msp.primary_spans()[0], msg);\n+            } else {\n+                children.push(SubDiagnostic {\n+                    level: Level::Help,\n+                    message: Vec::new(),\n+                    span: MultiSpan::new(),\n+                    render_span: Some(Suggestion(sugg)),\n+                });\n+            }\n+        }\n+\n         self.fix_multispans_in_std_macros(&mut primary_span, &mut children);\n         self.emit_messages_default(&db.level,\n                                    &db.styled_message(),\n@@ -756,7 +777,7 @@ impl EmitterWriter {\n     /// displayed, keeping the provided highlighting.\n     fn msg_to_buffer(&self,\n                      buffer: &mut StyledBuffer,\n-                     msg: &Vec<(String, Style)>,\n+                     msg: &[(String, Style)],\n                      padding: usize,\n                      label: &str,\n                      override_style: Option<Style>) {\n@@ -1022,7 +1043,6 @@ impl EmitterWriter {\n     fn emit_suggestion_default(&mut self,\n                                suggestion: &CodeSuggestion,\n                                level: &Level,\n-                               msg: &Vec<(String, Style)>,\n                                max_line_num_len: usize)\n                                -> io::Result<()> {\n         use std::borrow::Borrow;\n@@ -1034,7 +1054,7 @@ impl EmitterWriter {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             buffer.append(0, \": \", Style::HeaderMsg);\n             self.msg_to_buffer(&mut buffer,\n-                               msg,\n+                               &[(suggestion.msg.to_owned(), Style::NoStyle)],\n                                max_line_num_len,\n                                \"suggestion\",\n                                Some(Style::HeaderMsg));\n@@ -1099,7 +1119,6 @@ impl EmitterWriter {\n                         Some(Suggestion(ref cs)) => {\n                             match self.emit_suggestion_default(cs,\n                                                                &child.level,\n-                                                               &child.styled_message(),\n                                                                max_line_num_len) {\n                                 Err(e) => panic!(\"failed to emit error: {}\", e),\n                                 _ => ()"}, {"sha": "02d8297dd46140e30f3bef15f5fb7cd4f82a91fe", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -67,6 +67,7 @@ pub enum RenderSpan {\n pub struct CodeSuggestion {\n     pub msp: MultiSpan,\n     pub substitutes: Vec<String>,\n+    pub msg: String,\n }\n \n pub trait CodeMapper {"}, {"sha": "5a581788a21a4997610ad8b4514753eb6c34dc35", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -3883,9 +3883,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                       let snip = tcx.sess.codemap().span_to_snippet(base.span);\n                                       if let Ok(snip) = snip {\n                                           err.span_suggestion(expr.span,\n-                                                              \"to access tuple elements, \\\n-                                                               use tuple indexing syntax \\\n-                                                               as shown\",\n+                                                              \"to access tuple elements, use\",\n                                                               format!(\"{}.{}\", snip, i));\n                                           needs_note = false;\n                                       }"}, {"sha": "d3d65ce4a626e10f5d0ecc3faa7410b5883fdeae", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -197,7 +197,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // error types are considered \"builtin\"\n                 if !lhs_ty.references_error() {\n                     if let IsAssign::Yes = is_assign {\n-                        struct_span_err!(self.tcx.sess, lhs_expr.span, E0368,\n+                        struct_span_err!(self.tcx.sess, expr.span, E0368,\n                                          \"binary assignment operation `{}=` \\\n                                           cannot be applied to type `{}`\",\n                                          op.node.as_str(),\n@@ -207,7 +207,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         op.node.as_str(), lhs_ty))\n                             .emit();\n                     } else {\n-                        let mut err = struct_span_err!(self.tcx.sess, lhs_expr.span, E0369,\n+                        let mut err = struct_span_err!(self.tcx.sess, expr.span, E0369,\n                             \"binary operation `{}` cannot be applied to type `{}`\",\n                             op.node.as_str(),\n                             lhs_ty);\n@@ -245,7 +245,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(missing_trait) = missing_trait {\n                             if missing_trait == \"std::ops::Add\" &&\n                                 self.check_str_addition(expr, lhs_expr, lhs_ty,\n-                                                         rhs_expr, rhs_ty, &mut err) {\n+                                                        rhs_ty, &mut err) {\n                                 // This has nothing here because it means we did string\n                                 // concatenation (e.g. \"Hello \" + \"World!\"). This means\n                                 // we don't want the note in the else clause to be emitted\n@@ -269,7 +269,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           expr: &'gcx hir::Expr,\n                           lhs_expr: &'gcx hir::Expr,\n                           lhs_ty: Ty<'tcx>,\n-                          rhs_expr: &'gcx hir::Expr,\n                           rhs_ty: Ty<'tcx>,\n                           mut err: &mut errors::DiagnosticBuilder) -> bool {\n         // If this function returns true it means a note was printed, so we don't need\n@@ -278,17 +277,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let TyRef(_, l_ty) = lhs_ty.sty {\n             if let TyRef(_, r_ty) = rhs_ty.sty {\n                 if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr {\n-                    err.note(\"`+` can't be used to concatenate two `&str` strings\");\n+                    err.span_label(expr.span,\n+                        &\"`+` can't be used to concatenate two `&str` strings\");\n                     let codemap = self.tcx.sess.codemap();\n                     let suggestion =\n-                        match (codemap.span_to_snippet(lhs_expr.span),\n-                                codemap.span_to_snippet(rhs_expr.span)) {\n-                            (Ok(lstring), Ok(rstring)) =>\n-                                format!(\"{}.to_owned() + {}\", lstring, rstring),\n+                        match codemap.span_to_snippet(lhs_expr.span) {\n+                            Ok(lstring) => format!(\"{}.to_owned()\", lstring),\n                             _ => format!(\"<expression>\")\n                         };\n-                    err.span_suggestion(expr.span,\n-                        &format!(\"to_owned() can be used to create an owned `String` \\\n+                    err.span_suggestion(lhs_expr.span,\n+                        &format!(\"`to_owned()` can be used to create an owned `String` \\\n                                   from a string reference. String concatenation \\\n                                   appends the string on the right to the string \\\n                                   on the left and may require reallocation. This \\"}, {"sha": "0f42ee15ecf6fea1110144fa55135cd10dc15f78", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -3181,6 +3181,13 @@ x << 2; // ok!\n \n It is also possible to overload most operators for your own type by\n implementing traits from `std::ops`.\n+\n+String concatenation appends the string on the right to the string on the\n+left and may require reallocation. This requires ownership of the string\n+on the left. If something should be added to a string literal, move the\n+literal to the heap by allocating it with `to_owned()` like in\n+`\"Your text\".to_owned()`.\n+\n \"##,\n \n E0370: r##\""}, {"sha": "0271ddbccbf38a75248ed418b39d4065511ba2bb", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -22,8 +22,9 @@\n use codemap::{CodeMap, FilePathMapping};\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n-use errors::{DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n+use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n use errors::emitter::Emitter;\n+use errors::snippet::Style;\n \n use std::rc::Rc;\n use std::io::{self, Write};\n@@ -153,12 +154,21 @@ impl Diagnostic {\n     fn from_diagnostic_builder(db: &DiagnosticBuilder,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n+        let sugg = db.suggestion.as_ref().map(|sugg| {\n+            SubDiagnostic {\n+                level: Level::Help,\n+                message: vec![(sugg.msg.clone(), Style::NoStyle)],\n+                span: MultiSpan::new(),\n+                render_span: Some(RenderSpan::Suggestion(sugg.clone())),\n+            }\n+        });\n+        let sugg = sugg.as_ref();\n         Diagnostic {\n             message: db.message(),\n             code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n             level: db.level.to_str(),\n             spans: DiagnosticSpan::from_multispan(&db.span, je),\n-            children: db.children.iter().map(|c| {\n+            children: db.children.iter().chain(sugg).map(|c| {\n                 Diagnostic::from_sub_diagnostic(c, je)\n             }).collect(),\n             rendered: None,"}, {"sha": "d252963274ee3477e0d1edcc20709f83a56ecb6d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -1492,9 +1492,8 @@ impl<'a> Parser<'a> {\n         let bounds = self.parse_ty_param_bounds()?;\n         let sum_span = ty.span.to(self.prev_span);\n \n-        let mut err = struct_span_err!(self.sess.span_diagnostic, ty.span, E0178,\n+        let mut err = struct_span_err!(self.sess.span_diagnostic, sum_span, E0178,\n             \"expected a path on the left-hand side of `+`, not `{}`\", pprust::ty_to_string(&ty));\n-        err.span_label(ty.span, &format!(\"expected a path\"));\n \n         match ty.node {\n             TyKind::Rptr(ref lifetime, ref mut_ty) => {\n@@ -1513,9 +1512,11 @@ impl<'a> Parser<'a> {\n                 err.span_suggestion(sum_span, \"try adding parentheses:\", sum_with_parens);\n             }\n             TyKind::Ptr(..) | TyKind::BareFn(..) => {\n-                help!(&mut err, \"perhaps you forgot parentheses?\");\n+                err.span_label(sum_span, &\"perhaps you forgot parentheses?\");\n             }\n-            _ => {}\n+            _ => {\n+                err.span_label(sum_span, &\"expected a path\");\n+            },\n         }\n         err.emit();\n         Ok(())\n@@ -5131,7 +5132,6 @@ impl<'a> Parser<'a> {\n         }\n \n         if self.check(&token::OpenDelim(token::Paren)) {\n-            let start_span = self.span;\n             // We don't `self.bump()` the `(` yet because this might be a struct definition where\n             // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.\n             // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so\n@@ -5170,12 +5170,9 @@ impl<'a> Parser<'a> {\n `pub(in path::to::module)`: visible only on the specified path\"##;\n                 let path = self.parse_path(PathStyle::Mod)?;\n                 let path_span = self.prev_span;\n-                let help_msg = format!(\"to make this visible only to module `{}`, add `in` before \\\n-                                       the path:\",\n-                                       path);\n+                let help_msg = format!(\"make this visible only to module `{}` with `in`:\", path);\n                 self.expect(&token::CloseDelim(token::Paren))?;  // `)`\n-                let sp = start_span.to(self.prev_span);\n-                let mut err = self.span_fatal_help(sp, &msg, &suggestion);\n+                let mut err = self.span_fatal_help(path_span, &msg, &suggestion);\n                 err.span_suggestion(path_span, &help_msg, format!(\"in {}\", path));\n                 err.emit();  // emit diagnostic, but continue with public visibility\n             }"}, {"sha": "f7cd4e03c3b11876519ce798f4e8d307fa83d0dc", "filename": "src/test/compile-fail/issue-27842.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     // the case where we show a suggestion\n     let _ = tup[0];\n     //~^ ERROR cannot index a value of type\n-    //~| HELP to access tuple elements, use tuple indexing syntax as shown\n+    //~| HELP to access tuple elements, use\n     //~| SUGGESTION let _ = tup.0\n \n     // the case where we show just a general hint"}, {"sha": "9df4be4595a95c12469e91a11448595660aa47c4", "filename": "src/test/parse-fail/trait-object-polytrait-priority.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -13,7 +13,6 @@ trait Trait<'a> {}\n fn main() {\n     let _: &for<'a> Trait<'a> + 'static;\n     //~^ ERROR expected a path on the left-hand side of `+`, not `& for<'a>Trait<'a>`\n-    //~| NOTE expected a path\n     //~| HELP try adding parentheses\n     //~| SUGGESTION &( for<'a>Trait<'a> + 'static)\n }"}, {"sha": "8fb6c9815cef8ef905bea149061b3985da5c23c4", "filename": "src/test/ui/did_you_mean/E0178.rs", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -12,17 +12,9 @@ trait Foo {}\n \n struct Bar<'a> {\n     w: &'a Foo + Copy,\n-    //~^ ERROR E0178\n-    //~| NOTE expected a path\n     x: &'a Foo + 'a,\n-    //~^ ERROR E0178\n-    //~| NOTE expected a path\n     y: &'a mut Foo + 'a,\n-    //~^ ERROR E0178\n-    //~| NOTE expected a path\n     z: fn() -> Foo + 'a,\n-    //~^ ERROR E0178\n-    //~| NOTE expected a path\n }\n \n fn main() {", "previous_filename": "src/test/compile-fail/E0178.rs"}, {"sha": "15e7131cfd3be41a75621b24e212971643909267", "filename": "src/test/ui/did_you_mean/E0178.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2FE0178.stderr?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -0,0 +1,26 @@\n+error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n+  --> $DIR/E0178.rs:14:8\n+   |\n+14 |     w: &'a Foo + Copy,\n+   |        ^^^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + Copy)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `&'a Foo`\n+  --> $DIR/E0178.rs:15:8\n+   |\n+15 |     x: &'a Foo + 'a,\n+   |        ^^^^^^^^^^^^ help: try adding parentheses: `&'a (Foo + 'a)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `&'a mut Foo`\n+  --> $DIR/E0178.rs:16:8\n+   |\n+16 |     y: &'a mut Foo + 'a,\n+   |        ^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'a mut (Foo + 'a)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `fn() -> Foo`\n+  --> $DIR/E0178.rs:17:8\n+   |\n+17 |     z: fn() -> Foo + 'a,\n+   |        ^^^^^^^^^^^^^^^^ perhaps you forgot parentheses?\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "11757abae9c9793f12251b2a004c3e35dc6bc8b5", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.rs", "status": "renamed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -10,12 +10,5 @@\n \n fn main() {\n     let _: &Copy + 'static;\n-    //~^ ERROR expected a path\n-    //~| HELP try adding parentheses\n-    //~| SUGGESTION let _: &(Copy + 'static);\n-    //~| ERROR the trait `std::marker::Copy` cannot be made into an object\n     let _: &'static Copy + 'static;\n-    //~^ ERROR expected a path\n-    //~| HELP try adding parentheses\n-    //~| SUGGESTION let _: &'static (Copy + 'static);\n }", "previous_filename": "src/test/compile-fail/trait-object-reference-without-parens-suggestion.rs"}, {"sha": "c4858b63c2d930e4a3af534edf1961a4e17386f8", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -0,0 +1,22 @@\n+error[E0178]: expected a path on the left-hand side of `+`, not `&Copy`\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:12:12\n+   |\n+12 |     let _: &Copy + 'static;\n+   |            ^^^^^^^^^^^^^^^ help: try adding parentheses: `&(Copy + 'static)`\n+\n+error[E0178]: expected a path on the left-hand side of `+`, not `&'static Copy`\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:13:12\n+   |\n+13 |     let _: &'static Copy + 'static;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try adding parentheses: `&'static (Copy + 'static)`\n+\n+error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n+  --> $DIR/trait-object-reference-without-parens-suggestion.rs:12:12\n+   |\n+12 |     let _: &Copy + 'static;\n+   |            ^^^^^ the trait `std::marker::Copy` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+\n+error: aborting due to previous error\n+"}, {"sha": "934ad24c167796c076ace2e736be011e17949d1f", "filename": "src/test/ui/pub/pub-restricted.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.rs?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -34,4 +34,8 @@ mod y {\n     }\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}\n+\n+// test multichar names\n+mod xyz {}\n+pub (xyz) fn xyz() {}"}, {"sha": "ae283f1fb636a151fb913cc8134a623ffff96f9b", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -1,47 +1,52 @@\n error: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:15:5\n+  --> $DIR/pub-restricted.rs:15:6\n    |\n 15 | pub (a) fn afn() {}\n-   |     ^^^\n+   |      ^ help: make this visible only to module `a` with `in`: `in a`\n    |\n    = help: some possible visibility restrictions are:\n            `pub(crate)`: visible only on the current crate\n            `pub(super)`: visible only in the current module's parent\n            `pub(in path::to::module)`: visible only on the specified path\n-help: to make this visible only to module `a`, add `in` before the path:\n-   | pub (in a) fn afn() {}\n \n error: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:16:5\n+  --> $DIR/pub-restricted.rs:16:6\n    |\n 16 | pub (b) fn bfn() {}\n-   |     ^^^\n+   |      ^ help: make this visible only to module `b` with `in`: `in b`\n    |\n    = help: some possible visibility restrictions are:\n            `pub(crate)`: visible only on the current crate\n            `pub(super)`: visible only in the current module's parent\n            `pub(in path::to::module)`: visible only on the specified path\n-help: to make this visible only to module `b`, add `in` before the path:\n-   | pub (in b) fn bfn() {}\n \n error: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:32:13\n+  --> $DIR/pub-restricted.rs:32:14\n    |\n 32 |         pub (a) invalid: usize,\n-   |             ^^^\n+   |              ^ help: make this visible only to module `a` with `in`: `in a`\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+\n+error: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:41:6\n+   |\n+41 | pub (xyz) fn xyz() {}\n+   |      ^^^ help: make this visible only to module `xyz` with `in`: `in xyz`\n    |\n    = help: some possible visibility restrictions are:\n            `pub(crate)`: visible only on the current crate\n            `pub(super)`: visible only in the current module's parent\n            `pub(in path::to::module)`: visible only on the specified path\n-help: to make this visible only to module `a`, add `in` before the path:\n-   |         pub (in a) invalid: usize,\n \n error: visibilities can only be restricted to ancestor modules\n   --> $DIR/pub-restricted.rs:33:17\n    |\n 33 |         pub (in x) non_parent_invalid: usize,\n    |                 ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "cd3a41b037c7996e8fa529e8fc805b9bca3e4c61", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -2,17 +2,16 @@ error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n   --> $DIR/issue-39018.rs:12:13\n    |\n 12 |     let x = \"Hello \" + \"World!\";\n-   |             ^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n    |\n-   = note: `+` can't be used to concatenate two `&str` strings\n-help: to_owned() can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left.\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left.\n    |     let x = \"Hello \".to_owned() + \"World!\";\n \n error[E0369]: binary operation `+` cannot be applied to type `World`\n   --> $DIR/issue-39018.rs:17:13\n    |\n 17 |     let y = World::Hello + World::Goodbye;\n-   |             ^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `World`\n "}, {"sha": "91e629c44b073572a8a9a8934fcb1b396e31cad4", "filename": "src/test/ui/span/suggestion-non-ascii.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -2,10 +2,7 @@ error: cannot index a value of type `({integer},)`\n   --> $DIR/suggestion-non-ascii.rs:14:21\n    |\n 14 |     println!(\"\u2603{}\", tup[0]);\n-   |                     ^^^^^^\n-   |\n-help: to access tuple elements, use tuple indexing syntax as shown\n-   |     println!(\"\u2603{}\", tup.0);\n+   |                     ^^^^^^ help: to access tuple elements, use `tup.0`\n \n error: aborting due to previous error\n "}, {"sha": "8a121b145366250abbcd1d39a05c42ca1d4e63d5", "filename": "src/test/ui/suggestions/tuple-float-index.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33535afda497e1de8a831e8270ae8099434f662b/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftuple-float-index.stderr?ref=33535afda497e1de8a831e8270ae8099434f662b", "patch": "@@ -2,10 +2,10 @@ error: unexpected token: `1.1`\n   --> $DIR/tuple-float-index.rs:14:17\n    |\n 14 |     (1, (2, 3)).1.1;\n-   |                 ^^^ unexpected token\n-   |\n-help: try parenthesizing the first index\n-   |     ((1, (2, 3)).1).1;\n+   |     ------------^^^\n+   |     |           |\n+   |     |           unexpected token\n+   |     help: try parenthesizing the first index `((1, (2, 3)).1).1`\n \n error: aborting due to previous error\n "}]}