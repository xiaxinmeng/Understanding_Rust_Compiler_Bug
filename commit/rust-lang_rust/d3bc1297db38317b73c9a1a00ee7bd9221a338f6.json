{"sha": "d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "node_id": "C_kwDOAAsO6NoAKGQzYmMxMjk3ZGIzODMxN2I3M2M5YTFhMDBlZTdiZDkyMjFhMzM4ZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-07T18:06:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-07T18:06:31Z"}, "message": "Auto merge of #94706 - matthiaskrgr:rollup-l5erynr, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #93350 (libunwind: readd link attrs to _Unwind_Backtrace)\n - #93827 (Stabilize const_fn_fn_ptr_basics, const_fn_trait_bound, and const_impl_trait)\n - #94696 (Remove whitespaces and use CSS to align line numbers to the right instead)\n - #94700 (rustdoc: Update minifier version)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "20c7c67f917b828b274601655a312934d09d26e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c7c67f917b828b274601655a312934d09d26e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "html_url": "https://github.com/rust-lang/rust/commit/d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36924b4ac73c4eab2fd9e4cc2486d5fa1b6bf41", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36924b4ac73c4eab2fd9e4cc2486d5fa1b6bf41", "html_url": "https://github.com/rust-lang/rust/commit/b36924b4ac73c4eab2fd9e4cc2486d5fa1b6bf41"}, {"sha": "43ce0a94af2539f28463197010a5f4147e33a0e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ce0a94af2539f28463197010a5f4147e33a0e0", "html_url": "https://github.com/rust-lang/rust/commit/43ce0a94af2539f28463197010a5f4147e33a0e0"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "ecc9acf4445d03681bfc1a0e28ce1257abf99974", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msrvs, trait_ref_of_method};\n use rustc_hir as hir;\n+use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -131,6 +132,18 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             FnKind::Closure => return,\n         }\n \n+        // Const fns are not allowed as methods in a trait.\n+        {\n+            let parent = cx.tcx.hir().get_parent_item(hir_id);\n+            if parent != CRATE_DEF_ID {\n+                if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent) {\n+                    if let hir::ItemKind::Trait(..) = &item.kind {\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {"}, {"sha": "891531951c1a03c0f6f5a3947544a04297151fcf", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "patch": "@@ -32,32 +32,12 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::Projection(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Trait(pred) => {\n-                    if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n-                        continue;\n-                    }\n-                    match pred.self_ty().kind() {\n-                        ty::Param(ref p) => {\n-                            let generics = tcx.generics_of(current);\n-                            let def = generics.type_param(p, tcx);\n-                            let span = tcx.def_span(def.def_id);\n-                            return Err((\n-                                span,\n-                                \"trait bounds other than `Sized` \\\n-                                 on const fn parameters are unstable\"\n-                                    .into(),\n-                            ));\n-                        },\n-                        // other kinds of bounds are either tautologies\n-                        // or cause errors in other passes\n-                        _ => continue,\n-                    }\n-                },\n             }\n         }\n         match predicates.parent {"}, {"sha": "88f6935d224aec502122cc5ebf5e06d8b70a0a7f", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "patch": "@@ -49,8 +49,6 @@ fn sub(x: u32) -> usize {\n     unsafe { transmute(&x) }\n }\n \n-// NOTE: This is currently not yet allowed to be const\n-// Once implemented, Clippy should be able to suggest this as const, too.\n fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n     t[0]\n }"}, {"sha": "3eb52b6827475d1b52f189cb0f876c68e6dc8191", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3bc1297db38317b73c9a1a00ee7bd9221a338f6/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=d3bc1297db38317b73c9a1a00ee7bd9221a338f6", "patch": "@@ -58,20 +58,28 @@ LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:67:9\n+  --> $DIR/could_be_const.rs:52:1\n+   |\n+LL | / fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n+LL | |     t[0]\n+LL | | }\n+   | |_^\n+\n+error: this could be a `const fn`\n+  --> $DIR/could_be_const.rs:65:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {\n LL | |             B\n LL | |         }\n    | |_________^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:77:5\n+  --> $DIR/could_be_const.rs:75:5\n    |\n LL | /     fn const_fn_stabilized_before_msrv(byte: u8) {\n LL | |         byte.is_ascii_digit();\n LL | |     }\n    | |_____^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}]}