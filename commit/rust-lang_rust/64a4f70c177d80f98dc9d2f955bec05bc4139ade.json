{"sha": "64a4f70c177d80f98dc9d2f955bec05bc4139ade", "node_id": "C_kwDOAAsO6NoAKDY0YTRmNzBjMTc3ZDgwZjk4ZGM5ZDJmOTU1YmVjMDViYzQxMzlhZGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-16T16:51:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T16:51:25Z"}, "message": "Rollup merge of #108090 - WaffleLapkin:if_not_now_then_when\u2026, r=oli-obk\n\n`if $c:expr { Some($r:expr) } else { None }` =>> `$c.then(|| $r)`\n\nResurrection of #108079", "tree": {"sha": "3013f9a9f736f14c7dd95a625747d851dcc6d1c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3013f9a9f736f14c7dd95a625747d851dcc6d1c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64a4f70c177d80f98dc9d2f955bec05bc4139ade", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7l8NCRBK7hj4Ov3rIwAAVWkIAHDB7zYBbk+T15pb77md7g06\nRU2qVVTK7goRKbRC+XWE4M/+D5ndrN3rQhw1RY80wvnzsBeCwvVw8ozU/9uaU12w\nQ0jEY5hFngqi9NMSWjKxGVSLYHQ9wodAFuwi/F440IxjSl+TvJ6/uuPFeP/hUf2E\nzPj48jmF4tnanU/DIqBaBqyTRvZ7ql09KhaIA1jjFpCXxeHm6T+5kjMnUDF6uYx0\nRk4SaFc/2gE77aDS0W+0jMvaIy5im8soHOTzK1P9vJxI8+F1cdBMbrFgoR88u/vM\nmhXCGapk7sD1fEgvIL8eRKcDFAXVoELHAPHfpY1XomgZ/5VM/ISFD6U1J9Ke0jE=\n=OoLL\n-----END PGP SIGNATURE-----\n", "payload": "tree 3013f9a9f736f14c7dd95a625747d851dcc6d1c3\nparent 04128982ffbf2609a94fa6b7786fe98c85c6b113\nparent 5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676566285 +0100\ncommitter GitHub <noreply@github.com> 1676566285 +0100\n\nRollup merge of #108090 - WaffleLapkin:if_not_now_then_when\u2026, r=oli-obk\n\n`if $c:expr { Some($r:expr) } else { None }` =>> `$c.then(|| $r)`\n\nResurrection of #108079\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64a4f70c177d80f98dc9d2f955bec05bc4139ade", "html_url": "https://github.com/rust-lang/rust/commit/64a4f70c177d80f98dc9d2f955bec05bc4139ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64a4f70c177d80f98dc9d2f955bec05bc4139ade/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04128982ffbf2609a94fa6b7786fe98c85c6b113", "url": "https://api.github.com/repos/rust-lang/rust/commits/04128982ffbf2609a94fa6b7786fe98c85c6b113", "html_url": "https://github.com/rust-lang/rust/commit/04128982ffbf2609a94fa6b7786fe98c85c6b113"}, {"sha": "5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075", "html_url": "https://github.com/rust-lang/rust/commit/5bf6a46032b6c746da5a95dc5c6e0ac46ac9b075"}], "stats": {"total": 451, "additions": 165, "deletions": 286}, "files": [{"sha": "1535837fd052562128e658f9f2f08a5b6a88d9f8", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -271,7 +271,7 @@ impl<'a> AstValidator<'a> {\n \n         self.session.emit_err(InvalidVisibility {\n             span: vis.span,\n-            implied: if vis.kind.is_pub() { Some(vis.span) } else { None },\n+            implied: vis.kind.is_pub().then_some(vis.span),\n             note,\n         });\n     }"}, {"sha": "9e90ca3b92c8131ee054b829d9a335ab81ba9cee", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -1186,11 +1186,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 return None;\n             };\n             debug!(\"checking call args for uses of inner_param: {:?}\", args);\n-            if args.contains(&Operand::Move(inner_param)) {\n-                Some((loc, term))\n-            } else {\n-                None\n-            }\n+            args.contains(&Operand::Move(inner_param)).then_some((loc, term))\n         }) else {\n             debug!(\"no uses of inner_param found as a by-move call arg\");\n             return;"}, {"sha": "0033dc70c704c63a896d80d06c1619c9ed3fc552", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -280,17 +280,10 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         debug!(\"give_region_a_name: error_region = {:?}\", error_region);\n         match *error_region {\n-            ty::ReEarlyBound(ebr) => {\n-                if ebr.has_name() {\n-                    let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n-                    Some(RegionName {\n-                        name: ebr.name,\n-                        source: RegionNameSource::NamedEarlyBoundRegion(span),\n-                    })\n-                } else {\n-                    None\n-                }\n-            }\n+            ty::ReEarlyBound(ebr) => ebr.has_name().then(|| {\n+                let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n+                RegionName { name: ebr.name, source: RegionNameSource::NamedEarlyBoundRegion(span) }\n+            }),\n \n             ty::ReStatic => {\n                 Some(RegionName { name: kw::StaticLifetime, source: RegionNameSource::Static })"}, {"sha": "a411aec518e93cd832f381e99f1bd8e26642905c", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -50,13 +50,11 @@ pub(super) fn generate<'mir, 'tcx>(\n         compute_relevant_live_locals(typeck.tcx(), &free_regions, &body);\n     let facts_enabled = use_polonius || AllFacts::enabled(typeck.tcx());\n \n-    let polonius_drop_used = if facts_enabled {\n+    let polonius_drop_used = facts_enabled.then(|| {\n         let mut drop_used = Vec::new();\n         polonius::populate_access_facts(typeck, body, location_table, move_data, &mut drop_used);\n-        Some(drop_used)\n-    } else {\n-        None\n-    };\n+        drop_used\n+    });\n \n     trace::trace(\n         typeck,"}, {"sha": "d30e8ba4b93d63fda025fd8043405458c5341d01", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -135,19 +135,17 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         }\n \n         // `let names: &'static _ = &[\"field1\", \"field2\"];`\n-        let names_let = if is_struct {\n+        let names_let = is_struct.then(|| {\n             let lt_static = Some(cx.lifetime_static(span));\n             let ty_static_ref = cx.ty_ref(span, cx.ty_infer(span), lt_static, ast::Mutability::Not);\n-            Some(cx.stmt_let_ty(\n+            cx.stmt_let_ty(\n                 span,\n                 false,\n                 Ident::new(sym::names, span),\n                 Some(ty_static_ref),\n                 cx.expr_array_ref(span, name_exprs),\n-            ))\n-        } else {\n-            None\n-        };\n+            )\n+        });\n \n         // `let values: &[&dyn Debug] = &[&&self.field1, &&self.field2];`\n         let path_debug = cx.path_global(span, cx.std_path(&[sym::fmt, sym::Debug]));"}, {"sha": "7fc735dbafa70bddb5b79e79d81b0080390921e4", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -942,13 +942,11 @@ impl<'a> MethodDef<'a> {\n         let mut nonself_arg_tys = Vec::new();\n         let span = trait_.span;\n \n-        let explicit_self = if self.explicit_self {\n+        let explicit_self = self.explicit_self.then(|| {\n             let (self_expr, explicit_self) = ty::get_explicit_self(cx, span);\n             selflike_args.push(self_expr);\n-            Some(explicit_self)\n-        } else {\n-            None\n-        };\n+            explicit_self\n+        });\n \n         for (ty, name) in self.nonself_args.iter() {\n             let ast_ty = ty.to_ty(cx, span, type_ident, generics);"}, {"sha": "e67c0dba68597087f4e2d6800646a6ebb61031be", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -62,7 +62,7 @@ pub fn inject(\n     // the one with the prelude.\n     let name = names[0];\n \n-    let root = (edition == Edition2015).then(|| kw::PathRoot);\n+    let root = (edition == Edition2015).then_some(kw::PathRoot);\n \n     let import_path = root\n         .iter()"}, {"sha": "7c6fd9f6f1ec185de1ebdeb30ca238c14a6f6683", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -248,17 +248,13 @@ fn reuse_workproduct_for_cgu(\n             dwarf_object: None,\n             bytecode: None,\n         },\n-        module_global_asm: if has_global_asm {\n-            Some(CompiledModule {\n-                name: cgu.name().to_string(),\n-                kind: ModuleKind::Regular,\n-                object: Some(obj_out_global_asm),\n-                dwarf_object: None,\n-                bytecode: None,\n-            })\n-        } else {\n-            None\n-        },\n+        module_global_asm: has_global_asm.then(|| CompiledModule {\n+            name: cgu.name().to_string(),\n+            kind: ModuleKind::Regular,\n+            object: Some(obj_out_global_asm),\n+            dwarf_object: None,\n+            bytecode: None,\n+        }),\n         existing_work_product: Some((cgu.work_product_id(), work_product)),\n     })\n }"}, {"sha": "fb1606694366a210bc5790b90ff861a5a87af876", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -412,11 +412,7 @@ fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n }\n \n fn get_instr_profile_output_path(config: &ModuleConfig) -> Option<CString> {\n-    if config.instrument_coverage {\n-        Some(CString::new(\"default_%m_%p.profraw\").unwrap())\n-    } else {\n-        None\n-    }\n+    config.instrument_coverage.then(|| CString::new(\"default_%m_%p.profraw\").unwrap())\n }\n \n pub(crate) unsafe fn llvm_optimize(\n@@ -451,11 +447,10 @@ pub(crate) unsafe fn llvm_optimize(\n         None\n     };\n \n-    let mut llvm_profiler = if cgcx.prof.llvm_recording_enabled() {\n-        Some(LlvmSelfProfiler::new(cgcx.prof.get_self_profiler().unwrap()))\n-    } else {\n-        None\n-    };\n+    let mut llvm_profiler = cgcx\n+        .prof\n+        .llvm_recording_enabled()\n+        .then(|| LlvmSelfProfiler::new(cgcx.prof.get_self_profiler().unwrap()));\n \n     let llvm_selfprofiler =\n         llvm_profiler.as_mut().map(|s| s as *mut _ as *mut c_void).unwrap_or(std::ptr::null_mut());"}, {"sha": "8848ea3bb9aee80825d017e4705754f112bebfc5", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -402,12 +402,8 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n         let (llcx, llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n \n-        let coverage_cx = if tcx.sess.instrument_coverage() {\n-            let covctx = coverageinfo::CrateCoverageContext::new();\n-            Some(covctx)\n-        } else {\n-            None\n-        };\n+        let coverage_cx =\n+            tcx.sess.instrument_coverage().then(coverageinfo::CrateCoverageContext::new);\n \n         let dbg_cx = if tcx.sess.opts.debuginfo != DebugInfo::None {\n             let dctx = debuginfo::CodegenUnitDebugContext::new(llmod);"}, {"sha": "cc8ff947fc31f9eb67fea52c3c57dce7aa63b0b4", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -154,7 +154,7 @@ fn struct_llfields<'a, 'tcx>(\n     } else {\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n-    let field_remapping = if padding_used { Some(field_remapping) } else { None };\n+    let field_remapping = padding_used.then_some(field_remapping);\n     (result, packed, field_remapping)\n }\n "}, {"sha": "8aa744ce93531e4c578d4d88c4592b8c7a2c44c9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -2024,7 +2024,7 @@ fn linker_with_args<'a>(\n         .native_libraries\n         .iter()\n         .filter_map(|(cnum, libraries)| {\n-            (dependency_linkage[cnum.as_usize() - 1] != Linkage::Static).then(|| libraries)\n+            (dependency_linkage[cnum.as_usize() - 1] != Linkage::Static).then_some(libraries)\n         })\n         .flatten();\n     for (raw_dylib_name, raw_dylib_imports) in"}, {"sha": "023d38e931284279a8531c548be883eb649879e1", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -579,7 +579,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         }\n     }\n \n-    let metadata_module = if need_metadata_module {\n+    let metadata_module = need_metadata_module.then(|| {\n         // Emit compressed metadata object.\n         let metadata_cgu_name =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"metadata\")).to_string();\n@@ -594,17 +594,15 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             if let Err(error) = std::fs::write(&file_name, data) {\n                 tcx.sess.emit_fatal(errors::MetadataObjectFileWrite { error });\n             }\n-            Some(CompiledModule {\n+            CompiledModule {\n                 name: metadata_cgu_name,\n                 kind: ModuleKind::Metadata,\n                 object: Some(file_name),\n                 dwarf_object: None,\n                 bytecode: None,\n-            })\n+            }\n         })\n-    } else {\n-        None\n-    };\n+    });\n \n     let ongoing_codegen = start_async_codegen(\n         backend.clone(),"}, {"sha": "eec91ffa44a0bb353f0908f0db69cab7da81f76c", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -167,8 +167,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         start_bx.set_personality_fn(cx.eh_personality());\n     }\n \n-    let cleanup_kinds =\n-        if base::wants_msvc_seh(cx.tcx().sess) { Some(analyze::cleanup_kinds(&mir)) } else { None };\n+    let cleanup_kinds = base::wants_msvc_seh(cx.tcx().sess).then(|| analyze::cleanup_kinds(&mir));\n \n     let cached_llbbs: IndexVec<mir::BasicBlock, CachedLlbb<Bx::BasicBlock>> =\n         mir.basic_blocks"}, {"sha": "44331683694b06754643cdde30349089bf70367c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -207,8 +207,7 @@ impl SelfProfilerRef {\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n     /// stderr if the compiler is invoked with -Ztime-passes.\n     pub fn verbose_generic_activity(&self, event_label: &'static str) -> VerboseTimingGuard<'_> {\n-        let message =\n-            if self.print_verbose_generic_activities { Some(event_label.to_owned()) } else { None };\n+        let message = self.print_verbose_generic_activities.then(|| event_label.to_owned());\n \n         VerboseTimingGuard::start(message, self.generic_activity(event_label))\n     }\n@@ -222,11 +221,9 @@ impl SelfProfilerRef {\n     where\n         A: Borrow<str> + Into<String>,\n     {\n-        let message = if self.print_verbose_generic_activities {\n-            Some(format!(\"{}({})\", event_label, event_arg.borrow()))\n-        } else {\n-            None\n-        };\n+        let message = self\n+            .print_verbose_generic_activities\n+            .then(|| format!(\"{}({})\", event_label, event_arg.borrow()));\n \n         VerboseTimingGuard::start(message, self.generic_activity_with_arg(event_label, event_arg))\n     }"}, {"sha": "4b3c0c055adfd4f59cb962e5ffb1a48766efd1bf", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -1066,29 +1066,26 @@ impl Handler {\n     }\n \n     pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors() { Some(ErrorGuaranteed(())) } else { None }\n+        self.inner.borrow().has_errors().then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n \n     pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors_or_lint_errors() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            None\n-        }\n+        self.inner\n+            .borrow()\n+            .has_errors_or_lint_errors()\n+            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n     pub fn has_errors_or_delayed_span_bugs(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors_or_delayed_span_bugs() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            None\n-        }\n+        self.inner\n+            .borrow()\n+            .has_errors_or_delayed_span_bugs()\n+            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n     pub fn is_compilation_going_to_fail(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().is_compilation_going_to_fail() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            None\n-        }\n+        self.inner\n+            .borrow()\n+            .is_compilation_going_to_fail()\n+            .then(ErrorGuaranteed::unchecked_claim_error_was_emitted)\n     }\n \n     pub fn print_error_count(&self, registry: &Registry) {"}, {"sha": "5c845ae6d0bef4e8977fa1d690dc2eea22f7493b", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -238,12 +238,10 @@ macro_rules! configure {\n impl<'a> StripUnconfigured<'a> {\n     pub fn configure<T: HasAttrs + HasTokens>(&self, mut node: T) -> Option<T> {\n         self.process_cfg_attrs(&mut node);\n-        if self.in_cfg(node.attrs()) {\n+        self.in_cfg(node.attrs()).then(|| {\n             self.try_configure_tokens(&mut node);\n-            Some(node)\n-        } else {\n-            None\n-        }\n+            node\n+        })\n     }\n \n     fn try_configure_tokens<T: HasTokens>(&self, node: &mut T) {\n@@ -257,7 +255,7 @@ impl<'a> StripUnconfigured<'a> {\n \n     fn configure_krate_attrs(&self, mut attrs: ast::AttrVec) -> Option<ast::AttrVec> {\n         attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n-        if self.in_cfg(&attrs) { Some(attrs) } else { None }\n+        self.in_cfg(&attrs).then_some(attrs)\n     }\n \n     /// Performs cfg-expansion on `stream`, producing a new `AttrTokenStream`."}, {"sha": "80ec1caf521e1d59cd2b613f0326a599199a2bc3", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -574,14 +574,11 @@ impl<'hir> Generics<'hir> {\n \n     /// If there are generic parameters, return where to introduce a new one.\n     pub fn span_for_param_suggestion(&self) -> Option<Span> {\n-        if self.params.iter().any(|p| self.span.contains(p.span)) {\n+        self.params.iter().any(|p| self.span.contains(p.span)).then(|| {\n             // `fn foo<A>(t: impl Trait)`\n             //          ^ suggest `, T: Trait` here\n-            let span = self.span.with_lo(self.span.hi() - BytePos(1)).shrink_to_lo();\n-            Some(span)\n-        } else {\n-            None\n-        }\n+            self.span.with_lo(self.span.hi() - BytePos(1)).shrink_to_lo()\n+        })\n     }\n \n     /// `Span` where further predicates would be suggested, accounting for trailing commas, like\n@@ -639,7 +636,7 @@ impl<'hir> Generics<'hir> {\n                 // We include bounds that come from a `#[derive(_)]` but point at the user's code,\n                 // as we use this method to get a span appropriate for suggestions.\n                 let bs = bound.span();\n-                if bs.can_be_used_for_suggestions() { Some(bs.shrink_to_hi()) } else { None }\n+                bs.can_be_used_for_suggestions().then(|| bs.shrink_to_hi())\n             },\n         )\n     }"}, {"sha": "600a4efd3085aa05a644b403ea0e874cfd571340", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -259,13 +259,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             TraitItemKind::Const(ty, body_id) => body_id\n                 .and_then(|body_id| {\n-                    if is_suggestable_infer_ty(ty) {\n-                        Some(infer_placeholder_type(\n-                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n-                        ))\n-                    } else {\n-                        None\n-                    }\n+                    is_suggestable_infer_ty(ty)\n+                        .then(|| infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident, \"constant\",))\n                 })\n                 .unwrap_or_else(|| icx.to_ty(ty)),\n             TraitItemKind::Type(_, Some(ty)) => icx.to_ty(ty),"}, {"sha": "a0f738a279907422a703e2038972b360d1d4d901", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -204,7 +204,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n         match tcx.hir().find(hir_id) {\n             Some(Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. })) => {\n-                generics.params.is_empty().not().then(|| generics.span)\n+                generics.params.is_empty().not().then_some(generics.span)\n             }\n             _ => {\n                 span_bug!(tcx.def_span(def_id), \"main has a non-function type\");"}, {"sha": "dbd0c5abeac1e6375833657d65cd775bf69b7965", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -74,15 +74,13 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n     // (as it's created inside the body itself, not passed in from outside).\n-    let maybe_va_list = if fn_sig.c_variadic {\n+    let maybe_va_list = fn_sig.c_variadic.then(|| {\n         let span = body.params.last().unwrap().span;\n         let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(span));\n         let region = fcx.next_region_var(RegionVariableOrigin::MiscVariable(span));\n \n-        Some(tcx.bound_type_of(va_list_did).subst(tcx, &[region.into()]))\n-    } else {\n-        None\n-    };\n+        tcx.bound_type_of(va_list_did).subst(tcx, &[region.into()])\n+    });\n \n     // Add formal parameters.\n     let inputs_hir = hir.fn_decl_by_hir_id(fn_id).map(|decl| &decl.inputs);"}, {"sha": "ba503bf47e70eb63b26cd95f7cf4d8cc0855ad0e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -1046,7 +1046,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.param_env,\n                 )\n                 .may_apply()\n-                .then(|| deref_ty)\n+                .then_some(deref_ty)\n         })\n     }\n "}, {"sha": "015a2f3bdbe2e6b0cf3c8fcd1122a1f0f59b8a89", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -274,12 +274,10 @@ pub fn resolve_interior<'a, 'tcx>(\n                 let r = fcx.tcx.mk_region(ty::ReLateBound(current_depth, br));\n                 r\n             });\n-            if captured_tys.insert(ty) {\n+            captured_tys.insert(ty).then(|| {\n                 cause.ty = ty;\n-                Some(cause)\n-            } else {\n-                None\n-            }\n+                cause\n+            })\n         })\n         .collect();\n "}, {"sha": "5643d1d9f74aaa0b245b5745a9e6e9da409f7daa", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -90,20 +90,18 @@ pub fn find_param_with_region<'tcx>(\n                     r\n                 }\n             });\n-            if found_anon_region {\n+            found_anon_region.then(|| {\n                 let ty_hir_id = fn_decl.inputs[index].hir_id;\n                 let param_ty_span = hir.span(ty_hir_id);\n                 let is_first = index == 0;\n-                Some(AnonymousParamInfo {\n+                AnonymousParamInfo {\n                     param,\n                     param_ty: new_param_ty,\n                     param_ty_span,\n                     bound_region,\n                     is_first,\n-                })\n-            } else {\n-                None\n-            }\n+                }\n+            })\n         })\n }\n "}, {"sha": "34cf17d25a964cc385eaf0a6beb4116f01441d49", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -2308,11 +2308,8 @@ impl EarlyLintPass for IncompleteFeatures {\n             .for_each(|(&name, &span)| {\n                 let note = rustc_feature::find_feature_issue(name, GateIssue::Language)\n                     .map(|n| BuiltinIncompleteFeaturesNote { n });\n-                let help = if HAS_MIN_FEATURES.contains(&name) {\n-                    Some(BuiltinIncompleteFeaturesHelp)\n-                } else {\n-                    None\n-                };\n+                let help =\n+                    HAS_MIN_FEATURES.contains(&name).then_some(BuiltinIncompleteFeaturesHelp);\n                 cx.emit_spanned_lint(\n                     INCOMPLETE_FEATURES,\n                     span,"}, {"sha": "9a9e2de7b5c7f561cfcf5890b0b19ba4a2e0dc76", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -487,7 +487,7 @@ impl LintStore {\n         let mut groups: Vec<_> = self\n             .lint_groups\n             .iter()\n-            .filter_map(|(k, LintGroup { depr, .. })| if depr.is_none() { Some(k) } else { None })\n+            .filter_map(|(k, LintGroup { depr, .. })| depr.is_none().then_some(k))\n             .collect();\n         groups.sort();\n         let groups = groups.iter().map(|k| Symbol::intern(k));\n@@ -1112,11 +1112,9 @@ impl<'tcx> LateContext<'tcx> {\n                 .maybe_typeck_results()\n                 .filter(|typeck_results| typeck_results.hir_owner == id.owner)\n                 .or_else(|| {\n-                    if self.tcx.has_typeck_results(id.owner.to_def_id()) {\n-                        Some(self.tcx.typeck(id.owner.def_id))\n-                    } else {\n-                        None\n-                    }\n+                    self.tcx\n+                        .has_typeck_results(id.owner.to_def_id())\n+                        .then(|| self.tcx.typeck(id.owner.def_id))\n                 })\n                 .and_then(|typeck_results| typeck_results.type_dependent_def(id))\n                 .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),"}, {"sha": "a3367ae4a9f15061eaf6a95d14c497f0d506b19e", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -65,11 +65,8 @@ impl<'tcx> LateLintPass<'tcx> for ForLoopsOverFallibles {\n             } else {\n                 ForLoopsOverFalliblesLoopSub::UseWhileLet { start_span: expr.span.with_hi(pat.span.lo()), end_span: pat.span.between(arg.span), var }\n             } ;\n-        let question_mark = if suggest_question_mark(cx, adt, substs, expr.span) {\n-            Some(ForLoopsOverFalliblesQuestionMark { suggestion: arg.span.shrink_to_hi() })\n-        } else {\n-            None\n-        };\n+        let question_mark = suggest_question_mark(cx, adt, substs, expr.span)\n+            .then(|| ForLoopsOverFalliblesQuestionMark { suggestion: arg.span.shrink_to_hi() });\n         let suggestion = ForLoopsOverFalliblesSuggestion {\n             var,\n             start_span: expr.span.with_hi(pat.span.lo()),"}, {"sha": "2eafc356dc3fa75ecf0055aa620ed392bd10d3b8", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -1062,7 +1062,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn span_if_local(self, id: DefId) -> Option<Span> {\n-        if id.is_local() { Some(self.tcx.def_span(id)) } else { None }\n+        id.is_local().then(|| self.tcx.def_span(id))\n     }\n \n     pub fn res_span(self, res: Res) -> Option<Span> {"}, {"sha": "3cb07b5b41eb8c9b4ec8a00d26375267511b4094", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -414,7 +414,7 @@ impl<'tcx> Body<'tcx> {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            (decl.is_user_variable() && decl.mutability.is_mut()).then(|| local)\n+            (decl.is_user_variable() && decl.mutability.is_mut()).then_some(local)\n         })\n     }\n "}, {"sha": "ba8b58e44803103fe3d19943c39f172ec33a7867", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -1113,13 +1113,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             ty::FnDef(_, _) => {\n                 let sig = ret_ty.fn_sig(self);\n                 let output = self.erase_late_bound_regions(sig.output());\n-                if output.is_impl_trait() {\n+                output.is_impl_trait().then(|| {\n                     let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n                     let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n-                    Some((output, fn_decl.output.span()))\n-                } else {\n-                    None\n-                }\n+                    (output, fn_decl.output.span())\n+                })\n             }\n             _ => None,\n         }\n@@ -1225,13 +1223,12 @@ macro_rules! nop_lift {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n             fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-                if tcx.interners.$set.contains_pointer_to(&InternedInSet(&*self.0.0)) {\n+                tcx.interners\n+                    .$set\n+                    .contains_pointer_to(&InternedInSet(&*self.0.0))\n                     // SAFETY: `self` is interned and therefore valid\n                     // for the entire lifetime of the `TyCtxt`.\n-                    Some(unsafe { mem::transmute(self) })\n-                } else {\n-                    None\n-                }\n+                    .then(|| unsafe { mem::transmute(self) })\n             }\n         }\n     };\n@@ -1246,13 +1243,13 @@ impl<'a, 'tcx> Lift<'tcx> for &'a List<Ty<'a>> {\n         if self.is_empty() {\n             return Some(List::empty());\n         }\n-        if tcx.interners.substs.contains_pointer_to(&InternedInSet(self.as_substs())) {\n+\n+        tcx.interners\n+            .substs\n+            .contains_pointer_to(&InternedInSet(self.as_substs()))\n             // SAFETY: `self` is interned and therefore valid\n             // for the entire lifetime of the `TyCtxt`.\n-            Some(unsafe { mem::transmute::<&'a List<Ty<'a>>, &'tcx List<Ty<'tcx>>>(self) })\n-        } else {\n-            None\n-        }\n+            .then(|| unsafe { mem::transmute::<&'a List<Ty<'a>>, &'tcx List<Ty<'tcx>>>(self) })\n     }\n }\n \n@@ -1264,11 +1261,10 @@ macro_rules! nop_list_lift {\n                 if self.is_empty() {\n                     return Some(List::empty());\n                 }\n-                if tcx.interners.$set.contains_pointer_to(&InternedInSet(self)) {\n-                    Some(unsafe { mem::transmute(self) })\n-                } else {\n-                    None\n-                }\n+                tcx.interners\n+                    .$set\n+                    .contains_pointer_to(&InternedInSet(self))\n+                    .then(|| unsafe { mem::transmute(self) })\n             }\n         }\n     };"}, {"sha": "c6c3c1f08deabc80210671e239d1fe237ef96e87", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -584,7 +584,7 @@ impl<'tcx> Instance<'tcx> {\n     /// this function returns `None`, then the MIR body does not require substitution during\n     /// codegen.\n     fn substs_for_mir_body(&self) -> Option<SubstsRef<'tcx>> {\n-        if self.def.has_polymorphic_mir_body() { Some(self.substs) } else { None }\n+        self.def.has_polymorphic_mir_body().then_some(self.substs)\n     }\n \n     pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T"}, {"sha": "6b4a6a17aef5fb356337b36bc23946019eda2398", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -267,13 +267,11 @@ pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n impl<'tcx> InternalSubsts<'tcx> {\n     /// Checks whether all elements of this list are types, if so, transmute.\n     pub fn try_as_type_list(&'tcx self) -> Option<&'tcx List<Ty<'tcx>>> {\n-        if self.iter().all(|arg| matches!(arg.unpack(), GenericArgKind::Type(_))) {\n+        self.iter().all(|arg| matches!(arg.unpack(), GenericArgKind::Type(_))).then(|| {\n             assert_eq!(TYPE_TAG, 0);\n             // SAFETY: All elements are types, see `List<Ty<'tcx>>::as_substs`.\n-            Some(unsafe { &*(self as *const List<GenericArg<'tcx>> as *const List<Ty<'tcx>>) })\n-        } else {\n-            None\n-        }\n+            unsafe { &*(self as *const List<GenericArg<'tcx>> as *const List<Ty<'tcx>>) }\n+        })\n     }\n \n     /// Interpret these substitutions as the substitutions of a closure type."}, {"sha": "dac9bf0a88350e5505af0c5137ca8ac64eb39c6a", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // See the notes for `ExprKind::Array` in `as_rvalue` and for\n                 // `ExprKind::Borrow` above.\n                 let is_union = adt_def.is_union();\n-                let active_field_index = if is_union { Some(fields[0].name.index()) } else { None };\n+                let active_field_index = is_union.then(|| fields[0].name.index());\n \n                 let scope = this.local_scope();\n "}, {"sha": "8859f5002e465c4adcf7d9d1b547997195c2e3d6", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -563,14 +563,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let not_contained =\n                     self.values_not_contained_in_range(&*range, options).unwrap_or(false);\n \n-                if not_contained {\n+                not_contained.then(|| {\n                     // No switch values are contained in the pattern range,\n                     // so the pattern can be matched only if this test fails.\n-                    let otherwise = options.len();\n-                    Some(otherwise)\n-                } else {\n-                    None\n-                }\n+                    options.len()\n+                })\n             }\n \n             (&TestKind::SwitchInt { .. }, _) => None,"}, {"sha": "e5b7d685c499b72b16c8dfa23a8691774120edb6", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -172,7 +172,7 @@ impl IntRange {\n         ty: Ty<'tcx>,\n         end: &RangeEnd,\n     ) -> Option<IntRange> {\n-        if Self::is_integral(ty) {\n+        Self::is_integral(ty).then(|| {\n             // Perform a shift if the underlying types are signed,\n             // which makes the interval arithmetic simpler.\n             let bias = IntRange::signed_bias(tcx, ty);\n@@ -182,10 +182,8 @@ impl IntRange {\n                 // This should have been caught earlier by E0030.\n                 bug!(\"malformed range pattern: {}..={}\", lo, (hi - offset));\n             }\n-            Some(IntRange { range: lo..=(hi - offset), bias })\n-        } else {\n-            None\n-        }\n+            IntRange { range: lo..=(hi - offset), bias }\n+        })\n     }\n \n     // The return value of `signed_bias` should be XORed with an endpoint to encode/decode it."}, {"sha": "41306dd80fbdd4b83d8833f00adcf35a310f22b6", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -203,11 +203,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 if !lower_overflow && !higher_overflow {\n                     self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n                         span,\n-                        teach: if self.tcx.sess.teach(&error_code!(E0030)) {\n-                            Some(())\n-                        } else {\n-                            None\n-                        },\n+                        teach: self.tcx.sess.teach(&error_code!(E0030)).then_some(()),\n                     });\n                 }\n                 PatKind::Wild"}, {"sha": "633a5674f1f96da223c3fe6527fd805d2b445e17", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -254,13 +254,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     ) {\n         // Compute the place that we are storing to, if any\n         let destination = match &statement.kind {\n-            StatementKind::Assign(assign) => {\n-                if assign.1.is_safe_to_remove() {\n-                    Some(assign.0)\n-                } else {\n-                    None\n-                }\n-            }\n+            StatementKind::Assign(assign) => assign.1.is_safe_to_remove().then_some(assign.0),\n             StatementKind::SetDiscriminant { place, .. } | StatementKind::Deinit(place) => {\n                 Some(**place)\n             }"}, {"sha": "66d32b954e473d8eb774d39a80668197934b918e", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -111,11 +111,9 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n     /// If the given predicate is the trait `fmt::Pointer`, returns the bound parameter type.\n     fn is_pointer_trait(&self, bound: &PredicateKind<'tcx>) -> Option<Ty<'tcx>> {\n         if let ty::PredicateKind::Clause(ty::Clause::Trait(predicate)) = bound {\n-            if self.tcx.is_diagnostic_item(sym::Pointer, predicate.def_id()) {\n-                Some(predicate.trait_ref.self_ty())\n-            } else {\n-                None\n-            }\n+            self.tcx\n+                .is_diagnostic_item(sym::Pointer, predicate.def_id())\n+                .then(|| predicate.trait_ref.self_ty())\n         } else {\n             None\n         }"}, {"sha": "a74f408d774120734c8e81c2e99b29223d3d1961", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -1283,22 +1283,16 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_delim_args_inner(&mut self) -> Option<DelimArgs> {\n-        if self.check(&token::OpenDelim(Delimiter::Parenthesis))\n+        let delimited = self.check(&token::OpenDelim(Delimiter::Parenthesis))\n             || self.check(&token::OpenDelim(Delimiter::Bracket))\n-            || self.check(&token::OpenDelim(Delimiter::Brace))\n-        {\n-            match self.parse_token_tree() {\n-                // We've confirmed above that there is a delimiter so unwrapping is OK.\n-                TokenTree::Delimited(dspan, delim, tokens) => Some(DelimArgs {\n-                    dspan,\n-                    delim: MacDelimiter::from_token(delim).unwrap(),\n-                    tokens,\n-                }),\n-                _ => unreachable!(),\n-            }\n-        } else {\n-            None\n-        }\n+            || self.check(&token::OpenDelim(Delimiter::Brace));\n+\n+        delimited.then(|| {\n+            // We've confirmed above that there is a delimiter so unwrapping is OK.\n+            let TokenTree::Delimited(dspan, delim, tokens) = self.parse_token_tree() else { unreachable!() };\n+\n+            DelimArgs { dspan, delim: MacDelimiter::from_token(delim).unwrap(), tokens }\n+        })\n     }\n \n     fn parse_or_use_outer_attributes("}, {"sha": "49959a8981c6530283a681920a897bb79fa452e0", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -404,7 +404,7 @@ impl<'a> Parser<'a> {\n \n         let is_first_invocation = style == PathStyle::Expr;\n         // Take a snapshot before attempting to parse - we can restore this later.\n-        let snapshot = if is_first_invocation { Some(self.clone()) } else { None };\n+        let snapshot = is_first_invocation.then(|| self.clone());\n \n         debug!(\"parse_generic_args_with_leading_angle_bracket_recovery: (snapshotting)\");\n         match self.parse_angle_args(ty_generics) {"}, {"sha": "4f4252b532edf7c07cb379755e2149d93f416cdb", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -450,8 +450,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_borrowed_pointee(&mut self) -> PResult<'a, TyKind> {\n         let and_span = self.prev_token.span;\n-        let mut opt_lifetime =\n-            if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n+        let mut opt_lifetime = self.check_lifetime().then(|| self.expect_lifetime());\n         let mut mutbl = self.parse_mutability();\n         if self.token.is_lifetime() && mutbl == Mutability::Mut && opt_lifetime.is_none() {\n             // A lifetime is invalid here: it would be part of a bare trait bound, which requires\n@@ -871,7 +870,7 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        let maybe = if self.eat(&token::Question) { Some(self.prev_token.span) } else { None };\n+        let maybe = self.eat(&token::Question).then_some(self.prev_token.span);\n \n         Ok(BoundModifiers { maybe, maybe_const })\n     }"}, {"sha": "8a3cedfee7952997ec427ac1e748c39991213404", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -835,7 +835,7 @@ impl<'a> Parser<'a> {\n             );\n         }\n \n-        if found { Some(cur) } else { None }\n+        found.then_some(cur)\n     }\n \n     fn suggest_format(&mut self) {"}, {"sha": "0ae7096642cf164fcfa4e5d2907b496b96058290", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -32,11 +32,8 @@ fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item\n     if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n             let orig_span = tcx.hir().span_if_local(original_def_id);\n-            let orig_crate_name = if orig_span.is_some() {\n-                None\n-            } else {\n-                Some(tcx.crate_name(original_def_id.krate))\n-            };\n+            let orig_crate_name =\n+                orig_span.is_none().then(|| tcx.crate_name(original_def_id.krate));\n             match tcx.hir().span_if_local(item_def_id) {\n                 Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n                 None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {"}, {"sha": "13a576014a2ee1787273d775906b480f535ba5ec", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -281,7 +281,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         self.recurse_with_stability_attrs(\n             depr.map(|(d, _)| DeprecationEntry::local(d, def_id)),\n             stab,\n-            if inherit_const_stability.yes() { const_stab } else { None },\n+            inherit_const_stability.yes().then_some(const_stab).flatten(),\n             visit_children,\n         );\n     }"}, {"sha": "29513df460fffe081624257ed65631265f607191", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -242,8 +242,7 @@ impl<K: DepKind + Encodable<FileEncoder>> GraphEncoder<K> {\n         record_graph: bool,\n         record_stats: bool,\n     ) -> Self {\n-        let record_graph =\n-            if record_graph { Some(Lock::new(DepGraphQuery::new(prev_node_count))) } else { None };\n+        let record_graph = record_graph.then(|| Lock::new(DepGraphQuery::new(prev_node_count)));\n         let status = Lock::new(EncoderState::new(encoder, record_stats));\n         GraphEncoder { status, record_graph }\n     }"}, {"sha": "5205d055cf9ad7b871cfd7b4327641c8e2556425", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -1700,11 +1700,9 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                                         let crate_mod =\n                                             Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n-                                        if filter_fn(crate_mod) {\n-                                            Some(TypoSuggestion::typo_from_ident(*ident, crate_mod))\n-                                        } else {\n-                                            None\n-                                        }\n+                                        filter_fn(crate_mod).then(|| {\n+                                            TypoSuggestion::typo_from_ident(*ident, crate_mod)\n+                                        })\n                                     })\n                             }));\n "}, {"sha": "4da6acad2c02148ced4638c1228e1229a7c56514", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -2544,7 +2544,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n \n         // Only use this directory if it has a file we can expect to always find.\n-        if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n+        candidate.join(\"library/std/src/lib.rs\").is_file().then_some(candidate)\n     };\n \n     let working_dir = std::env::current_dir().unwrap_or_else(|e| {"}, {"sha": "093698f3b35ab35807a80481e3aae148743341a8", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -322,11 +322,7 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n                 .take_while(|c| *c != 'i' && *c != 'u')\n                 .all(|c| c.to_digit(base).is_some());\n \n-        if valid {\n-            Some(format!(\"0{}{}\", base_char.to_ascii_lowercase(), &suffix[1..]))\n-        } else {\n-            None\n-        }\n+        valid.then(|| format!(\"0{}{}\", base_char.to_ascii_lowercase(), &suffix[1..]))\n     }\n \n     let token::Lit { kind, symbol, suffix, .. } = lit;"}, {"sha": "2075ed57a94db4b73ac2d9b42a3e723f5acd51a8", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -217,7 +217,7 @@ pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n                 // Look for the target rustlib directory in the suspected sysroot.\n                 let mut rustlib_path = rustc_target::target_rustlib_path(&p, \"dummy\");\n                 rustlib_path.pop(); // pop off the dummy target.\n-                if rustlib_path.exists() { Some(p) } else { None }\n+                rustlib_path.exists().then_some(p)\n             }\n             None => None,\n         }"}, {"sha": "c784582012a471e33e6dbe1ad8d78c724906db25", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -809,7 +809,7 @@ mod parse {\n         if v.is_some() {\n             let mut bool_arg = None;\n             if parse_opt_bool(&mut bool_arg, v) {\n-                *slot = if bool_arg.unwrap() { Some(MirSpanview::Statement) } else { None };\n+                *slot = bool_arg.unwrap().then_some(MirSpanview::Statement);\n                 return true;\n             }\n         }\n@@ -850,7 +850,7 @@ mod parse {\n         if v.is_some() {\n             let mut bool_arg = None;\n             if parse_opt_bool(&mut bool_arg, v) {\n-                *slot = if bool_arg.unwrap() { Some(InstrumentCoverage::All) } else { None };\n+                *slot = bool_arg.unwrap().then_some(InstrumentCoverage::All);\n                 return true;\n             }\n         }"}, {"sha": "2340d501d5a6600c4343d171fbf45b0c33f1ed1c", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -299,7 +299,7 @@ impl DefId {\n \n     #[inline]\n     pub fn as_local(self) -> Option<LocalDefId> {\n-        if self.is_local() { Some(LocalDefId { local_def_index: self.index }) } else { None }\n+        self.is_local().then(|| LocalDefId { local_def_index: self.index })\n     }\n \n     #[inline]\n@@ -320,7 +320,7 @@ impl DefId {\n \n     #[inline]\n     pub fn as_crate_root(self) -> Option<CrateNum> {\n-        if self.is_crate_root() { Some(self.krate) } else { None }\n+        self.is_crate_root().then_some(self.krate)\n     }\n \n     #[inline]"}, {"sha": "d81722e59a66e18ea59f01e9287efaccf460f390", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -244,8 +244,7 @@ fn compute_symbol_name<'tcx>(\n     // project.\n     let avoid_cross_crate_conflicts = is_generic(substs) || is_globally_shared_function;\n \n-    let instantiating_crate =\n-        if avoid_cross_crate_conflicts { Some(compute_instantiating_crate()) } else { None };\n+    let instantiating_crate = avoid_cross_crate_conflicts.then(compute_instantiating_crate);\n \n     // Pick the crate responsible for the symbol mangling version, which has to:\n     // 1. be stable for each instance, whether it's being defined or imported"}, {"sha": "8041066d5d573ad07a68b45a93b42d1f27837fe2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -82,11 +82,8 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                     upvars.iter().find_map(|(upvar_id, upvar)| {\n                         let upvar_ty = typeck_results.node_type(*upvar_id);\n                         let upvar_ty = infer_context.resolve_vars_if_possible(upvar_ty);\n-                        if ty_matches(ty::Binder::dummy(upvar_ty)) {\n-                            Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n-                        } else {\n-                            None\n-                        }\n+                        ty_matches(ty::Binder::dummy(upvar_ty))\n+                            .then(|| GeneratorInteriorOrUpvar::Upvar(upvar.span))\n                     })\n                 })\n             }\n@@ -770,15 +767,13 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             obligation.param_env,\n                             real_trait_pred_and_ty,\n                         );\n-                        if obligations\n+                        let may_hold = obligations\n                             .iter()\n                             .chain([&obligation])\n                             .all(|obligation| self.predicate_may_hold(obligation))\n-                        {\n-                            Some(steps)\n-                        } else {\n-                            None\n-                        }\n+                            .then_some(steps);\n+\n+                        may_hold\n                     })\n                 {\n                     if steps > 0 {"}, {"sha": "2d299486ee6858e5ee80587f3a32450610ffa238", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -523,16 +523,14 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n \n     let mut visitor = ReferencesOnlyParentGenerics { tcx, generics, trait_item_def_id };\n     let predicates_for_trait = predicates.predicates.iter().filter_map(|(pred, span)| {\n-        if pred.visit_with(&mut visitor).is_continue() {\n-            Some(Obligation::new(\n+        pred.visit_with(&mut visitor).is_continue().then(|| {\n+            Obligation::new(\n                 tcx,\n                 ObligationCause::dummy_with_span(*span),\n                 param_env,\n                 ty::EarlyBinder(*pred).subst(tcx, impl_trait_ref.substs),\n-            ))\n-        } else {\n-            None\n-        }\n+            )\n+        })\n     });\n \n     let infcx = tcx.infer_ctxt().ignoring_regions().build();"}, {"sha": "c6b99d72ce4294323efad0896faec1bc494f63ef", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -307,7 +307,7 @@ fn predicate_references_self<'tcx>(\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Clause(ty::Clause::Trait(ref data)) => {\n             // In the case of a trait predicate, we can skip the \"self\" type.\n-            if data.trait_ref.substs[1..].iter().any(has_self_ty) { Some(sp) } else { None }\n+            data.trait_ref.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n         ty::PredicateKind::Clause(ty::Clause::Projection(ref data)) => {\n             // And similarly for projections. This should be redundant with\n@@ -325,7 +325,7 @@ fn predicate_references_self<'tcx>(\n             //\n             // This is ALT2 in issue #56288, see that for discussion of the\n             // possible alternatives.\n-            if data.projection_ty.substs[1..].iter().any(has_self_ty) { Some(sp) } else { None }\n+            data.projection_ty.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n         ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n "}, {"sha": "21ef4e24fdb05c21b851782e0753fc58935a5dca", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -21,11 +21,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n-        if trivial_dropck_outlives(tcx, key.value.dropped_ty) {\n-            Some(DropckOutlivesResult::default())\n-        } else {\n-            None\n-        }\n+        trivial_dropck_outlives(tcx, key.value.dropped_ty).then(DropckOutlivesResult::default)\n     }\n \n     fn perform_query("}, {"sha": "1c651ff1d15f4dfff6cfe3e4273f4d39e2ab92de", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -378,11 +378,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             let self_ty = trait_ref.self_ty();\n                             let (trait_desc, self_desc) = with_no_trimmed_paths!({\n                                 let trait_desc = trait_ref.print_only_trait_path().to_string();\n-                                let self_desc = if self_ty.has_concrete_skeleton() {\n-                                    Some(self_ty.to_string())\n-                                } else {\n-                                    None\n-                                };\n+                                let self_desc =\n+                                    self_ty.has_concrete_skeleton().then(|| self_ty.to_string());\n                                 (trait_desc, self_desc)\n                             });\n                             let cause = if let Conflict::Upstream = conflict {"}, {"sha": "c3dcd64b2c2461438ce5b0edf44177f9979b5f4d", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n                     // Only report the `Self` type if it has at least\n                     // some outer concrete shell; otherwise, it's\n                     // not adding much information.\n-                    self_ty: if self_ty.has_concrete_skeleton() { Some(self_ty) } else { None },\n+                    self_ty: self_ty.has_concrete_skeleton().then_some(self_ty),\n                     intercrate_ambiguity_causes: overlap.intercrate_ambiguity_causes,\n                     involves_placeholder: overlap.involves_placeholder,\n                 }"}, {"sha": "6a0bfe88c633e5a96cb436a7cc3dc5315db3658e", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64a4f70c177d80f98dc9d2f955bec05bc4139ade/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=64a4f70c177d80f98dc9d2f955bec05bc4139ade", "patch": "@@ -207,11 +207,8 @@ fn fn_abi_of_instance<'tcx>(\n \n     let sig = fn_sig_for_fn_abi(tcx, instance, param_env);\n \n-    let caller_location = if instance.def.requires_caller_location(tcx) {\n-        Some(tcx.caller_location_ty())\n-    } else {\n-        None\n-    };\n+    let caller_location =\n+        instance.def.requires_caller_location(tcx).then(|| tcx.caller_location_ty());\n \n     fn_abi_new_uncached(\n         &LayoutCx { tcx, param_env },"}]}