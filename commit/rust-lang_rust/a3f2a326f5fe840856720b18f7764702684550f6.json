{"sha": "a3f2a326f5fe840856720b18f7764702684550f6", "node_id": "C_kwDOAAsO6NoAKGEzZjJhMzI2ZjVmZTg0MDg1NjcyMGIxOGY3NzY0NzAyNjg0NTUwZjY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-05T20:33:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-12T00:26:17Z"}, "message": "Filter out anonymous generics in rustdoc.", "tree": {"sha": "f1e16d0c6cd56dcf89c1cb651e3d6719d6d45b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e16d0c6cd56dcf89c1cb651e3d6719d6d45b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f2a326f5fe840856720b18f7764702684550f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f2a326f5fe840856720b18f7764702684550f6", "html_url": "https://github.com/rust-lang/rust/commit/a3f2a326f5fe840856720b18f7764702684550f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f2a326f5fe840856720b18f7764702684550f6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4da6308b7b2cb14649a3e3e6f0d72ed43855970", "html_url": "https://github.com/rust-lang/rust/commit/a4da6308b7b2cb14649a3e3e6f0d72ed43855970"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "e34faef9d6dbddd650d90c2026c37f06985eb1db", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3f2a326f5fe840856720b18f7764702684550f6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f2a326f5fe840856720b18f7764702684550f6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a3f2a326f5fe840856720b18f7764702684550f6", "patch": "@@ -585,7 +585,12 @@ fn clean_ty_generics(\n         .params\n         .iter()\n         .filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n+            ty::GenericParamDefKind::Lifetime => {\n+                if param.name == kw::UnderscoreLifetime {\n+                    return None;\n+                }\n+                Some(param.clean(cx))\n+            }\n             ty::GenericParamDefKind::Type { synthetic, .. } => {\n                 if param.name == kw::SelfUpper {\n                     assert_eq!(param.index, 0);"}]}