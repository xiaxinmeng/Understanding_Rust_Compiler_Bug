{"sha": "4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYTljM2JjYTNiMGIzZmU3ZDMzNjQ4YmM2YmM2OWRmNTdkZWI3ZGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T23:21:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T02:36:27Z"}, "message": "syntax refactor `parse_fn_params`", "tree": {"sha": "d870b95b06d91c48bb1e43ca7d76e76c18680048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d870b95b06d91c48bb1e43ca7d76e76c18680048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db", "html_url": "https://github.com/rust-lang/rust/commit/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378cc98cd9dce625331503e8e439ce25671a4d3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/378cc98cd9dce625331503e8e439ce25671a4d3e", "html_url": "https://github.com/rust-lang/rust/commit/378cc98cd9dce625331503e8e439ce25671a4d3e"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "a6694cea7313883c6883c5c94ea15d09937fd9e6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4fa9c3bca3b0b3fe7d33648bc6bc69df57deb7db", "patch": "@@ -1031,13 +1031,10 @@ impl<'a> Parser<'a> {\n                     let pat = self.mk_pat_ident(ty.span, bm, ident);\n                     (pat, ty)\n                 }\n+                // If this is a C-variadic argument and we hit an error, return the error.\n+                Err(err) if self.token == token::DotDotDot => return Err(err),\n+                // Recover from attempting to parse the argument as a type without pattern.\n                 Err(mut err) => {\n-                    // If this is a C-variadic argument and we hit an error, return the\n-                    // error.\n-                    if self.token == token::DotDotDot {\n-                        return Err(err);\n-                    }\n-                    // Recover from attempting to parse the argument as a type without pattern.\n                     err.cancel();\n                     mem::replace(self, parser_snapshot_before_ty);\n                     self.recover_arg_parse()?\n@@ -1200,42 +1197,44 @@ impl<'a> Parser<'a> {\n \n     }\n \n-    fn parse_fn_params(&mut self, named_params: bool, allow_c_variadic: bool)\n-                     -> PResult<'a, Vec<Param>> {\n+    fn parse_fn_params(\n+        &mut self,\n+        named_params: bool,\n+        allow_c_variadic: bool,\n+    ) -> PResult<'a, Vec<Param>> {\n         let sp = self.token.span;\n+        let do_not_enforce_named_params_for_c_variadic = |token: &token::Token| {\n+            match token.kind {\n+                token::DotDotDot => false,\n+                _ => named_params,\n+            }\n+        };\n         let mut c_variadic = false;\n-        let (params, _): (Vec<Option<Param>>, _) = self.parse_paren_comma_seq(|p| {\n-            let do_not_enforce_named_arguments_for_c_variadic =\n-                |token: &token::Token| -> bool {\n-                    if token == &token::DotDotDot {\n-                        false\n-                    } else {\n-                        named_params\n-                    }\n-                };\n+        let (params, _) = self.parse_paren_comma_seq(|p| {\n             match p.parse_param_general(\n                 false,\n                 false,\n                 allow_c_variadic,\n-                do_not_enforce_named_arguments_for_c_variadic\n+                do_not_enforce_named_params_for_c_variadic,\n             ) {\n-                Ok(param) => {\n+                Ok(param) => Ok(\n                     if let TyKind::CVarArgs = param.ty.kind {\n                         c_variadic = true;\n                         if p.token != token::CloseDelim(token::Paren) {\n-                            let span = p.token.span;\n-                            p.span_err(span,\n-                                \"`...` must be the last argument of a C-variadic function\");\n+                            p.span_err(\n+                                p.token.span,\n+                                \"`...` must be the last argument of a C-variadic function\",\n+                            );\n                             // FIXME(eddyb) this should probably still push `CVarArgs`.\n                             // Maybe AST validation/HIR lowering should emit the above error?\n-                            Ok(None)\n+                            None\n                         } else {\n-                            Ok(Some(param))\n+                            Some(param)\n                         }\n                     } else {\n-                        Ok(Some(param))\n+                        Some(param)\n                     }\n-                },\n+                ),\n                 Err(mut e) => {\n                     e.emit();\n                     let lo = p.prev_span;\n@@ -1251,8 +1250,10 @@ impl<'a> Parser<'a> {\n         let params: Vec<_> = params.into_iter().filter_map(|x| x).collect();\n \n         if c_variadic && params.len() <= 1 {\n-            self.span_err(sp,\n-                          \"C-variadic function must be declared with at least one named argument\");\n+            self.span_err(\n+                sp,\n+                \"C-variadic function must be declared with at least one named argument\",\n+            );\n         }\n \n         Ok(params)"}]}