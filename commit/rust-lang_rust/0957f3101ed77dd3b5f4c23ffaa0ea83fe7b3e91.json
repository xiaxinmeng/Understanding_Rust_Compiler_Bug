{"sha": "0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTdmMzEwMWVkNzdkZDNiNWY0YzIzZmZhYTBlYTgzZmU3YjNlOTE=", "commit": {"author": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-08-26T20:23:43Z"}, "committer": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-08-26T20:23:43Z"}, "message": "Merge pull request #165 from SBSTP/config\n\nAdd project-specific configuration file support.", "tree": {"sha": "0ee87a5fb82d41a55ff1912ba0a616e5493d1615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ee87a5fb82d41a55ff1912ba0a616e5493d1615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "html_url": "https://github.com/rust-lang/rust/commit/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64741643db3f83d38cbf5dd328ed859781a4815", "url": "https://api.github.com/repos/rust-lang/rust/commits/b64741643db3f83d38cbf5dd328ed859781a4815", "html_url": "https://github.com/rust-lang/rust/commit/b64741643db3f83d38cbf5dd328ed859781a4815"}, {"sha": "99b0aa95f2cacd3a7f30106cc8cb612b07be10e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b0aa95f2cacd3a7f30106cc8cb612b07be10e3", "html_url": "https://github.com/rust-lang/rust/commit/99b0aa95f2cacd3a7f30106cc8cb612b07be10e3"}], "stats": {"total": 138, "additions": 78, "deletions": 60}, "files": [{"sha": "a71d4abae86828a0d4b026da1f6cc144d373e072", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "patch": "@@ -7,7 +7,6 @@ description = \"Tool to find and fix Rust formatting issues\"\n repository = \"https://github.com/nick29581/rustfmt\"\n readme = \"README.md\"\n license = \"Apache-2.0/MIT\"\n-build = \"build.rs\"\n \n [dependencies.strings]\n strings = \"0.0.1\""}, {"sha": "3e6d051d9b1d67eda791b4bd418f290954105074", "filename": "build.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b64741643db3f83d38cbf5dd328ed859781a4815/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b64741643db3f83d38cbf5dd328ed859781a4815/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=b64741643db3f83d38cbf5dd328ed859781a4815", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Build script. Just copies default.toml from the src to the target dir.\n-\n-use std::env;\n-use std::path::{Path, PathBuf};\n-\n-fn main() {\n-    let in_file = Path::new(\"src/default.toml\");\n-\n-    let manifest_dir = env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n-    let mut out_file = PathBuf::new();\n-    out_file.push(manifest_dir);\n-    out_file.push(\"default.toml\");\n-\n-    std::fs::copy(in_file, out_file).unwrap();\n-}"}, {"sha": "2f61e788ed22c1f1f92a6ba4dbab4eb7d5c7360a", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "patch": "@@ -7,30 +7,63 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(path_ext)]\n+#![feature(rustc_private)]\n #![cfg(not(test))]\n #![feature(result_expect)]\n \n+#[macro_use]\n+extern crate log;\n extern crate rustfmt;\n+extern crate toml;\n \n use rustfmt::{WriteMode, run};\n use rustfmt::config::Config;\n \n-use std::fs::File;\n-use std::io::Read;\n+use std::env;\n+use std::fs::{File, PathExt};\n+use std::io::{self, Read};\n+use std::path::PathBuf;\n use std::str::FromStr;\n \n+// Try to find a project file in the current directory and its parents.\n+fn lookup_project_file() -> io::Result<PathBuf> {\n+    let mut current = try!(env::current_dir());\n+    loop {\n+        let config_file = current.join(\"rustfmt.toml\");\n+        if config_file.exists() {\n+            return Ok(config_file);\n+        } else {\n+            current = match current.parent() {\n+                // if the current directory has no parent, we're done searching\n+                None => return Err(io::Error::new(io::ErrorKind::NotFound, \"config not found\")),\n+                Some(path) => path.to_path_buf(),\n+            };\n+        }\n+    }\n+}\n+\n+// Try to find a project file. If it's found, read it.\n+fn lookup_and_read_project_file() -> io::Result<(PathBuf, String)> {\n+    let path = try!(lookup_project_file());\n+    let mut file = try!(File::open(&path));\n+    let mut toml = String::new();\n+    try!(file.read_to_string(&mut toml));\n+    Ok((path, toml))\n+}\n+\n fn main() {\n-    let mut def_config_file = File::open(\"default.toml\").unwrap_or_else(|e| {\n-        panic!(\"Unable to open configuration file [default.toml] {}\",e)\n-    });\n-    let mut def_config = String::new();\n-    def_config_file.read_to_string(&mut def_config).unwrap();\n-    let config = Box::new(Config::from_toml(&def_config));\n     let (args, write_mode) = determine_params(std::env::args());\n \n-    run(args, write_mode, config);\n+    let config = match lookup_and_read_project_file() {\n+        Ok((path, toml)) => {\n+            println!(\"Project config file: {}\", path.display());\n+            Config::from_toml(&toml)\n+        }\n+        Err(_) => Default::default(),\n+    };\n \n+    run(args, write_mode, Box::new(config));\n     std::process::exit(0);\n }\n "}, {"sha": "02ee8e637893e06b92212d55803efed7115eb5d5", "filename": "src/config.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "patch": "@@ -81,3 +81,30 @@ create_config! {\n     closure_indent_style: BlockIndentStyle,\n     single_line_if_else: bool,\n }\n+\n+impl Default for Config {\n+\n+    fn default() -> Config {\n+        Config {\n+            max_width: 100,\n+            ideal_width: 80,\n+            leeway: 5,\n+            tab_spaces: 4,\n+            newline_style: NewlineStyle::Unix,\n+            fn_brace_style: BraceStyle::SameLineWhere,\n+            fn_return_indent: ReturnIndent::WithArgs,\n+            fn_args_paren_newline: true,\n+            struct_trailing_comma: SeparatorTactic::Vertical,\n+            struct_lit_trailing_comma: SeparatorTactic::Vertical,\n+            struct_lit_style: StructLitStyle::BlockIndent,\n+            enum_trailing_comma: true,\n+            report_todo: ReportTactic::Always,\n+            report_fixme: ReportTactic::Never,\n+            reorder_imports: false,\n+            expr_indent_style: BlockIndentStyle::Tabbed,\n+            closure_indent_style: BlockIndentStyle::Visual,\n+            single_line_if_else: false,\n+        }\n+    }\n+\n+}"}, {"sha": "0af42981522be743c06fa834bccdda162a20dde2", "filename": "src/default.toml", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b64741643db3f83d38cbf5dd328ed859781a4815/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b64741643db3f83d38cbf5dd328ed859781a4815/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=b64741643db3f83d38cbf5dd328ed859781a4815", "patch": "@@ -1,18 +0,0 @@\n-max_width = 100\n-ideal_width = 80\n-leeway = 5\n-tab_spaces = 4\n-newline_style = \"Unix\"\n-fn_brace_style = \"SameLineWhere\"\n-fn_return_indent = \"WithArgs\"\n-fn_args_paren_newline = true\n-struct_trailing_comma = \"Vertical\"\n-struct_lit_style = \"BlockIndent\"\n-struct_lit_trailing_comma = \"Vertical\"\n-enum_trailing_comma = true\n-report_todo = \"Always\"\n-report_fixme = \"Never\"\n-reorder_imports = false\n-expr_indent_style = \"Tabbed\"\n-closure_indent_style = \"Visual\"\n-single_line_if_else = false"}, {"sha": "19e98a648892991646b692b13bccf13355e20495", "filename": "tests/system.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=0957f3101ed77dd3b5f4c23ffaa0ea83fe7b3e91", "patch": "@@ -121,12 +121,14 @@ pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, String>>\n \n // Reads test config file from comments and reads its contents.\n fn get_config(config_file: Option<&str>) -> Box<Config> {\n-    let config_file_name = config_file.map(|file_name| {\n-                                           let mut full_path = \"tests/config/\".to_owned();\n-                                           full_path.push_str(&file_name);\n-                                           full_path\n-                                       })\n-                                       .unwrap_or(\"default.toml\".to_owned());\n+    let config_file_name = match config_file {\n+        None => return Box::new(Default::default()),\n+        Some(file_name) => {\n+            let mut full_path = \"tests/config/\".to_owned();\n+            full_path.push_str(&file_name);\n+            full_path\n+        }\n+    };\n \n     let mut def_config_file = fs::File::open(config_file_name).ok().expect(\"Couldn't open config.\");\n     let mut def_config = String::new();"}]}