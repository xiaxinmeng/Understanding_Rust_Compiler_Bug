{"sha": "d2de69da2e99d43e14a80219b835aaf513c2f0d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZGU2OWRhMmU5OWQ0M2UxNGE4MDIxOWI4MzVhYWY1MTNjMmYwZDk=", "commit": {"author": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-07T21:24:05Z"}, "committer": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-07T21:24:05Z"}, "message": "Dogfood 'str_split_once()` in the std lib", "tree": {"sha": "0602a307cb74daea1791c8b47df8aeb42ba84090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0602a307cb74daea1791c8b47df8aeb42ba84090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2de69da2e99d43e14a80219b835aaf513c2f0d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2de69da2e99d43e14a80219b835aaf513c2f0d9", "html_url": "https://github.com/rust-lang/rust/commit/d2de69da2e99d43e14a80219b835aaf513c2f0d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2de69da2e99d43e14a80219b835aaf513c2f0d9/comments", "author": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e9ea015220cc74dc54873974ed7138ea22eced", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e9ea015220cc74dc54873974ed7138ea22eced", "html_url": "https://github.com/rust-lang/rust/commit/85e9ea015220cc74dc54873974ed7138ea22eced"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "aba474455639be5024d06be0ee84f04726b3b004", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d2de69da2e99d43e14a80219b835aaf513c2f0d9", "patch": "@@ -312,6 +312,7 @@\n #![feature(stdsimd)]\n #![feature(stmt_expr_attributes)]\n #![feature(str_internals)]\n+#![feature(str_split_once)]\n #![feature(test)]\n #![feature(thread_local)]\n #![feature(thread_local_internals)]"}, {"sha": "47d615142f2409b93e25e7bdf14b4808889806f5", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=d2de69da2e99d43e14a80219b835aaf513c2f0d9", "patch": "@@ -177,9 +177,7 @@ impl TryFrom<&str> for LookupHost {\n         }\n \n         // split the string by ':' and convert the second part to u16\n-        let mut parts_iter = s.rsplitn(2, ':');\n-        let port_str = try_opt!(parts_iter.next(), \"invalid socket address\");\n-        let host = try_opt!(parts_iter.next(), \"invalid socket address\");\n+        let (port_str, host) = try_opt!(s.rsplit_once(':'), \"invalid socket address\");\n         let port: u16 = try_opt!(port_str.parse().ok(), \"invalid port value\");\n \n         (host, port).try_into()"}, {"sha": "656d9669e81d28201b3e206054d89d15c5deaf22", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=d2de69da2e99d43e14a80219b835aaf513c2f0d9", "patch": "@@ -30,6 +30,7 @@\n #![feature(termination_trait_lib)]\n #![feature(test)]\n #![feature(total_cmp)]\n+#![feature(str_split_once)]\n \n // Public reexports\n pub use self::bench::{black_box, Bencher};"}, {"sha": "e0b6eadffa119a519a8dbc3c270acd694301756c", "filename": "library/test/src/time.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Ftest%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2de69da2e99d43e14a80219b835aaf513c2f0d9/library%2Ftest%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftime.rs?ref=d2de69da2e99d43e14a80219b835aaf513c2f0d9", "patch": "@@ -105,30 +105,24 @@ impl TimeThreshold {\n     /// value.\n     pub fn from_env_var(env_var_name: &str) -> Option<Self> {\n         let durations_str = env::var(env_var_name).ok()?;\n+        let (warn_str, critical_str) = durations_str.split_once(',').unwrap_or_else(|| {\n+            panic!(\n+                \"Duration variable {} expected to have 2 numbers separated by comma, but got {}\",\n+                env_var_name, durations_str\n+            )\n+        });\n \n-        // Split string into 2 substrings by comma and try to parse numbers.\n-        let mut durations = durations_str.splitn(2, ',').map(|v| {\n+        let parse_u64 = |v| {\n             u64::from_str(v).unwrap_or_else(|_| {\n                 panic!(\n                     \"Duration value in variable {} is expected to be a number, but got {}\",\n                     env_var_name, v\n                 )\n             })\n-        });\n-\n-        // Callback to be called if the environment variable has unexpected structure.\n-        let panic_on_incorrect_value = || {\n-            panic!(\n-                \"Duration variable {} expected to have 2 numbers separated by comma, but got {}\",\n-                env_var_name, durations_str\n-            );\n         };\n \n-        let (warn, critical) = (\n-            durations.next().unwrap_or_else(panic_on_incorrect_value),\n-            durations.next().unwrap_or_else(panic_on_incorrect_value),\n-        );\n-\n+        let warn = parse_u64(warn_str);\n+        let critical = parse_u64(critical_str);\n         if warn > critical {\n             panic!(\"Test execution warn time should be less or equal to the critical time\");\n         }"}]}