{"sha": "ed217a53ff959414e9c723d8fecf80bc797a5a77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMjE3YTUzZmY5NTk0MTRlOWM3MjNkOGZlY2Y4MGJjNzk3YTVhNzc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-01T21:24:39Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-11T10:18:44Z"}, "message": "Explain flag value of 8 for msvc_try", "tree": {"sha": "70a5cb523568d9f6a7cb708428244e06686a50cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70a5cb523568d9f6a7cb708428244e06686a50cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed217a53ff959414e9c723d8fecf80bc797a5a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed217a53ff959414e9c723d8fecf80bc797a5a77", "html_url": "https://github.com/rust-lang/rust/commit/ed217a53ff959414e9c723d8fecf80bc797a5a77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed217a53ff959414e9c723d8fecf80bc797a5a77/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "838e3874fc11f24ebe8a7dff02a7f7614a5d2938", "url": "https://api.github.com/repos/rust-lang/rust/commits/838e3874fc11f24ebe8a7dff02a7f7614a5d2938", "html_url": "https://github.com/rust-lang/rust/commit/838e3874fc11f24ebe8a7dff02a7f7614a5d2938"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "27308cabd45e600d6205cf2f3fbc2aa6acc62ed9", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed217a53ff959414e9c723d8fecf80bc797a5a77/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed217a53ff959414e9c723d8fecf80bc797a5a77/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=ed217a53ff959414e9c723d8fecf80bc797a5a77", "patch": "@@ -952,11 +952,15 @@ fn codegen_msvc_try(\n         let cs = catchswitch.catch_switch(None, None, 1);\n         catchswitch.add_handler(cs, catchpad.llbb());\n \n+        // The flag value of 8 indicates that we are catching the exception by\n+        // reference instead of by value.\n+        //\n+        // Source: MicrosoftCXXABI::getAddrOfCXXCatchHandlerType in clang\n+        let flags = bx.const_i32(8);\n         let tydesc = match bx.tcx().lang_items().eh_catch_typeinfo() {\n             Some(did) => bx.get_static(did),\n             None => bug!(\"eh_catch_typeinfo not defined, but needed for SEH unwinding\"),\n         };\n-        let flags = bx.const_i32(8); // Catch by reference\n         let funclet = catchpad.catch_pad(cs, &[tydesc, flags, slot]);\n \n         let i64_align = bx.tcx().data_layout.i64_align.abi;"}]}