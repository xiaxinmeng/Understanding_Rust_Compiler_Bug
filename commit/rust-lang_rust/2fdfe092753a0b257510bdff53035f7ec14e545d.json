{"sha": "2fdfe092753a0b257510bdff53035f7ec14e545d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZGZlMDkyNzUzYTBiMjU3NTEwYmRmZjUzMDM1ZjdlYzE0ZTU0NWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T07:56:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-11T11:18:02Z"}, "message": "Rollup merge of #27617 - AlisdairO:diagnostics193, r=Manishearth\n\nAs title :-)\nPart of #24407.\n\nr? @Manishearth", "tree": {"sha": "2e6de8a85f0df7b71fe7285aef4240c3bf075ad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e6de8a85f0df7b71fe7285aef4240c3bf075ad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fdfe092753a0b257510bdff53035f7ec14e545d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdfe092753a0b257510bdff53035f7ec14e545d", "html_url": "https://github.com/rust-lang/rust/commit/2fdfe092753a0b257510bdff53035f7ec14e545d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fdfe092753a0b257510bdff53035f7ec14e545d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93f8031303feef0fc53354e44d19a825440fcbd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/93f8031303feef0fc53354e44d19a825440fcbd5", "html_url": "https://github.com/rust-lang/rust/commit/93f8031303feef0fc53354e44d19a825440fcbd5"}, {"sha": "d07a094fb07616345ff188da1a54986eabcbb9d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07a094fb07616345ff188da1a54986eabcbb9d8", "html_url": "https://github.com/rust-lang/rust/commit/d07a094fb07616345ff188da1a54986eabcbb9d8"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "bd4e4fc31107c551e33dfd1b1f42ec2f18430e32", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2fdfe092753a0b257510bdff53035f7ec14e545d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdfe092753a0b257510bdff53035f7ec14e545d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=2fdfe092753a0b257510bdff53035f7ec14e545d", "patch": "@@ -1803,6 +1803,43 @@ information see the [opt-in builtin traits RFC](https://github.com/rust-lang/\n rfcs/blob/master/text/0019-opt-in-builtin-traits.md).\n \"##,\n \n+E0193: r##\"\n+`where` clauses must use generic type parameters: it does not make sense to use\n+them otherwise.  An example causing this error:\n+\n+```\n+trait Foo {\n+    fn bar(&self);\n+}\n+\n+#[derive(Copy,Clone)]\n+struct Wrapper<T> {\n+    Wrapped: T\n+}\n+\n+impl Foo for Wrapper<u32> where Wrapper<u32>: Clone {\n+    fn bar(&self) { }\n+}\n+```\n+\n+This use of a `where` clause is strange - a more common usage would look\n+something like the following:\n+\n+```\n+impl <T> Foo for Wrapper<T> where Wrapper<T>: Clone {\n+    fn bar(&self) { }\n+}\n+```\n+\n+Here, we're saying that the implementation exists on Wrapper only when the\n+wrapped type `T` implements `Clone`. The `where` clause is important because\n+some types will not implement `Clone`, and thus will not get this method.\n+\n+In our erroneous example, however, we're referencing a single concrete type.\n+Since we know for certain that Wrapper<u32> implements Clone, there's no reason\n+to also specify it in a `where` clause.\n+\"##,\n+\n E0195: r##\"\n Your method's lifetime parameters do not match the trait declaration.\n Erroneous code example:\n@@ -2558,8 +2595,6 @@ register_diagnostics! {\n     E0188, // can not cast a immutable reference to a mutable pointer\n     E0189, // deprecated: can only cast a boxed pointer to a boxed object\n     E0190, // deprecated: can only cast a &-pointer to an &-object\n-    E0193, // cannot bound type where clause bounds may only be attached to types\n-           // involving type parameters\n     E0194,\n     E0196, // cannot determine a type for this closure\n     E0203, // type parameter has more than one relaxed default bound,"}]}