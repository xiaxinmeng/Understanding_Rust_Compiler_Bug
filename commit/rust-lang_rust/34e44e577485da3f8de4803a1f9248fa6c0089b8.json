{"sha": "34e44e577485da3f8de4803a1f9248fa6c0089b8", "node_id": "C_kwDOAAsO6NoAKDM0ZTQ0ZTU3NzQ4NWRhM2Y4ZGU0ODAzYTFmOTI0OGZhNmMwMDg5Yjg", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-05-29T16:12:05Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:54:37Z"}, "message": "Revert \"write the root position at the end\"\n\nThis reverts commit 44f66429e1fdba2cd167b4033f04f462a368b717.", "tree": {"sha": "3df46e2c93d27813d0c2cf11de51d3c9de462087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df46e2c93d27813d0c2cf11de51d3c9de462087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34e44e577485da3f8de4803a1f9248fa6c0089b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34e44e577485da3f8de4803a1f9248fa6c0089b8", "html_url": "https://github.com/rust-lang/rust/commit/34e44e577485da3f8de4803a1f9248fa6c0089b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34e44e577485da3f8de4803a1f9248fa6c0089b8/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec64b4c90ed7b277b9946e6d10bea25befe13488", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec64b4c90ed7b277b9946e6d10bea25befe13488", "html_url": "https://github.com/rust-lang/rust/commit/ec64b4c90ed7b277b9946e6d10bea25befe13488"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "3280fd5c3108b462495d8449453d1525e54dd797", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34e44e577485da3f8de4803a1f9248fa6c0089b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e44e577485da3f8de4803a1f9248fa6c0089b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=34e44e577485da3f8de4803a1f9248fa6c0089b8", "patch": "@@ -688,7 +688,7 @@ impl MetadataBlob {\n \n     pub(crate) fn get_root(&self) -> CrateRoot {\n         let slice = &self.blob()[..];\n-        let offset = slice.len() - 4;\n+        let offset = METADATA_HEADER.len();\n         let pos = (((slice[offset + 0] as u32) << 24)\n             | ((slice[offset + 1] as u32) << 16)\n             | ((slice[offset + 2] as u32) << 8)"}, {"sha": "cce59e06bf7b8096870e0749bf55dd101509337f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34e44e577485da3f8de4803a1f9248fa6c0089b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e44e577485da3f8de4803a1f9248fa6c0089b8/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=34e44e577485da3f8de4803a1f9248fa6c0089b8", "patch": "@@ -733,7 +733,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         assert_eq!(total_bytes, computed_total_bytes);\n \n         if tcx.sess.meta_stats() {\n-            self.opaque.flush().unwrap();\n+            self.opaque.flush();\n \n             let pos_before_rewind = self.opaque.file().stream_position().unwrap();\n             let mut zero_bytes = 0;\n@@ -2225,10 +2225,8 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: &Path) {\n         .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to create file encoder: {}\", err)));\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n-    // Though we had holded the root position historically in this place, we moved it to the end\n-    // of all emitted bytes by #96544. Therefore, now these 4 bytes are just a dummy to avoid the\n-    // breaking change.\n-    encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();\n+    // Will be filled with the root position after encoding everything.\n+    encoder.emit_raw_bytes(&[0, 0, 0, 0]);\n \n     let source_map_files = tcx.sess.source_map().files();\n     let source_file_cache = (source_map_files[0].clone(), 0);\n@@ -2259,20 +2257,25 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: &Path) {\n     // culminating in the `CrateRoot` which points to all of it.\n     let root = ecx.encode_crate_root();\n \n+    ecx.opaque.flush();\n+    let mut file = std::fs::OpenOptions::new()\n+        .write(true)\n+        .open(path)\n+        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to open the file: {}\", err)));\n+\n     // Encode the root position.\n+    let header = METADATA_HEADER.len();\n+    file.seek(std::io::SeekFrom::Start(header as u64))\n+        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to seek the file: {}\", err)));\n     let pos = root.position.get();\n-    ecx.opaque.emit_raw_bytes(&[\n-        (pos >> 24) as u8,\n-        (pos >> 16) as u8,\n-        (pos >> 8) as u8,\n-        (pos >> 0) as u8,\n-    ]);\n+    file.write_all(&[(pos >> 24) as u8, (pos >> 16) as u8, (pos >> 8) as u8, (pos >> 0) as u8])\n+        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to write to the file: {}\", err)));\n \n     // Record metadata size for self-profiling\n     tcx.prof.artifact_size(\n         \"crate_metadata\",\n         \"crate_metadata\",\n-        ecx.opaque.file().metadata().unwrap().len() as u64,\n+        file.metadata().unwrap().len() as u64,\n     );\n }\n "}]}