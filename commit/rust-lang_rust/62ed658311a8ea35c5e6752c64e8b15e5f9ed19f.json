{"sha": "62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "node_id": "C_kwDOAAsO6NoAKDYyZWQ2NTgzMTFhOGVhMzVjNWU2NzUyYzY0ZThiMTVlNWY5ZWQxOWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T12:43:53Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:50:49Z"}, "message": "fix clippy::useless_conversion", "tree": {"sha": "dbaa8fc83d8897b1971d6e63476620c870a6f285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbaa8fc83d8897b1971d6e63476620c870a6f285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "html_url": "https://github.com/rust-lang/rust/commit/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451fcd3c799526a8e921d0f7c4a08741dc8f4391", "url": "https://api.github.com/repos/rust-lang/rust/commits/451fcd3c799526a8e921d0f7c4a08741dc8f4391", "html_url": "https://github.com/rust-lang/rust/commit/451fcd3c799526a8e921d0f7c4a08741dc8f4391"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "9c7558d1918778a7f85d641459702f0d01ee786d", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -82,8 +82,8 @@ impl From<GenericParam> for GenericParamId {\n     fn from(id: GenericParam) -> Self {\n         match id {\n             GenericParam::LifetimeParam(it) => GenericParamId::LifetimeParamId(it.id),\n-            GenericParam::ConstParam(it) => GenericParamId::ConstParamId(it.id.into()),\n-            GenericParam::TypeParam(it) => GenericParamId::TypeParamId(it.id.into()),\n+            GenericParam::ConstParam(it) => GenericParamId::ConstParamId(it.id),\n+            GenericParam::TypeParam(it) => GenericParamId::TypeParamId(it.id),\n         }\n     }\n }"}, {"sha": "6a761c505c8dfff768dcc44fe2917cc932d4112f", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -570,7 +570,7 @@ impl DefCollector<'_> {\n \n         let proc_macro_id =\n             ProcMacroLoc { container: module_id, id, expander, kind }.intern(self.db);\n-        self.define_proc_macro(def.name.clone(), proc_macro_id.into());\n+        self.define_proc_macro(def.name.clone(), proc_macro_id);\n         if let ProcMacroKind::CustomDerive { helpers } = def.kind {\n             self.def_map\n                 .exported_derives"}, {"sha": "5fd099aea7d64a0b612f2ef98d6e247fbe315514", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -146,7 +146,7 @@ pub fn expand_eager_macro(\n     if let MacroDefKind::BuiltInEager(eager, _) = def.kind {\n         let res = eager.expand(db, arg_id, &subtree);\n         if let Some(err) = res.err {\n-            diagnostic_sink(err.into());\n+            diagnostic_sink(err);\n         }\n \n         let loc = MacroCallLoc {"}, {"sha": "1d6affe9c70f8bf1aa418fe536adcc2a5630fdb6", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -1059,7 +1059,7 @@ pub(crate) fn generic_predicates_for_param_query(\n             | WherePredicate::TypeBound { target, bound, .. } => {\n                 match target {\n                     WherePredicateTypeTarget::TypeRef(type_ref) => {\n-                        if ctx.lower_ty_only_param(type_ref) != Some(param_id.into()) {\n+                        if ctx.lower_ty_only_param(type_ref) != Some(param_id) {\n                             return false;\n                         }\n                     }"}, {"sha": "e48a1cd9ef254baa5bd4da46a9b3f56641897946", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -1518,7 +1518,7 @@ fn make_body(\n                 make::expr_path(make::path_from_text(\"ControlFlow::Continue\")),\n                 make::arg_list(iter::once(make::expr_unit())),\n             );\n-            with_tail_expr(block, controlflow_continue.into())\n+            with_tail_expr(block, controlflow_continue)\n         }\n         FlowHandler::IfOption { .. } => {\n             let none = make::expr_path(make::ext::ident_path(\"None\"));"}, {"sha": "169bc9ed4d30d45ef5871aac1623413cca9f3c20", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -267,7 +267,7 @@ impl Module {\n                 match (item.syntax()) {\n                     ast::Adt(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Adt(nod.into());\n+                            let node_def = Definition::Adt(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n \n                             //Enum Fields are not allowed to explicitly specify pub, it is implied\n@@ -301,25 +301,25 @@ impl Module {\n                     },\n                     ast::TypeAlias(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::TypeAlias(nod.into());\n+                            let node_def = Definition::TypeAlias(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n                     ast::Const(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Const(nod.into());\n+                            let node_def = Definition::Const(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n                     ast::Static(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Static(nod.into());\n+                            let node_def = Definition::Static(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },\n                     ast::Fn(it) => {\n                         if let Some( nod ) = ctx.sema.to_def(&it) {\n-                            let node_def = Definition::Function(nod.into());\n+                            let node_def = Definition::Function(nod);\n                             self.expand_and_group_usages_file_wise(ctx, node_def, &mut refs);\n                         }\n                     },"}, {"sha": "f6ca3b211079b115f6c37733d55552aaedcad2a3", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -86,7 +86,7 @@ fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     None => {\n                         let pattern = make::path_pat(variant_name.clone());\n                         let variant_expr = make::expr_path(variant_name);\n-                        arms.push(make::match_arm(Some(pattern.into()), None, variant_expr));\n+                        arms.push(make::match_arm(Some(pattern), None, variant_expr));\n                     }\n                 }\n             }\n@@ -117,7 +117,7 @@ fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     let mut fields = vec![];\n                     for (i, _) in field_list.fields().enumerate() {\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n-                        let target = make::expr_field(f_path, &format!(\"{}\", i)).into();\n+                        let target = make::expr_field(f_path, &format!(\"{}\", i));\n                         fields.push(gen_clone_call(target));\n                     }\n                     let struct_name = make::expr_path(make::ext::ident_path(\"Self\"));\n@@ -151,7 +151,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             for variant in list.variants() {\n                 let name = variant.name()?;\n                 let variant_name = make::ext::path_from_idents([\"Self\", &format!(\"{}\", name)])?;\n-                let target = make::expr_path(make::ext::ident_path(\"f\").into());\n+                let target = make::expr_path(make::ext::ident_path(\"f\"));\n \n                 match variant.field_list() {\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n@@ -227,11 +227,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         let macro_call = make::expr_macro_call(macro_name, args);\n \n                         let variant_name = make::path_pat(variant_name);\n-                        arms.push(make::match_arm(\n-                            Some(variant_name.into()),\n-                            None,\n-                            macro_call.into(),\n-                        ));\n+                        arms.push(make::match_arm(Some(variant_name), None, macro_call));\n                     }\n                 }\n             }\n@@ -264,7 +260,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         let f_name = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                         let f_path = make::expr_ref(f_path, false);\n-                        let f_path = make::expr_field(f_path, &format!(\"{}\", name)).into();\n+                        let f_path = make::expr_field(f_path, &format!(\"{}\", name));\n                         let args = make::arg_list([f_name, f_path]);\n                         expr = make::expr_method_call(expr, make::name_ref(\"field\"), args);\n                     }\n@@ -278,7 +274,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     for (i, _) in field_list.fields().enumerate() {\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                         let f_path = make::expr_ref(f_path, false);\n-                        let f_path = make::expr_field(f_path, &format!(\"{}\", i)).into();\n+                        let f_path = make::expr_field(f_path, &format!(\"{}\", i));\n                         let method = make::name_ref(\"field\");\n                         expr = make::expr_method_call(expr, method, make::arg_list(Some(f_path)));\n                     }"}, {"sha": "4046c2febb6b18f503ea16310e7e47b29f326fa6", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -3,7 +3,7 @@\n use std::collections::VecDeque;\n \n use base_db::FileId;\n-use hir::{ItemInNs, Macro, ModuleDef, Name, Semantics};\n+use hir::{ItemInNs, ModuleDef, Name, Semantics};\n use syntax::{\n     ast::{self, make},\n     AstToken, SyntaxKind, SyntaxToken, TokenAtOffset,\n@@ -13,9 +13,9 @@ use crate::{defs::Definition, generated, RootDatabase};\n \n pub fn item_name(db: &RootDatabase, item: ItemInNs) -> Option<Name> {\n     match item {\n-        ItemInNs::Types(module_def_id) => ModuleDef::from(module_def_id).name(db),\n-        ItemInNs::Values(module_def_id) => ModuleDef::from(module_def_id).name(db),\n-        ItemInNs::Macros(macro_def_id) => Some(Macro::from(macro_def_id).name(db)),\n+        ItemInNs::Types(module_def_id) => module_def_id.name(db),\n+        ItemInNs::Values(module_def_id) => module_def_id.name(db),\n+        ItemInNs::Macros(macro_def_id) => Some(macro_def_id.name(db)),\n     }\n }\n "}, {"sha": "9a09c40ee64dcf8799bbcc8a9500d17c32804002", "filename": "crates/ide_db/src/imports/import_assets.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -430,8 +430,8 @@ fn module_with_segment_name(\n     candidate: ItemInNs,\n ) -> Option<Module> {\n     let mut current_module = match candidate {\n-        ItemInNs::Types(module_def_id) => ModuleDef::from(module_def_id).module(db),\n-        ItemInNs::Values(module_def_id) => ModuleDef::from(module_def_id).module(db),\n+        ItemInNs::Types(module_def_id) => module_def_id.module(db),\n+        ItemInNs::Values(module_def_id) => module_def_id.module(db),\n         ItemInNs::Macros(macro_def_id) => ModuleDef::from(macro_def_id).module(db),\n     };\n     while let Some(module) = current_module {"}, {"sha": "07a57c883b2d93ee3e0e8b9a3e07852a07244b6d", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -115,7 +115,7 @@ fn find_items<'a>(\n         });\n \n     // Query the local crate using the symbol index.\n-    let local_results = symbol_index::crate_symbols(db, krate.into(), local_query)\n+    let local_results = symbol_index::crate_symbols(db, krate, local_query)\n         .into_iter()\n         .filter_map(move |local_candidate| get_name_definition(sema, &local_candidate))\n         .filter_map(|name_definition_to_import| match name_definition_to_import {"}, {"sha": "bd3fcb870af7707ce1e089b8ca633d235c432a3f", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ed658311a8ea35c5e6752c64e8b15e5f9ed19f/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=62ed658311a8ea35c5e6752c64e8b15e5f9ed19f", "patch": "@@ -101,7 +101,7 @@ impl TextEdit {\n             max_total_len = max(max_total_len, total_len);\n         }\n \n-        if let Some(additional) = max_total_len.checked_sub(text_size.into()) {\n+        if let Some(additional) = max_total_len.checked_sub(text_size) {\n             text.reserve(additional.into());\n         }\n "}]}