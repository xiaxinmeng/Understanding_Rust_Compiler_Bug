{"sha": "fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZjY5ZGQ3YjBmMGJlNjNlYTgxMWUwZTAxZjc5OWYyZTA3N2Q1MmQ=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-03-09T00:34:39Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-03-09T00:34:39Z"}, "message": "Finish de-implicit-selfing everything but the test suite", "tree": {"sha": "eac8c9f3a8a1d6ed4bbe3b85faf1e0ad733b3dc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac8c9f3a8a1d6ed4bbe3b85faf1e0ad733b3dc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "html_url": "https://github.com/rust-lang/rust/commit/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddecef794450fe37f84c8b2316b30eff83b0920b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddecef794450fe37f84c8b2316b30eff83b0920b", "html_url": "https://github.com/rust-lang/rust/commit/ddecef794450fe37f84c8b2316b30eff83b0920b"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "4d686c8ab33a12b0736366df3caf0911319b692c", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -51,6 +51,7 @@ Implicitly, all crates behave as if they included the following prologue:\n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n #[allow(deprecated_mutable_fields)];\n+#[deny(deprecated_self)];\n \n // On Linux, link to the runtime with -lrt.\n #[cfg(target_os = \"linux\")]"}, {"sha": "f21029a8a4f0ff3d47b1710a92c11878840de5c6", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -25,6 +25,7 @@\n #[allow(non_camel_case_types)];\n #[allow(deprecated_mode)];\n #[allow(deprecated_pattern)];\n+#[deny(deprecated_self)];\n \n extern mod core(vers = \"0.6\");\n extern mod std(vers = \"0.6\");"}, {"sha": "082861e0ae01ffbbf77b9232b561e4aad09eebbc", "filename": "src/librust/rust.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -12,6 +12,8 @@\n // XXX: Make commands run and test emit proper file endings on winds\n // XXX: Make run only accept source that emits an executable\n \n+#[deny(deprecated_self)];\n+\n #[link(name = \"rust\",\n        vers = \"0.6\",\n        uuid = \"4a24da33-5cc8-4037-9352-2cbe9bd9d27c\","}, {"sha": "48fddec00797acfe53f5a4203c92dacb3de832d2", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -721,12 +721,12 @@ impl vtable_decoder_helpers for reader::Decoder {\n // Encoding and decoding the side tables\n \n trait get_ty_str_ctxt {\n-    fn ty_str_ctxt() -> @tyencode::ctxt;\n+    fn ty_str_ctxt(@self) -> @tyencode::ctxt;\n }\n \n-impl get_ty_str_ctxt for @e::EncodeContext {\n+impl get_ty_str_ctxt for e::EncodeContext {\n     // IMPLICIT SELF WARNING: fix this!\n-    fn ty_str_ctxt() -> @tyencode::ctxt {\n+    fn ty_str_ctxt(@self) -> @tyencode::ctxt {\n         @tyencode::ctxt {diag: self.tcx.sess.diagnostic(),\n                         ds: e::def_to_str,\n                         tcx: self.tcx,"}, {"sha": "068327dc74167cb282299a378cfb84c6527c8959", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -816,7 +816,7 @@ pub impl Liveness {\n         }\n     }\n \n-    fn indices2(ln: LiveNode, succ_ln: LiveNode,\n+    fn indices2(&self, ln: LiveNode, succ_ln: LiveNode,\n                 op: fn(uint, uint)) {\n         let node_base_idx = self.idx(ln, Variable(0u));\n         let succ_base_idx = self.idx(succ_ln, Variable(0u));"}, {"sha": "d1e35f7a19df2a7d5663e03230d94a38ab7fe255", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -592,7 +592,7 @@ pub impl NameBindings {\n     }\n \n     /// Returns the module node if applicable.\n-    fn get_module_if_available() -> Option<@mut Module> {\n+    fn get_module_if_available(&self) -> Option<@mut Module> {\n         match self.type_def {\n             Some(ref type_def) => (*type_def).module_def,\n             None => None\n@@ -613,14 +613,14 @@ pub impl NameBindings {\n         }\n     }\n \n-    fn defined_in_namespace(namespace: Namespace) -> bool {\n+    fn defined_in_namespace(&self, namespace: Namespace) -> bool {\n         match namespace {\n             TypeNS   => return self.type_def.is_some(),\n             ValueNS  => return self.value_def.is_some()\n         }\n     }\n \n-    fn defined_in_public_namespace(namespace: Namespace) -> bool {\n+    fn defined_in_public_namespace(&self, namespace: Namespace) -> bool {\n         match namespace {\n             TypeNS => match self.type_def {\n                 Some(def) => def.privacy != Private,\n@@ -633,7 +633,7 @@ pub impl NameBindings {\n         }\n     }\n \n-    fn def_for_namespace(namespace: Namespace) -> Option<def> {\n+    fn def_for_namespace(&self, namespace: Namespace) -> Option<def> {\n         match namespace {\n             TypeNS => {\n                 match self.type_def {\n@@ -666,7 +666,7 @@ pub impl NameBindings {\n         }\n     }\n \n-    fn privacy_for_namespace(namespace: Namespace) -> Option<Privacy> {\n+    fn privacy_for_namespace(&self, namespace: Namespace) -> Option<Privacy> {\n         match namespace {\n             TypeNS => {\n                 match self.type_def {\n@@ -683,7 +683,7 @@ pub impl NameBindings {\n         }\n     }\n \n-    fn span_for_namespace(namespace: Namespace) -> Option<span> {\n+    fn span_for_namespace(&self, namespace: Namespace) -> Option<span> {\n         if self.defined_in_namespace(namespace) {\n             match namespace {\n                 TypeNS  => self.type_span,"}, {"sha": "3395d9b445146c07f4c81189bf6f219ad7930464", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -235,7 +235,8 @@ pub impl LookupContext/&self {\n         self.search_for_autosliced_method(self_ty, autoderefs)\n     }\n \n-    fn deref(ty: ty::t, enum_dids: &mut ~[ast::def_id]) -> Option<ty::t> {\n+    fn deref(&self, ty: ty::t, enum_dids: &mut ~[ast::def_id])\n+            -> Option<ty::t> {\n         match ty::get(ty).sty {\n             ty_enum(did, _) => {\n                 // Watch out for newtype'd enums like \"enum t = @T\".\n@@ -599,7 +600,7 @@ pub impl LookupContext/&self {\n         }\n     }\n \n-    fn push_inherent_impl_candidates_for_type(did: def_id) {\n+    fn push_inherent_impl_candidates_for_type(&self, did: def_id) {\n         let opt_impl_infos =\n             self.fcx.ccx.coherence_info.inherent_methods.find(&did);\n         for opt_impl_infos.each |impl_infos| {"}, {"sha": "00352ba29582a2a75f5c56e4953c1708f08d3639", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -191,15 +191,14 @@ pub struct CoherenceChecker {\n }\n \n pub impl CoherenceChecker {\n-    // IMPLICIT SELF WARNING: fix this!\n-    fn check_coherence(crate: @crate) {\n+    fn check_coherence(self, crate: @crate) {\n         // Check implementations and traits. This populates the tables\n         // containing the inherent methods and extension methods. It also\n         // builds up the trait inheritance table.\n         visit_crate(*crate, (), mk_simple_visitor(@SimpleVisitor {\n             visit_item: |item| {\n-                debug!(\"(checking coherence) item '%s'\",\n-                       *self.crate_context.tcx.sess.str_of(item.ident));\n+//                debug!(\"(checking coherence) item '%s'\",\n+//                       self.crate_context.tcx.sess.str_of(item.ident));\n \n                 match item.node {\n                     item_impl(_, opt_trait, _, _) => {\n@@ -617,8 +616,7 @@ pub impl CoherenceChecker {\n     }\n \n     // Privileged scope checking\n-    // IMPLICIT SELF WARNING: fix this!\n-    fn check_privileged_scopes(crate: @crate) {\n+    fn check_privileged_scopes(self, crate: @crate) {\n         visit_crate(*crate, (), mk_vt(@Visitor {\n             visit_item: |item, _context, visitor| {\n                 match /*bad*/copy item.node {"}, {"sha": "a334ba57e6e04db0831ac9cae5767c9f47ce5967", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -584,7 +584,7 @@ pub impl @mut InferCtxt {\n     }\n \n     /// Execute `f` and commit the bindings if successful\n-    fn commit<T,E>(f: fn() -> Result<T,E>) -> Result<T,E> {\n+    fn commit<T,E>(&self, f: fn() -> Result<T,E>) -> Result<T,E> {\n         fail_unless!(!self.in_snapshot());\n \n         debug!(\"commit()\");\n@@ -599,7 +599,7 @@ pub impl @mut InferCtxt {\n     }\n \n     /// Execute `f`, unroll bindings on failure\n-    fn try<T,E>(f: fn() -> Result<T,E>) -> Result<T,E> {\n+    fn try<T,E>(&self, f: fn() -> Result<T,E>) -> Result<T,E> {\n         debug!(\"try()\");\n         do indent {\n             let snapshot = self.start_snapshot();\n@@ -613,7 +613,7 @@ pub impl @mut InferCtxt {\n     }\n \n     /// Execute `f` then unroll any bindings it creates\n-    fn probe<T,E>(f: fn() -> Result<T,E>) -> Result<T,E> {\n+    fn probe<T,E>(&self, f: fn() -> Result<T,E>) -> Result<T,E> {\n         debug!(\"probe()\");\n         do indent {\n             let snapshot = self.start_snapshot();"}, {"sha": "296c94f3299cb2040357e493d1fed729dd39e4ac", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -24,7 +24,7 @@\n #[allow(non_camel_case_types)];\n #[allow(deprecated_mode)];\n #[warn(deprecated_pattern)];\n-#[allow(deprecated_self)];\n+#[deny(deprecated_self)];\n \n #[no_core];\n "}, {"sha": "f17f7ffd9cf4a20a99c1e952e20898546657aea6", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -22,6 +22,7 @@\n #[no_core];\n \n #[allow(non_implicitly_copyable_typarams)];\n+#[deny(deprecated_self)];\n \n extern mod core(vers = \"0.6\");\n extern mod std(vers = \"0.6\");"}, {"sha": "6674885a6e28ac8b1145cad44388353bf1589fe0", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -22,6 +22,7 @@\n \n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n+#[deny(deprecated_self)];\n \n extern mod core(vers = \"0.6\");\n extern mod std(vers = \"0.6\");"}, {"sha": "5b9f3c3cd229edf38457b7a5a59cce7d6449daeb", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdf69dd7b0f0be63ea811e0e01f799f2e077d52d/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=fdf69dd7b0f0be63ea811e0e01f799f2e077d52d", "patch": "@@ -20,6 +20,7 @@\n #[no_core];\n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n+#[deny(deprecated_self)];\n \n extern mod core(vers = \"0.6\");\n extern mod std(vers = \"0.6\");"}]}