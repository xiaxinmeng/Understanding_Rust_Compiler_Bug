{"sha": "9072c8d274307c08ad0a7afb16681d43181c4033", "node_id": "C_kwDOAAsO6NoAKDkwNzJjOGQyNzQzMDdjMDhhZDBhN2FmYjE2NjgxZDQzMTgxYzQwMzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-29T23:34:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-18T03:19:37Z"}, "message": "skip pointing out ambuguous impls in alloc/std crates too", "tree": {"sha": "8c49999ad4411e40ef84c79feec5e18ad55ce21c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c49999ad4411e40ef84c79feec5e18ad55ce21c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9072c8d274307c08ad0a7afb16681d43181c4033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9072c8d274307c08ad0a7afb16681d43181c4033", "html_url": "https://github.com/rust-lang/rust/commit/9072c8d274307c08ad0a7afb16681d43181c4033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9072c8d274307c08ad0a7afb16681d43181c4033/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a7423e77b49a99e270531fbadda5b8899df3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a7423e77b49a99e270531fbadda5b8899df3f6", "html_url": "https://github.com/rust-lang/rust/commit/73a7423e77b49a99e270531fbadda5b8899df3f6"}], "stats": {"total": 62, "additions": 18, "deletions": 44}, "files": [{"sha": "67b44f0a348814cc216ce06bc3f4e95021838c23", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072c8d274307c08ad0a7afb16681d43181c4033/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072c8d274307c08ad0a7afb16681d43181c4033/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9072c8d274307c08ad0a7afb16681d43181c4033", "patch": "@@ -1973,7 +1973,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n         if self.is_tainted_by_errors()\n             && crate_names.len() == 1\n-            && crate_names[0] == \"`core`\"\n+            && [\"`core`\", \"`alloc`\", \"`std`\"].contains(&crate_names[0].as_str())\n             && spans.len() == 0\n         {\n             // Avoid complaining about other inference issues for expressions like"}, {"sha": "828b5aac896beff3d71fb276d3dc3b0785502dfd", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=9072c8d274307c08ad0a7afb16681d43181c4033", "patch": "@@ -17,7 +17,7 @@ fn two(x: bool) -> impl Foo {\n     //~| expected `i32`, found `u32`\n }\n \n-fn sum_to(n: u32) -> impl Foo { //~ ERROR type annotations needed\n+fn sum_to(n: u32) -> impl Foo {\n     if n == 0 {\n         0\n     } else {"}, {"sha": "536a4726c6de225f02c2247332f6c399a92b49f6", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=9072c8d274307c08ad0a7afb16681d43181c4033", "patch": "@@ -34,22 +34,7 @@ LL |         n + sum_to(n - 1)\n    |\n    = help: the trait `Add<impl Foo>` is not implemented for `u32`\n \n-error[E0283]: type annotations needed\n-  --> $DIR/equality.rs:20:22\n-   |\n-LL | fn sum_to(n: u32) -> impl Foo {\n-   |                      ^^^^^^^^ cannot infer type for type `{integer}`\n-   |\n-   = note: multiple `impl`s satisfying `{integer}: ToString` found in the `alloc` crate:\n-           - impl ToString for i8;\n-           - impl ToString for u8;\n-note: required because of the requirements on the impl of `Foo` for `{integer}`\n-  --> $DIR/equality.rs:5:26\n-   |\n-LL | impl<T: Copy + ToString> Foo for T {}\n-   |                          ^^^     ^\n-\n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0277, E0283, E0308.\n+Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "8c0a0f51a2157eeb34f8f17f10ee13af73977b09", "filename": "src/test/ui/issues/issue-72690.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs?ref=9072c8d274307c08ad0a7afb16681d43181c4033", "patch": "@@ -10,7 +10,6 @@ fn err() {\n \n fn arg_pat_closure_err() {\n     |x| String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n-    //~^ ERROR type annotations needed\n     //~| ERROR type annotations needed\n }\n "}, {"sha": "f1ec678b20193fe4d7d196196eca65cb39239ebb", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9072c8d274307c08ad0a7afb16681d43181c4033/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=9072c8d274307c08ad0a7afb16681d43181c4033", "patch": "@@ -29,16 +29,6 @@ error[E0282]: type annotations needed\n LL |     |x| String::from(\"x\".as_ref());\n    |      ^ consider giving this closure parameter a type\n \n-error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:12:9\n-   |\n-LL |     |x| String::from(\"x\".as_ref());\n-   |         ^^^^^^^^^^^^ cannot infer type for reference `&_`\n-   |\n-   = note: multiple `impl`s satisfying `String: From<&_>` found in the `alloc` crate:\n-           - impl<> From<&String> for String;\n-           - impl<> From<&str> for String;\n-\n error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26\n    |\n@@ -55,7 +45,7 @@ LL |     |x| String::from(\"x\".as_ref());\n            - impl AsRef<str> for str;\n \n error[E0283]: type annotations needed for `&T`\n-  --> $DIR/issue-72690.rs:18:17\n+  --> $DIR/issue-72690.rs:17:17\n    |\n LL |     let _ = \"x\".as_ref();\n    |         -       ^^^^^^ cannot infer type for type parameter `T` declared on the trait `AsRef`\n@@ -69,7 +59,7 @@ LL |     let _ = \"x\".as_ref();\n            - impl AsRef<str> for str;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:22:5\n+  --> $DIR/issue-72690.rs:21:5\n    |\n LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n@@ -79,7 +69,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl<> From<&str> for String;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:22:22\n+  --> $DIR/issue-72690.rs:21:22\n    |\n LL |     String::from(\"x\".as_ref());\n    |                  ----^^^^^^--\n@@ -94,7 +84,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<str> for str;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:29:5\n+  --> $DIR/issue-72690.rs:28:5\n    |\n LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n@@ -104,7 +94,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl<> From<&str> for String;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:29:22\n+  --> $DIR/issue-72690.rs:28:22\n    |\n LL |     String::from(\"x\".as_ref());\n    |                  ----^^^^^^--\n@@ -119,7 +109,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<str> for str;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:38:5\n+  --> $DIR/issue-72690.rs:37:5\n    |\n LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n@@ -129,7 +119,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl<> From<&str> for String;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:38:22\n+  --> $DIR/issue-72690.rs:37:22\n    |\n LL |     String::from(\"x\".as_ref());\n    |                  ----^^^^^^--\n@@ -144,7 +134,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<str> for str;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:47:5\n+  --> $DIR/issue-72690.rs:46:5\n    |\n LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n@@ -154,7 +144,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl<> From<&str> for String;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:47:22\n+  --> $DIR/issue-72690.rs:46:22\n    |\n LL |     String::from(\"x\".as_ref());\n    |                  ----^^^^^^--\n@@ -169,7 +159,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<str> for str;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:54:5\n+  --> $DIR/issue-72690.rs:53:5\n    |\n LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n@@ -179,7 +169,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl<> From<&str> for String;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:54:22\n+  --> $DIR/issue-72690.rs:53:22\n    |\n LL |     String::from(\"x\".as_ref());\n    |                  ----^^^^^^--\n@@ -194,7 +184,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<str> for str;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:63:5\n+  --> $DIR/issue-72690.rs:62:5\n    |\n LL |     String::from(\"x\".as_ref());\n    |     ^^^^^^^^^^^^ cannot infer type for reference `&_`\n@@ -204,7 +194,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl<> From<&str> for String;\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-72690.rs:63:22\n+  --> $DIR/issue-72690.rs:62:22\n    |\n LL |     String::from(\"x\".as_ref());\n    |                  ----^^^^^^--\n@@ -218,7 +208,7 @@ LL |     String::from(\"x\".as_ref());\n            - impl AsRef<[u8]> for str;\n            - impl AsRef<str> for str;\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0282, E0283.\n For more information about an error, try `rustc --explain E0282`."}]}