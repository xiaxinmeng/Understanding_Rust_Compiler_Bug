{"sha": "0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNjVhM2QwYTZhM2FlOGQxZjM1ZDk1ZjE4MjEwZjg5NGExZDZjOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T02:13:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-14T02:13:02Z"}, "message": "Auto merge of #76123 - tmiasko:inline-args-storage, r=wesleywiser\n\ninliner: Emit storage markers for introduced arg temporaries\n\nWhen introducing argument temporaries during inlining, emit storage\nmarker statements just before the assignment and in the beginning of\nthe return block.\n\nThis ensures that such temporaries will not be considered live across\nyield points after inlining inside a generator.\n\nFixes #71793.", "tree": {"sha": "593304c71084512a1edefd78ad1f661babfde5d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/593304c71084512a1edefd78ad1f661babfde5d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "html_url": "https://github.com/rust-lang/rust/commit/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eb00abf35b9bb59825edf81d05c2fa2f17cefca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb00abf35b9bb59825edf81d05c2fa2f17cefca", "html_url": "https://github.com/rust-lang/rust/commit/1eb00abf35b9bb59825edf81d05c2fa2f17cefca"}, {"sha": "9daf8fd5b1d369cd2f91ac919dc5d17f4fd43c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9daf8fd5b1d369cd2f91ac919dc5d17f4fd43c0c", "html_url": "https://github.com/rust-lang/rust/commit/9daf8fd5b1d369cd2f91ac919dc5d17f4fd43c0c"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "4e7cacc2f4af7b615eb43a92b16e40348bd2e88f", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "patch": "@@ -506,7 +506,7 @@ impl Inliner<'tcx> {\n                 let return_block = destination.1;\n \n                 // Copy the arguments if needed.\n-                let args: Vec<_> = self.make_call_args(args, &callsite, caller_body);\n+                let args: Vec<_> = self.make_call_args(args, &callsite, caller_body, return_block);\n \n                 let bb_len = caller_body.basic_blocks().len();\n                 let mut integrator = Integrator {\n@@ -553,6 +553,7 @@ impl Inliner<'tcx> {\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n         caller_body: &mut Body<'tcx>,\n+        return_block: BasicBlock,\n     ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n@@ -581,8 +582,18 @@ impl Inliner<'tcx> {\n         // and the vector is `[closure_ref, tmp0, tmp1, tmp2]`.\n         if tcx.is_closure(callsite.callee) {\n             let mut args = args.into_iter();\n-            let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);\n-            let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);\n+            let self_ = self.create_temp_if_necessary(\n+                args.next().unwrap(),\n+                callsite,\n+                caller_body,\n+                return_block,\n+            );\n+            let tuple = self.create_temp_if_necessary(\n+                args.next().unwrap(),\n+                callsite,\n+                caller_body,\n+                return_block,\n+            );\n             assert!(args.next().is_none());\n \n             let tuple = Place::from(tuple);\n@@ -602,13 +613,13 @@ impl Inliner<'tcx> {\n                     Operand::Move(tcx.mk_place_field(tuple, Field::new(i), ty.expect_ty()));\n \n                 // Spill to a local to make e.g., `tmp0`.\n-                self.create_temp_if_necessary(tuple_field, callsite, caller_body)\n+                self.create_temp_if_necessary(tuple_field, callsite, caller_body, return_block)\n             });\n \n             closure_ref_arg.chain(tuple_tmp_args).collect()\n         } else {\n             args.into_iter()\n-                .map(|a| self.create_temp_if_necessary(a, callsite, caller_body))\n+                .map(|a| self.create_temp_if_necessary(a, callsite, caller_body, return_block))\n                 .collect()\n         }\n     }\n@@ -620,6 +631,7 @@ impl Inliner<'tcx> {\n         arg: Operand<'tcx>,\n         callsite: &CallSite<'tcx>,\n         caller_body: &mut Body<'tcx>,\n+        return_block: BasicBlock,\n     ) -> Local {\n         // FIXME: Analysis of the usage of the arguments to avoid\n         // unnecessary temporaries.\n@@ -642,11 +654,19 @@ impl Inliner<'tcx> {\n         let arg_tmp = LocalDecl::new(ty, callsite.location.span);\n         let arg_tmp = caller_body.local_decls.push(arg_tmp);\n \n-        let stmt = Statement {\n+        caller_body[callsite.bb].statements.push(Statement {\n+            source_info: callsite.location,\n+            kind: StatementKind::StorageLive(arg_tmp),\n+        });\n+        caller_body[callsite.bb].statements.push(Statement {\n             source_info: callsite.location,\n             kind: StatementKind::Assign(box (Place::from(arg_tmp), arg)),\n-        };\n-        caller_body[callsite.bb].statements.push(stmt);\n+        });\n+        caller_body[return_block].statements.insert(\n+            0,\n+            Statement { source_info: callsite.location, kind: StatementKind::StorageDead(arg_tmp) },\n+        );\n+\n         arg_tmp\n     }\n }"}, {"sha": "756f31315f18a982b3d9d9470a26cf594f480831", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "patch": "@@ -22,9 +22,13 @@ fn bar() -> bool {\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }\n         StorageLive(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n         _2 = _1;                         // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:6\n+        StorageLive(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         _3 = const 1_i32;                // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageLive(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         _4 = const -1_i32;               // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         _0 = Eq(move _3, move _4);       // scope 2 at $DIR/inline-any-operand.rs:17:5: 17:11\n+        StorageDead(_4);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n+        StorageDead(_3);                 // scope 1 at $DIR/inline-any-operand.rs:12:5: 12:13\n         StorageDead(_2);                 // scope 1 at $DIR/inline-any-operand.rs:12:12: 12:13\n         StorageDead(_1);                 // scope 0 at $DIR/inline-any-operand.rs:13:1: 13:2\n         return;                          // scope 0 at $DIR/inline-any-operand.rs:13:2: 13:2"}, {"sha": "6ecbd3022e389145b457df268bbb7d9c2cdee0ef", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "patch": "@@ -30,9 +30,13 @@ fn foo(_1: T, _2: i32) -> i32 {\n         _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n         (_5.0: i32) = move _6;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         (_5.1: i32) = move _7;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        StorageLive(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        StorageLive(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:11:22: 11:24\n+        StorageDead(_9);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        StorageDead(_8);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n         StorageDead(_6);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12\n         StorageDead(_5);                 // scope 1 at $DIR/inline-closure.rs:12:11: 12:12"}, {"sha": "7475be30c0dff8976c262be411a0bc58134a2190", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "patch": "@@ -33,9 +33,13 @@ fn foo(_1: T, _2: &i32) -> i32 {\n         _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n         (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _0 = (*_8);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n+        StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n         StorageDead(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n         StorageDead(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12"}, {"sha": "0258e3c2e4b380f8afaf4081272917bbe99eed83", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "patch": "@@ -38,6 +38,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n         _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n         (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        StorageLive(_11);                // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         _11 = move (_7.0: i32);          // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_9);                 // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         _9 = (*((*_6).0: &i32));         // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n@@ -47,6 +48,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         (_0.1: T) = move _10;            // scope 2 at $DIR/inline-closure-captures.rs:11:18: 11:24\n         StorageDead(_10);                // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n         StorageDead(_9);                 // scope 2 at $DIR/inline-closure-captures.rs:11:23: 11:24\n+        StorageDead(_11);                // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageDead(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9\n         StorageDead(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:8: 12:9"}, {"sha": "87b2806d4e2088f275f5be2ae2b25530211f2022", "filename": "src/test/ui/mir/issue-71793-inline-args-storage.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fui%2Fmir%2Fissue-71793-inline-args-storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98/src%2Ftest%2Fui%2Fmir%2Fissue-71793-inline-args-storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-71793-inline-args-storage.rs?ref=0b65a3d0a6a3ae8d1f35d95f18210f894a1d6c98", "patch": "@@ -0,0 +1,16 @@\n+// Verifies that inliner emits StorageLive & StorageDead when introducing\n+// temporaries for arguments, so that they don't become part of the generator.\n+// Regression test for #71793.\n+//\n+// check-pass\n+// edition:2018\n+// compile-args: -Zmir-opt-level=2\n+\n+#![crate_type = \"lib\"]\n+\n+pub async fn connect() {}\n+\n+pub async fn connect_many() {\n+    Vec::<String>::new().first().ok_or(\"\").unwrap();\n+    connect().await;\n+}"}]}