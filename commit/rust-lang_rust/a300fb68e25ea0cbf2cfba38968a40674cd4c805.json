{"sha": "a300fb68e25ea0cbf2cfba38968a40674cd4c805", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDBmYjY4ZTI1ZWEwY2JmMmNmYmEzODk2OGE0MDY3NGNkNGM4MDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T14:16:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T14:16:33Z"}, "message": "Make most of modules impl private", "tree": {"sha": "ebb54c49dd65bb4fc47810dfb36ff33da57a9686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebb54c49dd65bb4fc47810dfb36ff33da57a9686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a300fb68e25ea0cbf2cfba38968a40674cd4c805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a300fb68e25ea0cbf2cfba38968a40674cd4c805", "html_url": "https://github.com/rust-lang/rust/commit/a300fb68e25ea0cbf2cfba38968a40674cd4c805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a300fb68e25ea0cbf2cfba38968a40674cd4c805/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd26a2f5b7dab38ee0813e314e2bde269dd5883", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd26a2f5b7dab38ee0813e314e2bde269dd5883", "html_url": "https://github.com/rust-lang/rust/commit/0dd26a2f5b7dab38ee0813e314e2bde269dd5883"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "a8489f89c6a8d0be0c12f575cd1d980fb4e2b7ec", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=a300fb68e25ea0cbf2cfba38968a40674cd4c805", "patch": "@@ -20,19 +20,19 @@ use crate::{\n \n salsa::query_group! {\n     pub(crate) trait DescriptorDatabase: SyntaxDatabase + IdDatabase {\n-        fn module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n+        fn fn_scopes(fn_id: FnId) -> Arc<FnScopes> {\n+            type FnScopesQuery;\n+            use fn function::imp::fn_scopes;\n+        }\n+\n+        fn _module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n             type ModuleTreeQuery;\n             use fn module::imp::module_tree;\n         }\n-        fn module_scope(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<ModuleScope>> {\n+        fn _module_scope(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<ModuleScope>> {\n             type ModuleScopeQuery;\n             use fn module::imp::module_scope;\n         }\n-        fn fn_scopes(fn_id: FnId) -> Arc<FnScopes> {\n-            type FnScopesQuery;\n-            use fn function::imp::fn_scopes;\n-        }\n-\n         fn _fn_syntax(fn_id: FnId) -> FnDefNode {\n             type FnSyntaxQuery;\n             // Don't retain syntax trees in memory"}, {"sha": "defe87216c8bba6ce590c4755953158a3fea1324", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=a300fb68e25ea0cbf2cfba38968a40674cd4c805", "patch": "@@ -86,7 +86,7 @@ pub(crate) fn module_scope(\n     source_root_id: SourceRootId,\n     module_id: ModuleId,\n ) -> Cancelable<Arc<ModuleScope>> {\n-    let tree = db.module_tree(source_root_id)?;\n+    let tree = db._module_tree(source_root_id)?;\n     let source = module_id.source(&tree).resolve(db);\n     let res = match source {\n         ModuleSourceNode::SourceFile(it) => ModuleScope::new(it.borrowed().items()),"}, {"sha": "ff7afe16e9c17783319c2260c318b722a18fd074", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=a300fb68e25ea0cbf2cfba38968a40674cd4c805", "patch": "@@ -8,7 +8,7 @@ use ra_editor::find_node_at_offset;\n use ra_syntax::{\n     algo::generate,\n     ast::{self, AstNode, NameOwner},\n-    SmolStr, SyntaxNode, SyntaxNodeRef,\n+    SmolStr, SyntaxNode,\n };\n use relative_path::RelativePathBuf;\n \n@@ -62,7 +62,7 @@ impl ModuleDescriptor {\n         module_source: ModuleSource,\n     ) -> Cancelable<Option<ModuleDescriptor>> {\n         let source_root_id = db.file_source_root(file_id);\n-        let module_tree = db.module_tree(source_root_id)?;\n+        let module_tree = db._module_tree(source_root_id)?;\n \n         let res = match module_tree.any_module_for_source(module_source) {\n             None => None,\n@@ -124,7 +124,11 @@ impl ModuleDescriptor {\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n     pub fn scope(&self, db: &impl DescriptorDatabase) -> Cancelable<Arc<ModuleScope>> {\n-        db.module_scope(self.source_root_id, self.module_id)\n+        db._module_scope(self.source_root_id, self.module_id)\n+    }\n+\n+    pub fn problems(&self, db: &impl DescriptorDatabase) -> Vec<(SyntaxNode, Problem)> {\n+        self.module_id.problems(&self.tree, db)\n     }\n }\n \n@@ -209,7 +213,7 @@ impl ModuleId {\n             .find(|it| it.name == name)?;\n         Some(*link.points_to.first()?)\n     }\n-    pub(crate) fn problems(\n+    fn problems(\n         self,\n         tree: &ModuleTree,\n         db: &impl SyntaxDatabase,"}, {"sha": "61296215c8fc4b42579bac1391c179853106b932", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300fb68e25ea0cbf2cfba38968a40674cd4c805/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=a300fb68e25ea0cbf2cfba38968a40674cd4c805", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     db::{self, FileSyntaxQuery, SyntaxDatabase},\n     descriptors::{\n         function::{FnDescriptor, FnId},\n-        module::{ModuleDescriptor, ModuleSource, ModuleTree, Problem},\n+        module::{ModuleDescriptor, Problem},\n         DeclarationDescriptor, DescriptorDatabase,\n     },\n     input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n@@ -216,10 +216,6 @@ impl AnalysisImpl {\n             .sweep(salsa::SweepStrategy::default().discard_values());\n         Ok(query.search(&buf))\n     }\n-    fn module_tree(&self, file_id: FileId) -> Cancelable<Arc<ModuleTree>> {\n-        let source_root = self.db.file_source_root(file_id);\n-        self.db.module_tree(source_root)\n-    }\n     /// This return `Vec`: a module may be inclucded from several places.\n     /// We don't handle this case yet though, so the Vec has length at most one.\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n@@ -354,7 +350,6 @@ impl AnalysisImpl {\n     }\n \n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        let module_tree = self.module_tree(file_id)?;\n         let syntax = self.db.file_syntax(file_id);\n \n         let mut res = ra_editor::diagnostics(&syntax)\n@@ -365,8 +360,8 @@ impl AnalysisImpl {\n                 fix: None,\n             })\n             .collect::<Vec<_>>();\n-        if let Some(m) = module_tree.any_module_for_source(ModuleSource::SourceFile(file_id)) {\n-            for (name_node, problem) in m.problems(&module_tree, &*self.db) {\n+        if let Some(m) = ModuleDescriptor::guess_from_file_id(&*self.db, file_id)? {\n+            for (name_node, problem) in m.problems(&*self.db) {\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {\n                         let create_file = FileSystemEdit::CreateFile {"}]}