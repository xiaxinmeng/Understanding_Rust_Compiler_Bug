{"sha": "338823f73aefbf7957b928ad76fc5f55cc43df9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzODgyM2Y3M2FlZmJmNzk1N2I5MjhhZDc2ZmM1ZjU1Y2M0M2RmOWM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-23T16:56:16Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-23T16:56:16Z"}, "message": "is_visible_from_def_map: handle block expressions", "tree": {"sha": "94c3b47b3c8c3bdeb7b52c81825907a33134b67d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c3b47b3c8c3bdeb7b52c81825907a33134b67d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/338823f73aefbf7957b928ad76fc5f55cc43df9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/338823f73aefbf7957b928ad76fc5f55cc43df9c", "html_url": "https://github.com/rust-lang/rust/commit/338823f73aefbf7957b928ad76fc5f55cc43df9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/338823f73aefbf7957b928ad76fc5f55cc43df9c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf456d72dbdc44dfde9b79b632ee952ea161d5c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf456d72dbdc44dfde9b79b632ee952ea161d5c4", "html_url": "https://github.com/rust-lang/rust/commit/cf456d72dbdc44dfde9b79b632ee952ea161d5c4"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "f92232eb32d2ee7b240e3255a9e4787ba8fad65a", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/338823f73aefbf7957b928ad76fc5f55cc43df9c/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338823f73aefbf7957b928ad76fc5f55cc43df9c/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=338823f73aefbf7957b928ad76fc5f55cc43df9c", "patch": "@@ -337,6 +337,12 @@ impl DefMap {\n         None\n     }\n \n+    /// If this `DefMap` is for a block expression, returns the module containing the block (which\n+    /// might again be a block, or a module inside a block).\n+    pub fn parent(&self) -> Option<ModuleId> {\n+        Some(self.block?.parent)\n+    }\n+\n     // FIXME: this can use some more human-readable format (ideally, an IR\n     // even), as this should be a great debugging aid.\n     pub fn dump(&self, db: &dyn DefDatabase) -> String {"}, {"sha": "9996a08072149f0f3b03779d79810eb927f76cd0", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/338823f73aefbf7957b928ad76fc5f55cc43df9c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338823f73aefbf7957b928ad76fc5f55cc43df9c/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=338823f73aefbf7957b928ad76fc5f55cc43df9c", "patch": "@@ -608,7 +608,7 @@ impl DefCollector<'_> {\n                                 (\n                                     n,\n                                     res.filter_visibility(|v| {\n-                                        v.is_visible_from_def_map(&self.def_map, module_id)\n+                                        v.is_visible_from_def_map(self.db, &self.def_map, module_id)\n                                     }),\n                                 )\n                             })\n@@ -761,7 +761,7 @@ impl DefCollector<'_> {\n             .filter(|(glob_importing_module, _)| {\n                 // we know all resolutions have the same visibility (`vis`), so we\n                 // just need to check that once\n-                vis.is_visible_from_def_map(&self.def_map, *glob_importing_module)\n+                vis.is_visible_from_def_map(self.db, &self.def_map, *glob_importing_module)\n             })\n             .cloned()\n             .collect::<Vec<_>>();"}, {"sha": "0e39519100f8b7c725a822c6c9c3b36145337448", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/338823f73aefbf7957b928ad76fc5f55cc43df9c/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338823f73aefbf7957b928ad76fc5f55cc43df9c/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=338823f73aefbf7957b928ad76fc5f55cc43df9c", "patch": "@@ -103,7 +103,7 @@ impl Visibility {\n             return false;\n         }\n         let def_map = from_module.def_map(db);\n-        self.is_visible_from_def_map(&def_map, from_module.local_id)\n+        self.is_visible_from_def_map(db, &def_map, from_module.local_id)\n     }\n \n     pub(crate) fn is_visible_from_other_crate(self) -> bool {\n@@ -115,19 +115,41 @@ impl Visibility {\n \n     pub(crate) fn is_visible_from_def_map(\n         self,\n+        db: &dyn DefDatabase,\n         def_map: &DefMap,\n-        from_module: crate::LocalModuleId,\n+        mut from_module: crate::LocalModuleId,\n     ) -> bool {\n         let to_module = match self {\n             Visibility::Module(m) => m,\n             Visibility::Public => return true,\n         };\n+\n         // from_module needs to be a descendant of to_module\n-        let mut ancestors = std::iter::successors(Some(from_module), |m| {\n-            let parent_id = def_map[*m].parent?;\n-            Some(parent_id)\n-        });\n-        ancestors.any(|m| m == to_module.local_id)\n+        let mut def_map = def_map;\n+        let mut parent_arc;\n+        loop {\n+            if def_map.module_id(from_module) == to_module {\n+                return true;\n+            }\n+            match def_map[from_module].parent {\n+                Some(parent) => {\n+                    from_module = parent;\n+                }\n+                None => {\n+                    match def_map.parent() {\n+                        Some(module) => {\n+                            parent_arc = module.def_map(db);\n+                            def_map = &*parent_arc;\n+                            from_module = module.local_id;\n+                        }\n+                        None => {\n+                            // Reached the root module, nothing left to check.\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     /// Returns the most permissive visibility of `self` and `other`."}]}