{"sha": "85d19b33357897c51d80727a4208f46b19c5c5a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZDE5YjMzMzU3ODk3YzUxZDgwNzI3YTQyMDhmNDZiMTljNWM1YTY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-12T19:57:58Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-13T06:32:19Z"}, "message": "Improve pretty printing `$crate::` paths.", "tree": {"sha": "c3c0b50266bd6542dc8f2beb7d0b4dd527bf0c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c0b50266bd6542dc8f2beb7d0b4dd527bf0c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d19b33357897c51d80727a4208f46b19c5c5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d19b33357897c51d80727a4208f46b19c5c5a6", "html_url": "https://github.com/rust-lang/rust/commit/85d19b33357897c51d80727a4208f46b19c5c5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d19b33357897c51d80727a4208f46b19c5c5a6/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f79c7e442d74d6ac1649d52717001f345baabaae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79c7e442d74d6ac1649d52717001f345baabaae", "html_url": "https://github.com/rust-lang/rust/commit/f79c7e442d74d6ac1649d52717001f345baabaae"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "ce118240429414b048fa02b913140daa165b3dd3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=85d19b33357897c51d80727a4208f46b19c5c5a6", "patch": "@@ -175,7 +175,7 @@ pub fn lower_crate(sess: &Session,\n     let _ignore = dep_graph.in_ignore();\n \n     LoweringContext {\n-        crate_root: std_inject::injected_crate_name(krate),\n+        crate_root: std_inject::injected_crate_name(),\n         sess,\n         cstore,\n         parent_def: None,"}, {"sha": "6ec7f07456a4ae5673a72d6a465e897086d146cb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=85d19b33357897c51d80727a4208f46b19c5c5a6", "patch": "@@ -40,6 +40,7 @@ use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n use syntax::parse::token::{self, Token};\n+use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n use syntax::symbol::Symbol;\n use syntax::visit::{self, Visitor};\n@@ -262,7 +263,7 @@ impl<'a> Resolver<'a> {\n                 let module =\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(module);\n-                if self.injected_crate_name.map_or(false, |name| item.ident.name == name) {\n+                if injected_crate_name().map_or(false, |name| item.ident.name == name) {\n                     self.injected_crate = Some(module);\n                 }\n "}, {"sha": "b114c5734a5c06f809a187659007501e8e9beccf", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=85d19b33357897c51d80727a4208f46b19c5c5a6", "patch": "@@ -58,7 +58,6 @@ use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n use syntax::feature_gate::{feature_err, emit_feature_err, GateIssue};\n-use syntax::std_inject::injected_crate_name;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -1335,7 +1334,6 @@ pub struct Resolver<'a> {\n     // Only used for better errors on `fn(): fn()`\n     current_type_ascription: Vec<Span>,\n \n-    injected_crate_name: Option<&'static str>,\n     injected_crate: Option<Module<'a>>,\n }\n \n@@ -1536,7 +1534,6 @@ impl<'a> Resolver<'a> {\n             found_unresolved_macro: false,\n             unused_macros: FxHashSet(),\n             current_type_ascription: Vec::new(),\n-            injected_crate_name: injected_crate_name(krate),\n             injected_crate: None,\n         }\n     }"}, {"sha": "f6b2a8dd8611ef334ba51a94a0b94fde4eeb8974", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=85d19b33357897c51d80727a4208f46b19c5c5a6", "patch": "@@ -25,7 +25,7 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Annotatable, Determinacy, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroKind, SyntaxExtension, Resolver as SyntaxResolver};\n use syntax::ext::expand::{Expansion, ExpansionKind, Invocation, InvocationKind, find_attr_invoc};\n-use syntax::ext::hygiene::Mark;\n+use syntax::ext::hygiene::{Mark, MarkKind};\n use syntax::ext::placeholders::placeholder;\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{self, emit_feature_err, GateIssue};\n@@ -297,16 +297,19 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { attr: None, .. } => return Ok(None),\n             _ => self.resolve_invoc_to_def(invoc, scope, force)?,\n         };\n+        let def_id = def.def_id();\n \n-        self.macro_defs.insert(invoc.expansion_data.mark, def.def_id());\n+        self.macro_defs.insert(invoc.expansion_data.mark, def_id);\n         let normal_module_def_id =\n             self.macro_def_scope(invoc.expansion_data.mark).normal_ancestor_id;\n         self.definitions.add_macro_def_scope(invoc.expansion_data.mark, normal_module_def_id);\n \n-        self.unused_macros.remove(&def.def_id());\n+        self.unused_macros.remove(&def_id);\n         let ext = self.get_macro(def);\n         if ext.is_modern() {\n-            invoc.expansion_data.mark.set_modern();\n+            invoc.expansion_data.mark.set_kind(MarkKind::Modern);\n+        } else if def_id.krate == BUILTIN_MACROS_CRATE {\n+            invoc.expansion_data.mark.set_kind(MarkKind::Builtin);\n         }\n         Ok(Some(ext))\n     }"}, {"sha": "17f37d0f2c0ee7e54d6a2af2e29c54f6b693d945", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=85d19b33357897c51d80727a4208f46b19c5c5a6", "patch": "@@ -18,6 +18,7 @@ use util::parser::{self, AssocOp, Fixity};\n use attr;\n use codemap::{self, CodeMap};\n use syntax_pos::{self, BytePos};\n+use syntax_pos::hygiene::{Mark, MarkKind, SyntaxContext};\n use parse::token::{self, BinOpToken, Token};\n use parse::lexer::comments;\n use parse::{self, ParseSess};\n@@ -93,7 +94,7 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                        is_expanded: bool) -> io::Result<()> {\n     let mut s = State::new_from_input(cm, sess, filename, input, out, ann, is_expanded);\n \n-    if is_expanded && !std_inject::injected_crate_name(krate).is_none() {\n+    if is_expanded && !std_inject::injected_crate_name().is_none() {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However we don't want these attributes in the AST because\n@@ -734,6 +735,8 @@ pub trait PrintState<'a> {\n                     if segment.identifier.name != keywords::CrateRoot.name() &&\n                        segment.identifier.name != keywords::DollarCrate.name() {\n                         self.writer().word(&segment.identifier.name.as_str())?;\n+                    } else if segment.identifier.name == keywords::DollarCrate.name() {\n+                        self.print_dollar_crate(segment.identifier.ctxt)?;\n                     }\n                 }\n                 self.writer().space()?;\n@@ -822,6 +825,19 @@ pub trait PrintState<'a> {\n     }\n \n     fn nbsp(&mut self) -> io::Result<()> { self.writer().word(\" \") }\n+\n+    fn print_dollar_crate(&mut self, mut ctxt: SyntaxContext) -> io::Result<()> {\n+        if let Some(mark) = ctxt.adjust(Mark::root()) {\n+            // Make a best effort to print something that complies\n+            if mark.kind() == MarkKind::Builtin {\n+                if let Some(name) = std_inject::injected_crate_name() {\n+                    self.writer().word(\"::\")?;\n+                    self.writer().word(name)?;\n+                }\n+            }\n+        }\n+        Ok(())\n+    }\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n@@ -2411,6 +2427,8 @@ impl<'a> State<'a> {\n             if let Some(ref parameters) = segment.parameters {\n                 self.print_path_parameters(parameters, colons_before_params)?;\n             }\n+        } else if segment.identifier.name == keywords::DollarCrate.name() {\n+            self.print_dollar_crate(segment.identifier.ctxt)?;\n         }\n         Ok(())\n     }"}, {"sha": "00546400bb54265d557a31b8b0a2458663c26a90", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d19b33357897c51d80727a4208f46b19c5c5a6/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=85d19b33357897c51d80727a4208f46b19c5c5a6", "patch": "@@ -10,6 +10,7 @@\n \n use ast;\n use attr;\n+use std::cell::Cell;\n use ext::hygiene::{Mark, SyntaxContext};\n use symbol::{Symbol, keywords};\n use syntax_pos::{DUMMY_SP, Span};\n@@ -34,22 +35,25 @@ fn ignored_span(sp: Span) -> Span {\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n }\n \n-pub fn injected_crate_name(krate: &ast::Crate) -> Option<&'static str> {\n-    if attr::contains_name(&krate.attrs, \"no_core\") {\n-        None\n-    } else if attr::contains_name(&krate.attrs, \"no_std\") {\n-        Some(\"core\")\n-    } else {\n-        Some(\"std\")\n-    }\n+pub fn injected_crate_name() -> Option<&'static str> {\n+    INJECTED_CRATE_NAME.with(|name| name.get())\n+}\n+\n+thread_local! {\n+    static INJECTED_CRATE_NAME: Cell<Option<&'static str>> = Cell::new(None);\n }\n \n pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<String>) -> ast::Crate {\n-    let name = match injected_crate_name(&krate) {\n-        Some(name) => name,\n-        None => return krate,\n+    let name = if attr::contains_name(&krate.attrs, \"no_core\") {\n+        return krate;\n+    } else if attr::contains_name(&krate.attrs, \"no_std\") {\n+        \"core\"\n+    } else {\n+        \"std\"\n     };\n \n+    INJECTED_CRATE_NAME.with(|opt_name| opt_name.set(Some(name)));\n+\n     let crate_name = Symbol::intern(&alt_std_name.unwrap_or_else(|| name.to_string()));\n \n     krate.module.items.insert(0, P(ast::Item {"}]}