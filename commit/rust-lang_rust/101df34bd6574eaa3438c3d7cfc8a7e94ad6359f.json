{"sha": "101df34bd6574eaa3438c3d7cfc8a7e94ad6359f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMWRmMzRiZDY1NzRlYWEzNDM4YzNkN2NmYzhhN2U5NGFkNjM1OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-21T21:25:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-21T21:25:46Z"}, "message": "Auto merge of #1424 - RalfJung:dlsym, r=RalfJung\n\nprepare Dlsym system for dynamic symbols on Windows\n\nThis makes progress towards https://github.com/rust-lang/miri/issues/1059.", "tree": {"sha": "1e19495e87e94d0268e8e101267f611a63229fc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e19495e87e94d0268e8e101267f611a63229fc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f", "html_url": "https://github.com/rust-lang/rust/commit/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2423d32037eff58157967186e268659ad2c97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2423d32037eff58157967186e268659ad2c97f", "html_url": "https://github.com/rust-lang/rust/commit/5d2423d32037eff58157967186e268659ad2c97f"}, {"sha": "402535ef8639b4ba42ad4c1be7ff50542f8104d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/402535ef8639b4ba42ad4c1be7ff50542f8104d1", "html_url": "https://github.com/rust-lang/rust/commit/402535ef8639b4ba42ad4c1be7ff50542f8104d1"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "87c7f447ac03cff3580f09b951110cb2a86625d4", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=101df34bd6574eaa3438c3d7cfc8a7e94ad6359f", "patch": "@@ -11,12 +11,25 @@ pub enum Dlsym {\n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n-    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n+    pub fn from_str(name: &[u8], target_os: &str) -> InterpResult<'static, Option<Dlsym>> {\n         use self::Dlsym::*;\n-        Ok(match name {\n-            \"getentropy\" => Some(GetEntropy),\n-            \"__pthread_get_minstack\" => None,\n-            _ => throw_unsup_format!(\"unsupported dlsym: {}\", name),\n+        let name = String::from_utf8_lossy(name);\n+        Ok(match target_os {\n+            \"linux\" => match &*name {\n+                \"__pthread_get_minstack\" => None,\n+                _ => throw_unsup_format!(\"unsupported Linux dlsym: {}\", name),\n+            }\n+            \"macos\" => match &*name {\n+                \"getentropy\" => Some(GetEntropy),\n+                _ => throw_unsup_format!(\"unsupported macOS dlsym: {}\", name),\n+            }\n+            \"windows\" => match &*name {\n+                \"SetThreadStackGuarantee\" => None,\n+                \"AcquireSRWLockExclusive\" => None,\n+                \"GetSystemTimePreciseAsFileTime\" => None,\n+                _ => throw_unsup_format!(\"unsupported Windows dlsym: {}\", name),\n+            }\n+            os => bug!(\"dlsym not implemented for target_os {}\", os),\n         })\n     }\n }"}, {"sha": "39b00feec1943042c1518952708762bbe77081de", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=101df34bd6574eaa3438c3d7cfc8a7e94ad6359f", "patch": "@@ -173,9 +173,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.read_scalar(handle)?.not_undef()?;\n                 let symbol = this.read_scalar(symbol)?.not_undef()?;\n                 let symbol_name = this.memory.read_c_str(symbol)?;\n-                let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n-                let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n-                if let Some(dlsym) = Dlsym::from_str(symbol_name)? {\n+                if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.target.target_os)? {\n                     let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n                     this.write_scalar(Scalar::from(ptr), dest)?;\n                 } else {"}, {"sha": "60448406a67de829817b640e9b146bca504e258e", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101df34bd6574eaa3438c3d7cfc8a7e94ad6359f/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=101df34bd6574eaa3438c3d7cfc8a7e94ad6359f", "patch": "@@ -206,6 +206,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n+            // Dynamic symbol loading\n+            \"GetProcAddress\" => {\n+                #[allow(non_snake_case)]\n+                let &[hModule, lpProcName] = check_arg_count(args)?;\n+                this.read_scalar(hModule)?.not_undef()?;\n+                let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.not_undef()?)?;\n+                if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.target.target_os)? {\n+                    let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n+                    this.write_scalar(Scalar::from(ptr), dest)?;\n+                } else {\n+                    this.write_null(dest)?;\n+                }\n+            }\n+\n             // Miscellaneous\n             \"SystemFunction036\" => {\n                 // The actual name of 'RtlGenRandom'\n@@ -258,12 +272,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Pretend this does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n-            \"GetProcAddress\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n-                #[allow(non_snake_case)]\n-                let &[_hModule, _lpProcName] = check_arg_count(args)?;\n-                // Pretend this does not exist / nothing happened, by returning zero.\n-                this.write_null(dest)?;\n-            }\n             \"SetConsoleTextAttribute\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_hConsoleOutput, _wAttribute] = check_arg_count(args)?;"}]}