{"sha": "05b5046633e9f594f955e0365a1219d1a96a5b54", "node_id": "C_kwDOAAsO6NoAKDA1YjUwNDY2MzNlOWY1OTRmOTU1ZTAzNjVhMTIxOWQxYTk2YTViNTQ", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-17T09:27:17Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-03-20T07:54:41Z"}, "message": "feat: implement error recovery in `expected_ident_found`", "tree": {"sha": "adca09f0abc3e411c6f0d4d1bc887780394a9beb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adca09f0abc3e411c6f0d4d1bc887780394a9beb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b5046633e9f594f955e0365a1219d1a96a5b54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQYEUEACgkQZ6vxb7Ds\n2HAgLBAAqJX4B0kZ3Tx7AD35V9m66UFuhc5DP7jxwtng35j/nA0FGOkf0hvT5QjK\ncSKvbbuKWu7AoqLEYkrjnz7eHv02SaOBHmsfJU27d/r+FA+e70FsvjTmydVXqdZa\nzkDpCdsPnALizXLL1X63dBJoSYMnb/Q6QG8cnu29EdzsrPFdCM0OlscZBgAIxJ/x\nrWdl8UUoKPrJO/GXEaoXUJBY7Cm/EptsDXAhKVqj88XlRL9ahPIWa5qLIv/UTHLr\n59TXaMbmWmuTk86D+NEVf+17mIaDbgSaKY/sJnhHCbb+vIHBOzDHNdANF2hck56m\nheUfbbav2Yvm/v7dbgqxW2FtqDzP3FAD9XF845vJ3lCUhIXe+4312vzu+cJJhQuA\n8pnvng61NU06VSzqAxc/WX8ftgRFEruEdcmfS2ObNFygexQwUzB+nsm2VeLrN7h+\n+kkJ3/93qao79RKA8+rjwgBGG63wvgOC1pPym6a4tHyKdn01TJZiYXARWDEhQDUp\nSoxnIBAsXtrsck0QPmv1QXfrzwleVhMOghmJbCHYS+zwDt8lOWgTDN28bt6mnNO0\nXmEXt0yLTCgw6ilGlNl73mZeqlngp2hc9MIqB1g6ym36OzUrdwNfM4ppkpxOnGIh\nnWGLmXMZMHBPKcQnm8zlWjJ7YPNCYs92KWH2A2Kr1f6AQ0fr5Kg=\n=US4k\n-----END PGP SIGNATURE-----", "payload": "tree adca09f0abc3e411c6f0d4d1bc887780394a9beb\nparent b4e17a5098f0413b01c90c8505e0f01e8bea50de\nauthor Ezra Shaw <ezrasure@outlook.com> 1679045237 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1679298881 +1300\n\nfeat: implement error recovery in `expected_ident_found`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b5046633e9f594f955e0365a1219d1a96a5b54", "html_url": "https://github.com/rust-lang/rust/commit/05b5046633e9f594f955e0365a1219d1a96a5b54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b5046633e9f594f955e0365a1219d1a96a5b54/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4e17a5098f0413b01c90c8505e0f01e8bea50de", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e17a5098f0413b01c90c8505e0f01e8bea50de", "html_url": "https://github.com/rust-lang/rust/commit/b4e17a5098f0413b01c90c8505e0f01e8bea50de"}], "stats": {"total": 244, "additions": 175, "deletions": 69}, "files": [{"sha": "9544afd3d6df941e23e8c52f6671de6b2bec7cca", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 58, "deletions": 26, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -269,13 +269,18 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Emits an error with suggestions if an identifier was expected but not found.\n-    pub(super) fn expected_ident_found(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    ///\n+    /// Returns a possibly recovered identifier.\n+    pub(super) fn expected_ident_found(\n+        &mut self,\n+        recover: bool,\n+    ) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n         if let TokenKind::DocComment(..) = self.prev_token.kind {\n-            return DocCommentDoesNotDocumentAnything {\n+            return Err(DocCommentDoesNotDocumentAnything {\n                 span: self.prev_token.span,\n                 missing_comma: None,\n             }\n-            .into_diagnostic(&self.sess.span_diagnostic);\n+            .into_diagnostic(&self.sess.span_diagnostic));\n         }\n \n         let valid_follow = &[\n@@ -290,34 +295,51 @@ impl<'a> Parser<'a> {\n             TokenKind::CloseDelim(Delimiter::Parenthesis),\n         ];\n \n-        let suggest_raw = match self.token.ident() {\n-            Some((ident, false))\n-                if ident.is_raw_guess()\n-                    && self.look_ahead(1, |t| valid_follow.contains(&t.kind)) =>\n-            {\n-                Some(SuggEscapeIdentifier {\n-                    span: ident.span.shrink_to_lo(),\n-                    // `Symbol::to_string()` is different from `Symbol::into_diagnostic_arg()`,\n-                    // which uses `Symbol::to_ident_string()` and \"helpfully\" adds an implicit `r#`\n-                    ident_name: ident.name.to_string(),\n-                })\n-            }\n-            _ => None,\n-        };\n+        let mut recovered_ident = None;\n+        // we take this here so that the correct original token is retained in\n+        // the diagnostic, regardless of eager recovery.\n+        let bad_token = self.token.clone();\n+\n+        // suggest prepending a keyword in identifier position with `r#`\n+        let suggest_raw = if let Some((ident, false)) = self.token.ident()\n+            && ident.is_raw_guess()\n+            && self.look_ahead(1, |t| valid_follow.contains(&t.kind))\n+        {\n+            recovered_ident = Some((ident, true));\n+\n+            // `Symbol::to_string()` is different from `Symbol::into_diagnostic_arg()`,\n+            // which uses `Symbol::to_ident_string()` and \"helpfully\" adds an implicit `r#`\n+            let ident_name = ident.name.to_string();\n+\n+            Some(SuggEscapeIdentifier {\n+                span: ident.span.shrink_to_lo(),\n+                ident_name\n+            })\n+        } else { None };\n+\n+        let suggest_remove_comma =\n+            if self.token == token::Comma && self.look_ahead(1, |t| t.is_ident()) {\n+                if recover {\n+                    self.bump();\n+                    recovered_ident = self.ident_or_err(false).ok();\n+                };\n+\n+                Some(SuggRemoveComma { span: bad_token.span })\n+            } else {\n+                None\n+            };\n \n-        let suggest_remove_comma = (self.token == token::Comma\n-            && self.look_ahead(1, |t| t.is_ident()))\n-        .then_some(SuggRemoveComma { span: self.token.span });\n+        let help_cannot_start_number = self.is_lit_bad_ident().map(|(len, valid_portion)| {\n+            let (invalid, valid) = self.token.span.split_at(len as u32);\n \n-        let help_cannot_start_number = self.is_lit_bad_ident().map(|(len, _valid_portion)| {\n-            let (invalid, _valid) = self.token.span.split_at(len as u32);\n+            recovered_ident = Some((Ident::new(valid_portion, valid), false));\n \n             HelpIdentifierStartsWithNumber { num_span: invalid }\n         });\n \n         let err = ExpectedIdentifier {\n-            span: self.token.span,\n-            token: self.token.clone(),\n+            span: bad_token.span,\n+            token: bad_token,\n             suggest_raw,\n             suggest_remove_comma,\n             help_cannot_start_number,\n@@ -326,6 +348,7 @@ impl<'a> Parser<'a> {\n \n         // if the token we have is a `<`\n         // it *might* be a misplaced generic\n+        // FIXME: could we recover with this?\n         if self.token == token::Lt {\n             // all keywords that could have generic applied\n             let valid_prev_keywords =\n@@ -376,7 +399,16 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        err\n+        if let Some(recovered_ident) = recovered_ident && recover {\n+            err.emit();\n+            Ok(recovered_ident)\n+        } else {\n+            Err(err)\n+        }\n+    }\n+\n+    pub(super) fn expected_ident_found_err(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        self.expected_ident_found(false).unwrap_err()\n     }\n \n     /// Checks if the current token is a integer or float literal and looks like\n@@ -392,7 +424,7 @@ impl<'a> Parser<'a> {\n             kind: token::LitKind::Integer | token::LitKind::Float,\n             symbol,\n             suffix,\n-        }) = self.token.uninterpolate().kind\n+        }) = self.token.kind\n             && rustc_ast::MetaItemLit::from_token(&self.token).is_none()\n         {\n             Some((symbol.as_str().len(), suffix.unwrap()))"}, {"sha": "ae8fe90e9d6116bddbc9328bdf8b0194fd3c1c94", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -1181,7 +1181,7 @@ impl<'a> Parser<'a> {\n         defaultness: Defaultness,\n     ) -> PResult<'a, ItemInfo> {\n         let impl_span = self.token.span;\n-        let mut err = self.expected_ident_found();\n+        let mut err = self.expected_ident_found_err();\n \n         // Only try to recover if this is implementing a trait for a type\n         let mut impl_info = match self.parse_item_impl(attrs, defaultness) {\n@@ -1776,7 +1776,7 @@ impl<'a> Parser<'a> {\n                     Err(err) => {\n                         err.cancel();\n                         self.restore_snapshot(snapshot);\n-                        self.expected_ident_found()\n+                        self.expected_ident_found_err()\n                     }\n                 }\n             } else if self.eat_keyword(kw::Struct) {\n@@ -1792,11 +1792,11 @@ impl<'a> Parser<'a> {\n                     Err(err) => {\n                         err.cancel();\n                         self.restore_snapshot(snapshot);\n-                        self.expected_ident_found()\n+                        self.expected_ident_found_err()\n                     }\n                 }\n             } else {\n-                let mut err = self.expected_ident_found();\n+                let mut err = self.expected_ident_found_err();\n                 if self.eat_keyword_noexpect(kw::Let)\n                     && let removal_span = self.prev_token.span.until(self.token.span)\n                     && let Ok(ident) = self.parse_ident_common(false)"}, {"sha": "53c25a80c4bf32752ce306607e3577ac8fd22b6a", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -553,8 +553,9 @@ impl<'a> Parser<'a> {\n \n     fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {\n         let (ident, is_raw) = self.ident_or_err(recover)?;\n+\n         if !is_raw && ident.is_reserved() {\n-            let mut err = self.expected_ident_found();\n+            let mut err = self.expected_ident_found_err();\n             if recover {\n                 err.emit();\n             } else {\n@@ -565,12 +566,16 @@ impl<'a> Parser<'a> {\n         Ok(ident)\n     }\n \n-    fn ident_or_err(&mut self, _recover: bool) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n-        let result = self.token.ident().ok_or_else(|| self.expected_ident_found());\n+    fn ident_or_err(&mut self, recover: bool) -> PResult<'a, (Ident, /* is_raw */ bool)> {\n+        let result = self.token.ident().ok_or_else(|| self.expected_ident_found(recover));\n \n         let (ident, is_raw) = match result {\n             Ok(ident) => ident,\n-            Err(err) => return Err(err),\n+            Err(err) => match err {\n+                // we recovered!\n+                Ok(ident) => ident,\n+                Err(err) => return Err(err),\n+            },\n         };\n \n         Ok((ident, is_raw))"}, {"sha": "2246002f5d32a432ce891c64b438c1370bcdf9f2", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -391,7 +391,13 @@ impl<'a> Parser<'a> {\n             } else {\n                 PatKind::Lit(const_expr)\n             }\n-        } else if self.can_be_ident_pat() || self.is_lit_bad_ident().is_some() {\n+        // Don't eagerly error on semantically invalid tokens when matching\n+        // declarative macros, as the input to those doesn't have to be\n+        // semantically valid. For attribute/derive proc macros this is not the\n+        // case, so doing the recovery for them is fine.\n+        } else if self.can_be_ident_pat()\n+            || (self.is_lit_bad_ident().is_some() && self.may_recover())\n+        {\n             // Parse `ident @ pat`\n             // This can give false positives and parse nullary enums,\n             // they are dealt with later in resolve.\n@@ -590,7 +596,7 @@ impl<'a> Parser<'a> {\n         // Make sure we don't allow e.g. `let mut $p;` where `$p:pat`.\n         if let token::Interpolated(nt) = &self.token.kind {\n             if let token::NtPat(_) = **nt {\n-                self.expected_ident_found().emit();\n+                self.expected_ident_found_err().emit();\n             }\n         }\n "}, {"sha": "7575372b940fdfa7cb85b674dc45ca7affe11137", "filename": "tests/ui/parser/ident-recovery.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fident-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fident-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fident-recovery.rs?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -0,0 +1,16 @@\n+fn ,comma() {\n+    //~^ ERROR expected identifier, found `,`\n+    struct Foo {\n+        x: i32,,\n+        //~^ ERROR expected identifier, found `,`\n+        y: u32,\n+    }\n+}\n+\n+fn break() {\n+//~^ ERROR expected identifier, found keyword `break`\n+    let continue = 5;\n+    //~^ ERROR expected identifier, found keyword `continue`\n+}\n+\n+fn main() {}"}, {"sha": "e9a55026d12450ffd7feb846d29db272058710d1", "filename": "tests/ui/parser/ident-recovery.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fident-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fident-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fident-recovery.stderr?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -0,0 +1,42 @@\n+error: expected identifier, found `,`\n+  --> $DIR/ident-recovery.rs:1:4\n+   |\n+LL | fn ,comma() {\n+   |    ^\n+   |    |\n+   |    expected identifier\n+   |    help: remove this comma\n+\n+error: expected identifier, found `,`\n+  --> $DIR/ident-recovery.rs:4:16\n+   |\n+LL |         x: i32,,\n+   |                ^\n+   |                |\n+   |                expected identifier\n+   |                help: remove this comma\n+\n+error: expected identifier, found keyword `break`\n+  --> $DIR/ident-recovery.rs:10:4\n+   |\n+LL | fn break() {\n+   |    ^^^^^ expected identifier, found keyword\n+   |\n+help: escape `break` to use it as an identifier\n+   |\n+LL | fn r#break() {\n+   |    ++\n+\n+error: expected identifier, found keyword `continue`\n+  --> $DIR/ident-recovery.rs:12:9\n+   |\n+LL |     let continue = 5;\n+   |         ^^^^^^^^ expected identifier, found keyword\n+   |\n+help: escape `continue` to use it as an identifier\n+   |\n+LL |     let r#continue = 5;\n+   |         ++\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "3dc636b6a33bd5db95805b44a321838b934f6f75", "filename": "tests/ui/parser/issues/issue-104088.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.rs?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -1,26 +1,19 @@\n-fn test() {\n+fn 1234test() {\n+//~^ ERROR expected identifier, found `1234test`\n     if let 123 = 123 { println!(\"yes\"); }\n-}\n-\n-fn test_2() {\n-    let 1x = 123;\n-    //~^ ERROR expected identifier, found `1x`\n-}\n-\n-fn test_3() {\n-    let 2x: i32 = 123;\n-    //~^ ERROR expected identifier, found `2x`\n-}\n \n-fn test_4() {\n     if let 2e1 = 123 {\n         //~^ ERROR mismatched types\n     }\n-}\n \n-fn test_5() {\n     let 23name = 123;\n     //~^ ERROR expected identifier, found `23name`\n+\n+    let 2x: i32 = 123;\n+    //~^ ERROR expected identifier, found `2x`\n+\n+    let 1x = 123;\n+    //~^ ERROR expected identifier, found `1x`\n }\n \n fn main() {}"}, {"sha": "8b751759d69a667314fef024e0be03a1356b5198", "filename": "tests/ui/parser/issues/issue-104088.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05b5046633e9f594f955e0365a1219d1a96a5b54/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr?ref=05b5046633e9f594f955e0365a1219d1a96a5b54", "patch": "@@ -1,47 +1,59 @@\n-error: expected identifier, found `1x`\n-  --> $DIR/issue-104088.rs:6:9\n+error: expected identifier, found `1234test`\n+  --> $DIR/issue-104088.rs:1:4\n    |\n-LL |     let 1x = 123;\n-   |         ^^ expected identifier\n+LL | fn 1234test() {\n+   |    ^^^^^^^^ expected identifier\n    |\n help: identifiers cannot start with a number\n-  --> $DIR/issue-104088.rs:6:9\n+  --> $DIR/issue-104088.rs:1:4\n    |\n-LL |     let 1x = 123;\n-   |         ^\n+LL | fn 1234test() {\n+   |    ^^^^\n+\n+error: expected identifier, found `23name`\n+  --> $DIR/issue-104088.rs:9:9\n+   |\n+LL |     let 23name = 123;\n+   |         ^^^^^^ expected identifier\n+   |\n+help: identifiers cannot start with a number\n+  --> $DIR/issue-104088.rs:9:9\n+   |\n+LL |     let 23name = 123;\n+   |         ^^\n \n error: expected identifier, found `2x`\n-  --> $DIR/issue-104088.rs:11:9\n+  --> $DIR/issue-104088.rs:12:9\n    |\n LL |     let 2x: i32 = 123;\n    |         ^^ expected identifier\n    |\n help: identifiers cannot start with a number\n-  --> $DIR/issue-104088.rs:11:9\n+  --> $DIR/issue-104088.rs:12:9\n    |\n LL |     let 2x: i32 = 123;\n    |         ^\n \n-error: expected identifier, found `23name`\n-  --> $DIR/issue-104088.rs:22:9\n+error: expected identifier, found `1x`\n+  --> $DIR/issue-104088.rs:15:9\n    |\n-LL |     let 23name = 123;\n-   |         ^^^^^^ expected identifier\n+LL |     let 1x = 123;\n+   |         ^^ expected identifier\n    |\n help: identifiers cannot start with a number\n-  --> $DIR/issue-104088.rs:22:9\n+  --> $DIR/issue-104088.rs:15:9\n    |\n-LL |     let 23name = 123;\n-   |         ^^\n+LL |     let 1x = 123;\n+   |         ^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-104088.rs:16:12\n+  --> $DIR/issue-104088.rs:5:12\n    |\n LL |     if let 2e1 = 123 {\n    |            ^^^   --- this expression has type `{integer}`\n    |            |\n    |            expected integer, found floating-point number\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}