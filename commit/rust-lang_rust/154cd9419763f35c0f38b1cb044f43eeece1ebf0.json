{"sha": "154cd9419763f35c0f38b1cb044f43eeece1ebf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NGNkOTQxOTc2M2YzNWMwZjM4YjFjYjA0NGY0M2VlZWNlMWViZjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T10:11:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:27:50Z"}, "message": "rework region flags: 'static can be erased too\n\nThe existing flags did not consider `'static` to be \"free\". This then\nfed into what was \"erasable\" -- but `'static` is most certainly\nerasable.", "tree": {"sha": "f7f3687c3e04fd68070d0e83facd9c3a8b88fd27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f3687c3e04fd68070d0e83facd9c3a8b88fd27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154cd9419763f35c0f38b1cb044f43eeece1ebf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154cd9419763f35c0f38b1cb044f43eeece1ebf0", "html_url": "https://github.com/rust-lang/rust/commit/154cd9419763f35c0f38b1cb044f43eeece1ebf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154cd9419763f35c0f38b1cb044f43eeece1ebf0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e65250e4dfb22d5e1bc1e637913cbcfc60db13", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e65250e4dfb22d5e1bc1e637913cbcfc60db13", "html_url": "https://github.com/rust-lang/rust/commit/02e65250e4dfb22d5e1bc1e637913cbcfc60db13"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "c5b82730e488c8afea49fdb1344d08e44a93077c", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/154cd9419763f35c0f38b1cb044f43eeece1ebf0/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154cd9419763f35c0f38b1cb044f43eeece1ebf0/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=154cd9419763f35c0f38b1cb044f43eeece1ebf0", "patch": "@@ -97,14 +97,19 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_closure_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n     }\n+    /// \"Free\" regions in this context means that it has any region\n+    /// that is not (a) erased or (b) late-bound.\n+    fn has_free_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n+    }\n+\n+    /// True if there any any un-erased free regions.\n     fn has_erasable_regions(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_EARLY_BOUND |\n-                            TypeFlags::HAS_RE_INFER |\n-                            TypeFlags::HAS_FREE_REGIONS)\n+        self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)\n     }\n+\n     fn is_normalized_for_trans(&self) -> bool {\n-        !self.has_type_flags(TypeFlags::HAS_RE_EARLY_BOUND |\n-                             TypeFlags::HAS_RE_INFER |\n+        !self.has_type_flags(TypeFlags::HAS_RE_INFER |\n                              TypeFlags::HAS_FREE_REGIONS |\n                              TypeFlags::HAS_TY_INFER |\n                              TypeFlags::HAS_PARAMS |"}, {"sha": "9d088b95bbbb592c275aa611932a1b73215cb152", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/154cd9419763f35c0f38b1cb044f43eeece1ebf0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154cd9419763f35c0f38b1cb044f43eeece1ebf0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=154cd9419763f35c0f38b1cb044f43eeece1ebf0", "patch": "@@ -421,8 +421,18 @@ bitflags! {\n         const HAS_TY_INFER       = 1 << 2;\n         const HAS_RE_INFER       = 1 << 3;\n         const HAS_RE_SKOL        = 1 << 4;\n+\n+        /// Does this have any `ReEarlyBound` regions? Used to\n+        /// determine whether substitition is required, since those\n+        /// represent regions that are bound in a `ty::Generics` and\n+        /// hence may be substituted.\n         const HAS_RE_EARLY_BOUND = 1 << 5;\n+\n+        /// Does this have any region that \"appears free\" in the type?\n+        /// Basically anything but `ReLateBound` and `ReErased`.\n         const HAS_FREE_REGIONS   = 1 << 6;\n+\n+        /// Is an error type reachable?\n         const HAS_TY_ERR         = 1 << 7;\n         const HAS_PROJECTION     = 1 << 8;\n "}, {"sha": "2f72b3dde42f1562e8db1fae959260b09ffd7e89", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/154cd9419763f35c0f38b1cb044f43eeece1ebf0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154cd9419763f35c0f38b1cb044f43eeece1ebf0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=154cd9419763f35c0f38b1cb044f43eeece1ebf0", "patch": "@@ -1184,18 +1184,29 @@ impl RegionKind {\n \n         match *self {\n             ty::ReVar(..) => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_INFER;\n                 flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n             }\n             ty::ReSkolemized(..) => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_INFER;\n                 flags = flags | TypeFlags::HAS_RE_SKOL;\n                 flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n             }\n             ty::ReLateBound(..) => { }\n-            ty::ReEarlyBound(..) => { flags = flags | TypeFlags::HAS_RE_EARLY_BOUND; }\n-            ty::ReStatic | ty::ReErased => { }\n-            _ => { flags = flags | TypeFlags::HAS_FREE_REGIONS; }\n+            ty::ReEarlyBound(..) => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+                flags = flags | TypeFlags::HAS_RE_EARLY_BOUND;\n+            }\n+            ty::ReEmpty |\n+            ty::ReStatic |\n+            ty::ReFree { .. } |\n+            ty::ReScope { .. } => {\n+                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n+            }\n+            ty::ReErased => {\n+            }\n         }\n \n         match *self {"}]}