{"sha": "4fe09f282b3f75e95346374434af78bf50ed13b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTA5ZjI4MmIzZjc1ZTk1MzQ2Mzc0NDM0YWY3OGJmNTBlZDEzYjY=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-07T00:03:54Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-04-08T03:47:25Z"}, "message": "fix abuses of tykind::err", "tree": {"sha": "f34a1e3982a116310505e5ce0a1c2052210058cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f34a1e3982a116310505e5ce0a1c2052210058cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe09f282b3f75e95346374434af78bf50ed13b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe09f282b3f75e95346374434af78bf50ed13b6", "html_url": "https://github.com/rust-lang/rust/commit/4fe09f282b3f75e95346374434af78bf50ed13b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe09f282b3f75e95346374434af78bf50ed13b6/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42abbd8878d3b67238f3611b0587c704ba94f39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/42abbd8878d3b67238f3611b0587c704ba94f39c", "html_url": "https://github.com/rust-lang/rust/commit/42abbd8878d3b67238f3611b0587c704ba94f39c"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "9db5c40c8e362df1e74dcd166332b2cae8107ad5", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -29,7 +29,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n \n     assert!(!instance.substs.needs_infer());\n     assert!(!instance.substs.has_escaping_bound_vars());\n-    assert!(!instance.substs.has_param_types());\n+    assert!(!instance.substs.has_param_types_or_consts());\n \n     if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;"}, {"sha": "486ea7f22dfffb1c968607e57fc60682ece68f11", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -47,7 +47,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         visibility: Visibility,\n         symbol_name: &str,\n     ) {\n-        assert!(!instance.substs.needs_infer() && !instance.substs.has_param_types());\n+        assert!(!instance.substs.needs_infer() && !instance.substs.has_param_types_or_consts());\n \n         let fn_abi = FnAbi::of_instance(self, instance, &[]);\n         let lldecl = self.declare_fn(symbol_name, &fn_abi);"}, {"sha": "9989e3fba730e6835846860aa9c5cee8bb143d26", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -84,7 +84,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_ERR)\n     }\n-    fn has_param_types(&self) -> bool {\n+    fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }\n     fn has_infer_types(&self) -> bool {"}, {"sha": "894f9070ce1549ec4bd2f8bf9017b5b59799a96d", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> Instance<'tcx> {\n         // There shouldn't be any params - if there are, then\n         // Instance.ty_env should have been used to provide the proper\n         // ParamEnv\n-        if self.substs.has_param_types() {\n+        if self.substs.has_param_types_or_consts() {\n             bug!(\"Instance.ty called for type {:?} with params in substs: {:?}\", ty, self.substs);\n         }\n         tcx.subst_and_normalize_erasing_regions(self.substs, ty::ParamEnv::reveal_all(), &ty)"}, {"sha": "1bb338d43ad0a4acf076fdbb22783060554443bc", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -1585,7 +1585,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // Ignore layouts that are done with non-empty environments or\n         // non-monomorphic layouts, as the user only wants to see the stuff\n         // resulting from the final codegen session.\n-        if layout.ty.has_param_types() || !self.param_env.caller_bounds.is_empty() {\n+        if layout.ty.has_param_types_or_consts() || !self.param_env.caller_bounds.is_empty() {\n             return;\n         }\n \n@@ -1754,7 +1754,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n                 let tail = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n                 match tail.kind {\n                     ty::Param(_) | ty::Projection(_) => {\n-                        debug_assert!(tail.has_param_types());\n+                        debug_assert!(tail.has_param_types_or_consts());\n                         Ok(SizeSkeleton::Pointer { non_zero, tail: tcx.erase_regions(&tail) })\n                     }\n                     _ => bug!("}, {"sha": "31fc25b18ac031d5f6731804d0dfa3795f0fb395", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -1238,7 +1238,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         if !self.in_body {\n             // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.\n             // The traits' privacy in bodies is already checked as a part of trait object types.\n-            let bounds = rustc_typeck::hir_trait_to_predicates(self.tcx, trait_ref);\n+            let bounds = rustc_typeck::hir_trait_to_predicates(\n+                self.tcx,\n+                trait_ref,\n+                // NOTE: This isn't really right, but the actual type doesn't matter here. It's\n+                // just required by `ty::TraitRef`.\n+                self.tcx.types.trait_object_dummy_self,\n+            );\n \n             for (trait_predicate, _, _) in bounds.trait_bounds {\n                 if self.visit_trait(*trait_predicate.skip_binder()) {"}, {"sha": "e18508eeeb18ea7e3c6b1b4215f678fab56bea92", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -706,13 +706,13 @@ fn check_where_clauses<'tcx, 'fcx>(\n                         return default_ty.into();\n                     }\n                 }\n-                // Mark unwanted params as error.\n-                fcx.tcx.types.err.into()\n+\n+                fcx.tcx.mk_param_from_def(param)\n             }\n \n             GenericParamDefKind::Const => {\n                 // FIXME(const_generics:defaults)\n-                fcx.tcx.consts.err.into()\n+                fcx.tcx.mk_param_from_def(param)\n             }\n         }\n     });\n@@ -750,7 +750,10 @@ fn check_where_clauses<'tcx, 'fcx>(\n             let substituted_pred = pred.subst(fcx.tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n-            if substituted_pred.references_error() || param_count.params.len() > 1 || has_region {\n+            if substituted_pred.has_param_types_or_consts()\n+                || param_count.params.len() > 1\n+                || has_region\n+            {\n                 None\n             } else if predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n                 // Avoid duplication of predicates that contain no parameters, for example."}, {"sha": "69d0b3723b0ad8d251a8bf800b03105c8215a60b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -367,6 +367,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx>, hir_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n pub fn hir_trait_to_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     hir_trait: &hir::TraitRef<'_>,\n+    self_ty: Ty<'tcx>,\n ) -> Bounds<'tcx> {\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in\n@@ -380,7 +381,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n         hir_trait,\n         DUMMY_SP,\n         hir::Constness::NotConst,\n-        tcx.types.err,\n+        self_ty,\n         &mut bounds,\n         true,\n     );"}, {"sha": "9df1311b2b53bb896595751e8345c626eb2abb2e", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe09f282b3f75e95346374434af78bf50ed13b6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=4fe09f282b3f75e95346374434af78bf50ed13b6", "patch": "@@ -315,8 +315,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_region(current, r, contra);\n \n                 if let Some(poly_trait_ref) = data.principal() {\n-                    let poly_trait_ref =\n-                        poly_trait_ref.with_self_ty(self.tcx(), self.tcx().types.err);\n+                    let poly_trait_ref = poly_trait_ref\n+                        .with_self_ty(self.tcx(), self.tcx().types.trait_object_dummy_self);\n                     self.add_constraints_from_trait_ref(\n                         current,\n                         *poly_trait_ref.skip_binder(),"}]}