{"sha": "ce361fb24f0896bf7d983549117cbe1f70f32dcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzYxZmIyNGYwODk2YmY3ZDk4MzU0OTExN2NiZTFmNzBmMzJkY2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-21T06:28:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-21T06:28:33Z"}, "message": "Auto merge of #68267 - estebank:lt-sugg, r=petrochenkov\n\nTweak lifetime definition errors\n\nTaking inspiration from the narrative in @fasterthanlime's https://fasterthanli.me/blog/2019/declarative-memory-management/, add suggestions to some lifetime definition errors.", "tree": {"sha": "35a67664aa7a5bb3fdeb8fa0ed0f173ebec6d733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a67664aa7a5bb3fdeb8fa0ed0f173ebec6d733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce361fb24f0896bf7d983549117cbe1f70f32dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce361fb24f0896bf7d983549117cbe1f70f32dcf", "html_url": "https://github.com/rust-lang/rust/commit/ce361fb24f0896bf7d983549117cbe1f70f32dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce361fb24f0896bf7d983549117cbe1f70f32dcf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c73fa70f390efa88e6b0adc58d2bd72fcc51915", "html_url": "https://github.com/rust-lang/rust/commit/8c73fa70f390efa88e6b0adc58d2bd72fcc51915"}, {"sha": "03d7fed165a350c0b9acfbbaf76feae7014c97d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d7fed165a350c0b9acfbbaf76feae7014c97d1", "html_url": "https://github.com/rust-lang/rust/commit/03d7fed165a350c0b9acfbbaf76feae7014c97d1"}], "stats": {"total": 565, "additions": 485, "deletions": 80}, "files": [{"sha": "77dfe3d9f1d5a5156ab4bec10ce2a5ac66046e15", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -5,8 +5,9 @@ use rustc::bug;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n+use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -1445,3 +1446,74 @@ crate fn show_candidates(\n         }\n     }\n }\n+\n+crate fn report_missing_lifetime_specifiers(\n+    sess: &Session,\n+    span: Span,\n+    count: usize,\n+) -> DiagnosticBuilder<'_> {\n+    struct_span_err!(sess, span, E0106, \"missing lifetime specifier{}\", pluralize!(count))\n+}\n+\n+crate fn add_missing_lifetime_specifiers_label(\n+    err: &mut DiagnosticBuilder<'_>,\n+    span: Span,\n+    count: usize,\n+    lifetime_names: &FxHashSet<ast::Ident>,\n+    snippet: Option<&str>,\n+    missing_named_lifetime_spots: &[&hir::Generics<'_>],\n+) {\n+    if count > 1 {\n+        err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n+    } else {\n+        let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_suggestion(\n+                span,\n+                \"consider using the named lifetime\",\n+                sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_label(span, \"expected named lifetime parameter\");\n+\n+            if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n+                let mut introduce_suggestion = vec![];\n+                introduce_suggestion.push(match &generics.params {\n+                    [] => (generics.span, \"<'lifetime>\".to_string()),\n+                    [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n+                });\n+                introduce_suggestion.push((span, sugg));\n+                err.multipart_suggestion(\n+                    \"consider introducing a named lifetime parameter\",\n+                    introduce_suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        };\n+\n+        match (lifetime_names.len(), lifetime_names.iter().next(), snippet) {\n+            (1, Some(name), Some(\"&\")) => {\n+                suggest_existing(err, format!(\"&{} \", name));\n+            }\n+            (1, Some(name), Some(\"'_\")) => {\n+                suggest_existing(err, name.to_string());\n+            }\n+            (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n+            }\n+            (0, _, Some(\"&\")) => {\n+                suggest_new(err, \"&'lifetime \".to_string());\n+            }\n+            (0, _, Some(\"'_\")) => {\n+                suggest_new(err, \"'lifetime\".to_string());\n+            }\n+            (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                suggest_new(err, format!(\"{}<'lifetime>\", snippet));\n+            }\n+            _ => {\n+                err.span_label(span, \"expected lifetime parameter\");\n+            }\n+        }\n+    }\n+}"}, {"sha": "0e6f40fa8466a219147c425088acb24f3954a960", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -11,6 +11,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]\n+#![cfg_attr(bootstrap, feature(slice_patterns))]\n #![recursion_limit = \"256\"]\n \n pub use rustc_hir::def::{Namespace, PerNS};"}, {"sha": "6e9ed5fdc179cd1928892ff0fde44d671f6ef2c2", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 41, "deletions": 38, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -5,14 +5,16 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n+use crate::diagnostics::{\n+    add_missing_lifetime_specifiers_label, report_missing_lifetime_specifiers,\n+};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n-use rustc::session::Session;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -181,6 +183,10 @@ struct LifetimeContext<'a, 'tcx> {\n     xcrate_object_lifetime_defaults: DefIdMap<Vec<ObjectLifetimeDefault>>,\n \n     lifetime_uses: &'a mut DefIdMap<LifetimeUseSet<'tcx>>,\n+\n+    /// When encountering an undefined named lifetime, we will suggest introducing it in these\n+    /// places.\n+    missing_named_lifetime_spots: Vec<&'tcx hir::Generics<'tcx>>,\n }\n \n #[derive(Debug)]\n@@ -340,6 +346,7 @@ fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {\n             labels_in_fn: vec![],\n             xcrate_object_lifetime_defaults: Default::default(),\n             lifetime_uses: &mut Default::default(),\n+            missing_named_lifetime_spots: vec![],\n         };\n         for (_, item) in &krate.items {\n             visitor.visit_item(item);\n@@ -382,9 +389,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ref generics, _) => {\n+                self.missing_named_lifetime_spots.push(generics);\n                 self.visit_early_late(None, &sig.decl, generics, |this| {\n                     intravisit::walk_item(this, item);\n                 });\n+                self.missing_named_lifetime_spots.pop();\n             }\n \n             hir::ItemKind::ExternCrate(_)\n@@ -415,6 +424,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             | hir::ItemKind::Trait(_, _, ref generics, ..)\n             | hir::ItemKind::TraitAlias(ref generics, ..)\n             | hir::ItemKind::Impl { ref generics, .. } => {\n+                self.missing_named_lifetime_spots.push(generics);\n+\n                 // Impls permit `'_` to be used and it is equivalent to \"some fresh lifetime name\".\n                 // This is not true for other kinds of items.x\n                 let track_lifetime_uses = match item.kind {\n@@ -452,6 +463,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.check_lifetime_params(old_scope, &generics.params);\n                     intravisit::walk_item(this, item);\n                 });\n+                self.missing_named_lifetime_spots.pop();\n             }\n         }\n     }\n@@ -684,6 +696,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         use self::hir::TraitItemKind::*;\n+        self.missing_named_lifetime_spots.push(&trait_item.generics);\n         match trait_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n@@ -735,10 +748,12 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 intravisit::walk_trait_item(self, trait_item);\n             }\n         }\n+        self.missing_named_lifetime_spots.pop();\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         use self::hir::ImplItemKind::*;\n+        self.missing_named_lifetime_spots.push(&impl_item.generics);\n         match impl_item.kind {\n             Method(ref sig, _) => {\n                 let tcx = self.tcx;\n@@ -822,6 +837,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 intravisit::walk_impl_item(self, impl_item);\n             }\n         }\n+        self.missing_named_lifetime_spots.pop();\n     }\n \n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n@@ -1307,6 +1323,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let LifetimeContext { tcx, map, lifetime_uses, .. } = self;\n         let labels_in_fn = take(&mut self.labels_in_fn);\n         let xcrate_object_lifetime_defaults = take(&mut self.xcrate_object_lifetime_defaults);\n+        let missing_named_lifetime_spots = take(&mut self.missing_named_lifetime_spots);\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n             map: map,\n@@ -1315,14 +1332,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             is_in_fn_syntax: self.is_in_fn_syntax,\n             labels_in_fn,\n             xcrate_object_lifetime_defaults,\n-            lifetime_uses: lifetime_uses,\n+            lifetime_uses,\n+            missing_named_lifetime_spots,\n         };\n         debug!(\"entering scope {:?}\", this.scope);\n         f(self.scope, &mut this);\n         this.check_uses_for_lifetimes_defined_by_scope();\n         debug!(\"exiting scope {:?}\", this.scope);\n         self.labels_in_fn = this.labels_in_fn;\n         self.xcrate_object_lifetime_defaults = this.xcrate_object_lifetime_defaults;\n+        self.missing_named_lifetime_spots = this.missing_named_lifetime_spots;\n     }\n \n     /// helper method to determine the span to remove when suggesting the\n@@ -1805,15 +1824,29 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             self.insert_lifetime(lifetime_ref, def);\n         } else {\n-            struct_span_err!(\n+            let mut err = struct_span_err!(\n                 self.tcx.sess,\n                 lifetime_ref.span,\n                 E0261,\n                 \"use of undeclared lifetime name `{}`\",\n                 lifetime_ref\n-            )\n-            .span_label(lifetime_ref.span, \"undeclared lifetime\")\n-            .emit();\n+            );\n+            err.span_label(lifetime_ref.span, \"undeclared lifetime\");\n+            if !self.is_in_fn_syntax {\n+                for generics in &self.missing_named_lifetime_spots {\n+                    let (span, sugg) = match &generics.params {\n+                        [] => (generics.span, format!(\"<{}>\", lifetime_ref)),\n+                        [param, ..] => (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref)),\n+                    };\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"consider introducing lifetime `{}` here\", lifetime_ref),\n+                        sugg,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            err.emit();\n         }\n     }\n \n@@ -2367,6 +2400,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 lifetime_refs.len(),\n                 &lifetime_names,\n                 self.tcx.sess.source_map().span_to_snippet(span).ok().as_ref().map(|s| s.as_str()),\n+                &self.missing_named_lifetime_spots,\n             );\n         }\n \n@@ -2862,34 +2896,3 @@ fn insert_late_bound_lifetimes(\n         }\n     }\n }\n-\n-fn report_missing_lifetime_specifiers(\n-    sess: &Session,\n-    span: Span,\n-    count: usize,\n-) -> DiagnosticBuilder<'_> {\n-    struct_span_err!(sess, span, E0106, \"missing lifetime specifier{}\", pluralize!(count))\n-}\n-\n-fn add_missing_lifetime_specifiers_label(\n-    err: &mut DiagnosticBuilder<'_>,\n-    span: Span,\n-    count: usize,\n-    lifetime_names: &FxHashSet<ast::Ident>,\n-    snippet: Option<&str>,\n-) {\n-    if count > 1 {\n-        err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n-    } else if let (1, Some(name), Some(\"&\")) =\n-        (lifetime_names.len(), lifetime_names.iter().next(), snippet)\n-    {\n-        err.span_suggestion(\n-            span,\n-            \"consider using the named lifetime\",\n-            format!(\"&{} \", name),\n-            Applicability::MaybeIncorrect,\n-        );\n-    } else {\n-        err.span_label(span, \"expected lifetime parameter\");\n-    }\n-}"}, {"sha": "cc3438727a817d7d5ab9edb7d19f4c9fd045ddf0", "filename": "src/test/ui/error-codes/E0106.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -16,7 +16,7 @@ struct Buzz<'a, 'b>(&'a str, &'b str);\n struct Quux {\n     baz: Baz,\n     //~^ ERROR E0106\n-    //~| expected lifetime parameter\n+    //~| expected named lifetime parameter\n     buzz: Buzz,\n     //~^ ERROR E0106\n     //~| expected 2 lifetime parameters"}, {"sha": "e01e0a6f54b0771fffdccc97fda85eabf650e8db", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,25 +2,49 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:2:8\n    |\n LL |     x: &bool,\n-   |        ^ expected lifetime parameter\n+   |        ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: &'lifetime bool,\n+   |\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:7:7\n    |\n LL |     B(&bool),\n-   |       ^ expected lifetime parameter\n+   |       ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | enum Bar<'lifetime> {\n+LL |     A(u8),\n+LL |     B(&'lifetime bool),\n+   |\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:10:14\n    |\n LL | type MyStr = &str;\n-   |              ^ expected lifetime parameter\n+   |              ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | type MyStr<'lifetime> = &'lifetime str;\n+   |           ^^^^^^^^^^^   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:17:10\n    |\n LL |     baz: Baz,\n-   |          ^^^ expected lifetime parameter\n+   |          ^^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct Quux<'lifetime> {\n+LL |     baz: Baz<'lifetime>,\n+   |\n \n error[E0106]: missing lifetime specifiers\n   --> $DIR/E0106.rs:20:11"}, {"sha": "0eab2dc0ee05f891e01f74514c246f58f4e5392b", "filename": "src/test/ui/error-codes/E0261.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0261.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,11 +2,15 @@ error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/E0261.rs:1:12\n    |\n LL | fn foo(x: &'a str) { }\n-   |            ^^ undeclared lifetime\n+   |       -    ^^ undeclared lifetime\n+   |       |\n+   |       help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/E0261.rs:5:9\n    |\n+LL | struct Foo {\n+   |           - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     x: &'a str,\n    |         ^^ undeclared lifetime\n "}, {"sha": "bbf3ea8a89f23f32d3669423c222cc44a50e7f8e", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.stderr", "status": "modified", "additions": 111, "deletions": 7, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,103 +2,207 @@ error[E0261]: use of undeclared lifetime name `'x`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:3:12\n    |\n LL | fn foo(x: &'x u8) -> &'x u8 { x }\n-   |            ^^ undeclared lifetime\n+   |       -    ^^ undeclared lifetime\n+   |       |\n+   |       help: consider introducing lifetime `'x` here: `<'x>`\n \n error[E0261]: use of undeclared lifetime name `'x`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:3:23\n    |\n LL | fn foo(x: &'x u8) -> &'x u8 { x }\n-   |                       ^^ undeclared lifetime\n+   |       -               ^^ undeclared lifetime\n+   |       |\n+   |       help: consider introducing lifetime `'x` here: `<'x>`\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:15:12\n    |\n LL | impl<'a> X<'b> {\n-   |            ^^ undeclared lifetime\n+   |      -     ^^ undeclared lifetime\n+   |      |\n+   |      help: consider introducing lifetime `'b` here: `'b,`\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:17:27\n    |\n LL |     fn inner_2(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b, 'a> X<'b> {\n+   |      ^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn inner_2<'b>(&self) -> &'b u8 {\n+   |               ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:23:8\n    |\n LL | impl X<'b> {\n-   |        ^^ undeclared lifetime\n+   |     -  ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'b` here: `<'b>`\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:25:27\n    |\n LL |     fn inner_3(&self) -> &'b u8 {\n    |                           ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> X<'b> {\n+   |     ^^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn inner_3<'b>(&self) -> &'b u8 {\n+   |               ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:33:9\n    |\n LL | impl Y<&'a u8> {\n-   |         ^^ undeclared lifetime\n+   |     -   ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:35:25\n    |\n LL |     fn inner(&self) -> &'a u8 {\n    |                         ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | impl<'a> Y<&'a u8> {\n+   |     ^^^^\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     fn inner<'a>(&self) -> &'a u8 {\n+   |             ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:43:27\n    |\n LL |     fn any_lifetime() -> &'b u8;\n    |                           ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | trait MyTrait<'b, 'a> {\n+   |               ^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn any_lifetime<'b>() -> &'b u8;\n+   |                    ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:45:27\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                           ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | trait MyTrait<'b, 'a> {\n+   |               ^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8;\n+   |                         ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:45:40\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8;\n    |                                        ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | trait MyTrait<'b, 'a> {\n+   |               ^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8;\n+   |                         ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:50:14\n    |\n LL | impl MyTrait<'a> for Y<&'a u8> {\n-   |              ^^ undeclared lifetime\n+   |     -        ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:50:25\n    |\n LL | impl MyTrait<'a> for Y<&'a u8> {\n-   |                         ^^ undeclared lifetime\n+   |     -                   ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:53:31\n    |\n LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n    |                               ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | impl<'a> MyTrait<'a> for Y<&'a u8> {\n+   |     ^^^^\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     fn my_lifetime<'a>(&self) -> &'a u8 { self.0 }\n+   |                   ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:55:27\n    |\n LL |     fn any_lifetime() -> &'b u8 { &0 }\n    |                           ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n+   |     ^^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn any_lifetime<'b>() -> &'b u8 { &0 }\n+   |                    ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:57:27\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                           ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n+   |     ^^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n+   |                         ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:57:40\n    |\n LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n    |                                        ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n+   |     ^^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n+   |                         ^^^^\n \n error: aborting due to 17 previous errors\n "}, {"sha": "fc2ce1cb866bbd8529afffd23c9b81b48563d5ea", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -3,12 +3,30 @@ error[E0261]: use of undeclared lifetime name `'b`\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n    |                                     ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | trait Iterable<'b> {\n+   |               ^^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     type Iter<'b, 'a>: Iterator<Item = Self::Item<'a>>\n+   |               ^^^\n \n error[E0261]: use of undeclared lifetime name `'undeclared`\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:12:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n    |                                         ^^^^^^^^^^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'undeclared` here\n+   |\n+LL | trait Iterable<'undeclared> {\n+   |               ^^^^^^^^^^^^^\n+help: consider introducing lifetime `'undeclared` here\n+   |\n+LL |     fn iter<'undeclared, 'a>(&'a self) -> Self::Iter<'undeclared>;\n+   |             ^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "14c53f906654b5fc0fe9cbf2967ba7c6062fa219", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,13 +2,23 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:11:19\n    |\n LL |     type Output = &i32;\n-   |                   ^ expected lifetime parameter\n+   |                   ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type Output<'lifetime> = &'lifetime i32;\n+   |                ^^^^^^^^^^^   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:16:20\n    |\n LL |     type Output = &'_ i32;\n-   |                    ^^ expected lifetime parameter\n+   |                    ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type Output<'lifetime> = &'lifetime i32;\n+   |                ^^^^^^^^^^^    ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5f101a24c1d430d85a261af709c1734083e13a0c", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,7 +2,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-61124-anon-lifetime-in-struct-declaration.rs:8:19\n    |\n LL | struct Heartbreak(Betrayal);\n-   |                   ^^^^^^^^ expected lifetime parameter\n+   |                   ^^^^^^^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct Heartbreak<'lifetime>(Betrayal<'lifetime>);\n+   |                  ^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fe656f7af7e0139d7b1898e53bf372bd769b571a", "filename": "src/test/ui/in-band-lifetimes/no_in_band_in_struct.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_in_band_in_struct.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -1,12 +1,16 @@\n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_in_band_in_struct.rs:5:9\n    |\n+LL | struct Foo {\n+   |           - help: consider introducing lifetime `'test` here: `<'test>`\n LL |     x: &'test u32,\n    |         ^^^^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_in_band_in_struct.rs:9:10\n    |\n+LL | enum Bar {\n+   |         - help: consider introducing lifetime `'test` here: `<'test>`\n LL |     Baz(&'test u32),\n    |          ^^^^^ undeclared lifetime\n "}, {"sha": "bfb20ade035cf7af1885343abd49fa21d409cfb8", "filename": "src/test/ui/in-band-lifetimes/no_introducing_in_band_in_locals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fno_introducing_in_band_in_locals.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -1,6 +1,8 @@\n error[E0261]: use of undeclared lifetime name `'test`\n   --> $DIR/no_introducing_in_band_in_locals.rs:5:13\n    |\n+LL | fn foo(x: &u32) {\n+   |       - help: consider introducing lifetime `'test` here: `<'test>`\n LL |     let y: &'test u32 = x;\n    |             ^^^^^ undeclared lifetime\n "}, {"sha": "8a627bc0bd4de7042254f82ce1bdba57ac2048e7", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,17 +2,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:3:28\n    |\n LL | type Foo = fn(&u8, &u8) -> &u8;\n-   |                            ^ expected lifetime parameter\n+   |                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | type Foo<'lifetime> = fn(&u8, &u8) -> &'lifetime u8;\n+   |         ^^^^^^^^^^^                   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n    |\n LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n-   |                           ^ expected lifetime parameter\n+   |                           ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn bar<'lifetime, F: Fn(&u8, &u8) -> &'lifetime u8>(f: &F) {}\n+   |        ^^^^^^^^^^                    ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "85d5d9cc42e9af0329a14432c477e9d440240251", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:1:62\n    |\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                                                              ^ expected lifetime parameter\n+   |                                                              ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn parse_type<'lifetime>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'lifetime str { iter.next() }\n+   |              ^^^^^^^^^^^                                                ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40"}, {"sha": "c9402277640991f52002586d17345917c8af9b08", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,25 +2,37 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:9:24\n    |\n LL | fn f(a: &S, b: i32) -> &i32 {\n-   |                        ^ expected lifetime parameter\n+   |                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn f<'lifetime>(a: &S, b: i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^                   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n    |\n LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n-   |                                  ^ expected lifetime parameter\n+   |                                  ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn g<'lifetime>(a: &S, b: bool, c: &i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^                             ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n    |\n LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n-   |                                            ^ expected lifetime parameter\n+   |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn h<'lifetime>(a: &bool, b: bool, c: &S, d: &i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^                                       ^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1d5eeac23f96ab2a3965a36003c044314219cff3", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -10,17 +10,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:33\n    |\n LL | fn g(_x: &isize, _y: &isize) -> &isize {\n-   |                                 ^ expected lifetime parameter\n+   |                                 ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn g<'lifetime>(_x: &isize, _y: &isize) -> &'lifetime isize {\n+   |     ^^^^^^^^^^^                            ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n    |\n LL | fn h(_x: &Foo) -> &isize {\n-   |                   ^ expected lifetime parameter\n+   |                   ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn h<'lifetime>(_x: &Foo) -> &'lifetime isize {\n+   |     ^^^^^^^^^^^              ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20"}, {"sha": "2990ab8682434e17ffa9506a678da50f4f6d3198", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/ex1b-return-no-names-if-else.rs:1:29\n    |\n LL | fn foo(x: &i32, y: &i32) -> &i32 {\n-   |                             ^ expected lifetime parameter\n+   |                             ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'lifetime>(x: &i32, y: &i32) -> &'lifetime i32 {\n+   |       ^^^^^^^^^^^                      ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c9f235c4f7df7509b14b4aa93e065ec2670e2dc6", "filename": "src/test/ui/methods/method-call-lifetime-args-unresolved.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-unresolved.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -1,6 +1,8 @@\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/method-call-lifetime-args-unresolved.rs:2:15\n    |\n+LL | fn main() {\n+   |        - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     0.clone::<'a>();\n    |               ^^ undeclared lifetime\n "}, {"sha": "4b9f49423cbf447158b692ab93e4b1c54ce6854c", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -33,6 +33,9 @@ LL |     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/trait-object-trait-parens.rs:11:31\n    |\n+LL | fn main() {\n+   |        - help: consider introducing lifetime `'a` here: `<'a>`\n+...\n LL |     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n    |                               ^^ undeclared lifetime\n "}, {"sha": "01eadbe252e9f9791bef15e5057275ff78f1b746", "filename": "src/test/ui/proc-macro/item-error.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/item-error.rs:10:8\n    |\n LL |     a: &u64\n-   |        ^ expected lifetime parameter\n+   |        ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct A<'lifetime> {\n+LL |     a: &'lifetime u64\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "41655a210b3c0e4beb55d8b0c73e0d127d9d0d32", "filename": "src/test/ui/regions/regions-in-enums-anon.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/regions-in-enums-anon.rs:4:9\n    |\n LL |     Bar(&isize)\n-   |         ^ expected lifetime parameter\n+   |         ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | enum Foo<'lifetime> {\n+LL |     Bar(&'lifetime isize)\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "66537653291c7ce98a2e2869c46ea832ea63e9cd", "filename": "src/test/ui/regions/regions-in-enums.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -1,12 +1,16 @@\n error[E0261]: use of undeclared lifetime name `'foo`\n   --> $DIR/regions-in-enums.rs:13:9\n    |\n+LL | enum No0 {\n+   |         - help: consider introducing lifetime `'foo` here: `<'foo>`\n LL |     X5(&'foo usize)\n    |         ^^^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-enums.rs:17:9\n    |\n+LL | enum No1 {\n+   |         - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     X6(&'a usize)\n    |         ^^ undeclared lifetime\n "}, {"sha": "fbe8036880f48d25bc26e37278516763bd2fb809", "filename": "src/test/ui/regions/regions-in-structs-anon.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/regions-in-structs-anon.rs:4:8\n    |\n LL |     x: &isize\n-   |        ^ expected lifetime parameter\n+   |        ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: &'lifetime isize\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "5dfdc2ee93b43120cad1131bb15f8af52b683849", "filename": "src/test/ui/regions/regions-in-structs.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -1,12 +1,17 @@\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-structs.rs:10:9\n    |\n+LL | struct StructDecl {\n+   |                  - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     a: &'a isize,\n    |         ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-in-structs.rs:11:9\n    |\n+LL | struct StructDecl {\n+   |                  - help: consider introducing lifetime `'a` here: `<'a>`\n+LL |     a: &'a isize,\n LL |     b: &'a isize,\n    |         ^^ undeclared lifetime\n "}, {"sha": "79ebef41dccd61778f592fc52b8ab04d39789b23", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -3,48 +3,85 @@ error[E0261]: use of undeclared lifetime name `'b`\n    |\n LL |     fn m4(&self, arg: &'b isize) { }\n    |                        ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b, 'a> Foo<'a> {\n+   |      ^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn m4<'b>(&self, arg: &'b isize) { }\n+   |          ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:16:12\n    |\n LL |     fn m5(&'b self) { }\n    |            ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b, 'a> Foo<'a> {\n+   |      ^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn m5<'b>(&'b self) { }\n+   |          ^^^^\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:17:27\n    |\n LL |     fn m6(&self, arg: Foo<'b>) { }\n    |                           ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b, 'a> Foo<'a> {\n+   |      ^^^\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn m6<'b>(&self, arg: Foo<'b>) { }\n+   |          ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:25:22\n    |\n LL |     type X = Option<&'a isize>;\n-   |                      ^^ undeclared lifetime\n+   |           -          ^^ undeclared lifetime\n+   |           |\n+   |           help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:27:13\n    |\n+LL |     enum E {\n+   |           - help: consider introducing lifetime `'a` here: `<'a>`\n LL |         E1(&'a isize)\n    |             ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:30:13\n    |\n+LL |     struct S {\n+   |             - help: consider introducing lifetime `'a` here: `<'a>`\n LL |         f: &'a isize\n    |             ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:32:14\n    |\n LL |     fn f(a: &'a isize) { }\n-   |              ^^ undeclared lifetime\n+   |         -    ^^ undeclared lifetime\n+   |         |\n+   |         help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:40:17\n    |\n LL | fn fn_types(a: &'a isize,\n-   |                 ^^ undeclared lifetime\n+   |            -    ^^ undeclared lifetime\n+   |            |\n+   |            help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:42:36\n@@ -61,6 +98,9 @@ LL | ...                   &'b isize)>,\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:46:17\n    |\n+LL | fn fn_types(a: &'a isize,\n+   |            - help: consider introducing lifetime `'a` here: `<'a>`\n+...\n LL |             c: &'a isize)\n    |                 ^^ undeclared lifetime\n "}, {"sha": "6bfde5524ac4961a2861d57a2af59f4bc35cab05", "filename": "src/test/ui/regions/regions-undeclared.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-undeclared.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -7,24 +7,33 @@ LL | static c_x: &'blk isize = &22;\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:4:10\n    |\n+LL | enum EnumDecl {\n+   |              - help: consider introducing lifetime `'a` here: `<'a>`\n LL |     Foo(&'a isize),\n    |          ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:5:10\n    |\n+LL | enum EnumDecl {\n+   |              - help: consider introducing lifetime `'a` here: `<'a>`\n+LL |     Foo(&'a isize),\n LL |     Bar(&'a isize),\n    |          ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:8:15\n    |\n LL | fn fnDecl(x: &'a isize,\n-   |               ^^ undeclared lifetime\n+   |          -    ^^ undeclared lifetime\n+   |          |\n+   |          help: consider introducing lifetime `'a` here: `<'a>`\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-undeclared.rs:9:15\n    |\n+LL | fn fnDecl(x: &'a isize,\n+   |          - help: consider introducing lifetime `'a` here: `<'a>`\n LL |           y: &'a isize)\n    |               ^^ undeclared lifetime\n "}, {"sha": "5b665e181412a73d4cc51b5f0fd1ff96651a409b", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,15 +2,15 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/rfc1623.rs:8:42\n    |\n LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n-   |                                          ^ expected lifetime parameter\n+   |                                          ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/rfc1623.rs:10:39\n    |\n LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n-   |                                       ^ expected lifetime parameter\n+   |                                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n "}, {"sha": "0a028e44919a6b144aad1d19c66729802d4f00e1", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,9 +2,18 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/unboxed-closure-sugar-lifetime-elision.rs:26:39\n    |\n LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n-   |                                       ^ expected lifetime parameter\n+   |                                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn main<'lifetime>() {\n+LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=&'a isize>,\n+LL |           dyn Foo(&isize) -> &isize                                   >();\n+LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=(&'a isize, &'a isize)>,\n+LL |           dyn Foo(&isize) -> (&isize, &isize)                           >();\n+LL | \n+ ...\n \n error: aborting due to previous error\n "}, {"sha": "04df2e45703965ef0c4603ed523998efb178a086", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/dyn-trait-underscore-in-struct.rs:9:24\n    |\n LL |     x: Box<dyn Debug + '_>,\n-   |                        ^^ expected lifetime parameter\n+   |                        ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: Box<dyn Debug + 'lifetime>,\n+   |\n \n error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n   --> $DIR/dyn-trait-underscore-in-struct.rs:9:12"}, {"sha": "cf820249c80af35bc2eb946b77b5f089b5db8ff0", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/in-fn-return-illegal.rs:5:30\n    |\n LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n-   |                              ^^ expected lifetime parameter\n+   |                              ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo<'lifetime>(x: &u32, y: &u32) -> &'lifetime u32 { loop { } }\n+   |       ^^^^^^^^^^^                       ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e01b39a4b64f40513f7d9603fb559aa4c2ca18bb", "filename": "src/test/ui/underscore-lifetime/in-struct.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -2,13 +2,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/in-struct.rs:6:9\n    |\n LL |     x: &'_ u32,\n-   |         ^^ expected lifetime parameter\n+   |         ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: &'lifetime u32,\n+   |\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/in-struct.rs:10:14\n    |\n LL |     Variant(&'_ u32),\n-   |              ^^ expected lifetime parameter\n+   |              ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | enum Bar<'lifetime> {\n+LL |     Variant(&'lifetime u32),\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "517904ee62869361dabb3e4296d7431a2e51b797", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -14,7 +14,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:2:17\n    |\n LL | struct Baz<'a>(&'_ &'a u8);\n-   |                 ^^ expected lifetime parameter\n+   |                 ^^ help: consider using the named lifetime: `'a`\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:10:33\n@@ -28,9 +28,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:16:35\n    |\n LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n-   |                                   ^^ expected lifetime parameter\n+   |                                   ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn foo2<'lifetime>(_: &'_ u8, y: &'_ u8) -> &'lifetime u8 { y }\n+   |        ^^^^^^^^^^^                           ^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "49799a93017ebe2ce90acb7ef8a024f0a110a375", "filename": "src/test/ui/where-clauses/where-lifetime-resolution.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce361fb24f0896bf7d983549117cbe1f70f32dcf/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-lifetime-resolution.stderr?ref=ce361fb24f0896bf7d983549117cbe1f70f32dcf", "patch": "@@ -1,6 +1,9 @@\n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/where-lifetime-resolution.rs:6:38\n    |\n+LL | fn f() where\n+   |     - help: consider introducing lifetime `'a` here: `<'a>`\n+LL |     for<'a> dyn Trait1<'a>: Trait1<'a>, // OK\n LL |     (dyn for<'a> Trait1<'a>): Trait1<'a>,\n    |                                      ^^ undeclared lifetime\n \n@@ -13,6 +16,9 @@ LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/where-lifetime-resolution.rs:8:52\n    |\n+LL | fn f() where\n+   |     - help: consider introducing lifetime `'b` here: `<'b>`\n+...\n LL |     for<'a> dyn for<'b> Trait2<'a, 'b>: Trait2<'a, 'b>,\n    |                                                    ^^ undeclared lifetime\n "}]}