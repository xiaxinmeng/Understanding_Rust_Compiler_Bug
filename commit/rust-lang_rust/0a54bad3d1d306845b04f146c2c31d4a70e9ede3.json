{"sha": "0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTRiYWQzZDFkMzA2ODQ1YjA0ZjE0NmMyYzMxZDRhNzBlOWVkZTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-08T23:53:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-15T19:19:14Z"}, "message": "core::rt: Initialize logging", "tree": {"sha": "6627bf4aa911e102843e7caf524148268df7ae9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6627bf4aa911e102843e7caf524148268df7ae9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "html_url": "https://github.com/rust-lang/rust/commit/0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2897d559742c5f7630557975aa72c12a0eff01", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2897d559742c5f7630557975aa72c12a0eff01", "html_url": "https://github.com/rust-lang/rust/commit/cc2897d559742c5f7630557975aa72c12a0eff01"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "a0d0539768912b1a0c36f7ce23f61a054018bb94", "filename": "src/libcore/rt/logging.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Flibcore%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Flibcore%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flogging.rs?ref=0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "patch": "@@ -35,4 +35,34 @@ impl Logger for StdErrLogger {\n         dbg.write_str(\"\\n\");\n         dbg.flush();\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+/// Configure logging by traversing the crate map and setting the\n+/// per-module global logging flags based on the logging spec\n+pub fn init(crate_map: *u8) {\n+    use os;\n+    use str;\n+    use ptr;\n+    use option::{Some, None};\n+    use libc::c_char;\n+\n+    let log_spec = os::getenv(\"RUST_LOG\");\n+    match log_spec {\n+        Some(spec) => {\n+            do str::as_c_str(spec) |s| {\n+                unsafe {\n+                    rust_update_log_settings(crate_map, s);\n+                }\n+            }\n+        }\n+        None => {\n+            unsafe {\n+                rust_update_log_settings(crate_map, ptr::null());\n+            }\n+        }\n+    }\n+\n+    extern {\n+        fn rust_update_log_settings(crate_map: *u8, settings: *c_char);\n+    }\n+}"}, {"sha": "cebc87f8c235256e2c9238ee29189e7e8bef0049", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "patch": "@@ -62,7 +62,6 @@ Several modules in `core` are clients of `rt`:\n \n #[doc(hidden)];\n \n-use libc::c_char;\n use ptr::Ptr;\n \n /// The global (exchange) heap.\n@@ -138,11 +137,13 @@ pub mod tube;\n /// # Return value\n ///\n /// The return value is used as the process return code. 0 on success, 101 on error.\n-pub fn start(_argc: int, _argv: **c_char, _crate_map: *u8, main: ~fn()) -> int {\n+pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n     use self::sched::{Scheduler, Task};\n     use self::uv::uvio::UvEventLoop;\n \n+    init(crate_map);\n+\n     let loop_ = ~UvEventLoop::new();\n     let mut sched = ~Scheduler::new(loop_);\n     let main_task = ~Task::new(&mut sched.stack_pool, main);\n@@ -153,6 +154,12 @@ pub fn start(_argc: int, _argv: **c_char, _crate_map: *u8, main: ~fn()) -> int {\n     return 0;\n }\n \n+/// One-time runtime initialization. Currently all this does is set up logging\n+/// based on the RUST_LOG environment variable.\n+pub fn init(crate_map: *u8) {\n+    logging::init(crate_map);\n+}\n+\n /// Possible contexts in which Rust code may be executing.\n /// Different runtime services are available depending on context.\n /// Mostly used for determining if we're using the new scheduler"}, {"sha": "1249392484d235e98176bfc3f406154d3ea03f9f", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "patch": "@@ -435,7 +435,7 @@ pub fn start(main: *u8, argc: int, argv: **c_char,\n             return rust_start(main as *c_void, argc as c_int, argv,\n                               crate_map as *c_void) as int;\n         } else {\n-            return do rt::start(argc, argv, crate_map) {\n+            return do rt::start(argc, argv as **u8, crate_map) {\n                 unsafe {\n                     // `main` is an `fn() -> ()` that doesn't take an environment\n                     // XXX: Could also call this as an `extern \"Rust\" fn` once they work"}, {"sha": "df24f569495b49314c751e81e7df3d714c3817fb", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "patch": "@@ -324,6 +324,10 @@ void update_log_settings(void* crate_map, char* settings) {\n     free(buffer);\n }\n \n+extern \"C\" CDECL void\n+rust_update_log_settings(void* crate_map, char* settings) {\n+    update_log_settings(crate_map, settings);\n+}\n \n //\n // Local Variables:"}, {"sha": "f1ddb17c499a18d28137552d04d70dee324dcb99", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/0a54bad3d1d306845b04f146c2c31d4a70e9ede3/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "patch": "@@ -238,4 +238,4 @@ rust_valgrind_stack_register\n rust_valgrind_stack_deregister\n rust_take_env_lock\n rust_drop_env_lock\n-\n+rust_update_log_settings"}]}