{"sha": "8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOGEyM2Y2NDIyZTc4ZDFhMzBiNDBjYjYyM2UwYjdiNjkwMjE4ZTk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-18T20:48:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-18T20:48:16Z"}, "message": "Rollup merge of #65364 - XiangQingW:master, r=estebank\n\nCollect occurrences of empty blocks for mismatched braces diagnostic\n\nFix #63904", "tree": {"sha": "aa7de704a48f6e98d8308a59697840629c3db649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa7de704a48f6e98d8308a59697840629c3db649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqiUQCRBK7hj4Ov3rIwAAdHIIADzwOuW/nMmVhn98IPFrQ2M/\n9ZXfhWkz/+UioPDoZu93rw4C5Z/Z5pFGAQOh11Dw4+Sjvrvz3BOUclrkaK/1RNQj\nwKsaUEnNdufs15dFDwXrxa3S5zNrvq08JFoyssXApLtqh8FeCE9kmSaWhIH4L7YN\nwsOMuDARLYz3h2MalwP5zRdWatYGYQHT1OD+Xb1uQczscmiW70NP4zD0fLzY5gh5\nMxFbf5Tjexb3sWCc+9DkxxtYQV0D0uIALhdzeQYIC6h4GOGk/CsXCsBhgdWpJYtn\n81dg06QJ3DCKk6SoKs63jc9KHBeubq7m9izwwEMMJhhCO5x78y7u4Z0BIYxX+rs=\n=f3aU\n-----END PGP SIGNATURE-----\n", "payload": "tree aa7de704a48f6e98d8308a59697840629c3db649\nparent bb53fed72f51dd5c0819d6ae3790154d34abde18\nparent fe819a074c748fd3d11fcc0be8164645a7cd58db\nauthor Tyler Mandry <tmandry@gmail.com> 1571431696 -0700\ncommitter GitHub <noreply@github.com> 1571431696 -0700\n\nRollup merge of #65364 - XiangQingW:master, r=estebank\n\nCollect occurrences of empty blocks for mismatched braces diagnostic\n\nFix #63904\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "html_url": "https://github.com/rust-lang/rust/commit/8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb53fed72f51dd5c0819d6ae3790154d34abde18", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb53fed72f51dd5c0819d6ae3790154d34abde18", "html_url": "https://github.com/rust-lang/rust/commit/bb53fed72f51dd5c0819d6ae3790154d34abde18"}, {"sha": "fe819a074c748fd3d11fcc0be8164645a7cd58db", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe819a074c748fd3d11fcc0be8164645a7cd58db", "html_url": "https://github.com/rust-lang/rust/commit/fe819a074c748fd3d11fcc0be8164645a7cd58db"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "b4dd23c9f9b0f90b338589b8ffba372e4321ea2f", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::fx::FxHashMap;\n use syntax_pos::Span;\n \n use crate::print::pprust::token_to_string;\n@@ -16,6 +17,7 @@ impl<'a> StringReader<'a> {\n             unmatched_braces: Vec::new(),\n             matching_delim_spans: Vec::new(),\n             last_unclosed_found_span: None,\n+            last_delim_empty_block_spans: FxHashMap::default()\n         };\n         let res = tt_reader.parse_all_token_trees();\n         (res, tt_reader.unmatched_braces)\n@@ -34,6 +36,7 @@ struct TokenTreesReader<'a> {\n     /// Used only for error recovery when arriving to EOF with mismatched braces.\n     matching_delim_spans: Vec<(token::DelimToken, Span, Span)>,\n     last_unclosed_found_span: Option<Span>,\n+    last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>\n }\n \n impl<'a> TokenTreesReader<'a> {\n@@ -121,13 +124,20 @@ impl<'a> TokenTreesReader<'a> {\n                     // Correct delimiter.\n                     token::CloseDelim(d) if d == delim => {\n                         let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();\n+                        let close_brace_span = self.token.span;\n+\n+                        if tts.is_empty() {\n+                            let empty_block_span = open_brace_span.to(close_brace_span);\n+                            self.last_delim_empty_block_spans.insert(delim, empty_block_span);\n+                        }\n+\n                         if self.open_braces.len() == 0 {\n                             // Clear up these spans to avoid suggesting them as we've found\n                             // properly matched delimiters so far for an entire block.\n                             self.matching_delim_spans.clear();\n                         } else {\n                             self.matching_delim_spans.push(\n-                                (open_brace, open_brace_span, self.token.span),\n+                                (open_brace, open_brace_span, close_brace_span),\n                             );\n                         }\n                         // Parse the close delimiter.\n@@ -193,13 +203,20 @@ impl<'a> TokenTreesReader<'a> {\n                     tts.into()\n                 ).into())\n             },\n-            token::CloseDelim(_) => {\n+            token::CloseDelim(delim) => {\n                 // An unexpected closing delimiter (i.e., there is no\n                 // matching opening delimiter).\n                 let token_str = token_to_string(&self.token);\n                 let msg = format!(\"unexpected close delimiter: `{}`\", token_str);\n                 let mut err = self.string_reader.sess.span_diagnostic\n                     .struct_span_err(self.token.span, &msg);\n+\n+                if let Some(span) = self.last_delim_empty_block_spans.remove(&delim) {\n+                    err.span_label(\n+                        span,\n+                        \"this block is empty, you might have not meant to close it\"\n+                    );\n+                }\n                 err.span_label(self.token.span, \"unexpected close delimiter\");\n                 Err(err)\n             },"}, {"sha": "4a8b25c61079b6ad3bf8384d2c306b726b70078d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "patch": "@@ -33,7 +33,7 @@ pub enum BinOpToken {\n }\n \n /// A delimiter token.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum DelimToken {\n     /// A round parenthesis (i.e., `(` or `)`).\n     Paren,"}, {"sha": "0f5a2cb09ecc4cb9027cfa162fc1bc2f1b376352", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.rs?ref=8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+\n+}\n+    let _ = ();\n+} //~ ERROR unexpected close delimiter"}, {"sha": "5ae5fc91a4e8a9f78062dce2cd2911fe42bee9e7", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f8a23f6422e78d1a30b40cb623e0b7b690218e9/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr?ref=8f8a23f6422e78d1a30b40cb623e0b7b690218e9", "patch": "@@ -0,0 +1,14 @@\n+error: unexpected close delimiter: `}`\n+  --> $DIR/mismatched-delim-brace-empty-block.rs:5:1\n+   |\n+LL |   fn main() {\n+   |  ___________-\n+LL | |\n+LL | | }\n+   | |_- this block is empty, you might have not meant to close it\n+LL |       let _ = ();\n+LL |   }\n+   |   ^ unexpected close delimiter\n+\n+error: aborting due to previous error\n+"}]}