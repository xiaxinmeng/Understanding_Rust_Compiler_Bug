{"sha": "e17d6db80a6baeb43cf37b784e58128c81d5a462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2Q2ZGI4MGE2YmFlYjQzY2YzN2I3ODRlNTgxMjhjODFkNWE0NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-27T22:23:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-27T22:23:17Z"}, "message": "Auto merge of #36049 - jonathandturner:rollup, r=jonathandturner\n\nRollup of 6 pull requests\n\n- Successful merges: #35657, #35980, #35985, #35989, #36003, #36044\n- Failed merges:", "tree": {"sha": "301d8fe35a553b83cac91d29b8ebd5b8ed6a4423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/301d8fe35a553b83cac91d29b8ebd5b8ed6a4423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17d6db80a6baeb43cf37b784e58128c81d5a462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17d6db80a6baeb43cf37b784e58128c81d5a462", "html_url": "https://github.com/rust-lang/rust/commit/e17d6db80a6baeb43cf37b784e58128c81d5a462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17d6db80a6baeb43cf37b784e58128c81d5a462/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23064af5ec7f52b287e2c60823fed92a4763502", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23064af5ec7f52b287e2c60823fed92a4763502", "html_url": "https://github.com/rust-lang/rust/commit/a23064af5ec7f52b287e2c60823fed92a4763502"}, {"sha": "d00a89a9ff66447f769288a2e05132e1fd2b331a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00a89a9ff66447f769288a2e05132e1fd2b331a", "html_url": "https://github.com/rust-lang/rust/commit/d00a89a9ff66447f769288a2e05132e1fd2b331a"}], "stats": {"total": 501, "additions": 469, "deletions": 32}, "files": [{"sha": "38c60a0b7c7c1e1a38b6ba0ae9a5d1854dbd53b0", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -1721,6 +1721,50 @@ fn cookie() -> ! { // error: definition of an unknown language item: `cookie`\n ```\n \"##,\n \n+E0525: r##\"\n+A closure was attempted to get used whereas it doesn't implement the expected\n+trait.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0525\n+struct X;\n+\n+fn foo<T>(_: T) {}\n+fn bar<T: Fn(u32)>(_: T) {}\n+\n+fn main() {\n+    let x = X;\n+    let closure = |_| foo(x); // error: expected a closure that implements\n+                              //        the `Fn` trait, but this closure only\n+                              //        implements `FnOnce`\n+    bar(closure);\n+}\n+```\n+\n+In the example above, `closure` is an `FnOnce` closure whereas the `bar`\n+function expected an `Fn` closure. In this case, it's simple to fix the issue,\n+you just have to implement `Copy` and `Clone` traits on `struct X` and it'll\n+be ok:\n+\n+```\n+#[derive(Clone, Copy)] // We implement `Clone` and `Copy` traits.\n+struct X;\n+\n+fn foo<T>(_: T) {}\n+fn bar<T: Fn(u32)>(_: T) {}\n+\n+fn main() {\n+    let x = X;\n+    let closure = |_| foo(x);\n+    bar(closure); // ok!\n+}\n+```\n+\n+To understand better how closures work in Rust, read:\n+https://doc.rust-lang.org/book/closures.html\n+\"##,\n+\n }\n \n \n@@ -1760,5 +1804,4 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n-    E0525  // expected a closure that implements `..` but this closure only implements `..`\n }"}, {"sha": "0bab919a9ae3e4e384d219581321d41f4a522032", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -606,11 +606,12 @@ pub trait LintContext: Sized {\n                                                             \"{}({}) overruled by outer forbid({})\",\n                                                             level.as_str(), lint_name,\n                                                             lint_name);\n+                    diag_builder.span_label(span, &format!(\"overruled by previous forbid\"));\n                     match now_source {\n                         LintSource::Default => &mut diag_builder,\n                         LintSource::Node(forbid_source_span) => {\n-                            diag_builder.span_note(forbid_source_span,\n-                                                   \"`forbid` lint level set here\")\n+                            diag_builder.span_label(forbid_source_span,\n+                                                    &format!(\"`forbid` level set here\"))\n                         },\n                         LintSource::CommandLine => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\")"}, {"sha": "3bdf6acdf9a5b4998d572a5cd8e0091ad0a23f9b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -477,10 +477,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                     return;\n                                 }\n \n-                                let mut err = struct_span_err!(\n-                                    self.tcx.sess, span, E0277,\n+                                let mut err = struct_span_err!(self.tcx.sess, span, E0277,\n                                     \"the trait bound `{}` is not satisfied\",\n                                     trait_ref.to_predicate());\n+                                err.span_label(span, &format!(\"trait `{}` not satisfied\",\n+                                                              trait_ref.to_predicate()));\n \n                                 // Try to report a help message\n "}, {"sha": "e8b44d85bf916c382e3637db0d049505d21913ab", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -926,9 +926,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 err\n             }\n             mc::AliasableBorrowed => {\n-                struct_span_err!(\n+                let mut e = struct_span_err!(\n                     self.tcx.sess, span, E0389,\n-                    \"{} in a `&` reference\", prefix)\n+                    \"{} in a `&` reference\", prefix);\n+                e.span_label(span, &\"assignment into an immutable reference\");\n+                e\n             }\n         };\n "}, {"sha": "b0b5947145dbf0b9deded2704c271b99b3b8c0f7", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -56,7 +56,6 @@ let Wrapping(x) = x;\n let y: usize = 1.wrapping_neg();\n assert_eq!(x, y);\n ```\n-\n \"##\n }\n "}, {"sha": "6da901a5f86c03a4345cd6e6a77ebe5966fd56b7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -444,13 +444,32 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                         }), ..}) => ty,\n                         _ => expr_ty\n                     }.ty_adt_def().unwrap();\n-                    let any_priv = def.struct_variant().fields.iter().any(|f| {\n-                        !f.vis.is_accessible_from(self.curitem, &self.tcx.map)\n-                    });\n-                    if any_priv {\n-                        span_err!(self.tcx.sess, expr.span, E0450,\n-                                  \"cannot invoke tuple struct constructor with private \\\n-                                   fields\");\n+\n+                    let private_indexes : Vec<_> = def.struct_variant().fields.iter().enumerate()\n+                        .filter(|&(_,f)| {\n+                            !f.vis.is_accessible_from(self.curitem, &self.tcx.map)\n+                    }).map(|(n,&_)|n).collect();\n+\n+                    if !private_indexes.is_empty() {\n+\n+                        let mut error = struct_span_err!(self.tcx.sess, expr.span, E0450,\n+                                                         \"cannot invoke tuple struct constructor \\\n+                                                         with private fields\");\n+                        error.span_label(expr.span,\n+                                         &format!(\"cannot construct with a private field\"));\n+\n+                        if let Some(def_id) = self.tcx.map.as_local_node_id(def.did) {\n+                            if let Some(hir::map::NodeItem(node)) = self.tcx.map.find(def_id) {\n+                                if let hir::Item_::ItemStruct(ref tuple_data, _) = node.node {\n+\n+                                    for i in private_indexes {\n+                                        error.span_label(tuple_data.fields()[i].span,\n+                                                         &format!(\"private field declared here\"));\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        error.emit();\n                     }\n                 }\n             }"}, {"sha": "18d31448b1a24129920f24b1a2944efcebcf9fe3", "filename": "src/librustc_trans/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -23,8 +23,10 @@ extern \"platform-intrinsic\" {\n     fn simd_add<T>(a: T, b: T) -> T;\n }\n \n-unsafe { simd_add(0, 1); }\n-// error: invalid monomorphization of `simd_add` intrinsic\n+fn main() {\n+    unsafe { simd_add(0, 1); }\n+    // error: invalid monomorphization of `simd_add` intrinsic\n+}\n ```\n \n The generic type has to be a SIMD type. Example:"}, {"sha": "ed3e645eeebebe59af0cb3a90c530038f5aa2a4a", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -51,12 +51,17 @@ fn equate_intrinsic_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }));\n     let i_n_tps = i_ty.generics.types.len();\n     if i_n_tps != n_tps {\n-        struct_span_err!(tcx.sess, it.span, E0094,\n-            \"intrinsic has wrong number of type \\\n-             parameters: found {}, expected {}\",\n-             i_n_tps, n_tps)\n-             .span_label(it.span, &format!(\"expected {} type parameter\", n_tps))\n-             .emit();\n+        let span = match it.node {\n+            hir::ForeignItemFn(_, ref generics) => generics.span().unwrap_or(it.span),\n+            hir::ForeignItemStatic(_, _) => it.span\n+        };\n+\n+        struct_span_err!(tcx.sess, span, E0094,\n+                        \"intrinsic has wrong number of type \\\n+                        parameters: found {}, expected {}\",\n+                        i_n_tps, n_tps)\n+            .span_label(span, &format!(\"expected {} type parameter\", n_tps))\n+            .emit();\n     } else {\n         require_same_types(ccx,\n                            TypeOrigin::IntrinsicType(it.span),"}, {"sha": "75a025f064852309a740b177f0b527d34876e630", "filename": "src/test/compile-fail-fulldeps/lint-plugin-forbid-attrs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Flint-plugin-forbid-attrs.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -15,11 +15,13 @@\n #![plugin(lint_plugin_test)]\n #![forbid(test_lint)]\n //~^ NOTE lint level defined here\n-//~| NOTE `forbid` lint level set here\n+//~| NOTE `forbid` level set here\n \n fn lintme() { } //~ ERROR item is named 'lintme'\n \n-#[allow(test_lint)] //~ ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+#[allow(test_lint)]\n+//~^ ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+//~| NOTE overruled by previous forbid\n pub fn main() {\n     lintme();\n }"}, {"sha": "12f9417f944cded5ea6f4cc4d3c9817b5efad5c6", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -17,5 +17,8 @@ fn some_func<T: Foo>(foo: T) {\n }\n \n fn main() {\n-    some_func(5i32); //~ ERROR E0277\n+    some_func(5i32);\n+    //~^ ERROR the trait bound `i32: Foo` is not satisfied\n+    //~| NOTE trait `i32: Foo` not satisfied\n+    //~| NOTE required by `some_func`\n }"}, {"sha": "584dfd5fa440cd4a8f7436b98971f5487c830d8b", "filename": "src/test/compile-fail/E0389.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0389.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -16,5 +16,6 @@ fn main() {\n     let mut fancy = FancyNum{ num: 5 };\n     let fancy_ref = &(&mut fancy);\n     fancy_ref.num = 6; //~ ERROR E0389\n+                       //~^ NOTE assignment into an immutable reference\n     println!(\"{}\", fancy_ref.num);\n }"}, {"sha": "200b58a329344780be4b7610c1787fe6c7b589aa", "filename": "src/test/compile-fail/E0450.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0450.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -9,9 +9,13 @@\n // except according to those terms.\n \n mod Bar {\n-    pub struct Foo(isize);\n+    pub struct Foo( bool, pub i32, f32, bool);\n+    //~^ NOTE private field declared here\n+    //~| NOTE private field declared here\n+    //~| NOTE private field declared here\n }\n \n fn main() {\n-    let f = Bar::Foo(0); //~ ERROR E0450\n+    let f = Bar::Foo(false,1,0.1, true); //~ ERROR E0450\n+                         //~^ NOTE cannot construct with a private field\n }"}, {"sha": "6fed3dca94ef110f8f2f7fe5c08a8c7906d41dfb", "filename": "src/test/compile-fail/E0453.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0453.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0453.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0453.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -9,7 +9,10 @@\n // except according to those terms.\n \n #![forbid(non_snake_case)]\n+//~^ NOTE `forbid` level set here\n \n-#[allow(non_snake_case)] //~ ERROR E0453\n+#[allow(non_snake_case)]\n+//~^ ERROR allow(non_snake_case) overruled by outer forbid(non_snake_case)\n+//~| NOTE overruled by previous forbid\n fn main() {\n }"}, {"sha": "fce8513ca64f9a0d3836ed0bc9c699ba2490f18c", "filename": "src/test/compile-fail/E0502.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0502.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn bar(x: &mut i32) {}\n+fn foo(a: &mut i32) {\n+    let ref y = a;\n+    bar(a); //~ ERROR E0502\n+}\n+\n+fn main() {\n+}"}, {"sha": "810eb8d9b075cf729074f75a87c7b3eb57a2268b", "filename": "src/test/compile-fail/E0503.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0503.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut value = 3;\n+    let _borrow = &mut value;\n+    let _sum = value + 1; //~ ERROR E0503\n+}"}, {"sha": "c594f2415209d973a446ade9720453f767b647d8", "filename": "src/test/compile-fail/E0504.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0504.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct FancyNum {\n+    num: u8,\n+}\n+\n+fn main() {\n+    let fancy_num = FancyNum { num: 5 };\n+    let fancy_ref = &fancy_num;\n+\n+    let x = move || {\n+        println!(\"child function: {}\", fancy_num.num); //~ ERROR E0504\n+    };\n+\n+    x();\n+    println!(\"main function: {}\", fancy_ref.num);\n+}"}, {"sha": "2d534b8a44a062e1704ed91e7565ab0bf3490f11", "filename": "src/test/compile-fail/E0505.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0505.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Value {}\n+\n+fn eat(val: Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+        eat(x); //~ ERROR E0505\n+    }\n+}"}, {"sha": "ddaffd4a2736d5b78fb77236a932f028edefd7d1", "filename": "src/test/compile-fail/E0506.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0506.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct FancyNum {\n+    num: u8,\n+}\n+\n+fn main() {\n+    let mut fancy_num = FancyNum { num: 5 };\n+    let fancy_ref = &fancy_num;\n+    fancy_num = FancyNum { num: 6 }; //~ ERROR E0506\n+\n+    println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n+}"}, {"sha": "87b1bf51bdbbf6a8fd0b343eb6cb96e6b8b0ba3e", "filename": "src/test/compile-fail/E0507.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0507.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::RefCell;\n+\n+struct TheDarkKnight;\n+\n+impl TheDarkKnight {\n+    fn nothing_is_true(self) {}\n+}\n+\n+fn main() {\n+    let x = RefCell::new(TheDarkKnight);\n+\n+    x.borrow().nothing_is_true(); //~ ERROR E0507\n+}"}, {"sha": "a72c29cc3a59e55f7f14058b630b206bf78b31bf", "filename": "src/test/compile-fail/E0508.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0508.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct NonCopy;\n+\n+fn main() {\n+    let array = [NonCopy; 1];\n+    let _value = array[0]; //~ ERROR E0508\n+}"}, {"sha": "b92024cd6e20beab3978933bcc8a358647954711", "filename": "src/test/compile-fail/E0509.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0509.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0509.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0509.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct FancyNum {\n+    num: usize\n+}\n+\n+struct DropStruct {\n+    fancy: FancyNum\n+}\n+\n+impl Drop for DropStruct {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn main() {\n+    let drop_struct = DropStruct{fancy: FancyNum{num: 5}};\n+    let fancy_field = drop_struct.fancy; //~ ERROR E0509\n+    println!(\"Fancy: {}\", fancy_field.num);\n+}"}, {"sha": "c5c03f818253e7244dd85f57d0b868d6c2b22d7c", "filename": "src/test/compile-fail/E0511.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0511.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_add<T>(a: T, b: T) -> T;\n+}\n+\n+fn main() {\n+    unsafe { simd_add(0, 1); } //~ ERROR E0511\n+}"}, {"sha": "25f962716413119eed2f6df8851b13a72c2fafb6", "filename": "src/test/compile-fail/E0512.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0512.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0512.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0512.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0u16)); } //~ ERROR E0512\n+}"}, {"sha": "a5f609de8497e9d387a8745fb5dd57e5adf64f45", "filename": "src/test/compile-fail/E0516.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0516.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x: typeof(92) = 92; //~ ERROR E0516\n+}"}, {"sha": "be06e809915b59d48c5af7fd6fa3f13ea8c70db9", "filename": "src/test/compile-fail/E0517.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0517.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(C)] //~ ERROR E0517\n+type Foo = u8;\n+\n+#[repr(packed)] //~ ERROR E0517\n+enum Foo2 {Bar, Baz}\n+\n+#[repr(u8)] //~ ERROR E0517\n+struct Foo3 {bar: bool, baz: bool}\n+\n+#[repr(C)] //~ ERROR E0517\n+impl Foo3 {\n+}\n+\n+fn main() {\n+}"}, {"sha": "8518bb4a6be3f7950b58a3e5f3f57e0ada51e1b3", "filename": "src/test/compile-fail/E0518.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0518.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[inline(always)] //~ ERROR E0518\n+struct Foo;\n+\n+#[inline(never)] //~ ERROR E0518\n+impl Foo {\n+}\n+\n+fn main() {\n+}"}, {"sha": "bb52843ee78351e8db9045af4b77515d3cd157b7", "filename": "src/test/compile-fail/E0520.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0520.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait SpaceLlama {\n+    fn fly(&self);\n+}\n+\n+impl<T> SpaceLlama for T {\n+    default fn fly(&self) {}\n+}\n+\n+impl<T: Clone> SpaceLlama for T {\n+    fn fly(&self) {}\n+}\n+\n+impl SpaceLlama for i32 {\n+    default fn fly(&self) {} //~ ERROR E0520\n+}\n+\n+fn main() {\n+}"}, {"sha": "5103c83cafce3e29336229dcc7a22ebff0d35586", "filename": "src/test/compile-fail/E0522.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0522.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(lang_items)]\n+\n+#[lang = \"cookie\"]\n+fn cookie() -> ! { //~ E0522\n+    loop {}\n+}"}, {"sha": "f03f35a57104f51488a7ebbfc9728898d4ccc3af", "filename": "src/test/compile-fail/E0527.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0527.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2FE0527.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0527.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let r = &[1, 2, 3, 4];\n+    match r {\n+        &[a, b] => { //~ ERROR E0527\n+            println!(\"a={}, b={}\", a, b);\n+        }\n+    }\n+}"}, {"sha": "084616964674f3ab85423beb904fb9d12b16ac61", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -31,5 +31,6 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR E0277\n+    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n+    //~| NOTE trait `(): Add<A>` not satisfied\n }"}, {"sha": "b6e81504a9d24a2b1ac587145a84bae2809e595d", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -92,6 +92,7 @@ fn main()\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n     //~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `[u8]: std::marker::Sized` not satisfied\n     //~| NOTE `[u8]` does not have a constant size known at compile-time\n     //~| NOTE required for the cast to the object type `Foo`\n     let _ = foo as *const str; //~ ERROR casting\n@@ -106,6 +107,7 @@ fn main()\n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n     //~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `str: std::marker::Sized` not satisfied\n     //~| NOTE `str` does not have a constant size known at compile-time\n     //~| NOTE required for the cast to the object type `Foo`\n "}, {"sha": "a73164b957c831a8896859fb196858d2b3fb493d", "filename": "src/test/compile-fail/const-unsized.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -12,21 +12,25 @@ use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n+//~| NOTE `std::fmt::Debug + Sync + 'static: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n+//~| NOTE `str: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n+//~| NOTE `std::fmt::Debug + Sync + 'static: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_BAR: str = *\"bar\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n+//~| NOTE `str: std::marker::Sized` not satisfied\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n "}, {"sha": "60ad266e7f7daaaf7857c03dc2f4d2c9cffa8dc3", "filename": "src/test/compile-fail/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -26,13 +26,15 @@ fn send<T: Send>(_: T) {}\n fn main() {\n     send(before());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n     //~| NOTE required by `send`\n \n     send(after());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n@@ -52,6 +54,7 @@ fn after() -> impl Fn(i32) {\n fn cycle1() -> impl Clone {\n     send(cycle2().clone());\n     //~^ ERROR the trait bound `std::rc::Rc<std::string::String>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::string::String>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `impl std::clone::Clone`\n     //~| NOTE required by `send`\n@@ -62,6 +65,7 @@ fn cycle1() -> impl Clone {\n fn cycle2() -> impl Clone {\n     send(cycle1().clone());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n+    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `impl std::clone::Clone`\n     //~| NOTE required by `send`"}, {"sha": "a23083b5c8c11ef5a00fd29ea6a0351636bd63a3", "filename": "src/test/compile-fail/lint-forbid-attr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Flint-forbid-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Flint-forbid-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-forbid-attr.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -9,8 +9,10 @@\n // except according to those terms.\n \n #![forbid(deprecated)]\n-//~^ NOTE `forbid` lint level set here\n+//~^ NOTE `forbid` level set here\n \n-#[allow(deprecated)] //~ ERROR allow(deprecated) overruled by outer forbid(deprecated)\n+#[allow(deprecated)]\n+//~^ ERROR allow(deprecated) overruled by outer forbid(deprecated)\n+//~| NOTE overruled by previous forbid\n fn main() {\n }"}, {"sha": "cc7c2f4f796d93bd0b8711aa566cc8073d7964ec", "filename": "src/test/compile-fail/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -42,14 +42,17 @@ impl Index<Bar<usize>> for [i32] {\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277\n+    //~| NOTE not satisfied\n     //~| NOTE trait message\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Foo(2u32));\n     //~^ ERROR E0277\n+    //~| NOTE not satisfied\n     //~| NOTE on impl for Foo\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Bar(2u32));\n     //~^ ERROR E0277\n+    //~| NOTE not satisfied\n     //~| NOTE on impl for Bar\n     //~| NOTE required by\n }"}, {"sha": "c22e48bede4efdd61f87ee53f579125ffcb5b431", "filename": "src/test/compile-fail/on-unimplemented/on-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -30,6 +30,7 @@ impl Index<usize> for [i32] {\n #[rustc_error]\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32); //~ ERROR E0277\n+                                                     //~| NOTE not satisfied\n                                                      //~| NOTE a usize is required\n                                                      //~| NOTE required by\n }"}, {"sha": "9ea2809374cd83adf601215bc52c3d23c5f996fb", "filename": "src/test/compile-fail/on-unimplemented/on-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -35,7 +35,9 @@ pub fn main() {\n     //~^ ERROR\n     //~^^ NOTE a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n     //~^^^ NOTE required by `collect`\n+    //~| NOTE trait `std::option::Option<std::vec::Vec<u8>>: MyFromIterator<&u8>` not satisfied\n     let x: String = foobar(); //~ ERROR\n     //~^ NOTE test error `std::string::String` with `u8` `_` `u32`\n     //~^^ NOTE required by `foobar`\n+    //~| NOTE trait `std::string::String: Foo<u8, _, u32>` not satisfied\n }"}, {"sha": "5c548b5d5bf20760ad1d3c69f78c1f6da03a12a3", "filename": "src/test/compile-fail/on-unimplemented/slice-index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -18,7 +18,9 @@ use std::ops::Index;\n fn main() {\n     let x = &[1, 2, 3] as &[i32];\n     x[1i32]; //~ ERROR E0277\n+             //~| NOTE trait `[i32]: std::ops::Index<i32>` not satisfied\n              //~| NOTE slice indices are of type `usize`\n     x[..1i32]; //~ ERROR E0277\n+               //~| NOTE trait `[i32]: std::ops::Index<std::ops::RangeTo<i32>>` not satisfied\n                //~| NOTE slice indices are of type `usize`\n }"}, {"sha": "d15e3536d60ca0633cf5a91ed390e1da4e4cd376", "filename": "src/test/compile-fail/trait-suggest-where-clause.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17d6db80a6baeb43cf37b784e58128c81d5a462/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs?ref=e17d6db80a6baeb43cf37b784e58128c81d5a462", "patch": "@@ -16,11 +16,13 @@ fn check<T: Iterator, U: ?Sized>() {\n     // suggest a where-clause, if needed\n     mem::size_of::<U>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `U: std::marker::Sized` not satisfied\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required by `std::mem::size_of`\n \n     mem::size_of::<Misc<U>>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n+    //~| NOTE trait `U: std::marker::Sized` not satisfied\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required because it appears within the type `Misc<U>`\n     //~| NOTE required by `std::mem::size_of`\n@@ -29,29 +31,34 @@ fn check<T: Iterator, U: ?Sized>() {\n \n     <u64 as From<T>>::from;\n     //~^ ERROR `u64: std::convert::From<T>` is not satisfied\n+    //~| NOTE trait `u64: std::convert::From<T>` not satisfied\n     //~| HELP consider adding a `where u64: std::convert::From<T>` bound\n     //~| NOTE required by `std::convert::From::from`\n \n     <u64 as From<<T as Iterator>::Item>>::from;\n     //~^ ERROR `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n+    //~| NOTE trait `u64: std::convert::From<<T as std::iter::Iterator>::Item>` not satisfied\n     //~| HELP consider adding a `where u64:\n     //~| NOTE required by `std::convert::From::from`\n \n     // ... but not if there are inference variables\n \n     <Misc<_> as From<T>>::from;\n     //~^ ERROR `Misc<_>: std::convert::From<T>` is not satisfied\n+    //~| NOTE trait `Misc<_>: std::convert::From<T>` not satisfied\n     //~| NOTE required by `std::convert::From::from`\n \n     // ... and also not if the error is not related to the type\n \n     mem::size_of::<[T]>();\n     //~^ ERROR `[T]: std::marker::Sized` is not satisfied\n+    //~| NOTE `[T]: std::marker::Sized` not satisfied\n     //~| NOTE `[T]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n \n     mem::size_of::<[&U]>();\n     //~^ ERROR `[&U]: std::marker::Sized` is not satisfied\n+    //~| NOTE `[&U]: std::marker::Sized` not satisfied\n     //~| NOTE `[&U]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n }"}]}