{"sha": "4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNTY4NDA5YWQ4NmFjNTE2YWU3Mzk3YWMzMWIxYjQ3YjBhMmUxYTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-15T21:56:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-15T21:56:57Z"}, "message": "Rollup merge of #88690 - m-ou-se:macro-braces-dot-question-expr-parse, r=nagisa\n\nAccept `m!{ .. }.method()` and `m!{ .. }?` statements.\n\nThis PR fixes something that I keep running into when using `quote!{}.into()` in a proc macro to convert the `proc_macro2::TokenStream` to a `proc_macro::TokenStream`:\n\nBefore:\n\n```\nerror: expected expression, found `.`\n --> src/lib.rs:6:6\n  |\n4 |     quote! {\n5 |         ...\n6 |     }.into()\n  |      ^ expected expression\n```\n\nAfter:\n```\n```\n(No output, compiles fine.)\n\n---\n\nContext:\n\nFor expressions like `{ 1 }` and `if true { 1 } else { 2 }`, we accept them as full statements without a trailing `;`, which means the following is not accepted:\n\n```rust\n{ 1 } - 1 // error\n```\n\nsince that is parsed as two statements: `{ 1 }` and `-1`. Syntactically correct, but the type of `{ 1 }` should be `()` as there is no `;`.\n\nHowever, for specifically `.` and `?` after the `}`, we do [continue parsing it as an expression](https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/compiler/rustc_parse/src/parser/expr.rs#L864-L876):\n\n```rust\n{ \"abc\" }.len(); // ok\n```\n\nFor braced macro invocations, we do not do this:\n\n```rust\nvec![1, 2, 3].len(); // ok\nvec!{1, 2, 3}.len(); // error\n```\n\n(It parses `vec!{1, 2, 3}` as a full statement, and then complains about `.len()` not being a valid expression.)\n\nThis PR changes this to also look for a `.` and `?` after a braced macro invocation. We can be sure the macro is an expression and not a full statement in those cases, since no statement can start with a `.` or `?`.", "tree": {"sha": "e78ac2a325333b0667817f57123826fda52c518d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e78ac2a325333b0667817f57123826fda52c518d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQmwpCRBK7hj4Ov3rIwAASvIIAH01qw6ySJiEA+SAASoLEIte\n2pDmrveGJeNkpiK+QrJr2VhbgLC76rAIoXawjEXUIZW9sWGwrS9olZMXnCNKrn3Q\njTQ+1+3POCIM9MgJ07NEiJyB3wdRoYtvgB+kzMmX2jQzO060NU6pQjjeGLWR1c+3\nP2OlxgiJDl7TSYg+lQaqLNTRQ7OiwMEF452S4gg9YU+gVFwYP6iMZUbfsjyFqWyo\no45Ts56H6ijQvUL77To8c7KWwxifx/EIuiV8sYpCiRN9LGx7sDuUPy8EXvKDR5Q1\nqutNfC0Bi2WKXoP0D/QYqJw6Qn5U09+Ie6XEb1ocf9tEO8Q8ZWNURhLyHqiC7qs=\n=dkSJ\n-----END PGP SIGNATURE-----\n", "payload": "tree e78ac2a325333b0667817f57123826fda52c518d\nparent 84646e9d67a5941d52bfa5a2ae4e4e29e30808fe\nparent 7d8d7a03412f6db1402f2713ee96a2040cfb24d2\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631743017 -0700\ncommitter GitHub <noreply@github.com> 1631743017 -0700\n\nRollup merge of #88690 - m-ou-se:macro-braces-dot-question-expr-parse, r=nagisa\n\nAccept `m!{ .. }.method()` and `m!{ .. }?` statements.\n\nThis PR fixes something that I keep running into when using `quote!{}.into()` in a proc macro to convert the `proc_macro2::TokenStream` to a `proc_macro::TokenStream`:\n\nBefore:\n\n```\nerror: expected expression, found `.`\n --> src/lib.rs:6:6\n  |\n4 |     quote! {\n5 |         ...\n6 |     }.into()\n  |      ^ expected expression\n```\n\nAfter:\n```\n```\n(No output, compiles fine.)\n\n---\n\nContext:\n\nFor expressions like `{ 1 }` and `if true { 1 } else { 2 }`, we accept them as full statements without a trailing `;`, which means the following is not accepted:\n\n```rust\n{ 1 } - 1 // error\n```\n\nsince that is parsed as two statements: `{ 1 }` and `-1`. Syntactically correct, but the type of `{ 1 }` should be `()` as there is no `;`.\n\nHowever, for specifically `.` and `?` after the `}`, we do [continue parsing it as an expression](https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/compiler/rustc_parse/src/parser/expr.rs#L864-L876):\n\n```rust\n{ \"abc\" }.len(); // ok\n```\n\nFor braced macro invocations, we do not do this:\n\n```rust\nvec![1, 2, 3].len(); // ok\nvec!{1, 2, 3}.len(); // error\n```\n\n(It parses `vec!{1, 2, 3}` as a full statement, and then complains about `.len()` not being a valid expression.)\n\nThis PR changes this to also look for a `.` and `?` after a braced macro invocation. We can be sure the macro is an expression and not a full statement in those cases, since no statement can start with a `.` or `?`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "html_url": "https://github.com/rust-lang/rust/commit/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84646e9d67a5941d52bfa5a2ae4e4e29e30808fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/84646e9d67a5941d52bfa5a2ae4e4e29e30808fe", "html_url": "https://github.com/rust-lang/rust/commit/84646e9d67a5941d52bfa5a2ae4e4e29e30808fe"}, {"sha": "7d8d7a03412f6db1402f2713ee96a2040cfb24d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8d7a03412f6db1402f2713ee96a2040cfb24d2", "html_url": "https://github.com/rust-lang/rust/commit/7d8d7a03412f6db1402f2713ee96a2040cfb24d2"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "9ec6effeb4e03a9e2ed2368204ed75511a38eb3d", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "patch": "@@ -155,17 +155,20 @@ impl<'a> Parser<'a> {\n \n         let mac = MacCall { path, args, prior_type_ascription: self.last_type_ascription };\n \n-        let kind = if delim == token::Brace || self.token == token::Semi || self.token == token::Eof\n-        {\n-            StmtKind::MacCall(P(MacCallStmt { mac, style, attrs, tokens: None }))\n-        } else {\n-            // Since none of the above applied, this is an expression statement macro.\n-            let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n-            let e = self.maybe_recover_from_bad_qpath(e, true)?;\n-            let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n-            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n-            StmtKind::Expr(e)\n-        };\n+        let kind =\n+            if (delim == token::Brace && self.token != token::Dot && self.token != token::Question)\n+                || self.token == token::Semi\n+                || self.token == token::Eof\n+            {\n+                StmtKind::MacCall(P(MacCallStmt { mac, style, attrs, tokens: None }))\n+            } else {\n+                // Since none of the above applied, this is an expression statement macro.\n+                let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n+                let e = self.maybe_recover_from_bad_qpath(e, true)?;\n+                let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n+                let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n+                StmtKind::Expr(e)\n+            };\n         Ok(self.mk_stmt(lo.to(hi), kind))\n     }\n "}, {"sha": "016b434a6124a83ecd1cad9fda874a0aa5689aa9", "filename": "src/test/ui/parser/macro-braces-dot-question.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Fparser%2Fmacro-braces-dot-question.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Fparser%2Fmacro-braces-dot-question.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro-braces-dot-question.rs?ref=4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+use std::io::Write;\n+\n+fn main() -> Result<(), std::io::Error> {\n+    vec! { 1, 2, 3 }.len();\n+    write! { vec![], \"\" }?;\n+    println!{\"\"}\n+    [0]; // separate statement, not indexing into the result of println.\n+    Ok(())\n+}"}]}