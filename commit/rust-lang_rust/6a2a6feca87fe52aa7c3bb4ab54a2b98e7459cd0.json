{"sha": "6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "node_id": "C_kwDOAAsO6NoAKDZhMmE2ZmVjYTg3ZmU1MmFhN2MzYmI0YWI1NGEyYjk4ZTc0NTljZDA", "commit": {"author": {"name": "Maciej Wasilewski", "email": "52935969+MaciejWas@users.noreply.github.com", "date": "2023-03-14T13:12:47Z"}, "committer": {"name": "Maciej Wasilewski", "email": "52935969+MaciejWas@users.noreply.github.com", "date": "2023-03-14T15:39:45Z"}, "message": "Emit \"modifies receiver\" diagnostic when no method is found\n\nIf no method is found when checking method call, we check  if we called a method with signature (&mut T, ...) -> (). If this is the case then we emit a diagnostic message", "tree": {"sha": "95205b31658fa22cf421e4f8755278a1be7d7499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95205b31658fa22cf421e4f8755278a1be7d7499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "html_url": "https://github.com/rust-lang/rust/commit/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/comments", "author": {"login": "MaciejWas", "id": 52935969, "node_id": "MDQ6VXNlcjUyOTM1OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/52935969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaciejWas", "html_url": "https://github.com/MaciejWas", "followers_url": "https://api.github.com/users/MaciejWas/followers", "following_url": "https://api.github.com/users/MaciejWas/following{/other_user}", "gists_url": "https://api.github.com/users/MaciejWas/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaciejWas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaciejWas/subscriptions", "organizations_url": "https://api.github.com/users/MaciejWas/orgs", "repos_url": "https://api.github.com/users/MaciejWas/repos", "events_url": "https://api.github.com/users/MaciejWas/events{/privacy}", "received_events_url": "https://api.github.com/users/MaciejWas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaciejWas", "id": 52935969, "node_id": "MDQ6VXNlcjUyOTM1OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/52935969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaciejWas", "html_url": "https://github.com/MaciejWas", "followers_url": "https://api.github.com/users/MaciejWas/followers", "following_url": "https://api.github.com/users/MaciejWas/following{/other_user}", "gists_url": "https://api.github.com/users/MaciejWas/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaciejWas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaciejWas/subscriptions", "organizations_url": "https://api.github.com/users/MaciejWas/orgs", "repos_url": "https://api.github.com/users/MaciejWas/repos", "events_url": "https://api.github.com/users/MaciejWas/events{/privacy}", "received_events_url": "https://api.github.com/users/MaciejWas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "html_url": "https://github.com/rust-lang/rust/commit/bd43458d4c2a01af55f7032f7c47d7c8fecfe560"}], "stats": {"total": 133, "additions": 102, "deletions": 31}, "files": [{"sha": "0ec10dc9ea32d200d58b3bd09f2a3fd0fe8614b3", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.emit_type_mismatch_suggestions(err, expr, expr_ty, expected, expected_ty_expr, error);\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n-        self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n+        self.note_internal_mutation_in_method(err, expr, Some(expected), expr_ty);\n         self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n         self.check_for_binding_assigned_block_without_tail_expression(err, expr, expr_ty, expected);\n         self.check_wrong_return_type_due_to_generic_arg(err, expr, expr_ty);"}, {"sha": "578e5b0104657979db123e2ea3c4ab628052fd02", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 56, "deletions": 25, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "patch": "@@ -955,44 +955,75 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n-        expected: Ty<'tcx>,\n+        expected: Option<Ty<'tcx>>,\n         found: Ty<'tcx>,\n     ) {\n         if found != self.tcx.types.unit {\n             return;\n         }\n-        if let ExprKind::MethodCall(path_segment, rcvr, ..) = expr.kind {\n-            if self\n-                .typeck_results\n+\n+        let ExprKind::MethodCall(path_segment, rcvr, ..) = expr.kind else {\n+            return;\n+        };\n+\n+        let rcvr_has_the_expected_type = self\n+            .typeck_results\n+            .borrow()\n+            .expr_ty_adjusted_opt(rcvr)\n+            .and_then(|ty| expected.map(|expected_ty| expected_ty.peel_refs() == ty.peel_refs()))\n+            .unwrap_or(false);\n+\n+        let prev_call_mutates_and_returns_unit = || {\n+            self.typeck_results\n                 .borrow()\n-                .expr_ty_adjusted_opt(rcvr)\n-                .map_or(true, |ty| expected.peel_refs() != ty.peel_refs())\n-            {\n-                return;\n-            }\n-            let mut sp = MultiSpan::from_span(path_segment.ident.span);\n-            sp.push_span_label(\n-                path_segment.ident.span,\n-                format!(\n-                    \"this call modifies {} in-place\",\n-                    match rcvr.kind {\n-                        ExprKind::Path(QPath::Resolved(\n-                            None,\n-                            hir::Path { segments: [segment], .. },\n-                        )) => format!(\"`{}`\", segment.ident),\n-                        _ => \"its receiver\".to_string(),\n-                    }\n-                ),\n-            );\n+                .type_dependent_def_id(expr.hir_id)\n+                .map(|def_id| self.tcx.fn_sig(def_id).skip_binder().skip_binder())\n+                .and_then(|sig| sig.inputs_and_output.split_last())\n+                .map(|(output, inputs)| {\n+                    output.is_unit()\n+                        && inputs\n+                            .get(0)\n+                            .and_then(|self_ty| self_ty.ref_mutability())\n+                            .map_or(false, rustc_ast::Mutability::is_mut)\n+                })\n+                .unwrap_or(false)\n+        };\n+\n+        if !(rcvr_has_the_expected_type || prev_call_mutates_and_returns_unit()) {\n+            return;\n+        }\n+\n+        let mut sp = MultiSpan::from_span(path_segment.ident.span);\n+        sp.push_span_label(\n+            path_segment.ident.span,\n+            format!(\n+                \"this call modifies {} in-place\",\n+                match rcvr.kind {\n+                    ExprKind::Path(QPath::Resolved(\n+                        None,\n+                        hir::Path { segments: [segment], .. },\n+                    )) => format!(\"`{}`\", segment.ident),\n+                    _ => \"its receiver\".to_string(),\n+                }\n+            ),\n+        );\n+\n+        let modifies_rcvr_note =\n+            format!(\"method `{}` modifies its receiver in-place\", path_segment.ident);\n+        if rcvr_has_the_expected_type {\n             sp.push_span_label(\n                 rcvr.span,\n                 \"you probably want to use this value after calling the method...\",\n             );\n+            err.span_note(sp, &modifies_rcvr_note);\n+            err.note(&format!(\"...instead of the `()` output of method `{}`\", path_segment.ident));\n+        } else if let ExprKind::MethodCall(..) = rcvr.kind {\n             err.span_note(\n                 sp,\n-                &format!(\"method `{}` modifies its receiver in-place\", path_segment.ident),\n+                modifies_rcvr_note.clone() + \", it is not meant to be used in method chains.\",\n             );\n-            err.note(&format!(\"...instead of the `()` output of method `{}`\", path_segment.ident));\n+        } else {\n+            err.span_note(sp, &modifies_rcvr_note);\n         }\n     }\n "}, {"sha": "50f2b71250c015c3894f06131e158f31d8f20d92", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "patch": "@@ -416,6 +416,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 probe.is_ok()\n             });\n+\n+            self.note_internal_mutation_in_method(\n+                &mut err,\n+                rcvr_expr,\n+                expected.to_option(&self),\n+                rcvr_ty,\n+            );\n         }\n \n         let mut custom_span_label = false;"}, {"sha": "7a4c747961c623d34d6b34017e1cd7aa27ce292d", "filename": "tests/ui/suggestions/chain-method-call-mutation-in-place.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs?ref=6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "patch": "@@ -1,4 +1,8 @@\n-fn main() {}\n+fn main() {\n+    let x: Vec<i32> = vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i); //~ ERROR mismatched types\n+    vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i).sort(); //~ ERROR no method named `sort` found for unit type `()` in the current scope\n+}\n+\n fn foo(mut s: String) -> String {\n     s.push_str(\"asdf\") //~ ERROR mismatched types\n }"}, {"sha": "128160f10adb342e3099620b16ef8fce1b604255", "filename": "tests/ui/suggestions/chain-method-call-mutation-in-place.stderr", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr?ref=6a2a6feca87fe52aa7c3bb4ab54a2b98e7459cd0", "patch": "@@ -1,20 +1,49 @@\n error[E0308]: mismatched types\n-  --> $DIR/chain-method-call-mutation-in-place.rs:3:5\n+  --> $DIR/chain-method-call-mutation-in-place.rs:2:23\n+   |\n+LL |     let x: Vec<i32> = vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i);\n+   |            --------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<i32>`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Vec<i32>`\n+           found unit type `()`\n+note: method `sort_by_key` modifies its receiver in-place, it is not meant to be used in method chains.\n+  --> $DIR/chain-method-call-mutation-in-place.rs:2:71\n+   |\n+LL |     let x: Vec<i32> = vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i);\n+   |                                                                       ^^^^^^^^^^^ this call modifies its receiver in-place\n+\n+error[E0599]: no method named `sort` found for unit type `()` in the current scope\n+  --> $DIR/chain-method-call-mutation-in-place.rs:3:72\n+   |\n+LL |     vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i).sort();\n+   |                                                                        ^^^^ method not found in `()`\n+   |\n+note: method `sort_by_key` modifies its receiver in-place, it is not meant to be used in method chains.\n+  --> $DIR/chain-method-call-mutation-in-place.rs:3:53\n+   |\n+LL |     vec![1, 2, 3].into_iter().collect::<Vec<i32>>().sort_by_key(|i| i).sort();\n+   |                                                     ^^^^^^^^^^^ this call modifies its receiver in-place\n+\n+error[E0308]: mismatched types\n+  --> $DIR/chain-method-call-mutation-in-place.rs:7:5\n    |\n LL | fn foo(mut s: String) -> String {\n    |                          ------ expected `String` because of return type\n LL |     s.push_str(\"asdf\")\n    |     ^^^^^^^^^^^^^^^^^^ expected `String`, found `()`\n    |\n note: method `push_str` modifies its receiver in-place\n-  --> $DIR/chain-method-call-mutation-in-place.rs:3:7\n+  --> $DIR/chain-method-call-mutation-in-place.rs:7:7\n    |\n LL |     s.push_str(\"asdf\")\n    |     - ^^^^^^^^ this call modifies `s` in-place\n    |     |\n    |     you probably want to use this value after calling the method...\n    = note: ...instead of the `()` output of method `push_str`\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0599.\n+For more information about an error, try `rustc --explain E0308`."}]}