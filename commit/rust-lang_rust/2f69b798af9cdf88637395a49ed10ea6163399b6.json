{"sha": "2f69b798af9cdf88637395a49ed10ea6163399b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjliNzk4YWY5Y2RmODg2MzczOTVhNDllZDEwZWE2MTYzMzk5YjY=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-02-07T19:22:47Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-05-02T13:36:11Z"}, "message": "give a universe to region variables", "tree": {"sha": "0e5bfeb840c446cc5cc1ff01f694f4f64ed821bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e5bfeb840c446cc5cc1ff01f694f4f64ed821bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f69b798af9cdf88637395a49ed10ea6163399b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f69b798af9cdf88637395a49ed10ea6163399b6", "html_url": "https://github.com/rust-lang/rust/commit/2f69b798af9cdf88637395a49ed10ea6163399b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f69b798af9cdf88637395a49ed10ea6163399b6/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6234a898287fc2241f81373d9ad289788b49ebf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6234a898287fc2241f81373d9ad289788b49ebf1", "html_url": "https://github.com/rust-lang/rust/commit/6234a898287fc2241f81373d9ad289788b49ebf1"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "e40282aea089ed9cf3a7743e584b973e59b8e546", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f69b798af9cdf88637395a49ed10ea6163399b6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f69b798af9cdf88637395a49ed10ea6163399b6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=2f69b798af9cdf88637395a49ed10ea6163399b6", "patch": "@@ -884,7 +884,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ///   during diagnostics / error-reporting.\n     pub fn next_region_var(&self, origin: RegionVariableOrigin)\n                            -> ty::Region<'tcx> {\n-        self.tcx.mk_region(ty::ReVar(self.borrow_region_constraints().new_region_var(origin)))\n+        let region_var = self.borrow_region_constraints()\n+            .new_region_var(self.universe, origin);\n+        self.tcx.mk_region(ty::ReVar(region_var))\n     }\n \n     /// Number of region variables created so far."}, {"sha": "b2a580420c6a6637acd5cf8e564510bd16a6dabc", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2f69b798af9cdf88637395a49ed10ea6163399b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f69b798af9cdf88637395a49ed10ea6163399b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=2f69b798af9cdf88637395a49ed10ea6163399b6", "patch": "@@ -25,9 +25,7 @@ use ty::ReStatic;\n use ty::{BrFresh, ReLateBound, ReSkolemized, ReVar};\n \n use std::collections::BTreeMap;\n-use std::fmt;\n-use std::mem;\n-use std::u32;\n+use std::{cmp, fmt, mem, u32};\n \n mod taint;\n \n@@ -233,6 +231,7 @@ type CombineMap<'tcx> = FxHashMap<TwoRegions<'tcx>, RegionVid>;\n #[derive(Debug, Clone, Copy)]\n pub struct RegionVariableInfo {\n     pub origin: RegionVariableOrigin,\n+    pub universe: ty::UniverseIndex,\n }\n \n pub struct RegionSnapshot {\n@@ -438,9 +437,12 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n     }\n \n-    pub fn new_region_var(&mut self, origin: RegionVariableOrigin) -> RegionVid {\n+    pub fn new_region_var(&mut self,\n+                          universe: ty::UniverseIndex,\n+                          origin: RegionVariableOrigin) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo {\n             origin,\n+            universe,\n         });\n \n         let u_vid = self.unification_table\n@@ -457,6 +459,11 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         return vid;\n     }\n \n+    /// Returns the universe for the given variable.\n+    pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {\n+        self.var_infos[vid].universe\n+    }\n+\n     /// Returns the origin for the given variable.\n     pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {\n         self.var_infos[vid].origin\n@@ -812,7 +819,10 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         if let Some(&c) = self.combine_map(t).get(&vars) {\n             return tcx.mk_region(ReVar(c));\n         }\n-        let c = self.new_region_var(MiscVariable(origin.span()));\n+        let a_universe = self.universe(a);\n+        let b_universe = self.universe(b);\n+        let c_universe = cmp::max(a_universe, b_universe);\n+        let c = self.new_region_var(c_universe, MiscVariable(origin.span()));\n         self.combine_map(t).insert(vars, c);\n         if self.in_snapshot() {\n             self.undo_log.push(AddCombination(t, vars));\n@@ -828,6 +838,22 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         new_r\n     }\n \n+    fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {\n+        match *region {\n+            ty::ReScope(..) |\n+            ty::ReStatic |\n+            ty::ReEmpty |\n+            ty::ReErased |\n+            ty::ReFree(..) |\n+            ty::ReEarlyBound(..) => ty::UniverseIndex::ROOT,\n+            ty::ReSkolemized(universe, _) => universe,\n+            ty::ReClosureBound(vid) |\n+            ty::ReVar(vid) => self.var_universe(vid),\n+            ty::ReLateBound(..) =>\n+                bug!(\"universe(): encountered bound region {:?}\", region),\n+        }\n+    }\n+\n     pub fn vars_created_since_snapshot(&self, mark: &RegionSnapshot) -> Vec<RegionVid> {\n         self.undo_log[mark.length..]\n             .iter()"}]}