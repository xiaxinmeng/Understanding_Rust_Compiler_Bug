{"sha": "ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMDJiZjcwZTAxZjQ4ZGMwMGI4MjYyMGZmMTIxZWVkYzllN2RiN2M=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-15T00:27:27Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-05T19:01:38Z"}, "message": "removed some interner fields", "tree": {"sha": "752463af841d435838ba80ee5a85facdf5b1b6c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752463af841d435838ba80ee5a85facdf5b1b6c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "html_url": "https://github.com/rust-lang/rust/commit/ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1537056982c14771182b4fe0c5def5aa54d1bf0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1537056982c14771182b4fe0c5def5aa54d1bf0e", "html_url": "https://github.com/rust-lang/rust/commit/1537056982c14771182b4fe0c5def5aa54d1bf0e"}], "stats": {"total": 141, "additions": 66, "deletions": 75}, "files": [{"sha": "928f7d5a79179e6eab1d7508f49aacf506259576", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -39,6 +39,7 @@ use syntax::attr;\n use syntax::codemap;\n use syntax::diagnostic;\n use syntax::parse;\n+use syntax::parse::token;\n use syntax::print::{pp, pprust};\n use syntax;\n \n@@ -230,7 +231,7 @@ pub fn compile_rest(sess: Session,\n                               sess.filesearch,\n                               session::sess_os_to_meta_os(sess.targ_cfg.os),\n                               sess.opts.is_static,\n-                              sess.parse_sess.interner));\n+                              token::get_ident_interner()));\n \n     let lang_items = time(time_passes, ~\"language item collection\", ||\n                           middle::lang_items::collect_language_items(crate, sess));\n@@ -455,7 +456,7 @@ pub fn pretty_print_input(sess: Session, cfg: ast::crate_cfg, input: &input,\n     let is_expanded = upto != cu_parse;\n     let src = sess.codemap.get_filemap(source_name(input)).src;\n     do io::with_str_reader(*src) |rdr| {\n-        pprust::print_crate(sess.codemap, sess.parse_sess.interner,\n+        pprust::print_crate(sess.codemap, token::get_ident_interner(),\n                             sess.span_diagnostic, crate.unwrap(),\n                             source_name(input),\n                             rdr, io::stdout(), ann, is_expanded);\n@@ -754,7 +755,7 @@ pub fn build_session_(sopts: @session::options,\n     let target_cfg = build_target_config(sopts, demitter);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,\n                                                     cm);\n-    let cstore = @mut cstore::mk_cstore(p_s.interner);\n+    let cstore = @mut cstore::mk_cstore(token::get_ident_interner());\n     let filesearch = filesearch::mk_filesearch(\n         &sopts.maybe_sysroot,\n         sopts.target_triple,\n@@ -963,7 +964,7 @@ pub fn early_error(emitter: diagnostic::Emitter, msg: ~str) -> ! {\n \n pub fn list_metadata(sess: Session, path: &Path, out: @io::Writer) {\n     metadata::loader::list_file_metadata(\n-        sess.parse_sess.interner,\n+        token::get_ident_interner(),\n         session::sess_os_to_meta_os(sess.targ_cfg.os), path, out);\n }\n "}, {"sha": "05302b8cca1ed5aac9c3c6b52542eb61d8662a32", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -26,6 +26,7 @@ use syntax::diagnostic;\n use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n use syntax::abi;\n+use syntax::parse::token;\n use syntax;\n \n use core::hashmap::HashMap;\n@@ -294,13 +295,13 @@ impl Session_ {\n     }\n \n     pub fn str_of(@self, id: ast::ident) -> @~str {\n-        self.parse_sess.interner.get(id)\n+        token::get_ident_interner().get(id)\n     }\n     pub fn ident_of(@self, st: &str) -> ast::ident {\n-        self.parse_sess.interner.intern(st)\n+        token::get_ident_interner().intern(st)\n     }\n     pub fn intr(@self) -> @syntax::parse::token::ident_interner {\n-        self.parse_sess.interner\n+        token::get_ident_interner()\n     }\n }\n "}, {"sha": "5906fa7310f4bafff31d5052bbf409474de68eb8", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -22,6 +22,7 @@ use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};\n use syntax::codemap;\n use syntax::ext::base::ExtCtxt;\n use syntax::fold;\n+use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n@@ -143,7 +144,7 @@ fn fold_item(cx: @mut TestCtxt, i: @ast::item, fld: @fold::ast_fold)\n           -> Option<@ast::item> {\n     cx.path.push(i.ident);\n     debug!(\"current path: %s\",\n-           ast_util::path_name_i(copy cx.path, cx.sess.parse_sess.interner));\n+           ast_util::path_name_i(copy cx.path, token::get_ident_interner()));\n \n     if is_test_fn(cx, i) || is_bench_fn(i) {\n         match i.node {\n@@ -412,12 +413,12 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::expr {\n     let ext_cx = cx.ext_cx;\n \n     debug!(\"encoding %s\", ast_util::path_name_i(path,\n-                                                cx.sess.parse_sess.interner));\n+                                                token::get_ident_interner()));\n \n     let name_lit: ast::lit =\n         nospan(ast::lit_str(@ast_util::path_name_i(\n             path,\n-            cx.sess.parse_sess.interner)));\n+            token::get_ident_interner())));\n \n     let name_expr = @ast::expr {\n           id: cx.sess.next_node_id(),"}, {"sha": "871bc65afc657cc449aece3106a4af6931ccec27", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -43,6 +43,7 @@ use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n use syntax::parse::token::special_idents;\n use syntax::{ast_util, visit};\n+use syntax::parse::token;\n use syntax;\n use writer = extra::ebml::writer;\n \n@@ -142,7 +143,7 @@ fn add_to_index(ecx: @EncodeContext,\n     index.push(\n         entry {\n             val: ast_util::path_name_i(full_path,\n-                                       ecx.tcx.sess.parse_sess.interner),\n+                                       token::get_ident_interner()),\n             pos: ebml_w.writer.tell()\n         });\n }\n@@ -485,8 +486,7 @@ fn encode_info_for_mod(ecx: @EncodeContext,\n                         (%?/%?)\",\n                         *ecx.tcx.sess.str_of(ident),\n                         did,\n-                        ast_map::node_id_to_str(ecx.tcx.items, did, ecx.tcx\n-                                                .sess.parse_sess.interner));\n+                        ast_map::node_id_to_str(ecx.tcx.items, did, token::get_ident_interner()));\n \n                 ebml_w.start_tag(tag_mod_impl);\n                 ebml_w.wr_str(def_to_str(local_def(did)));"}, {"sha": "b9b78e5827db04c501fabd68abbf7b1054542189", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -41,6 +41,7 @@ use syntax::codemap::span;\n use syntax::codemap;\n use syntax::fold::*;\n use syntax::fold;\n+use syntax::parse::token;\n use syntax;\n use writer = extra::ebml::writer;\n \n@@ -86,7 +87,7 @@ pub fn encode_inlined_item(ecx: @e::EncodeContext,\n                            ii: ast::inlined_item,\n                            maps: Maps) {\n     debug!(\"> Encoding inlined item: %s::%s (%u)\",\n-           ast_map::path_to_str(path, ecx.tcx.sess.parse_sess.interner),\n+           ast_map::path_to_str(path, token::get_ident_interner()),\n            *ecx.tcx.sess.str_of(ii.ident()),\n            ebml_w.writer.tell());\n \n@@ -99,7 +100,7 @@ pub fn encode_inlined_item(ecx: @e::EncodeContext,\n     ebml_w.end_tag();\n \n     debug!(\"< Encoded inlined fn: %s::%s (%u)\",\n-           ast_map::path_to_str(path, ecx.tcx.sess.parse_sess.interner),\n+           ast_map::path_to_str(path, token::get_ident_interner()),\n            *ecx.tcx.sess.str_of(ii.ident()),\n            ebml_w.writer.tell());\n }\n@@ -119,7 +120,7 @@ pub fn decode_inlined_item(cdata: @cstore::crate_metadata,\n       None => None,\n       Some(ast_doc) => {\n         debug!(\"> Decoding inlined fn: %s::?\",\n-               ast_map::path_to_str(path, tcx.sess.parse_sess.interner));\n+               ast_map::path_to_str(path, token::get_ident_interner()));\n         let mut ast_dsr = reader::Decoder(ast_doc);\n         let from_id_range = Decodable::decode(&mut ast_dsr);\n         let to_id_range = reserve_id_range(dcx.tcx.sess, from_id_range);\n@@ -132,7 +133,7 @@ pub fn decode_inlined_item(cdata: @cstore::crate_metadata,\n         let ii = renumber_ast(xcx, raw_ii);\n         debug!(\"Fn named: %s\", *tcx.sess.str_of(ii.ident()));\n         debug!(\"< Decoded inlined fn: %s::%s\",\n-               ast_map::path_to_str(path, tcx.sess.parse_sess.interner),\n+               ast_map::path_to_str(path, token::get_ident_interner()),\n                *tcx.sess.str_of(ii.ident()));\n         ast_map::map_decoded_item(tcx.sess.diagnostic(),\n                                   dcx.tcx.items, path, &ii);\n@@ -1167,7 +1168,7 @@ impl fake_ext_ctxt for fake_session {\n         }\n     }\n     fn ident_of(&self, st: &str) -> ast::ident {\n-        self.interner.intern(st)\n+        token::get_ident_interner().intern(st)\n     }\n }\n \n@@ -1236,9 +1237,9 @@ fn test_simplification() {\n     match (item_out, item_exp) {\n       (ast::ii_item(item_out), ast::ii_item(item_exp)) => {\n         assert!(pprust::item_to_str(item_out,\n-                                         ext_cx.parse_sess().interner)\n+                                    token::get_ident_interner())\n                      == pprust::item_to_str(item_exp,\n-                                            ext_cx.parse_sess().interner));\n+                                            token::get_ident_interner()));\n       }\n       _ => fail!()\n     }"}, {"sha": "39564dcff25e4cbfe6afa14b85766fb55ecc5c00", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -35,6 +35,7 @@ use syntax::ast_util::{Private, Public, is_local};\n use syntax::ast_util::{variant_visibility_to_privacy, visibility_to_privacy};\n use syntax::attr;\n use syntax::codemap::span;\n+use syntax::parse::token;\n use syntax::visit;\n \n pub fn check_crate(tcx: ty::ctxt,\n@@ -120,7 +121,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                                        ast_map::node_id_to_str(\n                                             tcx.items,\n                                             method_id,\n-                                            tcx.sess.parse_sess.interner)));\n+                                           token::get_ident_interner())));\n             }\n             None => {\n                 tcx.sess.span_bug(span, \"method not found in \\\n@@ -184,7 +185,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                                        ast_map::node_id_to_str(\n                                             tcx.items,\n                                             method_id,\n-                                            tcx.sess.parse_sess.interner)));\n+                                           token::get_ident_interner())));\n             }\n             None => {\n                 tcx.sess.span_bug(span, \"method not found in \\\n@@ -216,9 +217,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                                            ast_map::node_id_to_str(\n                                                 tcx.items,\n                                                 item_id,\n-                                                tcx.sess\n-                                                   .parse_sess\n-                                                   .interner)));\n+                                               token::get_ident_interner())));\n                 }\n                 None => {\n                     tcx.sess.span_bug(span, \"item not found in AST map?!\");\n@@ -236,8 +235,8 @@ pub fn check_crate(tcx: ty::ctxt,\n             if field.ident != ident { loop; }\n             if field.vis == private {\n                 tcx.sess.span_err(span, fmt!(\"field `%s` is private\",\n-                                             *tcx.sess.parse_sess.interner\n-                                                 .get(ident)));\n+                                             *token::get_ident_interner()\n+                                             .get(ident)));\n             }\n             break;\n         }\n@@ -257,9 +256,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                      !privileged_items.contains(&(container_id.node))) {\n                 tcx.sess.span_err(span,\n                                   fmt!(\"method `%s` is private\",\n-                                       *tcx.sess\n-                                           .parse_sess\n-                                           .interner\n+                                       *token::get_ident_interner()\n                                            .get(*name)));\n             }\n         } else {\n@@ -268,7 +265,7 @@ pub fn check_crate(tcx: ty::ctxt,\n             if visibility != public {\n                 tcx.sess.span_err(span,\n                                   fmt!(\"method `%s` is private\",\n-                                       *tcx.sess.parse_sess.interner\n+                                       *token::get_ident_interner()\n                                            .get(*name)));\n             }\n         }\n@@ -289,9 +286,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                             !privileged_items.contains(&def_id.node) {\n                         tcx.sess.span_err(span,\n                                           fmt!(\"function `%s` is private\",\n-                                               *tcx.sess\n-                                                   .parse_sess\n-                                                   .interner\n+                                               *token::get_ident_interner()\n                                                    .get(copy *path\n                                                              .idents\n                                                              .last())));\n@@ -300,9 +295,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                                                        def_id) != public {\n                     tcx.sess.span_err(span,\n                                       fmt!(\"function `%s` is private\",\n-                                           *tcx.sess\n-                                               .parse_sess\n-                                               .interner\n+                                           *token::get_ident_interner()\n                                                .get(copy *path\n                                                          .idents\n                                                          .last())));\n@@ -350,10 +343,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                                                                     `%s` \\\n                                                                     is \\\n                                                                     private\",\n-                                                                   *tcx\n-                                                                   .sess\n-                                                                   .parse_sess\n-                                                                   .interner\n+                                                                   *token::get_ident_interner()\n                                                                    .get\n                                                                    (method\n                                                                     .ident)));"}, {"sha": "5ccb38b960d5883ec9af7d2673b7cbc4dcf9e414", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -30,6 +30,7 @@ use core::hashmap::{HashMap, HashSet};\n use syntax::ast_map;\n use syntax::codemap::span;\n use syntax::print::pprust;\n+use syntax::parse::token;\n use syntax::parse::token::special_idents;\n use syntax::{ast, visit};\n \n@@ -595,7 +596,7 @@ impl DetermineRpCtxt {\n \n         debug!(\"add_rp() variance for %s: %? == %? ^ %?\",\n                ast_map::node_id_to_str(self.ast_map, id,\n-                                       self.sess.parse_sess.interner),\n+                                       token::get_ident_interner()),\n                joined_variance, old_variance, variance);\n \n         if Some(joined_variance) != old_variance {\n@@ -614,9 +615,9 @@ impl DetermineRpCtxt {\n         debug!(\"add dependency from %d -> %d (%s -> %s) with variance %?\",\n                from, self.item_id,\n                ast_map::node_id_to_str(self.ast_map, from,\n-                                       self.sess.parse_sess.interner),\n+                                       token::get_ident_interner()),\n                ast_map::node_id_to_str(self.ast_map, self.item_id,\n-                                       self.sess.parse_sess.interner),\n+                                       token::get_ident_interner()),\n                copy self.ambient_variance);\n         let vec = match self.dep_map.find(&from) {\n             Some(&vec) => vec,\n@@ -951,7 +952,7 @@ pub fn determine_rp_in_crate(sess: Session,\n             debug!(\"item %? (%s) is parameterized with variance %?\",\n                    key,\n                    ast_map::node_id_to_str(ast_map, key,\n-                                           sess.parse_sess.interner),\n+                                           token::get_ident_interner()),\n                    value);\n         }\n         \"----\""}, {"sha": "5004ee670ff1f9ff5f22daaa263fbe5e04a1a15d", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -28,6 +28,7 @@ use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::ast_util::{Privacy, Public, Private};\n use syntax::ast_util::{variant_visibility_to_privacy, visibility_to_privacy};\n use syntax::attr::{attr_metas, contains_name};\n+use syntax::parse::token;\n use syntax::parse::token::ident_interner;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::path_to_str;\n@@ -805,8 +806,7 @@ pub fn Resolver(session: Session,\n         self_ident: special_idents::self_,\n         type_self_ident: special_idents::type_self,\n \n-        primitive_type_table: @PrimitiveTypeTable(session.\n-                                                  parse_sess.interner),\n+        primitive_type_table: @PrimitiveTypeTable(token::get_ident_interner()),\n \n         namespaces: ~[ TypeNS, ValueNS ],\n \n@@ -2942,7 +2942,7 @@ impl Resolver {\n                                  module_: @mut Module,\n                                  module_path: &[ident])\n                                  -> ResolveResult<ModulePrefixResult> {\n-        let interner = self.session.parse_sess.interner;\n+        let interner = token::get_ident_interner();\n \n         // Start at the current module if we see `self` or `super`, or at the\n         // top of the crate otherwise."}, {"sha": "cce7a577ff70ede04bec58af8acc0e9e6a422045", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -78,7 +78,8 @@ use syntax::ast_map::{path, path_elt_to_str, path_name};\n use syntax::ast_util::{local_def, path_to_ident};\n use syntax::attr;\n use syntax::codemap::span;\n-use syntax::parse::token::special_idents;\n+use syntax::parse::token;\n+use syntax::parse::token::{special_idents};\n use syntax::print::pprust::stmt_to_str;\n use syntax::visit;\n use syntax::{ast, ast_util, codemap, ast_map};\n@@ -2257,10 +2258,10 @@ pub fn register_fn_fuller(ccx: @CrateContext,\n                           -> ValueRef {\n     debug!(\"register_fn_fuller creating fn for item %d with path %s\",\n            node_id,\n-           ast_map::path_to_str(path, ccx.sess.parse_sess.interner));\n+           ast_map::path_to_str(path, token::get_ident_interner()));\n \n     let ps = if attr::attrs_contains_name(attrs, \"no_mangle\") {\n-        path_elt_to_str(*path.last(), ccx.sess.parse_sess.interner)\n+        path_elt_to_str(*path.last(), token::get_ident_interner())\n     } else {\n         mangle_exported_name(ccx, /*bad*/copy path, node_type)\n     };\n@@ -2504,7 +2505,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                 }\n                 ast::foreign_item_const(*) => {\n                     let typ = ty::node_id_to_type(tcx, ni.id);\n-                    let ident = ccx.sess.parse_sess.interner.get(ni.ident);\n+                    let ident = token::get_ident_interner().get(ni.ident);\n                     let g = do str::as_c_str(*ident) |buf| {\n                         unsafe {\n                             llvm::LLVMAddGlobal(ccx.llmod,\n@@ -3069,7 +3070,7 @@ pub fn trans_crate(sess: session::Session,\n         lib::llvm::associate_type(tn, @\"tydesc\", tydesc_type);\n         let crate_map = decl_crate_map(sess, link_meta, llmod);\n         let dbg_cx = if sess.opts.debuginfo {\n-            Some(debuginfo::mk_ctxt(copy llmod_id, sess.parse_sess.interner))\n+            Some(debuginfo::mk_ctxt(copy llmod_id, token::get_ident_interner()))\n         } else {\n             None\n         };\n@@ -3104,7 +3105,7 @@ pub fn trans_crate(sess: session::Session,\n               lltypes: @mut HashMap::new(),\n               llsizingtypes: @mut HashMap::new(),\n               adt_reprs: @mut HashMap::new(),\n-              names: new_namegen(sess.parse_sess.interner),\n+              names: new_namegen(token::get_ident_interner()),\n               next_addrspace: new_addrspace_gen(),\n               symbol_hasher: symbol_hasher,\n               type_hashcodes: @mut HashMap::new(),"}, {"sha": "e2eaef9cbfe96029e941dbc031a1b0faf5a0524f", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -41,6 +41,7 @@ use syntax::{ast, ast_util};\n use syntax::{attr, ast_map};\n use syntax::opt_vec;\n use syntax::parse::token::special_idents;\n+use syntax::parse::token;\n use syntax::abi::{X86, X86_64, Arm, Mips};\n use syntax::abi::{RustIntrinsic, Rust, Stdcall, Fastcall,\n                   Cdecl, Aapcs, C};\n@@ -343,8 +344,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                 }\n             }\n             ast::foreign_item_const(*) => {\n-                let ident = ccx.sess.parse_sess.interner.get(\n-                    foreign_item.ident);\n+                let ident = token::get_ident_interner().get(foreign_item.ident);\n                 ccx.item_symbols.insert(foreign_item.id, copy *ident);\n             }\n         }"}, {"sha": "9c84b4ffa997f2298435d37e4d652c45696a7bfe", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -42,6 +42,7 @@ use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_map;\n use syntax::ast_util;\n+use syntax::parse::token;\n use syntax::visit;\n \n pub type type_uses = uint; // Bitmask\n@@ -170,7 +171,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n                               ast_map::node_id_to_str(\n                                 ccx.tcx.items,\n                                 fn_id_loc.node,\n-                                ccx.tcx.sess.parse_sess.interner)));\n+                                token::get_ident_interner())));\n       }\n     }\n     let Context { uses, _ } = cx;"}, {"sha": "363af7c9e56cac2d0e7a26d3c287271640f33dba", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -43,6 +43,7 @@ use syntax::ast_util;\n use syntax::attr;\n use syntax::codemap::span;\n use syntax::codemap;\n+use syntax::parse::token;\n use syntax::parse::token::special_idents;\n use syntax::{ast, ast_map};\n use syntax::opt_vec::OptVec;\n@@ -2819,7 +2820,7 @@ pub fn node_id_to_trait_ref(cx: ctxt, id: ast::node_id) -> @ty::TraitRef {\n        None => cx.sess.bug(\n            fmt!(\"node_id_to_trait_ref: no trait ref for node `%s`\",\n                 ast_map::node_id_to_str(cx.items, id,\n-                                        cx.sess.parse_sess.interner)))\n+                                        token::get_ident_interner())))\n     }\n }\n \n@@ -2830,7 +2831,7 @@ pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n        None => cx.sess.bug(\n            fmt!(\"node_id_to_type: no type for node `%s`\",\n                 ast_map::node_id_to_str(cx.items, id,\n-                                        cx.sess.parse_sess.interner)))\n+                                        token::get_ident_interner())))\n     }\n }\n \n@@ -3821,7 +3822,7 @@ pub fn substd_enum_variants(cx: ctxt,\n }\n \n pub fn item_path_str(cx: ctxt, id: ast::def_id) -> ~str {\n-    ast_map::path_to_str(item_path(cx, id), cx.sess.parse_sess.interner)\n+    ast_map::path_to_str(item_path(cx, id), token::get_ident_interner())\n }\n \n pub enum DtorKind {\n@@ -4107,7 +4108,7 @@ pub fn lookup_struct_fields(cx: ctxt, did: ast::def_id) -> ~[field_ty] {\n            cx.sess.bug(\n                fmt!(\"struct ID not bound to an item: %s\",\n                     ast_map::node_id_to_str(cx.items, did.node,\n-                                            cx.sess.parse_sess.interner)));\n+                                            token::get_ident_interner())));\n        }\n     }\n         }"}, {"sha": "c69aeeb4aa8b890443e4dfa64906e203a56fc5ac", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -127,6 +127,7 @@ use syntax::codemap::span;\n use syntax::codemap;\n use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n+use syntax::parse::token;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust;\n use syntax::visit;\n@@ -815,7 +816,7 @@ impl FnCtxt {\n                     fmt!(\"no type for node %d: %s in fcx %s\",\n                          id, ast_map::node_id_to_str(\n                              self.tcx().items, id,\n-                             self.tcx().sess.parse_sess.interner),\n+                             token::get_ident_interner()),\n                          self.tag()));\n             }\n         }\n@@ -829,7 +830,7 @@ impl FnCtxt {\n                     fmt!(\"no type substs for node %d: %s in fcx %s\",\n                          id, ast_map::node_id_to_str(\n                              self.tcx().items, id,\n-                             self.tcx().sess.parse_sess.interner),\n+                             token::get_ident_interner()),\n                          self.tag()));\n             }\n         }"}, {"sha": "c3c8ddbf7c971645761554041444f7d4f73f8732", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -28,6 +28,7 @@ use middle::typeck;\n use syntax::abi::AbiSet;\n use syntax::ast_map;\n use syntax::codemap::span;\n+use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n@@ -200,7 +201,7 @@ pub fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> ~str {\n       _ => { cx.sess.bug(\n           fmt!(\"re_scope refers to %s\",\n                ast_map::node_id_to_str(cx.items, node_id,\n-                                       cx.sess.parse_sess.interner))) }\n+                                       token::get_ident_interner()))) }\n     }\n }\n "}, {"sha": "88482c94336dab503018c494d1f650582245e125", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -174,7 +174,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n         _ => fail!()\n     };\n     debug!(\"recording input into repl history\");\n-    record(repl, blk, sess.parse_sess.interner)\n+    record(repl, blk, token::get_ident_interner())\n }\n \n // Compiles a crate given by the filename as a library if the compiled"}, {"sha": "06a03ad5a9b44933f17e1e9c8228bdeacb668ba4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -849,7 +849,7 @@ mod test {\n         };\n         let table = @mut new_sctable();\n         let a_name = 100; // enforced by testing_interner\n-        let a2_name = sess.interner.gensym(\"a2\").name;\n+        let a2_name = get_ident_interner().gensym(\"a2\").name;\n         let renamer = new_ident_renamer(ast::ident{name:a_name,ctxt:empty_ctxt},\n                                         a2_name,table);\n         let renamed_ast = fun_to_ident_folder(renamer).fold_item(item_ast).get();"}, {"sha": "fe93b5b688fd73644f3a2a6a39ec6878078b4cf4", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -31,7 +31,6 @@ pub trait reader {\n     fn next_token(@mut self) -> TokenAndSpan;\n     fn fatal(@mut self, ~str) -> !;\n     fn span_diag(@mut self) -> @span_handler;\n-    fn interner(@mut self) -> @token::ident_interner;\n     fn peek(@mut self) -> TokenAndSpan;\n     fn dup(@mut self) -> @reader;\n }\n@@ -122,7 +121,6 @@ impl reader for StringReader {\n         self.span_diagnostic.span_fatal(copy self.peek_span, m)\n     }\n     fn span_diag(@mut self) -> @span_handler { self.span_diagnostic }\n-    fn interner(@mut self) -> @token::ident_interner { get_ident_interner() }\n     fn peek(@mut self) -> TokenAndSpan {\n         TokenAndSpan {\n             tok: copy self.peek_tok,\n@@ -139,7 +137,6 @@ impl reader for TtReader {\n         self.sp_diag.span_fatal(copy self.cur_span, m);\n     }\n     fn span_diag(@mut self) -> @span_handler { self.sp_diag }\n-    fn interner(@mut self) -> @token::ident_interner { get_ident_interner() }\n     fn peek(@mut self) -> TokenAndSpan {\n         TokenAndSpan {\n             tok: copy self.cur_tok,"}, {"sha": "7ca2756c2117a72633228b094def8320eebbe65c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae02bf70e01f48dc00b82620ff121eedc9e7db7c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ae02bf70e01f48dc00b82620ff121eedc9e7db7c", "patch": "@@ -43,14 +43,10 @@ pub mod classify;\n pub mod obsolete;\n \n // info about a parsing session.\n-// This structure and the reader both have\n-// an interner associated with them. If they're\n-// not the same, bad things can happen.\n pub struct ParseSess {\n     cm: @codemap::CodeMap, // better be the same as the one in the reader!\n     next_id: node_id,\n     span_diagnostic: @span_handler, // better be the same as the one in the reader!\n-    interner: @ident_interner,\n }\n \n pub fn new_parse_sess(demitter: Option<Emitter>) -> @mut ParseSess {\n@@ -59,7 +55,6 @@ pub fn new_parse_sess(demitter: Option<Emitter>) -> @mut ParseSess {\n         cm: cm,\n         next_id: 1,\n         span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n-        interner: get_ident_interner(),\n     }\n }\n \n@@ -70,7 +65,6 @@ pub fn new_parse_sess_special_handler(sh: @span_handler,\n         cm: cm,\n         next_id: 1,\n         span_diagnostic: sh,\n-        interner: get_ident_interner(),\n     }\n }\n "}]}