{"sha": "afd83e0686512ad2678a2b0bad3b1421692a28bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZDgzZTA2ODY1MTJhZDI2NzhhMmIwYmFkM2IxNDIxNjkyYTI4YmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-01T20:24:40Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-01T20:24:40Z"}, "message": "Remove unnecessary region, relax `Sized` bounds", "tree": {"sha": "b3c34e9c041821acbad8d2d4518d719165268bd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c34e9c041821acbad8d2d4518d719165268bd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afd83e0686512ad2678a2b0bad3b1421692a28bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afd83e0686512ad2678a2b0bad3b1421692a28bf", "html_url": "https://github.com/rust-lang/rust/commit/afd83e0686512ad2678a2b0bad3b1421692a28bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afd83e0686512ad2678a2b0bad3b1421692a28bf/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d992ef559c9cd67551819a9d63ef52ef7b725f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d992ef559c9cd67551819a9d63ef52ef7b725f", "html_url": "https://github.com/rust-lang/rust/commit/39d992ef559c9cd67551819a9d63ef52ef7b725f"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "18c8ab246d561d0478d449b2dbeeec359ff08f7b", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afd83e0686512ad2678a2b0bad3b1421692a28bf/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd83e0686512ad2678a2b0bad3b1421692a28bf/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=afd83e0686512ad2678a2b0bad3b1421692a28bf", "patch": "@@ -16,7 +16,7 @@ use rustc_hash::FxHasher;\n type InternMap<T> = DashMap<Arc<T>, (), BuildHasherDefault<FxHasher>>;\n \n #[derive(Hash)]\n-pub struct Interned<T: Internable> {\n+pub struct Interned<T: Internable + ?Sized> {\n     arc: Arc<T>,\n }\n \n@@ -52,7 +52,7 @@ impl<T: Internable> Interned<T> {\n     }\n }\n \n-impl<T: Internable> Drop for Interned<T> {\n+impl<T: Internable + ?Sized> Drop for Interned<T> {\n     fn drop(&mut self) {\n         // When the last `Ref` is dropped, remove the object from the global map.\n         if Arc::strong_count(&self.arc) == 2 {\n@@ -83,23 +83,23 @@ impl<T: Internable> Drop for Interned<T> {\n }\n \n /// Compares interned `Ref`s using pointer equality.\n-impl<T: Internable> PartialEq for Interned<T> {\n+impl<T: Internable + ?Sized> PartialEq for Interned<T> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         Arc::ptr_eq(&self.arc, &other.arc)\n     }\n }\n \n-impl<T: Internable> Eq for Interned<T> {}\n+impl<T: Internable + ?Sized> Eq for Interned<T> {}\n \n-impl<T: Internable> AsRef<T> for Interned<T> {\n+impl<T: Internable + ?Sized> AsRef<T> for Interned<T> {\n     #[inline]\n     fn as_ref(&self) -> &T {\n         &self.arc\n     }\n }\n \n-impl<T: Internable> Deref for Interned<T> {\n+impl<T: Internable + ?Sized> Deref for Interned<T> {\n     type Target = T;\n \n     #[inline]\n@@ -108,40 +108,38 @@ impl<T: Internable> Deref for Interned<T> {\n     }\n }\n \n-impl<T: Internable> Clone for Interned<T> {\n+impl<T: Internable + ?Sized> Clone for Interned<T> {\n     fn clone(&self) -> Self {\n         Self { arc: self.arc.clone() }\n     }\n }\n \n-impl<T: Debug + Internable> Debug for Interned<T> {\n+impl<T: Debug + Internable + ?Sized> Debug for Interned<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         (*self.arc).fmt(f)\n     }\n }\n \n-pub struct InternStorage<T> {\n+pub struct InternStorage<T: ?Sized> {\n     map: OnceCell<InternMap<T>>,\n }\n \n-impl<T> InternStorage<T> {\n+impl<T: ?Sized> InternStorage<T> {\n     pub const fn new() -> Self {\n         Self { map: OnceCell::new() }\n     }\n }\n \n-impl<T: Internable> InternStorage<T> {\n+impl<T: Internable + ?Sized> InternStorage<T> {\n     fn get(&self) -> &InternMap<T> {\n         self.map.get_or_init(DashMap::default)\n     }\n }\n \n-pub trait Internable: Hash + Eq + Sized + 'static {\n+pub trait Internable: Hash + Eq + 'static {\n     fn storage() -> &'static InternStorage<Self>;\n }\n \n-// region:`Internable` implementations\n-\n macro_rules! impl_internable {\n     ( $($t:ty),+ $(,)? ) => { $(\n         impl Internable for $t {\n@@ -154,5 +152,3 @@ macro_rules! impl_internable {\n }\n \n impl_internable!(crate::type_ref::TypeRef, crate::type_ref::TraitRef, crate::path::ModPath);\n-\n-// endregion"}]}