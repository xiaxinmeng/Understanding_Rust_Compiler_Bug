{"sha": "aef4c955995468d7efec81b951a1414bd3278a23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjRjOTU1OTk1NDY4ZDdlZmVjODFiOTUxYTE0MTRiZDMyNzhhMjM=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-03T23:09:42Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:23:32Z"}, "message": "Fix the problem of sending pointed to thread local statics. Add a regression test.", "tree": {"sha": "04abaee5dac7e0093b05ea9b4589222172a8c33d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04abaee5dac7e0093b05ea9b4589222172a8c33d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef4c955995468d7efec81b951a1414bd3278a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef4c955995468d7efec81b951a1414bd3278a23", "html_url": "https://github.com/rust-lang/rust/commit/aef4c955995468d7efec81b951a1414bd3278a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef4c955995468d7efec81b951a1414bd3278a23/comments", "author": null, "committer": null, "parents": [{"sha": "92946b5a9cc52bfef2338b2075cec85561652449", "url": "https://api.github.com/repos/rust-lang/rust/commits/92946b5a9cc52bfef2338b2075cec85561652449", "html_url": "https://github.com/rust-lang/rust/commit/92946b5a9cc52bfef2338b2075cec85561652449"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "7ed5f1e5539f178d1a5a0b0e27176226ecc9e858", "filename": "src/machine.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aef4c955995468d7efec81b951a1414bd3278a23/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef4c955995468d7efec81b951a1414bd3278a23/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=aef4c955995468d7efec81b951a1414bd3278a23", "patch": "@@ -433,6 +433,29 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         Ok(())\n     }\n \n+    fn access_local(\n+        ecx: &InterpCx<'mir, 'tcx, Self>,\n+        frame: &Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>,\n+        local: mir::Local,\n+    ) -> InterpResult<'tcx, Operand<Self::PointerTag>> {\n+        match frame.body.local_decls[local].local_info {\n+            mir::LocalInfo::StaticRef { def_id, is_thread_local: true } => {\n+                let static_alloc_id = ecx.tcx.alloc_map.lock().create_static_alloc(def_id);\n+                let alloc_id = ecx.memory.extra.tls.get_or_register_allocation(*ecx.memory.tcx, static_alloc_id);\n+                let tag = Self::tag_global_base_pointer(&ecx.memory.extra, alloc_id);\n+                let pointer: Pointer = alloc_id.into();\n+                let pointer = pointer.with_tag(tag);\n+                let scalar: Scalar<_> = pointer.into();\n+                let scalar: ScalarMaybeUndef<_> = scalar.into();\n+                let immediate: Immediate<_> = scalar.into();\n+                Ok(\n+                    Operand::Immediate(immediate)\n+                )\n+            },\n+            _ => frame.locals[local].access(),\n+        }\n+    }\n+\n     fn canonical_alloc_id(mem: &Memory<'mir, 'tcx, Self>, id: AllocId) -> AllocId {\n         let tcx = mem.tcx;\n         let alloc = tcx.alloc_map.lock().get(id);"}, {"sha": "0506b7bdf83c02ee0294d5df4382eafcea9f3c0c", "filename": "tests/run-pass/concurrency/simple.stdout", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aef4c955995468d7efec81b951a1414bd3278a23/tests%2Frun-pass%2Fconcurrency%2Fsimple.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/aef4c955995468d7efec81b951a1414bd3278a23/tests%2Frun-pass%2Fconcurrency%2Fsimple.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.stdout?ref=aef4c955995468d7efec81b951a1414bd3278a23", "patch": "@@ -0,0 +1,10 @@\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet.\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet."}, {"sha": "1c268a4ff874a7d046feeb8ccac0e618448451c3", "filename": "tests/run-pass/concurrency/thread_locals.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aef4c955995468d7efec81b951a1414bd3278a23/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef4c955995468d7efec81b951a1414bd3278a23/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs?ref=aef4c955995468d7efec81b951a1414bd3278a23", "patch": "@@ -12,18 +12,24 @@ unsafe fn get_a_ref() -> *mut u8 {\n     &mut A\n }\n \n+struct Sender(*mut u8);\n+\n+unsafe impl Send for Sender {}\n+\n fn main() {\n \n-    unsafe {\n+    let ptr = unsafe {\n         let x = get_a_ref();\n         *x = 5;\n         assert_eq!(A, 5);\n         B = 15;\n         C = 25;\n-    }\n+        Sender(&mut A)\n+    };\n     \n-    thread::spawn(|| {\n+    thread::spawn(move || {\n         unsafe {\n+            assert_eq!(*ptr.0, 5);\n             assert_eq!(A, 0);\n             assert_eq!(B, 0);\n             assert_eq!(C, 25);\n@@ -32,6 +38,7 @@ fn main() {\n             let y = get_a_ref();\n             assert_eq!(*y, 0);\n             *y = 4;\n+            assert_eq!(*ptr.0, 5);\n             assert_eq!(A, 4);\n             assert_eq!(*get_a_ref(), 4);\n             \n@@ -45,4 +52,5 @@ fn main() {\n         assert_eq!(C, 24);\n     }\n     \n-}\n\\ No newline at end of file\n+}\n+"}, {"sha": "9a53b4a5c913b49107245073949dbaf1065058a9", "filename": "tests/run-pass/concurrency/thread_locals.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aef4c955995468d7efec81b951a1414bd3278a23/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/aef4c955995468d7efec81b951a1414bd3278a23/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stdout?ref=aef4c955995468d7efec81b951a1414bd3278a23", "patch": "@@ -0,0 +1 @@\n+WARNING: The thread support is experimental. For example, Miri does not detect data races yet."}]}