{"sha": "6189be13ab2dbd82759733f1106272893b833ef8", "node_id": "C_kwDOAAsO6NoAKDYxODliZTEzYWIyZGJkODI3NTk3MzNmMTEwNjI3Mjg5M2I4MzNlZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T15:34:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-14T15:34:32Z"}, "message": "Auto merge of #13952 - WaffleLapkin:either_ast_node2, r=lnicola\n\nminor: Use the fact that `Either`: `AstNode`\n\nContinuation of https://github.com/rust-lang/rust-analyzer/pull/13949", "tree": {"sha": "c48f62cfc15aee175c5888ff016b2db7a04e9c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c48f62cfc15aee175c5888ff016b2db7a04e9c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6189be13ab2dbd82759733f1106272893b833ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6189be13ab2dbd82759733f1106272893b833ef8", "html_url": "https://github.com/rust-lang/rust/commit/6189be13ab2dbd82759733f1106272893b833ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6189be13ab2dbd82759733f1106272893b833ef8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c78b9f006837d4435895653c3888939b0614c395", "url": "https://api.github.com/repos/rust-lang/rust/commits/c78b9f006837d4435895653c3888939b0614c395", "html_url": "https://github.com/rust-lang/rust/commit/c78b9f006837d4435895653c3888939b0614c395"}, {"sha": "a7787533af023d77804ad419ea23a1c6275aacc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7787533af023d77804ad419ea23a1c6275aacc0", "html_url": "https://github.com/rust-lang/rust/commit/a7787533af023d77804ad419ea23a1c6275aacc0"}], "stats": {"total": 42, "additions": 8, "deletions": 34}, "files": [{"sha": "9dc1da2461a3415086b5c07d237dd58f41c2b4a3", "filename": "crates/ide-assists/src/handlers/convert_named_struct_to_tuple_struct.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_named_struct_to_tuple_struct.rs?ref=6189be13ab2dbd82759733f1106272893b833ef8", "patch": "@@ -52,10 +52,7 @@ pub(crate) fn convert_named_struct_to_tuple_struct(\n     acc: &mut Assists,\n     ctx: &AssistContext<'_>,\n ) -> Option<()> {\n-    let strukt = ctx\n-        .find_node_at_offset::<ast::Struct>()\n-        .map(Either::Left)\n-        .or_else(|| ctx.find_node_at_offset::<ast::Variant>().map(Either::Right))?;\n+    let strukt = ctx.find_node_at_offset::<Either<ast::Struct, ast::Variant>>()?;\n     let field_list = strukt.as_ref().either(|s| s.field_list(), |v| v.field_list())?;\n     let record_fields = match field_list {\n         ast::FieldList::RecordFieldList(it) => it,"}, {"sha": "772e032fb29342aea0b9ed2e79472e4d1f84ff1b", "filename": "crates/ide-assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=6189be13ab2dbd82759733f1106272893b833ef8", "patch": "@@ -50,10 +50,7 @@ pub(crate) fn convert_tuple_struct_to_named_struct(\n     acc: &mut Assists,\n     ctx: &AssistContext<'_>,\n ) -> Option<()> {\n-    let strukt = ctx\n-        .find_node_at_offset::<ast::Struct>()\n-        .map(Either::Left)\n-        .or_else(|| ctx.find_node_at_offset::<ast::Variant>().map(Either::Right))?;\n+    let strukt = ctx.find_node_at_offset::<Either<ast::Struct, ast::Variant>>()?;\n     let field_list = strukt.as_ref().either(|s| s.field_list(), |v| v.field_list())?;\n     let tuple_fields = match field_list {\n         ast::FieldList::TupleFieldList(it) => it,"}, {"sha": "b310c2db9fab09bf273f0a5394723beab9e3d373", "filename": "crates/ide-assists/src/handlers/extract_type_alias.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_type_alias.rs?ref=6189be13ab2dbd82759733f1106272893b833ef8", "patch": "@@ -1,9 +1,6 @@\n use either::Either;\n use ide_db::syntax_helpers::node_ext::walk_ty;\n-use syntax::{\n-    ast::{self, edit::IndentLevel, make, AstNode, HasGenericParams, HasName},\n-    match_ast,\n-};\n+use syntax::ast::{self, edit::IndentLevel, make, AstNode, HasGenericParams, HasName};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -31,15 +28,8 @@ pub(crate) fn extract_type_alias(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n \n     let ty = ctx.find_node_at_range::<ast::Type>()?;\n     let item = ty.syntax().ancestors().find_map(ast::Item::cast)?;\n-    let assoc_owner = item.syntax().ancestors().nth(2).and_then(|it| {\n-        match_ast! {\n-            match it {\n-                ast::Trait(tr) => Some(Either::Left(tr)),\n-                ast::Impl(impl_) => Some(Either::Right(impl_)),\n-                _ => None,\n-            }\n-        }\n-    });\n+    let assoc_owner =\n+        item.syntax().ancestors().nth(2).and_then(Either::<ast::Trait, ast::Impl>::cast);\n     let node = assoc_owner.as_ref().map_or_else(\n         || item.syntax(),\n         |impl_| impl_.as_ref().either(AstNode::syntax, AstNode::syntax),"}, {"sha": "58dcaf9a221d8d65222e6b4d5458ecf727d88799", "filename": "crates/ide-assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=6189be13ab2dbd82759733f1106272893b833ef8", "patch": "@@ -20,10 +20,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // const test: Foo = Foo {foo: 1, bar: 0}\n // ```\n pub(crate) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n-    let record = ctx\n-        .find_node_at_offset::<ast::RecordExpr>()\n-        .map(Either::Left)\n-        .or_else(|| ctx.find_node_at_offset::<ast::RecordPat>().map(Either::Right))?;\n+    let record = ctx.find_node_at_offset::<Either<ast::RecordExpr, ast::RecordPat>>()?;\n \n     let path = record.as_ref().either(|it| it.path(), |it| it.path())?;\n     let ranks = compute_fields_ranks(&path, ctx)?;"}, {"sha": "f0c6505ee6ea0dd66f1232ad31e87ec7739de439", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189be13ab2dbd82759733f1106272893b833ef8/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=6189be13ab2dbd82759733f1106272893b833ef8", "patch": "@@ -230,15 +230,8 @@ fn hover_ranged(\n     config: &HoverConfig,\n ) -> Option<RangeInfo<HoverResult>> {\n     // FIXME: make this work in attributes\n-    let expr_or_pat = file.covering_element(range).ancestors().find_map(|it| {\n-        match_ast! {\n-            match it {\n-                ast::Expr(expr) => Some(Either::Left(expr)),\n-                ast::Pat(pat) => Some(Either::Right(pat)),\n-                _ => None,\n-            }\n-        }\n-    })?;\n+    let expr_or_pat =\n+        file.covering_element(range).ancestors().find_map(Either::<ast::Expr, ast::Pat>::cast)?;\n     let res = match &expr_or_pat {\n         Either::Left(ast::Expr::TryExpr(try_expr)) => render::try_expr(sema, config, try_expr),\n         Either::Left(ast::Expr::PrefixExpr(prefix_expr))"}]}