{"sha": "c668820365bc9c66408b993cda84d48532a9e0ce", "node_id": "C_kwDOAAsO6NoAKGM2Njg4MjAzNjViYzljNjY0MDhiOTkzY2RhODRkNDg1MzJhOWUwY2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-30T15:09:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-30T15:09:46Z"}, "message": "Rollup merge of #99311 - kckeiks:clean-up-body-owner-methods, r=cjgillot\n\nchange maybe_body_owned_by to take local def id\n\nIssue https://github.com/rust-lang/rust/issues/96341\nr? `@cjgillot`", "tree": {"sha": "90e65e0441dcd23ec2754377b6a3e1d4cbf2f2f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90e65e0441dcd23ec2754377b6a3e1d4cbf2f2f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c668820365bc9c66408b993cda84d48532a9e0ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5Um7CRBK7hj4Ov3rIwAAVQMIAHn2g8dI395xZcMaqi398sLK\ntE9Vh2Y1cXJ/c2ZxRjQXAF/TbvUolCEZEzcTlD5Znp/b4Uq6lWR1gYKfG0e29J8t\nF6ELc5chCC95qI1xFWWNlXq7iARtUebkDsvYxQOswP1Q5UTZM4DDNV8wcZwNE+LY\nFHVpV/FKuFuy9kc2uQSur8n9Skr7vQcD03y0gf9iUUSXMsSIU/6aEoKsV5yBQe98\nznMHXt/7xZ/H/V/aAfXuIY2GDl4brbyJ5vy4JN9ty5E9J9rcFo/m8ipnAvL0s5C2\nx7B4zZQXPr1Y4gdHQuB7uK8btwfNNH935S+/9uUPVyh0BRjsIpD1mhuUTiiRnhY=\n=mP+y\n-----END PGP SIGNATURE-----\n", "payload": "tree 90e65e0441dcd23ec2754377b6a3e1d4cbf2f2f9\nparent c907b6f7e0f89c3c4146b585961d2ddcf173584b\nparent 94611b81c7f002032baabb526b587d208c886f8e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659193786 +0530\ncommitter GitHub <noreply@github.com> 1659193786 +0530\n\nRollup merge of #99311 - kckeiks:clean-up-body-owner-methods, r=cjgillot\n\nchange maybe_body_owned_by to take local def id\n\nIssue https://github.com/rust-lang/rust/issues/96341\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c668820365bc9c66408b993cda84d48532a9e0ce", "html_url": "https://github.com/rust-lang/rust/commit/c668820365bc9c66408b993cda84d48532a9e0ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c668820365bc9c66408b993cda84d48532a9e0ce/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c907b6f7e0f89c3c4146b585961d2ddcf173584b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c907b6f7e0f89c3c4146b585961d2ddcf173584b", "html_url": "https://github.com/rust-lang/rust/commit/c907b6f7e0f89c3c4146b585961d2ddcf173584b"}, {"sha": "94611b81c7f002032baabb526b587d208c886f8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/94611b81c7f002032baabb526b587d208c886f8e", "html_url": "https://github.com/rust-lang/rust/commit/94611b81c7f002032baabb526b587d208c886f8e"}], "stats": {"total": 109, "additions": 58, "deletions": 51}, "files": [{"sha": "255c31d0b1a7a79804951f01155ca88e49426e95", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -353,9 +353,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // We use the statements were the binding was initialized, and inspect the HIR to look\n         // for the branching codepaths that aren't covered, to point at them.\n-        let hir_id = self.mir_hir_id();\n         let map = self.infcx.tcx.hir();\n-        let body_id = map.body_owned_by(hir_id);\n+        let body_id = map.body_owned_by(self.mir_def_id());\n         let body = map.body(body_id);\n \n         let mut visitor = ConditionVisitor { spans: &spans, name: &name, errors: vec![] };"}, {"sha": "ac26bc9c7f44fb90031962673d69b601ee70e005", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -853,7 +853,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let closure_id = self.mir_hir_id();\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n-        let item_id = hir.enclosing_body_owner(fn_call_id);\n+        let def_id = hir.enclosing_body_owner(fn_call_id);\n         let mut look_at_return = true;\n         // If we can detect the expression to be an `fn` call where the closure was an argument,\n         // we point at the `fn` definition argument...\n@@ -864,7 +864,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 .filter(|(_, arg)| arg.hir_id == closure_id)\n                 .map(|(pos, _)| pos)\n                 .next();\n-            let def_id = hir.local_def_id(item_id);\n             let tables = self.infcx.tcx.typeck(def_id);\n             if let Some(ty::FnDef(def_id, _)) =\n                 tables.node_type_opt(func.hir_id).as_ref().map(|ty| ty.kind())"}, {"sha": "f66b1a2976f1cd0427da976c31a92d50fddcef88", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -328,7 +328,7 @@ impl<'tcx> pprust_hir::PpAnn for TypedAnnotation<'tcx> {\n             let typeck_results = self.maybe_typeck_results.get().or_else(|| {\n                 self.tcx\n                     .hir()\n-                    .maybe_body_owned_by(self.tcx.hir().local_def_id_to_hir_id(expr.hir_id.owner))\n+                    .maybe_body_owned_by(expr.hir_id.owner)\n                     .map(|body_id| self.tcx.typeck_body(body_id))\n             });\n "}, {"sha": "3e9d491af62d37d7c202544f9ca95cdb0d808487", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -49,10 +49,10 @@ pub fn find_param_with_region<'tcx>(\n     };\n \n     let hir = &tcx.hir();\n-    let hir_id = hir.local_def_id_to_hir_id(id.as_local()?);\n-    let body_id = hir.maybe_body_owned_by(hir_id)?;\n-    let body = hir.body(body_id);\n+    let def_id = id.as_local()?;\n+    let hir_id = hir.local_def_id_to_hir_id(def_id);\n \n+    // FIXME: use def_kind\n     // Don't perform this on closures\n     match hir.get(hir_id) {\n         hir::Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n@@ -61,11 +61,14 @@ pub fn find_param_with_region<'tcx>(\n         _ => {}\n     }\n \n+    let body_id = hir.maybe_body_owned_by(def_id)?;\n+\n     let owner_id = hir.body_owner(body_id);\n     let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n     let poly_fn_sig = tcx.fn_sig(id);\n \n     let fn_sig = tcx.liberate_late_bound_regions(id, poly_fn_sig);\n+    let body = hir.body(body_id);\n     body.params\n         .iter()\n         .take(if fn_sig.c_variadic {"}, {"sha": "f0886036899a2f4cd8797f65799013f57288ebe2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -1616,7 +1616,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_info_for_anon_const(&mut self, id: hir::HirId) {\n         let def_id = self.tcx.hir().local_def_id(id);\n         debug!(\"EncodeContext::encode_info_for_anon_const({:?})\", def_id);\n-        let body_id = self.tcx.hir().body_owned_by(id);\n+        let body_id = self.tcx.hir().body_owned_by(def_id);\n         let const_data = self.encode_rendered_const_for_body(body_id);\n         let qualifs = self.tcx.mir_const_qualif(def_id);\n "}, {"sha": "47b04c33ec1cd67b131be9439b977f2997b3c862", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -396,10 +396,10 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn enclosing_body_owner(self, hir_id: HirId) -> HirId {\n+    pub fn enclosing_body_owner(self, hir_id: HirId) -> LocalDefId {\n         for (parent, _) in self.parent_iter(hir_id) {\n-            if let Some(body) = self.maybe_body_owned_by(parent) {\n-                return self.body_owner(body);\n+            if let Some(body) = self.find(parent).map(associated_body).flatten() {\n+                return self.body_owner_def_id(body);\n             }\n         }\n \n@@ -419,19 +419,20 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.body_owner(id))\n     }\n \n-    /// Given a `HirId`, returns the `BodyId` associated with it,\n+    /// Given a `LocalDefId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n-    pub fn maybe_body_owned_by(self, hir_id: HirId) -> Option<BodyId> {\n-        self.find(hir_id).map(associated_body).flatten()\n+    pub fn maybe_body_owned_by(self, id: LocalDefId) -> Option<BodyId> {\n+        self.get_if_local(id.to_def_id()).map(associated_body).flatten()\n     }\n \n     /// Given a body owner's id, returns the `BodyId` associated with it.\n-    pub fn body_owned_by(self, id: HirId) -> BodyId {\n+    pub fn body_owned_by(self, id: LocalDefId) -> BodyId {\n         self.maybe_body_owned_by(id).unwrap_or_else(|| {\n+            let hir_id = self.local_def_id_to_hir_id(id);\n             span_bug!(\n-                self.span(id),\n+                self.span(hir_id),\n                 \"body_owned_by: {} has no associated body\",\n-                self.node_to_string(id)\n+                self.node_to_string(hir_id)\n             );\n         })\n     }\n@@ -670,7 +671,7 @@ impl<'hir> Map<'hir> {\n     /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n     /// Used exclusively for diagnostics, to avoid suggestion function calls.\n     pub fn is_inside_const_context(self, hir_id: HirId) -> bool {\n-        self.body_const_context(self.local_def_id(self.enclosing_body_owner(hir_id))).is_some()\n+        self.body_const_context(self.enclosing_body_owner(hir_id)).is_some()\n     }\n \n     /// Retrieves the `HirId` for `id`'s enclosing method, unless there's a"}, {"sha": "211a614717f8b7fe22083a5800c2a6edc89e8485", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -157,8 +157,9 @@ pub fn provide(providers: &mut Providers) {\n     };\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();\n-        let hir_id = hir.local_def_id_to_hir_id(id.expect_local());\n-        if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+        let def_id = id.expect_local();\n+        let hir_id = hir.local_def_id_to_hir_id(def_id);\n+        if let Some(body_id) = hir.maybe_body_owned_by(def_id) {\n             tcx.arena.alloc_from_iter(hir.body_param_names(body_id))\n         } else if let Node::TraitItem(&TraitItem {\n             kind: TraitItemKind::Fn(_, TraitFn::Required(idents)),"}, {"sha": "55ad83f8975841cb15713ac7054b0574c2ac9574", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -626,7 +626,7 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n     if tcx.is_closure(def.did.to_def_id()) {\n         let hir = tcx.hir();\n         let owner = hir.enclosing_body_owner(hir.local_def_id_to_hir_id(def.did));\n-        tcx.ensure().thir_check_unsafety(hir.local_def_id(owner));\n+        tcx.ensure().thir_check_unsafety(owner);\n         return;\n     }\n "}, {"sha": "f7351a4caa9545250d59dcbf5c21a146724fcc27", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -21,7 +21,7 @@ pub(crate) fn thir_body<'tcx>(\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n ) -> Result<(&'tcx Steal<Thir<'tcx>>, ExprId), ErrorGuaranteed> {\n     let hir = tcx.hir();\n-    let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(owner_def.did)));\n+    let body = hir.body(hir.body_owned_by(owner_def.did));\n     let mut cx = Cx::new(tcx, owner_def);\n     if let Some(reported) = cx.typeck_results.tainted_by_errors {\n         return Err(reported);"}, {"sha": "063c076474e9027661b9be18d1e35c5885c379c4", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -26,7 +26,7 @@ use rustc_span::{BytePos, Span};\n pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match def_id.as_local() {\n         None => return,\n-        Some(id) => tcx.hir().body_owned_by(tcx.hir().local_def_id_to_hir_id(id)),\n+        Some(def_id) => tcx.hir().body_owned_by(def_id),\n     };\n \n     let pattern_arena = TypedArena::default();"}, {"sha": "13ae8a1cd3e2068a40fd09f026f4df61d8c34a45", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -464,15 +464,15 @@ fn check_unused_unsafe(\n     def_id: LocalDefId,\n     used_unsafe_blocks: &FxHashMap<HirId, UsedUnsafeBlockData>,\n ) -> Vec<(HirId, UnusedUnsafe)> {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let body_id = tcx.hir().maybe_body_owned_by(hir_id);\n+    let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n     let Some(body_id) = body_id else {\n         debug!(\"check_unused_unsafe({:?}) - no body found\", def_id);\n         return vec![];\n     };\n-    let body = tcx.hir().body(body_id);\n \n+    let body = tcx.hir().body(body_id);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let context = match tcx.hir().fn_sig_by_hir_id(hir_id) {\n         Some(sig) if sig.header.unsafety == hir::Unsafety::Unsafe => Context::UnsafeFn(hir_id),\n         _ => Context::Safe,"}, {"sha": "68d9bf22bf9c046f29fc567f37a1eda4ef44ff5a", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -15,8 +15,8 @@ pub fn provide(providers: &mut Providers) {\n             return None;\n         }\n \n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(hir_id)?);\n+        let local_def_id = def_id.expect_local();\n+        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(local_def_id)?);\n \n         let mut local_collector = LocalCollector::default();\n         local_collector.visit_body(body);"}, {"sha": "05a8754af814867c6ed61707eb1f615927acfd2e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -1790,8 +1790,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let generator_body = generator_did\n             .as_local()\n-            .map(|def_id| hir.local_def_id_to_hir_id(def_id))\n-            .and_then(|hir_id| hir.maybe_body_owned_by(hir_id))\n+            .and_then(|def_id| hir.maybe_body_owned_by(def_id))\n             .map(|body_id| hir.body(body_id));\n         let is_async = match generator_did.as_local() {\n             Some(_) => generator_body\n@@ -2759,7 +2758,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let body_hir_id = obligation.cause.body_id;\n         let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n \n-        if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n+        if let Some(body_id) =\n+            self.tcx.hir().maybe_body_owned_by(self.tcx.hir().local_def_id(item_id))\n+        {\n             let body = self.tcx.hir().body(body_id);\n             if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n                 let future_trait = self.tcx.require_lang_item(LangItem::Future, None);"}, {"sha": "b1af3051719e85ae348628ad4669581fa58a8cd2", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -207,9 +207,14 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         constness,\n     );\n \n-    let body_id = hir_id.map_or(hir::CRATE_HIR_ID, |id| {\n-        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n-    });\n+    let body_id =\n+        local_did.and_then(|id| tcx.hir().maybe_body_owned_by(id).map(|body| body.hir_id));\n+    let body_id = match body_id {\n+        Some(id) => id,\n+        None if hir_id.is_some() => hir_id.unwrap(),\n+        _ => hir::CRATE_HIR_ID,\n+    };\n+\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n     traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }"}, {"sha": "e20c6a2d99a8a99ff05c09207d108a6d8e1ca329", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -766,7 +766,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // If this didn't hold, we would not have to report an error in\n                 // the first place.\n-                assert_ne!(hir::HirId::make_owner(encl_item_id), encl_body_owner_id);\n+                assert_ne!(encl_item_id, encl_body_owner_id);\n \n                 let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n                 let encl_body = self.tcx.hir().body(encl_body_id);"}, {"sha": "33a3f825ac27111bfe7be4623a20accd49b7aa2c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -58,7 +58,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"FnCtxt::check_asm: {} deferred checks\", deferred_asm_checks.len());\n         for (asm, hir_id) in deferred_asm_checks.drain(..) {\n             let enclosing_id = self.tcx.hir().enclosing_body_owner(hir_id);\n-            InlineAsmCtxt::new_in_fn(self).check_asm(asm, enclosing_id);\n+            InlineAsmCtxt::new_in_fn(self)\n+                .check_asm(asm, self.tcx.hir().local_def_id_to_hir_id(enclosing_id));\n         }\n     }\n "}, {"sha": "99895dc122452edecc9d609210e6fc9a36ea9845", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -107,8 +107,7 @@ impl<'tcx> InheritedBuilder<'tcx> {\n impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n         let tcx = infcx.tcx;\n-        let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let body_id = tcx.hir().maybe_body_owned_by(item_id);\n+        let body_id = tcx.hir().maybe_body_owned_by(def_id);\n         let typeck_results =\n             infcx.in_progress_typeck_results.expect(\"building `FnCtxt` without typeck results\");\n "}, {"sha": "0081e9049eeca87a7cd612a06f4835c3c71f307f", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -814,8 +814,7 @@ pub fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n         return tcx.region_scope_tree(typeck_root_def_id);\n     }\n \n-    let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n+    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(def_id.expect_local()) {\n         let mut visitor = RegionResolutionVisitor {\n             tcx,\n             scope_tree: ScopeTree::default(),"}, {"sha": "534ddfa9531c160494c75f86564078a4be572f6c", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -100,7 +100,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),\n             ..\n         }) => {\n-            let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+            let body_owner = tcx.hir().enclosing_body_owner(hir_id);\n             let tables = tcx.typeck(body_owner);\n             // This may fail in case the method/path does not actually exist.\n             // As there is no relevant param for `def_id`, we simply return\n@@ -134,7 +134,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         | ExprKind::Struct(&QPath::Resolved(_, path), ..),\n                     ..\n                 }) => {\n-                    let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+                    let body_owner = tcx.hir().enclosing_body_owner(hir_id);\n                     let _tables = tcx.typeck(body_owner);\n                     &*path\n                 }"}, {"sha": "621f70f0da9865f18fbaa564613dbad70b78e479", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -236,8 +236,7 @@ pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n     match n.kind() {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n-                let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n-                print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))\n+                print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(def.did))\n             } else {\n                 inline::print_inlined_const(cx.tcx, def.did)\n             };"}, {"sha": "c48b25aea4a373022cd73c51884e2ca61ac6216e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -313,7 +313,7 @@ pub(crate) fn create_config(\n                 }\n \n                 let hir = tcx.hir();\n-                let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(def_id)));\n+                let body = hir.body(hir.body_owned_by(def_id));\n                 debug!(\"visiting body for {:?}\", def_id);\n                 EmitIgnoredResolutionErrors::new(tcx).visit_body(body);\n                 (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck)(tcx, def_id)"}, {"sha": "fd0b19034a259022f51f2f9db9f5bd10e4992c65", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -143,8 +143,7 @@ where\n         // then we need to exit before calling typeck (which will panic). See\n         // test/run-make/rustdoc-scrape-examples-invalid-expr for an example.\n         let hir = tcx.hir();\n-        let owner = hir.local_def_id_to_hir_id(ex.hir_id.owner);\n-        if hir.maybe_body_owned_by(owner).is_none() {\n+        if hir.maybe_body_owned_by(ex.hir_id.owner).is_none() {\n             return;\n         }\n "}, {"sha": "9c3375bf35e7dc523ce4cd89b4b7435354873a8d", "filename": "src/tools/clippy/clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -12,7 +12,8 @@ pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, count_recv: &hi\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n         let closure = expr_or_init(cx, map_arg);\n-        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(closure.hir_id);\n+        if let Some(def_id) = cx.tcx.hir().opt_local_def_id(closure.hir_id);\n+        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(def_id);\n         let closure_body = cx.tcx.hir().body(body_id);\n         if !cx.typeck_results().expr_ty(&closure_body.value).is_unit();\n         then {"}, {"sha": "c0726868f77e22eb35b78e8637db18582b2e0a2d", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n \n fn check_item(cx: &LateContext<'_>, hir_id: HirId) {\n     let hir = cx.tcx.hir();\n-    if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+    if let Some(body_id) = hir.maybe_body_owned_by(hir_id.expect_owner()) {\n         check_node(cx, hir_id, |v| {\n             v.expr(&v.bind(\"expr\", &hir.body(body_id).value));\n         });"}, {"sha": "50bb008098dcbc16c674ee49d0cae5d2de32cfdc", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c668820365bc9c66408b993cda84d48532a9e0ce/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=c668820365bc9c66408b993cda84d48532a9e0ce", "patch": "@@ -1353,7 +1353,7 @@ pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool\n     if is_integer_literal(e, value) {\n         return true;\n     }\n-    let enclosing_body = cx.tcx.hir().local_def_id(cx.tcx.hir().enclosing_body_owner(e.hir_id));\n+    let enclosing_body = cx.tcx.hir().enclosing_body_owner(e.hir_id);\n     if let Some((Constant::Int(v), _)) = constant(cx, cx.tcx.typeck(enclosing_body), e) {\n         return value == v;\n     }"}]}