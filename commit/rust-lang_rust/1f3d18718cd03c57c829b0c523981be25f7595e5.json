{"sha": "1f3d18718cd03c57c829b0c523981be25f7595e5", "node_id": "C_kwDOAAsO6NoAKDFmM2QxODcxOGNkMDNjNTdjODI5YjBjNTIzOTgxYmUyNWY3NTk1ZTU", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-15T19:04:05Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-15T19:04:05Z"}, "message": "fix const generic panic", "tree": {"sha": "67794f9d6e68611d1dce1eeae61cbad705efc782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67794f9d6e68611d1dce1eeae61cbad705efc782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f3d18718cd03c57c829b0c523981be25f7595e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3d18718cd03c57c829b0c523981be25f7595e5", "html_url": "https://github.com/rust-lang/rust/commit/1f3d18718cd03c57c829b0c523981be25f7595e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f3d18718cd03c57c829b0c523981be25f7595e5/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b301b040f5781a9083348936369a01c37138756f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b301b040f5781a9083348936369a01c37138756f", "html_url": "https://github.com/rust-lang/rust/commit/b301b040f5781a9083348936369a01c37138756f"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "ebbce33e0117870cacab214efe7b2546dbc36641", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f3d18718cd03c57c829b0c523981be25f7595e5/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3d18718cd03c57c829b0c523981be25f7595e5/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=1f3d18718cd03c57c829b0c523981be25f7595e5", "patch": "@@ -1088,9 +1088,20 @@ impl<'a> InferenceContext<'a> {\n                 }\n             }\n         };\n-        let supplied_params = substs.len();\n-        for _ in supplied_params..total_len {\n-            substs.push(GenericArgData::Ty(self.table.new_type_var()).intern(Interner));\n+        for (id, data) in def_generics.iter().skip(substs.len()) {\n+            match data {\n+                TypeOrConstParamData::TypeParamData(_) => {\n+                    substs.push(GenericArgData::Ty(self.table.new_type_var()).intern(Interner))\n+                }\n+                TypeOrConstParamData::ConstParamData(_) => {\n+                    substs.push(\n+                        GenericArgData::Const(self.table.new_const_var(\n+                            self.db.const_param_ty(ConstParamId::from_unchecked(id)),\n+                        ))\n+                        .intern(Interner),\n+                    )\n+                }\n+            }\n         }\n         assert_eq!(substs.len(), total_len);\n         Substitution::from_iter(Interner, substs)"}, {"sha": "63faecbfafa2af4ee9077a0b888651784ac9187b", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f3d18718cd03c57c829b0c523981be25f7595e5/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f3d18718cd03c57c829b0c523981be25f7595e5/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=1f3d18718cd03c57c829b0c523981be25f7595e5", "patch": "@@ -1431,3 +1431,26 @@ fn nalgebra_factorial() {\n         \"#,\n     )\n }\n+\n+#[test]\n+fn regression_11688_1() {\n+    check_no_mismatches(\n+        r#\"\n+        pub struct Buffer<T>(T);\n+        type Writer = Buffer<u8>;\n+        impl<T> Buffer<T> {\n+            fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {\n+                loop {}\n+            }\n+        }\n+        trait Encode<S> {\n+            fn encode(self, w: &mut Writer, s: &mut S);\n+        }\n+        impl<S> Encode<S> for u8 {\n+            fn encode(self, w: &mut Writer, _: &mut S) {\n+                w.extend_from_array(&self.to_le_bytes());\n+            }\n+        }\n+        \"#,\n+    );\n+}"}]}