{"sha": "a57117982aa99f410f6efcba511998c1161adfb8", "node_id": "C_kwDOAAsO6NoAKGE1NzExNzk4MmFhOTlmNDEwZjZlZmNiYTUxMTk5OGMxMTYxYWRmYjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T00:02:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T00:02:55Z"}, "message": "Auto merge of #95542 - xFrednet:rfc-2383-expect-query, r=wesleywiser\n\nSupport tool lints with the `#[expect]` attribute (RFC 2383)\n\nThis PR fixes the ICE https://github.com/rust-lang/rust/issues/94953 by making the assert for converted expectation IDs conditional.\n\nAdditionally, it moves the lint expectation check into a separate query to support rustdoc and other tools. On the way, I've also added some tests to ensure that the attribute works for Clippy and rustdoc lints.\n\nThe number of changes comes from the long test file. This may look like a monster PR, this may smell like a monster PR and this may be a monster PR, but it's a harmless monster. :sauropod:\n\n---\n\nCloses: https://github.com/rust-lang/rust/issues/94953\n\ncc: https://github.com/rust-lang/rust/issues/85549\n\nr? `@wesleywiser`\n\ncc: `@rust-lang/rustdoc`", "tree": {"sha": "27b07d3f999cad78da35880e40525d4c6fe6d189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b07d3f999cad78da35880e40525d4c6fe6d189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a57117982aa99f410f6efcba511998c1161adfb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a57117982aa99f410f6efcba511998c1161adfb8", "html_url": "https://github.com/rust-lang/rust/commit/a57117982aa99f410f6efcba511998c1161adfb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a57117982aa99f410f6efcba511998c1161adfb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb121987158d69bb894ba1bcc21dc45d1e0a488f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb121987158d69bb894ba1bcc21dc45d1e0a488f", "html_url": "https://github.com/rust-lang/rust/commit/cb121987158d69bb894ba1bcc21dc45d1e0a488f"}, {"sha": "9516a40f1e767d1181344f9a3df8f740dff673c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9516a40f1e767d1181344f9a3df8f740dff673c5", "html_url": "https://github.com/rust-lang/rust/commit/9516a40f1e767d1181344f9a3df8f740dff673c5"}], "stats": {"total": 682, "additions": 663, "deletions": 19}, "files": [{"sha": "29643eaad992445fe4cac8c506002a4367daf797", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -426,6 +426,13 @@ struct HandlerInner {\n \n     future_breakage_diagnostics: Vec<Diagnostic>,\n \n+    /// The [`Self::unstable_expect_diagnostics`] should be empty when this struct is\n+    /// dropped. However, it can have values if the compilation is stopped early\n+    /// or is only partially executed. To avoid ICEs, like in rust#94953 we only\n+    /// check if [`Self::unstable_expect_diagnostics`] is empty, if the expectation ids\n+    /// have been converted.\n+    check_unstable_expect_diagnostics: bool,\n+\n     /// Expected [`Diagnostic`]s store a [`LintExpectationId`] as part of\n     /// the lint level. [`LintExpectationId`]s created early during the compilation\n     /// (before `HirId`s have been defined) are not stable and can therefore not be\n@@ -497,10 +504,12 @@ impl Drop for HandlerInner {\n             );\n         }\n \n-        assert!(\n-            self.unstable_expect_diagnostics.is_empty(),\n-            \"all diagnostics with unstable expectations should have been converted\",\n-        );\n+        if self.check_unstable_expect_diagnostics {\n+            assert!(\n+                self.unstable_expect_diagnostics.is_empty(),\n+                \"all diagnostics with unstable expectations should have been converted\",\n+            );\n+        }\n     }\n }\n \n@@ -574,6 +583,7 @@ impl Handler {\n                 emitted_diagnostics: Default::default(),\n                 stashed_diagnostics: Default::default(),\n                 future_breakage_diagnostics: Vec::new(),\n+                check_unstable_expect_diagnostics: false,\n                 unstable_expect_diagnostics: Vec::new(),\n                 fulfilled_expectations: Default::default(),\n             }),\n@@ -988,12 +998,13 @@ impl Handler {\n         &self,\n         unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n     ) {\n-        let diags = std::mem::take(&mut self.inner.borrow_mut().unstable_expect_diagnostics);\n+        let mut inner = self.inner.borrow_mut();\n+        let diags = std::mem::take(&mut inner.unstable_expect_diagnostics);\n+        inner.check_unstable_expect_diagnostics = true;\n         if diags.is_empty() {\n             return;\n         }\n \n-        let mut inner = self.inner.borrow_mut();\n         for mut diag in diags.into_iter() {\n             diag.update_unstable_expectation_id(unstable_to_stable);\n "}, {"sha": "00119267e8561be4985be7d122ce95ab43793e0b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -1009,6 +1009,10 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                 });\n             }\n         );\n+\n+        // This check has to be run after all lints are done processing. We don't\n+        // define a lint filter, as all lint checks should have finished at this point.\n+        sess.time(\"check_lint_expectations\", || tcx.check_expectations(None));\n     });\n \n     Ok(())"}, {"sha": "dc48ac0a618e7b1574adc13346ab3bd252f4618a", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -1,10 +1,16 @@\n use crate::builtin;\n use rustc_hir::HirId;\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::{lint::LintExpectation, ty::TyCtxt};\n use rustc_session::lint::LintExpectationId;\n use rustc_span::symbol::sym;\n+use rustc_span::Symbol;\n \n-pub fn check_expectations(tcx: TyCtxt<'_>) {\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { check_expectations, ..*providers };\n+}\n+\n+fn check_expectations(tcx: TyCtxt<'_>, tool_filter: Option<Symbol>) {\n     if !tcx.sess.features_untracked().enabled(sym::lint_reasons) {\n         return;\n     }\n@@ -13,7 +19,9 @@ pub fn check_expectations(tcx: TyCtxt<'_>) {\n     let lint_expectations = &tcx.lint_levels(()).lint_expectations;\n \n     for (id, expectation) in lint_expectations {\n-        if !fulfilled_expectations.contains(id) {\n+        if !fulfilled_expectations.contains(id)\n+            && tool_filter.map_or(true, |filter| expectation.lint_tool == Some(filter))\n+        {\n             // This check will always be true, since `lint_expectations` only\n             // holds stable ids\n             if let LintExpectationId::Stable { hir_id, .. } = id {"}, {"sha": "0ce760b64d9ca0e889f01d8877421d0852fc4521", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -503,7 +503,4 @@ pub fn check_crate<'tcx, T: LateLintPass<'tcx>>(\n             });\n         },\n     );\n-\n-    // This check has to be run after all lints are done processing for this crate\n-    tcx.sess.time(\"check_lint_expectations\", || crate::expect::check_expectations(tcx));\n }"}, {"sha": "257549bf1a1a47900bea026cf168fd709c2fbdc8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -371,7 +371,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                             };\n                             self.lint_expectations.push((\n                                 expect_id,\n-                                LintExpectation::new(reason, sp, is_unfulfilled_lint_expectations),\n+                                LintExpectation::new(\n+                                    reason,\n+                                    sp,\n+                                    is_unfulfilled_lint_expectations,\n+                                    tool_name,\n+                                ),\n                             ));\n                         }\n                         let src = LintLevelSource::Node(\n@@ -400,8 +405,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n-                                    self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n+                                    self.lint_expectations.push((\n+                                        expect_id,\n+                                        LintExpectation::new(reason, sp, false, tool_name),\n+                                    ));\n                                 }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n@@ -444,8 +451,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n-                                    self.lint_expectations\n-                                        .push((expect_id, LintExpectation::new(reason, sp, false)));\n+                                    self.lint_expectations.push((\n+                                        expect_id,\n+                                        LintExpectation::new(reason, sp, false, tool_name),\n+                                    ));\n                                 }\n                             }\n                             Err((None, _)) => {\n@@ -550,8 +559,10 @@ impl<'s> LintLevelsBuilder<'s> {\n                             }\n                         }\n                         if let Level::Expect(expect_id) = level {\n-                            self.lint_expectations\n-                                .push((expect_id, LintExpectation::new(reason, sp, false)));\n+                            self.lint_expectations.push((\n+                                expect_id,\n+                                LintExpectation::new(reason, sp, false, tool_name),\n+                            ));\n                         }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);"}, {"sha": "a965587afb71527b30a0d1376c4e93f7e9a74886", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -109,6 +109,7 @@ pub use rustc_session::lint::{LintArray, LintPass};\n \n pub fn provide(providers: &mut Providers) {\n     levels::provide(providers);\n+    expect::provide(providers);\n     *providers = Providers { lint_mod, ..*providers };\n }\n "}, {"sha": "c7c5f56867a5d461c07bb109b13f95a7fc120052", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -210,15 +210,20 @@ pub struct LintExpectation {\n     /// adjusted to include an additional note. Therefore, we have to track if\n     /// the expectation is for the lint.\n     pub is_unfulfilled_lint_expectations: bool,\n+    /// This will hold the name of the tool that this lint belongs to. For\n+    /// the lint `clippy::some_lint` the tool would be `clippy`, the same\n+    /// goes for `rustdoc`. This will be `None` for rustc lints\n+    pub lint_tool: Option<Symbol>,\n }\n \n impl LintExpectation {\n     pub fn new(\n         reason: Option<Symbol>,\n         emission_span: Span,\n         is_unfulfilled_lint_expectations: bool,\n+        lint_tool: Option<Symbol>,\n     ) -> Self {\n-        Self { reason, emission_span, is_unfulfilled_lint_expectations }\n+        Self { reason, emission_span, is_unfulfilled_lint_expectations, lint_tool }\n     }\n }\n "}, {"sha": "173028cf5c56ba8404dc7c8098f0485eb5a15704", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -157,6 +157,25 @@ rustc_queries! {\n         desc { \"running analysis passes on this crate\" }\n     }\n \n+    /// This query checks the fulfillment of collected lint expectations.\n+    /// All lint emitting queries have to be done before this is executed\n+    /// to ensure that all expectations can be fulfilled.\n+    ///\n+    /// This is an extra query to enable other drivers (like rustdoc) to\n+    /// only execute a small subset of the `analysis` query, while allowing\n+    /// lints to be expected. In rustc, this query will be executed as part of\n+    /// the `analysis` query and doesn't have to be called a second time.\n+    ///\n+    /// Tools can additionally pass in a tool filter. That will restrict the\n+    /// expectations to only trigger for lints starting with the listed tool\n+    /// name. This is useful for cases were not all linting code from rustc\n+    /// was called. With the default `None` all registered lints will also\n+    /// be checked for expectation fulfillment.\n+    query check_expectations(key: Option<Symbol>) -> () {\n+        eval_always\n+        desc { \"checking lint expectations (RFC 2383)\" }\n+    }\n+\n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n     /// associated generics.\n     query generics_of(key: DefId) -> ty::Generics {"}, {"sha": "6fbafeb1d32b3c40c51ce563d534e2a1488b29b9", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -435,6 +435,16 @@ impl Key for Symbol {\n     }\n }\n \n+impl Key for Option<Symbol> {\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n+    }\n+    fn default_span(&self, _tcx: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n impl<'tcx, T> Key for Canonical<'tcx, T> {"}, {"sha": "17644aeed85691dc23abe80ab30316a608c9c693", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -232,6 +232,8 @@ crate fn create_config(\n         rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name.to_string(),\n         rustc_lint::builtin::UNKNOWN_LINTS.name.to_string(),\n         rustc_lint::builtin::UNEXPECTED_CFGS.name.to_string(),\n+        // this lint is needed to support `#[expect]` attributes\n+        rustc_lint::builtin::UNFULFILLED_LINT_EXPECTATIONS.name.to_string(),\n     ];\n     lints_to_show.extend(crate::lint::RUSTDOC_LINTS.iter().map(|lint| lint.name.to_string()));\n \n@@ -463,6 +465,8 @@ crate fn run_global_ctxt(\n         }\n     }\n \n+    tcx.sess.time(\"check_lint_expectations\", || tcx.check_expectations(Some(sym::rustdoc)));\n+\n     if tcx.sess.diagnostic().has_errors_or_lint_errors().is_some() {\n         rustc_errors::FatalError.raise();\n     }"}, {"sha": "0901ac3640fdda75db09625d7e7de9546675f6b1", "filename": "src/test/rustdoc-ui/expect-tool-lint-rfc-2383.rs", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Frustdoc-ui%2Fexpect-tool-lint-rfc-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Frustdoc-ui%2Fexpect-tool-lint-rfc-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fexpect-tool-lint-rfc-2383.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,157 @@\n+// check-pass\n+#![feature(lint_reasons)]\n+\n+//! This file tests the `#[expect]` attribute implementation for tool lints. The same\n+//! file is used to test clippy and rustdoc. Any changes to this file should be synced\n+//! to the other test files as well.\n+//!\n+//! Expectations:\n+//! * rustc: only rustc lint expectations are emitted\n+//! * clippy: rustc and Clippy's expectations are emitted\n+//! * rustdoc: only rustdoc lint expectations are emitted\n+//!\n+//! This test can't cover every lint from Clippy, rustdoc and potentially other\n+//! tools that will be developed. This therefore only tests a small subset of lints\n+\n+#![expect(rustdoc::missing_crate_level_docs)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+mod rustc_ok {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    pub fn rustc_lints() {\n+        let x = 42.0;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        match x {\n+            5.0 => {}\n+            6.0 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+mod rustc_warn {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    pub fn rustc_lints() {\n+        let x = 42;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        match x {\n+            5 => {}\n+            6 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+pub mod rustdoc_ok {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    /// I want to link to [`Nonexistent`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    /// <h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    /// http://example.org\n+    pub fn baz() {}\n+}\n+\n+pub mod rustdoc_warn {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    /// I want to link to [`bar`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    /// <h1></h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    /// <http://example.org>\n+    pub fn baz() {}\n+}\n+\n+mod clippy_ok {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+        b = a;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".bytes().nth(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true {\n+            42\n+        } else {\n+            42\n+        };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+\n+        if a && b || a {}\n+    }\n+}\n+\n+mod clippy_warn {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".as_bytes().get(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true {\n+            33\n+        } else {\n+            42\n+        };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+        let c = false;\n+\n+        if a && b || c {}\n+    }\n+}\n+\n+fn main() {\n+    rustc_warn::rustc_lints();\n+}"}, {"sha": "efc5f349f4f44437e301e1244a72399cebb1b8a5", "filename": "src/test/rustdoc-ui/expect-tool-lint-rfc-2383.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Frustdoc-ui%2Fexpect-tool-lint-rfc-2383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Frustdoc-ui%2Fexpect-tool-lint-rfc-2383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fexpect-tool-lint-rfc-2383.stderr?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,28 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect-tool-lint-rfc-2383.rs:16:11\n+   |\n+LL | #![expect(rustdoc::missing_crate_level_docs)]\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect-tool-lint-rfc-2383.rs:71:14\n+   |\n+LL |     #[expect(rustdoc::broken_intra_doc_links)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect-tool-lint-rfc-2383.rs:76:14\n+   |\n+LL |     #[expect(rustdoc::invalid_html_tags)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect-tool-lint-rfc-2383.rs:81:14\n+   |\n+LL |     #[expect(rustdoc::bare_urls)]\n+   |              ^^^^^^^^^^^^^^^^^^\n+\n+warning: 4 warnings emitted\n+"}, {"sha": "f80fe88cbb97e2e21611cda8071b56387d9c397f", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_tool_lint_rfc_2383.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_tool_lint_rfc_2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_tool_lint_rfc_2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_tool_lint_rfc_2383.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,155 @@\n+// check-pass\n+#![feature(lint_reasons)]\n+\n+//! This file tests the `#[expect]` attribute implementation for tool lints. The same\n+//! file is used to test clippy and rustdoc. Any changes to this file should be synced\n+//! to the other test files.\n+//!\n+//! Expectations:\n+//! * rustc: only rustc lint expectations are emitted\n+//! * clippy: rustc and Clippy's expectations are emitted\n+//! * rustdoc: only rustdoc lint expectations are emitted\n+//!\n+//! This test can't cover every lint from Clippy, rustdoc and potentially other\n+//! tools that will be developed. This therefore only tests a small subset of lints\n+\n+#![expect(rustdoc::missing_crate_level_docs)]\n+\n+mod rustc_ok {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    pub fn rustc_lints() {\n+        let x = 42.0;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        match x {\n+            5.0 => {}\n+            6.0 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+mod rustc_warn {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    //~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+    pub fn rustc_lints() {\n+        let x = 42;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+        match x {\n+            5 => {}\n+            6 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+pub mod rustdoc_ok {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    /// I want to link to [`Nonexistent`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    /// <h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    /// http://example.org\n+    pub fn baz() {}\n+}\n+\n+pub mod rustdoc_warn {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    /// I want to link to [`bar`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    /// <h1></h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    /// <http://example.org>\n+    pub fn baz() {}\n+}\n+\n+mod clippy_ok {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+        b = a;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".bytes().nth(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true {\n+            42\n+        } else {\n+            42\n+        };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+\n+        if a && b || a {}\n+    }\n+}\n+\n+mod clippy_warn {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".as_bytes().get(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true {\n+            33\n+        } else {\n+            42\n+        };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+        let c = false;\n+\n+        if a && b || c {}\n+    }\n+}\n+\n+fn main() {\n+    rustc_warn::rustc_lints();\n+}"}, {"sha": "6d49e7543dc59d606a0dd6a61785768a327cb909", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_tool_lint_rfc_2383.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_tool_lint_rfc_2383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_tool_lint_rfc_2383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_tool_lint_rfc_2383.stderr?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,16 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:37:14\n+   |\n+LL |     #[expect(dead_code)]\n+   |              ^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:43:18\n+   |\n+LL |         #[expect(illegal_floating_point_literal_pattern)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "2b6c3c6a1fdf6dcae13e1ba6744651966005f357", "filename": "src/test/ui/lint/rfc-2383-lint-reason/no_ice_for_partial_compiler_runs.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,16 @@\n+// This ensures that ICEs like rust#94953 don't happen\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![feature(lint_reasons)]\n+\n+// This `expect` will create an expectation with an unstable expectation id\n+#[expect(while_true)]\n+fn create_early_lint_pass_expectation() {\n+    // `while_true` is an early lint\n+    while true {}\n+}\n+\n+fn main() {\n+    create_early_lint_pass_expectation();\n+}"}, {"sha": "0ee3a03c38847e939f57cfa01c6c6fb631ef883c", "filename": "src/test/ui/lint/rfc-2383-lint-reason/no_ice_for_partial_compiler_runs.stdout", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fno_ice_for_partial_compiler_runs.stdout?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,20 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+// This ensures that ICEs like rust#94953 don't happen\n+// check-pass\n+// compile-flags: -Z unpretty=expanded\n+\n+#![feature(lint_reasons)]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+\n+// This `expect` will create an expectation with an unstable expectation id\n+#[expect(while_true)]\n+fn create_early_lint_pass_expectation() {\n+    // `while_true` is an early lint\n+    while true {}\n+}\n+\n+fn main() { create_early_lint_pass_expectation(); }"}, {"sha": "28b37f96e9118138918ce22f36a59e1eabe7c972", "filename": "src/tools/clippy/tests/ui/expect_tool_lint_rfc_2383.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_tool_lint_rfc_2383.rs?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,142 @@\n+// check-pass\n+#![feature(lint_reasons)]\n+//! This file tests the `#[expect]` attribute implementation for tool lints. The same\n+//! file is used to test clippy and rustdoc. Any changes to this file should be synced\n+//! to the other test files as well.\n+//!\n+//! Expectations:\n+//! * rustc: only rustc lint expectations are emitted\n+//! * clippy: rustc and Clippy's expectations are emitted\n+//! * rustdoc: only rustdoc lint expectations are emitted\n+//!\n+//! This test can't cover every lint from Clippy, rustdoc and potentially other\n+//! tools that will be developed. This therefore only tests a small subset of lints\n+#![expect(rustdoc::missing_crate_level_docs)]\n+\n+mod rustc_ok {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    pub fn rustc_lints() {\n+        let x = 42.0;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        match x {\n+            5.0 => {}\n+            6.0 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+mod rustc_warn {\n+    //! See <https://doc.rust-lang.org/rustc/lints/index.html>\n+\n+    #[expect(dead_code)]\n+    pub fn rustc_lints() {\n+        let x = 42;\n+\n+        #[expect(illegal_floating_point_literal_pattern)]\n+        match x {\n+            5 => {}\n+            6 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+pub mod rustdoc_ok {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    /// I want to link to [`Nonexistent`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    /// <h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    /// http://example.org\n+    pub fn baz() {}\n+}\n+\n+pub mod rustdoc_warn {\n+    //! See <https://doc.rust-lang.org/rustdoc/lints.html>\n+\n+    #[expect(rustdoc::broken_intra_doc_links)]\n+    /// I want to link to [`bar`] but it doesn't exist!\n+    pub fn foo() {}\n+\n+    #[expect(rustdoc::invalid_html_tags)]\n+    /// <h1></h1>\n+    pub fn bar() {}\n+\n+    #[expect(rustdoc::bare_urls)]\n+    /// <http://example.org>\n+    pub fn baz() {}\n+}\n+\n+mod clippy_ok {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+        b = a;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".bytes().nth(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true { 42 } else { 42 };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+\n+        if a && b || a {}\n+    }\n+}\n+\n+mod clippy_warn {\n+    //! See <https://rust-lang.github.io/rust-clippy/master/index.html>\n+\n+    #[expect(clippy::almost_swapped)]\n+    fn foo() {\n+        let mut a = 0;\n+        let mut b = 9;\n+        a = b;\n+    }\n+\n+    #[expect(clippy::bytes_nth)]\n+    fn bar() {\n+        let _ = \"Hello\".as_bytes().get(3);\n+    }\n+\n+    #[expect(clippy::if_same_then_else)]\n+    fn baz() {\n+        let _ = if true { 33 } else { 42 };\n+    }\n+\n+    #[expect(clippy::logic_bug)]\n+    fn burger() {\n+        let a = false;\n+        let b = true;\n+        let c = false;\n+\n+        if a && b || c {}\n+    }\n+}\n+\n+fn main() {\n+    rustc_warn::rustc_lints();\n+}"}, {"sha": "db29e85a82191abf6529511704d4fb83f6725fb6", "filename": "src/tools/clippy/tests/ui/expect_tool_lint_rfc_2383.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a57117982aa99f410f6efcba511998c1161adfb8/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr?ref=a57117982aa99f410f6efcba511998c1161adfb8", "patch": "@@ -0,0 +1,40 @@\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:35:14\n+   |\n+LL |     #[expect(dead_code)]\n+   |              ^^^^^^^^^\n+   |\n+   = note: `-D unfulfilled-lint-expectations` implied by `-D warnings`\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:39:18\n+   |\n+LL |         #[expect(illegal_floating_point_literal_pattern)]\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:113:14\n+   |\n+LL |     #[expect(clippy::almost_swapped)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:120:14\n+   |\n+LL |     #[expect(clippy::bytes_nth)]\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:125:14\n+   |\n+LL |     #[expect(clippy::if_same_then_else)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this lint expectation is unfulfilled\n+  --> $DIR/expect_tool_lint_rfc_2383.rs:130:14\n+   |\n+LL |     #[expect(clippy::logic_bug)]\n+   |              ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}