{"sha": "1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNTM3NTQyMzZiNjU0ZDNhNGVkYmY1Y2IyOGNmZTI0ZjRlM2ZlMjY=", "commit": {"author": {"name": "Dhruv Jauhar", "email": "dhruvjhr@gmail.com", "date": "2020-11-01T07:15:22Z"}, "committer": {"name": "Dhruv Jauhar", "email": "dhruvjhr@gmail.com", "date": "2020-11-02T06:31:34Z"}, "message": "Provide diagnostic suggestion in ExprUseVisitor Delegate\n\nThe [Delegate\ntrait](https://github.com/rust-lang/rust/blob/981346fc07dd5ef414c5b1b21999f7604cece006/compiler/rustc_typeck/src/expr_use_visitor.rs#L28-L38)\ncurrently use `PlaceWithHirId` which is composed of Hir `Place` and the\ncorresponding expression id.\n\nEven though this is an accurate way of expressing how a Place is used,\nit can cause confusion during diagnostics.\n\nEg:\n\n```\nlet arr : [String; 5];\n\nlet [a, ...]     =   arr;\n ^^^ E1 ^^^      =  ^^E2^^\n ```\n\n Here `arr` is moved because of the binding created E1. However, when we\n point to E1 in diagnostics with the message `arr` was moved, it can be\n confusing.  Rather we would like to report E2 to the user.\n\n Closes: https://github.com/rust-lang/project-rfc-2229/issues/20", "tree": {"sha": "4dbfd52efabdcc2eeb5b08375494f9b5137d6947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dbfd52efabdcc2eeb5b08375494f9b5137d6947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "html_url": "https://github.com/rust-lang/rust/commit/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/comments", "author": {"login": "null-sleep", "id": 13277988, "node_id": "MDQ6VXNlcjEzMjc3OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/13277988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/null-sleep", "html_url": "https://github.com/null-sleep", "followers_url": "https://api.github.com/users/null-sleep/followers", "following_url": "https://api.github.com/users/null-sleep/following{/other_user}", "gists_url": "https://api.github.com/users/null-sleep/gists{/gist_id}", "starred_url": "https://api.github.com/users/null-sleep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/null-sleep/subscriptions", "organizations_url": "https://api.github.com/users/null-sleep/orgs", "repos_url": "https://api.github.com/users/null-sleep/repos", "events_url": "https://api.github.com/users/null-sleep/events{/privacy}", "received_events_url": "https://api.github.com/users/null-sleep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "null-sleep", "id": 13277988, "node_id": "MDQ6VXNlcjEzMjc3OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/13277988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/null-sleep", "html_url": "https://github.com/null-sleep", "followers_url": "https://api.github.com/users/null-sleep/followers", "following_url": "https://api.github.com/users/null-sleep/following{/other_user}", "gists_url": "https://api.github.com/users/null-sleep/gists{/gist_id}", "starred_url": "https://api.github.com/users/null-sleep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/null-sleep/subscriptions", "organizations_url": "https://api.github.com/users/null-sleep/orgs", "repos_url": "https://api.github.com/users/null-sleep/repos", "events_url": "https://api.github.com/users/null-sleep/events{/privacy}", "received_events_url": "https://api.github.com/users/null-sleep/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fe25d8613a32dcd71e5258c22ff5685f12d4c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fe25d8613a32dcd71e5258c22ff5685f12d4c3", "html_url": "https://github.com/rust-lang/rust/commit/c4fe25d8613a32dcd71e5258c22ff5685f12d4c3"}], "stats": {"total": 196, "additions": 125, "deletions": 71}, "files": [{"sha": "e9dfef718fde9647d6bec54e4dc3e655075b0d76", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 51, "deletions": 32, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "patch": "@@ -279,11 +279,12 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n     fn adjust_upvar_borrow_kind_for_consume(\n         &mut self,\n         place_with_id: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId,\n         mode: euv::ConsumeMode,\n     ) {\n         debug!(\n-            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, mode={:?})\",\n-            place_with_id, mode\n+            \"adjust_upvar_borrow_kind_for_consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n+            place_with_id, diag_expr_id, mode\n         );\n \n         // we only care about moves\n@@ -303,7 +304,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n \n         debug!(\"adjust_upvar_borrow_kind_for_consume: upvar={:?}\", upvar_id);\n \n-        let usage_span = tcx.hir().span(place_with_id.hir_id);\n+        let usage_span = tcx.hir().span(diag_expr_id);\n \n         // To move out of an upvar, this must be a FnOnce closure\n         self.adjust_closure_kind(\n@@ -313,14 +314,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             var_name(tcx, upvar_id.var_path.hir_id),\n         );\n \n-        // In a case like `let pat = upvar`, don't use the span\n-        // of the pattern, as this just looks confusing.\n-        let by_value_span = match tcx.hir().get(place_with_id.hir_id) {\n-            hir::Node::Pat(_) => None,\n-            _ => Some(usage_span),\n-        };\n-\n-        let new_capture = ty::UpvarCapture::ByValue(by_value_span);\n+        let new_capture = ty::UpvarCapture::ByValue(Some(usage_span));\n         match self.adjust_upvar_captures.entry(upvar_id) {\n             Entry::Occupied(mut e) => {\n                 match e.get() {\n@@ -345,8 +339,15 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n     /// Indicates that `place_with_id` is being directly mutated (e.g., assigned\n     /// to). If the place is based on a by-ref upvar, this implies that\n     /// the upvar must be borrowed using an `&mut` borrow.\n-    fn adjust_upvar_borrow_kind_for_mut(&mut self, place_with_id: &PlaceWithHirId<'tcx>) {\n-        debug!(\"adjust_upvar_borrow_kind_for_mut(place_with_id={:?})\", place_with_id);\n+    fn adjust_upvar_borrow_kind_for_mut(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId,\n+    ) {\n+        debug!(\n+            \"adjust_upvar_borrow_kind_for_mut(place_with_id={:?}, diag_expr_id={:?})\",\n+            place_with_id, diag_expr_id\n+        );\n \n         if let PlaceBase::Upvar(upvar_id) = place_with_id.place.base {\n             let mut borrow_kind = ty::MutBorrow;\n@@ -362,16 +363,19 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n                     _ => (),\n                 }\n             }\n-            self.adjust_upvar_deref(\n-                upvar_id,\n-                self.fcx.tcx.hir().span(place_with_id.hir_id),\n-                borrow_kind,\n-            );\n+            self.adjust_upvar_deref(upvar_id, self.fcx.tcx.hir().span(diag_expr_id), borrow_kind);\n         }\n     }\n \n-    fn adjust_upvar_borrow_kind_for_unique(&mut self, place_with_id: &PlaceWithHirId<'tcx>) {\n-        debug!(\"adjust_upvar_borrow_kind_for_unique(place_with_id={:?})\", place_with_id);\n+    fn adjust_upvar_borrow_kind_for_unique(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId,\n+    ) {\n+        debug!(\n+            \"adjust_upvar_borrow_kind_for_unique(place_with_id={:?}, diag_expr_id={:?})\",\n+            place_with_id, diag_expr_id\n+        );\n \n         if let PlaceBase::Upvar(upvar_id) = place_with_id.place.base {\n             if place_with_id.place.deref_tys().any(ty::TyS::is_unsafe_ptr) {\n@@ -381,7 +385,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             // for a borrowed pointer to be unique, its base must be unique\n             self.adjust_upvar_deref(\n                 upvar_id,\n-                self.fcx.tcx.hir().span(place_with_id.hir_id),\n+                self.fcx.tcx.hir().span(diag_expr_id),\n                 ty::UniqueImmBorrow,\n             );\n         }\n@@ -500,29 +504,44 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n-    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, mode: euv::ConsumeMode) {\n-        debug!(\"consume(place_with_id={:?},mode={:?})\", place_with_id, mode);\n-        self.adjust_upvar_borrow_kind_for_consume(place_with_id, mode);\n+    fn consume(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId,\n+        mode: euv::ConsumeMode,\n+    ) {\n+        debug!(\n+            \"consume(place_with_id={:?}, diag_expr_id={:?}, mode={:?})\",\n+            place_with_id, diag_expr_id, mode\n+        );\n+        self.adjust_upvar_borrow_kind_for_consume(&place_with_id, diag_expr_id, mode);\n     }\n \n-    fn borrow(&mut self, place_with_id: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind) {\n-        debug!(\"borrow(place_with_id={:?}, bk={:?})\", place_with_id, bk);\n+    fn borrow(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId,\n+        bk: ty::BorrowKind,\n+    ) {\n+        debug!(\n+            \"borrow(place_with_id={:?}, diag_expr_id={:?}, bk={:?})\",\n+            place_with_id, diag_expr_id, bk\n+        );\n \n         match bk {\n             ty::ImmBorrow => {}\n             ty::UniqueImmBorrow => {\n-                self.adjust_upvar_borrow_kind_for_unique(place_with_id);\n+                self.adjust_upvar_borrow_kind_for_unique(&place_with_id, diag_expr_id);\n             }\n             ty::MutBorrow => {\n-                self.adjust_upvar_borrow_kind_for_mut(place_with_id);\n+                self.adjust_upvar_borrow_kind_for_mut(&place_with_id, diag_expr_id);\n             }\n         }\n     }\n \n-    fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>) {\n-        debug!(\"mutate(assignee_place={:?})\", assignee_place);\n-\n-        self.adjust_upvar_borrow_kind_for_mut(assignee_place);\n+    fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        debug!(\"mutate(assignee_place={:?}, diag_expr_id={:?})\", assignee_place, diag_expr_id);\n+        self.adjust_upvar_borrow_kind_for_mut(assignee_place, diag_expr_id);\n     }\n }\n "}, {"sha": "d74893bda28df1b8370e2e85e0ab361bb474749a", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 57, "deletions": 22, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "patch": "@@ -27,14 +27,38 @@ use rustc_span::Span;\n /// employing the ExprUseVisitor.\n pub trait Delegate<'tcx> {\n     // The value found at `place` is either copied or moved, depending\n-    // on mode.\n-    fn consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, mode: ConsumeMode);\n+    // on mode. Where `diag_expr_id` is the id used for diagnostics for `place`.\n+    //\n+    // The reson for a separate expr_id for diagonostics is to support cases\n+    // like `let pat = upvar`, in such scenarios reporting the pattern (lhs)\n+    // looks confusing. Instead we prefer to report the discriminant (rhs)\n+    fn consume(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId,\n+        mode: ConsumeMode,\n+    );\n \n     // The value found at `place` is being borrowed with kind `bk`.\n-    fn borrow(&mut self, place_with_id: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind);\n-\n-    // The path at `place_with_id` is being assigned to.\n-    fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>);\n+    // `diag_expr_id` is the id used for diagnostics for `place`.\n+    //\n+    // The reson for a separate expr_id for diagonostics is to support cases\n+    // like `let pat = upvar`, in such scenarios reporting the pattern (lhs)\n+    // looks confusing. Instead we prefer to report the discriminant (rhs)\n+    fn borrow(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId,\n+        bk: ty::BorrowKind,\n+    );\n+\n+    // The path at `assignee_place` is being assigned to.\n+    // `diag_expr_id` is the id used for diagnostics for `place`.\n+    //\n+    // The reson for a separate expr_id for diagonostics is to support cases\n+    // like `let pat = upvar`, in such scenarios reporting the pattern (lhs)\n+    // looks confusing. Instead we prefer to report the discriminant (rhs)\n+    fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -116,11 +140,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         self.mc.tcx()\n     }\n \n-    fn delegate_consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>) {\n+    fn delegate_consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n         debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n \n         let mode = copy_or_move(&self.mc, place_with_id);\n-        self.delegate.consume(place_with_id, mode);\n+        self.delegate.consume(place_with_id, diag_expr_id, mode);\n     }\n \n     fn consume_exprs(&mut self, exprs: &[hir::Expr<'_>]) {\n@@ -133,21 +157,21 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         debug!(\"consume_expr(expr={:?})\", expr);\n \n         let place_with_id = return_if_err!(self.mc.cat_expr(expr));\n-        self.delegate_consume(&place_with_id);\n+        self.delegate_consume(&place_with_id, place_with_id.hir_id);\n         self.walk_expr(expr);\n     }\n \n     fn mutate_expr(&mut self, expr: &hir::Expr<'_>) {\n         let place_with_id = return_if_err!(self.mc.cat_expr(expr));\n-        self.delegate.mutate(&place_with_id);\n+        self.delegate.mutate(&place_with_id, place_with_id.hir_id);\n         self.walk_expr(expr);\n     }\n \n     fn borrow_expr(&mut self, expr: &hir::Expr<'_>, bk: ty::BorrowKind) {\n         debug!(\"borrow_expr(expr={:?}, bk={:?})\", expr, bk);\n \n         let place_with_id = return_if_err!(self.mc.cat_expr(expr));\n-        self.delegate.borrow(&place_with_id, bk);\n+        self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk);\n \n         self.walk_expr(expr)\n     }\n@@ -404,7 +428,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             with_field.ty(self.tcx(), substs),\n                             ProjectionKind::Field(f_index as u32, VariantIdx::new(0)),\n                         );\n-                        self.delegate_consume(&field_place);\n+                        self.delegate_consume(&field_place, field_place.hir_id);\n                     }\n                 }\n             }\n@@ -436,7 +460,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 adjustment::Adjust::NeverToAny | adjustment::Adjust::Pointer(_) => {\n                     // Creating a closure/fn-pointer or unsizing consumes\n                     // the input and stores it into the resulting rvalue.\n-                    self.delegate_consume(&place_with_id);\n+                    self.delegate_consume(&place_with_id, place_with_id.hir_id);\n                 }\n \n                 adjustment::Adjust::Deref(None) => {}\n@@ -448,7 +472,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 // this is an autoref of `x`.\n                 adjustment::Adjust::Deref(Some(ref deref)) => {\n                     let bk = ty::BorrowKind::from_mutbl(deref.mutbl);\n-                    self.delegate.borrow(&place_with_id, bk);\n+                    self.delegate.borrow(&place_with_id, place_with_id.hir_id, bk);\n                 }\n \n                 adjustment::Adjust::Borrow(ref autoref) => {\n@@ -476,13 +500,17 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         match *autoref {\n             adjustment::AutoBorrow::Ref(_, m) => {\n-                self.delegate.borrow(base_place, ty::BorrowKind::from_mutbl(m.into()));\n+                self.delegate.borrow(\n+                    base_place,\n+                    base_place.hir_id,\n+                    ty::BorrowKind::from_mutbl(m.into()),\n+                );\n             }\n \n             adjustment::AutoBorrow::RawPtr(m) => {\n                 debug!(\"walk_autoref: expr.hir_id={} base_place={:?}\", expr.hir_id, base_place);\n \n-                self.delegate.borrow(base_place, ty::BorrowKind::from_mutbl(m));\n+                self.delegate.borrow(base_place, base_place.hir_id, ty::BorrowKind::from_mutbl(m));\n             }\n         }\n     }\n@@ -525,19 +553,22 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     // binding being produced.\n                     let def = Res::Local(canonical_id);\n                     if let Ok(ref binding_place) = mc.cat_res(pat.hir_id, pat.span, pat_ty, def) {\n-                        delegate.mutate(binding_place);\n+                        delegate.mutate(binding_place, binding_place.hir_id);\n                     }\n \n                     // It is also a borrow or copy/move of the value being matched.\n+                    // In a cases of pattern like `let pat = upvar`, don't use the span\n+                    // of the pattern, as this just looks confusing, instead use the span\n+                    // of the discriminant.\n                     match bm {\n                         ty::BindByReference(m) => {\n                             let bk = ty::BorrowKind::from_mutbl(m);\n-                            delegate.borrow(place, bk);\n+                            delegate.borrow(place, discr_place.hir_id, bk);\n                         }\n                         ty::BindByValue(..) => {\n-                            let mode = copy_or_move(mc, place);\n+                            let mode = copy_or_move(mc, &place);\n                             debug!(\"walk_pat binding consuming pat\");\n-                            delegate.consume(place, mode);\n+                            delegate.consume(place, discr_place.hir_id, mode);\n                         }\n                     }\n                 }\n@@ -564,10 +595,14 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 match upvar_capture {\n                     ty::UpvarCapture::ByValue(_) => {\n                         let mode = copy_or_move(&self.mc, &captured_place);\n-                        self.delegate.consume(&captured_place, mode);\n+                        self.delegate.consume(&captured_place, captured_place.hir_id, mode);\n                     }\n                     ty::UpvarCapture::ByRef(upvar_borrow) => {\n-                        self.delegate.borrow(&captured_place, upvar_borrow.kind);\n+                        self.delegate.borrow(\n+                            &captured_place,\n+                            captured_place.hir_id,\n+                            upvar_borrow.kind,\n+                        );\n                     }\n                 }\n             }"}, {"sha": "9e1e47a92412a4f21ac457fe90061100a8cf9bca", "filename": "src/test/ui/borrowck/borrowck-closures-slice-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-slice-patterns.stderr?ref=1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "patch": "@@ -75,7 +75,7 @@ LL | fn arr_box_by_move(x: Box<[String; 3]>) {\n LL |     let f = || {\n    |             -- value moved into closure here\n LL |         let [y, z @ ..] = *x;\n-   |                            - variable moved due to use in closure\n+   |                           -- variable moved due to use in closure\n LL |     };\n LL |     &x;\n    |     ^^ value borrowed here after move"}, {"sha": "eebf4a81a8716377b339a217cce7019f31f7ecc3", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "patch": "@@ -116,7 +116,7 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, mode: ConsumeMode) {\n+    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, mode: ConsumeMode) {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n                 if let ConsumeMode::Move = mode {\n@@ -136,15 +136,15 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {\n         if cmt.place.projections.is_empty() {\n             if let PlaceBase::Local(lid) = cmt.place.base {\n                 self.set.remove(&lid);\n             }\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>) {\n+    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         if cmt.place.projections.is_empty() {\n             let map = &self.cx.tcx.hir();\n             if is_argument(*map, cmt.hir_id) {"}, {"sha": "7ea2d3d857b3558defcd78c98431e23a61515384", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "patch": "@@ -1694,28 +1694,28 @@ struct MutatePairDelegate<'a, 'tcx> {\n }\n \n impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             if let PlaceBase::Local(id) = cmt.place.base {\n                 if Some(id) == self.hir_id_low {\n-                    self.span_low = Some(self.cx.tcx.hir().span(cmt.hir_id))\n+                    self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n                 }\n                 if Some(id) == self.hir_id_high {\n-                    self.span_high = Some(self.cx.tcx.hir().span(cmt.hir_id))\n+                    self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n                 }\n             }\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>) {\n+    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n             if Some(id) == self.hir_id_low {\n-                self.span_low = Some(self.cx.tcx.hir().span(cmt.hir_id))\n+                self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n             }\n             if Some(id) == self.hir_id_high {\n-                self.span_high = Some(self.cx.tcx.hir().span(cmt.hir_id))\n+                self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n             }\n         }\n     }"}, {"sha": "2423eb4e6e394505704f2054609aeb9d315059e8", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "patch": "@@ -325,13 +325,13 @@ impl MovedVariablesCtxt {\n }\n \n impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n-    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, mode: euv::ConsumeMode) {\n+    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, _: HirId, mode: euv::ConsumeMode) {\n         if let euv::ConsumeMode::Move = mode {\n             self.move_common(cmt);\n         }\n     }\n \n-    fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: ty::BorrowKind) {}\n+    fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {}\n \n-    fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>) {}\n+    fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n }"}, {"sha": "a15b8621365ef827e6493f6a90c604928d037a7b", "filename": "src/tools/clippy/clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f53754236b654d3a4edbf5cb28cfe24f4e3fe26/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=1f53754236b654d3a4edbf5cb28cfe24f4e3fe26", "patch": "@@ -68,15 +68,15 @@ impl<'tcx> MutVarsDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             self.update(&cmt)\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>) {\n+    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n         self.update(&cmt)\n     }\n }"}]}