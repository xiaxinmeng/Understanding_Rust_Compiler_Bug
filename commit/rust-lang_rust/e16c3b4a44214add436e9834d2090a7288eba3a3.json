{"sha": "e16c3b4a44214add436e9834d2090a7288eba3a3", "node_id": "C_kwDOAAsO6NoAKGUxNmMzYjRhNDQyMTRhZGQ0MzZlOTgzNGQyMDkwYTcyODhlYmEzYTM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-05-15T11:31:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-06-06T12:39:32Z"}, "message": "Make saved_file field of WorkProduct non-optional\n\nA WorkProduct without a saved file is useless", "tree": {"sha": "0a54779a2757f511fbcbf5bc9d160aa4c9e978d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a54779a2757f511fbcbf5bc9d160aa4c9e978d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e16c3b4a44214add436e9834d2090a7288eba3a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e16c3b4a44214add436e9834d2090a7288eba3a3", "html_url": "https://github.com/rust-lang/rust/commit/e16c3b4a44214add436e9834d2090a7288eba3a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e16c3b4a44214add436e9834d2090a7288eba3a3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "906b85157cc7928d86fd186a255f3fd89543aca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/906b85157cc7928d86fd186a255f3fd89543aca8", "html_url": "https://github.com/rust-lang/rust/commit/906b85157cc7928d86fd186a255f3fd89543aca8"}], "stats": {"total": 120, "additions": 51, "deletions": 69}, "files": [{"sha": "05457ce15e9a7d8bfce0d6747bd888373e25f033", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=e16c3b4a44214add436e9834d2090a7288eba3a3", "patch": "@@ -80,29 +80,24 @@ fn reuse_workproduct_for_cgu(\n     cgu: &CodegenUnit<'_>,\n     work_products: &mut FxHashMap<WorkProductId, WorkProduct>,\n ) -> CompiledModule {\n-    let mut object = None;\n     let work_product = cgu.previous_work_product(tcx);\n-    if let Some(saved_file) = &work_product.saved_file {\n-        let obj_out =\n-            tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n-        object = Some(obj_out.clone());\n-        let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &saved_file);\n-        if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n-            tcx.sess.err(&format!(\n-                \"unable to copy {} to {}: {}\",\n-                source_file.display(),\n-                obj_out.display(),\n-                err\n-            ));\n-        }\n+    let obj_out = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n+    let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &work_product.saved_file);\n+    if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n+        tcx.sess.err(&format!(\n+            \"unable to copy {} to {}: {}\",\n+            source_file.display(),\n+            obj_out.display(),\n+            err\n+        ));\n     }\n \n     work_products.insert(cgu.work_product_id(), work_product);\n \n     CompiledModule {\n         name: cgu.name().to_string(),\n         kind: ModuleKind::Regular,\n-        object,\n+        object: Some(obj_out),\n         dwarf_object: None,\n         bytecode: None,\n     }"}, {"sha": "02c7c1a435fae2537b260f8cb9e88b27719f720d", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=e16c3b4a44214add436e9834d2090a7288eba3a3", "patch": "@@ -853,35 +853,31 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n     module: CachedModuleCodegen,\n     module_config: &ModuleConfig,\n ) -> WorkItemResult<B> {\n+    assert!(module_config.emit_obj != EmitObj::None);\n+\n     let incr_comp_session_dir = cgcx.incr_comp_session_dir.as_ref().unwrap();\n-    let mut object = None;\n-    if let Some(saved_file) = module.source.saved_file {\n-        let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, Some(&module.name));\n-        object = Some(obj_out.clone());\n-        let source_file = in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n-        debug!(\n-            \"copying pre-existing module `{}` from {:?} to {}\",\n-            module.name,\n-            source_file,\n-            obj_out.display()\n-        );\n-        if let Err(err) = link_or_copy(&source_file, &obj_out) {\n-            let diag_handler = cgcx.create_diag_handler();\n-            diag_handler.err(&format!(\n-                \"unable to copy {} to {}: {}\",\n-                source_file.display(),\n-                obj_out.display(),\n-                err\n-            ));\n-        }\n+    let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, Some(&module.name));\n+    let source_file = in_incr_comp_dir(&incr_comp_session_dir, &module.source.saved_file);\n+    debug!(\n+        \"copying pre-existing module `{}` from {:?} to {}\",\n+        module.name,\n+        source_file,\n+        obj_out.display()\n+    );\n+    if let Err(err) = link_or_copy(&source_file, &obj_out) {\n+        let diag_handler = cgcx.create_diag_handler();\n+        diag_handler.err(&format!(\n+            \"unable to copy {} to {}: {}\",\n+            source_file.display(),\n+            obj_out.display(),\n+            err\n+        ));\n     }\n \n-    assert_eq!(object.is_some(), module_config.emit_obj != EmitObj::None);\n-\n     WorkItemResult::Compiled(CompiledModule {\n         name: module.name,\n         kind: ModuleKind::Regular,\n-        object,\n+        object: Some(obj_out),\n         dwarf_object: None,\n         bytecode: None,\n     })"}, {"sha": "9de14950aa8d33d23ad9bd353261e5d1eff99bf6", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=e16c3b4a44214add436e9834d2090a7288eba3a3", "patch": "@@ -162,18 +162,16 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n             for swp in work_products {\n                 let mut all_files_exist = true;\n-                if let Some(ref file_name) = swp.work_product.saved_file {\n-                    let path = in_incr_comp_dir_sess(sess, file_name);\n-                    if !path.exists() {\n-                        all_files_exist = false;\n-\n-                        if sess.opts.debugging_opts.incremental_info {\n-                            eprintln!(\n-                                \"incremental: could not find file for work \\\n+                let path = in_incr_comp_dir_sess(sess, &swp.work_product.saved_file);\n+                if !path.exists() {\n+                    all_files_exist = false;\n+\n+                    if sess.opts.debugging_opts.incremental_info {\n+                        eprintln!(\n+                            \"incremental: could not find file for work \\\n                                     product: {}\",\n-                                path.display()\n-                            );\n-                        }\n+                            path.display()\n+                        );\n                     }\n                 }\n "}, {"sha": "0223976b08a5bf7e36640daafdba3c8adc106c30", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=e16c3b4a44214add436e9834d2090a7288eba3a3", "patch": "@@ -107,20 +107,15 @@ pub fn save_work_product_index(\n     for (id, wp) in previous_work_products.iter() {\n         if !new_work_products.contains_key(id) {\n             work_product::delete_workproduct_files(sess, wp);\n-            debug_assert!(\n-                wp.saved_file.as_ref().map_or(true, |file_name| {\n-                    !in_incr_comp_dir_sess(sess, &file_name).exists()\n-                })\n-            );\n+            debug_assert!(!in_incr_comp_dir_sess(sess, &wp.saved_file).exists());\n         }\n     }\n \n     // Check that we did not delete one of the current work-products:\n     debug_assert!({\n         new_work_products\n             .iter()\n-            .flat_map(|(_, wp)| wp.saved_file.iter())\n-            .map(|name| in_incr_comp_dir_sess(sess, name))\n+            .map(|(_, wp)| in_incr_comp_dir_sess(sess, &wp.saved_file))\n             .all(|path| path.exists())\n     });\n }"}, {"sha": "4789c0f581fdb952971d28d748ceeedb1c0c72ea", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=e16c3b4a44214add436e9834d2090a7288eba3a3", "patch": "@@ -21,7 +21,7 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     let file_name = format!(\"{}.o\", cgu_name);\n     let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n     let saved_file = match link_or_copy(path, &path_in_incr_dir) {\n-        Ok(_) => Some(file_name),\n+        Ok(_) => file_name,\n         Err(err) => {\n             sess.warn(&format!(\n                 \"error copying object file `{}` to incremental directory as `{}`: {}\",\n@@ -41,17 +41,15 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n \n /// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    if let Some(ref file_name) = work_product.saved_file {\n-        let path = in_incr_comp_dir_sess(sess, file_name);\n-        match std_fs::remove_file(&path) {\n-            Ok(()) => {}\n-            Err(err) => {\n-                sess.warn(&format!(\n-                    \"file-system error deleting outdated file `{}`: {}\",\n-                    path.display(),\n-                    err\n-                ));\n-            }\n+    let path = in_incr_comp_dir_sess(sess, &work_product.saved_file);\n+    match std_fs::remove_file(&path) {\n+        Ok(()) => {}\n+        Err(err) => {\n+            sess.warn(&format!(\n+                \"file-system error deleting outdated file `{}`: {}\",\n+                path.display(),\n+                err\n+            ));\n         }\n     }\n }"}, {"sha": "f6d06e4362c5339e24c62800f3c152283e405965", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e16c3b4a44214add436e9834d2090a7288eba3a3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=e16c3b4a44214add436e9834d2090a7288eba3a3", "patch": "@@ -887,7 +887,7 @@ impl<K: DepKind> DepGraph<K> {\n pub struct WorkProduct {\n     pub cgu_name: String,\n     /// Saved file associated with this CGU.\n-    pub saved_file: Option<String>,\n+    pub saved_file: String,\n }\n \n // Index type for `DepNodeData`'s edges."}]}