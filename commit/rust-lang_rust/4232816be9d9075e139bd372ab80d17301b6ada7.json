{"sha": "4232816be9d9075e139bd372ab80d17301b6ada7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzI4MTZiZTlkOTA3NWUxMzliZDM3MmFiODBkMTczMDFiNmFkYTc=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:39:56Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:39:56Z"}, "message": "formatting", "tree": {"sha": "88fb6f58a6c21fd02c389ad3065a333bc2e591c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fb6f58a6c21fd02c389ad3065a333bc2e591c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4232816be9d9075e139bd372ab80d17301b6ada7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4232816be9d9075e139bd372ab80d17301b6ada7", "html_url": "https://github.com/rust-lang/rust/commit/4232816be9d9075e139bd372ab80d17301b6ada7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4232816be9d9075e139bd372ab80d17301b6ada7/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93a70063c5bca73f0cf5fa6fcb54cee7c118b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93a70063c5bca73f0cf5fa6fcb54cee7c118b10", "html_url": "https://github.com/rust-lang/rust/commit/f93a70063c5bca73f0cf5fa6fcb54cee7c118b10"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "b35e9abd2a47d9c51034b208e840ffb814547cb2", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4232816be9d9075e139bd372ab80d17301b6ada7/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4232816be9d9075e139bd372ab80d17301b6ada7/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=4232816be9d9075e139bd372ab80d17301b6ada7", "patch": "@@ -313,10 +313,11 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n             (\n                 &ty::Ref(_, rty, _),\n                 &PatKind::Constant {\n-                    value: Const {\n-                        val: ty::ConstKind::Value(val),\n-                        ty: ty::TyS { kind: ty::Ref(_, crty, _), .. }\n-                    },\n+                    value:\n+                        Const {\n+                            val: ty::ConstKind::Value(val),\n+                            ty: ty::TyS { kind: ty::Ref(_, crty, _), .. },\n+                        },\n                 },\n             ) => Pat {\n                 ty: pat.ty,\n@@ -328,7 +329,7 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n                         kind: box PatKind::Constant {\n                             value: self.tcx.mk_const(Const {\n                                 val: ty::ConstKind::Value(\n-                                    self.fold_const_value_deref(*val, rty, crty)\n+                                    self.fold_const_value_deref(*val, rty, crty),\n                                 ),\n                                 ty: rty,\n                             }),\n@@ -1314,9 +1315,9 @@ impl<'tcx> IntRange<'tcx> {\n     ) -> Option<IntRange<'tcx>> {\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {\n             let ty = value.ty;\n-            let val = if let ty::ConstKind::Value(ConstValue::Scalar(\n-                Scalar::Raw { data, size }\n-            )) = value.val {\n+            let val = if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, size })) =\n+                value.val\n+            {\n                 // For this specific pattern we can skip a lot of effort and go\n                 // straight to the result, after doing a bit of checking. (We\n                 // could remove this branch and just use the next branch, which\n@@ -2069,10 +2070,10 @@ fn split_grouped_constructors<'p, 'tcx>(\n                                     max_fixed_len =\n                                         cmp::max(max_fixed_len, n.eval_usize(tcx, param_env))\n                                 }\n-                                (ty::ConstKind::Value(ConstValue::Slice { start, end, .. }),\n-                                 ty::Slice(_)) => {\n-                                    max_fixed_len = cmp::max(max_fixed_len, (end - start) as u64)\n-                                }\n+                                (\n+                                    ty::ConstKind::Value(ConstValue::Slice { start, end, .. }),\n+                                    ty::Slice(_),\n+                                ) => max_fixed_len = cmp::max(max_fixed_len, (end - start) as u64),\n                                 _ => {}\n                             }\n                         }"}]}