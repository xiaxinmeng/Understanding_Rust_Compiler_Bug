{"sha": "14aed81d9ac058824af62c37b892b50fdb769912", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YWVkODFkOWFjMDU4ODI0YWY2MmMzN2I4OTJiNTBmZGI3Njk5MTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-07-21T19:43:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-18T17:19:45Z"}, "message": "Use the new Entry::or_default method where possible.", "tree": {"sha": "fd88b011d0e0da97da24c184eb3475e7bf265873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd88b011d0e0da97da24c184eb3475e7bf265873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14aed81d9ac058824af62c37b892b50fdb769912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14aed81d9ac058824af62c37b892b50fdb769912", "html_url": "https://github.com/rust-lang/rust/commit/14aed81d9ac058824af62c37b892b50fdb769912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14aed81d9ac058824af62c37b892b50fdb769912/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5b6b95aef94169b5dbe4dbb1357d4bab1fc9800", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b6b95aef94169b5dbe4dbb1357d4bab1fc9800", "html_url": "https://github.com/rust-lang/rust/commit/d5b6b95aef94169b5dbe4dbb1357d4bab1fc9800"}], "stats": {"total": 276, "additions": 130, "deletions": 146}, "files": [{"sha": "c2610de23bebadf6678a5c5bf7187b3311398dd2", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -176,7 +176,7 @@ pub fn check(build: &mut Build) {\n         if target.contains(\"-none-\") {\n             if build.no_std(*target).is_none() {\n                 let target = build.config.target_config.entry(target.clone())\n-                    .or_insert(Default::default());\n+                    .or_default();\n \n                 target.no_std = true;\n             }\n@@ -192,7 +192,7 @@ pub fn check(build: &mut Build) {\n             // fall back to the system toolchain in /usr before giving up\n             if build.musl_root(*target).is_none() && build.config.build == *target {\n                 let target = build.config.target_config.entry(target.clone())\n-                                 .or_insert(Default::default());\n+                    .or_default();\n                 target.musl_root = Some(\"/usr\".into());\n             }\n             match build.musl_root(*target) {"}, {"sha": "23ef031dcb703b094e09bceb0d9678283df5d51b", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -183,7 +183,7 @@ impl Step for ToolBuild {\n                 let mut artifacts = builder.tool_artifacts.borrow_mut();\n                 let prev_artifacts = artifacts\n                     .entry(target)\n-                    .or_insert_with(Default::default);\n+                    .or_default();\n                 if let Some(prev) = prev_artifacts.get(&*id) {\n                     if prev.1 != val.1 {\n                         duplicates.push(("}, {"sha": "09f76552279f7575ce21d688abbd5c946f462465", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -2334,7 +2334,7 @@ impl<'a> LoweringContext<'a> {\n         // FIXME: This could probably be done with less rightward drift. Also looks like two control\n         //        paths where report_error is called are also the only paths that advance to after\n         //        the match statement, so the error reporting could probably just be moved there.\n-        let mut add_bounds = NodeMap();\n+        let mut add_bounds: NodeMap<Vec<_>> = NodeMap();\n         for pred in &generics.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref bound_pred) = *pred {\n                 'next_bound: for bound in &bound_pred.bounds {\n@@ -2364,7 +2364,7 @@ impl<'a> LoweringContext<'a> {\n                                                 GenericParamKind::Type { .. } => {\n                                                     if node_id == param.id {\n                                                         add_bounds.entry(param.id)\n-                                                            .or_insert(Vec::new())\n+                                                            .or_default()\n                                                             .push(bound.clone());\n                                                         continue 'next_bound;\n                                                     }\n@@ -2730,7 +2730,7 @@ impl<'a> LoweringContext<'a> {\n \n                         if let Some(ref trait_ref) = trait_ref {\n                             if let Def::Trait(def_id) = trait_ref.path.def {\n-                                this.trait_impls.entry(def_id).or_insert(vec![]).push(id);\n+                                this.trait_impls.entry(def_id).or_default().push(id);\n                             }\n                         }\n "}, {"sha": "c36d674566ad8549f0d2cff2d47d59cf290d1dbb", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -512,7 +512,7 @@ impl LintBuffer {\n             msg: msg.to_string(),\n             diagnostic\n         };\n-        let arr = self.map.entry(id).or_insert(Vec::new());\n+        let arr = self.map.entry(id).or_default();\n         if !arr.contains(&early_lint) {\n             arr.push(early_lint);\n         }"}, {"sha": "6ae027dac7e225ca0d67bb426f4dcd2f202a9bfb", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -391,37 +391,33 @@ fn resolve_lifetimes<'tcx>(\n \n     let named_region_map = krate(tcx);\n \n-    let mut defs = FxHashMap();\n+    let mut rl = ResolveLifetimes {\n+        defs: FxHashMap(),\n+        late_bound: FxHashMap(),\n+        object_lifetime_defaults: FxHashMap(),\n+    };\n+\n     for (k, v) in named_region_map.defs {\n         let hir_id = tcx.hir.node_to_hir_id(k);\n-        let map = defs.entry(hir_id.owner_local_def_id())\n-            .or_insert_with(|| Lrc::new(FxHashMap()));\n+        let map = rl.defs.entry(hir_id.owner_local_def_id()).or_default();\n         Lrc::get_mut(map).unwrap().insert(hir_id.local_id, v);\n     }\n-    let mut late_bound = FxHashMap();\n     for k in named_region_map.late_bound {\n         let hir_id = tcx.hir.node_to_hir_id(k);\n-        let map = late_bound\n-            .entry(hir_id.owner_local_def_id())\n-            .or_insert_with(|| Lrc::new(FxHashSet()));\n+        let map = rl.late_bound.entry(hir_id.owner_local_def_id()).or_default();\n         Lrc::get_mut(map).unwrap().insert(hir_id.local_id);\n     }\n-    let mut object_lifetime_defaults = FxHashMap();\n     for (k, v) in named_region_map.object_lifetime_defaults {\n         let hir_id = tcx.hir.node_to_hir_id(k);\n-        let map = object_lifetime_defaults\n+        let map = rl.object_lifetime_defaults\n             .entry(hir_id.owner_local_def_id())\n-            .or_insert_with(|| Lrc::new(FxHashMap()));\n+            .or_default();\n         Lrc::get_mut(map)\n             .unwrap()\n             .insert(hir_id.local_id, Lrc::new(v));\n     }\n \n-    Lrc::new(ResolveLifetimes {\n-        defs,\n-        late_bound,\n-        object_lifetime_defaults,\n-    })\n+    Lrc::new(rl)\n }\n \n fn krate<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> NamedRegionMap {"}, {"sha": "3926ebedd37199db8d8321d765f1c04397344e9e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -2174,7 +2174,7 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n-    let mut externs = BTreeMap::new();\n+    let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n         let name = match parts.next() {\n@@ -2191,7 +2191,7 @@ pub fn build_session_options_and_crate_config(\n \n         externs\n             .entry(name.to_string())\n-            .or_insert_with(BTreeSet::new)\n+            .or_default()\n             .insert(location.to_string());\n     }\n "}, {"sha": "fd8c2d45e644a6f384db7f9e43c74a08a1b3f44d", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -513,26 +513,26 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     {\n                         let deps1 = vid_map\n                             .entry(RegionTarget::RegionVid(r1))\n-                            .or_insert_with(|| Default::default());\n+                            .or_default();\n                         deps1.larger.insert(RegionTarget::RegionVid(r2));\n                     }\n \n                     let deps2 = vid_map\n                         .entry(RegionTarget::RegionVid(r2))\n-                        .or_insert_with(|| Default::default());\n+                        .or_default();\n                     deps2.smaller.insert(RegionTarget::RegionVid(r1));\n                 }\n                 &Constraint::RegSubVar(region, vid) => {\n                     {\n                         let deps1 = vid_map\n                             .entry(RegionTarget::Region(region))\n-                            .or_insert_with(|| Default::default());\n+                            .or_default();\n                         deps1.larger.insert(RegionTarget::RegionVid(vid));\n                     }\n \n                     let deps2 = vid_map\n                         .entry(RegionTarget::RegionVid(vid))\n-                        .or_insert_with(|| Default::default());\n+                        .or_default();\n                     deps2.smaller.insert(RegionTarget::Region(region));\n                 }\n                 &Constraint::VarSubReg(vid, region) => {\n@@ -542,13 +542,13 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     {\n                         let deps1 = vid_map\n                             .entry(RegionTarget::Region(r1))\n-                            .or_insert_with(|| Default::default());\n+                            .or_default();\n                         deps1.larger.insert(RegionTarget::Region(r2));\n                     }\n \n                     let deps2 = vid_map\n                         .entry(RegionTarget::Region(r2))\n-                        .or_insert_with(|| Default::default());\n+                        .or_default();\n                     deps2.smaller.insert(RegionTarget::Region(r1));\n                 }\n             }"}, {"sha": "113adda3ccb298ecfc2e31dfe18482deb134a12f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             index: Option<usize>, // None if this is an old error\n         }\n \n-        let mut error_map : FxHashMap<_, _> =\n+        let mut error_map : FxHashMap<_, Vec<_>> =\n             self.reported_trait_errors.borrow().iter().map(|(&span, predicates)| {\n                 (span, predicates.iter().map(|predicate| ErrorDescriptor {\n                     predicate: predicate.clone(),\n@@ -66,14 +66,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }).collect();\n \n         for (index, error) in errors.iter().enumerate() {\n-            error_map.entry(error.obligation.cause.span).or_insert(Vec::new()).push(\n+            error_map.entry(error.obligation.cause.span).or_default().push(\n                 ErrorDescriptor {\n                     predicate: error.obligation.predicate.clone(),\n                     index: Some(index)\n                 });\n \n             self.reported_trait_errors.borrow_mut()\n-                .entry(error.obligation.cause.span).or_insert(Vec::new())\n+                .entry(error.obligation.cause.span).or_default()\n                 .push(error.obligation.predicate.clone());\n         }\n "}, {"sha": "a7652574c1a2e9cb855f20234febb849be7c3d00", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -49,7 +49,7 @@ pub struct Graph {\n \n /// Children of a given impl, grouped into blanket/non-blanket varieties as is\n /// done in `TraitDef`.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Default, RustcEncodable, RustcDecodable)]\n struct Children {\n     // Impls of a trait (or specializations of a given impl). To allow for\n     // quicker lookup, the impls are indexed by a simplified version of their\n@@ -81,21 +81,14 @@ enum Inserted {\n }\n \n impl<'a, 'gcx, 'tcx> Children {\n-    fn new() -> Children {\n-        Children {\n-            nonblanket_impls: FxHashMap(),\n-            blanket_impls: vec![],\n-        }\n-    }\n-\n     /// Insert an impl into this set of children without comparing to any existing impls\n     fn insert_blindly(&mut self,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                       impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(sty) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n             debug!(\"insert_blindly: impl_def_id={:?} sty={:?}\", impl_def_id, sty);\n-            self.nonblanket_impls.entry(sty).or_insert(vec![]).push(impl_def_id)\n+            self.nonblanket_impls.entry(sty).or_default().push(impl_def_id)\n         } else {\n             debug!(\"insert_blindly: impl_def_id={:?} sty=None\", impl_def_id);\n             self.blanket_impls.push(impl_def_id)\n@@ -230,7 +223,7 @@ impl<'a, 'gcx, 'tcx> Children {\n     }\n \n     fn filtered(&mut self, sty: SimplifiedType) -> Box<dyn Iterator<Item = DefId> + '_> {\n-        let nonblanket = self.nonblanket_impls.entry(sty).or_insert(vec![]).iter();\n+        let nonblanket = self.nonblanket_impls.entry(sty).or_default().iter();\n         Box::new(self.blanket_impls.iter().chain(nonblanket).cloned())\n     }\n }\n@@ -268,7 +261,7 @@ impl<'a, 'gcx, 'tcx> Graph {\n                    trait_ref, impl_def_id, trait_def_id);\n \n             self.parent.insert(impl_def_id, trait_def_id);\n-            self.children.entry(trait_def_id).or_insert(Children::new())\n+            self.children.entry(trait_def_id).or_default()\n                 .insert_blindly(tcx, impl_def_id);\n             return Ok(None);\n         }\n@@ -281,7 +274,7 @@ impl<'a, 'gcx, 'tcx> Graph {\n         loop {\n             use self::Inserted::*;\n \n-            let insert_result = self.children.entry(parent).or_insert(Children::new())\n+            let insert_result = self.children.entry(parent).or_default()\n                 .insert(tcx, impl_def_id, simplified)?;\n \n             match insert_result {\n@@ -318,9 +311,8 @@ impl<'a, 'gcx, 'tcx> Graph {\n                     self.parent.insert(impl_def_id, parent);\n \n                     // Add G as N's child.\n-                    let mut grand_children = Children::new();\n-                    grand_children.insert_blindly(tcx, grand_child_to_be);\n-                    self.children.insert(impl_def_id, grand_children);\n+                    self.children.entry(impl_def_id).or_default()\n+                        .insert_blindly(tcx, grand_child_to_be);\n                     break;\n                 }\n                 ShouldRecurseOn(new_parent) => {\n@@ -343,7 +335,7 @@ impl<'a, 'gcx, 'tcx> Graph {\n                   was already present.\");\n         }\n \n-        self.children.entry(parent).or_insert(Children::new()).insert_blindly(tcx, child);\n+        self.children.entry(parent).or_default().insert_blindly(tcx, child);\n     }\n \n     /// The parent of a given impl, which is the def id of the trait when the"}, {"sha": "42948a3f5f18ee16878d5cab07e4434bbb676ab3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -1132,11 +1132,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             None\n         };\n \n-        let mut trait_map = FxHashMap();\n+        let mut trait_map: FxHashMap<_, Lrc<FxHashMap<_, _>>> = FxHashMap();\n         for (k, v) in resolutions.trait_map {\n             let hir_id = hir.node_to_hir_id(k);\n-            let map = trait_map.entry(hir_id.owner)\n-                .or_insert_with(|| Lrc::new(FxHashMap()));\n+            let map = trait_map.entry(hir_id.owner).or_default();\n             Lrc::get_mut(map).unwrap()\n                             .insert(hir_id.local_id,\n                                     Lrc::new(StableVec::new(v)));"}, {"sha": "0ace44dca77b40f0f996fcf2c9345e21bc9ff369", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         match self.sty {\n             TyAdt(def, substs) => {\n                 {\n-                    let substs_set = visited.entry(def.did).or_insert(FxHashSet::default());\n+                    let substs_set = visited.entry(def.did).or_default();\n                     if !substs_set.insert(substs) {\n                         // We are already calculating the inhabitedness of this type.\n                         // The type must contain a reference to itself. Break the"}, {"sha": "6332080a1836c427f8308a5a0843c6cd288de1d2", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -41,6 +41,7 @@ pub struct TraitDef {\n     pub def_path_hash: DefPathHash,\n }\n \n+#[derive(Default)]\n pub struct TraitImpls {\n     blanket_impls: Vec<DefId>,\n     /// Impls indexed by their simplified self-type, for fast lookup.\n@@ -143,47 +144,43 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 trait_id: DefId)\n                                                 -> Lrc<TraitImpls> {\n-    let mut remote_impls = Vec::new();\n-\n-    // Traits defined in the current crate can't have impls in upstream\n-    // crates, so we don't bother querying the cstore.\n-    if !trait_id.is_local() {\n-        for &cnum in tcx.crates().iter() {\n-            let impls = tcx.implementations_of_trait((cnum, trait_id));\n-            remote_impls.extend(impls.iter().cloned());\n-        }\n-    }\n-\n-    let mut blanket_impls = Vec::new();\n-    let mut non_blanket_impls = FxHashMap();\n+    let mut impls = TraitImpls::default();\n \n-    let local_impls = tcx.hir\n-                         .trait_impls(trait_id)\n-                         .into_iter()\n-                         .map(|&node_id| tcx.hir.local_def_id(node_id));\n+    {\n+        let mut add_impl = |impl_def_id| {\n+            let impl_self_ty = tcx.type_of(impl_def_id);\n+            if impl_def_id.is_local() && impl_self_ty.references_error() {\n+                return;\n+            }\n \n-     for impl_def_id in local_impls.chain(remote_impls.into_iter()) {\n-        let impl_self_ty = tcx.type_of(impl_def_id);\n-        if impl_def_id.is_local() && impl_self_ty.references_error() {\n-            continue\n+            if let Some(simplified_self_ty) =\n+                fast_reject::simplify_type(tcx, impl_self_ty, false)\n+            {\n+                impls.non_blanket_impls\n+                    .entry(simplified_self_ty)\n+                    .or_default()\n+                    .push(impl_def_id);\n+            } else {\n+                impls.blanket_impls.push(impl_def_id);\n+            }\n+        };\n+\n+        // Traits defined in the current crate can't have impls in upstream\n+        // crates, so we don't bother querying the cstore.\n+        if !trait_id.is_local() {\n+            for &cnum in tcx.crates().iter() {\n+                for &def_id in tcx.implementations_of_trait((cnum, trait_id)).iter() {\n+                    add_impl(def_id);\n+                }\n+            }\n         }\n \n-        if let Some(simplified_self_ty) =\n-            fast_reject::simplify_type(tcx, impl_self_ty, false)\n-        {\n-            non_blanket_impls\n-                .entry(simplified_self_ty)\n-                .or_insert(vec![])\n-                .push(impl_def_id);\n-        } else {\n-            blanket_impls.push(impl_def_id);\n+        for &node_id in tcx.hir.trait_impls(trait_id) {\n+            add_impl(tcx.hir.local_def_id(node_id));\n         }\n     }\n \n-    Lrc::new(TraitImpls {\n-        blanket_impls: blanket_impls,\n-        non_blanket_impls: non_blanket_impls,\n-    })\n+    Lrc::new(impls)\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for TraitImpls {"}, {"sha": "88545c12415c69319a3bec1c393239b8ad1f6268", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -44,7 +44,7 @@ struct UnusedMutCx<'a, 'tcx: 'a> {\n impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n     fn check_unused_mut_pat(&self, pats: &[P<hir::Pat>]) {\n         let tcx = self.bccx.tcx;\n-        let mut mutables = FxHashMap();\n+        let mut mutables: FxHashMap<_, Vec<_>> = FxHashMap();\n         for p in pats {\n             p.each_binding(|_, hir_id, span, ident| {\n                 // Skip anything that looks like `_foo`\n@@ -60,7 +60,7 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n                         _ => return,\n                     }\n \n-                    mutables.entry(ident.name).or_insert(Vec::new()).push((hir_id, span));\n+                    mutables.entry(ident.name).or_default().push((hir_id, span));\n                 } else {\n                     tcx.sess.delay_span_bug(span, \"missing binding mode\");\n                 }"}, {"sha": "75dee2b78fddb1c24ce1070f080e044616f208f1", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -181,7 +181,7 @@ fn build_local_id_to_index(body: Option<&hir::Body>,\n \n     cfg.graph.each_node(|node_idx, node| {\n         if let cfg::CFGNodeData::AST(id) = node.data {\n-            index.entry(id).or_insert(vec![]).push(node_idx);\n+            index.entry(id).or_default().push(node_idx);\n         }\n         true\n     });\n@@ -209,7 +209,7 @@ fn build_local_id_to_index(body: Option<&hir::Body>,\n             }\n \n             fn visit_pat(&mut self, p: &hir::Pat) {\n-                self.index.entry(p.hir_id.local_id).or_insert(vec![]).push(self.entry);\n+                self.index.entry(p.hir_id.local_id).or_default().push(self.entry);\n                 intravisit::walk_pat(self, p)\n             }\n         }"}, {"sha": "edb1da0b5582ee9306fbf394072f01c0f0703872", "filename": "src/librustc_codegen_llvm/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fsymbol_export.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -299,7 +299,7 @@ fn upstream_monomorphizations_provider<'a, 'tcx>(\n \n     let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n \n-    let mut instances = DefIdMap();\n+    let mut instances: DefIdMap<FxHashMap<_, _>> = DefIdMap();\n \n     let cnum_stable_ids: IndexVec<CrateNum, Fingerprint> = {\n         let mut cnum_stable_ids = IndexVec::from_elem_n(Fingerprint::ZERO,\n@@ -318,8 +318,7 @@ fn upstream_monomorphizations_provider<'a, 'tcx>(\n     for &cnum in cnums.iter() {\n         for &(ref exported_symbol, _) in tcx.exported_symbols(cnum).iter() {\n             if let &ExportedSymbol::Generic(def_id, substs) = exported_symbol {\n-                let substs_map = instances.entry(def_id)\n-                                          .or_insert_with(|| FxHashMap());\n+                let substs_map = instances.entry(def_id).or_default();\n \n                 match substs_map.entry(substs) {\n                     Occupied(mut e) => {"}, {"sha": "0330a0598268ce842c4076c5b92fa83e6c8a3c8d", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -1020,12 +1020,12 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n     }).collect();\n \n     if tcx.sess.opts.debugging_opts.print_mono_items.is_some() {\n-        let mut item_to_cgus = FxHashMap();\n+        let mut item_to_cgus: FxHashMap<_, Vec<_>> = FxHashMap();\n \n         for cgu in &codegen_units {\n             for (&mono_item, &linkage) in cgu.items() {\n                 item_to_cgus.entry(mono_item)\n-                            .or_insert(Vec::new())\n+                            .or_default()\n                             .push((cgu.name().clone(), linkage));\n             }\n         }"}, {"sha": "b72d011c99bad9ea84a98c35e9f368c29d888799", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -33,12 +33,12 @@ impl TestGraph {\n         for &(source, target) in edges {\n             graph.num_nodes = max(graph.num_nodes, source + 1);\n             graph.num_nodes = max(graph.num_nodes, target + 1);\n-            graph.successors.entry(source).or_insert(vec![]).push(target);\n-            graph.predecessors.entry(target).or_insert(vec![]).push(source);\n+            graph.successors.entry(source).or_default().push(target);\n+            graph.predecessors.entry(target).or_default().push(source);\n         }\n         for node in 0..graph.num_nodes {\n-            graph.successors.entry(node).or_insert(vec![]);\n-            graph.predecessors.entry(node).or_insert(vec![]);\n+            graph.successors.entry(node).or_default();\n+            graph.predecessors.entry(node).or_default();\n         }\n         graph\n     }"}, {"sha": "02a41e68f68cb15a353e228ddc17a2eeb030d363", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -1788,7 +1788,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'a, 'tcx> {\n             if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_id) {\n                 self.impls\n                     .entry(trait_ref.def_id)\n-                    .or_insert(vec![])\n+                    .or_default()\n                     .push(impl_id.index);\n             }\n         }"}, {"sha": "f78a19403acf8b06cf2ae638cf63c12d1bcc152b", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -451,7 +451,10 @@ impl<'a> Context<'a> {\n         let rlib_prefix = format!(\"lib{}{}\", self.crate_name, extra_prefix);\n         let staticlib_prefix = format!(\"{}{}{}\", staticpair.0, self.crate_name, extra_prefix);\n \n-        let mut candidates = FxHashMap();\n+        let mut candidates: FxHashMap<\n+            _,\n+            (FxHashMap<_, _>, FxHashMap<_, _>, FxHashMap<_, _>),\n+        > = FxHashMap();\n         let mut staticlibs = vec![];\n \n         // First, find all possible candidate rlibs and dylibs purely based on\n@@ -493,8 +496,7 @@ impl<'a> Context<'a> {\n             info!(\"lib candidate: {}\", path.display());\n \n             let hash_str = hash.to_string();\n-            let slot = candidates.entry(hash_str)\n-                .or_insert_with(|| (FxHashMap(), FxHashMap(), FxHashMap()));\n+            let slot = candidates.entry(hash_str).or_default();\n             let (ref mut rlibs, ref mut rmetas, ref mut dylibs) = *slot;\n             fs::canonicalize(path)\n                 .map(|p| {"}, {"sha": "454f89e5d06fccbbd24e20e9fc9a4318f44058b9", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n \n                             self.activation_map\n                                 .entry(location)\n-                                .or_insert(Vec::new())\n+                                .or_default()\n                                 .push(borrow_index);\n                             TwoPhaseActivation::ActivatedAt(location)\n                         }"}, {"sha": "8f3595b17848cbacafe184635e66a6343f6e8491", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -80,7 +80,7 @@ fn precompute_borrows_out_of_scope<'tcx>(\n             debug!(\"borrow {:?} gets killed at {:?}\", borrow_index, location);\n             borrows_out_of_scope_at_location\n                 .entry(location)\n-                .or_insert(vec![])\n+                .or_default()\n                 .push(borrow_index);\n             continue;\n         }"}, {"sha": "7d7be69b35559915fe3456df1978a181e3ff3f51", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -696,7 +696,7 @@ fn internalize_symbols<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     inlining_map.iter_accesses(|accessor, accessees| {\n         for accessee in accessees {\n             accessor_map.entry(*accessee)\n-                        .or_insert(Vec::new())\n+                        .or_default()\n                         .push(accessor);\n         }\n     });"}, {"sha": "01ad85cf66830e28764f9011098198b34ecf1ef3", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -528,7 +528,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n         if let Some(parent) = scope_data.parent_scope {\n             scope_tree\n                 .entry(parent)\n-                .or_insert(vec![])\n+                .or_default()\n                 .push(SourceScope::new(index));\n         } else {\n             // Only the argument scope has no parent, because it's the root."}, {"sha": "cafacf99c3d0d495b39fccaeb39cd3450ecded30", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'b, 'd> UnusedImportCheckVisitor<'a, 'b, 'd> {\n                 // Check later.\n                 return;\n             }\n-            self.unused_imports.entry(item_id).or_insert_with(NodeMap).insert(id, span);\n+            self.unused_imports.entry(item_id).or_default().insert(id, span);\n         } else {\n             // This trait import is definitely used, in a way other than\n             // method resolution.\n@@ -112,7 +112,7 @@ impl<'a, 'b, 'cl> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'cl> {\n             if items.len() == 0 {\n                 self.unused_imports\n                     .entry(self.base_id)\n-                    .or_insert_with(NodeMap)\n+                    .or_default()\n                     .insert(id, span);\n             }\n         } else {"}, {"sha": "4b2a96be4ddcb7f0b61e082c03a9ff7acbf017f3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -1819,7 +1819,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n     fn add_to_glob_map(&mut self, id: NodeId, ident: Ident) {\n         if self.make_glob_map {\n-            self.glob_map.entry(id).or_insert_with(FxHashSet).insert(ident.name);\n+            self.glob_map.entry(id).or_default().insert(ident.name);\n         }\n     }\n \n@@ -3703,14 +3703,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n                             let seen = self.freevars_seen\n                                            .entry(function_id)\n-                                           .or_insert_with(|| NodeMap());\n+                                           .or_default();\n                             if let Some(&index) = seen.get(&node_id) {\n                                 def = Def::Upvar(node_id, index, function_id);\n                                 continue;\n                             }\n                             let vec = self.freevars\n                                           .entry(function_id)\n-                                          .or_insert_with(|| vec![]);\n+                                          .or_default();\n                             let depth = vec.len();\n                             def = Def::Upvar(node_id, depth, function_id);\n "}, {"sha": "189859aad07e296e06cedbbfa11f27b35db189c0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -2005,7 +2005,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                        closure_def_id: DefId,\n                                        r: DeferredCallResolution<'gcx, 'tcx>) {\n         let mut deferred_call_resolutions = self.deferred_call_resolutions.borrow_mut();\n-        deferred_call_resolutions.entry(closure_def_id).or_insert(vec![]).push(r);\n+        deferred_call_resolutions.entry(closure_def_id).or_default().push(r);\n     }\n \n     fn remove_deferred_call_resolutions(&self,"}, {"sha": "3adcd638a62f18f744dde1b39ca3c052f3ba942c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -242,7 +242,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             .borrow_mut()\n                             .adjustments_mut()\n                             .entry(rhs_expr.hir_id)\n-                            .or_insert(vec![])\n+                            .or_default()\n                             .push(autoref);\n                     }\n                 }"}, {"sha": "f37167d1f6688cb2ab0b31e959fffa249bffd9c6", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -304,7 +304,7 @@ impl<'a, 'tcx> InherentCollect<'a, 'tcx> {\n             let impl_def_id = self.tcx.hir.local_def_id(item.id);\n             let mut rc_vec = self.impls_map.inherent_impls\n                                            .entry(def_id)\n-                                           .or_insert_with(|| Lrc::new(vec![]));\n+                                           .or_default();\n \n             // At this point, there should not be any clones of the\n             // `Lrc`, so we can still safely push into it in place:"}, {"sha": "1331bd5186f19ba5dee8a70cc9c53edecbe26070", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -267,7 +267,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n         // all intermediate RegionVids. At the end, all constraints should\n         // be between Regions (aka region variables). This gives us the information\n         // we need to create the Generics.\n-        let mut finished = FxHashMap();\n+        let mut finished: FxHashMap<_, Vec<_>> = FxHashMap();\n \n         let mut vid_map: FxHashMap<RegionTarget, RegionDeps> = FxHashMap();\n \n@@ -281,25 +281,25 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n                     {\n                         let deps1 = vid_map\n                             .entry(RegionTarget::RegionVid(r1))\n-                            .or_insert_with(|| Default::default());\n+                            .or_default();\n                         deps1.larger.insert(RegionTarget::RegionVid(r2));\n                     }\n \n                     let deps2 = vid_map\n                         .entry(RegionTarget::RegionVid(r2))\n-                        .or_insert_with(|| Default::default());\n+                        .or_default();\n                     deps2.smaller.insert(RegionTarget::RegionVid(r1));\n                 }\n                 &Constraint::RegSubVar(region, vid) => {\n                     let deps = vid_map\n                         .entry(RegionTarget::RegionVid(vid))\n-                        .or_insert_with(|| Default::default());\n+                        .or_default();\n                     deps.smaller.insert(RegionTarget::Region(region));\n                 }\n                 &Constraint::VarSubReg(vid, region) => {\n                     let deps = vid_map\n                         .entry(RegionTarget::RegionVid(vid))\n-                        .or_insert_with(|| Default::default());\n+                        .or_default();\n                     deps.larger.insert(RegionTarget::Region(region));\n                 }\n                 &Constraint::RegSubReg(r1, r2) => {\n@@ -308,7 +308,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n                     if self.region_name(r1) != self.region_name(r2) {\n                         finished\n                             .entry(self.region_name(r2).expect(\"no region_name found\"))\n-                            .or_insert_with(|| Vec::new())\n+                            .or_default()\n                             .push(r1);\n                     }\n                 }\n@@ -343,7 +343,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n                             if self.region_name(r1) != self.region_name(r2) {\n                                 finished\n                                     .entry(self.region_name(r2).expect(\"no region name found\"))\n-                                    .or_insert_with(|| Vec::new())\n+                                    .or_default()\n                                     .push(r1) // Larger, smaller\n                             }\n                         }\n@@ -577,8 +577,8 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n         } = full_generics.clean(self.cx);\n \n         let mut has_sized = FxHashSet();\n-        let mut ty_to_bounds = FxHashMap();\n-        let mut lifetime_to_bounds = FxHashMap();\n+        let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = FxHashMap();\n+        let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = FxHashMap();\n         let mut ty_to_traits: FxHashMap<Type, FxHashSet<Type>> = FxHashMap();\n \n         let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = FxHashMap();\n@@ -647,19 +647,19 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n \n                             ty_to_bounds\n                                 .entry(ty.clone())\n-                                .or_insert_with(|| FxHashSet());\n+                                .or_default();\n                         } else {\n                             ty_to_bounds\n                                 .entry(ty.clone())\n-                                .or_insert_with(|| FxHashSet())\n+                                .or_default()\n                                 .insert(b.clone());\n                         }\n                     }\n                 }\n                 WherePredicate::RegionPredicate { lifetime, bounds } => {\n                     lifetime_to_bounds\n                         .entry(lifetime)\n-                        .or_insert_with(|| FxHashSet())\n+                        .or_default()\n                         .extend(bounds);\n                 }\n                 WherePredicate::EqPredicate { lhs, rhs } => {\n@@ -722,7 +722,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n \n                                     let bounds = ty_to_bounds\n                                         .entry(*ty.clone())\n-                                        .or_insert_with(|| FxHashSet());\n+                                        .or_default();\n \n                                     bounds.insert(GenericBound::TraitBound(\n                                         PolyTrait {\n@@ -752,7 +752,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n                                     // loop\n                                     ty_to_traits\n                                         .entry(*ty.clone())\n-                                        .or_insert_with(|| FxHashSet())\n+                                        .or_default()\n                                         .insert(*trait_.clone());\n                                 }\n                                 _ => panic!(\"Unexpected trait {:?} for {:?}\", trait_, did),"}, {"sha": "e938d2d0a16526353208a31dad59163cc40d44a3", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -34,7 +34,7 @@ use core::DocContext;\n \n pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n     // First, partition the where clause into its separate components\n-    let mut params = BTreeMap::new();\n+    let mut params: BTreeMap<_, Vec<_>> = BTreeMap::new();\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n     let mut tybounds = Vec::new();\n@@ -43,7 +43,7 @@ pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n         match clause {\n             WP::BoundPredicate { ty, bounds } => {\n                 match ty {\n-                    clean::Generic(s) => params.entry(s).or_insert(Vec::new())\n+                    clean::Generic(s) => params.entry(s).or_default()\n                                                .extend(bounds),\n                     t => tybounds.push((t, ty_bounds(bounds))),\n                 }"}, {"sha": "33b3934e3a447d87ca5e9fb896c619035bac5c12", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -1245,7 +1245,7 @@ impl DocFolder for Cache {\n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = item.inner {\n             if let Some(did) = i.trait_.def_id() {\n-                self.implementors.entry(did).or_insert(vec![]).push(Impl {\n+                self.implementors.entry(did).or_default().push(Impl {\n                     impl_item: item.clone(),\n                 });\n             }\n@@ -1440,7 +1440,7 @@ impl DocFolder for Cache {\n                     unreachable!()\n                 };\n                 for did in dids {\n-                    self.impls.entry(did).or_insert(vec![]).push(Impl {\n+                    self.impls.entry(did).or_default().push(Impl {\n                         impl_item: item.clone(),\n                     });\n                 }\n@@ -1971,7 +1971,7 @@ impl Context {\n \n     fn build_sidebar_items(&self, m: &clean::Module) -> BTreeMap<String, Vec<NameDoc>> {\n         // BTreeMap instead of HashMap to get a sorted output\n-        let mut map = BTreeMap::new();\n+        let mut map: BTreeMap<_, Vec<_>> = BTreeMap::new();\n         for item in &m.items {\n             if item.is_stripped() { continue }\n \n@@ -1981,7 +1981,7 @@ impl Context {\n                 Some(ref s) => s.to_string(),\n             };\n             let short = short.to_string();\n-            map.entry(short).or_insert(vec![])\n+            map.entry(short).or_default()\n                 .push((myname, Some(plain_summary_line(item.doc_value()))));\n         }\n "}, {"sha": "a8ae6a94d5c4d329ebac5199dc239e346afd6cca", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -599,15 +599,15 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n /// returns a map mapping crate names to their paths or else an\n /// error message.\n fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n-    let mut externs = BTreeMap::new();\n+    let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().ok_or(\"--extern value must not be empty\".to_string())?;\n         let location = parts.next()\n                                  .ok_or(\"--extern value must be of the format `foo=bar`\"\n                                     .to_string())?;\n         let name = name.to_string();\n-        externs.entry(name).or_insert_with(BTreeSet::new).insert(location.to_string());\n+        externs.entry(name).or_default().insert(location.to_string());\n     }\n     Ok(Externs::new(externs))\n }"}, {"sha": "ffa2730d68678f36550172d993bce876d85042d9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -327,7 +327,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Unresolved macros produce dummy outputs as a recovery measure.\n         invocations.reverse();\n         let mut expanded_fragments = Vec::new();\n-        let mut derives = HashMap::new();\n+        let mut derives: HashMap<Mark, Vec<_>> = HashMap::new();\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {\n@@ -388,7 +388,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         .map_attrs(|mut attrs| { attrs.retain(|a| a.path != \"derive\"); attrs });\n                     let item_with_markers =\n                         add_derived_markers(&mut self.cx, item.span(), &traits, item.clone());\n-                    let derives = derives.entry(invoc.expansion_data.mark).or_insert_with(Vec::new);\n+                    let derives = derives.entry(invoc.expansion_data.mark).or_default();\n \n                     for path in &traits {\n                         let mark = Mark::fresh(self.cx.current_expansion.mark);"}, {"sha": "770561fe3269a3d8228ad9f7167cf566614db4fc", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -88,8 +88,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n \n fn trace_macros_note(cx: &mut ExtCtxt, sp: Span, message: String) {\n     let sp = sp.macro_backtrace().last().map(|trace| trace.call_site).unwrap_or(sp);\n-    let values: &mut Vec<String> = cx.expansions.entry(sp).or_insert_with(Vec::new);\n-    values.push(message);\n+    cx.expansions.entry(sp).or_default().push(message);\n }\n \n /// Given `lhses` and `rhses`, this is the new macro we create"}, {"sha": "03bcda513fd8494ed60e599c468a6b55410175e4", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -355,10 +355,10 @@ fn check_crate_duplicate(resolve: &Resolve, bad: &mut bool) {\n         // \"cargo\", // FIXME(#53005)\n         \"rustc-ap-syntax\",\n     ];\n-    let mut name_to_id = HashMap::new();\n+    let mut name_to_id: HashMap<_, Vec<_>> = HashMap::new();\n     for node in resolve.nodes.iter() {\n         name_to_id.entry(node.id.split_whitespace().next().unwrap())\n-            .or_insert(Vec::new())\n+            .or_default()\n             .push(&node.id);\n     }\n "}, {"sha": "3dccffddf938872e682ed63b426fc1182991e1bd", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14aed81d9ac058824af62c37b892b50fdb769912/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14aed81d9ac058824af62c37b892b50fdb769912/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=14aed81d9ac058824af62c37b892b50fdb769912", "patch": "@@ -20,7 +20,7 @@ use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let mut contents = String::new();\n-    let mut map = HashMap::new();\n+    let mut map: HashMap<_, Vec<_>> = HashMap::new();\n     super::walk(path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n                 &mut |file| {\n@@ -61,7 +61,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     Ok(n) => n,\n                     Err(..) => continue,\n                 };\n-                map.entry(code).or_insert(Vec::new())\n+                map.entry(code).or_default()\n                    .push((file.to_owned(), num + 1, line.to_owned()));\n                 break\n             }"}]}