{"sha": "8b1c4cbbaf0252ed68f62b0613a8da9725141262", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMWM0Y2JiYWYwMjUyZWQ2OGY2MmIwNjEzYThkYTk3MjUxNDEyNjI=", "commit": {"author": {"name": "Ted Mielczarek", "email": "ted@mielczarek.org", "date": "2016-12-01T00:44:07Z"}, "committer": {"name": "Ted Mielczarek", "email": "ted@mielczarek.org", "date": "2016-12-01T00:44:07Z"}, "message": "Add std::os::windows::process::CommandExt, with set_creation_flags and add_creation_flags methods. Fixes #37827\n\nThis adds a CommandExt trait for Windows along with an implementation of it\nfor std::process::Command with methods to set the process creation flags that\nare passed to CreateProcess.", "tree": {"sha": "df1d9c922a8f689eb0a06093ee4e7408fd10dbb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1d9c922a8f689eb0a06093ee4e7408fd10dbb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b1c4cbbaf0252ed68f62b0613a8da9725141262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1c4cbbaf0252ed68f62b0613a8da9725141262", "html_url": "https://github.com/rust-lang/rust/commit/8b1c4cbbaf0252ed68f62b0613a8da9725141262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b1c4cbbaf0252ed68f62b0613a8da9725141262/comments", "author": {"login": "luser", "id": 286001, "node_id": "MDQ6VXNlcjI4NjAwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/286001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luser", "html_url": "https://github.com/luser", "followers_url": "https://api.github.com/users/luser/followers", "following_url": "https://api.github.com/users/luser/following{/other_user}", "gists_url": "https://api.github.com/users/luser/gists{/gist_id}", "starred_url": "https://api.github.com/users/luser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luser/subscriptions", "organizations_url": "https://api.github.com/users/luser/orgs", "repos_url": "https://api.github.com/users/luser/repos", "events_url": "https://api.github.com/users/luser/events{/privacy}", "received_events_url": "https://api.github.com/users/luser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luser", "id": 286001, "node_id": "MDQ6VXNlcjI4NjAwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/286001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luser", "html_url": "https://github.com/luser", "followers_url": "https://api.github.com/users/luser/followers", "following_url": "https://api.github.com/users/luser/following{/other_user}", "gists_url": "https://api.github.com/users/luser/gists{/gist_id}", "starred_url": "https://api.github.com/users/luser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luser/subscriptions", "organizations_url": "https://api.github.com/users/luser/orgs", "repos_url": "https://api.github.com/users/luser/repos", "events_url": "https://api.github.com/users/luser/events{/privacy}", "received_events_url": "https://api.github.com/users/luser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127a83df6615d09cda6ed9b53f7daba2d78c925d", "url": "https://api.github.com/repos/rust-lang/rust/commits/127a83df6615d09cda6ed9b53f7daba2d78c925d", "html_url": "https://github.com/rust-lang/rust/commit/127a83df6615d09cda6ed9b53f7daba2d78c925d"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "912cc122e9273cd7923e819aa562a630e42fd51a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8b1c4cbbaf0252ed68f62b0613a8da9725141262/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1c4cbbaf0252ed68f62b0613a8da9725141262/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=8b1c4cbbaf0252ed68f62b0613a8da9725141262", "patch": "@@ -1159,4 +1159,61 @@ mod tests {\n             Ok(_) => panic!(),\n         }\n     }\n+\n+    /// Test that process creation flags work by debugging a process.\n+    /// Other creation flags make it hard or impossible to detect\n+    /// behavioral changes in the process.\n+    #[test]\n+    #[cfg(windows)]\n+    fn test_creation_flags() {\n+        use os::windows::process::CommandExt;\n+        use sys::c::{BOOL, DWORD, INFINITE};\n+        #[repr(C, packed)]\n+        struct DEBUG_EVENT {\n+            pub event_code: DWORD,\n+            pub process_id: DWORD,\n+            pub thread_id: DWORD,\n+            // This is a union in the real struct, but we don't\n+            // need this data for the purposes of this test.\n+            pub _junk: [u8; 164],\n+        }\n+\n+        extern \"system\" {\n+            fn WaitForDebugEvent(lpDebugEvent: *mut DEBUG_EVENT, dwMilliseconds: DWORD) -> BOOL;\n+            fn ContinueDebugEvent(dwProcessId: DWORD, dwThreadId: DWORD, dwContinueStatus: DWORD) -> BOOL;\n+        }\n+\n+        const DEBUG_PROCESS: DWORD = 1;\n+        const EXIT_PROCESS_DEBUG_EVENT: DWORD = 5;\n+        const DBG_EXCEPTION_NOT_HANDLED: DWORD = 0x80010001;\n+\n+        let mut child = Command::new(\"cmd\")\n+            .add_creation_flags(DEBUG_PROCESS)\n+            .stdin(Stdio::piped()).spawn().unwrap();\n+        child.stdin.take().unwrap().write_all(b\"exit\\r\\n\").unwrap();\n+        let mut events = 0;\n+        let mut event = DEBUG_EVENT {\n+            event_code: 0,\n+            process_id: 0,\n+            thread_id: 0,\n+            _junk: [0; 164],\n+        };\n+        loop {\n+            if unsafe { WaitForDebugEvent(&mut event as *mut DEBUG_EVENT, INFINITE) } == 0 {\n+                panic!(\"WaitForDebugEvent failed!\");\n+            }\n+            events += 1;\n+\n+            if event.event_code == EXIT_PROCESS_DEBUG_EVENT {\n+                break;\n+            }\n+\n+            if unsafe { ContinueDebugEvent(event.process_id,\n+                                           event.thread_id,\n+                                           DBG_EXCEPTION_NOT_HANDLED) } == 0 {\n+                panic!(\"ContinueDebugEvent failed!\");\n+            }\n+        }\n+        assert!(events > 0);\n+    }\n }"}, {"sha": "f5bf3354637cfb82a1023eff437a0a0a9cf086b8", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8b1c4cbbaf0252ed68f62b0613a8da9725141262/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1c4cbbaf0252ed68f62b0613a8da9725141262/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=8b1c4cbbaf0252ed68f62b0613a8da9725141262", "patch": "@@ -15,7 +15,7 @@\n use os::windows::io::{FromRawHandle, RawHandle, AsRawHandle, IntoRawHandle};\n use process;\n use sys;\n-use sys_common::{AsInner, FromInner, IntoInner};\n+use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {\n@@ -97,3 +97,32 @@ impl ExitStatusExt for process::ExitStatus {\n         process::ExitStatus::from_inner(From::from(raw))\n     }\n }\n+\n+/// Windows-specific extensions to the `std::process::Command` builder\n+#[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+pub trait CommandExt {\n+    /// Sets the [process creation flags][1] to be passed to `CreateProcess`.\n+    ///\n+    /// These will always be ORed with `CREATE_UNICODE_ENVIRONMENT`.\n+    /// [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx\n+    #[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+    fn set_creation_flags(&mut self, flags: u32) -> &mut process::Command;\n+    /// Add `flags` to the the [process creation flags][1] to be passed to `CreateProcess`.\n+    ///\n+    /// These will always be ORed with `CREATE_UNICODE_ENVIRONMENT`.\n+    /// [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx\n+    #[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+    fn add_creation_flags(&mut self, flags: u32) -> &mut process::Command;\n+}\n+\n+#[unstable(feature = \"windows_process_extensions\", issue = \"37827\")]\n+impl CommandExt for process::Command {\n+    fn set_creation_flags(&mut self, flags: u32) -> &mut process::Command {\n+        self.as_inner_mut().set_creation_flags(flags);\n+        self\n+    }\n+    fn add_creation_flags(&mut self, flags: u32) -> &mut process::Command {\n+        self.as_inner_mut().add_creation_flags(flags);\n+        self\n+    }\n+}"}, {"sha": "a221c67efd98914fbbe22d357fc5e14387add0be", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b1c4cbbaf0252ed68f62b0613a8da9725141262/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1c4cbbaf0252ed68f62b0613a8da9725141262/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=8b1c4cbbaf0252ed68f62b0613a8da9725141262", "patch": "@@ -54,6 +54,7 @@ pub struct Command {\n     args: Vec<OsString>,\n     env: Option<HashMap<OsString, OsString>>,\n     cwd: Option<OsString>,\n+    flags: u32,\n     detach: bool, // not currently exposed in std::process\n     stdin: Option<Stdio>,\n     stdout: Option<Stdio>,\n@@ -84,6 +85,7 @@ impl Command {\n             args: Vec::new(),\n             env: None,\n             cwd: None,\n+            flags: 0,\n             detach: false,\n             stdin: None,\n             stdout: None,\n@@ -124,6 +126,12 @@ impl Command {\n     pub fn stderr(&mut self, stderr: Stdio) {\n         self.stderr = Some(stderr);\n     }\n+    pub fn set_creation_flags(&mut self, flags: u32) {\n+        self.flags = flags;\n+    }\n+    pub fn add_creation_flags(&mut self, flags: u32) {\n+        self.flags = self.flags | flags;\n+    }\n \n     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)\n                  -> io::Result<(Process, StdioPipes)> {\n@@ -157,7 +165,7 @@ impl Command {\n         cmd_str.push(0); // add null terminator\n \n         // stolen from the libuv code.\n-        let mut flags = c::CREATE_UNICODE_ENVIRONMENT;\n+        let mut flags = self.flags | c::CREATE_UNICODE_ENVIRONMENT;\n         if self.detach {\n             flags |= c::DETACHED_PROCESS | c::CREATE_NEW_PROCESS_GROUP;\n         }"}]}