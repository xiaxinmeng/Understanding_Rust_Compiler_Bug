{"sha": "5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "node_id": "C_kwDOAAsO6NoAKDVmNTkzZGE0ZTY5NzZmZTI3ZjdjZDMxY2UwZmI5YTkyOTNiM2EwMGI", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-26T21:50:19Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-27T13:30:44Z"}, "message": "Unify all validity check intrinsics\n\nAlso merges the inhabitedness check into the query to further unify the\ncode paths.", "tree": {"sha": "72a1620a46caf8b13f65c543190f3481584082ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72a1620a46caf8b13f65c543190f3481584082ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "html_url": "https://github.com/rust-lang/rust/commit/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "html_url": "https://github.com/rust-lang/rust/commit/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39"}], "stats": {"total": 282, "additions": 119, "deletions": 163}, "files": [{"sha": "e74aabf2fcb0d3a643ef277018de8d1b306c5a37", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 31, "deletions": 49, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -22,7 +22,7 @@ pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{HasParamEnv, InitKind};\n+use rustc_middle::ty::layout::{HasParamEnv, ValidityRequirement};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -628,57 +628,39 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             intrinsic_args!(fx, args => (); intrinsic);\n \n             let ty = substs.type_at(0);\n-            let layout = fx.layout_of(ty);\n-            if layout.abi.is_uninhabited() {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n-                        source_info,\n-                    )\n-                });\n-                return;\n-            }\n \n-            if intrinsic == sym::assert_zero_valid\n-                && !fx\n-                    .tcx\n-                    .check_validity_of_init((InitKind::Zero, fx.param_env().and(ty)))\n-                    .expect(\"expected to have layout during codegen\")\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to zero-initialize type `{}`, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    );\n-                });\n-                return;\n-            }\n+            let requirement = ValidityRequirement::from_intrinsic(intrinsic);\n \n-            if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx\n+            if let Some(requirement) = requirement {\n+                let do_panic = !fx\n                     .tcx\n-                    .check_validity_of_init((\n-                        InitKind::UninitMitigated0x01Fill,\n-                        fx.param_env().and(ty),\n-                    ))\n-                    .expect(\"expected to have layout during codegen\")\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to leave type `{}` uninitialized, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    )\n-                });\n-                return;\n+                    .check_validity_requirement((requirement, fx.param_env().and(ty)))\n+                    .expect(\"expect to have layout during codegen\");\n+\n+                if do_panic {\n+                    let layout = fx.layout_of(ty);\n+\n+                    with_no_trimmed_paths!({\n+                        crate::base::codegen_panic_nounwind(\n+                            fx,\n+                            &if layout.abi.is_uninhabited() {\n+                                format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty)\n+                            } else if requirement == ValidityRequirement::Zero {\n+                                format!(\n+                                    \"attempted to zero-initialize type `{}`, which is invalid\",\n+                                    layout.ty\n+                                )\n+                            } else {\n+                                format!(\n+                                    \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                                    layout.ty\n+                                )\n+                            },\n+                            source_info,\n+                        )\n+                    });\n+                    return;\n+                }\n             }\n         }\n "}, {"sha": "57a19a4ab1eab8250e1c0e05a2d874c308c761a3", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n-use rustc_middle::ty::layout::{HasTyCtxt, InitKind, LayoutOf};\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, ValidityRequirement};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::{self, Instance, Ty, TypeVisitableExt};\n use rustc_session::config::OptLevel;\n@@ -655,44 +655,24 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // Emit a panic or a no-op for `assert_*` intrinsics.\n         // These are intrinsics that compile to panics so that we can get a message\n         // which mentions the offending type, even from a const context.\n-        #[derive(Debug, PartialEq)]\n-        enum AssertIntrinsic {\n-            Inhabited,\n-            ZeroValid,\n-            MemUninitializedValid,\n-        }\n-        let panic_intrinsic = intrinsic.and_then(|i| match i {\n-            sym::assert_inhabited => Some(AssertIntrinsic::Inhabited),\n-            sym::assert_zero_valid => Some(AssertIntrinsic::ZeroValid),\n-            sym::assert_mem_uninitialized_valid => Some(AssertIntrinsic::MemUninitializedValid),\n-            _ => None,\n-        });\n-        if let Some(intrinsic) = panic_intrinsic {\n-            use AssertIntrinsic::*;\n-\n+        let panic_intrinsic = intrinsic.and_then(|s| ValidityRequirement::from_intrinsic(s));\n+        if let Some(requirement) = panic_intrinsic {\n             let ty = instance.unwrap().substs.type_at(0);\n+\n+            let do_panic = !bx\n+                .tcx()\n+                .check_validity_requirement((requirement, bx.param_env().and(ty)))\n+                .expect(\"expect to have layout during codegen\");\n+\n             let layout = bx.layout_of(ty);\n-            let do_panic = match intrinsic {\n-                Inhabited => layout.abi.is_uninhabited(),\n-                ZeroValid => !bx\n-                    .tcx()\n-                    .check_validity_of_init((InitKind::Zero, bx.param_env().and(ty)))\n-                    .expect(\"expected to have layout during codegen\"),\n-                MemUninitializedValid => !bx\n-                    .tcx()\n-                    .check_validity_of_init((\n-                        InitKind::UninitMitigated0x01Fill,\n-                        bx.param_env().and(ty),\n-                    ))\n-                    .expect(\"expected to have layout during codegen\"),\n-            };\n+\n             Some(if do_panic {\n                 let msg_str = with_no_visible_paths!({\n                     with_no_trimmed_paths!({\n                         if layout.abi.is_uninhabited() {\n                             // Use this error even for the other intrinsics as it is more precise.\n                             format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                        } else if intrinsic == ZeroValid {\n+                        } else if requirement == ValidityRequirement::Zero {\n                             format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n                         } else {\n                             format!("}, {"sha": "c65d677e8ea75812e9b36415e90f6b8e4a9395ca", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 26, "deletions": 48, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::{\n     BinOp, NonDivergingIntrinsic,\n };\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{InitKind, LayoutOf as _};\n+use rustc_middle::ty::layout::{LayoutOf as _, ValidityRequirement};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n@@ -418,57 +418,35 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | sym::assert_zero_valid\n             | sym::assert_mem_uninitialized_valid => {\n                 let ty = instance.substs.type_at(0);\n-                let layout = self.layout_of(ty)?;\n-\n-                // For *all* intrinsics we first check `is_uninhabited` to give a more specific\n-                // error message.\n-                if layout.abi.is_uninhabited() {\n-                    // The run-time intrinsic panics just to get a good backtrace; here we abort\n-                    // since there is no problem showing a backtrace even for aborts.\n-                    M::abort(\n-                        self,\n-                        format!(\n+                let requirement = ValidityRequirement::from_intrinsic(intrinsic_name).unwrap();\n+\n+                let should_panic = !self\n+                    .tcx\n+                    .check_validity_requirement((requirement, self.param_env.and(ty)))\n+                    .map_err(|_| err_inval!(TooGeneric))?;\n+\n+                if should_panic {\n+                    let layout = self.layout_of(ty)?;\n+\n+                    let msg = match requirement {\n+                        // For *all* intrinsics we first check `is_uninhabited` to give a more specific\n+                        // error message.\n+                        _ if layout.abi.is_uninhabited() => format!(\n                             \"aborted execution: attempted to instantiate uninhabited type `{}`\",\n                             ty\n                         ),\n-                    )?;\n-                }\n-\n-                if intrinsic_name == sym::assert_zero_valid {\n-                    let should_panic = !self\n-                        .tcx\n-                        .check_validity_of_init((InitKind::Zero, self.param_env.and(ty)))\n-                        .map_err(|_| err_inval!(TooGeneric))?;\n-\n-                    if should_panic {\n-                        M::abort(\n-                            self,\n-                            format!(\n-                                \"aborted execution: attempted to zero-initialize type `{}`, which is invalid\",\n-                                ty\n-                            ),\n-                        )?;\n-                    }\n-                }\n+                        ValidityRequirement::Inhabited => bug!(\"handled earlier\"),\n+                        ValidityRequirement::Zero => format!(\n+                            \"aborted execution: attempted to zero-initialize type `{}`, which is invalid\",\n+                            ty\n+                        ),\n+                        ValidityRequirement::UninitMitigated0x01Fill => format!(\n+                            \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n+                            ty\n+                        ),\n+                    };\n \n-                if intrinsic_name == sym::assert_mem_uninitialized_valid {\n-                    let should_panic = !self\n-                        .tcx\n-                        .check_validity_of_init((\n-                            InitKind::UninitMitigated0x01Fill,\n-                            self.param_env.and(ty),\n-                        ))\n-                        .map_err(|_| err_inval!(TooGeneric))?;\n-\n-                    if should_panic {\n-                        M::abort(\n-                            self,\n-                            format!(\n-                                \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n-                                ty\n-                            ),\n-                        )?;\n-                    }\n+                    M::abort(self, msg)?;\n                 }\n             }\n             sym::simd_insert => {"}, {"sha": "ed9efe568fb303ff268f90f76076bcfec6bc2dfd", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -61,7 +61,7 @@ pub fn provide(providers: &mut Providers) {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::deref_mir_constant(tcx, param_env, value)\n     };\n-    providers.check_validity_of_init = |tcx, (init_kind, param_env_and_ty)| {\n-        util::might_permit_raw_init(tcx, init_kind, param_env_and_ty)\n+    providers.check_validity_requirement = |tcx, (init_kind, param_env_and_ty)| {\n+        util::check_validity_requirement(tcx, init_kind, param_env_and_ty)\n     };\n }"}, {"sha": "dcd15b919f4e3026c535b9bd3ca68810d1d6410b", "filename": "compiler/rustc_const_eval/src/util/check_validity_requirement.rs", "status": "renamed", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::layout::{InitKind, LayoutCx, LayoutError, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout, ValidityRequirement};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_target::abi::{Abi, FieldsShape, Scalar, Variants};\n@@ -18,16 +18,23 @@ use crate::interpret::{InterpCx, MemoryKind, OpTy};\n /// Rust UB as long as there is no risk of miscompilations. The `strict_init_checks` can be set to\n /// do a full check against Rust UB instead (in which case we will also ignore the 0x01-filling and\n /// to the full uninit check).\n-pub fn might_permit_raw_init<'tcx>(\n+pub fn check_validity_requirement<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    kind: InitKind,\n+    kind: ValidityRequirement,\n     param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Result<bool, LayoutError<'tcx>> {\n+    let layout = tcx.layout_of(param_env_and_ty)?;\n+\n+    // There is nothing strict or lax about inhabitedness.\n+    if kind == ValidityRequirement::Inhabited {\n+        return Ok(!layout.abi.is_uninhabited());\n+    }\n+\n     if tcx.sess.opts.unstable_opts.strict_init_checks {\n-        might_permit_raw_init_strict(tcx.layout_of(param_env_and_ty)?, tcx, kind)\n+        might_permit_raw_init_strict(layout, tcx, kind)\n     } else {\n         let layout_cx = LayoutCx { tcx, param_env: param_env_and_ty.param_env };\n-        might_permit_raw_init_lax(tcx.layout_of(param_env_and_ty)?, &layout_cx, kind)\n+        might_permit_raw_init_lax(layout, &layout_cx, kind)\n     }\n }\n \n@@ -36,7 +43,7 @@ pub fn might_permit_raw_init<'tcx>(\n fn might_permit_raw_init_strict<'tcx>(\n     ty: TyAndLayout<'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    kind: InitKind,\n+    kind: ValidityRequirement,\n ) -> Result<bool, LayoutError<'tcx>> {\n     let machine = CompileTimeInterpreter::new(\n         Limit::new(0),\n@@ -50,7 +57,7 @@ fn might_permit_raw_init_strict<'tcx>(\n         .allocate(ty, MemoryKind::Machine(crate::const_eval::MemoryKind::Heap))\n         .expect(\"OOM: failed to allocate for uninit check\");\n \n-    if kind == InitKind::Zero {\n+    if kind == ValidityRequirement::Zero {\n         cx.write_bytes_ptr(\n             allocated.ptr,\n             std::iter::repeat(0_u8).take(ty.layout.size().bytes_usize()),\n@@ -72,15 +79,18 @@ fn might_permit_raw_init_strict<'tcx>(\n fn might_permit_raw_init_lax<'tcx>(\n     this: TyAndLayout<'tcx>,\n     cx: &LayoutCx<'tcx, TyCtxt<'tcx>>,\n-    init_kind: InitKind,\n+    init_kind: ValidityRequirement,\n ) -> Result<bool, LayoutError<'tcx>> {\n     let scalar_allows_raw_init = move |s: Scalar| -> bool {\n         match init_kind {\n-            InitKind::Zero => {\n+            ValidityRequirement::Inhabited => {\n+                bug!(\"ValidityRequirement::Inhabited should have been handled above\")\n+            }\n+            ValidityRequirement::Zero => {\n                 // The range must contain 0.\n                 s.valid_range(cx).contains(0)\n             }\n-            InitKind::UninitMitigated0x01Fill => {\n+            ValidityRequirement::UninitMitigated0x01Fill => {\n                 // The range must include an 0x01-filled buffer.\n                 let mut val: u128 = 0x01;\n                 for _ in 1..s.size(cx).bytes() {", "previous_filename": "compiler/rustc_const_eval/src/util/might_permit_raw_init.rs"}, {"sha": "c0aabd77ceeadb3153cc8750b2ca556ff93c1f37", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -1,14 +1,14 @@\n mod alignment;\n mod call_kind;\n+mod check_validity_requirement;\n pub mod collect_writes;\n mod compare_types;\n mod find_self_call;\n-mod might_permit_raw_init;\n mod type_name;\n \n pub use self::alignment::is_disaligned;\n pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n+pub use self::check_validity_requirement::check_validity_requirement;\n pub use self::compare_types::{is_equal_up_to_subtyping, is_subtype};\n pub use self::find_self_call::find_self_call;\n-pub use self::might_permit_raw_init::might_permit_raw_init;\n pub use self::type_name::type_name;"}, {"sha": "78ee8a6a8fd64aacbe6573f19dd116d35097e062", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -4,7 +4,7 @@ use crate::infer::canonical::Canonical;\n use crate::mir;\n use crate::traits;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::layout::{InitKind, TyAndLayout};\n+use crate::ty::layout::{TyAndLayout, ValidityRequirement};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n@@ -698,7 +698,7 @@ impl Key for HirId {\n     }\n }\n \n-impl<'tcx> Key for (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n+impl<'tcx> Key for (ValidityRequirement, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n \n     // Just forward to `Ty<'tcx>`"}, {"sha": "f4c1ad0f6c0b94b2e075abbe09c540cd43f47414", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -2173,8 +2173,8 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query check_validity_of_init(key: (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>)) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n-        desc { \"checking to see if `{}` permits being left {}\", key.1.value, key.0 }\n+    query check_validity_requirement(key: (ValidityRequirement, ty::ParamEnvAnd<'tcx, Ty<'tcx>>)) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n+        desc { \"checking validity requirement for `{}`: {}\", key.1.value, key.0 }\n     }\n \n     query compare_impl_const("}, {"sha": "090272a6fa6d935f4fc4ecff0a36f78328efd29a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -7,6 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use rustc_session::config::OptLevel;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::*;\n@@ -172,16 +173,29 @@ pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n /// Used in `might_permit_raw_init` to indicate the kind of initialisation\n /// that is checked to be valid\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n-pub enum InitKind {\n+pub enum ValidityRequirement {\n+    Inhabited,\n     Zero,\n     UninitMitigated0x01Fill,\n }\n \n-impl fmt::Display for InitKind {\n+impl ValidityRequirement {\n+    pub fn from_intrinsic(intrinsic: Symbol) -> Option<Self> {\n+        match intrinsic {\n+            sym::assert_inhabited => Some(Self::Inhabited),\n+            sym::assert_zero_valid => Some(Self::Zero),\n+            sym::assert_mem_uninitialized_valid => Some(Self::UninitMitigated0x01Fill),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for ValidityRequirement {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Self::Zero => f.write_str(\"zeroed\"),\n-            Self::UninitMitigated0x01Fill => f.write_str(\"filled with 0x01\"),\n+            Self::Inhabited => f.write_str(\"is inhabited\"),\n+            Self::Zero => f.write_str(\"allows being left zeroed\"),\n+            Self::UninitMitigated0x01Fill => f.write_str(\"allows being filled with 0x01\"),\n         }\n     }\n }"}, {"sha": "2bc51baf87905b3247db503429b739a83121b148", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -32,7 +32,7 @@ use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n use crate::ty::context::TyCtxtFeed;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::layout::InitKind;\n+use crate::ty::layout::ValidityRequirement;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;"}, {"sha": "4182da1957e39d9ac662f18bd774ed47b2505d88", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=5f593da4e6976fe27f7cd31ce0fb9a9293b3a00b", "patch": "@@ -6,9 +6,9 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::layout::InitKind;\n+use rustc_middle::ty::layout::ValidityRequirement;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::Symbol;\n \n pub struct InstCombine;\n \n@@ -256,16 +256,8 @@ fn intrinsic_assert_panics<'tcx>(\n     ty: Ty<'tcx>,\n     intrinsic_name: Symbol,\n ) -> Option<bool> {\n-    Some(match intrinsic_name {\n-        sym::assert_inhabited => tcx.layout_of(param_env.and(ty)).ok()?.abi.is_uninhabited(),\n-        sym::assert_zero_valid => {\n-            !tcx.check_validity_of_init((InitKind::Zero, param_env.and(ty))).ok()?\n-        }\n-        sym::assert_mem_uninitialized_valid => !tcx\n-            .check_validity_of_init((InitKind::UninitMitigated0x01Fill, param_env.and(ty)))\n-            .ok()?,\n-        _ => return None,\n-    })\n+    let requirement = ValidityRequirement::from_intrinsic(intrinsic_name)?;\n+    Some(!tcx.check_validity_requirement((requirement, param_env.and(ty))).ok()?)\n }\n \n fn resolve_rust_intrinsic<'tcx>("}]}