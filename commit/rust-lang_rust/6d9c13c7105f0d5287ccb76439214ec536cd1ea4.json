{"sha": "6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOWMxM2M3MTA1ZjBkNTI4N2NjYjc2NDM5MjE0ZWM1MzZjZDFlYTQ=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-02-08T10:00:55Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-02-08T10:00:55Z"}, "message": "Add `config: &CargoConfig` parameter to `fn load_cargo(\u2026)`", "tree": {"sha": "4a42de6a5f0d57d94e6592e4deee38721c155084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a42de6a5f0d57d94e6592e4deee38721c155084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "html_url": "https://github.com/rust-lang/rust/commit/6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433ad23988df2445b6bbe5f393e0c3a701f73f13", "url": "https://api.github.com/repos/rust-lang/rust/commits/433ad23988df2445b6bbe5f393e0c3a701f73f13", "html_url": "https://github.com/rust-lang/rust/commit/433ad23988df2445b6bbe5f393e0c3a701f73f13"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "f4068937e768244852de454b1a33f1572825ffbd", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "patch": "@@ -59,7 +59,12 @@ impl BenchCmd {\n \n         let start = Instant::now();\n         eprint!(\"loading: \");\n-        let (mut host, vfs) = load_cargo(&self.path, self.load_output_dirs, self.with_proc_macro)?;\n+        let (mut host, vfs) = load_cargo(\n+            &self.path,\n+            &Default::default(),\n+            self.load_output_dirs,\n+            self.with_proc_macro,\n+        )?;\n         eprintln!(\"{:?}\\n\", start.elapsed());\n \n         let file_id = {"}, {"sha": "f0852d12545b696309db0cb07306e263032b87a3", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "patch": "@@ -57,7 +57,12 @@ impl AnalysisStatsCmd {\n         };\n \n         let mut db_load_sw = self.stop_watch();\n-        let (host, vfs) = load_cargo(&self.path, self.load_output_dirs, self.with_proc_macro)?;\n+        let (host, vfs) = load_cargo(\n+            &self.path,\n+            &Default::default(),\n+            self.load_output_dirs,\n+            self.with_proc_macro,\n+        )?;\n         let db = host.raw_database();\n         eprintln!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n "}, {"sha": "6646e417cc03372f467c02e3b79db57c18ba878b", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "patch": "@@ -26,7 +26,7 @@ fn all_modules(db: &dyn HirDatabase) -> Vec<Module> {\n }\n \n pub fn diagnostics(path: &Path, load_output_dirs: bool, with_proc_macro: bool) -> Result<()> {\n-    let (host, _vfs) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n+    let (host, _vfs) = load_cargo(path, &Default::default(), load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     let analysis = host.analysis();\n "}, {"sha": "4669c9bc34afca51419300fe48caa88fe05e0475", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "patch": "@@ -15,12 +15,13 @@ use crate::reload::{ProjectFolders, SourceRootConfig};\n \n pub fn load_cargo(\n     root: &Path,\n+    config: &CargoConfig,\n     load_out_dirs_from_check: bool,\n     with_proc_macro: bool,\n ) -> Result<(AnalysisHost, vfs::Vfs)> {\n     let root = AbsPathBuf::assert(std::env::current_dir()?.join(root));\n     let root = ProjectManifest::discover_single(&root)?;\n-    let ws = ProjectWorkspace::load(root, &CargoConfig::default(), &|_| {})?;\n+    let ws = ProjectWorkspace::load(root, config, &|_| {})?;\n \n     let (sender, receiver) = unbounded();\n     let mut vfs = vfs::Vfs::default();\n@@ -116,7 +117,7 @@ mod tests {\n     #[test]\n     fn test_loading_rust_analyzer() {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n-        let (host, _vfs) = load_cargo(path, false, false).unwrap();\n+        let (host, _vfs) = load_cargo(path, &Default::default(), false, false).unwrap();\n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);"}, {"sha": "8ab43e0f76b1ddc6c0ce4feb6c07f3adbb0be922", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9c13c7105f0d5287ccb76439214ec536cd1ea4/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "patch": "@@ -5,7 +5,7 @@ use ssr::{MatchFinder, SsrPattern, SsrRule};\n \n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n-    let (host, vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n+    let (host, vfs) = load_cargo(&std::env::current_dir()?, &Default::default(), true, true)?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for rule in rules {\n@@ -28,7 +28,7 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<String>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n     use ide_db::symbol_index::SymbolsDatabase;\n-    let (host, _vfs) = load_cargo(&std::env::current_dir()?, true, true)?;\n+    let (host, _vfs) = load_cargo(&std::env::current_dir()?, &Default::default(), true, true)?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for pattern in patterns {"}]}