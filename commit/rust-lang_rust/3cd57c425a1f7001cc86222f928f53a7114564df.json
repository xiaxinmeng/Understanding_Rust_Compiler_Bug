{"sha": "3cd57c425a1f7001cc86222f928f53a7114564df", "node_id": "C_kwDOAAsO6NoAKDNjZDU3YzQyNWExZjcwMDFjYzg2MjIyZjkyOGY1M2E3MTE0NTY0ZGY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-30T22:03:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-30T22:18:23Z"}, "message": "Fix annotations not resolving when lens location is set to whole item", "tree": {"sha": "cb59b296d1d7eebd0219f7965cab7bb72c799967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb59b296d1d7eebd0219f7965cab7bb72c799967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd57c425a1f7001cc86222f928f53a7114564df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd57c425a1f7001cc86222f928f53a7114564df", "html_url": "https://github.com/rust-lang/rust/commit/3cd57c425a1f7001cc86222f928f53a7114564df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd57c425a1f7001cc86222f928f53a7114564df/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16b0413dc088f5daa5fd1800d016a31bd2cfecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16b0413dc088f5daa5fd1800d016a31bd2cfecf", "html_url": "https://github.com/rust-lang/rust/commit/b16b0413dc088f5daa5fd1800d016a31bd2cfecf"}], "stats": {"total": 329, "additions": 199, "deletions": 130}, "files": [{"sha": "f994c284c713a7153cd18f26784f3934099cff09", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 165, "deletions": 99, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=3cd57c425a1f7001cc86222f928f53a7114564df", "patch": "@@ -8,13 +8,15 @@ use ide_db::{\n use syntax::{ast::HasName, AstNode, TextRange};\n \n use crate::{\n-    fn_references::find_all_methods,\n+    annotations::fn_references::find_all_methods,\n     goto_implementation::goto_implementation,\n     references::find_all_refs,\n     runnables::{runnables, Runnable},\n     NavigationTarget, RunnableKind,\n };\n \n+mod fn_references;\n+\n // Feature: Annotations\n //\n // Provides user with annotations above items for looking up references or impl blocks\n@@ -30,8 +32,8 @@ pub struct Annotation {\n #[derive(Debug)]\n pub enum AnnotationKind {\n     Runnable(Runnable),\n-    HasImpls { file_id: FileId, data: Option<Vec<NavigationTarget>> },\n-    HasReferences { file_id: FileId, data: Option<Vec<FileRange>> },\n+    HasImpls { pos: FilePosition, data: Option<Vec<NavigationTarget>> },\n+    HasReferences { pos: FilePosition, data: Option<Vec<FileRange>> },\n }\n \n pub struct AnnotationConfig {\n@@ -68,13 +70,23 @@ pub(crate) fn annotations(\n         }\n     }\n \n+    let mk_ranges = |(range, focus): (_, Option<_>)| {\n+        let cmd_target: TextRange = focus.unwrap_or(range);\n+        let annotation_range = match config.location {\n+            AnnotationLocation::AboveName => cmd_target,\n+            AnnotationLocation::AboveWholeItem => range,\n+        };\n+        let target_pos = FilePosition { file_id, offset: cmd_target.start() };\n+        (annotation_range, target_pos)\n+    };\n+\n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| {\n         let range = match def {\n             Definition::Const(konst) if config.annotate_references => {\n-                konst.source(db).and_then(|node| name_range(db, config, node, file_id))\n+                konst.source(db).and_then(|node| name_range(db, node, file_id))\n             }\n             Definition::Trait(trait_) if config.annotate_references || config.annotate_impls => {\n-                trait_.source(db).and_then(|node| name_range(db, config, node, file_id))\n+                trait_.source(db).and_then(|node| name_range(db, node, file_id))\n             }\n             Definition::Adt(adt) => match adt {\n                 hir::Adt::Enum(enum_) => {\n@@ -83,27 +95,29 @@ pub(crate) fn annotations(\n                             .variants(db)\n                             .into_iter()\n                             .map(|variant| {\n-                                variant\n-                                    .source(db)\n-                                    .and_then(|node| name_range(db, config, node, file_id))\n+                                variant.source(db).and_then(|node| name_range(db, node, file_id))\n                             })\n                             .flatten()\n                             .for_each(|range| {\n+                                let (annotation_range, target_position) = mk_ranges(range);\n                                 annotations.push(Annotation {\n-                                    range,\n-                                    kind: AnnotationKind::HasReferences { file_id, data: None },\n+                                    range: annotation_range,\n+                                    kind: AnnotationKind::HasReferences {\n+                                        pos: target_position,\n+                                        data: None,\n+                                    },\n                                 })\n                             })\n                     }\n                     if config.annotate_references || config.annotate_impls {\n-                        enum_.source(db).and_then(|node| name_range(db, config, node, file_id))\n+                        enum_.source(db).and_then(|node| name_range(db, node, file_id))\n                     } else {\n                         None\n                     }\n                 }\n                 _ => {\n                     if config.annotate_references || config.annotate_impls {\n-                        adt.source(db).and_then(|node| name_range(db, config, node, file_id))\n+                        adt.source(db).and_then(|node| name_range(db, node, file_id))\n                     } else {\n                         None\n                     }\n@@ -116,65 +130,58 @@ pub(crate) fn annotations(\n             Some(range) => range,\n             None => return,\n         };\n-\n+        let (annotation_range, target_pos) = mk_ranges(range);\n         if config.annotate_impls && !matches!(def, Definition::Const(_)) {\n-            annotations\n-                .push(Annotation { range, kind: AnnotationKind::HasImpls { file_id, data: None } });\n+            annotations.push(Annotation {\n+                range: annotation_range,\n+                kind: AnnotationKind::HasImpls { pos: target_pos, data: None },\n+            });\n         }\n \n         if config.annotate_references {\n             annotations.push(Annotation {\n-                range,\n-                kind: AnnotationKind::HasReferences { file_id, data: None },\n+                range: annotation_range,\n+                kind: AnnotationKind::HasReferences { pos: target_pos, data: None },\n             });\n         }\n \n         fn name_range<T: HasName>(\n             db: &RootDatabase,\n-            config: &AnnotationConfig,\n             node: InFile<T>,\n             source_file_id: FileId,\n-        ) -> Option<TextRange> {\n+        ) -> Option<(TextRange, Option<TextRange>)> {\n             if let Some(InFile { file_id, value }) = node.original_ast_node(db) {\n                 if file_id == source_file_id.into() {\n-                    return match config.location {\n-                        AnnotationLocation::AboveName => {\n-                            value.name().map(|name| name.syntax().text_range())\n-                        }\n-                        AnnotationLocation::AboveWholeItem => Some(value.syntax().text_range()),\n-                    };\n+                    return Some((\n+                        value.syntax().text_range(),\n+                        value.name().map(|name| name.syntax().text_range()),\n+                    ));\n                 }\n             }\n             None\n         }\n     });\n \n     if config.annotate_method_references {\n-        annotations.extend(find_all_methods(db, file_id).into_iter().map(\n-            |FileRange { file_id, range }| Annotation {\n-                range,\n-                kind: AnnotationKind::HasReferences { file_id, data: None },\n-            },\n-        ));\n+        annotations.extend(find_all_methods(db, file_id).into_iter().map(|range| {\n+            let (annotation_range, target_range) = mk_ranges(range);\n+            Annotation {\n+                range: annotation_range,\n+                kind: AnnotationKind::HasReferences { pos: target_range, data: None },\n+            }\n+        }));\n     }\n \n     annotations\n }\n \n pub(crate) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation) -> Annotation {\n     match annotation.kind {\n-        AnnotationKind::HasImpls { file_id, ref mut data } => {\n-            *data =\n-                goto_implementation(db, FilePosition { file_id, offset: annotation.range.start() })\n-                    .map(|range| range.info);\n+        AnnotationKind::HasImpls { pos, ref mut data } => {\n+            *data = goto_implementation(db, pos).map(|range| range.info);\n         }\n-        AnnotationKind::HasReferences { file_id, ref mut data } => {\n-            *data = find_all_refs(\n-                &Semantics::new(db),\n-                FilePosition { file_id, offset: annotation.range.start() },\n-                None,\n-            )\n-            .map(|result| {\n+        AnnotationKind::HasReferences { pos, ref mut data } => {\n+            *data = find_all_refs(&Semantics::new(db), pos, None).map(|result| {\n                 result\n                     .into_iter()\n                     .flat_map(|res| res.references)\n@@ -268,9 +275,12 @@ fn main() {\n                     Annotation {\n                         range: 6..10,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 6,\n+                            },\n                             data: Some(\n                                 [\n                                     FileRange {\n@@ -286,9 +296,12 @@ fn main() {\n                     Annotation {\n                         range: 30..36,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 30,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -297,9 +310,12 @@ fn main() {\n                     Annotation {\n                         range: 53..57,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 53,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -344,9 +360,12 @@ fn main() {\n                     Annotation {\n                         range: 7..11,\n                         kind: HasImpls {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -355,9 +374,12 @@ fn main() {\n                     Annotation {\n                         range: 7..11,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n                             data: Some(\n                                 [\n                                     FileRange {\n@@ -373,9 +395,12 @@ fn main() {\n                     Annotation {\n                         range: 17..21,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 17,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -424,9 +449,12 @@ fn main() {\n                     Annotation {\n                         range: 7..11,\n                         kind: HasImpls {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n                             data: Some(\n                                 [\n                                     NavigationTarget {\n@@ -445,9 +473,12 @@ fn main() {\n                     Annotation {\n                         range: 7..11,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n                             data: Some(\n                                 [\n                                     FileRange {\n@@ -469,9 +500,12 @@ fn main() {\n                     Annotation {\n                         range: 20..31,\n                         kind: HasImpls {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 20,\n+                            },\n                             data: Some(\n                                 [\n                                     NavigationTarget {\n@@ -490,9 +524,12 @@ fn main() {\n                     Annotation {\n                         range: 20..31,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 20,\n+                            },\n                             data: Some(\n                                 [\n                                     FileRange {\n@@ -508,9 +545,12 @@ fn main() {\n                     Annotation {\n                         range: 69..73,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 69,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -551,9 +591,12 @@ fn main() {}\n                     Annotation {\n                         range: 3..7,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 3,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -602,9 +645,12 @@ fn main() {\n                     Annotation {\n                         range: 7..11,\n                         kind: HasImpls {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n                             data: Some(\n                                 [\n                                     NavigationTarget {\n@@ -623,9 +669,12 @@ fn main() {\n                     Annotation {\n                         range: 7..11,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n                             data: Some(\n                                 [\n                                     FileRange {\n@@ -647,9 +696,12 @@ fn main() {\n                     Annotation {\n                         range: 33..44,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 33,\n+                            },\n                             data: Some(\n                                 [\n                                     FileRange {\n@@ -665,9 +717,12 @@ fn main() {\n                     Annotation {\n                         range: 61..65,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 61,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -761,9 +816,12 @@ mod tests {\n                     Annotation {\n                         range: 3..7,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 3,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -821,9 +879,12 @@ struct Foo;\n                     Annotation {\n                         range: 0..71,\n                         kind: HasImpls {\n-                            file_id: FileId(\n-                                0,\n-                            ),\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 67,\n+                            },\n                             data: Some(\n                                 [],\n                             ),\n@@ -832,10 +893,15 @@ struct Foo;\n                     Annotation {\n                         range: 0..71,\n                         kind: HasReferences {\n-                            file_id: FileId(\n-                                0,\n+                            pos: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 67,\n+                            },\n+                            data: Some(\n+                                [],\n                             ),\n-                            data: None,\n                         },\n                     },\n                 ]"}, {"sha": "0cadf125fecaec37f3f9e44d9c3c66f614e4e2ba", "filename": "crates/ide/src/annotations/fn_references.rs", "status": "renamed", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Fide%2Fsrc%2Fannotations%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Fide%2Fsrc%2Fannotations%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations%2Ffn_references.rs?ref=3cd57c425a1f7001cc86222f928f53a7114564df", "patch": "@@ -4,30 +4,38 @@\n use hir::Semantics;\n use ide_assists::utils::test_related_attribute;\n use ide_db::RootDatabase;\n-use syntax::{ast, ast::HasName, AstNode, SyntaxNode};\n+use syntax::{ast, ast::HasName, AstNode, SyntaxNode, TextRange};\n \n-use crate::{FileId, FileRange};\n+use crate::FileId;\n \n-pub(crate) fn find_all_methods(db: &RootDatabase, file_id: FileId) -> Vec<FileRange> {\n+pub(super) fn find_all_methods(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+) -> Vec<(TextRange, Option<TextRange>)> {\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(file_id);\n-    source_file.syntax().descendants().filter_map(|it| method_range(it, file_id)).collect()\n+    source_file.syntax().descendants().filter_map(|it| method_range(it)).collect()\n }\n \n-fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n+fn method_range(item: SyntaxNode) -> Option<(TextRange, Option<TextRange>)> {\n     ast::Fn::cast(item).and_then(|fn_def| {\n         if test_related_attribute(&fn_def).is_some() {\n             None\n         } else {\n-            fn_def.name().map(|name| FileRange { file_id, range: name.syntax().text_range() })\n+            Some((\n+                fn_def.syntax().text_range(),\n+                fn_def.name().map(|name| name.syntax().text_range()),\n+            ))\n         }\n     })\n }\n \n #[cfg(test)]\n mod tests {\n+    use syntax::TextRange;\n+\n     use crate::fixture;\n-    use crate::{FileRange, TextSize};\n+    use crate::TextSize;\n     use std::ops::RangeInclusive;\n \n     #[test]\n@@ -42,7 +50,7 @@ mod tests {\n         \"#,\n         );\n \n-        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        let refs = super::find_all_methods(&analysis.db, pos.file_id);\n         check_result(&refs, &[3..=13, 27..=33, 47..=57]);\n     }\n \n@@ -57,7 +65,7 @@ mod tests {\n         \"#,\n         );\n \n-        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        let refs = super::find_all_methods(&analysis.db, pos.file_id);\n         check_result(&refs, &[19..=22, 35..=38]);\n     }\n \n@@ -78,17 +86,18 @@ mod tests {\n         \"#,\n         );\n \n-        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        let refs = super::find_all_methods(&analysis.db, pos.file_id);\n         check_result(&refs, &[28..=34]);\n     }\n \n-    fn check_result(refs: &[FileRange], expected: &[RangeInclusive<u32>]) {\n+    fn check_result(refs: &[(TextRange, Option<TextRange>)], expected: &[RangeInclusive<u32>]) {\n         assert_eq!(refs.len(), expected.len());\n \n-        for (i, item) in refs.iter().enumerate() {\n+        for (i, &(full, focus)) in refs.iter().enumerate() {\n             let range = &expected[i];\n-            assert_eq!(TextSize::from(*range.start()), item.range.start());\n-            assert_eq!(TextSize::from(*range.end()), item.range.end());\n+            let item = focus.unwrap_or(full);\n+            assert_eq!(TextSize::from(*range.start()), item.start());\n+            assert_eq!(TextSize::from(*range.end()), item.end());\n         }\n     }\n }", "previous_filename": "crates/ide/src/fn_references.rs"}, {"sha": "77fe0dbf5565866dd035718bc009b668cfc0365f", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=3cd57c425a1f7001cc86222f928f53a7114564df", "patch": "@@ -31,7 +31,6 @@ mod highlight_related;\n mod expand_macro;\n mod extend_selection;\n mod file_structure;\n-mod fn_references;\n mod folding_ranges;\n mod goto_declaration;\n mod goto_definition;\n@@ -429,11 +428,6 @@ impl Analysis {\n         self.with_db(|db| references::find_all_refs(&Semantics::new(db), position, search_scope))\n     }\n \n-    /// Finds all methods and free functions for the file. Does not return tests!\n-    pub fn find_all_methods(&self, file_id: FileId) -> Cancellable<Vec<FileRange>> {\n-        self.with_db(|db| fn_references::find_all_methods(db, file_id))\n-    }\n-\n     /// Returns a short text describing element at position.\n     pub fn hover(\n         &self,"}, {"sha": "f2db9a27334979da9b2185f0e651c6f071081969", "filename": "crates/rust-analyzer/src/from_proto.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Ffrom_proto.rs?ref=3cd57c425a1f7001cc86222f928f53a7114564df", "patch": "@@ -95,22 +95,22 @@ pub(crate) fn annotation(\n \n     match resolve {\n         lsp_ext::CodeLensResolveData::Impls(params) => {\n-            let file_id =\n-                snap.url_to_file_id(&params.text_document_position_params.text_document.uri)?;\n+            let pos @ FilePosition { file_id, .. } =\n+                file_position(snap, params.text_document_position_params)?;\n             let line_index = snap.file_line_index(file_id)?;\n \n             Ok(Annotation {\n                 range: text_range(&line_index, code_lens.range)?,\n-                kind: AnnotationKind::HasImpls { file_id, data: None },\n+                kind: AnnotationKind::HasImpls { pos, data: None },\n             })\n         }\n         lsp_ext::CodeLensResolveData::References(params) => {\n-            let file_id = snap.url_to_file_id(&params.text_document.uri)?;\n+            let pos @ FilePosition { file_id, .. } = file_position(snap, params)?;\n             let line_index = snap.file_line_index(file_id)?;\n \n             Ok(Annotation {\n                 range: text_range(&line_index, code_lens.range)?,\n-                kind: AnnotationKind::HasReferences { file_id, data: None },\n+                kind: AnnotationKind::HasReferences { pos, data: None },\n             })\n         }\n     }"}, {"sha": "5936454a7c546e487122b0f06dc822a36890755b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd57c425a1f7001cc86222f928f53a7114564df/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3cd57c425a1f7001cc86222f928f53a7114564df", "patch": "@@ -1177,13 +1177,13 @@ pub(crate) fn code_lens(\n                 })\n             }\n         }\n-        AnnotationKind::HasImpls { file_id, data } => {\n+        AnnotationKind::HasImpls { pos: file_range, data } => {\n             if !client_commands_config.show_reference {\n                 return Ok(());\n             }\n-            let line_index = snap.file_line_index(file_id)?;\n+            let line_index = snap.file_line_index(file_range.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n-            let url = url(snap, file_id);\n+            let url = url(snap, file_range.file_id);\n \n             let id = lsp_types::TextDocumentIdentifier { uri: url.clone() };\n \n@@ -1221,13 +1221,13 @@ pub(crate) fn code_lens(\n                 data: Some(to_value(lsp_ext::CodeLensResolveData::Impls(goto_params)).unwrap()),\n             })\n         }\n-        AnnotationKind::HasReferences { file_id, data } => {\n+        AnnotationKind::HasReferences { pos: file_range, data } => {\n             if !client_commands_config.show_reference {\n                 return Ok(());\n             }\n-            let line_index = snap.file_line_index(file_id)?;\n+            let line_index = snap.file_line_index(file_range.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n-            let url = url(snap, file_id);\n+            let url = url(snap, file_range.file_id);\n \n             let id = lsp_types::TextDocumentIdentifier { uri: url.clone() };\n "}]}