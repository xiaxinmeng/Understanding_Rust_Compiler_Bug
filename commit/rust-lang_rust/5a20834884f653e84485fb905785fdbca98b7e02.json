{"sha": "5a20834884f653e84485fb905785fdbca98b7e02", "node_id": "C_kwDOAAsO6NoAKDVhMjA4MzQ4ODRmNjUzZTg0NDg1ZmI5MDU3ODVmZGJjYTk4YjdlMDI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-22T20:19:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-13T12:17:09Z"}, "message": "Add feature gate.", "tree": {"sha": "8c4896f7859f481058b7b3708bae43a4a69d71fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c4896f7859f481058b7b3708bae43a4a69d71fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a20834884f653e84485fb905785fdbca98b7e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a20834884f653e84485fb905785fdbca98b7e02", "html_url": "https://github.com/rust-lang/rust/commit/5a20834884f653e84485fb905785fdbca98b7e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a20834884f653e84485fb905785fdbca98b7e02/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1b38d17f223378386f768204e4c5ad106b7c50", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1b38d17f223378386f768204e4c5ad106b7c50", "html_url": "https://github.com/rust-lang/rust/commit/3b1b38d17f223378386f768204e4c5ad106b7c50"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "d210b9493d1e2f27016704a362a4ebce940f488f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -148,6 +148,8 @@ declare_features! (\n     /// below (it has to be checked before expansion possibly makes\n     /// macros disappear).\n     (active, allow_internal_unstable, \"1.0.0\", None, None),\n+    /// Allows using anonymous lifetimes in argument-position impl-trait.\n+    (active, anonymous_lifetime_in_impl_trait, \"1.63.0\", None, None),\n     /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n     /// Outputs useful `assert!` messages"}, {"sha": "796885290820419508aa0ed292743b930103a9cd", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -1677,14 +1677,29 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     break None;\n                 }\n \n-                Scope::Binder { ref lifetimes, scope_type, s, .. } => {\n+                Scope::Binder { ref lifetimes, scope_type, s, where_bound_origin, .. } => {\n                     if let Some(&def) = lifetimes.get(&region_def_id) {\n                         break Some(def.shifted(late_depth));\n                     }\n                     match scope_type {\n                         BinderScopeType::Normal => late_depth += 1,\n                         BinderScopeType::Concatenating => {}\n                     }\n+                    // Fresh lifetimes in APIT used to be allowed in async fns and forbidden in\n+                    // regular fns.\n+                    if let Some(hir::PredicateOrigin::ImplTrait) = where_bound_origin\n+                        && let hir::LifetimeName::Param(_, hir::ParamName::Fresh) = lifetime_ref.name\n+                        && let hir::IsAsync::NotAsync = self.tcx.asyncness(lifetime_ref.hir_id.owner)\n+                        && !self.tcx.features().anonymous_lifetime_in_impl_trait\n+                    {\n+                        rustc_session::parse::feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            sym::anonymous_lifetime_in_impl_trait,\n+                            lifetime_ref.span,\n+                            \"anonymous lifetimes in `impl Trait` are unstable\",\n+                        ).emit();\n+                        return;\n+                    }\n                     scope = s;\n                 }\n "}, {"sha": "10a24a4c53441ec39ddf89c149e0e20b1ba4cf4d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -341,6 +341,7 @@ symbols! {\n         always,\n         and,\n         and_then,\n+        anonymous_lifetime_in_impl_trait,\n         any,\n         append_const_msg,\n         arbitrary_enum_discriminant,"}, {"sha": "e2f1710fa281c0b358028b05745bcd64f5d7df9c", "filename": "src/test/ui/generic-associated-types/issue-95305.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-95305.rs?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -3,7 +3,7 @@\n // at some point in the future.\n \n #![feature(generic_associated_types)]\n-\n+#![feature(anonymous_lifetime_in_impl_trait)]\n trait Foo {\n     type Item<'a>;\n }"}, {"sha": "fe291e021bc54ee7ffa47794297f5be089a4baae", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.rs?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+// gate-test-anonymous_lifetime_in_impl_trait\n+// Verify the behaviour of `feature(anonymous_lifetime_in_impl_trait)`.\n+\n+fn f(_: impl Iterator<Item = &'_ ()>) {}\n+//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+\n+fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR anonymous lifetimes in `impl Trait` are unstable\n+//~| ERROR missing lifetime specifier\n+\n+// Anonymous lifetimes in async fn are already allowed.\n+// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+\n+// Anonymous lifetimes in async fn are already allowed.\n+// But that lifetime does not participate in resolution.\n+async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR missing lifetime specifier\n+\n+fn main() {}"}, {"sha": "9adc9679eee479d6777ca20e1f02383ed996fef5", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime-gated.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime-gated.stderr?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -0,0 +1,44 @@\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:5:31\n+   |\n+LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n+   |                               ^^\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:50\n+   |\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                  ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                  ~~~~~~~\n+\n+error[E0658]: anonymous lifetimes in `impl Trait` are unstable\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:8:31\n+   |\n+LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                               ^^\n+   |\n+   = help: add `#![feature(anonymous_lifetime_in_impl_trait)]` to the crate attributes to enable\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime-gated.rs:18:56\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                        ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                        ~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0106, E0658.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "dcc716f56b70510ac6b39960b47a2de4dcfb0e16", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -1,8 +1,19 @@\n+// edition:2021\n+\n+#![feature(anonymous_lifetime_in_impl_trait)]\n+\n // This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n fn f(_: impl Iterator<Item = &'_ ()>) {}\n \n // But that lifetime does not participate in resolution.\n fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n //~^ ERROR missing lifetime specifier\n \n+// This is understood as `fn foo<'_1>(_: impl Iterator<Item = &'_1 ()>) {}`.\n+async fn h(_: impl Iterator<Item = &'_ ()>) {}\n+\n+// But that lifetime does not participate in resolution.\n+async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+//~^ ERROR missing lifetime specifier\n+\n fn main() {}"}, {"sha": "d3c64cb466d74089f643c86791db05cbe4741dbf", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a20834884f653e84485fb905785fdbca98b7e02/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr?ref=5a20834884f653e84485fb905785fdbca98b7e02", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/impl-trait-missing-lifetime.rs:5:50\n+  --> $DIR/impl-trait-missing-lifetime.rs:9:50\n    |\n LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n    |                                                  ^^ expected named lifetime parameter\n@@ -10,6 +10,18 @@ help: consider using the `'static` lifetime\n LL | fn g(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n    |                                                  ~~~~~~~\n \n-error: aborting due to previous error\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime.rs:16:56\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'_ ()> { x.next() }\n+   |                                                        ^^ expected named lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n+help: consider using the `'static` lifetime\n+   |\n+LL | async fn i(x: impl Iterator<Item = &'_ ()>) -> Option<&'static ()> { x.next() }\n+   |                                                        ~~~~~~~\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0106`."}]}