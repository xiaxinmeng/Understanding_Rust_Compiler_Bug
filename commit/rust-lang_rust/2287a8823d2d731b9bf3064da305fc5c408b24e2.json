{"sha": "2287a8823d2d731b9bf3064da305fc5c408b24e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyODdhODgyM2QyZDczMWI5YmYzMDY0ZGEzMDVmYzVjNDA4YjI0ZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-22T15:07:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-22T15:07:23Z"}, "message": "Auto merge of #83376 - Dylan-DPC:rollup-s2fsjwj, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #82374 (Add license metadata for std dependencies)\n - #82683 (Document panicking cases for integer division and remainder)\n - #83272 (Clarify non-exact length in the Iterator::take documentation)\n - #83338 (Fix test for #82270)\n - #83351 (post-drop-elab check-const: explain why we still check qualifs)\n - #83367 (Improve error message for unassigned query provider)\n - #83372 (SplitInclusive is public API)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "48bb80accf5002e0e7755fa5c43137fbd0123d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48bb80accf5002e0e7755fa5c43137fbd0123d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2287a8823d2d731b9bf3064da305fc5c408b24e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2287a8823d2d731b9bf3064da305fc5c408b24e2", "html_url": "https://github.com/rust-lang/rust/commit/2287a8823d2d731b9bf3064da305fc5c408b24e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2287a8823d2d731b9bf3064da305fc5c408b24e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04c3aa8656f6588c87bafafb34d51239dab98bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d04c3aa8656f6588c87bafafb34d51239dab98bb", "html_url": "https://github.com/rust-lang/rust/commit/d04c3aa8656f6588c87bafafb34d51239dab98bb"}, {"sha": "ce06787548ceed47adb54eea559f820c21f71cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce06787548ceed47adb54eea559f820c21f71cf4", "html_url": "https://github.com/rust-lang/rust/commit/ce06787548ceed47adb54eea559f820c21f71cf4"}], "stats": {"total": 89, "additions": 69, "deletions": 20}, "files": [{"sha": "c170858ba85a1846aaa1f5dc002f587909372190", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -217,8 +217,11 @@ macro_rules! define_callbacks {\n             fn default() -> Self {\n                 Providers {\n                     $($name: |_, key| bug!(\n-                        \"`tcx.{}({:?})` unsupported by its crate\",\n-                         stringify!($name), key\n+                        \"`tcx.{}({:?})` unsupported by its crate; \\\n+                         perhaps the `{}` query was never assigned a provider function\",\n+                        stringify!($name),\n+                        key,\n+                        stringify!($name),\n                     ),)*\n                 }\n             }"}, {"sha": "057092b8ef574884b6970c370e4f5c3325fa1fc1", "filename": "compiler/rustc_mir/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -79,14 +79,20 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n             mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n                 if !NeedsDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n-                    return;\n+                    bug!(\n+                        \"Drop elaboration left behind a Drop for a type that does not need dropping\"\n+                    );\n                 }\n \n                 if dropped_place.is_indirect() {\n                     self.check_live_drop(terminator.source_info.span);\n                     return;\n                 }\n \n+                // Drop elaboration is not precise enough to accept code like\n+                // `src/test/ui/consts/control-flow/drop-pass.rs`; e.g., when an `Option<Vec<T>>` is\n+                // initialized with `None` and never changed, it still emits drop glue.\n+                // Hence we additionally check the qualifs here to allow more code to pass.\n                 if self.qualifs.needs_drop(self.ccx, dropped_place.local, location) {\n                     // Use the span where the dropped local was declared for the error.\n                     let span = self.body.local_decls[dropped_place.local].source_info.span;"}, {"sha": "4f97c95bcb9ea1ccecb0c4752f168a72b4ad8dde", "filename": "library/alloc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Falloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Falloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2FCargo.toml?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -2,6 +2,9 @@\n authors = [\"The Rust Project Developers\"]\n name = \"alloc\"\n version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n+repository = \"https://github.com/rust-lang/rust.git\"\n+description = \"The Rust core allocation and collections library\"\n autotests = false\n autobenches = false\n edition = \"2018\""}, {"sha": "4a7dbb91822e2baee545034e00981f965bac7046", "filename": "library/core/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2FCargo.toml?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -2,6 +2,9 @@\n authors = [\"The Rust Project Developers\"]\n name = \"core\"\n version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n+repository = \"https://github.com/rust-lang/rust.git\"\n+description = \"The Rust Core Library\"\n autotests = false\n autobenches = false\n edition = \"2018\""}, {"sha": "46e1a3a4aa2feb9f319f34b2cf4c84c311f7d297", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1228,7 +1228,11 @@ pub trait Iterator {\n \n     /// Creates an iterator that skips the first `n` elements.\n     ///\n-    /// After they have been consumed, the rest of the elements are yielded.\n+    /// `skip(n)` skips elements until `n` elements are skipped or the end of the\n+    /// iterator is reached (whichever happens first). After that, all the remaining\n+    /// elements are yielded. In particular, if the original iterator is too short,\n+    /// then the returned iterator is empty.\n+    ///\n     /// Rather than overriding this method directly, instead override the `nth` method.\n     ///\n     /// # Examples\n@@ -1252,7 +1256,14 @@ pub trait Iterator {\n         Skip::new(self, n)\n     }\n \n-    /// Creates an iterator that yields its first `n` elements.\n+    /// Creates an iterator that yields the first `n` elements, or fewer\n+    /// if the underlying iterator ends sooner.\n+    ///\n+    /// `take(n)` yields elements until `n` elements are yielded or the end of\n+    /// the iterator is reached (whichever happens first).\n+    /// The returned iterator is a prefix of length `n` if the original iterator\n+    /// contains at least `n` elements, otherwise it contains all of the\n+    /// (fewer than `n`) elements of the original iterator.\n     ///\n     /// # Examples\n     ///"}, {"sha": "a0577b287ce24fa886e715298111b082e128f880", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -456,9 +456,13 @@ pub trait Div<Rhs = Self> {\n }\n \n macro_rules! div_impl_integer {\n-    ($($t:ty)*) => ($(\n+    ($(($($t:ty)*) => $panic:expr),*) => ($($(\n         /// This operation rounds towards zero, truncating any\n         /// fractional part of the exact result.\n+        ///\n+        /// # Panics\n+        ///\n+        #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Div for $t {\n             type Output = $t;\n@@ -468,10 +472,13 @@ macro_rules! div_impl_integer {\n         }\n \n         forward_ref_binop! { impl Div, div for $t, $t }\n-    )*)\n+    )*)*)\n }\n \n-div_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n+div_impl_integer! {\n+    (usize u8 u16 u32 u64 u128) => \"This operation will panic if `other == 0`.\",\n+    (isize i8 i16 i32 i64 i128) => \"This operation will panic if `other == 0` or the division results in overflow.\"\n+}\n \n macro_rules! div_impl_float {\n     ($($t:ty)*) => ($(\n@@ -549,9 +556,13 @@ pub trait Rem<Rhs = Self> {\n }\n \n macro_rules! rem_impl_integer {\n-    ($($t:ty)*) => ($(\n+    ($(($($t:ty)*) => $panic:expr),*) => ($($(\n         /// This operation satisfies `n % d == n - (n / d) * d`. The\n         /// result has the same sign as the left operand.\n+        ///\n+        /// # Panics\n+        ///\n+        #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Rem for $t {\n             type Output = $t;\n@@ -561,10 +572,13 @@ macro_rules! rem_impl_integer {\n         }\n \n         forward_ref_binop! { impl Rem, rem for $t, $t }\n-    )*)\n+    )*)*)\n }\n \n-rem_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n+rem_impl_integer! {\n+    (usize u8 u16 u32 u64 u128) => \"This operation will panic if `other == 0`.\",\n+    (isize i8 i16 i32 i64 i128) => \"This operation will panic if `other == 0` or if `self / other` results in overflow.\"\n+}\n \n macro_rules! rem_impl_float {\n     ($($t:ty)*) => ($("}, {"sha": "03ed301eacf8c16a562337edbb381c3567911490", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -66,7 +66,7 @@ pub use iter::{EscapeDebug, EscapeDefault, EscapeUnicode};\n pub use iter::SplitAsciiWhitespace;\n \n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n-use iter::SplitInclusive;\n+pub use iter::SplitInclusive;\n \n #[unstable(feature = \"str_internals\", issue = \"none\")]\n pub use validations::next_code_point;"}, {"sha": "caa89aa30d0bb21cb610e8ce2eeba012f83b513a", "filename": "library/panic_abort/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2FCargo.toml?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -2,6 +2,9 @@\n authors = [\"The Rust Project Developers\"]\n name = \"panic_abort\"\n version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n+repository = \"https://github.com/rust-lang/rust.git\"\n+description = \"Implementation of Rust panics via process aborts\"\n edition = \"2018\"\n \n [lib]"}, {"sha": "533f059a85e45e8e0907dc7d342e2d1bcbe8b423", "filename": "library/panic_unwind/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fpanic_unwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Fpanic_unwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2FCargo.toml?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -2,6 +2,9 @@\n authors = [\"The Rust Project Developers\"]\n name = \"panic_unwind\"\n version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n+repository = \"https://github.com/rust-lang/rust.git\"\n+description = \"Implementation of Rust panics via stack unwinding\"\n edition = \"2018\"\n \n [lib]"}, {"sha": "69128591e06726b9ce8b55ea6b8412796d92cf9e", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -2,6 +2,8 @@\n authors = [\"The Rust Project Developers\"]\n name = \"unwind\"\n version = \"0.0.0\"\n+license = \"MIT OR Apache-2.0\"\n+repository = \"https://github.com/rust-lang/rust.git\"\n edition = \"2018\"\n include = [\n   '/libunwind/*',"}, {"sha": "78b85dfde33e9ff1672fd086fd9a867001ddc862", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,11 +1,11 @@\n error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:22:15\n+  --> $DIR/inline-syntax.rs:23:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n \n error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:25:15\n+  --> $DIR/inline-syntax.rs:26:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive"}, {"sha": "9048282456eb26260445578a727039628a815f7c", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,3 +1,4 @@\n+// needs-llvm-components: arm\n // revisions: x86_64 arm\n //[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n //[arm] compile-flags: --target armv7-unknown-linux-gnueabihf"}, {"sha": "826657c98e154def41f9c4f9f79101b1b2d90450", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2287a8823d2d731b9bf3064da305fc5c408b24e2/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=2287a8823d2d731b9bf3064da305fc5c408b24e2", "patch": "@@ -1,17 +1,17 @@\n error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:18:15\n+  --> $DIR/inline-syntax.rs:19:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n \n error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:20:15\n+  --> $DIR/inline-syntax.rs:21:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n \n error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n-  --> $DIR/inline-syntax.rs:22:15\n+  --> $DIR/inline-syntax.rs:23:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |         asm!(\"\", \"nop\", options(att_syntax));\n    |              --       ^^^^^^^^^^^^^^^^^^^^^\n \n error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n-  --> $DIR/inline-syntax.rs:25:15\n+  --> $DIR/inline-syntax.rs:26:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,13 +33,13 @@ LL |         asm!(\"\", \"nop\", options(att_syntax));\n    |              --       ^^^^^^^^^^^^^^^^^^^^^\n \n error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:28:15\n+  --> $DIR/inline-syntax.rs:29:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n \n error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:33:14\n+  --> $DIR/inline-syntax.rs:34:14\n    |\n LL |               .intel_syntax noprefix\n    |  ______________^"}]}