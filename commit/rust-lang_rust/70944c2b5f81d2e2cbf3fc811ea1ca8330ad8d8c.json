{"sha": "70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTQ0YzJiNWY4MWQyZTJjYmYzZmM4MTFlYTFjYTgzMzBhZDhkOGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-16T23:52:47Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-17T00:14:16Z"}, "message": "No need to have tcx::opt_def_path() now that we store all DefPaths", "tree": {"sha": "7832c6f3dedcc38343a66f9fb7db6eac90b47b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7832c6f3dedcc38343a66f9fb7db6eac90b47b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "html_url": "https://github.com/rust-lang/rust/commit/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72f95aac1ba1891fcf13b568514520205e3c848b", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f95aac1ba1891fcf13b568514520205e3c848b", "html_url": "https://github.com/rust-lang/rust/commit/72f95aac1ba1891fcf13b568514520205e3c848b"}], "stats": {"total": 62, "additions": 13, "deletions": 49}, "files": [{"sha": "cbf162cc1366ef0401a061f1a7506c39ecea898c", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "patch": "@@ -120,9 +120,7 @@ impl fmt::Debug for DefId {\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n-                if let Some(def_path) = tcx.opt_def_path(*self) {\n-                    write!(f, \" => {}\", def_path.to_string(tcx))?;\n-                }\n+                write!(f, \" => {}\", tcx.def_path(*self).to_string(tcx))?;\n             }\n             Ok(())\n         })?;"}, {"sha": "9f9c6fd87aa856f590c83daa3d5c46a0198be2e9", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "patch": "@@ -341,7 +341,7 @@ pub trait CrateStore<'tcx> {\n                     path_data: &[DisambiguatedDefPathData])\n                     -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n-    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;\n+    fn def_path(&self, def: DefId) -> hir_map::DefPath;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -510,7 +510,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     }\n \n     fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }\n-    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> {\n+    fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")\n     }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }"}, {"sha": "f8dee95f338f8784223d1d2c88a20866fd079329", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "patch": "@@ -2241,40 +2241,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Convert a `DefId` into its fully expanded `DefPath` (every\n     /// `DefId` is really just an interned def-path).\n     ///\n-    /// Note that if `id` is not local to this crate -- or is\n-    /// inlined into this crate -- the result will be a non-local\n-    /// `DefPath`.\n-    ///\n-    /// This function is only safe to use when you are sure that the\n-    /// full def-path is accessible. Examples that are known to be\n-    /// safe are local def-ids or items; see `opt_def_path` for more\n-    /// details.\n+    /// Note that if `id` is not local to this crate, the result will\n+    //  be a non-local `DefPath`.\n     pub fn def_path(self, id: DefId) -> ast_map::DefPath {\n-        self.opt_def_path(id).unwrap_or_else(|| {\n-            bug!(\"could not load def-path for {:?}\", id)\n-        })\n-    }\n-\n-    /// Convert a `DefId` into its fully expanded `DefPath` (every\n-    /// `DefId` is really just an interned def-path).\n-    ///\n-    /// When going across crates, we do not save the full info for\n-    /// every cross-crate def-id, and hence we may not always be able\n-    /// to create a def-path. Therefore, this returns\n-    /// `Option<DefPath>` to cover that possibility. It will always\n-    /// return `Some` for local def-ids, however, as well as for\n-    /// items. The problems arise with \"minor\" def-ids like those\n-    /// associated with a pattern, `impl Trait`, or other internal\n-    /// detail to a fn.\n-    ///\n-    /// Note that if `id` is not local to this crate -- or is\n-    /// inlined into this crate -- the result will be a non-local\n-    /// `DefPath`.\n-    pub fn opt_def_path(self, id: DefId) -> Option<ast_map::DefPath> {\n         if id.is_local() {\n-            Some(self.map.def_path(id))\n+            self.map.def_path(id)\n         } else {\n-            self.sess.cstore.relative_def_path(id)\n+            self.sess.cstore.def_path(id)\n         }\n     }\n "}, {"sha": "8a29f9d627688661773e440aa094bc574a599f7f", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "patch": "@@ -358,7 +358,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).def_key(def.index)\n     }\n \n-    fn relative_def_path(&self, def: DefId) -> Option<DefPath> {\n+    fn def_path(&self, def: DefId) -> DefPath {\n         // See `Note` above in `def_key()` for why this read is\n         // commented out:\n         //"}, {"sha": "853a49dffc7b5ec71010c455a28194a022076d34", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=70944c2b5f81d2e2cbf3fc811ea1ca8330ad8d8c", "patch": "@@ -14,8 +14,7 @@ use astencode::decode_inlined_item;\n use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n use schema::*;\n \n-use rustc::hir::map as hir_map;\n-use rustc::hir::map::{DefKey, DefPathData};\n+use rustc::hir::map::{DefKey, DefPath, DefPathData};\n use rustc::hir;\n use rustc::hir::intravisit::IdRange;\n \n@@ -567,7 +566,7 @@ impl<'a, 'tcx> CrateMetadata {\n         ty::TraitDef::new(self.local_def_id(item_id),\n                           data.unsafety,\n                           data.paren_sugar,\n-                          self.def_path(item_id).unwrap().deterministic_hash(tcx))\n+                          self.def_path(item_id).deterministic_hash(tcx))\n     }\n \n     fn get_variant(&self,\n@@ -1128,16 +1127,10 @@ impl<'a, 'tcx> CrateMetadata {\n         self.def_path_table.def_key(index)\n     }\n \n-    // Returns the path leading to the thing with this `id`. Note that\n-    // some def-ids don't wind up in the metadata, so `def_path` sometimes\n-    // returns `None`\n-    pub fn def_path(&self, id: DefIndex) -> Option<hir_map::DefPath> {\n+    // Returns the path leading to the thing with this `id`.\n+    pub fn def_path(&self, id: DefIndex) -> DefPath {\n         debug!(\"def_path(id={:?})\", id);\n-        if self.is_proc_macro(id) || self.maybe_entry(id).is_some() {\n-            Some(hir_map::DefPath::make(self.cnum, id, |parent| self.def_key(parent)))\n-        } else {\n-            None\n-        }\n+        DefPath::make(self.cnum, id, |parent| self.def_path_table.def_key(parent))\n     }\n \n     /// Imports the codemap from an external crate into the codemap of the crate"}]}