{"sha": "f688bee4ece7b16e8e77b2f4217a8345da742733", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODhiZWU0ZWNlN2IxNmU4ZTc3YjJmNDIxN2E4MzQ1ZGE3NDI3MzM=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-01-01T02:17:25Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-02-17T16:51:58Z"}, "message": "Add a `Result::ok_or_err` method to extract a `T` from `Result<T, T>`", "tree": {"sha": "0325c747a8468ae89b9bea2d893845e4e0b7dc89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0325c747a8468ae89b9bea2d893845e4e0b7dc89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f688bee4ece7b16e8e77b2f4217a8345da742733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f688bee4ece7b16e8e77b2f4217a8345da742733", "html_url": "https://github.com/rust-lang/rust/commit/f688bee4ece7b16e8e77b2f4217a8345da742733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f688bee4ece7b16e8e77b2f4217a8345da742733/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1", "html_url": "https://github.com/rust-lang/rust/commit/ee88f46bb5e27c4d9f30326e69ff2298dcbeecb1"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "32074c41b8b12bdb4bb7bde041ab215280c1e9b8", "filename": "library/core/src/result.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f688bee4ece7b16e8e77b2f4217a8345da742733/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688bee4ece7b16e8e77b2f4217a8345da742733/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=f688bee4ece7b16e8e77b2f4217a8345da742733", "patch": "@@ -1276,6 +1276,41 @@ impl<T, E> Result<Result<T, E>, E> {\n     }\n }\n \n+impl<T> Result<T, T> {\n+    /// Returns the [`Ok`] value if `self` is `Ok`, and the [`Err`] value if\n+    /// `self` is `Err`.\n+    ///\n+    /// In other words, this function returns the value (the `T`) of a\n+    /// `Result<T, T>`, regardless of whether or not that result is `Ok` or\n+    /// `Err`.\n+    ///\n+    /// This can be useful in conjunction with APIs such as\n+    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`][binary_search], but only in\n+    /// cases where you don't care if the result was `Ok` or not.\n+    ///\n+    /// [`Atomic*::compare_exchange`]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [binary_search]: ../primitive.slice.html#method.binary_search\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ok_or_err)]\n+    /// let ok: Result<u32, u32> = Ok(3);\n+    /// let err: Result<u32, u32> = Err(4);\n+    ///\n+    /// assert_eq!(ok.ok_or_err(), 3);\n+    /// assert_eq!(err.ok_or_err(), 4);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"ok_or_err\", reason = \"newly added\", issue = \"none\")]\n+    pub const fn ok_or_err(self) -> T {\n+        match self {\n+            Ok(v) => v,\n+            Err(v) => v,\n+        }\n+    }\n+}\n+\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]"}, {"sha": "5cd6e9efd9eed1ce3ac995ae953d8b5fcb63ded2", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f688bee4ece7b16e8e77b2f4217a8345da742733/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688bee4ece7b16e8e77b2f4217a8345da742733/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=f688bee4ece7b16e8e77b2f4217a8345da742733", "patch": "@@ -65,6 +65,7 @@\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(option_result_unwrap_unchecked)]\n+#![feature(ok_or_err)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_peek_mut)]\n #![feature(once_cell)]"}, {"sha": "53087eec499df88078cf6e0c86a773198bcd1985", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f688bee4ece7b16e8e77b2f4217a8345da742733/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688bee4ece7b16e8e77b2f4217a8345da742733/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=f688bee4ece7b16e8e77b2f4217a8345da742733", "patch": "@@ -95,6 +95,15 @@ fn test_unwrap_or() {\n     assert_eq!(ok_err.unwrap_or(50), 50);\n }\n \n+#[test]\n+fn test_ok_or_err() {\n+    let ok: Result<isize, isize> = Ok(100);\n+    let err: Result<isize, isize> = Err(200);\n+\n+    assert_eq!(ok.ok_or_err(), 100);\n+    assert_eq!(err.ok_or_err(), 200);\n+}\n+\n #[test]\n fn test_unwrap_or_else() {\n     fn handler(msg: &'static str) -> isize {"}]}