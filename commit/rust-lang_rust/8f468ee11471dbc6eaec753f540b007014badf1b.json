{"sha": "8f468ee11471dbc6eaec753f540b007014badf1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNDY4ZWUxMTQ3MWRiYzZlYWVjNzUzZjU0MGIwMDcwMTRiYWRmMWI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-07T23:45:03Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-09T22:17:09Z"}, "message": "Defer error span calculation until needed\n\nThis was showing up in profiles. Also deduplicates the code to get just\nthe impl header span.", "tree": {"sha": "ed818ae70f06b5cd4dd8d8f664a5bc9e28e67d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed818ae70f06b5cd4dd8d8f664a5bc9e28e67d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f468ee11471dbc6eaec753f540b007014badf1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f468ee11471dbc6eaec753f540b007014badf1b", "html_url": "https://github.com/rust-lang/rust/commit/8f468ee11471dbc6eaec753f540b007014badf1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f468ee11471dbc6eaec753f540b007014badf1b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d6e79cfe857abd70e45210e86f58b6eeef4d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d6e79cfe857abd70e45210e86f58b6eeef4d35", "html_url": "https://github.com/rust-lang/rust/commit/82d6e79cfe857abd70e45210e86f58b6eeef4d35"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "1526182576c315450f26896c9125b121c09a9436", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8f468ee11471dbc6eaec753f540b007014badf1b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f468ee11471dbc6eaec753f540b007014badf1b/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=8f468ee11471dbc6eaec753f540b007014badf1b", "patch": "@@ -10,13 +10,19 @@ use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_span::Span;\n \n mod builtin;\n mod inherent_impls;\n mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n+/// Obtains the span of just the impl header of `impl_def_id`.\n+fn impl_header_span(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Span {\n+    tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap())\n+}\n+\n fn check_impl(tcx: TyCtxt<'_>, impl_def_id: DefId, trait_ref: ty::TraitRef<'_>) {\n     debug!(\n         \"(checking implementation) adding impl for trait '{:?}', item '{}'\",\n@@ -37,10 +43,10 @@ fn check_impl(tcx: TyCtxt<'_>, impl_def_id: DefId, trait_ref: ty::TraitRef<'_>)\n fn enforce_trait_manually_implementable(tcx: TyCtxt<'_>, impl_def_id: DefId, trait_def_id: DefId) {\n     let did = Some(trait_def_id);\n     let li = tcx.lang_items();\n-    let span = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n \n     // Disallow *all* explicit impls of `Sized` and `Unsize` for now.\n     if did == li.sized_trait() {\n+        let span = impl_header_span(tcx, impl_def_id);\n         struct_span_err!(\n             tcx.sess,\n             span,\n@@ -53,6 +59,7 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt<'_>, impl_def_id: DefId, tra\n     }\n \n     if did == li.unsize_trait() {\n+        let span = impl_header_span(tcx, impl_def_id);\n         struct_span_err!(\n             tcx.sess,\n             span,\n@@ -78,6 +85,8 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt<'_>, impl_def_id: DefId, tra\n     } else {\n         return; // everything OK\n     };\n+\n+    let span = impl_header_span(tcx, impl_def_id);\n     struct_span_err!(\n         tcx.sess,\n         span,\n@@ -101,7 +110,7 @@ fn enforce_empty_impls_for_marker_traits(tcx: TyCtxt<'_>, impl_def_id: DefId, tr\n         return;\n     }\n \n-    let span = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n+    let span = impl_header_span(tcx, impl_def_id);\n     struct_span_err!(tcx.sess, span, E0715, \"impls for marker traits cannot contain items\").emit();\n }\n \n@@ -187,17 +196,17 @@ fn check_object_overlap<'tcx>(\n             } else {\n                 let mut supertrait_def_ids = traits::supertrait_def_ids(tcx, component_def_id);\n                 if supertrait_def_ids.any(|d| d == trait_def_id) {\n-                    let sp = tcx.sess.source_map().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n+                    let span = impl_header_span(tcx, impl_def_id);\n                     struct_span_err!(\n                         tcx.sess,\n-                        sp,\n+                        span,\n                         E0371,\n                         \"the object type `{}` automatically implements the trait `{}`\",\n                         trait_ref.self_ty(),\n                         tcx.def_path_str(trait_def_id)\n                     )\n                     .span_label(\n-                        sp,\n+                        span,\n                         format!(\n                             \"`{}` automatically implements trait `{}`\",\n                             trait_ref.self_ty(),"}]}