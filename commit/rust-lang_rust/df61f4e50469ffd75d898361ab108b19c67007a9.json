{"sha": "df61f4e50469ffd75d898361ab108b19c67007a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjFmNGU1MDQ2OWZmZDc1ZDg5ODM2MWFiMTA4YjE5YzY3MDA3YTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-18T22:38:59Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-18T22:38:59Z"}, "message": "Rollup merge of #30998 - apasel422:btree-set-variance, r=Gankro\n\nCC #30642\n\nr? @Gankro", "tree": {"sha": "022e14915387625b65d60a028b8626c38689cff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022e14915387625b65d60a028b8626c38689cff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df61f4e50469ffd75d898361ab108b19c67007a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df61f4e50469ffd75d898361ab108b19c67007a9", "html_url": "https://github.com/rust-lang/rust/commit/df61f4e50469ffd75d898361ab108b19c67007a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df61f4e50469ffd75d898361ab108b19c67007a9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e24a21cd87deeb1ba88d07e1446877f0472f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e24a21cd87deeb1ba88d07e1446877f0472f39", "html_url": "https://github.com/rust-lang/rust/commit/11e24a21cd87deeb1ba88d07e1446877f0472f39"}, {"sha": "686be822efd61ec1dc7668bfc18f53dd7b02519c", "url": "https://api.github.com/repos/rust-lang/rust/commits/686be822efd61ec1dc7668bfc18f53dd7b02519c", "html_url": "https://github.com/rust-lang/rust/commit/686be822efd61ec1dc7668bfc18f53dd7b02519c"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "91fc8d8217f53b487921e33e45e56f6e39c61124", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/df61f4e50469ffd75d898361ab108b19c67007a9/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61f4e50469ffd75d898361ab108b19c67007a9/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=df61f4e50469ffd75d898361ab108b19c67007a9", "patch": "@@ -14,7 +14,7 @@\n use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::fmt::Debug;\n use core::fmt;\n-use core::iter::{Peekable, Map, FromIterator};\n+use core::iter::{Peekable, FromIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub};\n \n use borrow::Borrow;\n@@ -52,12 +52,12 @@ pub struct Iter<'a, T: 'a> {\n /// An owning iterator over a BTreeSet's items.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n-    iter: Map<::btree_map::IntoIter<T, ()>, fn((T, ())) -> T>,\n+    iter: ::btree_map::IntoIter<T, ()>,\n }\n \n /// An iterator over a sub-range of BTreeSet's items.\n pub struct Range<'a, T: 'a> {\n-    iter: Map<::btree_map::Range<'a, T, ()>, fn((&'a T, &'a ())) -> &'a T>,\n+    iter: ::btree_map::Range<'a, T, ()>,\n }\n \n /// A lazy iterator producing elements in the set difference (in-order).\n@@ -160,12 +160,7 @@ impl<T: Ord> BTreeSet<T> {\n                                                            -> Range<'a, T>\n         where T: Borrow<Min> + Borrow<Max>\n     {\n-        fn first<A, B>((a, _): (A, B)) -> A {\n-            a\n-        }\n-        let first: fn((&'a T, &'a ())) -> &'a T = first; // coerce to fn pointer\n-\n-        Range { iter: self.map.range(min, max).map(first) }\n+        Range { iter: self.map.range(min, max) }\n     }\n }\n \n@@ -548,12 +543,7 @@ impl<T> IntoIterator for BTreeSet<T> {\n     /// assert_eq!(v, [1, 2, 3, 4]);\n     /// ```\n     fn into_iter(self) -> IntoIter<T> {\n-        fn first<A, B>((a, _): (A, B)) -> A {\n-            a\n-        }\n-        let first: fn((T, ())) -> T = first; // coerce to fn pointer\n-\n-        IntoIter { iter: self.map.into_iter().map(first) }\n+        IntoIter { iter: self.map.into_iter() }\n     }\n }\n \n@@ -721,7 +711,7 @@ impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> {\n-        self.iter.next()\n+        self.iter.next().map(|(k, _)| k)\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n@@ -730,7 +720,7 @@ impl<T> Iterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n     fn next_back(&mut self) -> Option<T> {\n-        self.iter.next_back()\n+        self.iter.next_back().map(|(k, _)| k)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -746,12 +736,12 @@ impl<'a, T> Iterator for Range<'a, T> {\n     type Item = &'a T;\n \n     fn next(&mut self) -> Option<&'a T> {\n-        self.iter.next()\n+        self.iter.next().map(|(k, _)| k)\n     }\n }\n impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n     fn next_back(&mut self) -> Option<&'a T> {\n-        self.iter.next_back()\n+        self.iter.next_back().map(|(k, _)| k)\n     }\n }\n "}, {"sha": "fee183433285e305a0ae541ceeb60d6986d20164", "filename": "src/libcollectionstest/btree/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df61f4e50469ffd75d898361ab108b19c67007a9/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61f4e50469ffd75d898361ab108b19c67007a9/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fset.rs?ref=df61f4e50469ffd75d898361ab108b19c67007a9", "patch": "@@ -254,3 +254,13 @@ fn test_recovery() {\n \n     assert_eq!(s.iter().next(), None);\n }\n+\n+#[test]\n+fn test_variance() {\n+    use std::collections::btree_set::{IntoIter, Iter, Range};\n+\n+    fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> { v }\n+    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> { v }\n+    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> { v }\n+    fn range<'a, 'new>(v: Range<'a, &'static str>) -> Range<'a, &'new str> { v }\n+}"}]}