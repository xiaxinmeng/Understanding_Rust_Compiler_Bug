{"sha": "f5e86d68947c453c064436f892a0d00936e50fa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTg2ZDY4OTQ3YzQ1M2MwNjQ0MzZmODkyYTBkMDA5MzZlNTBmYTM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-27T02:26:42Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-27T02:26:42Z"}, "message": "Rename `span_note_and_lint` to `span_lint_and_note`", "tree": {"sha": "8cce492e92258fcc414be1ed4bcf5eef4722eef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cce492e92258fcc414be1ed4bcf5eef4722eef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e86d68947c453c064436f892a0d00936e50fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e86d68947c453c064436f892a0d00936e50fa3", "html_url": "https://github.com/rust-lang/rust/commit/f5e86d68947c453c064436f892a0d00936e50fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e86d68947c453c064436f892a0d00936e50fa3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60f12f71f2060f386d9765cd60b653a58519a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60f12f71f2060f386d9765cd60b653a58519a08", "html_url": "https://github.com/rust-lang/rust/commit/f60f12f71f2060f386d9765cd60b653a58519a08"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "d2d20375dafa5b46ece854d5ef9104de00ebac7b", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_parent_expr, higher, if_sequence, same_tys, snippet, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{get_parent_expr, higher, if_sequence, same_tys, snippet, span_lint_and_note, span_lint_and_then};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::ty::Ty;\n use rustc_data_structures::fx::FxHashMap;\n@@ -178,7 +178,7 @@ fn lint_same_then_else(cx: &LateContext<'_, '_>, blocks: &[&Block<'_>]) {\n         &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).eq_block(lhs, rhs) };\n \n     if let Some((i, j)) = search_same_sequenced(blocks, eq) {\n-        span_note_and_lint(\n+        span_lint_and_note(\n             cx,\n             IF_SAME_THEN_ELSE,\n             j.span,\n@@ -201,7 +201,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n         &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) };\n \n     for (i, j) in search_same(conds, hash, eq) {\n-        span_note_and_lint(\n+        span_lint_and_note(\n             cx,\n             IFS_SAME_COND,\n             j.span,\n@@ -229,7 +229,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n     };\n \n     for (i, j) in search_same(conds, hash, eq) {\n-        span_note_and_lint(\n+        span_lint_and_note(\n             cx,\n             SAME_FUNCTIONS_IN_IF_CONDITION,\n             j.span,"}, {"sha": "3e2d5b88e7b7dff309a067ff9d5b71911d1075a4", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_path, paths, span_note_and_lint};\n+use crate::utils::{is_copy, match_path, paths, span_lint_and_note};\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -41,7 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n \n             if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n-                span_note_and_lint(\n+                span_lint_and_note(\n                     cx,\n                     COPY_ITERATOR,\n                     item.span,"}, {"sha": "29351deea286baf2be62adfc8cf1cba6dc469e6c", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_note_and_lint};\n+use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_lint_and_note};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_hir::*;\n@@ -131,7 +131,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                     } else {\n                         return;\n                     }\n-                    span_note_and_lint(cx,\n+                    span_lint_and_note(cx,\n                                        lint,\n                                        expr.span,\n                                        &msg,\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                     } else {\n                         return;\n                     }\n-                    span_note_and_lint(cx,\n+                    span_lint_and_note(cx,\n                                        lint,\n                                        expr.span,\n                                        &msg,"}, {"sha": "f143c7462ad27b309124672526c207619dcce927", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_parent_expr, span_lint, span_note_and_lint};\n+use crate::utils::{get_parent_expr, span_lint, span_lint_and_note};\n use if_chain::if_chain;\n use rustc::hir::map::Map;\n use rustc::ty;\n@@ -307,7 +307,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n                     // Check that this is a read, not a write.\n                     if !is_in_assignment_position(self.cx, expr);\n                     then {\n-                        span_note_and_lint(\n+                        span_lint_and_note(\n                             self.cx,\n                             EVAL_ORDER_DEPENDENCE,\n                             expr.span,"}, {"sha": "31e924e36abed8752b76d3328c7fcd45d7e4cf9b", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{differing_macro_contexts, snippet_opt, span_lint_and_help, span_note_and_lint};\n+use crate::utils::{differing_macro_contexts, snippet_opt, span_lint_and_help, span_lint_and_note};\n use if_chain::if_chain;\n use rustc::lint::in_external_macro;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -140,7 +140,7 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n                     let op = UnOp::to_string(op);\n                     let eqop_span = lhs.span.between(sub_rhs.span);\n                     if eq_snippet.ends_with('=') {\n-                        span_note_and_lint(\n+                        span_lint_and_note(\n                             cx,\n                             SUSPICIOUS_ASSIGNMENT_FORMATTING,\n                             eqop_span,\n@@ -221,7 +221,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n         let else_desc = if is_if(else_) { \"if\" } else { \"{..}\" };\n \n         then {\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n@@ -260,7 +260,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n                 if space_snippet.contains('\\n');\n                 if indentation(cx, op.span) <= indentation(cx, lhs.span);\n                 then {\n-                    span_note_and_lint(\n+                    span_lint_and_note(\n                         cx,\n                         POSSIBLE_MISSING_COMMA,\n                         lint_span,\n@@ -291,7 +291,7 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n                     (\"an `else {..}`\", \"the next block\")\n                 };\n \n-                span_note_and_lint(\n+                span_lint_and_note(\n                     cx,\n                     SUSPICIOUS_ELSE_FORMATTING,\n                     else_span,"}, {"sha": "0fc7799c97a1b8d4a3be3aeb1e03170f212ceab8", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -4,7 +4,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n     expr_block, is_allowed, is_expn_of, is_wild, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n-    snippet_with_applicability, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, span_note_and_lint,\n+    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n     walk_ptrs_ty,\n };\n use if_chain::if_chain;\n@@ -449,7 +449,7 @@ fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr<'\n         let type_ranges = type_ranges(&ranges);\n         if !type_ranges.is_empty() {\n             if let Some((start, end)) = overlapping(&type_ranges) {\n-                span_note_and_lint(\n+                span_lint_and_note(\n                     cx,\n                     MATCH_OVERLAPPING_ARM,\n                     start.span,\n@@ -488,7 +488,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                         if is_panic_block(block);\n                         then {\n                             // `Err(_)` or `Err(_e)` arm with `panic!` found\n-                            span_note_and_lint(cx,\n+                            span_lint_and_note(cx,\n                                 MATCH_WILD_ERR_ARM,\n                                 arm.pat.span,\n                                 &format!(\"`Err({})` matches all errors\", &ident_bind_name),"}, {"sha": "d00d8dfbd3ed80fbc67cdce968671c62ecd98edc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -28,8 +28,8 @@ use crate::utils::{\n     is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n     match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, paths,\n     remove_blocks, return_ty, same_tys, single_segment_path, snippet, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then,\n-    span_note_and_lint, sugg, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    span_lint_and_then, sugg, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -2422,7 +2422,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n         let same_span = map_args[1].span.ctxt() == unwrap_args[1].span.ctxt();\n         if same_span && !multiline {\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 if is_option {\n                     OPTION_MAP_UNWRAP_OR_ELSE\n@@ -2566,7 +2566,7 @@ fn lint_filter_next<'a, 'tcx>(\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n             // add note if not multi-line\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 FILTER_NEXT,\n                 expr.span,\n@@ -2624,7 +2624,7 @@ fn lint_filter_map_next<'a, 'tcx>(\n                    `.find_map(p)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 FILTER_MAP_NEXT,\n                 expr.span,"}, {"sha": "9739b118f7494e2dcc2bc4749871637f588c67ad", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -96,7 +96,7 @@ pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, sp\n /// 10 |     forget(&SomeStruct);\n ///    |            ^^^^^^^^^^^\n /// ```\n-pub fn span_note_and_lint<'a, T: LintContext>(\n+pub fn span_lint_and_note<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n     span: Span,"}, {"sha": "af07cf6665836b91499934bbf6a4efa89611fa06", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e86d68947c453c064436f892a0d00936e50fa3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f5e86d68947c453c064436f892a0d00936e50fa3", "patch": "@@ -318,7 +318,7 @@ impl CompilerLintFunctions {\n         map.insert(\"span_lint\", \"utils::span_lint\");\n         map.insert(\"struct_span_lint\", \"utils::span_lint\");\n         map.insert(\"lint\", \"utils::span_lint\");\n-        map.insert(\"span_lint_note\", \"utils::span_note_and_lint\");\n+        map.insert(\"span_lint_note\", \"utils::span_lint_and_note\");\n         map.insert(\"span_lint_help\", \"utils::span_lint_and_help\");\n         Self { map }\n     }"}]}