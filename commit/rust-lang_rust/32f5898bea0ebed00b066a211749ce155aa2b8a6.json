{"sha": "32f5898bea0ebed00b066a211749ce155aa2b8a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZjU4OThiZWEwZWJlZDAwYjA2NmEyMTE3NDljZTE1NWFhMmI4YTY=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-02T06:48:44Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-12T03:33:05Z"}, "message": "Implement Index for HashMap\n\nThis also deprecates HashMap::get. Use indexing instead.", "tree": {"sha": "5d16b5c3e7cb5947f9afe60fc294faa2e6e2d9c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d16b5c3e7cb5947f9afe60fc294faa2e6e2d9c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32f5898bea0ebed00b066a211749ce155aa2b8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32f5898bea0ebed00b066a211749ce155aa2b8a6", "html_url": "https://github.com/rust-lang/rust/commit/32f5898bea0ebed00b066a211749ce155aa2b8a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32f5898bea0ebed00b066a211749ce155aa2b8a6/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd10d209cdceedcb95e51025e624be749e0cc5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd10d209cdceedcb95e51025e624be749e0cc5f9", "html_url": "https://github.com/rust-lang/rust/commit/fd10d209cdceedcb95e51025e624be749e0cc5f9"}], "stats": {"total": 72, "additions": 57, "deletions": 15}, "files": [{"sha": "a1dd49bbf898d97efbd00cd950a69f5b8cd9b876", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=32f5898bea0ebed00b066a211749ce155aa2b8a6", "patch": "@@ -166,7 +166,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, p: &clean::Path,\n             if ast_util::is_local(did) || cache.inlined.contains(&did) {\n                 Some((\"../\".repeat(loc.len())).to_string())\n             } else {\n-                match *cache.extern_locations.get(&did.krate) {\n+                match cache.extern_locations[did.krate] {\n                     render::Remote(ref s) => Some(s.to_string()),\n                     render::Local => {\n                         Some((\"../\".repeat(loc.len())).to_string())\n@@ -291,11 +291,11 @@ fn primitive_link(f: &mut fmt::Formatter,\n             needs_termination = true;\n         }\n         Some(&cnum) => {\n-            let path = m.paths.get(&ast::DefId {\n+            let path = &m.paths[ast::DefId {\n                 krate: cnum,\n                 node: ast::CRATE_NODE_ID,\n-            });\n-            let loc = match *m.extern_locations.get(&cnum) {\n+            }];\n+            let loc = match m.extern_locations[cnum] {\n                 render::Remote(ref s) => Some(s.to_string()),\n                 render::Local => {\n                     let loc = current_location_key.get().unwrap();\n@@ -343,11 +343,11 @@ impl fmt::Show for clean::Type {\n         match *self {\n             clean::TyParamBinder(id) => {\n                 let m = cache_key.get().unwrap();\n-                f.write(m.typarams.get(&ast_util::local_def(id)).as_bytes())\n+                f.write(m.typarams[ast_util::local_def(id)].as_bytes())\n             }\n             clean::Generic(did) => {\n                 let m = cache_key.get().unwrap();\n-                f.write(m.typarams.get(&did).as_bytes())\n+                f.write(m.typarams[did].as_bytes())\n             }\n             clean::ResolvedPath{ did, ref typarams, ref path } => {\n                 try!(resolved_path(f, did, path, false));"}, {"sha": "552165399dca33ae5890d49ccf2f7310531b2a95", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=32f5898bea0ebed00b066a211749ce155aa2b8a6", "patch": "@@ -1252,8 +1252,8 @@ impl<'a> Item<'a> {\n         // located, then we return `None`.\n         } else {\n             let cache = cache_key.get().unwrap();\n-            let path = cache.external_paths.get(&self.item.def_id);\n-            let root = match *cache.extern_locations.get(&self.item.def_id.krate) {\n+            let path = &cache.external_paths[self.item.def_id];\n+            let root = match cache.extern_locations[self.item.def_id.krate] {\n                 Remote(ref s) => s.to_string(),\n                 Local => self.cx.root_path.clone(),\n                 Unknown => return None,"}, {"sha": "5b2a542ca9664b308ab707eef25c843438e36c7f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=32f5898bea0ebed00b066a211749ce155aa2b8a6", "patch": "@@ -229,7 +229,7 @@ impl<'a> RustdocVisitor<'a> {\n             core::Typed(ref tcx) => tcx,\n             core::NotTyped(_) => return false\n         };\n-        let def = tcx.def_map.borrow().get(&id).def_id();\n+        let def = (*tcx.def_map.borrow())[id].def_id();\n         if !ast_util::is_local(def) { return false }\n         let analysis = match self.analysis {\n             Some(analysis) => analysis, None => return false"}, {"sha": "2532cf4b93d7d8a7caa579088194f62095aaa0af", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32f5898bea0ebed00b066a211749ce155aa2b8a6/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=32f5898bea0ebed00b066a211749ce155aa2b8a6", "patch": "@@ -26,6 +26,7 @@ use mem::replace;\n use num;\n use option::{Some, None, Option};\n use result::{Ok, Err};\n+use ops::Index;\n \n mod table {\n     use clone::Clone;\n@@ -1341,7 +1342,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// // Update and return the existing value\n     /// assert_eq!(*map.insert_or_update_with(\"a\", 9, |_key, val| *val = 7), 7);\n-    /// assert_eq!(map.get(&\"a\"), &7);\n+    /// assert_eq!(map[\"a\"], 7);\n     /// ```\n     pub fn insert_or_update_with<'a>(\n                                  &'a mut self,\n@@ -1392,9 +1393,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// }\n     ///\n     /// assert_eq!(map.len(), 3);\n-    /// assert_eq!(map.get(&\"a key\"), &vec![\"value\", \"new value\"]);\n-    /// assert_eq!(map.get(&\"b key\"), &vec![\"new value\"]);\n-    /// assert_eq!(map.get(&\"z key\"), &vec![\"new value\", \"value\"]);\n+    /// assert_eq!(map[\"a key\"], vec![\"value\", \"new value\"]);\n+    /// assert_eq!(map[\"b key\"], vec![\"new value\"]);\n+    /// assert_eq!(map[\"z key\"], vec![\"new value\", \"value\"]);\n     /// ```\n     pub fn find_with_or_insert_with<'a, A>(&'a mut self,\n                                            k: K,\n@@ -1426,12 +1427,15 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// # Example\n     ///\n     /// ```\n+    /// #![allow(deprecated)]\n+    ///\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// assert_eq!(map.get(&\"a\"), &1);\n     /// ```\n+    #[deprecated = \"prefer indexing instead, e.g., map[key]\"]\n     pub fn get<'a>(&'a self, k: &K) -> &'a V {\n         match self.find(k) {\n             Some(v) => v,\n@@ -1458,11 +1462,11 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///     let val = map.get_mut(&\"a\");\n     ///     *val = 40;\n     /// }\n-    /// assert_eq!(map.get(&\"a\"), &40);\n+    /// assert_eq!(map[\"a\"], 40);\n     ///\n     /// // A more direct way could be:\n     /// *map.get_mut(&\"a\") = -2;\n-    /// assert_eq!(map.get(&\"a\"), &-2);\n+    /// assert_eq!(map[\"a\"], -2);\n     /// ```\n     pub fn get_mut<'a>(&'a mut self, k: &K) -> &'a mut V {\n         match self.find_mut(k) {\n@@ -1738,6 +1742,21 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H>\n     }\n }\n \n+impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> Index<K, V> for HashMap<K, V, H> {\n+    #[inline]\n+    fn index<'a>(&'a self, index: &K) -> &'a V {\n+        self.get(index)\n+    }\n+}\n+\n+// FIXME(#12825) Indexing will always try IndexMut first and that causes issues.\n+/*impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> ops::IndexMut<K, V> for HashMap<K, V, H> {\n+    #[inline]\n+    fn index_mut<'a>(&'a mut self, index: &K) -> &'a mut V {\n+        self.get_mut(index)\n+    }\n+}*/\n+\n /// HashMap iterator\n pub type Entries<'a, K, V> = table::Entries<'a, K, V>;\n \n@@ -2694,6 +2713,29 @@ mod test_map {\n \n         assert_eq!(iter.size_hint(), (3, Some(3)));\n     }\n+\n+    #[test]\n+    fn test_index() {\n+        let mut map: HashMap<int, int> = HashMap::new();\n+\n+        map.insert(1, 2);\n+        map.insert(2, 1);\n+        map.insert(3, 4);\n+\n+        assert_eq!(map[2], 1);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_index_nonexistent() {\n+        let mut map: HashMap<int, int> = HashMap::new();\n+\n+        map.insert(1, 2);\n+        map.insert(2, 1);\n+        map.insert(3, 4);\n+\n+        map[4];\n+    }\n }\n \n #[cfg(test)]"}]}