{"sha": "bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTBhM2JhNDQyOTNhMTkxM2UzZmQ3YzFmN2RiMDk0ZjlmNTVjZGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-20T22:26:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-20T22:26:55Z"}, "message": "rustc: Add a type unification cache", "tree": {"sha": "f39414d90189a9cfad0336e3127bba8b3bd16fa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39414d90189a9cfad0336e3127bba8b3bd16fa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc", "html_url": "https://github.com/rust-lang/rust/commit/bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7596fcfba7e524977f42f24933173414f3e23cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7596fcfba7e524977f42f24933173414f3e23cd1", "html_url": "https://github.com/rust-lang/rust/commit/7596fcfba7e524977f42f24933173414f3e23cd1"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "5ebd3d8d63c71c37e7be56de0d7906551fc7886b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=bc50a3ba44293a1913e3fd7c1f7db094f9f55cdc", "patch": "@@ -48,12 +48,18 @@ tag any_item {\n \n type ty_item_table = hashmap[ast.def_id,any_item];\n \n+type unify_cache_entry = tup(@ty.t,@ty.t,vec[mutable @ty.t]);\n+type unify_cache = hashmap[unify_cache_entry,ty.unify_result];\n+\n type crate_ctxt = rec(session.session sess,\n                       ty.type_cache type_cache,\n                       @ty_item_table item_items,\n                       vec[ast.obj_field] obj_fields,\n                       option.t[ast.def_id] this_obj,\n-                      mutable int next_var_id);\n+                      mutable int next_var_id,\n+                      unify_cache unify_cache,\n+                      mutable uint cache_hits,\n+                      mutable uint cache_misses);\n \n type fn_ctxt = rec(@ty.t ret_ty,\n                    @ty_table locals,\n@@ -842,6 +848,14 @@ mod Unify {\n \n     fn with_params(@fn_ctxt fcx, @ty.t expected, @ty.t actual,\n                    vec[mutable @ty.t] param_substs) -> ty.unify_result {\n+        auto cache_key = tup(expected, actual, param_substs);\n+        if (fcx.ccx.unify_cache.contains_key(cache_key)) {\n+            fcx.ccx.cache_hits += 1u;\n+            ret fcx.ccx.unify_cache.get(cache_key);\n+        }\n+\n+        fcx.ccx.cache_misses += 1u;\n+\n         obj unify_handler(@fn_ctxt fcx, vec[mutable @ty.t] param_substs) {\n             fn resolve_local(ast.def_id id) -> option.t[@ty.t] {\n                 alt (fcx.locals.find(id)) {\n@@ -898,7 +912,9 @@ mod Unify {\n \n \n         auto handler = unify_handler(fcx, param_substs);\n-        ret ty.unify(expected, actual, handler);\n+        auto result = ty.unify(expected, actual, handler);\n+        fcx.ccx.unify_cache.insert(cache_key, result);\n+        ret result;\n     }\n }\n \n@@ -2699,19 +2715,59 @@ fn update_obj_fields(&@crate_ctxt ccx, @ast.item i) -> @crate_ctxt {\n }\n \n \n+// Utilities for the unification cache\n+\n+fn hash_unify_cache_entry(&unify_cache_entry uce) -> uint {\n+    auto h = ty.hash_ty(uce._0);\n+    h += h << 5u + ty.hash_ty(uce._1);\n+\n+    auto i = 0u;\n+    auto tys_len = _vec.len[mutable @ty.t](uce._2);\n+    while (i < tys_len) {\n+        h += h << 5u + ty.hash_ty(uce._2.(i));\n+        i += 1u;\n+    }\n+\n+    ret h;\n+}\n+\n+fn eq_unify_cache_entry(&unify_cache_entry a, &unify_cache_entry b) -> bool {\n+    if (!ty.eq_ty(a._0, b._0) || !ty.eq_ty(a._1, b._1)) { ret false; }\n+\n+    auto i = 0u;\n+    auto tys_len = _vec.len[mutable @ty.t](a._2);\n+    if (_vec.len[mutable @ty.t](b._2) != tys_len) { ret false; }\n+\n+    while (i < tys_len) {\n+        if (!ty.eq_ty(a._2.(i), b._2.(i))) { ret false; }\n+        i += 1u;\n+    }\n+\n+    ret true;\n+}\n+\n+\n type typecheck_result = tup(@ast.crate, ty.type_cache);\n \n fn check_crate(session.session sess, @ast.crate crate) -> typecheck_result {\n     auto result = collect_item_types(sess, crate);\n \n     let vec[ast.obj_field] fields = vec();\n \n+    auto hasher = hash_unify_cache_entry;\n+    auto eqer = eq_unify_cache_entry;\n+    auto unify_cache =\n+        map.mk_hashmap[unify_cache_entry,ty.unify_result](hasher, eqer);\n+\n     auto ccx = @rec(sess=sess,\n                     type_cache=result._1,\n                     item_items=result._2,\n                     obj_fields=fields,\n                     this_obj=none[ast.def_id],\n-                    mutable next_var_id=0);\n+                    mutable next_var_id=0,\n+                    unify_cache=unify_cache,\n+                    mutable cache_hits=0u,\n+                    mutable cache_misses=0u);\n \n     auto fld = fold.new_identity_fold[@crate_ctxt]();\n \n@@ -2721,6 +2777,10 @@ fn check_crate(session.session sess, @ast.crate crate) -> typecheck_result {\n                with *fld);\n \n     auto crate_1 = fold.fold_crate[@crate_ctxt](ccx, fld, result._0);\n+\n+    log #fmt(\"cache hit rate: %u/%u\", ccx.cache_hits,\n+             ccx.cache_hits + ccx.cache_misses);\n+\n     ret tup(crate_1, ccx.type_cache);\n }\n "}]}