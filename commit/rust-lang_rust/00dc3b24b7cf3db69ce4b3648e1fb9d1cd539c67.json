{"sha": "00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "node_id": "C_kwDOAAsO6NoAKDAwZGMzYjI0YjdjZjNkYjY5Y2U0YjM2NDhlMWZiOWQxY2Q1MzljNjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-14T19:05:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-14T19:12:42Z"}, "message": "Tighter spans", "tree": {"sha": "4461ec8df5bffae51bad0d235bef51e87777cfbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4461ec8df5bffae51bad0d235bef51e87777cfbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "html_url": "https://github.com/rust-lang/rust/commit/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eae77381ec58cd89346367fc498547c5e30c497", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eae77381ec58cd89346367fc498547c5e30c497", "html_url": "https://github.com/rust-lang/rust/commit/9eae77381ec58cd89346367fc498547c5e30c497"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "8bed7888142096a62c2a4d9b356ade72c4cbb1ea", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::{MethodKind, Target, Unsafety};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault;\n use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::error::ExpectedFound;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{\n@@ -2213,7 +2213,7 @@ impl CheckAttrVisitor<'_> {\n             tcx.fn_sig(def_id).subst(tcx, fresh_substs),\n         );\n \n-        let cause = ObligationCause::misc(span, def_id);\n+        let mut cause = ObligationCause::misc(span, def_id);\n         let sig = ocx.normalize(&cause, param_env, sig);\n \n         // proc macro is not WF.\n@@ -2235,6 +2235,39 @@ impl CheckAttrVisitor<'_> {\n \n         if let Err(terr) = ocx.eq(&cause, param_env, expected_sig, sig) {\n             let mut diag = tcx.sess.create_err(errors::ProcMacroBadSig { span, kind });\n+\n+            let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id);\n+            if let Some(hir_sig) = hir_sig {\n+                match terr {\n+                    TypeError::ArgumentMutability(idx) | TypeError::ArgumentSorts(_, idx) => {\n+                        if let Some(ty) = hir_sig.decl.inputs.get(idx) {\n+                            diag.set_span(ty.span);\n+                            cause.span = ty.span;\n+                        } else if idx == hir_sig.decl.inputs.len() {\n+                            let span = hir_sig.decl.output.span();\n+                            diag.set_span(span);\n+                            cause.span = span;\n+                        }\n+                    }\n+                    TypeError::ArgCount => {\n+                        if let Some(ty) = hir_sig.decl.inputs.get(expected_sig.inputs().len()) {\n+                            diag.set_span(ty.span);\n+                            cause.span = ty.span;\n+                        }\n+                    }\n+                    TypeError::UnsafetyMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    TypeError::AbiMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    TypeError::VariadicMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    _ => {}\n+                }\n+            }\n+\n             infcx.err_ctxt().note_type_err(\n                 &mut diag,\n                 &cause,"}, {"sha": "ce832eaa5c7afe01148b000a916fd3fb0cbe4c15", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr?ref=00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "patch": "@@ -26,10 +26,10 @@ LL | pub fn bad_everything(input: String) -> String {\n               found signature `fn(std::string::String) -> std::string::String`\n \n error: attribute proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro-attribute.rs:28:1\n+  --> $DIR/signature-proc-macro-attribute.rs:28:52\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |                                                    ^^^^^^ incorrect number of function parameters\n    |\n    = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`"}, {"sha": "03c6abad17d918c5cb145189e905c4642444da38", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr?ref=00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "patch": "@@ -1,35 +1,35 @@\n error: derive proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro-derive.rs:10:1\n+  --> $DIR/signature-proc-macro-derive.rs:10:25\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n+   |                         ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n error: derive proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro-derive.rs:16:1\n+  --> $DIR/signature-proc-macro-derive.rs:16:42\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n+   |                                          ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n error: derive proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro-derive.rs:22:1\n+  --> $DIR/signature-proc-macro-derive.rs:22:30\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n+   |                              ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(std::string::String) -> std::string::String`\n \n error: derive proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro-derive.rs:28:1\n+  --> $DIR/signature-proc-macro-derive.rs:28:36\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |                                    ^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`"}, {"sha": "dd2cb0570daa28d341d04288dbe73e14b8b87695", "filename": "tests/ui/proc-macro/signature-proc-macro.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr?ref=00dc3b24b7cf3db69ce4b3648e1fb9d1cd539c67", "patch": "@@ -1,35 +1,35 @@\n error: function-like proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro.rs:10:1\n+  --> $DIR/signature-proc-macro.rs:10:25\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n+   |                         ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n error: function-like proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro.rs:16:1\n+  --> $DIR/signature-proc-macro.rs:16:42\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n+   |                                          ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n error: function-like proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro.rs:22:1\n+  --> $DIR/signature-proc-macro.rs:22:30\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n+   |                              ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(std::string::String) -> std::string::String`\n \n error: function-like proc macro has incorrect signature\n-  --> $DIR/signature-proc-macro.rs:28:1\n+  --> $DIR/signature-proc-macro.rs:28:36\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |                                    ^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n               found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`"}]}