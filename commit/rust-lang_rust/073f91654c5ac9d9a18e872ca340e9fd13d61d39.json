{"sha": "073f91654c5ac9d9a18e872ca340e9fd13d61d39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3M2Y5MTY1NGM1YWM5ZDlhMThlODcyY2EzNDBlOWZkMTNkNjFkMzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T13:18:12Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T13:18:12Z"}, "message": "don't force allocate for most Unsize casts\n\nonly Arc<T> -> Arc<Trait> unsize casts are left", "tree": {"sha": "fc41283b04e9a0eed32fcf9c552e58f9e9371030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc41283b04e9a0eed32fcf9c552e58f9e9371030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073f91654c5ac9d9a18e872ca340e9fd13d61d39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYChWUAAoJEFbW7qD8Z6xGes4P/j+lmB8YKTSCbkOrszPVyMeC\nyW8Os41cUkmkq4oYcmpG56hQgO+JrH3TBDVcNDoc2nAuH719lsOPe89v41gn8oXX\nFr3OfoIwwnXl6F/dS8IZzyah0MjWTJOu9/s3cVg109Wfg0n1QpyQ0jAYDqPPog9R\nxtEGeo5ZbX5xNP6GWN6U3uKgKYwHVmFJCg12VWmWl0Y4lc5yBereXviiAJ9DDiDu\nhY7S8B3Uy77dzdxfWU0y/5Iv+xZWVl/N7AQla3ki8LodEDVF9JKXZCArD/SN7JYT\njwNx3AdN++qeue9JBcAByAmy6pq5zKjyJ4jJY7Ukj/pcua5ZYr2r5U49SzqugbbR\nhwJ5J/866A3GMaql/KPXTaXPgiwdi8S7N7rKn4qSByt6dxTsBRoLWPU3TvxSg7S1\ndrx6hB/g4OQfwVRq2Q+t7Vw5S9xr10RsSr7BZUkJtwc/zBWxmeVOVSA46czzZbo9\neLAzeB++QDjYGjd/3pKVly4bmPJX6vJ42fn6ITks3yy5suLbn6o/ux8rklqZLWCu\n+UxaexYmYXWtzQbr21HeTdC5oCKkmpPzkQjAo/ecVEcOYInGktSn5Oi1eaYYYdOr\nVIkXQuRcbg/Xdl5JIt6ZLDfPwBN+K9FjkXxvdbt/kh8jLy9D0zNdFaaOr4kKBkWU\nmn5CNBbY1GWQdCioCIa1\n=N76e\n-----END PGP SIGNATURE-----", "payload": "tree fc41283b04e9a0eed32fcf9c552e58f9e9371030\nparent 9af5a0a420009d9b79709b6fbccdf2288a5517fb\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477055892 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477055892 +0200\n\ndon't force allocate for most Unsize casts\n\nonly Arc<T> -> Arc<Trait> unsize casts are left"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073f91654c5ac9d9a18e872ca340e9fd13d61d39", "html_url": "https://github.com/rust-lang/rust/commit/073f91654c5ac9d9a18e872ca340e9fd13d61d39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073f91654c5ac9d9a18e872ca340e9fd13d61d39/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af5a0a420009d9b79709b6fbccdf2288a5517fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af5a0a420009d9b79709b6fbccdf2288a5517fb", "html_url": "https://github.com/rust-lang/rust/commit/9af5a0a420009d9b79709b6fbccdf2288a5517fb"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "c7e5e12794faa52dffd80af211a8e6f807121b40", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/073f91654c5ac9d9a18e872ca340e9fd13d61d39/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073f91654c5ac9d9a18e872ca340e9fd13d61d39/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=073f91654c5ac9d9a18e872ca340e9fd13d61d39", "patch": "@@ -656,8 +656,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 use rustc::mir::repr::CastKind::*;\n                 match kind {\n                     Unsize => {\n-                        // FIXME(solson)\n-                        let dest = self.force_allocation(dest)?.to_ptr();\n                         let src = self.eval_operand(operand)?;\n                         let src_ty = self.operand_ty(operand);\n                         self.unsize_into(src, src_ty, dest, dest_ty)?;\n@@ -1484,7 +1482,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self,\n         src: Value,\n         src_ty: Ty<'tcx>,\n-        dest: Pointer,\n+        dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n         match (&src_ty.sty, &dest_ty.sty) {\n@@ -1498,33 +1496,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                     (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n                         let ptr = src.read_ptr(&self.memory)?;\n-                        self.memory.write_ptr(dest, ptr)?;\n-                        let ptr_size = self.memory.pointer_size() as isize;\n-                        let dest_extra = dest.offset(ptr_size);\n-                        self.memory.write_usize(dest_extra, length as u64)?;\n+                        let len = self.usize_primval(length as u64);\n+                        let ptr = PrimVal::from_ptr(ptr);\n+                        self.write_value(Value::ByValPair(ptr, len), dest, dest_ty)?;\n                     }\n                     (&ty::TyTrait(_), &ty::TyTrait(_)) => {\n                         // For now, upcasts are limited to changes in marker\n                         // traits, and hence never actually require an actual\n                         // change to the vtable.\n-                        self.write_value_to_ptr(src, dest, dest_ty)?;\n+                        self.write_value(src, dest, dest_ty)?;\n                     },\n                     (_, &ty::TyTrait(ref data)) => {\n                         let trait_ref = data.principal.with_self_ty(self.tcx, src_pointee_ty);\n                         let trait_ref = self.tcx.erase_regions(&trait_ref);\n                         let vtable = self.get_vtable(trait_ref)?;\n                         let ptr = src.read_ptr(&self.memory)?;\n-\n-                        self.memory.write_ptr(dest, ptr)?;\n-                        let ptr_size = self.memory.pointer_size() as isize;\n-                        let dest_extra = dest.offset(ptr_size);\n-                        self.memory.write_ptr(dest_extra, vtable)?;\n+                        let ptr = PrimVal::from_ptr(ptr);\n+                        let extra = PrimVal::from_ptr(vtable);\n+                        self.write_value(Value::ByValPair(ptr, extra), dest, dest_ty)?;\n                     },\n \n                     _ => bug!(\"invalid unsizing {:?} -> {:?}\", src_ty, dest_ty),\n                 }\n             }\n             (&ty::TyAdt(def_a, substs_a), &ty::TyAdt(def_b, substs_b)) => {\n+                // FIXME(solson)\n+                let dest = self.force_allocation(dest)?.to_ptr();\n                 // unsizing of generic struct with pointer fields\n                 // Example: `Arc<T>` -> `Arc<Trait>`\n                 // here we need to increase the size of every &T thin ptr field to a fat ptr\n@@ -1555,7 +1552,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     if src_fty == dst_fty {\n                         self.copy(src_f_ptr, dst_f_ptr, src_fty)?;\n                     } else {\n-                        self.unsize_into(Value::ByRef(src_f_ptr), src_fty, dst_f_ptr, dst_fty)?;\n+                        self.unsize_into(Value::ByRef(src_f_ptr), src_fty, Lvalue::from_ptr(dst_f_ptr), dst_fty)?;\n                     }\n                 }\n             }"}]}