{"sha": "162ed4d7da65b6949ec8256825aa749245564d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MmVkNGQ3ZGE2NWI2OTQ5ZWM4MjU2ODI1YWE3NDkyNDU1NjRkMzE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-07-02T00:20:04Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-07-02T01:23:25Z"}, "message": "Use signal handler only on supported platforms", "tree": {"sha": "f4435d54d93a9828bbde950063d0bd6f0594560c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4435d54d93a9828bbde950063d0bd6f0594560c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/162ed4d7da65b6949ec8256825aa749245564d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/162ed4d7da65b6949ec8256825aa749245564d31", "html_url": "https://github.com/rust-lang/rust/commit/162ed4d7da65b6949ec8256825aa749245564d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/162ed4d7da65b6949ec8256825aa749245564d31/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6a85a5365374886fe4b1e2f4feb1d9270ec5da", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da", "html_url": "https://github.com/rust-lang/rust/commit/ec6a85a5365374886fe4b1e2f4feb1d9270ec5da"}], "stats": {"total": 79, "additions": 42, "deletions": 37}, "files": [{"sha": "b75f1d82904517461bb6e19346baa72904d46f16", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/162ed4d7da65b6949ec8256825aa749245564d31/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/162ed4d7da65b6949ec8256825aa749245564d31/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=162ed4d7da65b6949ec8256825aa749245564d31", "patch": "@@ -1312,55 +1312,60 @@ pub fn init_env_logger(env: &str) {\n     tracing::subscriber::set_global_default(subscriber).unwrap();\n }\n \n-#[cfg(unix)]\n-extern \"C\" {\n-    fn backtrace_symbols_fd(buffer: *const *mut libc::c_void, size: libc::c_int, fd: libc::c_int);\n-}\n+#[cfg(all(unix, any(target_env = \"gnu\", target_os = \"macos\")))]\n+mod signal_handler {\n+    extern \"C\" {\n+        fn backtrace_symbols_fd(\n+            buffer: *const *mut libc::c_void,\n+            size: libc::c_int,\n+            fd: libc::c_int,\n+        );\n+    }\n \n-#[cfg(unix)]\n-extern \"C\" fn print_stack_trace(_: libc::c_int) {\n-    const MAX_FRAMES: usize = 256;\n-    static mut STACK_TRACE: [*mut libc::c_void; MAX_FRAMES] = [std::ptr::null_mut(); MAX_FRAMES];\n-    unsafe {\n-        let depth = libc::backtrace(STACK_TRACE.as_mut_ptr(), MAX_FRAMES as i32);\n-        if depth == 0 {\n-            return;\n+    extern \"C\" fn print_stack_trace(_: libc::c_int) {\n+        const MAX_FRAMES: usize = 256;\n+        static mut STACK_TRACE: [*mut libc::c_void; MAX_FRAMES] =\n+            [std::ptr::null_mut(); MAX_FRAMES];\n+        unsafe {\n+            let depth = libc::backtrace(STACK_TRACE.as_mut_ptr(), MAX_FRAMES as i32);\n+            if depth == 0 {\n+                return;\n+            }\n+            backtrace_symbols_fd(STACK_TRACE.as_ptr(), depth, 2);\n         }\n-        backtrace_symbols_fd(STACK_TRACE.as_ptr(), depth, 2);\n     }\n-}\n \n-#[cfg(unix)]\n-// When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n-// process, print a stack trace and then exit.\n-fn install_signal_handler() {\n-    unsafe {\n-        const ALT_STACK_SIZE: usize = libc::MINSIGSTKSZ + 64 * 1024;\n-        let mut alt_stack: libc::stack_t = std::mem::zeroed();\n-        alt_stack.ss_sp =\n-            std::alloc::alloc(std::alloc::Layout::from_size_align(ALT_STACK_SIZE, 1).unwrap())\n-                as *mut libc::c_void;\n-        alt_stack.ss_size = ALT_STACK_SIZE;\n-        libc::sigaltstack(&mut alt_stack, std::ptr::null_mut());\n-\n-        let mut sa: libc::sigaction = std::mem::zeroed();\n-        sa.sa_sigaction = print_stack_trace as libc::sighandler_t;\n-        sa.sa_flags = libc::SA_NODEFER | libc::SA_RESETHAND | libc::SA_ONSTACK;\n-        libc::sigemptyset(&mut sa.sa_mask);\n-        libc::sigaction(libc::SIGSEGV, &sa, std::ptr::null_mut());\n+    // When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n+    // process, print a stack trace and then exit.\n+    pub(super) fn install() {\n+        unsafe {\n+            const ALT_STACK_SIZE: usize = libc::MINSIGSTKSZ + 64 * 1024;\n+            let mut alt_stack: libc::stack_t = std::mem::zeroed();\n+            alt_stack.ss_sp =\n+                std::alloc::alloc(std::alloc::Layout::from_size_align(ALT_STACK_SIZE, 1).unwrap())\n+                    as *mut libc::c_void;\n+            alt_stack.ss_size = ALT_STACK_SIZE;\n+            libc::sigaltstack(&mut alt_stack, std::ptr::null_mut());\n+\n+            let mut sa: libc::sigaction = std::mem::zeroed();\n+            sa.sa_sigaction = print_stack_trace as libc::sighandler_t;\n+            sa.sa_flags = libc::SA_NODEFER | libc::SA_RESETHAND | libc::SA_ONSTACK;\n+            libc::sigemptyset(&mut sa.sa_mask);\n+            libc::sigaction(libc::SIGSEGV, &sa, std::ptr::null_mut());\n+        }\n     }\n }\n \n-#[cfg(not(unix))]\n-// When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n-// process, print a stack trace and then exit.\n-fn install_signal_handler() {}\n+#[cfg(not(all(unix, any(target_env = \"gnu\", target_os = \"macos\"))))]\n+mod signal_handler {\n+    pub(super) fn install() {}\n+}\n \n pub fn main() -> ! {\n     let start_time = Instant::now();\n     let start_rss = get_resident_set_size();\n     init_rustc_env_logger();\n-    install_signal_handler();\n+    signal_handler::install();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();\n     let exit_code = catch_with_exit_code(|| {"}]}