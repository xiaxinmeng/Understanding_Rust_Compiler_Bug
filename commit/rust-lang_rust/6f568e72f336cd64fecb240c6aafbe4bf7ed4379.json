{"sha": "6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNTY4ZTcyZjMzNmNkNjRmZWNiMjQwYzZhYWZiZTRiZjdlZDQzNzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-28T21:54:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-28T21:54:10Z"}, "message": "miri engine: turn some debug_assert into assert", "tree": {"sha": "ceb420ec9dc5a4a317c1d1091496105a3d41d8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb420ec9dc5a4a317c1d1091496105a3d41d8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "html_url": "https://github.com/rust-lang/rust/commit/6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af", "html_url": "https://github.com/rust-lang/rust/commit/7497d93ef17d2b87fa8efb5c5de33f0bdc4155af"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "78e7db44b8745dd1ae86bafe49d07632c46a0f59", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "patch": "@@ -202,7 +202,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Char => {\n                 // `u8` to `char` cast\n-                debug_assert_eq!(v as u8 as u128, v);\n+                assert_eq!(v as u8 as u128, v);\n                 Ok(Scalar::from_uint(v, Size::from_bytes(4)))\n             }\n "}, {"sha": "673afc6c06d2581f8afa159da3e14290096141c2", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "patch": "@@ -195,7 +195,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> Pointer<M::PointerTag> {\n         let id = self.tcx.alloc_map.lock().reserve();\n-        debug_assert_ne!(\n+        assert_ne!(\n             Some(kind),\n             M::STATIC_KIND.map(MemoryKind::Machine),\n             \"dynamically allocating static memory\""}, {"sha": "3b074e7b5a270e68bd9816c24d36c303160bd7d2", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "patch": "@@ -234,7 +234,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             BitXor => (Scalar::from_uint(l ^ r, size), left_layout.ty),\n \n             Add | Sub | Mul | Rem | Div => {\n-                debug_assert!(!left_layout.abi.is_signed());\n+                assert!(!left_layout.abi.is_signed());\n                 let op: fn(u128, u128) -> (u128, bool) = match bin_op {\n                     Add => u128::overflowing_add,\n                     Sub => u128::overflowing_sub,"}, {"sha": "8215b4c5aa406cb7bd62fc9f0e68ff55c531b97c", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "patch": "@@ -1130,12 +1130,10 @@ where\n         let layout = self.layout_of(ty)?;\n \n         // More sanity checks\n-        if cfg!(debug_assertions) {\n-            let (size, align) = self.read_size_and_align_from_vtable(vtable)?;\n-            assert_eq!(size, layout.size);\n-            // only ABI alignment is preserved\n-            assert_eq!(align, layout.align.abi);\n-        }\n+        let (size, align) = self.read_size_and_align_from_vtable(vtable)?;\n+        assert_eq!(size, layout.size);\n+        // only ABI alignment is preserved\n+        assert_eq!(align, layout.align.abi);\n \n         let mplace = MPlaceTy { mplace: MemPlace { meta: MemPlaceMeta::None, ..*mplace }, layout };\n         Ok((instance, mplace))"}, {"sha": "f298a6677d6dcada8beb1a87844ac8c0497b98fd", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "patch": "@@ -287,7 +287,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.eval_terminator(terminator)?;\n         if !self.stack.is_empty() {\n             // This should change *something*\n-            debug_assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n+            assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n             if let Some(block) = self.frame().block {\n                 info!(\"// executing {:?}\", block);\n             }"}, {"sha": "28922f2c7532901f4f0ee1551a005a21184980f0", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "patch": "@@ -172,7 +172,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         let caller_arg = caller_arg.next().ok_or_else(|| err_unsup!(FunctionArgCountMismatch))?;\n         if rust_abi {\n-            debug_assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n+            assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n         }\n         // Now, check\n         if !Self::check_argument_compat(rust_abi, caller_arg.layout, callee_arg.layout) {"}, {"sha": "77c911a51655716033b290cb4206142d2982ad17", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f568e72f336cd64fecb240c6aafbe4bf7ed4379/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=6f568e72f336cd64fecb240c6aafbe4bf7ed4379", "patch": "@@ -142,16 +142,16 @@ fn wrapping_range_contains(r: &RangeInclusive<u128>, test: u128) -> bool {\n // \"expected something <in the given range>\" makes sense.\n fn wrapping_range_format(r: &RangeInclusive<u128>, max_hi: u128) -> String {\n     let (lo, hi) = r.clone().into_inner();\n-    debug_assert!(hi <= max_hi);\n+    assert!(hi <= max_hi);\n     if lo > hi {\n         format!(\"less or equal to {}, or greater or equal to {}\", hi, lo)\n     } else if lo == hi {\n         format!(\"equal to {}\", lo)\n     } else if lo == 0 {\n-        debug_assert!(hi < max_hi, \"should not be printing if the range covers everything\");\n+        assert!(hi < max_hi, \"should not be printing if the range covers everything\");\n         format!(\"less or equal to {}\", hi)\n     } else if hi == max_hi {\n-        debug_assert!(lo > 0, \"should not be printing if the range covers everything\");\n+        assert!(lo > 0, \"should not be printing if the range covers everything\");\n         format!(\"greater or equal to {}\", lo)\n     } else {\n         format!(\"in the range {:?}\", r)"}]}