{"sha": "87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWYxNmM5ZGM3YjRlYmI0NmMxZGIzMzYzZTFhMDA1ODZhODE5ZDg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-24T01:24:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-26T02:49:02Z"}, "message": "Introduce `EmitObj`.\n\nCurrently, there are three fields in `ModuleConfig` that dictate\nhow object files are emitted: `emit_obj`, `obj_is_bitcode`, and\n`embed_bitcode`.\n\nSome of the combinations of these fields are nonsensical, in particular\nhaving both `obj_is_bitcode` and `embed_bitcode` true at the same time.\n\nAlso, currently:\n- we needlessly emit and then delete a bytecode file if `obj_is_bitcode`\n  is true but `emit_obj` is false;\n- we needlessly embed bitcode in the LLVM module if `embed_bitcode` is\n  true and `emit_obj` is false.\n\nThis commit combines the three fields into one, with a new type\n`EmitObj` (and the auxiliary `BitcodeSection`) which can encode five\ndifferent possibilities.\n\nIn the old code, `set_flags` would set `obj_is_bitcode` and\n`embed_bitcode` on all three of the configs (`modules`, `allocator`,\n`metadata`) if the relevant other conditions were met, even if no object\ncode needed to be emitted for one or more of them. Whereas\n`start_async_codegen` would set `emit_obj`, but only for those configs\nthat need it.\n\nIn the new code, `start_async_codegen` does all the work of setting\n`emit_obj`, and it only does that for the configs that need it.\n`set_flags` no longer sets anything related to object file emission.", "tree": {"sha": "e875b1c9e50b80e71c7def992292e79599018b80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e875b1c9e50b80e71c7def992292e79599018b80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "html_url": "https://github.com/rust-lang/rust/commit/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d1db790fb3b2892bbe644c2d7ce1265352b0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d1db790fb3b2892bbe644c2d7ce1265352b0fd", "html_url": "https://github.com/rust-lang/rust/commit/e1d1db790fb3b2892bbe644c2d7ce1265352b0fd"}], "stats": {"total": 113, "additions": 64, "deletions": 49}, "files": [{"sha": "a864d81f2daae195ed42e931374b0bb48c18ac15", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "patch": "@@ -16,7 +16,9 @@ use crate::ModuleLlvm;\n use log::debug;\n use rustc::bug;\n use rustc::ty::TyCtxt;\n-use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, EmbedBitcode, ModuleConfig};\n+use rustc_codegen_ssa::back::write::{\n+    run_assembler, BitcodeSection, CodegenContext, EmitObj, ModuleConfig,\n+};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen, RLIB_BYTECODE_EXTENSION};\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -651,7 +653,7 @@ pub(crate) unsafe fn codegen(\n             let thin = ThinBuffer::new(llmod);\n             let data = thin.data();\n \n-            if config.emit_bc || config.obj_is_bitcode {\n+            if config.emit_bc || config.emit_obj == EmitObj::Bitcode {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_emit_bitcode\",\n                     &module.name[..],\n@@ -662,7 +664,7 @@ pub(crate) unsafe fn codegen(\n                 }\n             }\n \n-            if config.embed_bitcode == EmbedBitcode::Full {\n+            if config.emit_obj == EmitObj::ObjectCode(BitcodeSection::Full) {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_embed_bitcode\",\n                     &module.name[..],\n@@ -682,7 +684,7 @@ pub(crate) unsafe fn codegen(\n                     diag_handler.err(&msg);\n                 }\n             }\n-        } else if config.embed_bitcode == EmbedBitcode::Marker {\n+        } else if config.emit_obj == EmitObj::ObjectCode(BitcodeSection::Marker) {\n             embed_bitcode(cgcx, llcx, llmod, None);\n         }\n \n@@ -732,9 +734,9 @@ pub(crate) unsafe fn codegen(\n             })?;\n         }\n \n-        let config_emit_normal_obj = config.emit_obj && !config.obj_is_bitcode;\n+        let config_emit_object_code = matches!(config.emit_obj, EmitObj::ObjectCode(_));\n \n-        if config.emit_asm || (config_emit_normal_obj && config.no_integrated_as) {\n+        if config.emit_asm || (config_emit_object_code && config.no_integrated_as) {\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n@@ -743,13 +745,13 @@ pub(crate) unsafe fn codegen(\n             // We can't use the same module for asm and binary output, because that triggers\n             // various errors like invalid IR or broken binaries, so we might have to clone the\n             // module to produce the asm output\n-            let llmod = if config.emit_obj { llvm::LLVMCloneModule(llmod) } else { llmod };\n+            let llmod = if config_emit_object_code { llvm::LLVMCloneModule(llmod) } else { llmod };\n             with_codegen(tm, llmod, config.no_builtins, |cpm| {\n                 write_output_file(diag_handler, tm, cpm, llmod, &path, llvm::FileType::AssemblyFile)\n             })?;\n         }\n \n-        if config_emit_normal_obj {\n+        if config_emit_object_code {\n             if !config.no_integrated_as {\n                 let _timer = cgcx\n                     .prof\n@@ -775,14 +777,10 @@ pub(crate) unsafe fn codegen(\n                     drop(fs::remove_file(&assembly));\n                 }\n             }\n-        }\n-\n-        if config.obj_is_bitcode {\n-            if config.emit_obj {\n-                debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n-                if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n-                    diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n-                }\n+        } else if config.emit_obj == EmitObj::Bitcode {\n+            debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n+            if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n+                diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n             }\n \n             if !config.emit_bc {\n@@ -796,7 +794,7 @@ pub(crate) unsafe fn codegen(\n         drop(handlers);\n     }\n     Ok(module.into_compiled_module(\n-        config.emit_obj,\n+        config.emit_obj != EmitObj::None,\n         config.emit_bc,\n         config.emit_bc_compressed,\n         &cgcx.output_filenames,"}, {"sha": "e9b3bf026b2ba5499977e91bbc8ddc1c99372129", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 49, "deletions": 32, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "patch": "@@ -51,11 +51,31 @@ use std::thread;\n \n const PRE_LTO_BC_EXT: &str = \"pre-lto.bc\";\n \n-/// The kind of bitcode to embed in object files.\n-#[derive(PartialEq)]\n-pub enum EmbedBitcode {\n+/// What kind of object file to emit.\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum EmitObj {\n+    // No object file.\n     None,\n+\n+    // Just uncompressed llvm bitcode. Provides easy compatibility with\n+    // emscripten's ecc compiler, when used as the linker.\n+    Bitcode,\n+\n+    // Object code, possibly augmented with a bitcode section.\n+    ObjectCode(BitcodeSection),\n+}\n+\n+/// What kind of llvm bitcode section to embed in an object file.\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum BitcodeSection {\n+    // No bitcode section.\n+    None,\n+\n+    // An empty bitcode section (to placate tools such as the iOS linker that\n+    // require this section even if they don't use it).\n     Marker,\n+\n+    // A full, uncompressed bitcode section.\n     Full,\n }\n \n@@ -84,7 +104,7 @@ pub struct ModuleConfig {\n     pub emit_bc_compressed: bool,\n     pub emit_ir: bool,\n     pub emit_asm: bool,\n-    pub emit_obj: bool,\n+    pub emit_obj: EmitObj,\n     // Miscellaneous flags.  These are mostly copied from command-line\n     // options.\n     pub verify_llvm_ir: bool,\n@@ -96,12 +116,7 @@ pub struct ModuleConfig {\n     pub merge_functions: bool,\n     pub inline_threshold: Option<usize>,\n     pub new_llvm_pass_manager: Option<bool>,\n-    // Instead of creating an object file by doing LLVM codegen, just\n-    // make the object file bitcode. Provides easy compatibility with\n-    // emscripten's ecc compiler, when used as the linker.\n-    pub obj_is_bitcode: bool,\n     pub no_integrated_as: bool,\n-    pub embed_bitcode: EmbedBitcode,\n }\n \n impl ModuleConfig {\n@@ -124,9 +139,7 @@ impl ModuleConfig {\n             emit_bc_compressed: false,\n             emit_ir: false,\n             emit_asm: false,\n-            emit_obj: false,\n-            obj_is_bitcode: false,\n-            embed_bitcode: EmbedBitcode::None,\n+            emit_obj: EmitObj::None,\n             no_integrated_as: false,\n \n             verify_llvm_ir: false,\n@@ -147,16 +160,6 @@ impl ModuleConfig {\n         self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n         self.new_llvm_pass_manager = sess.opts.debugging_opts.new_llvm_pass_manager;\n-        self.obj_is_bitcode =\n-            sess.target.target.options.obj_is_bitcode || sess.opts.cg.linker_plugin_lto.enabled();\n-        self.embed_bitcode = if sess.opts.debugging_opts.embed_bitcode {\n-            match sess.opts.optimize {\n-                config::OptLevel::No | config::OptLevel::Less => EmbedBitcode::Marker,\n-                _ => EmbedBitcode::Full,\n-            }\n-        } else {\n-            EmbedBitcode::None\n-        };\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n@@ -193,9 +196,9 @@ impl ModuleConfig {\n \n     pub fn bitcode_needed(&self) -> bool {\n         self.emit_bc\n-            || self.obj_is_bitcode\n             || self.emit_bc_compressed\n-            || self.embed_bitcode == EmbedBitcode::Full\n+            || self.emit_obj == EmitObj::Bitcode\n+            || self.emit_obj == EmitObj::ObjectCode(BitcodeSection::Full)\n     }\n }\n \n@@ -396,6 +399,20 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         allocator_config.emit_bc_compressed = true;\n     }\n \n+    let emit_obj =\n+        if sess.target.target.options.obj_is_bitcode || sess.opts.cg.linker_plugin_lto.enabled() {\n+            EmitObj::Bitcode\n+        } else if sess.opts.debugging_opts.embed_bitcode {\n+            match sess.opts.optimize {\n+                config::OptLevel::No | config::OptLevel::Less => {\n+                    EmitObj::ObjectCode(BitcodeSection::Marker)\n+                }\n+                _ => EmitObj::ObjectCode(BitcodeSection::Full),\n+            }\n+        } else {\n+            EmitObj::ObjectCode(BitcodeSection::None)\n+        };\n+\n     modules_config.emit_pre_lto_bc = need_pre_lto_bitcode_for_incr_comp(sess);\n \n     modules_config.no_integrated_as =\n@@ -415,20 +432,20 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n                 // could be invoked specially with output_type_assembly, so\n                 // in this case we still want the metadata object file.\n                 if !sess.opts.output_types.contains_key(&OutputType::Assembly) {\n-                    metadata_config.emit_obj = true;\n-                    allocator_config.emit_obj = true;\n+                    metadata_config.emit_obj = emit_obj;\n+                    allocator_config.emit_obj = emit_obj;\n                 }\n             }\n             OutputType::Object => {\n-                modules_config.emit_obj = true;\n+                modules_config.emit_obj = emit_obj;\n             }\n             OutputType::Metadata => {\n-                metadata_config.emit_obj = true;\n+                metadata_config.emit_obj = emit_obj;\n             }\n             OutputType::Exe => {\n-                modules_config.emit_obj = true;\n-                metadata_config.emit_obj = true;\n-                allocator_config.emit_obj = true;\n+                modules_config.emit_obj = emit_obj;\n+                metadata_config.emit_obj = emit_obj;\n+                allocator_config.emit_obj = emit_obj;\n             }\n             OutputType::Mir => {}\n             OutputType::DepInfo => {}\n@@ -879,7 +896,7 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n         }\n     }\n \n-    assert_eq!(object.is_some(), module_config.emit_obj);\n+    assert_eq!(object.is_some(), module_config.emit_obj != EmitObj::None);\n     assert_eq!(bytecode.is_some(), module_config.emit_bc);\n     assert_eq!(bytecode_compressed.is_some(), module_config.emit_bc_compressed);\n "}]}