{"sha": "ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMmYzZmE0MWFjNWFlODQyNWI5NTlmOTU1YmI3NDMzYjdjNTdhZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-28T16:25:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-28T16:25:35Z"}, "message": "Auto merge of #68533 - tmiasko:compiletest, r=nikomatsakis\n\ncompiletest: Unit tests for `EarlyProps` (+ small cleanup)\n\n* Parse `EarlyProps` from a reader\n* Add unit tests for `EarlyProps`\n* Remove unused `llvm-cxxflags` option\n* Remove unnecessary memory allocations in `iter_header`\n* Update mode list displayed in `--help`", "tree": {"sha": "4f273098c9783e2e3d9b92592131074cb78eb518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f273098c9783e2e3d9b92592131074cb78eb518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "html_url": "https://github.com/rust-lang/rust/commit/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b181835a6bacfa449f55d46764a10e25d1c471dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b181835a6bacfa449f55d46764a10e25d1c471dc", "html_url": "https://github.com/rust-lang/rust/commit/b181835a6bacfa449f55d46764a10e25d1c471dc"}, {"sha": "3c02afe965a2dcfecd42e27bb225f9d2af68e838", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c02afe965a2dcfecd42e27bb225f9d2af68e838", "html_url": "https://github.com/rust-lang/rust/commit/3c02afe965a2dcfecd42e27bb225f9d2af68e838"}], "stats": {"total": 405, "additions": 280, "deletions": 125}, "files": [{"sha": "6adf9ddaf3438e15b5cab0d6fc3b41e9145b8d6c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "patch": "@@ -1149,17 +1149,14 @@ impl Step for Compiletest {\n             // requires that a C++ compiler was configured which isn't always the case.\n             if !builder.config.dry_run && suite == \"run-make-fulldeps\" {\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n-                let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n                 cmd.arg(\"--cc\")\n                     .arg(builder.cc(target))\n                     .arg(\"--cxx\")\n                     .arg(builder.cxx(target).unwrap())\n                     .arg(\"--cflags\")\n                     .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"))\n                     .arg(\"--llvm-components\")\n-                    .arg(llvm_components.trim())\n-                    .arg(\"--llvm-cxxflags\")\n-                    .arg(llvm_cxxflags.trim());\n+                    .arg(llvm_components.trim());\n                 if let Some(ar) = builder.ar(target) {\n                     cmd.arg(\"--ar\").arg(ar);\n                 }\n@@ -1197,8 +1194,6 @@ impl Step for Compiletest {\n                 .arg(\"--cflags\")\n                 .arg(\"\")\n                 .arg(\"--llvm-components\")\n-                .arg(\"\")\n-                .arg(\"--llvm-cxxflags\")\n                 .arg(\"\");\n         }\n "}, {"sha": "64c0298c1fa4e4dae4833e0f330fbaa48d963298", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "patch": "@@ -319,7 +319,6 @@ pub struct Config {\n     pub ar: String,\n     pub linker: Option<String>,\n     pub llvm_components: String,\n-    pub llvm_cxxflags: String,\n \n     /// Path to a NodeJS executable. Used for JS doctests, emscripten and WASM tests\n     pub nodejs: Option<String>,"}, {"sha": "817705c0bd6bf855d561591dc3a0eb03eb43fcbb", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 123, "deletions": 113, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "patch": "@@ -24,6 +24,7 @@ enum ParsedNameDirective {\n \n /// Properties which must be known very early, before actually running\n /// the test.\n+#[derive(Default)]\n pub struct EarlyProps {\n     pub ignore: bool,\n     pub should_fail: bool,\n@@ -34,18 +35,16 @@ pub struct EarlyProps {\n \n impl EarlyProps {\n     pub fn from_file(config: &Config, testfile: &Path) -> Self {\n-        let mut props = EarlyProps {\n-            ignore: false,\n-            should_fail: false,\n-            aux: Vec::new(),\n-            aux_crate: Vec::new(),\n-            revisions: vec![],\n-        };\n+        let file = File::open(testfile).unwrap();\n+        Self::from_reader(config, testfile, file)\n+    }\n \n+    pub fn from_reader<R: Read>(config: &Config, testfile: &Path, rdr: R) -> Self {\n+        let mut props = EarlyProps::default();\n         let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n         let rustc_has_sanitizer_support = env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some();\n \n-        iter_header(testfile, None, &mut |ln| {\n+        iter_header(testfile, None, rdr, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n             // and does not matches the current platform, skip the test\n             if !props.ignore {\n@@ -392,138 +391,143 @@ impl TestProps {\n     /// `//[foo]`), then the property is ignored unless `cfg` is\n     /// `Some(\"foo\")`.\n     fn load_from(&mut self, testfile: &Path, cfg: Option<&str>, config: &Config) {\n-        iter_header(testfile, cfg, &mut |ln| {\n-            if let Some(ep) = config.parse_error_pattern(ln) {\n-                self.error_patterns.push(ep);\n-            }\n+        if !testfile.is_dir() {\n+            let file = File::open(testfile).unwrap();\n \n-            if let Some(flags) = config.parse_compile_flags(ln) {\n-                self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));\n-            }\n+            iter_header(testfile, cfg, file, &mut |ln| {\n+                if let Some(ep) = config.parse_error_pattern(ln) {\n+                    self.error_patterns.push(ep);\n+                }\n \n-            if let Some(edition) = config.parse_edition(ln) {\n-                self.compile_flags.push(format!(\"--edition={}\", edition));\n-            }\n+                if let Some(flags) = config.parse_compile_flags(ln) {\n+                    self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));\n+                }\n \n-            if let Some(r) = config.parse_revisions(ln) {\n-                self.revisions.extend(r);\n-            }\n+                if let Some(edition) = config.parse_edition(ln) {\n+                    self.compile_flags.push(format!(\"--edition={}\", edition));\n+                }\n \n-            if self.run_flags.is_none() {\n-                self.run_flags = config.parse_run_flags(ln);\n-            }\n+                if let Some(r) = config.parse_revisions(ln) {\n+                    self.revisions.extend(r);\n+                }\n \n-            if self.pp_exact.is_none() {\n-                self.pp_exact = config.parse_pp_exact(ln, testfile);\n-            }\n+                if self.run_flags.is_none() {\n+                    self.run_flags = config.parse_run_flags(ln);\n+                }\n \n-            if !self.should_ice {\n-                self.should_ice = config.parse_should_ice(ln);\n-            }\n+                if self.pp_exact.is_none() {\n+                    self.pp_exact = config.parse_pp_exact(ln, testfile);\n+                }\n \n-            if !self.build_aux_docs {\n-                self.build_aux_docs = config.parse_build_aux_docs(ln);\n-            }\n+                if !self.should_ice {\n+                    self.should_ice = config.parse_should_ice(ln);\n+                }\n \n-            if !self.force_host {\n-                self.force_host = config.parse_force_host(ln);\n-            }\n+                if !self.build_aux_docs {\n+                    self.build_aux_docs = config.parse_build_aux_docs(ln);\n+                }\n \n-            if !self.check_stdout {\n-                self.check_stdout = config.parse_check_stdout(ln);\n-            }\n+                if !self.force_host {\n+                    self.force_host = config.parse_force_host(ln);\n+                }\n \n-            if !self.check_run_results {\n-                self.check_run_results = config.parse_check_run_results(ln);\n-            }\n+                if !self.check_stdout {\n+                    self.check_stdout = config.parse_check_stdout(ln);\n+                }\n \n-            if !self.dont_check_compiler_stdout {\n-                self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n-            }\n+                if !self.check_run_results {\n+                    self.check_run_results = config.parse_check_run_results(ln);\n+                }\n \n-            if !self.dont_check_compiler_stderr {\n-                self.dont_check_compiler_stderr = config.parse_dont_check_compiler_stderr(ln);\n-            }\n+                if !self.dont_check_compiler_stdout {\n+                    self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n+                }\n \n-            if !self.no_prefer_dynamic {\n-                self.no_prefer_dynamic = config.parse_no_prefer_dynamic(ln);\n-            }\n+                if !self.dont_check_compiler_stderr {\n+                    self.dont_check_compiler_stderr = config.parse_dont_check_compiler_stderr(ln);\n+                }\n \n-            if !self.pretty_expanded {\n-                self.pretty_expanded = config.parse_pretty_expanded(ln);\n-            }\n+                if !self.no_prefer_dynamic {\n+                    self.no_prefer_dynamic = config.parse_no_prefer_dynamic(ln);\n+                }\n \n-            if let Some(m) = config.parse_pretty_mode(ln) {\n-                self.pretty_mode = m;\n-            }\n+                if !self.pretty_expanded {\n+                    self.pretty_expanded = config.parse_pretty_expanded(ln);\n+                }\n \n-            if !self.pretty_compare_only {\n-                self.pretty_compare_only = config.parse_pretty_compare_only(ln);\n-            }\n+                if let Some(m) = config.parse_pretty_mode(ln) {\n+                    self.pretty_mode = m;\n+                }\n \n-            if let Some(ab) = config.parse_aux_build(ln) {\n-                self.aux_builds.push(ab);\n-            }\n+                if !self.pretty_compare_only {\n+                    self.pretty_compare_only = config.parse_pretty_compare_only(ln);\n+                }\n \n-            if let Some(ac) = config.parse_aux_crate(ln) {\n-                self.aux_crates.push(ac);\n-            }\n+                if let Some(ab) = config.parse_aux_build(ln) {\n+                    self.aux_builds.push(ab);\n+                }\n \n-            if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n-                self.exec_env.push(ee);\n-            }\n+                if let Some(ac) = config.parse_aux_crate(ln) {\n+                    self.aux_crates.push(ac);\n+                }\n \n-            if let Some(ee) = config.parse_env(ln, \"rustc-env\") {\n-                self.rustc_env.push(ee);\n-            }\n+                if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n+                    self.exec_env.push(ee);\n+                }\n \n-            if let Some(ev) = config.parse_name_value_directive(ln, \"unset-rustc-env\") {\n-                self.unset_rustc_env.push(ev);\n-            }\n+                if let Some(ee) = config.parse_env(ln, \"rustc-env\") {\n+                    self.rustc_env.push(ee);\n+                }\n \n-            if let Some(cl) = config.parse_check_line(ln) {\n-                self.check_lines.push(cl);\n-            }\n+                if let Some(ev) = config.parse_name_value_directive(ln, \"unset-rustc-env\") {\n+                    self.unset_rustc_env.push(ev);\n+                }\n \n-            if let Some(of) = config.parse_forbid_output(ln) {\n-                self.forbid_output.push(of);\n-            }\n+                if let Some(cl) = config.parse_check_line(ln) {\n+                    self.check_lines.push(cl);\n+                }\n \n-            if !self.check_test_line_numbers_match {\n-                self.check_test_line_numbers_match = config.parse_check_test_line_numbers_match(ln);\n-            }\n+                if let Some(of) = config.parse_forbid_output(ln) {\n+                    self.forbid_output.push(of);\n+                }\n \n-            self.update_pass_mode(ln, cfg, config);\n-            self.update_fail_mode(ln, config);\n+                if !self.check_test_line_numbers_match {\n+                    self.check_test_line_numbers_match =\n+                        config.parse_check_test_line_numbers_match(ln);\n+                }\n \n-            if !self.ignore_pass {\n-                self.ignore_pass = config.parse_ignore_pass(ln);\n-            }\n+                self.update_pass_mode(ln, cfg, config);\n+                self.update_fail_mode(ln, config);\n \n-            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n-                self.normalize_stdout.push(rule);\n-            }\n-            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stderr\") {\n-                self.normalize_stderr.push(rule);\n-            }\n+                if !self.ignore_pass {\n+                    self.ignore_pass = config.parse_ignore_pass(ln);\n+                }\n \n-            if let Some(code) = config.parse_failure_status(ln) {\n-                self.failure_status = code;\n-            }\n+                if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n+                    self.normalize_stdout.push(rule);\n+                }\n+                if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stderr\") {\n+                    self.normalize_stderr.push(rule);\n+                }\n \n-            if !self.run_rustfix {\n-                self.run_rustfix = config.parse_run_rustfix(ln);\n-            }\n+                if let Some(code) = config.parse_failure_status(ln) {\n+                    self.failure_status = code;\n+                }\n \n-            if !self.rustfix_only_machine_applicable {\n-                self.rustfix_only_machine_applicable =\n-                    config.parse_rustfix_only_machine_applicable(ln);\n-            }\n+                if !self.run_rustfix {\n+                    self.run_rustfix = config.parse_run_rustfix(ln);\n+                }\n \n-            if self.assembly_output.is_none() {\n-                self.assembly_output = config.parse_assembly_output(ln);\n-            }\n-        });\n+                if !self.rustfix_only_machine_applicable {\n+                    self.rustfix_only_machine_applicable =\n+                        config.parse_rustfix_only_machine_applicable(ln);\n+                }\n+\n+                if self.assembly_output.is_none() {\n+                    self.assembly_output = config.parse_assembly_output(ln);\n+                }\n+            });\n+        }\n \n         if self.failure_status == -1 {\n             self.failure_status = match config.mode {\n@@ -617,7 +621,7 @@ impl TestProps {\n     }\n }\n \n-fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n+fn iter_header<R: Read>(testfile: &Path, cfg: Option<&str>, rdr: R, it: &mut dyn FnMut(&str)) {\n     if testfile.is_dir() {\n         return;\n     }\n@@ -628,12 +632,18 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n     // It took me like 2 days to debug why compile-flags weren\u2019t taken into account for my test :)\n     let comment_with_brace = comment.to_string() + \"[\";\n \n-    let rdr = BufReader::new(File::open(testfile).unwrap());\n-    for ln in rdr.lines() {\n+    let mut rdr = BufReader::new(rdr);\n+    let mut ln = String::new();\n+\n+    loop {\n+        ln.clear();\n+        if rdr.read_line(&mut ln).unwrap() == 0 {\n+            break;\n+        }\n+\n         // Assume that any directives will be found before the first\n         // module or function. This doesn't seem to be an optimization\n         // with a warm page cache. Maybe with a cold one.\n-        let ln = ln.unwrap();\n         let ln = ln.trim();\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n             return;"}, {"sha": "38fa778219de23e14d469bcda9ca37e4d74a4b20", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 154, "deletions": 1, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "patch": "@@ -1,4 +1,7 @@\n-use super::*;\n+use std::path::Path;\n+\n+use crate::common::{Config, Debugger};\n+use crate::header::{parse_normalization_string, EarlyProps};\n \n #[test]\n fn test_parse_normalization_string() {\n@@ -25,3 +28,153 @@ fn test_parse_normalization_string() {\n     assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n     assert_eq!(s, \" -> \\\"something ($WORD bits).\");\n }\n+\n+fn config() -> Config {\n+    let args = &[\n+        \"compiletest\",\n+        \"--mode=ui\",\n+        \"--compile-lib-path=\",\n+        \"--run-lib-path=\",\n+        \"--rustc-path=\",\n+        \"--lldb-python=\",\n+        \"--docck-python=\",\n+        \"--src-base=\",\n+        \"--build-base=\",\n+        \"--stage-id=stage2\",\n+        \"--cc=c\",\n+        \"--cxx=c++\",\n+        \"--cflags=\",\n+        \"--llvm-components=\",\n+        \"--android-cross-path=\",\n+        \"--target=x86_64-unknown-linux-gnu\",\n+    ];\n+    let args = args.iter().map(ToString::to_string).collect();\n+    crate::parse_config(args)\n+}\n+\n+fn parse_rs(config: &Config, contents: &str) -> EarlyProps {\n+    let bytes = contents.as_bytes();\n+    EarlyProps::from_reader(config, Path::new(\"a.rs\"), bytes)\n+}\n+\n+fn parse_makefile(config: &Config, contents: &str) -> EarlyProps {\n+    let bytes = contents.as_bytes();\n+    EarlyProps::from_reader(config, Path::new(\"Makefile\"), bytes)\n+}\n+\n+#[test]\n+fn should_fail() {\n+    let config = config();\n+\n+    assert!(!parse_rs(&config, \"\").should_fail);\n+    assert!(parse_rs(&config, \"// should-fail\").should_fail);\n+}\n+\n+#[test]\n+fn revisions() {\n+    let config = config();\n+\n+    assert_eq!(parse_rs(&config, \"// revisions: a b c\").revisions, vec![\"a\", \"b\", \"c\"],);\n+    assert_eq!(\n+        parse_makefile(&config, \"# revisions: hello there\").revisions,\n+        vec![\"hello\", \"there\"],\n+    );\n+}\n+\n+#[test]\n+fn aux_build() {\n+    let config = config();\n+\n+    assert_eq!(\n+        parse_rs(\n+            &config,\n+            r\"\n+        // aux-build: a.rs\n+        // aux-build: b.rs\n+        \"\n+        )\n+        .aux,\n+        vec![\"a.rs\", \"b.rs\"],\n+    );\n+}\n+\n+#[test]\n+fn no_system_llvm() {\n+    let mut config = config();\n+\n+    config.system_llvm = false;\n+    assert!(!parse_rs(&config, \"// no-system-llvm\").ignore);\n+\n+    config.system_llvm = true;\n+    assert!(parse_rs(&config, \"// no-system-llvm\").ignore);\n+}\n+\n+#[test]\n+fn ignore_target() {\n+    let mut config = config();\n+    config.target = \"x86_64-unknown-linux-gnu\".to_owned();\n+\n+    assert!(parse_rs(&config, \"// ignore-x86_64-unknown-linux-gnu\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-x86_64\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-linux\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-gnu\").ignore);\n+    assert!(parse_rs(&config, \"// ignore-64bit\").ignore);\n+\n+    assert!(!parse_rs(&config, \"// ignore-i686\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-windows\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-msvc\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-32bit\").ignore);\n+}\n+\n+#[test]\n+fn only_target() {\n+    let mut config = config();\n+    config.target = \"x86_64-pc-windows-gnu\".to_owned();\n+\n+    assert!(parse_rs(&config, \"// only-i686\").ignore);\n+    assert!(parse_rs(&config, \"// only-linux\").ignore);\n+    assert!(parse_rs(&config, \"// only-msvc\").ignore);\n+    assert!(parse_rs(&config, \"// only-32bit\").ignore);\n+\n+    assert!(!parse_rs(&config, \"// only-x86_64-pc-windows-gnu\").ignore);\n+    assert!(!parse_rs(&config, \"// only-x86_64\").ignore);\n+    assert!(!parse_rs(&config, \"// only-windows\").ignore);\n+    assert!(!parse_rs(&config, \"// only-gnu\").ignore);\n+    assert!(!parse_rs(&config, \"// only-64bit\").ignore);\n+}\n+\n+#[test]\n+fn stage() {\n+    let mut config = config();\n+    config.stage_id = \"stage1\".to_owned();\n+\n+    assert!(parse_rs(&config, \"// ignore-stage1\").ignore);\n+    assert!(!parse_rs(&config, \"// ignore-stage2\").ignore);\n+}\n+\n+#[test]\n+fn cross_compile() {\n+    let mut config = config();\n+    config.host = \"x86_64-apple-darwin\".to_owned();\n+    config.target = \"wasm32-unknown-unknown\".to_owned();\n+    assert!(parse_rs(&config, \"// ignore-cross-compile\").ignore);\n+\n+    config.target = config.host.clone();\n+    assert!(!parse_rs(&config, \"// ignore-cross-compile\").ignore);\n+}\n+\n+#[test]\n+fn debugger() {\n+    let mut config = config();\n+    config.debugger = None;\n+    assert!(!parse_rs(&config, \"// ignore-cdb\").ignore);\n+\n+    config.debugger = Some(Debugger::Cdb);\n+    assert!(parse_rs(&config, \"// ignore-cdb\").ignore);\n+\n+    config.debugger = Some(Debugger::Gdb);\n+    assert!(parse_rs(&config, \"// ignore-gdb\").ignore);\n+\n+    config.debugger = Some(Debugger::Lldb);\n+    assert!(parse_rs(&config, \"// ignore-lldb\").ignore);\n+}"}, {"sha": "a61b9403987049f8b3777d12e24acca616e33e89", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "patch": "@@ -70,7 +70,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"\",\n             \"mode\",\n             \"which sort of compile tests to run\",\n-            \"(compile-fail|run-fail|run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\",\n+            \"compile-fail | run-fail | run-pass-valgrind | pretty | debug-info | codegen | rustdoc \\\n+             codegen-units | incremental | run-make | ui | js-doc-test | mir-opt | assembly\",\n         )\n         .optopt(\n             \"\",\n@@ -115,7 +116,6 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optopt(\"\", \"ar\", \"path to an archiver\", \"PATH\")\n         .optopt(\"\", \"linker\", \"path to a linker\", \"PATH\")\n         .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n-        .reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\")\n         .optopt(\"\", \"llvm-bin-dir\", \"Path to LLVM's `bin` directory\", \"PATH\")\n         .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n         .optopt(\"\", \"remote-test-client\", \"path to the remote test client\", \"PATH\")\n@@ -239,7 +239,6 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         ar: matches.opt_str(\"ar\").unwrap_or(\"ar\".into()),\n         linker: matches.opt_str(\"linker\"),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n-        llvm_cxxflags: matches.opt_str(\"llvm-cxxflags\").unwrap(),\n         nodejs: matches.opt_str(\"nodejs\"),\n     }\n }"}, {"sha": "1c5bda252cd9462aca26e9475207d0b765323c0a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac2f3fa41ac5ae8425b959f955bb7433b7c57aea/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ac2f3fa41ac5ae8425b959f955bb7433b7c57aea", "patch": "@@ -2651,7 +2651,6 @@ impl<'test> TestCx<'test> {\n             .env(\"HOST_RPATH_DIR\", cwd.join(&self.config.compile_lib_path))\n             .env(\"TARGET_RPATH_DIR\", cwd.join(&self.config.run_lib_path))\n             .env(\"LLVM_COMPONENTS\", &self.config.llvm_components)\n-            .env(\"LLVM_CXXFLAGS\", &self.config.llvm_cxxflags)\n             // We for sure don't want these tests to run in parallel, so make\n             // sure they don't have access to these vars if we run via `make`\n             // at the top level"}]}