{"sha": "61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjcxYTIyNjg5MDNlMWI1YzI4ZmNiM2M3MTNjMjdlODRlYTNlOWI=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-09-09T21:12:14Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-09-09T21:15:54Z"}, "message": "Detect fetch_update misuse in invalid_atomic_ordering too", "tree": {"sha": "33a844a4f469e35e8cd1f5c8a7b66d3eb5da176e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33a844a4f469e35e8cd1f5c8a7b66d3eb5da176e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "html_url": "https://github.com/rust-lang/rust/commit/61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6211599ccafee5b2429bfb1bbeb48ead32a48484", "url": "https://api.github.com/repos/rust-lang/rust/commits/6211599ccafee5b2429bfb1bbeb48ead32a48484", "html_url": "https://github.com/rust-lang/rust/commit/6211599ccafee5b2429bfb1bbeb48ead32a48484"}], "stats": {"total": 194, "additions": 188, "deletions": 6}, "files": [{"sha": "ff2c281ec9d735613db090dccb63ce6f2142a6ea", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "patch": "@@ -8,7 +8,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of invalid atomic\n-    /// ordering in atomic loads/stores/exchanges and memory fences\n+    /// ordering in atomic loads/stores/exchanges/updates and\n+    /// memory fences.\n     ///\n     /// **Why is this bad?** Using an invalid atomic ordering\n     /// will cause a panic at run-time.\n@@ -32,10 +33,11 @@ declare_clippy_lint! {\n     ///\n     /// let _ = x.compare_exchange(false, false, Ordering::Relaxed, Ordering::SeqCst);\n     /// let _ = x.compare_exchange_weak(false, true, Ordering::SeqCst, Ordering::Release);\n+    /// let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |val| Some(val ^ val));\n     /// ```\n     pub INVALID_ATOMIC_ORDERING,\n     correctness,\n-    \"usage of invalid atomic ordering in atomic loads/stores/exchanges ane memory fences\"\n+    \"usage of invalid atomic ordering in atomic operations and memory fences\"\n }\n \n declare_lint_pass!(AtomicOrdering => [INVALID_ATOMIC_ORDERING]);\n@@ -142,8 +144,12 @@ fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if let ExprKind::MethodCall(ref method_path, _, args, _) = &expr.kind;\n         let method = method_path.ident.name.as_str();\n         if type_is_atomic(cx, &args[0]);\n-        if method == \"compare_exchange\" || method == \"compare_exchange_weak\";\n-        let failure_order_arg = &args[4];\n+        if method == \"compare_exchange\" || method == \"compare_exchange_weak\" || method == \"fetch_update\";\n+        let (success_order_arg, failure_order_arg) = if method == \"fetch_update\" {\n+            (&args[1], &args[2])\n+        } else {\n+            (&args[3], &args[4])\n+        };\n         if let Some(fail_ordering_def_id) = opt_ordering_defid(cx, failure_order_arg);\n         then {\n             // Helper type holding on to some checking and error reporting data. Has\n@@ -158,7 +164,7 @@ fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n             let acqrel = (\"AcqRel\", acquire.1, acquire.2);\n             let search = [relaxed, acquire, seq_cst, release, acqrel];\n \n-            let success_lint_info = opt_ordering_defid(cx, &args[3])\n+            let success_lint_info = opt_ordering_defid(cx, success_order_arg)\n                 .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n                     search\n                         .iter()"}, {"sha": "5dead1b9b69153fcf8b06a02ccf95ed8f2b91a1e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "patch": "@@ -923,7 +923,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"invalid_atomic_ordering\",\n         group: \"correctness\",\n-        desc: \"usage of invalid atomic ordering in atomic loads/stores and memory fences\",\n+        desc: \"usage of invalid atomic ordering in atomic operations and memory fences\",\n         deprecation: None,\n         module: \"atomic_ordering\",\n     },"}, {"sha": "550bdb001e4cd1270b3bc6d32fd5e53c04f28bfe", "filename": "tests/ui/atomic_ordering_fetch_update.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/tests%2Fui%2Fatomic_ordering_fetch_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/tests%2Fui%2Fatomic_ordering_fetch_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fetch_update.rs?ref=61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "patch": "@@ -0,0 +1,45 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicIsize, Ordering};\n+\n+fn main() {\n+    // `fetch_update` testing\n+    let x = AtomicIsize::new(0);\n+\n+    // Allowed ordering combos\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |old| Some(old + 1));\n+\n+    // AcqRel is always forbidden as a failure ordering\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n+\n+    // Release is always forbidden as a failure ordering\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n+\n+    // Release success order forbids failure order of Acquire or SeqCst\n+    let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n+\n+    // Relaxed success order also forbids failure order of Acquire or SeqCst\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n+\n+    // Acquire/AcqRel forbids failure order of SeqCst\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n+}"}, {"sha": "362e104a24482eff0f54d08c6b9d0f91b437b5ff", "filename": "tests/ui/atomic_ordering_fetch_update.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/tests%2Fui%2Fatomic_ordering_fetch_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61671a2268903e1b5c28fcb3c713c27e84ea3e9b/tests%2Fui%2Fatomic_ordering_fetch_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fetch_update.stderr?ref=61671a2268903e1b5c28fcb3c713c27e84ea3e9b", "patch": "@@ -0,0 +1,131 @@\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:21:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:22:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:23:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:24:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:25:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:28:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:29:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:30:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:31:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:32:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_fetch_update.rs:35:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_fetch_update.rs:36:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_fetch_update.rs:39:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_fetch_update.rs:40:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not stronger than the success ordering of `Acquire`\n+  --> $DIR/atomic_ordering_fetch_update.rs:43:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not stronger than the success ordering of `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:44:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: aborting due to 16 previous errors\n+"}]}