{"sha": "93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYzYzNjIxMWNhNGIwYjc3NDVkNmQ0Y2E4MjU4N2EyN2RkYzU5YTg=", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-05-14T10:07:06Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-05-17T07:31:33Z"}, "message": "Provide option for specifying the profiler runtime\n\nCurrently, if `-Zinstrument-coverage` is enabled, the target is linked\nagainst the `library/profiler_builtins` crate (which pulls in LLVM's\ncompiler-rt runtime).\n\nThis option enables backends to specify an alternative runtime crate for\nhandling injected instrumentation calls.", "tree": {"sha": "c5718ebf7da48b19cc3cfd387deb5925efbba2de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5718ebf7da48b19cc3cfd387deb5925efbba2de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1ycQ10Ou2Tzw/6ueaKZbzZ0on/4FAmCiG9UACgkQaKZbzZ0o\nn/4GRg/+KJI9RvOVYEap+ODfA/TZlCwpWUzkHv5aGzZn3EhNn4GqSKxQNQjHZXfP\nMzFL73DcqYveiA/uSIPQUH/82kKVX9EvoiNF40yENKCS+dWpmeXaD7+L7W8v3el/\nq99s7NgaRreDzb77QUegFA+RgHy3UYL04WW328XIAVHoZnhmeYHe6hk3TqwIQwaC\nc2ZaKVmnBytkDqkNK9tLQURzyAcuunAjMM9ghAtXPepsJs9F/841jK45JNrEIZXe\nef/Dr+WAMsKgRR+Gffil0ZOzifnnoajKWNNTEHMn6sg673d3upC8eYwGHDaAA/7g\n1Qu9GTry88/ktCzk2k+ICHBoU8qgVhgA+Lvn82aPFTNyYPT+6BjM44OmW/a9UmDL\nMsVudws0yi127Qsg/RwfwcBz+iRdLiiIARMYkyLEW3BiwFTxYr7+sAlPjvECz4uA\n/nVnLM37gAXi7oQVAvFDb5wTBxeicFRMSKIZzbcZ3+CcRF/mxM9JkNRSLfFS5N/v\nFhBfs0uGCN99QnjlJCUwZcsxuFNNekBlOlFn3Ee0uxvFkU3YzYPCQLExhLsN+Yds\nWmN7h3d/X34DctlUXWUkgyFEB/+jPORX0xYRpatpO3XBoQx7r4llJDKouDnwzqhV\nqgGdzVFoUtx7dk+4yyIz4+74Ny8/4O8mgTU5m2jIHy9i+xQUzS4=\n=L8hM\n-----END PGP SIGNATURE-----", "payload": "tree c5718ebf7da48b19cc3cfd387deb5925efbba2de\nparent 69b352ef7749825abde2d8f8e31c05f681e61a10\nauthor Alan Egerton <eggyal@gmail.com> 1620986826 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1621236693 +0100\n\nProvide option for specifying the profiler runtime\n\nCurrently, if `-Zinstrument-coverage` is enabled, the target is linked\nagainst the `library/profiler_builtins` crate (which pulls in LLVM's\ncompiler-rt runtime).\n\nThis option enables backends to specify an alternative runtime crate for\nhandling injected instrumentation calls.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "html_url": "https://github.com/rust-lang/rust/commit/93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69b352ef7749825abde2d8f8e31c05f681e61a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/69b352ef7749825abde2d8f8e31c05f681e61a10", "html_url": "https://github.com/rust-lang/rust/commit/69b352ef7749825abde2d8f8e31c05f681e61a10"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "17496c35a4ba85bcfabd267e0dd16db6746af6be", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "patch": "@@ -713,7 +713,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(no_codegen, true);\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n-    tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(plt, Some(true));\n@@ -722,6 +721,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(print_fuel, Some(\"abc\".to_string()));\n     tracked!(profile, true);\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));\n+    tracked!(profiler_runtime, None);\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(simulate_remapped_rust_src_base, Some(PathBuf::from(\"/rustc/abc\")));"}, {"sha": "8108470e3d3cc28a8d6416f824e9ca8670eff203", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "patch": "@@ -769,27 +769,31 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self, krate: &ast::Crate) {\n-        if (self.sess.instrument_coverage()\n+        if self.sess.instrument_coverage()\n             || self.sess.opts.debugging_opts.profile\n-            || self.sess.opts.cg.profile_generate.enabled())\n-            && !self.sess.opts.debugging_opts.no_profiler_runtime\n+            || self.sess.opts.cg.profile_generate.enabled()\n         {\n-            info!(\"loading profiler\");\n-\n-            if self.sess.contains_name(&krate.attrs, sym::no_core) {\n-                self.sess.err(\n-                    \"`profiler_builtins` crate (required by compiler options) \\\n-                               is not compatible with crate attribute `#![no_core]`\",\n-                );\n-            }\n+            if let Some(name) =\n+                self.sess.opts.debugging_opts.profiler_runtime.as_deref().map(Symbol::intern)\n+            {\n+                info!(\"loading profiler\");\n+\n+                if name == sym::profiler_builtins\n+                    && self.sess.contains_name(&krate.attrs, sym::no_core)\n+                {\n+                    self.sess.err(\n+                        \"`profiler_builtins` crate (required by compiler options) \\\n+                                is not compatible with crate attribute `#![no_core]`\",\n+                    );\n+                }\n \n-            let name = sym::profiler_builtins;\n-            let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n-            let data = self.cstore.get_crate_data(cnum);\n+                let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n+                let data = self.cstore.get_crate_data(cnum);\n \n-            // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n-            if !data.is_profiler_runtime() {\n-                self.sess.err(\"the crate `profiler_builtins` is not a profiler runtime\");\n+                // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n+                if !data.is_profiler_runtime() {\n+                    self.sess.err(&format!(\"the crate `{}` is not a profiler runtime\", name));\n+                }\n             }\n         }\n     }"}, {"sha": "8570bf30f80787a7c2ac8bb0a3c13207438c8d40", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "patch": "@@ -1100,7 +1100,9 @@ impl CrateError {\n                         if sess.is_nightly_build() && std::env::var(\"CARGO\").is_ok() {\n                             err.help(\"consider building the standard library from source with `cargo build -Zbuild-std`\");\n                         }\n-                    } else if crate_name == sym::profiler_builtins {\n+                    } else if Some(crate_name)\n+                        == sess.opts.debugging_opts.profiler_runtime.as_deref().map(Symbol::intern)\n+                    {\n                         err.note(&\"the compiler may have been built without the profiler runtime\");\n                     }\n                     err.span_label(span, \"can't find crate\");"}, {"sha": "d41f474ab017724874bc620cb780770862b09db8", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c636211ca4b0b7745d6d4ca82587a27ddc59a8/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=93c636211ca4b0b7745d6d4ca82587a27ddc59a8", "patch": "@@ -1148,8 +1148,6 @@ options! {\n         \"compile without linking\"),\n     no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n-    no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n-        \"prevent automatic injection of the profiler_builtins crate\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],\n         \"normalize associated items in rustdoc when generating documentation\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n@@ -1193,6 +1191,8 @@ options! {\n     profile_emit: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"file path to emit profiling data at runtime when using 'profile' \\\n         (default based on relative source path)\"),\n+    profiler_runtime: Option<String> = (Some(String::from(\"profiler_builtins\")), parse_opt_string, [TRACKED],\n+        \"name of the profiler runtime crate to automatically inject, or None to disable\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],"}]}