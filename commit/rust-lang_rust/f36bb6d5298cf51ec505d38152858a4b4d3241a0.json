{"sha": "f36bb6d5298cf51ec505d38152858a4b4d3241a0", "node_id": "C_kwDOAAsO6NoAKGYzNmJiNmQ1Mjk4Y2Y1MWVjNTA1ZDM4MTUyODU4YTRiNGQzMjQxYTA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-06T09:04:05Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-06T09:34:21Z"}, "message": "Make unimplemented trap messages show up in more contexts", "tree": {"sha": "a2c7a7590c9adb6c26fc721f68c6c2efbb585031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2c7a7590c9adb6c26fc721f68c6c2efbb585031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f36bb6d5298cf51ec505d38152858a4b4d3241a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f36bb6d5298cf51ec505d38152858a4b4d3241a0", "html_url": "https://github.com/rust-lang/rust/commit/f36bb6d5298cf51ec505d38152858a4b4d3241a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f36bb6d5298cf51ec505d38152858a4b4d3241a0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11b3fc686c3483cbd551e5fdd3016568a7b720b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11b3fc686c3483cbd551e5fdd3016568a7b720b8", "html_url": "https://github.com/rust-lang/rust/commit/11b3fc686c3483cbd551e5fdd3016568a7b720b8"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "2fb0c2164c3096f299b9a991031224e8c87e4664", "filename": "src/trap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f36bb6d5298cf51ec505d38152858a4b4d3241a0/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36bb6d5298cf51ec505d38152858a4b4d3241a0/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=f36bb6d5298cf51ec505d38152858a4b4d3241a0", "patch": "@@ -30,5 +30,9 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n /// Trap code: user65535\n pub(crate) fn trap_unimplemented(fx: &mut FunctionCx<'_, '_, '_>, msg: impl AsRef<str>) {\n     codegen_print(fx, msg.as_ref());\n+\n+    let one = fx.bcx.ins().iconst(types::I32, 1);\n+    fx.lib_call(\"exit\", vec![AbiParam::new(types::I32)], vec![], &[one]);\n+\n     fx.bcx.ins().trap(TrapCode::User(!0));\n }"}]}