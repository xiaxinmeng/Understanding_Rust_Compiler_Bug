{"sha": "c50157f33025b6ff01809b975a3d12c0e43a0072", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MDE1N2YzMzAyNWI2ZmYwMTgwOWI5NzVhM2QxMmMwZTQzYTAwNzI=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-10T18:24:36Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-18T07:15:43Z"}, "message": "Add `Go to Type Definition` hover action.", "tree": {"sha": "2b40e6ee3cbb463000432c760311b8a2a1a3292c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b40e6ee3cbb463000432c760311b8a2a1a3292c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c50157f33025b6ff01809b975a3d12c0e43a0072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c50157f33025b6ff01809b975a3d12c0e43a0072", "html_url": "https://github.com/rust-lang/rust/commit/c50157f33025b6ff01809b975a3d12c0e43a0072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c50157f33025b6ff01809b975a3d12c0e43a0072/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d6c6a6b1e00f61af96e16386c7f03f83f96a173", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6c6a6b1e00f61af96e16386c7f03f83f96a173", "html_url": "https://github.com/rust-lang/rust/commit/4d6c6a6b1e00f61af96e16386c7f03f83f96a173"}], "stats": {"total": 991, "additions": 956, "deletions": 35}, "files": [{"sha": "c22eb451b96cae9b13b8cd352b6e4d246ad28a90", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -26,8 +26,8 @@ use hir_ty::{\n     autoderef,\n     display::{HirDisplayError, HirFormatter},\n     expr::ExprValidator,\n-    method_resolution, ApplicationTy, Canonical, InEnvironment, Substs, TraitEnvironment, Ty,\n-    TyDefId, TypeCtor,\n+    method_resolution, ApplicationTy, Canonical, GenericPredicate, InEnvironment, OpaqueTyId,\n+    Substs, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n };\n use ra_db::{CrateId, CrateName, Edition, FileId};\n use ra_prof::profile;\n@@ -1380,6 +1380,87 @@ impl Type {\n             ty: InEnvironment { value: ty, environment: self.ty.environment.clone() },\n         }\n     }\n+\n+    /// Returns a flattened list of all the ADTs and Traits mentioned in the type\n+    pub fn flattened_type_items(&self, db: &dyn HirDatabase) -> Vec<AdtOrTrait> {\n+        fn push_new_item(item: AdtOrTrait, acc: &mut Vec<AdtOrTrait>) {\n+            if !acc.contains(&item) {\n+                acc.push(item);\n+            }\n+        }\n+\n+        fn push_bounds(\n+            db: &dyn HirDatabase,\n+            predicates: &[GenericPredicate],\n+            acc: &mut Vec<AdtOrTrait>,\n+        ) {\n+            for p in predicates.iter() {\n+                match p {\n+                    GenericPredicate::Implemented(trait_ref) => {\n+                        push_new_item(Trait::from(trait_ref.trait_).into(), acc);\n+                        walk_types(db, &trait_ref.substs, acc);\n+                    }\n+                    GenericPredicate::Projection(_) => {}\n+                    GenericPredicate::Error => (),\n+                }\n+            }\n+        }\n+\n+        fn walk_types<T: TypeWalk>(db: &dyn HirDatabase, tw: &T, acc: &mut Vec<AdtOrTrait>) {\n+            tw.walk(&mut |ty| walk_type(db, ty, acc));\n+        }\n+\n+        fn walk_type(db: &dyn HirDatabase, ty: &Ty, acc: &mut Vec<AdtOrTrait>) {\n+            match ty.strip_references() {\n+                Ty::Apply(ApplicationTy { ctor, parameters, .. }) => {\n+                    match ctor {\n+                        TypeCtor::Adt(adt_id) => push_new_item(Adt::from(*adt_id).into(), acc),\n+                        _ => (),\n+                    }\n+                    // adt params, tuples, etc...\n+                    walk_types(db, parameters, acc);\n+                }\n+                Ty::Dyn(predicates) => {\n+                    push_bounds(db, predicates, acc);\n+                }\n+                Ty::Placeholder(id) => {\n+                    let generic_params = db.generic_params(id.parent);\n+                    let param_data = &generic_params.types[id.local_id];\n+                    match param_data.provenance {\n+                        hir_def::generics::TypeParamProvenance::ArgumentImplTrait => {\n+                            let predicates: Vec<_> = db\n+                                .generic_predicates_for_param(*id)\n+                                .into_iter()\n+                                .map(|pred| pred.value.clone())\n+                                .collect();\n+                            push_bounds(db, &predicates, acc);\n+                        }\n+                        _ => (),\n+                    }\n+                }\n+                Ty::Opaque(opaque_ty) => {\n+                    let bounds = match opaque_ty.opaque_ty_id {\n+                        OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                            let datas = db\n+                                .return_type_impl_traits(func)\n+                                .expect(\"impl trait id without data\");\n+                            let data = (*datas)\n+                                .as_ref()\n+                                .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n+                            data.clone().subst(&opaque_ty.parameters)\n+                        }\n+                    };\n+                    push_bounds(db, &bounds.value, acc);\n+                    walk_types(db, &opaque_ty.parameters, acc);\n+                }\n+                _ => (),\n+            }\n+        }\n+\n+        let mut res: Vec<AdtOrTrait> = Vec::new(); // not a Set to preserve the order\n+        walk_type(db, &self.ty.value, &mut res);\n+        res\n+    }\n }\n \n impl HirDisplay for Type {\n@@ -1488,3 +1569,26 @@ pub trait HasVisibility {\n         vis.is_visible_from(db.upcast(), module.id)\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AdtOrTrait {\n+    Adt(Adt),\n+    Trait(Trait),\n+}\n+impl_froms!(AdtOrTrait: Adt, Trait);\n+\n+impl AdtOrTrait {\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n+        match self {\n+            AdtOrTrait::Adt(adt) => adt.module(db),\n+            AdtOrTrait::Trait(trait_) => trait_.module(db),\n+        }\n+    }\n+\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n+        match self {\n+            AdtOrTrait::Adt(adt) => adt.name(db),\n+            AdtOrTrait::Trait(trait_) => trait_.name(db),\n+        }\n+    }\n+}"}, {"sha": "eded039e4cfad74a96766ebfc66eda89adde164a", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -51,10 +51,10 @@ mod has_source;\n \n pub use crate::{\n     code_model::{\n-        Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate, CrateDependency,\n-        DefWithBody, Docs, Enum, EnumVariant, Field, FieldSource, Function, GenericDef, HasAttrs,\n-        HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n-        Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n+        Adt, AdtOrTrait, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate,\n+        CrateDependency, DefWithBody, Docs, Enum, EnumVariant, Field, FieldSource, Function,\n+        GenericDef, HasAttrs, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef,\n+        Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},"}, {"sha": "9d4d6aaa4e83c446eb779cb98971e2d228208eda", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -1052,10 +1052,10 @@ pub enum OpaqueTyId {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct ReturnTypeImplTraits {\n-    pub(crate) impl_traits: Vec<ReturnTypeImplTrait>,\n+    pub impl_traits: Vec<ReturnTypeImplTrait>,\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub(crate) struct ReturnTypeImplTrait {\n-    pub(crate) bounds: Binders<Vec<GenericPredicate>>,\n+pub struct ReturnTypeImplTrait {\n+    pub bounds: Binders<Vec<GenericPredicate>>,\n }"}, {"sha": "325b247bb72cb62b3f9dff9402e87542da166d72", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -321,6 +321,15 @@ impl ToNav for hir::Adt {\n     }\n }\n \n+impl ToNav for hir::AdtOrTrait {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        match self {\n+            hir::AdtOrTrait::Adt(adt) => adt.to_nav(db),\n+            hir::AdtOrTrait::Trait(trait_) => trait_.to_nav(db),\n+        }\n+    }\n+}\n+\n impl ToNav for hir::AssocItem {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         match self {"}, {"sha": "c434e5c8b69ea9c3e66e1ea8b4edfd3f36077a9e", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 790, "deletions": 21, "changes": 811, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -1,8 +1,8 @@\n use std::iter::once;\n \n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n-    ModuleDef, ModuleSource, Semantics,\n+    Adt, AdtOrTrait, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource,\n+    HirDisplay, Module, ModuleDef, ModuleSource, Semantics,\n };\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n@@ -24,19 +24,21 @@ pub struct HoverConfig {\n     pub implementations: bool,\n     pub run: bool,\n     pub debug: bool,\n+    pub goto_type_def: bool,\n }\n \n impl Default for HoverConfig {\n     fn default() -> Self {\n-        Self { implementations: true, run: true, debug: true }\n+        Self { implementations: true, run: true, debug: true, goto_type_def: true }\n     }\n }\n \n impl HoverConfig {\n-    pub const NO_ACTIONS: Self = Self { implementations: false, run: false, debug: false };\n+    pub const NO_ACTIONS: Self =\n+        Self { implementations: false, run: false, debug: false, goto_type_def: false };\n \n     pub fn any(&self) -> bool {\n-        self.implementations || self.runnable()\n+        self.implementations || self.runnable() || self.goto_type_def\n     }\n \n     pub fn none(&self) -> bool {\n@@ -52,6 +54,13 @@ impl HoverConfig {\n pub enum HoverAction {\n     Runnable(Runnable),\n     Implementaion(FilePosition),\n+    GoToType(Vec<HoverGotoTypeData>),\n+}\n+\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct HoverGotoTypeData {\n+    pub mod_path: String,\n+    pub nav: NavigationTarget,\n }\n \n /// Contains the results when hovering over an item\n@@ -138,6 +147,10 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 res.push_action(action);\n             }\n \n+            if let Some(action) = goto_type_action(db, name_kind) {\n+                res.push_action(action);\n+            }\n+\n             return Some(RangeInfo::new(range, res));\n         }\n     }\n@@ -218,6 +231,24 @@ fn runnable_action(\n     }\n }\n \n+fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n+    match def {\n+        Definition::Local(it) => {\n+            let ty = it.ty(db);\n+            let v = ty.flattened_type_items(db);\n+            let targets = v.into_iter()\n+                .map(|it| HoverGotoTypeData {\n+                    mod_path: adt_or_trait_mod_path(db, &it),\n+                    nav: it.to_nav(db),\n+                })\n+                .collect_vec();\n+\n+            Some(HoverAction::GoToType(targets))\n+        }\n+        _ => None,\n+    }\n+}\n+\n fn hover_text(\n     docs: Option<String>,\n     desc: Option<String>,\n@@ -248,25 +279,30 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n     .map(|name| name.to_string())\n }\n \n-fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n-    let mod_path = def.module(db).map(|module| {\n-        once(db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string))\n-            .chain(\n-                module\n-                    .path_to_root(db)\n-                    .into_iter()\n-                    .rev()\n-                    .map(|it| it.name(db).map(|name| name.to_string())),\n-            )\n-            .chain(once(definition_owner_name(db, def)))\n-            .flatten()\n-            .join(\"::\")\n-    });\n-    mod_path\n+fn determine_mod_path(db: &RootDatabase, module: Module, name: Option<String>) -> String {\n+    once(db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string))\n+        .chain(\n+            module\n+                .path_to_root(db)\n+                .into_iter()\n+                .rev()\n+                .map(|it| it.name(db).map(|name| name.to_string())),\n+        )\n+        .chain(once(name))\n+        .flatten()\n+        .join(\"::\")\n+}\n+\n+fn adt_or_trait_mod_path(db: &RootDatabase, item: &AdtOrTrait) -> String {\n+    determine_mod_path(db, item.module(db), Some(item.name(db).to_string()))\n+}\n+\n+fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n+    def.module(db).map(|module| determine_mod_path(db, module, definition_owner_name(db, def)))\n }\n \n fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<String> {\n-    let mod_path = determine_mod_path(db, &def);\n+    let mod_path = definition_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n@@ -1310,4 +1346,737 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             ]\n             \"###);\n     }\n+\n+    #[test]\n+    fn test_hover_struct_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct S{ f1: u32 }\n+\n+            fn main() {\n+                let s<|>t = S{ f1:0 };\n+            }\n+            \",\n+            &[\"S\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..19,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..8,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_struct_has_goto_type_actions() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct Arg(u32);\n+            struct S<T>{ f1: T }\n+\n+            fn main() {\n+                let s<|>t = S{ f1:Arg(0) };\n+            }\n+            \",\n+            &[\"S<Arg>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 17..37,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    24..25,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Arg\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..16,\n+                                name: \"Arg\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..10,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct Arg\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_struct_has_flattened_goto_type_actions() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct Arg(u32);\n+            struct S<T>{ f1: T }\n+\n+            fn main() {\n+                let s<|>t = S{ f1: S{ f1: Arg(0) } };\n+            }\n+            \",\n+            &[\"S<S<Arg>>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 17..37,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    24..25,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Arg\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..16,\n+                                name: \"Arg\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..10,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct Arg\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_tuple_has_goto_type_actions() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct A(u32);\n+            struct B(u32);\n+            mod M {\n+                pub struct C(u32);\n+            }\n+\n+            fn main() {\n+                let s<|>t = (A(1), B(2), M::C(3) );\n+            }\n+            \",\n+            &[\"(A, B, C)\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"A\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..14,\n+                                name: \"A\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..8,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct A\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"B\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 15..29,\n+                                name: \"B\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    22..23,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct B\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"M::C\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 42..60,\n+                                name: \"C\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    53..54,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"pub struct C\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+               \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_return_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo {}\n+\n+            fn foo() -> impl Foo {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"impl Foo\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_return_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo<T> {}\n+            struct S;\n+\n+            fn foo() -> impl Foo<S> {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"impl Foo<S>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..15,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 16..25,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    23..24,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_arg_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo {}\n+            fn foo(ar<|>g: &impl Foo) {}\n+            \",\n+            &[\"&impl Foo\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_arg_generic_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo<T> {}\n+            struct S {}\n+            fn foo(ar<|>g: &impl Foo<S>) {}\n+            \",\n+            &[\"&impl Foo<S>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..15,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 16..27,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    23..24,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_dyn_return_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo {}\n+            struct S;\n+            impl Foo for S {}\n+\n+            struct B<T>{}\n+\n+            fn foo() -> B<dyn Foo> {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"B<dyn Foo>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"B\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 41..54,\n+                                name: \"B\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    48..49,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct B\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_dyn_arg_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo {}\n+            fn foo(ar<|>g: &dyn Foo) {}\n+            \",\n+            &[\"&dyn Foo\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_dyn_arg_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo<T> {}\n+            struct S {}\n+            fn foo(ar<|>g: &dyn Foo<S>) {}\n+            \",\n+            &[\"&dyn Foo<S>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..15,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 16..27,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    23..24,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_arg_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait ImplTrait<T> {}\n+            trait DynTrait<T> {}\n+            struct B<T> {}\n+            struct S {}\n+        \n+            fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<S>>>) {}\n+            \",\n+            &[\"&impl ImplTrait<B<dyn DynTrait<S>>>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"ImplTrait\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..21,\n+                                name: \"ImplTrait\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..15,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait ImplTrait\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 58..69,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    65..66,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"DynTrait\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 22..42,\n+                                name: \"DynTrait\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    28..36,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait DynTrait\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"B\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 43..57,\n+                                name: \"B\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    50..51,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct B\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n }"}, {"sha": "be9ab62c0bbb666183ed1573c3f37a11ab8b21fd", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -66,7 +66,7 @@ pub use crate::{\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n-    hover::{HoverAction, HoverConfig, HoverResult},\n+    hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},"}, {"sha": "aa2c4ae15dc106fa18a9742689020212562c3ab3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -296,6 +296,7 @@ impl Config {\n             set(value, \"/hoverActions/implementations\", &mut self.hover.implementations);\n             set(value, \"/hoverActions/run\", &mut self.hover.run);\n             set(value, \"/hoverActions/debug\", &mut self.hover.debug);\n+            set(value, \"/hoverActions/gotoTypeDef\", &mut self.hover.goto_type_def);\n         } else {\n             self.hover = HoverConfig::NO_ACTIONS;\n         }"}, {"sha": "2d7e649d2dc197ff5e5e08cd68b85d765cac08be", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c50157f33025b6ff01809b975a3d12c0e43a0072/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c50157f33025b6ff01809b975a3d12c0e43a0072", "patch": "@@ -18,8 +18,8 @@ use lsp_types::{\n     TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, Runnable, RunnableKind,\n-    SearchScope, TextEdit,\n+    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n+    RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n@@ -1150,6 +1150,23 @@ fn debug_single_command(runnable: &lsp_ext::Runnable) -> Command {\n     }\n }\n \n+fn goto_location_command(snap: &GlobalStateSnapshot, nav: &NavigationTarget) -> Option<Command> {\n+    let value = if snap.config.client_caps.location_link {\n+        let link = to_proto::location_link(snap, None, nav.clone()).ok()?;\n+        to_value(link).ok()?\n+    } else {\n+        let range = FileRange { file_id: nav.file_id(), range: nav.range() };\n+        let location = to_proto::location(snap, range).ok()?;\n+        to_value(location).ok()?\n+    };\n+\n+    Some(Command {\n+        title: nav.name().to_string(),\n+        command: \"rust-analyzer.gotoLocation\".into(),\n+        arguments: Some(vec![value]),\n+    })\n+}\n+\n fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n     lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }\n@@ -1180,7 +1197,7 @@ fn show_impl_command_link(\n     None\n }\n \n-fn to_runnable_action(\n+fn runnable_action_links(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n     runnable: Runnable,\n@@ -1208,6 +1225,26 @@ fn to_runnable_action(\n     })\n }\n \n+fn goto_type_action_links(\n+    snap: &GlobalStateSnapshot,\n+    nav_targets: &[HoverGotoTypeData],\n+) -> Option<lsp_ext::CommandLinkGroup> {\n+    if !snap.config.hover.goto_type_def || nav_targets.is_empty() {\n+        return None;\n+    }\n+\n+    Some(lsp_ext::CommandLinkGroup {\n+        title: Some(\"Go to \".into()),\n+        commands: nav_targets\n+            .iter()\n+            .filter_map(|it| {\n+                goto_location_command(snap, &it.nav)\n+                    .map(|cmd| to_command_link(cmd, it.mod_path.clone()))\n+            })\n+            .collect(),\n+    })\n+}\n+\n fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n@@ -1221,7 +1258,8 @@ fn prepare_hover_actions(\n         .iter()\n         .filter_map(|it| match it {\n             HoverAction::Implementaion(position) => show_impl_command_link(snap, position),\n-            HoverAction::Runnable(r) => to_runnable_action(snap, file_id, r.clone()),\n+            HoverAction::Runnable(r) => runnable_action_links(snap, file_id, r.clone()),\n+            HoverAction::GoToType(targets) => goto_type_action_links(snap, targets),\n         })\n         .collect()\n }"}]}