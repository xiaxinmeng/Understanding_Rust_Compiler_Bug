{"sha": "2b8d27b402b621d20c7c29c500852c727d4cc8cd", "node_id": "C_kwDOAAsO6NoAKDJiOGQyN2I0MDJiNjIxZDIwYzdjMjljNTAwODUyYzcyN2Q0Y2M4Y2Q", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-24T16:48:37Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-24T16:48:37Z"}, "message": "Switch `impl_tag!` from explicit tags to `${index()}`", "tree": {"sha": "ba2467a4141f35c18ed56c3f7174f1ddb834ebd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba2467a4141f35c18ed56c3f7174f1ddb834ebd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8d27b402b621d20c7c29c500852c727d4cc8cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8d27b402b621d20c7c29c500852c727d4cc8cd", "html_url": "https://github.com/rust-lang/rust/commit/2b8d27b402b621d20c7c29c500852c727d4cc8cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8d27b402b621d20c7c29c500852c727d4cc8cd/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8c7b6705d94bdf9293fbfe0c4d386d5f7e81a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8c7b6705d94bdf9293fbfe0c4d386d5f7e81a2", "html_url": "https://github.com/rust-lang/rust/commit/ad8c7b6705d94bdf9293fbfe0c4d386d5f7e81a2"}], "stats": {"total": 108, "additions": 57, "deletions": 51}, "files": [{"sha": "004017ec5f31a464a76d3671bd36eca613d8760f", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=2b8d27b402b621d20c7c29c500852c727d4cc8cd", "patch": "@@ -31,6 +31,7 @@\n #![feature(unwrap_infallible)]\n #![feature(strict_provenance)]\n #![feature(ptr_alignment_type)]\n+#![feature(macro_metavar_expr)]\n #![allow(rustc::default_hash_types)]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "0b0c152cc4db41ceae890337ef576eb789233ce3", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag.rs?ref=2b8d27b402b621d20c7c29c500852c727d4cc8cd", "patch": "@@ -11,6 +11,7 @@\n /// Basic usage:\n ///\n /// ```\n+/// #![feature(macro_metavar_expr)]\n /// use rustc_data_structures::{impl_tag, tagged_ptr::Tag};\n ///\n /// #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -24,19 +25,20 @@\n /// impl_tag! {\n ///     // The type for which the `Tag` will be implemented\n ///     impl Tag for SomeTag;\n-///     // You need to specify the `{value_of_the_type} <=> {tag}` relationship\n-///     SomeTag::A <=> 0,\n-///     SomeTag::B <=> 1,\n+///     // You need to specify all possible tag values:\n+///     SomeTag::A, // 0\n+///     SomeTag::B, // 1\n ///     // For variants with fields, you need to specify the fields:\n-///     SomeTag::X { v: true  } <=> 2,\n-///     SomeTag::X { v: false } <=> 3,\n+///     SomeTag::X { v: true  }, // 2\n+///     SomeTag::X { v: false }, // 3\n ///     // For tuple variants use named syntax:\n-///     SomeTag::Y { 0: true,  1: true  } <=> 4,\n-///     SomeTag::Y { 0: false, 1: true  } <=> 5,\n-///     SomeTag::Y { 0: true,  1: false } <=> 6,\n-///     SomeTag::Y { 0: false, 1: false } <=> 7,\n+///     SomeTag::Y { 0: true,  1: true  }, // 4\n+///     SomeTag::Y { 0: false, 1: true  }, // 5\n+///     SomeTag::Y { 0: true,  1: false }, // 6\n+///     SomeTag::Y { 0: false, 1: false }, // 7\n /// }\n ///\n+/// // Tag values are assigned in order:\n /// assert_eq!(SomeTag::A.into_usize(), 0);\n /// assert_eq!(SomeTag::X { v: false }.into_usize(), 3);\n /// assert_eq!(SomeTag::Y(false, true).into_usize(), 5);\n@@ -49,22 +51,24 @@\n /// Structs are supported:\n ///\n /// ```\n+/// #![feature(macro_metavar_expr)]\n /// # use rustc_data_structures::impl_tag;\n /// #[derive(Copy, Clone)]\n /// struct Flags { a: bool, b: bool }\n ///\n /// impl_tag! {\n ///     impl Tag for Flags;\n-///     Flags { a: true,  b: true  } <=> 3,\n-///     Flags { a: false, b: true  } <=> 2,\n-///     Flags { a: true,  b: false } <=> 1,\n-///     Flags { a: false, b: false } <=> 0,\n+///     Flags { a: true,  b: true  },\n+///     Flags { a: false, b: true  },\n+///     Flags { a: true,  b: false },\n+///     Flags { a: false, b: false },\n /// }\n /// ```\n ///\n /// Not specifying all values results in a compile error:\n ///\n /// ```compile_fail,E0004\n+/// #![feature(macro_metavar_expr)]\n /// # use rustc_data_structures::impl_tag;\n /// #[derive(Copy, Clone)]\n /// enum E {\n@@ -74,24 +78,26 @@\n ///\n /// impl_tag! {\n ///     impl Tag for E;\n-///     E::A <=> 0,\n+///     E::A,\n /// }\n /// ```\n #[macro_export]\n macro_rules! impl_tag {\n     (\n         impl Tag for $Self:ty;\n         $(\n-            $($path:ident)::* $( { $( $fields:tt )* })? <=> $tag:literal,\n+            $($path:ident)::* $( { $( $fields:tt )* })?,\n         )*\n     ) => {\n         // Safety:\n-        // `into_usize` only returns one of `$tag`s,\n-        // `bits_for_tags` is called on all `$tag`s,\n-        // thus `BITS` constant is correct.\n+        // `bits_for_tags` is called on the same `${index()}`-es as\n+        // `into_usize` returns, thus `BITS` constant is correct.\n         unsafe impl $crate::tagged_ptr::Tag for $Self {\n             const BITS: u32 = $crate::tagged_ptr::bits_for_tags(&[\n-                $( $tag, )*\n+                $(\n+                    ${index()},\n+                    $( ${ignore(path)} )*\n+                )*\n             ]);\n \n             fn into_usize(self) -> usize {\n@@ -101,25 +107,22 @@ macro_rules! impl_tag {\n                 match self {\n                     // `match` is doing heavy lifting here, by requiring exhaustiveness\n                     $(\n-                        $($path)::* $( { $( $fields )* } )? => $tag,\n+                        $($path)::* $( { $( $fields )* } )? => ${index()},\n                     )*\n                 }\n             }\n \n             unsafe fn from_usize(tag: usize) -> Self {\n-                // Similarly to the above, this forbids repeating tags\n-                // (or at least it should, see <https://github.com/rust-lang/rust/issues/110613>)\n-                #[forbid(unreachable_patterns)]\n                 match tag {\n                     $(\n-                        $tag => $($path)::* $( { $( $fields )* } )?,\n+                        ${index()} => $($path)::* $( { $( $fields )* } )?,\n                     )*\n \n                     // Safety:\n-                    // `into_usize` only returns one of `$tag`s,\n-                    // all `$tag`s are filtered up above,\n-                    // thus if this is reached, the safety contract of this\n-                    // function was already breached.\n+                    // `into_usize` only returns `${index()}` of the same\n+                    // repetition as we are filtering above, thus if this is\n+                    // reached, the safety contract of this function was\n+                    // already breached.\n                     _ => unsafe {\n                         debug_assert!(\n                             false,"}, {"sha": "62c926153e1e9f86fff3e438729bc0f3384ef742", "filename": "compiler/rustc_data_structures/src/tagged_ptr/impl_tag/tests.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr%2Fimpl_tag%2Ftests.rs?ref=2b8d27b402b621d20c7c29c500852c727d4cc8cd", "patch": "@@ -4,30 +4,31 @@ fn bits_constant() {\n \n     #[derive(Copy, Clone)]\n     struct Unit;\n-    impl_tag! { impl Tag for Unit; Unit <=> 0, }\n+    impl_tag! { impl Tag for Unit; Unit, }\n     assert_eq!(Unit::BITS, 0);\n \n     #[derive(Copy, Clone)]\n-    struct Unit1;\n-    impl_tag! { impl Tag for Unit1; Unit1 <=> 1, }\n-    assert_eq!(Unit1::BITS, 1);\n-\n-    #[derive(Copy, Clone)]\n-    struct Unit2;\n-    impl_tag! { impl Tag for Unit2; Unit2 <=> 0b10, }\n-    assert_eq!(Unit2::BITS, 2);\n-\n-    #[derive(Copy, Clone)]\n-    struct Unit3;\n-    impl_tag! { impl Tag for Unit3; Unit3 <=> 0b100, }\n-    assert_eq!(Unit3::BITS, 3);\n-\n-    #[derive(Copy, Clone)]\n-    enum Enum {\n+    enum Enum3 {\n         A,\n         B,\n         C,\n     }\n-    impl_tag! { impl Tag for Enum; Enum::A <=> 0b1, Enum::B <=> 0b1000, Enum::C <=> 0b10, }\n-    assert_eq!(Enum::BITS, 4);\n+    impl_tag! { impl Tag for Enum3; Enum3::A, Enum3::B, Enum3::C, }\n+    assert_eq!(Enum3::BITS, 2);\n+\n+    #[derive(Copy, Clone)]\n+    struct Eight(bool, bool, bool);\n+    impl_tag! {\n+        impl Tag for Eight;\n+        Eight { 0: true,  1: true,  2: true  },\n+        Eight { 0: true,  1: true,  2: false },\n+        Eight { 0: true,  1: false, 2: true  },\n+        Eight { 0: true,  1: false, 2: false },\n+        Eight { 0: false, 1: true,  2: true  },\n+        Eight { 0: false, 1: true,  2: false },\n+        Eight { 0: false, 1: false, 2: true  },\n+        Eight { 0: false, 1: false, 2: false },\n+    }\n+\n+    assert_eq!(Eight::BITS, 3);\n }"}, {"sha": "e9172e767e0368f8a3ff176b835c83f4c7a4fd60", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=2b8d27b402b621d20c7c29c500852c727d4cc8cd", "patch": "@@ -60,6 +60,7 @@\n #![feature(const_option)]\n #![feature(trait_alias)]\n #![feature(ptr_alignment_type)]\n+#![feature(macro_metavar_expr)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "88de43478b886cad15aea475b6791070640cfd1b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8d27b402b621d20c7c29c500852c727d4cc8cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2b8d27b402b621d20c7c29c500852c727d4cc8cd", "patch": "@@ -1628,10 +1628,10 @@ struct ParamTag {\n \n impl_tag! {\n     impl Tag for ParamTag;\n-    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } <=> 0,\n-    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::NotConst } <=> 1,\n-    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const    } <=> 2,\n-    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::Const    } <=> 3,\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::NotConst },\n+    ParamTag { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const    },\n+    ParamTag { reveal: traits::Reveal::All,        constness: hir::Constness::Const    },\n }\n \n impl<'tcx> fmt::Debug for ParamEnv<'tcx> {"}]}