{"sha": "72d66064e77281536588189a916af28a1819b313", "node_id": "C_kwDOAAsO6NoAKDcyZDY2MDY0ZTc3MjgxNTM2NTg4MTg5YTkxNmFmMjhhMTgxOWIzMTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T05:59:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T05:59:49Z"}, "message": "Auto merge of #89903 - matthiaskrgr:rollup-s0c69xl, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #86011 (move implicit `Sized` predicate to end of list)\n - #89821 (Add a strange test for `unsafe_code` lint.)\n - #89859 (add dedicated error variant for writing the discriminant of an uninhabited enum variant)\n - #89870 (Suggest Box::pin when Pin::new is used instead)\n - #89880 (Use non-checking TLS relocation in aarch64 asm! sym test.)\n - #89885 (add long explanation for E0183)\n - #89894 (Remove unused dependencies from rustc_const_eval)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "026c1f5253155149bd789a688b6eace31ca9ba11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026c1f5253155149bd789a688b6eace31ca9ba11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d66064e77281536588189a916af28a1819b313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d66064e77281536588189a916af28a1819b313", "html_url": "https://github.com/rust-lang/rust/commit/72d66064e77281536588189a916af28a1819b313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d66064e77281536588189a916af28a1819b313/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "313e71a2535196466b0bbdcfa3387bd6373e0f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/313e71a2535196466b0bbdcfa3387bd6373e0f28", "html_url": "https://github.com/rust-lang/rust/commit/313e71a2535196466b0bbdcfa3387bd6373e0f28"}, {"sha": "e45c22279344dcb6bf4761f737e1d62c7958eec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45c22279344dcb6bf4761f737e1d62c7958eec0", "html_url": "https://github.com/rust-lang/rust/commit/e45c22279344dcb6bf4761f737e1d62c7958eec0"}], "stats": {"total": 350, "additions": 236, "deletions": 114}, "files": [{"sha": "102450188aacd0366a3aaec98de67f77c0716f91", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -3736,8 +3736,6 @@ dependencies = [\n name = \"rustc_const_eval\"\n version = \"0.0.0\"\n dependencies = [\n- \"either\",\n- \"gsgdt\",\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n  \"rustc_attr\","}, {"sha": "4ed908a383332bc21d01c9b01fc831b33c8893b5", "filename": "compiler/rustc_const_eval/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2FCargo.toml?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -7,8 +7,6 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-either = \"1.5.0\"\n-gsgdt = \"0.1.2\"\n tracing = \"0.1\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "b6682b13ed2168e4556dc602007da80cdb3b6294", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -618,6 +618,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     /// Read discriminant, return the runtime value as well as the variant index.\n+    /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!\n     pub fn read_discriminant(\n         &self,\n         op: &OpTy<'tcx, M::PointerTag>,"}, {"sha": "d425b84bdaf26d508773a623b5b70f9d58663e42", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -988,10 +988,23 @@ where\n         variant_index: VariantIdx,\n         dest: &PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n+        // This must be an enum or generator.\n+        match dest.layout.ty.kind() {\n+            ty::Adt(adt, _) => assert!(adt.is_enum()),\n+            ty::Generator(..) => {}\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"write_discriminant called on non-variant-type (neither enum nor generator)\"\n+            ),\n+        }\n         // Layout computation excludes uninhabited variants from consideration\n         // therefore there's no way to represent those variants in the given layout.\n+        // Essentially, uninhabited variants do not have a tag that corresponds to their\n+        // discriminant, so we cannot do anything here.\n+        // When evaluating we will always error before even getting here, but ConstProp 'executes'\n+        // dead code, so we cannot ICE here.\n         if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {\n-            throw_ub!(Unreachable);\n+            throw_ub!(UninhabitedEnumVariantWritten)\n         }\n \n         match dest.layout.variants {"}, {"sha": "724e3f7fed3996e1aeb2638a71681fda46a5a2ca", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -92,6 +92,7 @@ E0164: include_str!(\"./error_codes/E0164.md\"),\n E0165: include_str!(\"./error_codes/E0165.md\"),\n E0170: include_str!(\"./error_codes/E0170.md\"),\n E0178: include_str!(\"./error_codes/E0178.md\"),\n+E0183: include_str!(\"./error_codes/E0183.md\"),\n E0184: include_str!(\"./error_codes/E0184.md\"),\n E0185: include_str!(\"./error_codes/E0185.md\"),\n E0186: include_str!(\"./error_codes/E0186.md\"),\n@@ -513,7 +514,6 @@ E0785: include_str!(\"./error_codes/E0785.md\"),\n //  E0173, // manual implementations of unboxed closure traits are experimental\n //  E0174,\n //  E0182, // merged into E0229\n-    E0183,\n //  E0187, // cannot infer the kind of the closure\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object"}, {"sha": "7e1d08daae1f2160eca47c5f3224de20b18d6d97", "filename": "compiler/rustc_error_codes/src/error_codes/E0183.md", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0183.md", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0183.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0183.md?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -0,0 +1,39 @@\n+Manual implemetation of a `Fn*` trait.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0183\n+struct MyClosure {\n+    foo: i32\n+}\n+\n+impl FnOnce<()> for MyClosure {  // error\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, args: ()) -> Self::Output {\n+        println!(\"{}\", self.foo);\n+    }\n+}\n+```\n+\n+Manually implementing `Fn`, `FnMut` or `FnOnce` is unstable\n+and requires `#![feature(fn_traits, unboxed_closures)]`.\n+\n+```\n+#![feature(fn_traits, unboxed_closures)]\n+\n+struct MyClosure {\n+    foo: i32\n+}\n+\n+impl FnOnce<()> for MyClosure {  // ok!\n+    type Output = ();\n+    extern \"rust-call\" fn call_once(self, args: ()) -> Self::Output {\n+        println!(\"{}\", self.foo);\n+    }\n+}\n+```\n+\n+The argumements must be a tuple representing the argument list.\n+For more info, see the [tracking issue][iss29625]:\n+\n+[iss29625]: https://github.com/rust-lang/rust/issues/29625"}, {"sha": "9472a287e5a41907c5f434729376484048582a1e", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -287,6 +287,8 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n         target_size: u64,\n         data_size: u64,\n     },\n+    /// A discriminant of an uninhabited enum variant is written.\n+    UninhabitedEnumVariantWritten,\n }\n \n impl fmt::Display for UndefinedBehaviorInfo<'_> {\n@@ -391,6 +393,9 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 \"scalar size mismatch: expected {} bytes but got {} bytes instead\",\n                 target_size, data_size\n             ),\n+            UninhabitedEnumVariantWritten => {\n+                write!(f, \"writing discriminant of an uninhabited enum\")\n+            }\n         }\n     }\n }"}, {"sha": "ff04e07acc4f6bd90faf56ad02e7ef0b7ac81c68", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -64,16 +64,16 @@ impl<'tcx> Bounds<'tcx> {\n             })\n         });\n \n-        sized_predicate\n-            .into_iter()\n-            .chain(self.region_bounds.iter().map(|&(region_bound, span)| {\n+        self.region_bounds\n+            .iter()\n+            .map(|&(region_bound, span)| {\n                 (\n                     region_bound\n                         .map_bound(|region_bound| ty::OutlivesPredicate(param_ty, region_bound))\n                         .to_predicate(tcx),\n                     span,\n                 )\n-            }))\n+            })\n             .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n                 let predicate = bound_trait_ref.with_constness(constness).to_predicate(tcx);\n                 (predicate, span)\n@@ -83,6 +83,7 @@ impl<'tcx> Bounds<'tcx> {\n                     .iter()\n                     .map(|&(projection, span)| (projection.to_predicate(tcx), span)),\n             )\n+            .chain(sized_predicate.into_iter())\n             .collect()\n     }\n }"}, {"sha": "babc06822ac529baa6b4a3b8b59d2afe1e94b2cc", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -8,11 +8,11 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Expr, ExprKind, ItemKind, Node, Stmt, StmtKind};\n+use rustc_hir::{Expr, ExprKind, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind};\n use rustc_infer::infer;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, sym};\n \n use std::iter;\n \n@@ -350,6 +350,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// When encountering an `impl Future` where `BoxFuture` is expected, suggest `Box::pin`.\n+    #[instrument(skip(self, err))]\n     pub(in super::super) fn suggest_calling_boxed_future_when_appropriate(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n@@ -368,41 +369,70 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if pin_did.is_none() || self.tcx.lang_items().owned_box().is_none() {\n             return false;\n         }\n-        match expected.kind() {\n-            ty::Adt(def, _) if Some(def.did) == pin_did => (),\n-            _ => return false,\n-        }\n         let box_found = self.tcx.mk_box(found);\n         let pin_box_found = self.tcx.mk_lang_item(box_found, LangItem::Pin).unwrap();\n         let pin_found = self.tcx.mk_lang_item(found, LangItem::Pin).unwrap();\n-        if self.can_coerce(pin_box_found, expected) {\n-            debug!(\"can coerce {:?} to {:?}, suggesting Box::pin\", pin_box_found, expected);\n-            match found.kind() {\n-                ty::Adt(def, _) if def.is_box() => {\n-                    err.help(\"use `Box::pin`\");\n-                }\n-                _ => {\n-                    err.multipart_suggestion(\n-                        \"you need to pin and box this expression\",\n-                        vec![\n-                            (expr.span.shrink_to_lo(), \"Box::pin(\".to_string()),\n-                            (expr.span.shrink_to_hi(), \")\".to_string()),\n-                        ],\n-                        Applicability::MaybeIncorrect,\n-                    );\n+        match expected.kind() {\n+            ty::Adt(def, _) if Some(def.did) == pin_did => {\n+                if self.can_coerce(pin_box_found, expected) {\n+                    debug!(\"can coerce {:?} to {:?}, suggesting Box::pin\", pin_box_found, expected);\n+                    match found.kind() {\n+                        ty::Adt(def, _) if def.is_box() => {\n+                            err.help(\"use `Box::pin`\");\n+                        }\n+                        _ => {\n+                            err.multipart_suggestion(\n+                                \"you need to pin and box this expression\",\n+                                vec![\n+                                    (expr.span.shrink_to_lo(), \"Box::pin(\".to_string()),\n+                                    (expr.span.shrink_to_hi(), \")\".to_string()),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n+                    true\n+                } else if self.can_coerce(pin_found, expected) {\n+                    match found.kind() {\n+                        ty::Adt(def, _) if def.is_box() => {\n+                            err.help(\"use `Box::pin`\");\n+                            true\n+                        }\n+                        _ => false,\n+                    }\n+                } else {\n+                    false\n                 }\n             }\n-            true\n-        } else if self.can_coerce(pin_found, expected) {\n-            match found.kind() {\n-                ty::Adt(def, _) if def.is_box() => {\n-                    err.help(\"use `Box::pin`\");\n-                    true\n+            ty::Adt(def, _) if def.is_box() && self.can_coerce(box_found, expected) => {\n+                // Check if the parent expression is a call to Pin::new.  If it\n+                // is and we were expecting a Box, ergo Pin<Box<expected>>, we\n+                // can suggest Box::pin.\n+                let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+                let fn_name = match self.tcx.hir().find(parent) {\n+                    Some(Node::Expr(Expr { kind: ExprKind::Call(fn_name, _), .. })) => fn_name,\n+                    _ => return false,\n+                };\n+                match fn_name.kind {\n+                    ExprKind::Path(QPath::TypeRelative(\n+                        hir::Ty {\n+                            kind: TyKind::Path(QPath::Resolved(_, Path { res: recv_ty, .. })),\n+                            ..\n+                        },\n+                        method,\n+                    )) if Some(recv_ty.def_id()) == pin_did && method.ident.name == sym::new => {\n+                        err.span_suggestion(\n+                            fn_name.span,\n+                            \"use `Box::pin` to pin and box this expression\",\n+                            \"Box::pin\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        true\n+                    }\n+                    _ => false,\n                 }\n-                _ => false,\n             }\n-        } else {\n-            false\n+            _ => false,\n         }\n     }\n "}, {"sha": "6fd1192eec6e030faa4a1d4d8f24f0594f58bd68", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -55,7 +55,7 @@ macro_rules! static_tls_addr {\n                 // Add the top 12 bits of the symbol's offset\n                 \"add {out}, {out}, :tprel_hi12:{sym}\",\n                 // And the bottom 12 bits\n-                \"add {out}, {out}, :tprel_lo12:{sym}\",\n+                \"add {out}, {out}, :tprel_lo12_nc:{sym}\",\n                 out = out(reg) result,\n                 sym = sym $s\n             );"}, {"sha": "89186817e099c167bdbefd8181d650ea66adc87d", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "6abb7e78b1330739de9c3b7f1eeae8c0b4b752fe", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "405285f8838104aea1329776f06e7216e86e49e2", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "aa12314c051762dd147457ee3981b2a6034af0d8", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "e0e0acadb3776b0b81fd8fc7683db8e08f403b96", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -101,5 +101,5 @@ LL | impl FnOnce<()> for Baz {\n \n error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0229, E0658.\n-For more information about an error, try `rustc --explain E0229`.\n+Some errors have detailed explanations: E0183, E0229, E0658.\n+For more information about an error, try `rustc --explain E0183`."}, {"sha": "8c5f87964561fba6f1e2bff9f1adce139af6d8a6", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -26,4 +26,5 @@ LL | impl FnOnce<(u32, u32)> for Test {\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0183, E0658.\n+For more information about an error, try `rustc --explain E0183`."}, {"sha": "d5cc5cfbe912d41e3bd81b9122207a26d42466cb", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -1,34 +1,34 @@\n-error[E0277]: the trait bound `Self: Trait1` is not satisfied\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:22\n+  --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |                      ^^^^^^ required by this bound in `Trait2::Associated`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n-LL | trait Trait2: Trait1 {\n-   |             ++++++++\n+LL | trait Trait2: Sized {\n+   |             +++++++\n \n-error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+error[E0277]: the trait bound `Self: Trait1` is not satisfied\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:5\n+  --> $DIR/issue-74816.rs:9:22\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`\n+   |                      ^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n-LL | trait Trait2: Sized {\n-   |             +++++++\n+LL | trait Trait2: Trait1 {\n+   |             ++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5d0fcbca552d6f09b24fef24ffddd6d132a192cc", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -20,13 +20,13 @@ LL |     for<'a> T: 'a,\n    |                ^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-86483.rs:9:5\n+  --> $DIR/issue-86483.rs:9:19\n    |\n LL | pub trait IceIce<T>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/issue-86483.rs:7:16"}, {"sha": "50f90618e4db70d8c5e58c9f9cc913392fe46021", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -6,10 +6,10 @@ LL | impl Tsized for () {}\n    |\n    = help: the trait `Sized` is not implemented for `[()]`\n note: required by a bound in `Tsized`\n-  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:14\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:17\n    |\n LL | trait Tsized<P: Sized = [Self]> {}\n-   |              ^ required by this bound in `Tsized`\n+   |                 ^^^^^ required by this bound in `Tsized`\n \n error: aborting due to previous error\n "}, {"sha": "875a3fce87c9e9ef410577d04dc07c9be24e7081", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -1,11 +1,21 @@\n-error[E0282]: type annotations needed\n+error[E0283]: type annotations needed\n   --> $DIR/issue-16966.rs:2:5\n    |\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n+   = note: cannot satisfy `_: Any`\n+note: required by a bound in `begin_panic`\n+  --> $SRC_DIR/std/src/panicking.rs:LL:COL\n+   |\n+LL | pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n+   |                       ^^^ required by this bound in `begin_panic`\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider specifying the type argument in the function call\n+   |\n+LL |         $crate::rt::begin_panic::<M>($msg)\n+   |                                +++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "c2f6fc21acd7f6445286232866ef79249a04a8d1", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             ^ required by this bound in `std::hash::Hash::hash`\n+   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "e6cec722978dd609a167cc390773fcbbc29e13a8", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n+error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Next`\n   --> $DIR/issue-23122-2.rs:9:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;"}, {"sha": "d88397fd7e15d2f68639e4e0cfb76d8767875381", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -12,10 +12,10 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |\n    = note: cannot satisfy `_: Tt`\n note: required by a bound in `Tt::const_val`\n-  --> $DIR/issue-54954.rs:5:24\n+  --> $DIR/issue-54954.rs:5:27\n    |\n LL |     const fn const_val<T: Sized>() -> usize {\n-   |                        ^ required by this bound in `Tt::const_val`\n+   |                           ^^^^^ required by this bound in `Tt::const_val`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "26871c98dbef46a0b021a8e6b6dd86b215f028f3", "filename": "src/test/ui/lint/unsafe_code/auxiliary/forge_unsafe_block.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Flint%2Funsafe_code%2Fauxiliary%2Fforge_unsafe_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Flint%2Funsafe_code%2Fauxiliary%2Fforge_unsafe_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funsafe_code%2Fauxiliary%2Fforge_unsafe_block.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -0,0 +1,16 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn forge_unsafe_block(input: TokenStream) -> TokenStream {\n+    let mut output = TokenStream::new();\n+    output.extend(Some(TokenTree::from(Ident::new(\"unsafe\", Span::call_site()))));\n+    output.extend(Some(TokenTree::from(Group::new(Delimiter::Brace, input))));\n+    output\n+}"}, {"sha": "a1bd7b4131984aecf5ced621aace3a2bf7572688", "filename": "src/test/ui/lint/unsafe_code/forge_unsafe_block.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Flint%2Funsafe_code%2Fforge_unsafe_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Flint%2Funsafe_code%2Fforge_unsafe_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funsafe_code%2Fforge_unsafe_block.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// aux-build:forge_unsafe_block.rs\n+\n+#[macro_use]\n+extern crate forge_unsafe_block;\n+\n+unsafe fn foo() {}\n+\n+#[forbid(unsafe_code)]\n+fn main() {\n+    // `forbid` doesn't work for non-user-provided unsafe blocks.\n+    // see `UnsafeCode::check_expr`.\n+    forge_unsafe_block! {\n+        foo();\n+    }\n+}"}, {"sha": "4a4544c16c941d53f53ad234e1b5d8374c72db5d", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -20,11 +20,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:5\n+note: required by a bound in `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:10\n    |\n LL |     fn c<T: ~const Bar>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n@@ -52,11 +52,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:5\n+note: required by a bound in `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:10\n    |\n LL |     fn c<T: ~const Bar>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n LL | fn test3<T: Foo + Bar>() {"}, {"sha": "7e9c5492d1a6bc083e119eedace934dc90768b4e", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -15,9 +15,6 @@ fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     Box::new(x) //~ ERROR mismatched types\n }\n \n-// This case is still subpar:\n-// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n-// Should suggest changing the code from `Pin::new` to `Box::pin`.\n fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n     Pin::new(x) //~ ERROR mismatched types\n     //~^ ERROR E0277"}, {"sha": "aa3175dae2e66cca43d57f73472b30826c67ccce", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -27,23 +27,20 @@ LL |     Box::new(x)\n    = help: use `Box::pin`\n \n error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:14\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:14\n    |\n LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |        - this type parameter\n LL |     Pin::new(x)\n-   |              ^ expected struct `Box`, found type parameter `F`\n+   |     -------- ^ expected struct `Box`, found type parameter `F`\n+   |     |\n+   |     help: use `Box::pin` to pin and box this expression: `Box::pin`\n    |\n    = note:      expected struct `Box<dyn Future<Output = i32> + Send>`\n            found type parameter `F`\n-   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n-help: store this in the heap by calling `Box::new`\n-   |\n-LL |     Pin::new(Box::new(x))\n-   |              +++++++++ +\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:19:5\n    |\n LL |     Pin::new(x)\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n@@ -56,7 +53,7 @@ LL |     pub const fn new(pointer: P) -> Pin<P> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn Future<Output = i32> + Send` cannot be unpinned\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:27:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:24:5\n    |\n LL |     Pin::new(Box::new(x))\n    |     ^^^^^^^^ the trait `Unpin` is not implemented for `dyn Future<Output = i32> + Send`\n@@ -69,7 +66,7 @@ LL |     pub const fn new(pointer: P) -> Pin<P> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/expected-boxed-future-isnt-pinned.rs:31:5\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:28:5\n    |\n LL |   fn zap() -> BoxFuture<'static, i32> {\n    |               ----------------------- expected `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>` because of return type"}, {"sha": "58075ed7caebc5bde335a8a0df33d2dbb3fc0f2a", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -49,10 +49,10 @@ LL |     f_sized(*ref_cl);\n    |\n    = help: the trait `Sized` is not implemented for `dyn Fn()`\n note: required by a bound in `f_sized`\n-  --> $DIR/issue-84973-blacklist.rs:9:12\n+  --> $DIR/issue-84973-blacklist.rs:9:15\n    |\n LL | fn f_sized<T: Sized>(t: T) {}\n-   |            ^ required by this bound in `f_sized`\n+   |               ^^^^^ required by this bound in `f_sized`\n \n error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/issue-84973-blacklist.rs:27:12"}, {"sha": "9e0d4ced01153ff3922534683c91555f67573679", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n@@ -18,7 +18,7 @@ LL |   for _ in &v[1..] {\n LL |   for _ in &mut v[1..] {\n    |            ++++\n \n-error[E0277]: `[i32]` is not an iterator\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n@@ -38,7 +38,7 @@ LL |   for _ in &v[1..] {\n LL |   for _ in &mut v[1..] {\n    |            ++++\n \n-error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n+error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n@@ -58,7 +58,7 @@ LL |   for i2 in &v2[1..] {\n LL |   for i2 in &mut v2[1..] {\n    |             ++++\n \n-error[E0277]: `[K]` is not an iterator\n+error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {"}, {"sha": "4baf198b12fae9251139cd00db67c64a0fec14d5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -5,7 +5,7 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<A, B> = impl Debug;\n-//~^ ERROR the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+//~^ ERROR the trait bound `A: Foo` is not satisfied\n //~| ERROR `A` doesn't implement `Debug`\n //~| ERROR `B` doesn't implement `Debug`\n "}, {"sha": "f21e036edc2ca11a1d6479a7ce666f976c20976b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -10,18 +10,6 @@ note: previous use here\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n-   |\n-   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: Foo, B> = impl Debug;\n-   |           +++++\n-\n error[E0277]: `A` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use9.rs:7:18\n    |\n@@ -46,6 +34,18 @@ help: consider restricting type parameter `B`\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n    |              +++++++++++++++++\n \n+error[E0277]: the trait bound `A: Foo` is not satisfied\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Foo, B> = impl Debug;\n+   |           +++++\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8626b726f47c45c390ced7879688fbe5aae538e5", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -19,10 +19,10 @@ LL | | >(Unique<T>, A);\n    | |________________- doesn't satisfy `Box<dyn Foo>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `dyn Foo: Sized`\n-           which is required by `Box<dyn Foo>: Clone`\n            `dyn Foo: Clone`\n            which is required by `Box<dyn Foo>: Clone`\n+           `dyn Foo: Sized`\n+           which is required by `Box<dyn Foo>: Clone`\n \n error: aborting due to previous error\n "}, {"sha": "0dd439e14e3cd390b79961d164999b9361eaafa9", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -7,10 +7,10 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        this type parameter needs to be `std::marker::Sized`\n    |\n note: required by a bound in `bar`\n-  --> $DIR/unsized-bare-typaram.rs:1:8\n+  --> $DIR/unsized-bare-typaram.rs:1:11\n    |\n LL | fn bar<T: Sized>() { }\n-   |        ^ required by this bound in `bar`\n+   |           ^^^^^ required by this bound in `bar`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn foo<T: ?Sized>() { bar::<T>() }"}, {"sha": "88ba7567402db12d046b225859d026f361d15eb3", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72d66064e77281536588189a916af28a1819b313/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=72d66064e77281536588189a916af28a1819b313", "patch": "@@ -38,10 +38,10 @@ note: required because it appears within the type `Bar<T>`\n LL | struct Bar<T: ?Sized> { data: T }\n    |        ^^^\n note: required by a bound in `is_sized`\n-  --> $DIR/unsized-struct.rs:1:13\n+  --> $DIR/unsized-struct.rs:1:15\n    |\n LL | fn is_sized<T:Sized>() { }\n-   |             ^ required by this bound in `is_sized`\n+   |               ^^^^^ required by this bound in `is_sized`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }"}]}