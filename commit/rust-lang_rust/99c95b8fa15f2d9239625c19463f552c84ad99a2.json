{"sha": "99c95b8fa15f2d9239625c19463f552c84ad99a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Yzk1YjhmYTE1ZjJkOTIzOTYyNWMxOTQ2M2Y1NTJjODRhZDk5YTI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T19:41:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T19:47:54Z"}, "message": "Split hover actions config into its own config struct", "tree": {"sha": "1ce5b6d19086eefba3585306bf794f4ddc86a858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce5b6d19086eefba3585306bf794f4ddc86a858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c95b8fa15f2d9239625c19463f552c84ad99a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c95b8fa15f2d9239625c19463f552c84ad99a2", "html_url": "https://github.com/rust-lang/rust/commit/99c95b8fa15f2d9239625c19463f552c84ad99a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c95b8fa15f2d9239625c19463f552c84ad99a2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b3d93ee29619c090878679d06477fe9d32bc14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3d93ee29619c090878679d06477fe9d32bc14d", "html_url": "https://github.com/rust-lang/rust/commit/8b3d93ee29619c090878679d06477fe9d32bc14d"}], "stats": {"total": 191, "additions": 110, "deletions": 81}, "files": [{"sha": "35050899d19a0a9b8619696e29db57dcf5ef8988", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 55, "deletions": 56, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=99c95b8fa15f2d9239625c19463f552c84ad99a2", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay};\n+use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::{Definition, NameClass, NameRefClass},\n@@ -30,41 +30,11 @@ use crate::{\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct HoverConfig {\n-    pub implementations: bool,\n-    pub references: bool,\n-    pub run: bool,\n-    pub debug: bool,\n-    pub goto_type_def: bool,\n     pub links_in_hover: bool,\n     pub markdown: bool,\n     pub documentation: bool,\n }\n \n-impl HoverConfig {\n-    pub const NO_ACTIONS: Self = Self {\n-        implementations: false,\n-        references: false,\n-        run: false,\n-        debug: false,\n-        goto_type_def: false,\n-        links_in_hover: true,\n-        markdown: true,\n-        documentation: true,\n-    };\n-\n-    pub fn any_actions(&self) -> bool {\n-        self.implementations || self.references || self.runnable() || self.goto_type_def\n-    }\n-\n-    pub fn no_actions(&self) -> bool {\n-        !self.any_actions()\n-    }\n-\n-    pub fn runnable(&self) -> bool {\n-        self.run || self.debug\n-    }\n-}\n-\n #[derive(Debug, Clone)]\n pub enum HoverAction {\n     Runnable(Runnable),\n@@ -95,9 +65,7 @@ pub struct HoverResult {\n pub(crate) fn hover(\n     db: &RootDatabase,\n     position: FilePosition,\n-    links_in_hover: bool,\n-    documentation: bool,\n-    markdown: bool,\n+    config: &HoverConfig,\n ) -> Option<RangeInfo<HoverResult>> {\n     let sema = hir::Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n@@ -156,10 +124,14 @@ pub(crate) fn hover(\n             }\n             _ => None,\n         };\n-        if let Some(markup) =\n-            hover_for_definition(db, definition, famous_defs.as_ref(), documentation)\n-        {\n-            res.markup = process_markup(sema.db, definition, &markup, links_in_hover, markdown);\n+        if let Some(markup) = hover_for_definition(db, definition, famous_defs.as_ref(), config) {\n+            res.markup = process_markup(\n+                sema.db,\n+                definition,\n+                &markup,\n+                config.links_in_hover,\n+                config.markdown,\n+            );\n             if let Some(action) = show_implementations_action(db, definition) {\n                 res.actions.push(action);\n             }\n@@ -181,8 +153,7 @@ pub(crate) fn hover(\n         }\n     }\n \n-    if let res @ Some(_) = hover_for_keyword(&sema, links_in_hover, markdown, documentation, &token)\n-    {\n+    if let res @ Some(_) = hover_for_keyword(&sema, config, &token) {\n         return res;\n     }\n \n@@ -201,7 +172,7 @@ pub(crate) fn hover(\n         }\n     };\n \n-    res.markup = if markdown {\n+    res.markup = if config.markdown {\n         Markup::fenced_block(&ty.display(db))\n     } else {\n         ty.display(db).to_string().into()\n@@ -428,7 +399,7 @@ fn hover_for_definition(\n     db: &RootDatabase,\n     def: Definition,\n     famous_defs: Option<&FamousDefs>,\n-    documentation: bool,\n+    config: &HoverConfig,\n ) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n     let (label, docs) = match def {\n@@ -466,7 +437,7 @@ fn hover_for_definition(\n         Definition::Label(it) => return Some(Markup::fenced_block(&it.name(db))),\n     };\n \n-    return hover_markup(docs.filter(|_| documentation).map(Into::into), label, mod_path);\n+    return hover_markup(docs.filter(|_| config.documentation).map(Into::into), label, mod_path);\n \n     fn label_and_docs<D>(db: &RootDatabase, def: D) -> (String, Option<hir::Documentation>)\n     where\n@@ -502,13 +473,11 @@ fn hover_for_local(it: hir::Local, db: &RootDatabase) -> Option<Markup> {\n }\n \n fn hover_for_keyword(\n-    sema: &hir::Semantics<RootDatabase>,\n-    links_in_hover: bool,\n-    markdown: bool,\n-    documentation: bool,\n+    sema: &Semantics<RootDatabase>,\n+    config: &HoverConfig,\n     token: &SyntaxToken,\n ) -> Option<RangeInfo<HoverResult>> {\n-    if !token.kind().is_keyword() || !documentation {\n+    if !token.kind().is_keyword() || !config.documentation {\n         return None;\n     }\n     let famous_defs = FamousDefs(sema, sema.scope(&token.parent()?).krate());\n@@ -520,8 +489,8 @@ fn hover_for_keyword(\n         sema.db,\n         Definition::ModuleDef(doc_owner.into()),\n         &hover_markup(Some(docs.into()), token.text().into(), None)?,\n-        links_in_hover,\n-        markdown,\n+        config.links_in_hover,\n+        config.markdown,\n     );\n     Some(RangeInfo::new(token.text_range(), HoverResult { markup, actions: Default::default() }))\n }\n@@ -561,16 +530,28 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use ide_db::base_db::FileLoader;\n \n-    use crate::fixture;\n+    use crate::{fixture, HoverConfig};\n \n     fn check_hover_no_result(ra_fixture: &str) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        assert!(analysis.hover(position, true, true, true).unwrap().is_none());\n+        assert!(analysis\n+            .hover(\n+                position,\n+                &HoverConfig { links_in_hover: true, markdown: true, documentation: true }\n+            )\n+            .unwrap()\n+            .is_none());\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true, true, true).unwrap().unwrap();\n+        let hover = analysis\n+            .hover(\n+                position,\n+                &HoverConfig { links_in_hover: true, markdown: true, documentation: true },\n+            )\n+            .unwrap()\n+            .unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -581,7 +562,13 @@ mod tests {\n \n     fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, false, true, true).unwrap().unwrap();\n+        let hover = analysis\n+            .hover(\n+                position,\n+                &HoverConfig { links_in_hover: false, markdown: true, documentation: true },\n+            )\n+            .unwrap()\n+            .unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -592,7 +579,13 @@ mod tests {\n \n     fn check_hover_no_markdown(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true, true, false).unwrap().unwrap();\n+        let hover = analysis\n+            .hover(\n+                position,\n+                &HoverConfig { links_in_hover: true, markdown: false, documentation: true },\n+            )\n+            .unwrap()\n+            .unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -603,7 +596,13 @@ mod tests {\n \n     fn check_actions(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true, true, true).unwrap().unwrap();\n+        let hover = analysis\n+            .hover(\n+                position,\n+                &HoverConfig { links_in_hover: true, markdown: true, documentation: true },\n+            )\n+            .unwrap()\n+            .unwrap();\n         expect.assert_debug_eq(&hover.info.actions)\n     }\n "}, {"sha": "e24a322185288f771fbc67b8cb7cd52b762e1555", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=99c95b8fa15f2d9239625c19463f552c84ad99a2", "patch": "@@ -408,11 +408,9 @@ impl Analysis {\n     pub fn hover(\n         &self,\n         position: FilePosition,\n-        links_in_hover: bool,\n-        documentation: bool,\n-        markdown: bool,\n+        config: &HoverConfig,\n     ) -> Cancellable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover(db, position, links_in_hover, documentation, markdown))\n+        self.with_db(|db| hover::hover(db, position, config))\n     }\n \n     /// Return URL(s) for the documentation of the symbol under the cursor."}, {"sha": "de70959a5381ae80e257f70c1f7ebc13db8b0a50", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=99c95b8fa15f2d9239625c19463f552c84ad99a2", "patch": "@@ -32,6 +32,9 @@ use crate::{\n //\n // However, editor specific config, which the server doesn't know about, should\n // be specified directly in `package.json`.\n+//\n+// To deprecate an option by replacing it with another name use `new_name | `old_name` so that we keep\n+// parsing the old name.\n config_data! {\n     struct ConfigData {\n         /// How imports should be grouped into use statements.\n@@ -309,6 +312,37 @@ impl LensConfig {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct HoverActionsConfig {\n+    pub implementations: bool,\n+    pub references: bool,\n+    pub run: bool,\n+    pub debug: bool,\n+    pub goto_type_def: bool,\n+}\n+\n+impl HoverActionsConfig {\n+    pub const NO_ACTIONS: Self = Self {\n+        implementations: false,\n+        references: false,\n+        run: false,\n+        debug: false,\n+        goto_type_def: false,\n+    };\n+\n+    pub fn any(&self) -> bool {\n+        self.implementations || self.references || self.runnable() || self.goto_type_def\n+    }\n+\n+    pub fn none(&self) -> bool {\n+        !self.any()\n+    }\n+\n+    pub fn runnable(&self) -> bool {\n+        self.run || self.debug\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n pub struct FilesConfig {\n     pub watcher: FilesWatcher,\n@@ -527,7 +561,7 @@ impl Config {\n     pub fn code_action_group(&self) -> bool {\n         self.experimental(\"codeActionGroup\")\n     }\n-    pub fn hover_actions(&self) -> bool {\n+    pub fn experimental_hover_actions(&self) -> bool {\n         self.experimental(\"hoverActions\")\n     }\n     pub fn server_status_notification(&self) -> bool {\n@@ -727,17 +761,21 @@ impl Config {\n             refs: self.data.lens_enable && self.data.lens_references,\n         }\n     }\n-    pub fn highlighting_strings(&self) -> bool {\n-        self.data.highlighting_strings\n-    }\n-    pub fn hover(&self) -> HoverConfig {\n-        HoverConfig {\n+    pub fn hover_actions(&self) -> HoverActionsConfig {\n+        HoverActionsConfig {\n             implementations: self.data.hoverActions_enable\n                 && self.data.hoverActions_implementations,\n             references: self.data.hoverActions_enable && self.data.hoverActions_references,\n             run: self.data.hoverActions_enable && self.data.hoverActions_run,\n             debug: self.data.hoverActions_enable && self.data.hoverActions_debug,\n             goto_type_def: self.data.hoverActions_enable && self.data.hoverActions_gotoTypeDef,\n+        }\n+    }\n+    pub fn highlighting_strings(&self) -> bool {\n+        self.data.highlighting_strings\n+    }\n+    pub fn hover(&self) -> HoverConfig {\n+        HoverConfig {\n             links_in_hover: self.data.hover_linksInHover,\n             markdown: try_or!(\n                 self.caps"}, {"sha": "dcead5f5c3af553f47746c8e1f3d663c39ed29a2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c95b8fa15f2d9239625c19463f552c84ad99a2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=99c95b8fa15f2d9239625c19463f552c84ad99a2", "patch": "@@ -861,13 +861,7 @@ pub(crate) fn handle_hover(\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile::span(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let hover_config = snap.config.hover();\n-    let info = match snap.analysis.hover(\n-        position,\n-        hover_config.links_in_hover,\n-        hover_config.documentation,\n-        hover_config.markdown,\n-    )? {\n+    let info = match snap.analysis.hover(position, &snap.config.hover())? {\n         None => return Ok(None),\n         Some(info) => info,\n     };\n@@ -1487,7 +1481,7 @@ fn show_impl_command_link(\n     snap: &GlobalStateSnapshot,\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    if snap.config.hover().implementations {\n+    if snap.config.hover_actions().implementations {\n         if let Some(nav_data) = snap.analysis.goto_implementation(*position).unwrap_or(None) {\n             let uri = to_proto::url(snap, position.file_id);\n             let line_index = snap.file_line_index(position.file_id).ok()?;\n@@ -1513,7 +1507,7 @@ fn show_ref_command_link(\n     snap: &GlobalStateSnapshot,\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    if snap.config.hover().references {\n+    if snap.config.hover_actions().references {\n         if let Some(ref_search_res) = snap.analysis.find_all_refs(*position, None).unwrap_or(None) {\n             let uri = to_proto::url(snap, position.file_id);\n             let line_index = snap.file_line_index(position.file_id).ok()?;\n@@ -1544,21 +1538,21 @@ fn runnable_action_links(\n     runnable: Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n     let cargo_spec = CargoTargetSpec::for_file(snap, runnable.nav.file_id).ok()?;\n-    let hover_config = snap.config.hover();\n-    if !hover_config.runnable() || should_skip_target(&runnable, cargo_spec.as_ref()) {\n+    let hover_actions_config = snap.config.hover_actions();\n+    if !hover_actions_config.runnable() || should_skip_target(&runnable, cargo_spec.as_ref()) {\n         return None;\n     }\n \n     let action: &'static _ = runnable.action();\n     to_proto::runnable(snap, runnable).ok().map(|r| {\n         let mut group = lsp_ext::CommandLinkGroup::default();\n \n-        if hover_config.run {\n+        if hover_actions_config.run {\n             let run_command = to_proto::command::run_single(&r, action.run_title);\n             group.commands.push(to_command_link(run_command, r.label.clone()));\n         }\n \n-        if hover_config.debug {\n+        if hover_actions_config.debug {\n             let dbg_command = to_proto::command::debug_single(&r);\n             group.commands.push(to_command_link(dbg_command, r.label));\n         }\n@@ -1571,7 +1565,7 @@ fn goto_type_action_links(\n     snap: &GlobalStateSnapshot,\n     nav_targets: &[HoverGotoTypeData],\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    if !snap.config.hover().goto_type_def || nav_targets.is_empty() {\n+    if !snap.config.hover_actions().goto_type_def || nav_targets.is_empty() {\n         return None;\n     }\n \n@@ -1591,7 +1585,7 @@ fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n-    if snap.config.hover().no_actions() || !snap.config.hover_actions() {\n+    if snap.config.hover_actions().none() || !snap.config.experimental_hover_actions() {\n         return Vec::new();\n     }\n "}]}