{"sha": "c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ODZjNmI0ZmZlYzYzNGQzYzBlY2JjMzg2N2E4MThiYzQxYTU5YmU=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T22:30:17Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-09-09T22:30:17Z"}, "message": "Fix more Windows compilation errors.", "tree": {"sha": "619be4968ff0c47757fd72a4b333249254ccdb72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/619be4968ff0c47757fd72a4b333249254ccdb72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "html_url": "https://github.com/rust-lang/rust/commit/c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622dfcceb9328b359e28adaec8192390e494ca1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/622dfcceb9328b359e28adaec8192390e494ca1e", "html_url": "https://github.com/rust-lang/rust/commit/622dfcceb9328b359e28adaec8192390e494ca1e"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "9522a05495c6f32070e0a5cceea8856222bf4461", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "patch": "@@ -116,9 +116,7 @@ impl OwnedHandle {\n     /// Creates a new `OwnedHandle` instance that shares the same underlying file handle\n     /// as the existing `OwnedHandle` instance.\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n-        let handle = self.duplicate(0, false, c::DUPLICATE_SAME_ACCESS)?;\n-\n-        Ok(unsafe { OwnedHandle::from_raw_handle(handle) })\n+        self.duplicate(0, false, c::DUPLICATE_SAME_ACCESS)\n     }\n \n     pub(crate) fn duplicate("}, {"sha": "7acd0af88b39ab62a8e18600306a0f7161f62dde", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "patch": "@@ -93,7 +93,7 @@ impl OwnedSocket {\n         };\n \n         if socket != c::INVALID_SOCKET {\n-            unsafe { Ok(Self(OwnedSocket::from_raw_socket(socket))) }\n+            unsafe { Ok(OwnedSocket::from_raw_socket(socket)) }\n         } else {\n             let error = unsafe { c::WSAGetLastError() };\n \n@@ -117,12 +117,25 @@ impl OwnedSocket {\n             }\n \n             unsafe {\n-                let socket = Self(OwnedSocket::from_raw_socket(socket));\n+                let socket = OwnedSocket::from_raw_socket(socket);\n                 socket.set_no_inherit()?;\n                 Ok(socket)\n             }\n         }\n     }\n+\n+    #[cfg(not(target_vendor = \"uwp\"))]\n+    pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n+        sys::cvt(unsafe {\n+            c::SetHandleInformation(self.as_raw_socket() as c::HANDLE, c::HANDLE_FLAG_INHERIT, 0)\n+        })\n+        .map(drop)\n+    }\n+\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub(crate) fn set_no_inherit(&self) -> io::Result<()> {\n+        Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"Unavailable on UWP\"))\n+    }\n }\n \n /// Returns the last error from the Windows socket interface."}, {"sha": "76a97e89be194d1f9baaa071e7ac1ff2cf7391dd", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "patch": "@@ -229,12 +229,16 @@ impl Handle {\n         Ok(written as usize)\n     }\n \n+    pub fn try_clone(&self) -> io::Result<Self> {\n+        Ok(Self(self.0.try_clone()?))\n+    }\n+\n     pub fn duplicate(\n         &self,\n         access: c::DWORD,\n         inherit: bool,\n         options: c::DWORD,\n-    ) -> io::Result<Handle> {\n+    ) -> io::Result<Self> {\n         Ok(Self(self.0.duplicate(access, inherit, options)?))\n     }\n }"}, {"sha": "75d4b3bd7686298ca717ff491efd471f6debd8b0", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c986c6b4ffec634d3c0ecbc3867a818bc41a59be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=c986c6b4ffec634d3c0ecbc3867a818bc41a59be", "patch": "@@ -129,7 +129,7 @@ impl Socket {\n \n             unsafe {\n                 let socket = Self::from_raw_socket(socket);\n-                socket.set_no_inherit()?;\n+                socket.0.set_no_inherit()?;\n                 Ok(socket)\n             }\n         }\n@@ -371,19 +371,6 @@ impl Socket {\n         }\n     }\n \n-    #[cfg(not(target_vendor = \"uwp\"))]\n-    fn set_no_inherit(&self) -> io::Result<()> {\n-        sys::cvt(unsafe {\n-            c::SetHandleInformation(self.as_raw_socket() as c::HANDLE, c::HANDLE_FLAG_INHERIT, 0)\n-        })\n-        .map(drop)\n-    }\n-\n-    #[cfg(target_vendor = \"uwp\")]\n-    fn set_no_inherit(&self) -> io::Result<()> {\n-        Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"Unavailable on UWP\"))\n-    }\n-\n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n         let how = match how {\n             Shutdown::Write => c::SD_SEND,"}]}