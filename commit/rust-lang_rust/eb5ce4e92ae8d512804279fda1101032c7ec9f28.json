{"sha": "eb5ce4e92ae8d512804279fda1101032c7ec9f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNWNlNGU5MmFlOGQ1MTI4MDQyNzlmZGExMTAxMDMyYzdlYzlmMjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-13T15:03:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-13T15:03:34Z"}, "message": "Remove FunctionDebugContext", "tree": {"sha": "325f7e33aaf929334f3d76affa49222aa498943f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/325f7e33aaf929334f3d76affa49222aa498943f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5ce4e92ae8d512804279fda1101032c7ec9f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5ce4e92ae8d512804279fda1101032c7ec9f28", "html_url": "https://github.com/rust-lang/rust/commit/eb5ce4e92ae8d512804279fda1101032c7ec9f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5ce4e92ae8d512804279fda1101032c7ec9f28/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b5dac4635dd919b8b56bdf1533a10e8423adb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b5dac4635dd919b8b56bdf1533a10e8423adb6", "html_url": "https://github.com/rust-lang/rust/commit/16b5dac4635dd919b8b56bdf1533a10e8423adb6"}], "stats": {"total": 158, "additions": 67, "deletions": 91}, "files": [{"sha": "244e06f76278e901666c0d6b3bcafe7762f92b1f", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=eb5ce4e92ae8d512804279fda1101032c7ec9f28", "patch": "@@ -15,10 +15,6 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     // Declare function\n     let (name, sig) = get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n     let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n-    let mut debug_context = cx\n-        .debug_context\n-        .as_mut()\n-        .map(|debug_context| FunctionDebugContext::new(debug_context, instance, func_id, &name));\n \n     // Make FunctionBuilder\n     let context = &mut cx.cached_context;\n@@ -122,11 +118,12 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n \n     // Define debuginfo for function\n     let isa = cx.module.isa();\n+    let debug_context = &mut cx.debug_context;\n     let unwind_context = &mut cx.unwind_context;\n     tcx.sess.time(\"generate debug info\", || {\n-        debug_context\n-            .as_mut()\n-            .map(|x| x.define(context, isa, &source_info_set, local_map));\n+        if let Some(debug_context) = debug_context {\n+            debug_context.define_function(instance, func_id, &name, isa, context, &source_info_set, local_map);\n+        }\n         unwind_context.add_function(func_id, &context, isa);\n     });\n "}, {"sha": "1a84f6584d48d0cd311ea6988281b83ed5f13530", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=eb5ce4e92ae8d512804279fda1101032c7ec9f28", "patch": "@@ -119,21 +119,21 @@ impl<'tcx> DebugContext<'tcx> {\n             AttributeValue::Udata(loc.col.to_usize() as u64),\n         );\n     }\n-}\n \n-impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     pub(super) fn create_debug_lines(\n         &mut self,\n-        context: &Context,\n         isa: &dyn cranelift_codegen::isa::TargetIsa,\n+        symbol: usize,\n+        entry_id: UnitEntryId,\n+        context: &Context,\n+        function_span: Span,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n     ) -> CodeOffset {\n-        let tcx = self.debug_context.tcx;\n-        let line_program = &mut self.debug_context.dwarf.unit.line_program;\n+        let tcx = self.tcx;\n+        let line_program = &mut self.dwarf.unit.line_program;\n         let func = &context.func;\n \n-        let line_strings = &mut self.debug_context.dwarf.line_strings;\n-        let function_span = self.mir.span;\n+        let line_strings = &mut self.dwarf.line_strings;\n         let mut last_span = None;\n         let mut last_file = None;\n         let mut create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n@@ -189,7 +189,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         };\n \n         line_program.begin_sequence(Some(Address::Symbol {\n-            symbol: self.symbol,\n+            symbol,\n             addend: 0,\n         }));\n \n@@ -202,7 +202,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                     let source_info = *source_info_set.get_index(loc.bits() as usize).unwrap();\n                     create_row_for_span(line_program, source_info.span);\n                 } else {\n-                    create_row_for_span(line_program, self.mir.span);\n+                    create_row_for_span(line_program, function_span);\n                 }\n                 func_end = end;\n             }\n@@ -223,7 +223,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                         let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n                         create_row_for_span(line_program, source_info.span);\n                     } else {\n-                        create_row_for_span(line_program, self.mir.span);\n+                        create_row_for_span(line_program, function_span);\n                     }\n                     func_end = offset + size;\n                 }\n@@ -233,18 +233,17 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n \n         assert_ne!(func_end, 0);\n \n-        let entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n+        let entry = self.dwarf.unit.get_mut(entry_id);\n         entry.set(\n             gimli::DW_AT_low_pc,\n             AttributeValue::Address(Address::Symbol {\n-                symbol: self.symbol,\n+                symbol,\n                 addend: 0,\n             }),\n         );\n         entry.set(gimli::DW_AT_high_pc, AttributeValue::Udata(func_end as u64));\n \n-        self.debug_context\n-            .emit_location(self.entry_id, self.mir.span);\n+        self.emit_location(entry_id, function_span);\n \n         func_end\n     }"}, {"sha": "bfcb7cfd2146d1615cf9448fd163871af1b17d2e", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 49, "deletions": 69, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=eb5ce4e92ae8d512804279fda1101032c7ec9f28", "patch": "@@ -233,34 +233,44 @@ impl<'tcx> DebugContext<'tcx> {\n \n         type_id\n     }\n-}\n \n-pub(crate) struct FunctionDebugContext<'a, 'tcx> {\n-    debug_context: &'a mut DebugContext<'tcx>,\n-    entry_id: UnitEntryId,\n-    symbol: usize,\n-    instance: Instance<'tcx>,\n-    mir: &'tcx mir::Body<'tcx>,\n-}\n+    fn define_local(&mut self, scope: UnitEntryId, name: String, ty: Ty<'tcx>) -> UnitEntryId {\n+        let dw_ty = self.dwarf_ty(ty);\n+\n+        let var_id = self\n+            .dwarf\n+            .unit\n+            .add(scope, gimli::DW_TAG_variable);\n+        let var_entry = self.dwarf.unit.get_mut(var_id);\n+\n+        var_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n+        var_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(dw_ty));\n \n-impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n-    pub(crate) fn new(\n-        debug_context: &'a mut DebugContext<'tcx>,\n+        var_id\n+    }\n+\n+    pub(crate) fn define_function(\n+        &mut self,\n         instance: Instance<'tcx>,\n         func_id: FuncId,\n         name: &str,\n-    ) -> Self {\n-        let mir = debug_context.tcx.instance_mir(instance.def);\n+        isa: &dyn TargetIsa,\n+        context: &Context,\n+        source_info_set: &indexmap::IndexSet<SourceInfo>,\n+        local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n+    ) {\n+        let symbol = func_id.as_u32() as usize;\n+        let mir = self.tcx.instance_mir(instance.def);\n \n-        // FIXME: add to appropriate scope intead of root\n-        let scope = debug_context.dwarf.unit.root();\n+        // FIXME: add to appropriate scope instead of root\n+        let scope = self.dwarf.unit.root();\n \n-        let entry_id = debug_context\n+        let entry_id = self\n             .dwarf\n             .unit\n             .add(scope, gimli::DW_TAG_subprogram);\n-        let entry = debug_context.dwarf.unit.get_mut(entry_id);\n-        let name_id = debug_context.dwarf.strings.add(name);\n+        let entry = self.dwarf.unit.get_mut(entry_id);\n+        let name_id = self.dwarf.strings.add(name);\n         // Gdb requires DW_AT_name. Otherwise the DW_TAG_subprogram is skipped.\n         entry.set(\n             gimli::DW_AT_name,\n@@ -271,46 +281,14 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             AttributeValue::StringRef(name_id),\n         );\n \n-        FunctionDebugContext {\n-            debug_context,\n-            entry_id,\n-            symbol: func_id.as_u32() as usize,\n-            instance,\n-            mir,\n-        }\n-    }\n-\n-    fn define_local(&mut self, name: String, ty: Ty<'tcx>) -> UnitEntryId {\n-        let dw_ty = self.debug_context.dwarf_ty(ty);\n-\n-        let var_id = self\n-            .debug_context\n-            .dwarf\n-            .unit\n-            .add(self.entry_id, gimli::DW_TAG_variable);\n-        let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n-\n-        var_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n-        var_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(dw_ty));\n-\n-        var_id\n-    }\n-\n-    pub(crate) fn define(\n-        &mut self,\n-        context: &Context,\n-        isa: &dyn TargetIsa,\n-        source_info_set: &indexmap::IndexSet<SourceInfo>,\n-        local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n-    ) {\n-        let end = self.create_debug_lines(context, isa, source_info_set);\n+        let end = self.create_debug_lines(isa, symbol, entry_id, context, mir.span, source_info_set);\n \n-        self.debug_context\n+        self\n             .unit_range_list\n             .0\n             .push(Range::StartLength {\n                 begin: Address::Symbol {\n-                    symbol: self.symbol,\n+                    symbol,\n                     addend: 0,\n                 },\n                 length: u64::from(end),\n@@ -320,10 +298,10 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             return; // Not yet implemented for the AArch64 backend.\n         }\n \n-        let func_entry = self.debug_context.dwarf.unit.get_mut(self.entry_id);\n+        let func_entry = self.dwarf.unit.get_mut(entry_id);\n         // Gdb requires both DW_AT_low_pc and DW_AT_high_pc. Otherwise the DW_TAG_subprogram is skipped.\n         func_entry.set(gimli::DW_AT_low_pc, AttributeValue::Address(Address::Symbol {\n-            symbol: self.symbol,\n+            symbol,\n             addend: 0,\n         }));\n         // Using Udata for DW_AT_high_pc requires at least DWARF4\n@@ -340,11 +318,11 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             };\n             let name = format!(\"{}{}\", base_name, i);\n \n-            let dw_ty = self.debug_context.dwarf_ty_for_clif_ty(param.value_type);\n+            let dw_ty = self.dwarf_ty_for_clif_ty(param.value_type);\n             let loc = translate_loc(isa, context.func.locations[val], &context.func.stack_slots).unwrap();\n \n-            let arg_id = self.debug_context.dwarf.unit.add(self.entry_id, gimli::DW_TAG_formal_parameter);\n-            let var_entry = self.debug_context.dwarf.unit.get_mut(arg_id);\n+            let arg_id = self.dwarf.unit.add(entry_id, gimli::DW_TAG_formal_parameter);\n+            let var_entry = self.dwarf.unit.get_mut(arg_id);\n \n             var_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n             var_entry.set(gimli::DW_AT_type, AttributeValue::UnitRef(dw_ty));\n@@ -355,17 +333,18 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         if false {\n             let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n \n-            for (local, _local_decl) in self.mir.local_decls.iter_enumerated() {\n-                let ty = self.debug_context.tcx.subst_and_normalize_erasing_regions(\n-                    self.instance.substs,\n+            for (local, _local_decl) in mir.local_decls.iter_enumerated() {\n+                let ty = self.tcx.subst_and_normalize_erasing_regions(\n+                    instance.substs,\n                     ty::ParamEnv::reveal_all(),\n-                    &self.mir.local_decls[local].ty,\n+                    &mir.local_decls[local].ty,\n                 );\n-                let var_id = self.define_local(format!(\"{:?}\", local), ty);\n+                let var_id = self.define_local(entry_id, format!(\"{:?}\", local), ty);\n \n                 let location = place_location(\n                     self,\n                     isa,\n+                    symbol,\n                     context,\n                     &local_map,\n                     &value_labels_ranges,\n@@ -375,7 +354,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                     },\n                 );\n \n-                let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n+                let var_entry = self.dwarf.unit.get_mut(var_id);\n                 var_entry.set(gimli::DW_AT_location, location);\n             }\n         }\n@@ -384,9 +363,10 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     }\n }\n \n-fn place_location<'a, 'tcx>(\n-    func_debug_ctx: &mut FunctionDebugContext<'a, 'tcx>,\n+fn place_location<'tcx>(\n+    debug_context: &mut DebugContext<'tcx>,\n     isa: &dyn TargetIsa,\n+    symbol: usize,\n     context: &Context,\n     local_map: &FxHashMap<mir::Local, CPlace<'tcx>>,\n     #[allow(rustc::default_hash_types)]\n@@ -404,18 +384,18 @@ fn place_location<'a, 'tcx>(\n                         .iter()\n                         .map(|value_loc_range| Location::StartEnd {\n                             begin: Address::Symbol {\n-                                symbol: func_debug_ctx.symbol,\n+                                symbol,\n                                 addend: i64::from(value_loc_range.start),\n                             },\n                             end: Address::Symbol {\n-                                symbol: func_debug_ctx.symbol,\n+                                symbol,\n                                 addend: i64::from(value_loc_range.end),\n                             },\n                             data: translate_loc(isa, value_loc_range.loc, &context.func.stack_slots).unwrap(),\n                         })\n                         .collect(),\n                 );\n-                let loc_list_id = func_debug_ctx.debug_context.dwarf.unit.locations.add(loc_list);\n+                let loc_list_id = debug_context.dwarf.unit.locations.add(loc_list);\n \n                 AttributeValue::LocationListRef(loc_list_id)\n             } else {"}, {"sha": "517ccd41706ce38af844308e952347b888c1638a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5ce4e92ae8d512804279fda1101032c7ec9f28/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=eb5ce4e92ae8d512804279fda1101032c7ec9f28", "patch": "@@ -106,7 +106,7 @@ mod prelude {\n     pub(crate) use crate::base::{trans_operand, trans_place};\n     pub(crate) use crate::cast::*;\n     pub(crate) use crate::common::*;\n-    pub(crate) use crate::debuginfo::{DebugContext, FunctionDebugContext, UnwindContext};\n+    pub(crate) use crate::debuginfo::{DebugContext, UnwindContext};\n     pub(crate) use crate::pointer::Pointer;\n     pub(crate) use crate::trap::*;\n     pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};"}]}