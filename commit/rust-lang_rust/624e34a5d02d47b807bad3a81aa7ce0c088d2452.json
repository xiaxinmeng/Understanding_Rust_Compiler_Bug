{"sha": "624e34a5d02d47b807bad3a81aa7ce0c088d2452", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNGUzNGE1ZDAyZDQ3YjgwN2JhZDNhODFhYTdjZTBjMDg4ZDI0NTI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-23T17:00:35Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-23T17:00:35Z"}, "message": "Account for const generalisation in nll_relate", "tree": {"sha": "03a6a11dd60bb999821036aae11a58511062abcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a6a11dd60bb999821036aae11a58511062abcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/624e34a5d02d47b807bad3a81aa7ce0c088d2452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/624e34a5d02d47b807bad3a81aa7ce0c088d2452", "html_url": "https://github.com/rust-lang/rust/commit/624e34a5d02d47b807bad3a81aa7ce0c088d2452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/624e34a5d02d47b807bad3a81aa7ce0c088d2452/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12f68e6987c4669b90a6cdac1643b99b6c677aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/12f68e6987c4669b90a6cdac1643b99b6c677aea", "html_url": "https://github.com/rust-lang/rust/commit/12f68e6987c4669b90a6cdac1643b99b6c677aea"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "51ae4e49493f7c17565b5224cc218f7f7086f487", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/624e34a5d02d47b807bad3a81aa7ce0c088d2452/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/624e34a5d02d47b807bad3a81aa7ce0c088d2452/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=624e34a5d02d47b807bad3a81aa7ce0c088d2452", "patch": "@@ -494,7 +494,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 if sub_vid == self.for_vid_sub_root {\n                     // If sub-roots are equal, then `for_vid` and\n                     // `vid` are related via subtyping.\n-                    return Err(TypeError::CyclicTy(self.root_ty));\n+                    Err(TypeError::CyclicTy(self.root_ty))\n                 } else {\n                     match variables.probe(vid) {\n                         TypeVariableValue::Known { value: u } => {\n@@ -527,7 +527,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                             let u = self.tcx().mk_ty_var(new_var_id);\n                             debug!(\"generalize: replacing original vid={:?} with new={:?}\",\n                                    vid, u);\n-                            return Ok(u);\n+                            Ok(u)\n                         }\n                     }\n                 }\n@@ -616,8 +616,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                                 origin: var_value.origin,\n                                 val: ConstVariableValue::Unknown { universe: self.for_universe },\n                             });\n-                            let u = self.tcx().mk_const_var(new_var_id, c.ty);\n-                            return Ok(u);\n+                            Ok(self.tcx().mk_const_var(new_var_id, c.ty))\n                         }\n                     }\n                 }"}, {"sha": "d6f76e9ee346c6f669308872cfae6a54f59e13f2", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/624e34a5d02d47b807bad3a81aa7ce0c088d2452/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/624e34a5d02d47b807bad3a81aa7ce0c088d2452/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=624e34a5d02d47b807bad3a81aa7ce0c088d2452", "patch": "@@ -28,6 +28,7 @@ use crate::ty::fold::{TypeFoldable, TypeVisitor};\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::infer::{ConstVariableValue, ConstVarValue};\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::fx::FxHashMap;\n use std::fmt::Debug;\n@@ -324,7 +325,7 @@ where\n         let vid = pair.vid();\n         let value_ty = pair.value_ty();\n \n-        // FIXME -- this logic assumes invariance, but that is wrong.\n+        // FIXME(invariance) -- this logic assumes invariance, but that is wrong.\n         // This only presently applies to chalk integration, as NLL\n         // doesn't permit type variables to appear on both sides (and\n         // doesn't use lazy norm).\n@@ -629,6 +630,7 @@ where\n                 // Forbid inference variables in the RHS.\n                 bug!(\"unexpected inference var {:?}\", b)\n             }\n+            // FIXME(invariance): see the related FIXME above.\n             _ => self.infcx.super_combine_consts(self, a, b)\n         }\n     }\n@@ -997,11 +999,24 @@ where\n         _: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n         match a.val {\n+            ConstValue::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n+                bug!(\n+                    \"unexpected inference variable encountered in NLL generalization: {:?}\",\n+                    a\n+                );\n+            }\n             ConstValue::Infer(InferConst::Var(vid)) => {\n                 let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n-                match variable_table.probe_value(vid).val.known() {\n+                let var_value = variable_table.probe_value(vid);\n+                match var_value.val.known() {\n                     Some(u) => self.relate(&u, &u),\n-                    None => Ok(a),\n+                    None => {\n+                        let new_var_id = variable_table.new_key(ConstVarValue {\n+                            origin: var_value.origin,\n+                            val: ConstVariableValue::Unknown { universe: self.universe },\n+                        });\n+                        Ok(self.tcx().mk_const_var(new_var_id, a.ty))\n+                    }\n                 }\n             }\n             _ => relate::super_relate_consts(self, a, a),"}]}