{"sha": "9f070531a6b587b4a5fe9099d5a0623e4d20597b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDcwNTMxYTZiNTg3YjRhNWZlOTA5OWQ1YTA2MjNlNGQyMDU5N2I=", "commit": {"author": {"name": "R\u00fcdiger Herrmann", "email": "ruediger.herrmann@gmx.de", "date": "2020-12-22T00:15:50Z"}, "committer": {"name": "R\u00fcdiger Herrmann", "email": "ruediger.herrmann@gmx.de", "date": "2020-12-22T13:51:17Z"}, "message": "Clean up descriptions for settings\n\nUse two consecutive newlines (`\\n\\n`) to actually continue text on a\nnew line.\n\nUse proper markup to reference related settings.\n\nConsistently format references to files, editor commands, command line\narguments, files, etc. as `code`.\n\nFix typos, add missing full-stops, add missing default values.", "tree": {"sha": "a7f2f169634759e074b59e9ad0f7a4dadebf404e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f2f169634759e074b59e9ad0f7a4dadebf404e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f070531a6b587b4a5fe9099d5a0623e4d20597b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f070531a6b587b4a5fe9099d5a0623e4d20597b", "html_url": "https://github.com/rust-lang/rust/commit/9f070531a6b587b4a5fe9099d5a0623e4d20597b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f070531a6b587b4a5fe9099d5a0623e4d20597b/comments", "author": {"login": "rherrmann", "id": 607182, "node_id": "MDQ6VXNlcjYwNzE4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/607182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rherrmann", "html_url": "https://github.com/rherrmann", "followers_url": "https://api.github.com/users/rherrmann/followers", "following_url": "https://api.github.com/users/rherrmann/following{/other_user}", "gists_url": "https://api.github.com/users/rherrmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/rherrmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rherrmann/subscriptions", "organizations_url": "https://api.github.com/users/rherrmann/orgs", "repos_url": "https://api.github.com/users/rherrmann/repos", "events_url": "https://api.github.com/users/rherrmann/events{/privacy}", "received_events_url": "https://api.github.com/users/rherrmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rherrmann", "id": 607182, "node_id": "MDQ6VXNlcjYwNzE4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/607182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rherrmann", "html_url": "https://github.com/rherrmann", "followers_url": "https://api.github.com/users/rherrmann/followers", "following_url": "https://api.github.com/users/rherrmann/following{/other_user}", "gists_url": "https://api.github.com/users/rherrmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/rherrmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rherrmann/subscriptions", "organizations_url": "https://api.github.com/users/rherrmann/orgs", "repos_url": "https://api.github.com/users/rherrmann/repos", "events_url": "https://api.github.com/users/rherrmann/events{/privacy}", "received_events_url": "https://api.github.com/users/rherrmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba71685343ccdca9de3899d2ae634aaa8185c359", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba71685343ccdca9de3899d2ae634aaa8185c359", "html_url": "https://github.com/rust-lang/rust/commit/ba71685343ccdca9de3899d2ae634aaa8185c359"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "11cdae57f77ca20ea8d6a7d09aed4afd3ba237ce", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9f070531a6b587b4a5fe9099d5a0623e4d20597b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f070531a6b587b4a5fe9099d5a0623e4d20597b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9f070531a6b587b4a5fe9099d5a0623e4d20597b", "patch": "@@ -33,7 +33,7 @@ config_data! {\n         callInfo_full: bool = \"true\",\n \n         /// Automatically refresh project info via `cargo metadata` on\n-        /// Cargo.toml changes.\n+        /// `Cargo.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n         /// Activate all available features.\n         cargo_allFeatures: bool          = \"false\",\n@@ -52,7 +52,7 @@ config_data! {\n         /// Run specified `cargo check` command for diagnostics on save.\n         checkOnSave_enable: bool                         = \"true\",\n         /// Check with all features (will be passed as `--all-features`).\n-        /// Defaults to `rust-analyzer.cargo.allFeatures`.\n+        /// Defaults to `#rust-analyzer.cargo.allFeatures#`.\n         checkOnSave_allFeatures: Option<bool>            = \"null\",\n         /// Check all targets and tests (will be passed as `--all-targets`).\n         checkOnSave_allTargets: bool                     = \"true\",\n@@ -61,12 +61,12 @@ config_data! {\n         /// Do not activate the `default` feature.\n         checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n         /// Check for a specific target. Defaults to\n-        /// `rust-analyzer.cargo.target`.\n+        /// `#rust-analyzer.cargo.target#`.\n         checkOnSave_target: Option<String>               = \"null\",\n         /// Extra arguments for `cargo check`.\n         checkOnSave_extraArgs: Vec<String>               = \"[]\",\n         /// List of features to activate. Defaults to\n-        /// `rust-analyzer.cargo.features`.\n+        /// `#rust-analyzer.cargo.features#`.\n         checkOnSave_features: Option<Vec<String>>        = \"null\",\n         /// Advanced option, fully override the command rust-analyzer uses for\n         /// checking. The command should include `--message-format=json` or\n@@ -80,7 +80,7 @@ config_data! {\n         /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n         completion_postfix_enable: bool          = \"true\",\n         /// Toggles the additional completions that automatically add imports when completed.\n-        /// Note that your client have to specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n+        /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n         completion_autoimport_enable: bool       = \"true\",\n \n         /// Whether to show native rust-analyzer diagnostics.\n@@ -90,13 +90,13 @@ config_data! {\n         diagnostics_enableExperimental: bool    = \"true\",\n         /// List of rust-analyzer diagnostics to disable.\n         diagnostics_disabled: FxHashSet<String> = \"[]\",\n-        /// List of warnings that should be displayed with info severity.\\nThe\n+        /// List of warnings that should be displayed with info severity.\\n\\nThe\n         /// warnings will be indicated by a blue squiggly underline in code and\n-        /// a blue icon in the problems panel.\n+        /// a blue icon in the `Problems Panel`.\n         diagnostics_warningsAsHint: Vec<String> = \"[]\",\n-        /// List of warnings that should be displayed with hint severity.\\nThe\n+        /// List of warnings that should be displayed with hint severity.\\n\\nThe\n         /// warnings will be indicated by faded text or three dots in code and\n-        /// will not show up in the problems panel.\n+        /// will not show up in the `Problems Panel`.\n         diagnostics_warningsAsInfo: Vec<String> = \"[]\",\n \n         /// Controls file watching implementation.\n@@ -121,7 +121,7 @@ config_data! {\n \n         /// Whether to show inlay type hints for method chains.\n         inlayHints_chainingHints: bool      = \"true\",\n-        /// Maximum length for inlay hints.\n+        /// Maximum length for inlay hints. Default is unlimited.\n         inlayHints_maxLength: Option<usize> = \"null\",\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n@@ -145,27 +145,27 @@ config_data! {\n         lens_methodReferences: bool = \"false\",\n \n         /// Disable project auto-discovery in favor of explicitly specified set\n-        /// of projects.  \\nElements must be paths pointing to Cargo.toml,\n-        /// rust-project.json, or JSON objects in rust-project.json format.\n+        /// of projects.\\n\\nElements must be paths pointing to `Cargo.toml`,\n+        /// `rust-project.json`, or JSON objects in `rust-project.json` format.\n         linkedProjects: Vec<ManifestOrProjectJson> = \"[]\",\n-        /// Number of syntax trees rust-analyzer keeps in memory.\n+        /// Number of syntax trees rust-analyzer keeps in memory.  Defaults to 128.\n         lruCapacity: Option<usize>                 = \"null\",\n         /// Whether to show `can't find Cargo.toml` error message.\n         notifications_cargoTomlNotFound: bool      = \"true\",\n-        /// Enable Proc macro support, cargo.loadOutDirsFromCheck must be\n+        /// Enable Proc macro support, `#rust-analyzer.cargo.loadOutDirsFromCheck#` must be\n         /// enabled.\n         procMacro_enable: bool                     = \"false\",\n \n         /// Command to be executed instead of 'cargo' for runnables.\n         runnables_overrideCargo: Option<String> = \"null\",\n         /// Additional arguments to be passed to cargo for runnables such as\n-        /// tests or binaries.\\nFor example, it may be '--release'.\n+        /// tests or binaries.\\nFor example, it may be `--release`.\n         runnables_cargoExtraArgs: Vec<String>   = \"[]\",\n \n         /// Path to the rust compiler sources, for usage in rustc_private projects.\n         rustcSource : Option<String> = \"null\",\n \n-        /// Additional arguments to rustfmt.\n+        /// Additional arguments to `rustfmt`.\n         rustfmt_extraArgs: Vec<String>               = \"[]\",\n         /// Advanced option, fully override the command rust-analyzer uses for\n         /// formatting.\n@@ -758,7 +758,7 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             ],\n             \"enumDescriptions\": [\n                 \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n-                \"Prefix all import paths with `self` if they don't begin with `self`, `super`, `crate` or a crate name\",\n+                \"Prefix all import paths with `self` if they don't begin with `self`, `super`, `crate` or a crate name.\",\n                 \"Force import paths to be absolute by always starting them with `crate` or the crate name they refer to.\"\n             ],\n         },"}, {"sha": "3025dc8d6908dade734d5f9e0d60edd29e8b8cd1", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f070531a6b587b4a5fe9099d5a0623e4d20597b/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/9f070531a6b587b4a5fe9099d5a0623e4d20597b/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=9f070531a6b587b4a5fe9099d5a0623e4d20597b", "patch": "@@ -5,7 +5,7 @@ rust-analyzer.assist.importPrefix (default: `\"plain\"`)::\n rust-analyzer.callInfo.full (default: `true`)::\n  Show function name and docs in parameter hints.\n rust-analyzer.cargo.autoreload (default: `true`)::\n- Automatically refresh project info via `cargo metadata` on  Cargo.toml changes.\n+ Automatically refresh project info via `cargo metadata` on  `Cargo.toml` changes.\n rust-analyzer.cargo.allFeatures (default: `false`)::\n  Activate all available features.\n rust-analyzer.cargo.features (default: `[]`)::\n@@ -21,19 +21,19 @@ rust-analyzer.cargo.noSysroot (default: `false`)::\n rust-analyzer.checkOnSave.enable (default: `true`)::\n  Run specified `cargo check` command for diagnostics on save.\n rust-analyzer.checkOnSave.allFeatures (default: `null`)::\n- Check with all features (will be passed as `--all-features`).  Defaults to `rust-analyzer.cargo.allFeatures`.\n+ Check with all features (will be passed as `--all-features`).  Defaults to `#rust-analyzer.cargo.allFeatures#`.\n rust-analyzer.checkOnSave.allTargets (default: `true`)::\n  Check all targets and tests (will be passed as `--all-targets`).\n rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n  Cargo command to use for `cargo check`.\n rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n  Do not activate the `default` feature.\n rust-analyzer.checkOnSave.target (default: `null`)::\n- Check for a specific target. Defaults to  `rust-analyzer.cargo.target`.\n+ Check for a specific target. Defaults to  `#rust-analyzer.cargo.target#`.\n rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n  Extra arguments for `cargo check`.\n rust-analyzer.checkOnSave.features (default: `null`)::\n- List of features to activate. Defaults to  `rust-analyzer.cargo.features`.\n+ List of features to activate. Defaults to  `#rust-analyzer.cargo.features#`.\n rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n  Advanced option, fully override the command rust-analyzer uses for  checking. The command should include `--message-format=json` or  similar option.\n rust-analyzer.completion.addCallArgumentSnippets (default: `true`)::\n@@ -43,17 +43,17 @@ rust-analyzer.completion.addCallParenthesis (default: `true`)::\n rust-analyzer.completion.postfix.enable (default: `true`)::\n  Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n rust-analyzer.completion.autoimport.enable (default: `true`)::\n- Toggles the additional completions that automatically add imports when completed.  Note that your client have to specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n+ Toggles the additional completions that automatically add imports when completed.  Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n rust-analyzer.diagnostics.enable (default: `true`)::\n  Whether to show native rust-analyzer diagnostics.\n rust-analyzer.diagnostics.enableExperimental (default: `true`)::\n  Whether to show experimental rust-analyzer diagnostics that might  have more false positives than usual.\n rust-analyzer.diagnostics.disabled (default: `[]`)::\n  List of rust-analyzer diagnostics to disable.\n rust-analyzer.diagnostics.warningsAsHint (default: `[]`)::\n- List of warnings that should be displayed with info severity.\\nThe  warnings will be indicated by a blue squiggly underline in code and  a blue icon in the problems panel.\n+ List of warnings that should be displayed with info severity.\\n\\nThe  warnings will be indicated by a blue squiggly underline in code and  a blue icon in the `Problems Panel`.\n rust-analyzer.diagnostics.warningsAsInfo (default: `[]`)::\n- List of warnings that should be displayed with hint severity.\\nThe  warnings will be indicated by faded text or three dots in code and  will not show up in the problems panel.\n+ List of warnings that should be displayed with hint severity.\\n\\nThe  warnings will be indicated by faded text or three dots in code and  will not show up in the `Problems Panel`.\n rust-analyzer.files.watcher (default: `\"client\"`)::\n  Controls file watching implementation.\n rust-analyzer.hoverActions.debug (default: `true`)::\n@@ -71,7 +71,7 @@ rust-analyzer.hoverActions.linksInHover (default: `true`)::\n rust-analyzer.inlayHints.chainingHints (default: `true`)::\n  Whether to show inlay type hints for method chains.\n rust-analyzer.inlayHints.maxLength (default: `null`)::\n- Maximum length for inlay hints.\n+ Maximum length for inlay hints. Default is unlimited.\n rust-analyzer.inlayHints.parameterHints (default: `true`)::\n  Whether to show function parameter name inlay hints at the call  site.\n rust-analyzer.inlayHints.typeHints (default: `true`)::\n@@ -87,20 +87,20 @@ rust-analyzer.lens.run (default: `true`)::\n rust-analyzer.lens.methodReferences (default: `false`)::\n  Whether to show `Method References` lens. Only applies when  `#rust-analyzer.lens.enable#` is set.\n rust-analyzer.linkedProjects (default: `[]`)::\n- Disable project auto-discovery in favor of explicitly specified set  of projects.  \\nElements must be paths pointing to Cargo.toml,  rust-project.json, or JSON objects in rust-project.json format.\n+ Disable project auto-discovery in favor of explicitly specified set  of projects.\\n\\nElements must be paths pointing to `Cargo.toml`,  `rust-project.json`, or JSON objects in `rust-project.json` format.\n rust-analyzer.lruCapacity (default: `null`)::\n- Number of syntax trees rust-analyzer keeps in memory.\n+ Number of syntax trees rust-analyzer keeps in memory.  Defaults to 128.\n rust-analyzer.notifications.cargoTomlNotFound (default: `true`)::\n  Whether to show `can't find Cargo.toml` error message.\n rust-analyzer.procMacro.enable (default: `false`)::\n- Enable Proc macro support, cargo.loadOutDirsFromCheck must be  enabled.\n+ Enable Proc macro support, `#rust-analyzer.cargo.loadOutDirsFromCheck#` must be  enabled.\n rust-analyzer.runnables.overrideCargo (default: `null`)::\n  Command to be executed instead of 'cargo' for runnables.\n rust-analyzer.runnables.cargoExtraArgs (default: `[]`)::\n- Additional arguments to be passed to cargo for runnables such as  tests or binaries.\\nFor example, it may be '--release'.\n+ Additional arguments to be passed to cargo for runnables such as  tests or binaries.\\nFor example, it may be `--release`.\n rust-analyzer.rustcSource (default: `null`)::\n  Path to the rust compiler sources, for usage in rustc_private projects.\n rust-analyzer.rustfmt.extraArgs (default: `[]`)::\n- Additional arguments to rustfmt.\n+ Additional arguments to `rustfmt`.\n rust-analyzer.rustfmt.overrideCommand (default: `null`)::\n  Advanced option, fully override the command rust-analyzer uses for  formatting."}, {"sha": "e410fd168b4095eb02976f23b373b8c1f7e8e56d", "filename": "editors/code/package.json", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9f070531a6b587b4a5fe9099d5a0623e4d20597b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/9f070531a6b587b4a5fe9099d5a0623e4d20597b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=9f070531a6b587b4a5fe9099d5a0623e4d20597b", "patch": "@@ -250,12 +250,12 @@\n                         }\n                     ],\n                     \"default\": null,\n-                    \"description\": \"Environment variables passed to the runnable launched using `Test ` or `Debug` lens or `rust-analyzer.run` command.\"\n+                    \"markdownDescription\": \"Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command.\"\n                 },\n                 \"rust-analyzer.inlayHints.enable\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"Whether to show inlay hints\"\n+                    \"description\": \"Whether to show inlay hints.\"\n                 },\n                 \"rust-analyzer.updates.channel\": {\n                     \"type\": \"string\",\n@@ -265,23 +265,23 @@\n                     ],\n                     \"default\": \"stable\",\n                     \"markdownEnumDescriptions\": [\n-                        \"`\\\"stable\\\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general\",\n-                        \"`\\\"nightly\\\"` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**\"\n+                        \"`stable` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general.\",\n+                        \"`nightly` updates are shipped daily (extension updates automatically by downloading artifacts directly from GitHub), they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**.\"\n                     ],\n-                    \"markdownDescription\": \"Choose `\\\"nightly\\\"` updates to get the latest features and bug fixes every day. While `\\\"stable\\\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs\"\n+                    \"markdownDescription\": \"Choose `nightly` updates to get the latest features and bug fixes every day. While `stable` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs.\"\n                 },\n                 \"rust-analyzer.updates.askBeforeDownload\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"Whether to ask for permission before downloading any files from the Internet\"\n+                    \"description\": \"Whether to ask for permission before downloading any files from the Internet.\"\n                 },\n                 \"rust-analyzer.serverPath\": {\n                     \"type\": [\n                         \"null\",\n                         \"string\"\n                     ],\n                     \"default\": null,\n-                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \\\"rust-analyzer.updates.channel\\\" setting is not used\"\n+                    \"markdownDescription\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then `#rust-analyzer.updates.channel#` setting is not used\"\n                 },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\",\n@@ -297,10 +297,10 @@\n                         \"Full log\"\n                     ],\n                     \"default\": \"off\",\n-                    \"description\": \"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users)\"\n+                    \"description\": \"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).\"\n                 },\n                 \"rust-analyzer.trace.extension\": {\n-                    \"description\": \"Enable logging of VS Code extensions itself\",\n+                    \"description\": \"Enable logging of VS Code extensions itself.\",\n                     \"type\": \"boolean\",\n                     \"default\": false\n                 },\n@@ -327,14 +327,14 @@\n                     }\n                 },\n                 \"rust-analyzer.debug.openDebugPane\": {\n-                    \"description\": \"Whether to open up the Debug Pane on debugging start.\",\n+                    \"markdownDescription\": \"Whether to open up the `Debug Panel` on debugging start.\",\n                     \"type\": \"boolean\",\n                     \"default\": false\n                 },\n                 \"rust-analyzer.debug.engineSettings\": {\n                     \"type\": \"object\",\n                     \"default\": {},\n-                    \"description\": \"Optional settings passed to the debug engine. Example:\\n{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }\"\n+                    \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n                 \"rust-analyzer.assist.importMergeBehaviour\": {\n                     \"markdownDescription\": \"The strategy to use when inserting new imports or merging imports.\",\n@@ -362,7 +362,7 @@\n                     ],\n                     \"enumDescriptions\": [\n                         \"Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.\",\n-                        \"Prefix all import paths with `self` if they don't begin with `self`, `super`, `crate` or a crate name\",\n+                        \"Prefix all import paths with `self` if they don't begin with `self`, `super`, `crate` or a crate name.\",\n                         \"Force import paths to be absolute by always starting them with `crate` or the crate name they refer to.\"\n                     ]\n                 },\n@@ -372,7 +372,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.cargo.autoreload\": {\n-                    \"markdownDescription\": \"Automatically refresh project info via `cargo metadata` on Cargo.toml changes.\",\n+                    \"markdownDescription\": \"Automatically refresh project info via `cargo metadata` on `Cargo.toml` changes.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n@@ -418,7 +418,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.checkOnSave.allFeatures\": {\n-                    \"markdownDescription\": \"Check with all features (will be passed as `--all-features`). Defaults to `rust-analyzer.cargo.allFeatures`.\",\n+                    \"markdownDescription\": \"Check with all features (will be passed as `--all-features`). Defaults to `#rust-analyzer.cargo.allFeatures#`.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -444,7 +444,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.checkOnSave.target\": {\n-                    \"markdownDescription\": \"Check for a specific target. Defaults to `rust-analyzer.cargo.target`.\",\n+                    \"markdownDescription\": \"Check for a specific target. Defaults to `#rust-analyzer.cargo.target#`.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -460,7 +460,7 @@\n                     }\n                 },\n                 \"rust-analyzer.checkOnSave.features\": {\n-                    \"markdownDescription\": \"List of features to activate. Defaults to `rust-analyzer.cargo.features`.\",\n+                    \"markdownDescription\": \"List of features to activate. Defaults to `#rust-analyzer.cargo.features#`.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -497,7 +497,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.completion.autoimport.enable\": {\n-                    \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed. Note that your client have to specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n+                    \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed. Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n@@ -521,15 +521,15 @@\n                     \"uniqueItems\": true\n                 },\n                 \"rust-analyzer.diagnostics.warningsAsHint\": {\n-                    \"markdownDescription\": \"List of warnings that should be displayed with info severity.\\\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the problems panel.\",\n+                    \"markdownDescription\": \"List of warnings that should be displayed with info severity.\\\\n\\\\nThe warnings will be indicated by a blue squiggly underline in code and a blue icon in the `Problems Panel`.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n                         \"type\": \"string\"\n                     }\n                 },\n                 \"rust-analyzer.diagnostics.warningsAsInfo\": {\n-                    \"markdownDescription\": \"List of warnings that should be displayed with hint severity.\\\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n+                    \"markdownDescription\": \"List of warnings that should be displayed with hint severity.\\\\n\\\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the `Problems Panel`.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n@@ -577,7 +577,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.inlayHints.maxLength\": {\n-                    \"markdownDescription\": \"Maximum length for inlay hints.\",\n+                    \"markdownDescription\": \"Maximum length for inlay hints. Default is unlimited.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -621,7 +621,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.linkedProjects\": {\n-                    \"markdownDescription\": \"Disable project auto-discovery in favor of explicitly specified set of projects.  \\\\nElements must be paths pointing to Cargo.toml, rust-project.json, or JSON objects in rust-project.json format.\",\n+                    \"markdownDescription\": \"Disable project auto-discovery in favor of explicitly specified set of projects.\\\\n\\\\nElements must be paths pointing to `Cargo.toml`, `rust-project.json`, or JSON objects in `rust-project.json` format.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n@@ -632,7 +632,7 @@\n                     }\n                 },\n                 \"rust-analyzer.lruCapacity\": {\n-                    \"markdownDescription\": \"Number of syntax trees rust-analyzer keeps in memory.\",\n+                    \"markdownDescription\": \"Number of syntax trees rust-analyzer keeps in memory.  Defaults to 128.\",\n                     \"default\": null,\n                     \"type\": [\n                         \"null\",\n@@ -646,7 +646,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.procMacro.enable\": {\n-                    \"markdownDescription\": \"Enable Proc macro support, cargo.loadOutDirsFromCheck must be enabled.\",\n+                    \"markdownDescription\": \"Enable Proc macro support, `#rust-analyzer.cargo.loadOutDirsFromCheck#` must be enabled.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n@@ -659,7 +659,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.runnables.cargoExtraArgs\": {\n-                    \"markdownDescription\": \"Additional arguments to be passed to cargo for runnables such as tests or binaries.\\\\nFor example, it may be '--release'.\",\n+                    \"markdownDescription\": \"Additional arguments to be passed to cargo for runnables such as tests or binaries.\\\\nFor example, it may be `--release`.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {\n@@ -675,7 +675,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.rustfmt.extraArgs\": {\n-                    \"markdownDescription\": \"Additional arguments to rustfmt.\",\n+                    \"markdownDescription\": \"Additional arguments to `rustfmt`.\",\n                     \"default\": [],\n                     \"type\": \"array\",\n                     \"items\": {"}]}