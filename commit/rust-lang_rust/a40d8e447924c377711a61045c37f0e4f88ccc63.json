{"sha": "a40d8e447924c377711a61045c37f0e4f88ccc63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGQ4ZTQ0NzkyNGMzNzc3MTFhNjEwNDVjMzdmMGU0Zjg4Y2NjNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-22T19:18:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-22T19:18:39Z"}, "message": "Auto merge of #3679 - daxpedda:use_self, r=phansch\n\nFix automatic suggestion on `use_self`.\n\nIn an example like this:\n```rust\nimpl Example {\n    fn fun_1() { }\n    fn fun_2() {\n        Example::fun_1();\n    }\n}\n```\nClippy tries to replace `Example::fun_1` with `Self`, loosing `::fun_1` in the process, it should rather try to replace `Example` with `Self`.\n\n**Question**\n- There may be other paths that need the same treatment, but I'm not sure I understand them fully:\n  - https://github.com/rust-lang/rust-clippy/blob/e648adf0866a1cea7db6ce2d33ea86e442f25377/clippy_lints/src/use_self.rs#L94-L96\n  - https://github.com/rust-lang/rust-clippy/blob/e648adf0866a1cea7db6ce2d33ea86e442f25377/clippy_lints/src/use_self.rs#L225-L229", "tree": {"sha": "268639fff0d2ec524528a2f8bb7ffd68b4a027da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/268639fff0d2ec524528a2f8bb7ffd68b4a027da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40d8e447924c377711a61045c37f0e4f88ccc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40d8e447924c377711a61045c37f0e4f88ccc63", "html_url": "https://github.com/rust-lang/rust/commit/a40d8e447924c377711a61045c37f0e4f88ccc63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40d8e447924c377711a61045c37f0e4f88ccc63/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "280069ddc750d8a20d075c76322c45d5db4a48f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/280069ddc750d8a20d075c76322c45d5db4a48f8", "html_url": "https://github.com/rust-lang/rust/commit/280069ddc750d8a20d075c76322c45d5db4a48f8"}, {"sha": "42d5a07f0ca4d0a3d17f2d2634862dc73bf82d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d5a07f0ca4d0a3d17f2d2634862dc73bf82d2f", "html_url": "https://github.com/rust-lang/rust/commit/42d5a07f0ca4d0a3d17f2d2634862dc73bf82d2f"}], "stats": {"total": 407, "additions": 376, "deletions": 31}, "files": [{"sha": "88cf01987b55c765c47d563702a7c488dac6c963", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a40d8e447924c377711a61045c37f0e4f88ccc63/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40d8e447924c377711a61045c37f0e4f88ccc63/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=a40d8e447924c377711a61045c37f0e4f88ccc63", "patch": "@@ -56,10 +56,15 @@ impl LintPass for UseSelf {\n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path) {\n+    // path segments only include actual path, no methods or fields\n+    let last_path_span = path.segments.last().expect(SEGMENTS_MSG).ident.span;\n+    // only take path up to the end of last_path_span\n+    let span = path.span.with_hi(last_path_span.hi());\n+\n     span_lint_and_sugg(\n         cx,\n         USE_SELF,\n-        path.span,\n+        span,\n         \"unnecessary structure name repetition\",\n         \"use the applicable keyword\",\n         \"Self\".to_owned(),"}, {"sha": "5eae9a7a8069dba541cfe9b18d19e66706efc703", "filename": "tests/ui/use_self.fixed", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/rust-lang/rust/blob/a40d8e447924c377711a61045c37f0e4f88ccc63/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a40d8e447924c377711a61045c37f0e4f88ccc63/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=a40d8e447924c377711a61045c37f0e4f88ccc63", "patch": "@@ -0,0 +1,299 @@\n+// run-rustfix\n+\n+#![warn(clippy::use_self)]\n+#![allow(dead_code)]\n+#![allow(clippy::should_implement_trait)]\n+\n+fn main() {}\n+\n+mod use_self {\n+    struct Foo {}\n+\n+    impl Foo {\n+        fn new() -> Self {\n+            Self {}\n+        }\n+        fn test() -> Self {\n+            Self::new()\n+        }\n+    }\n+\n+    impl Default for Foo {\n+        fn default() -> Self {\n+            Self::new()\n+        }\n+    }\n+}\n+\n+mod better {\n+    struct Foo {}\n+\n+    impl Foo {\n+        fn new() -> Self {\n+            Self {}\n+        }\n+        fn test() -> Self {\n+            Self::new()\n+        }\n+    }\n+\n+    impl Default for Foo {\n+        fn default() -> Self {\n+            Self::new()\n+        }\n+    }\n+}\n+\n+mod lifetimes {\n+    struct Foo<'a> {\n+        foo_str: &'a str,\n+    }\n+\n+    impl<'a> Foo<'a> {\n+        // Cannot use `Self` as return type, because the function is actually `fn foo<'b>(s: &'b str) ->\n+        // Foo<'b>`\n+        fn foo(s: &str) -> Foo {\n+            Foo { foo_str: s }\n+        }\n+        // cannot replace with `Self`, because that's `Foo<'a>`\n+        fn bar() -> Foo<'static> {\n+            Foo { foo_str: \"foo\" }\n+        }\n+\n+        // FIXME: the lint does not handle lifetimed struct\n+        // `Self` should be applicable here\n+        fn clone(&self) -> Foo<'a> {\n+            Foo { foo_str: self.foo_str }\n+        }\n+    }\n+}\n+\n+#[allow(clippy::boxed_local)]\n+mod traits {\n+\n+    use std::ops::Mul;\n+\n+    trait SelfTrait {\n+        fn refs(p1: &Self) -> &Self;\n+        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self;\n+        fn mut_refs(p1: &mut Self) -> &mut Self;\n+        fn nested(p1: Box<Self>, p2: (&u8, &Self));\n+        fn vals(r: Self) -> Self;\n+    }\n+\n+    #[derive(Default)]\n+    struct Bad;\n+\n+    impl SelfTrait for Bad {\n+        fn refs(p1: &Self) -> &Self {\n+            p1\n+        }\n+\n+        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+            p1\n+        }\n+\n+        fn mut_refs(p1: &mut Self) -> &mut Self {\n+            p1\n+        }\n+\n+        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n+\n+        fn vals(_: Self) -> Self {\n+            Self::default()\n+        }\n+    }\n+\n+    impl Mul for Bad {\n+        type Output = Self;\n+\n+        fn mul(self, rhs: Self) -> Self {\n+            rhs\n+        }\n+    }\n+\n+    #[derive(Default)]\n+    struct Good;\n+\n+    impl SelfTrait for Good {\n+        fn refs(p1: &Self) -> &Self {\n+            p1\n+        }\n+\n+        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+            p1\n+        }\n+\n+        fn mut_refs(p1: &mut Self) -> &mut Self {\n+            p1\n+        }\n+\n+        fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n+\n+        fn vals(_: Self) -> Self {\n+            Self::default()\n+        }\n+    }\n+\n+    impl Mul for Good {\n+        type Output = Self;\n+\n+        fn mul(self, rhs: Self) -> Self {\n+            rhs\n+        }\n+    }\n+\n+    trait NameTrait {\n+        fn refs(p1: &u8) -> &u8;\n+        fn ref_refs<'a>(p1: &'a &'a u8) -> &'a &'a u8;\n+        fn mut_refs(p1: &mut u8) -> &mut u8;\n+        fn nested(p1: Box<u8>, p2: (&u8, &u8));\n+        fn vals(p1: u8) -> u8;\n+    }\n+\n+    // Using `Self` instead of the type name is OK\n+    impl NameTrait for u8 {\n+        fn refs(p1: &Self) -> &Self {\n+            p1\n+        }\n+\n+        fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n+            p1\n+        }\n+\n+        fn mut_refs(p1: &mut Self) -> &mut Self {\n+            p1\n+        }\n+\n+        fn nested(_p1: Box<Self>, _p2: (&Self, &Self)) {}\n+\n+        fn vals(_: Self) -> Self {\n+            Self::default()\n+        }\n+    }\n+\n+    // Check that self arg isn't linted\n+    impl Clone for Good {\n+        fn clone(&self) -> Self {\n+            // Note: Not linted and it wouldn't be valid\n+            // because \"can't use `Self` as a constructor`\"\n+            Good\n+        }\n+    }\n+}\n+\n+mod issue2894 {\n+    trait IntoBytes {\n+        fn into_bytes(&self) -> Vec<u8>;\n+    }\n+\n+    // This should not be linted\n+    impl IntoBytes for u8 {\n+        fn into_bytes(&self) -> Vec<u8> {\n+            vec![*self]\n+        }\n+    }\n+}\n+\n+mod existential {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn bad(foos: &[Self]) -> impl Iterator<Item = &Self> {\n+            foos.iter()\n+        }\n+\n+        fn good(foos: &[Self]) -> impl Iterator<Item = &Self> {\n+            foos.iter()\n+        }\n+    }\n+}\n+\n+mod tuple_structs {\n+    pub struct TS(i32);\n+\n+    impl TS {\n+        pub fn ts() -> Self {\n+            Self(0)\n+        }\n+    }\n+}\n+\n+mod macros {\n+    macro_rules! use_self_expand {\n+        () => {\n+            fn new() -> Self {\n+                Self {}\n+            }\n+        };\n+    }\n+\n+    struct Foo {}\n+\n+    impl Foo {\n+        use_self_expand!(); // Should lint in local macros\n+    }\n+}\n+\n+mod nesting {\n+    struct Foo {}\n+    impl Foo {\n+        fn foo() {\n+            use self::Foo; // Can't use Self here\n+            struct Bar {\n+                foo: Foo, // Foo != Self\n+            }\n+\n+            impl Bar {\n+                fn bar() -> Self {\n+                    Self { foo: Foo {} }\n+                }\n+            }\n+        }\n+    }\n+\n+    enum Enum {\n+        A,\n+    }\n+    impl Enum {\n+        fn method() {\n+            #[allow(unused_imports)]\n+            use self::Enum::*; // Issue 3425\n+            static STATIC: Enum = Enum::A; // Can't use Self as type\n+        }\n+    }\n+}\n+\n+mod issue3410 {\n+\n+    struct A;\n+    struct B;\n+\n+    trait Trait<T> {\n+        fn a(v: T);\n+    }\n+\n+    impl Trait<Vec<A>> for Vec<B> {\n+        fn a(_: Vec<A>) {}\n+    }\n+}\n+\n+#[allow(clippy::no_effect, path_statements)]\n+mod rustfix {\n+    mod nested {\n+        pub struct A {}\n+    }\n+\n+    impl nested::A {\n+        const A: bool = true;\n+\n+        fn fun_1() {}\n+\n+        fn fun_2() {\n+            Self::fun_1();\n+            Self::A;\n+\n+            Self {};\n+        }\n+    }\n+}"}, {"sha": "8e28bbbeb9c6634638175eabe55c70377c50b630", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a40d8e447924c377711a61045c37f0e4f88ccc63/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40d8e447924c377711a61045c37f0e4f88ccc63/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=a40d8e447924c377711a61045c37f0e4f88ccc63", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n #![allow(clippy::should_implement_trait)]\n@@ -255,6 +257,7 @@ mod nesting {\n     }\n     impl Enum {\n         fn method() {\n+            #[allow(unused_imports)]\n             use self::Enum::*; // Issue 3425\n             static STATIC: Enum = Enum::A; // Can't use Self as type\n         }\n@@ -274,3 +277,23 @@ mod issue3410 {\n         fn a(_: Vec<A>) {}\n     }\n }\n+\n+#[allow(clippy::no_effect, path_statements)]\n+mod rustfix {\n+    mod nested {\n+        pub struct A {}\n+    }\n+\n+    impl nested::A {\n+        const A: bool = true;\n+\n+        fn fun_1() {}\n+\n+        fn fun_2() {\n+            nested::A::fun_1();\n+            nested::A::A;\n+\n+            nested::A {};\n+        }\n+    }\n+}"}, {"sha": "af9e15edb6cfcff0cbd565e1de46ee331bf4fe5b", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a40d8e447924c377711a61045c37f0e4f88ccc63/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a40d8e447924c377711a61045c37f0e4f88ccc63/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=a40d8e447924c377711a61045c37f0e4f88ccc63", "patch": "@@ -1,139 +1,139 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:11:21\n+  --> $DIR/use_self.rs:13:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:12:13\n+  --> $DIR/use_self.rs:14:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:14:22\n+  --> $DIR/use_self.rs:16:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:15:13\n+  --> $DIR/use_self.rs:17:13\n    |\n LL |             Foo::new()\n-   |             ^^^^^^^^ help: use the applicable keyword: `Self`\n+   |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:20:25\n+  --> $DIR/use_self.rs:22:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:21:13\n+  --> $DIR/use_self.rs:23:13\n    |\n LL |             Foo::new()\n-   |             ^^^^^^^^ help: use the applicable keyword: `Self`\n+   |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:86:22\n+  --> $DIR/use_self.rs:88:22\n    |\n LL |         fn refs(p1: &Bad) -> &Bad {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:86:31\n+  --> $DIR/use_self.rs:88:31\n    |\n LL |         fn refs(p1: &Bad) -> &Bad {\n    |                               ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:90:37\n+  --> $DIR/use_self.rs:92:37\n    |\n LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:90:53\n+  --> $DIR/use_self.rs:92:53\n    |\n LL |         fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n    |                                                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:94:30\n+  --> $DIR/use_self.rs:96:30\n    |\n LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:94:43\n+  --> $DIR/use_self.rs:96:43\n    |\n LL |         fn mut_refs(p1: &mut Bad) -> &mut Bad {\n    |                                           ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:98:28\n+  --> $DIR/use_self.rs:100:28\n    |\n LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n    |                            ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:98:46\n+  --> $DIR/use_self.rs:100:46\n    |\n LL |         fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n    |                                              ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:100:20\n+  --> $DIR/use_self.rs:102:20\n    |\n LL |         fn vals(_: Bad) -> Bad {\n    |                    ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:100:28\n+  --> $DIR/use_self.rs:102:28\n    |\n LL |         fn vals(_: Bad) -> Bad {\n    |                            ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:101:13\n+  --> $DIR/use_self.rs:103:13\n    |\n LL |             Bad::default()\n-   |             ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+   |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:106:23\n+  --> $DIR/use_self.rs:108:23\n    |\n LL |         type Output = Bad;\n    |                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:108:27\n+  --> $DIR/use_self.rs:110:27\n    |\n LL |         fn mul(self, rhs: Bad) -> Bad {\n    |                           ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:108:35\n+  --> $DIR/use_self.rs:110:35\n    |\n LL |         fn mul(self, rhs: Bad) -> Bad {\n    |                                   ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:200:56\n+  --> $DIR/use_self.rs:202:56\n    |\n LL |         fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n    |                                                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:215:13\n+  --> $DIR/use_self.rs:217:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:223:25\n+  --> $DIR/use_self.rs:225:25\n    |\n LL |             fn new() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n@@ -142,7 +142,7 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:224:17\n+  --> $DIR/use_self.rs:226:17\n    |\n LL |                 Foo {}\n    |                 ^^^ help: use the applicable keyword: `Self`\n@@ -151,16 +151,34 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:246:29\n+  --> $DIR/use_self.rs:248:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:247:21\n+  --> $DIR/use_self.rs:249:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 26 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:293:13\n+   |\n+LL |             nested::A::fun_1();\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:294:13\n+   |\n+LL |             nested::A::A;\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:296:13\n+   |\n+LL |             nested::A {};\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 29 previous errors\n "}]}