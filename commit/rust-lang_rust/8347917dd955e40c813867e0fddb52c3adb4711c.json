{"sha": "8347917dd955e40c813867e0fddb52c3adb4711c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNDc5MTdkZDk1NWU0MGM4MTM4NjdlMGZkZGI1MmMzYWRiNDcxMWM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-07-11T18:44:56Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-07-11T18:44:56Z"}, "message": "Remove feature gate `dropck_parametricity` completely\n\nTherefore we also remove `#[unsafe_destructor_blind_to_params]`\nattribute completly.", "tree": {"sha": "811108295d938030b6085dc63085739a7f30a922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811108295d938030b6085dc63085739a7f30a922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8347917dd955e40c813867e0fddb52c3adb4711c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8347917dd955e40c813867e0fddb52c3adb4711c", "html_url": "https://github.com/rust-lang/rust/commit/8347917dd955e40c813867e0fddb52c3adb4711c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8347917dd955e40c813867e0fddb52c3adb4711c/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab3adf380d09005e2deea002ac172135a5c158f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3adf380d09005e2deea002ac172135a5c158f0", "html_url": "https://github.com/rust-lang/rust/commit/ab3adf380d09005e2deea002ac172135a5c158f0"}], "stats": {"total": 142, "additions": 17, "deletions": 125}, "files": [{"sha": "56cb89b5144ac85e35f6d3948fbf87096e39ab9a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -22,7 +22,6 @@ use rustc_macros::HashStable;\n use std::{cmp, fmt};\n use syntax::ast;\n use syntax::attr::{self, SignedInt, UnsignedInt};\n-use syntax::symbol::sym;\n use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug)]\n@@ -435,20 +434,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             Some(dtor) => dtor.did\n         };\n \n-        // RFC 1238: if the destructor method is tagged with the\n-        // attribute `unsafe_destructor_blind_to_params`, then the\n-        // compiler is being instructed to *assume* that the\n-        // destructor will not access borrowed data,\n-        // even if such data is otherwise reachable.\n-        //\n-        // Such access can be in plain sight (e.g., dereferencing\n-        // `*foo.0` of `Foo<'a>(&'a u32)`) or indirectly hidden\n-        // (e.g., calling `foo.0.clone()` of `Foo<T:Clone>`).\n-        if self.has_attr(dtor, sym::unsafe_destructor_blind_to_params) {\n-            debug!(\"destructor_constraint({:?}) - blind\", def.did);\n-            return vec![];\n-        }\n-\n         let impl_def_id = self.associated_item(dtor).container.id();\n         let impl_generics = self.generics_of(impl_def_id);\n "}, {"sha": "babffe479bc2ecc0ca17ddd8daf26d3290895bad", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -246,7 +246,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n ///\n /// * (1.) `D` has a lifetime- or type-parametric Drop implementation,\n ///        (where that `Drop` implementation does not opt-out of\n-///         this check via the `unsafe_destructor_blind_to_params`\n+///         this check via the `may_dangle`\n ///         attribute), and\n /// * (2.) the structure of `D` can reach a reference of type `&'a _`,\n ///\n@@ -279,7 +279,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n /// instead Drop-Check now simply assumes that if a destructor has\n /// access (direct or indirect) to a lifetime parameter, then that\n /// lifetime must be forced to outlive that destructor's dynamic\n-/// extent. We then provide the `unsafe_destructor_blind_to_params`\n+/// extent. We then provide the `may_dangle`\n /// attribute as a way for destructor implementations to opt-out of\n /// this conservative assumption (and thus assume the obligation of\n /// ensuring that they do not access data nor invoke methods of"}, {"sha": "3cd520fd4b50b1273c76f71225eb9a2951624b39", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -3809,7 +3809,6 @@ const ATTRIBUTE_WHITELIST: &'static [Symbol] = &[\n     sym::must_use,\n     sym::no_mangle,\n     sym::repr,\n-    sym::unsafe_destructor_blind_to_params,\n     sym::non_exhaustive\n ];\n "}, {"sha": "e3628d908fb1e82177f48273a43a0804b51108fd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -199,9 +199,6 @@ declare_features! (\n \n     // no-tracking-issue-end\n \n-    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n-    (active, dropck_parametricity, \"1.3.0\", Some(28498), None),\n-\n     // no-tracking-issue-start\n \n     // Allows using `#[omit_gdb_pretty_printer_section]`.\n@@ -641,6 +638,8 @@ declare_features! (\n     (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n      Some(\"subsumed by `::foo::bar` paths\")),\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n+    // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n+    (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n@@ -1447,15 +1446,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n             cfg_fn!(omit_gdb_pretty_printer_section)\n         )\n     ),\n-    (sym::unsafe_destructor_blind_to_params,\n-    Normal,\n-    template!(Word),\n-    Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\",\n-                                Some(\"replace this attribute with `#[may_dangle]`\")),\n-        sym::dropck_parametricity,\n-        \"unsafe_destructor_blind_to_params has been replaced by \\\n-            may_dangle and will be removed in the future\",\n-        cfg_fn!(dropck_parametricity))),\n     (sym::may_dangle,\n     Normal,\n     template!(Word),"}, {"sha": "a983180ac01e16ee2c902a9ed2538e0edd6c0bf5", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -695,7 +695,6 @@ symbols! {\n         unmarked_api,\n         unreachable_code,\n         unrestricted_attribute_tokens,\n-        unsafe_destructor_blind_to_params,\n         unsafe_no_drop_flag,\n         unsized_locals,\n         unsized_tuple_coercion,"}, {"sha": "aea9fde5309e24350b8a486f6283e3367ca6d8f8", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-lifetime-param.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-lifetime-param.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -20,8 +20,7 @@ struct Foo<'a>(u32, &'a ScribbleOnDrop);\n \n unsafe impl<#[may_dangle] 'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n-        // Use of `may_dangle` is sound,\n-        // because destructor never accesses `self.1`.\n+        // Use of `may_dangle` is sound, because destructor never accesses `self.1`.\n         println!(\"Dropping Foo({}, _)\", self.0);\n     }\n }"}, {"sha": "91ef5a7c98d6dbc7ed93ff1036453772c119b7dc", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-passed-to-fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-passed-to-fn.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -25,9 +25,8 @@ struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n \n unsafe impl<#[may_dangle] T> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `may_dangle` is sound,\n-        // because destructor never passes a `self.1` to the callback\n-        // (in `self.2`) despite having it available.\n+        // Use of `may_dangle` is sound, because destructor never passes a `self.1`\n+        // to the callback (in `self.2`) despite having it available.\n         println!(\"Dropping Foo({}, _)\", self.0);\n     }\n }"}, {"sha": "808f3b6e81e52582e32ef15d7a94e43445100768", "filename": "src/test/run-pass/issues/issue-28498-ugeh-with-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-28498-ugeh-with-trait-bound.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -22,9 +22,8 @@ struct Foo<T: fmt::Debug>(u32, T);\n \n unsafe impl<#[may_dangle] T: fmt::Debug> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `may_dangle` is sound,\n-        // because destructor never accesses the `Debug::fmt` method\n-        // of `T`, despite having it available.\n+        // Use of `may_dangle` is sound, because destructor never accesses\n+        // the `Debug::fmt` method of `T`, despite having it available.\n         println!(\"Dropping Foo({}, _)\", self.0);\n     }\n }"}, {"sha": "33252019e71e63038a167fb0ae01b718c247b1e7", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh-2.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,12 +0,0 @@\n-#![deny(deprecated)]\n-#![feature(dropck_parametricity)]\n-\n-struct Foo;\n-\n-impl Drop for Foo {\n-    #[unsafe_destructor_blind_to_params]\n-    //~^ ERROR use of deprecated attribute `dropck_parametricity`\n-    fn drop(&mut self) {}\n-}\n-\n-fn main() {}"}, {"sha": "b6a474575c677a5ec9057501e61756e9404d3c4f", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh-2.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,14 +0,0 @@\n-error: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future. See https://github.com/rust-lang/rust/issues/34761\n-  --> $DIR/feature-gate-dropck-ugeh-2.rs:7:5\n-   |\n-LL |     #[unsafe_destructor_blind_to_params]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[may_dangle]`\n-   |\n-note: lint level defined here\n-  --> $DIR/feature-gate-dropck-ugeh-2.rs:1:9\n-   |\n-LL | #![deny(deprecated)]\n-   |         ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "a2377cda9bd66d4170ee21f89ade50c1a941b351", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.rs?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,29 +0,0 @@\n-// gate-test-dropck_parametricity\n-\n-// Ensure that attempts to use the unsafe attribute are feature-gated.\n-// Example adapted from RFC 1238 text (just left out the feature gate).\n-\n-// https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\n-//     #example-of-the-unguarded-escape-hatch\n-\n-use std::cell::Cell;\n-\n-struct Concrete<'a>(u32, Cell<Option<&'a Concrete<'a>>>);\n-\n-struct Foo<T> { data: Vec<T> }\n-\n-impl<T> Drop for Foo<T> {\n-    #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n-    //~^ ERROR unsafe_destructor_blind_to_params has been replaced\n-    //~| WARN use of deprecated attribute `dropck_parametricity`\n-    fn drop(&mut self) { }\n-}\n-\n-fn main() {\n-    let mut foo = Foo {  data: Vec::new() };\n-    foo.data.push(Concrete(0, Cell::new(None)));\n-    foo.data.push(Concrete(0, Cell::new(None)));\n-\n-    foo.data[0].1.set(Some(&foo.data[1]));\n-    foo.data[1].1.set(Some(&foo.data[0]));\n-}"}, {"sha": "581b760ba4f47f30f5ab937be7122de0d04e6fcb", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab3adf380d09005e2deea002ac172135a5c158f0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh.stderr?ref=ab3adf380d09005e2deea002ac172135a5c158f0", "patch": "@@ -1,20 +0,0 @@\n-error[E0658]: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future\n-  --> $DIR/feature-gate-dropck-ugeh.rs:16:5\n-   |\n-LL |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/28498\n-   = help: add `#![feature(dropck_parametricity)]` to the crate attributes to enable\n-\n-warning: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future. See https://github.com/rust-lang/rust/issues/34761\n-  --> $DIR/feature-gate-dropck-ugeh.rs:16:5\n-   |\n-LL |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[may_dangle]`\n-   |\n-   = note: #[warn(deprecated)] on by default\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "1e7190157856cdfca65a9590e91ac9f2c6761255", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -16,9 +16,8 @@ struct Foo<'a>(u32, &'a ScribbleOnDrop);\n \n impl<'a> Drop for Foo<'a> {\n     fn drop(&mut self) {\n-        // Use of `may_dangle` is unsound,\n-        // because destructor accesses borrowed data in `self.1`\n-        // and we must force that to strictly outlive `self`.\n+        // Use of `may_dangle` is unsound, because destructor accesses borrowed data\n+        // in `self.1` and we must force that to strictly outlive `self`.\n         println!(\"Dropping Foo({}, {:?})\", self.0, self.1);\n     }\n }"}, {"sha": "3119ddd03cc26654a20e1d31d9ce559e26aeb7f3", "filename": "src/test/ui/span/issue28498-reject-lifetime-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-lifetime-param.stderr?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-lifetime-param.rs:33:19\n+  --> $DIR/issue28498-reject-lifetime-param.rs:32:19\n    |\n LL |     foo1 = Foo(1, &first_dropped);\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough"}, {"sha": "dcd2e9ad4ba980d44d06610d1bb732c327a1d833", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -16,8 +16,7 @@ struct Foo<T>(u32, T, Box<for <'r> fn(&'r T) -> String>);\n \n impl<T> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `may_dangle` is unsound,\n-        // because we pass `T` to the callback in `self.2`\n+        // Use of `may_dangle` is unsound, because we pass `T` to the callback in `self.2`\n         // below, and thus potentially read from borrowed data.\n         println!(\"Dropping Foo({}, {})\", self.0, (self.2)(&self.1));\n     }"}, {"sha": "60e8a648cd5979d37f780f315fd13fb6b199cb90", "filename": "src/test/ui/span/issue28498-reject-passed-to-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-passed-to-fn.stderr?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-passed-to-fn.rs:35:19\n+  --> $DIR/issue28498-reject-passed-to-fn.rs:34:19\n    |\n LL |     foo1 = Foo(1, &first_dropped, Box::new(callback));\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough"}, {"sha": "444cebb19a73d55a29e21ada15478714aab8911a", "filename": "src/test/ui/span/issue28498-reject-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.rs?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -18,9 +18,8 @@ struct Foo<T: fmt::Debug>(u32, T);\n \n impl<T: fmt::Debug> Drop for Foo<T> {\n     fn drop(&mut self) {\n-        // Use of `may_dangle` is unsound,\n-        // because we access `T` fmt method when we pass `self.1`\n-        // below, and thus potentially read from borrowed data.\n+        // Use of `may_dangle` is unsound, because we access `T` fmt method when we pass\n+        // `self.1` below, and thus potentially read from borrowed data.\n         println!(\"Dropping Foo({}, {:?})\", self.0, self.1);\n     }\n }"}, {"sha": "22e4a8205b617723a856dd8f7e904ce7c962c368", "filename": "src/test/ui/span/issue28498-reject-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8347917dd955e40c813867e0fddb52c3adb4711c/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-trait-bound.stderr?ref=8347917dd955e40c813867e0fddb52c3adb4711c", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `first_dropped` does not live long enough\n-  --> $DIR/issue28498-reject-trait-bound.rs:35:19\n+  --> $DIR/issue28498-reject-trait-bound.rs:34:19\n    |\n LL |     foo1 = Foo(1, &first_dropped);\n    |                   ^^^^^^^^^^^^^^ borrowed value does not live long enough"}]}