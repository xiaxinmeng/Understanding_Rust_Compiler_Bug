{"sha": "fe6484d3e6edbcc84805bae053180cb2cdf27805", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNjQ4NGQzZTZlZGJjYzg0ODA1YmFlMDUzMTgwY2IyY2RmMjc4MDU=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-17T04:03:35Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-17T08:27:17Z"}, "message": "rustc: Fix warn on unused import bug\n\nrustc generates incorrect warning for cascaded import declarations like:\n\n  use std;\n  import std::io;\n  import io::println;\n  fn main() { println(\"hello\"); }\n\n  warning: unused import io\n\nA followup of issue #889", "tree": {"sha": "23cc18aaf401c6744cc641750c0db86007fde9b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23cc18aaf401c6744cc641750c0db86007fde9b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe6484d3e6edbcc84805bae053180cb2cdf27805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6484d3e6edbcc84805bae053180cb2cdf27805", "html_url": "https://github.com/rust-lang/rust/commit/fe6484d3e6edbcc84805bae053180cb2cdf27805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe6484d3e6edbcc84805bae053180cb2cdf27805/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc81352aaa00a71c78d291f75004be0317c8bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc81352aaa00a71c78d291f75004be0317c8bb0", "html_url": "https://github.com/rust-lang/rust/commit/bfc81352aaa00a71c78d291f75004be0317c8bb0"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "7ee6471660de9e5c01e227e27f08ee44001974dc", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fe6484d3e6edbcc84805bae053180cb2cdf27805/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6484d3e6edbcc84805bae053180cb2cdf27805/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=fe6484d3e6edbcc84805bae053180cb2cdf27805", "patch": "@@ -107,7 +107,8 @@ type env =\n      mod_map: hashmap<ast::node_id, @indexed_mod>,\n      ext_map: hashmap<def_id, [ident]>,\n      ext_cache: ext_hash,\n-     mutable used_imports: option::t<[ast::node_id]>,\n+     used_imports: {mutable track: bool,\n+                    mutable data: [ast::node_id]},\n      mutable reported: [{ident: str, sc: scope}],\n      mutable currently_resolving: node_id,\n      sess: session};\n@@ -129,15 +130,14 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n           mod_map: new_int_hash::<@indexed_mod>(),\n           ext_map: new_def_hash::<[ident]>(),\n           ext_cache: new_ext_hash(),\n-          mutable used_imports: none,\n+          used_imports: {mutable track: false, mutable data:  []},\n           mutable reported: [],\n           mutable currently_resolving: -1,\n           sess: sess};\n     map_crate(e, crate);\n     resolve_imports(*e);\n     check_for_collisions(e, *crate);\n     check_bad_exports(e);\n-    e.used_imports = some([]);\n     resolve_names(e, crate);\n     check_unused_imports(e);\n     ret {def_map: e.def_map, ext_map: e.ext_map};\n@@ -238,6 +238,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n }\n \n fn resolve_imports(e: env) {\n+    e.used_imports.track = true;\n     e.imports.values {|v|\n         alt v {\n           todo(node_id, name, path, span, scopes) {\n@@ -246,15 +247,15 @@ fn resolve_imports(e: env) {\n           resolved(_, _, _, _, _) { }\n         }\n     };\n+    e.used_imports.track = false;\n     e.sess.abort_if_errors();\n }\n \n fn check_unused_imports(e: @env) {\n-    let used = option::get(e.used_imports);\n     e.imports.items {|k, v|\n         alt v {\n             resolved(val, ty, md, name, sp) {\n-              if !vec::member(k, used) {\n+              if !vec::member(k, e.used_imports.data) {\n                 e.sess.span_warn(sp, \"unused import \" + name);\n               }\n             }\n@@ -264,6 +265,7 @@ fn check_unused_imports(e: @env) {\n }\n \n fn resolve_names(e: @env, c: @ast::crate) {\n+    e.used_imports.track = true;\n     let v =\n         @{visit_native_item: visit_native_item_with_scope,\n           visit_item: visit_item_with_scope,\n@@ -277,6 +279,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           visit_fn: bind visit_fn_with_scope(e, _, _, _, _, _, _, _)\n              with *visit::default_visitor()};\n     visit::visit_crate(*c, cons(scope_crate, @nil), visit::mk_vt(v));\n+    e.used_imports.track = false;\n     e.sess.abort_if_errors();\n \n     fn walk_expr(e: @env, exp: @ast::expr, sc: scopes, v: vt<scopes>) {\n@@ -950,12 +953,8 @@ fn lookup_import(e: env, defid: def_id, ns: namespace) -> option::t<def> {\n         ret none;\n       }\n       resolved(val, typ, md, _, _) {\n-        alt e.used_imports {\n-          none. { }\n-          some(lst_) {\n-            let lst = lst_ + [defid.node];\n-            e.used_imports = option::some(lst);\n-          }\n+        if e.used_imports.track {\n+            e.used_imports.data += [defid.node];\n         }\n         ret alt ns { ns_value. { val } ns_type. { typ } ns_module. { md } };\n       }"}]}