{"sha": "5ce8f7a1f98072d9df9fb562526151b83ecfe879", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZThmN2ExZjk4MDcyZDlkZjlmYjU2MjUyNjE1MWI4M2VjZmU4Nzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-08T16:21:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-08T16:21:08Z"}, "message": "Add async versions of arbitrary_self_types_pin_lifetime tests.", "tree": {"sha": "84aaaab232ff5e2a456499c93df939e8ead493a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84aaaab232ff5e2a456499c93df939e8ead493a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce8f7a1f98072d9df9fb562526151b83ecfe879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce8f7a1f98072d9df9fb562526151b83ecfe879", "html_url": "https://github.com/rust-lang/rust/commit/5ce8f7a1f98072d9df9fb562526151b83ecfe879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce8f7a1f98072d9df9fb562526151b83ecfe879/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3957876c81ce45c31895316060e23149c6fb964", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3957876c81ce45c31895316060e23149c6fb964", "html_url": "https://github.com/rust-lang/rust/commit/f3957876c81ce45c31895316060e23149c6fb964"}], "stats": {"total": 230, "additions": 230, "deletions": 0}, "files": [{"sha": "b853f88a96dde3222382c236e4874193516d614b", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime-async.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs?ref=5ce8f7a1f98072d9df9fb562526151b83ecfe879", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn pin_ref(self: Pin<&Self>) -> Pin<&Self> { self }\n+\n+    async fn pin_mut(self: Pin<&mut Self>) -> Pin<&mut Self> { self }\n+\n+    async fn pin_pin_pin_ref(self: Pin<Pin<Pin<&Self>>>) -> Pin<Pin<Pin<&Self>>> { self }\n+\n+    async fn pin_ref_impl_trait(self: Pin<&Self>) -> impl Clone + '_ { self }\n+\n+    fn b(self: Pin<&Foo>, f: &Foo) -> Pin<&Foo> { self }\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> Alias<&Self> { self }\n+}\n+\n+// FIXME(Centril): extend with the rest of the non-`async fn` test\n+// when we allow `async fn`s inside traits and trait implementations.\n+\n+fn main() {\n+    let mut foo = Foo;\n+    { Pin::new(&foo).pin_ref() };\n+    { Pin::new(&mut foo).pin_mut() };\n+    { Pin::new(Pin::new(Pin::new(&foo))).pin_pin_pin_ref() };\n+    { Pin::new(&foo).pin_ref_impl_trait() };\n+}"}, {"sha": "2421632c664c1679cb5e586684323d2f66611053", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=5ce8f7a1f98072d9df9fb562526151b83ecfe879", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:48\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`\n+   |                          |\n+   |                          lifetime `'_` defined here\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'_`, add `'_` as a constraint\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "aecb82325c1f200c9d5ad9e3f2cd772c44d05437", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=5ce8f7a1f98072d9df9fb562526151b83ecfe879", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn f(self: Pin<&Self>) -> impl Clone { self }\n+    //~^ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn main() {\n+    { Pin::new(&Foo).f() };\n+}"}, {"sha": "f0032449db14e0a5bbc1755dd7b08f3c9aff2ca5", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=5ce8f7a1f98072d9df9fb562526151b83ecfe879", "patch": "@@ -0,0 +1,20 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:16\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                ^^^^                 ---------- this return type evaluates to the `'static` lifetime...\n+   |                |\n+   |                ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:26\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6585609555675371c791bdf798637f6e43f33871", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=5ce8f7a1f98072d9df9fb562526151b83ecfe879", "patch": "@@ -0,0 +1,27 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:60\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                            ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:67\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                                   ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "93870b7cdcf288261a85528a28fa38013fe15234", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=5ce8f7a1f98072d9df9fb562526151b83ecfe879", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR cannot infer an appropriate lifetime\n+    // FIXME: should be E0623?\n+\n+    async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+    //~^ ERROR missing lifetime specifier\n+    //~| ERROR cannot infer an appropriate lifetime\n+    //~| ERROR missing lifetime specifier\n+    //~| ERROR cannot infer an appropriate lifetime\n+    // FIXME: should be E0623?\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg } //~ ERROR E0623\n+}\n+\n+fn main() {}"}, {"sha": "c7d10e7fc780d4cded6a5e9865a61bf6b592bc4e", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ce8f7a1f98072d9df9fb562526151b83ecfe879/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=5ce8f7a1f98072d9df9fb562526151b83ecfe879", "patch": "@@ -0,0 +1,88 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:60\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                            ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:67\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                                                   ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:33\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                 |\n+   |                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:26\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo + '_ { f }\n+   |                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:16\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                ^^^^ ...but this borrow...             ----------------- this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:34\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                                  ^                    ----------------- this return type evaluates to the `'static` lifetime...\n+   |                                  |\n+   |                                  ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:25:58\n+   |\n+LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                                  -----                   ^^^\n+   |                                  |                       |\n+   |                                  |                       ...but data from `arg` is returned here\n+   |                                  this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}]}