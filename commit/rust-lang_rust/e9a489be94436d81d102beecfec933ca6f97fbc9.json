{"sha": "e9a489be94436d81d102beecfec933ca6f97fbc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YTQ4OWJlOTQ0MzZkODFkMTAyYmVlY2ZlYzkzM2NhNmY5N2ZiYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-28T22:28:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-28T22:28:43Z"}, "message": "Auto merge of #50465 - clarcharr:wrapping, r=KodrAus\n\nAdd missing Wrapping methods, use doc_comment!\n\nRe-opened version of #49393 . Finishing touches for #32463.\n\nNote that this adds `Shl` and `Shr` implementations for `Wrapping<i128>` and `Wrapping<u128>`, which were previously missed. This is technically insta-stable, but I don't know why this would be a problem.", "tree": {"sha": "4dcc9129e8aafabb6734a7970d6b9a68b8b832b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dcc9129e8aafabb6734a7970d6b9a68b8b832b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9a489be94436d81d102beecfec933ca6f97fbc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a489be94436d81d102beecfec933ca6f97fbc9", "html_url": "https://github.com/rust-lang/rust/commit/e9a489be94436d81d102beecfec933ca6f97fbc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9a489be94436d81d102beecfec933ca6f97fbc9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf68db6ecda0dd4788311a41b5c763d35597c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf68db6ecda0dd4788311a41b5c763d35597c96", "html_url": "https://github.com/rust-lang/rust/commit/5bf68db6ecda0dd4788311a41b5c763d35597c96"}, {"sha": "99cf5a92acba672845a3563c4abf98e663eaf5cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cf5a92acba672845a3563c4abf98e663eaf5cd", "html_url": "https://github.com/rust-lang/rust/commit/99cf5a92acba672845a3563c4abf98e663eaf5cd"}], "stats": {"total": 687, "additions": 488, "deletions": 199}, "files": [{"sha": "013d0334d4164989aa2054b2751154a1fbf0b8d5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e9a489be94436d81d102beecfec933ca6f97fbc9/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a489be94436d81d102beecfec933ca6f97fbc9/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e9a489be94436d81d102beecfec933ca6f97fbc9", "patch": "@@ -168,8 +168,6 @@ impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n     }\n }\n \n-mod wrapping;\n-\n // All these modules are technically private and only exposed for coretests:\n pub mod flt2dec;\n pub mod dec2flt;\n@@ -183,6 +181,8 @@ macro_rules! doc_comment {\n     };\n }\n \n+mod wrapping;\n+\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n@@ -3401,6 +3401,30 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Returns the smallest power of two greater than or equal to `n`. If\n+the next power of two is greater than the type's maximum value,\n+the return value is wrapped to `0`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_next_power_of_two)]\n+\", $Feature, \"\n+assert_eq!(2\", stringify!($SelfT), \".wrapping_next_power_of_two(), 2);\n+assert_eq!(3\", stringify!($SelfT), \".wrapping_next_power_of_two(), 4);\n+assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_next_power_of_two(), 0);\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n+                       reason = \"needs decision on wrapping behaviour\")]\n+            pub fn wrapping_next_power_of_two(self) -> Self {\n+                self.one_less_than_next_power_of_two().wrapping_add(1)\n+            }\n+        }\n+\n         /// Return the memory representation of this integer as a byte array.\n         ///\n         /// The target platform\u2019s native endianness is used."}, {"sha": "d7f87d37f5b334ec0b9b871a80c1b2522e705b67", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 462, "deletions": 197, "changes": 659, "blob_url": "https://github.com/rust-lang/rust/blob/e9a489be94436d81d102beecfec933ca6f97fbc9/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9a489be94436d81d102beecfec933ca6f97fbc9/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=e9a489be94436d81d102beecfec933ca6f97fbc9", "patch": "@@ -112,17 +112,19 @@ macro_rules! sh_impl_all {\n         //sh_impl_unsigned! { $t, u16 }\n         //sh_impl_unsigned! { $t, u32 }\n         //sh_impl_unsigned! { $t, u64 }\n+        //sh_impl_unsigned! { $t, u128 }\n         sh_impl_unsigned! { $t, usize }\n \n         //sh_impl_signed! { $t, i8 }\n         //sh_impl_signed! { $t, i16 }\n         //sh_impl_signed! { $t, i32 }\n         //sh_impl_signed! { $t, i64 }\n+        //sh_impl_signed! { $t, i128 }\n         //sh_impl_signed! { $t, isize }\n     )*)\n }\n \n-sh_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n+sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n // FIXME(30524): impl Op<T> for Wrapping<T>, impl OpAssign<T> for Wrapping<T>\n macro_rules! wrapping_impl {\n@@ -326,88 +328,111 @@ wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n macro_rules! wrapping_int_impl {\n     ($($t:ty)*) => ($(\n         impl Wrapping<$t> {\n-            /// Returns the number of ones in the binary representation of\n-            /// `self`.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let n: Wrapping<i8> = Wrapping(-0b1000_0000);\n-            ///\n-            /// assert_eq!(n.count_ones(), 1);\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn count_ones(self) -> u32 {\n-                self.0.count_ones()\n+            doc_comment! {\n+                concat!(\"Returns the smallest value that can be represented by this integer type.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert_eq!(<Wrapping<\", stringify!($t), \">>::min_value(), \",\n+\"Wrapping(\", stringify!($t), \"::min_value()));\n+```\"),\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                #[inline]\n+                pub const fn min_value() -> Self {\n+                    Wrapping(<$t>::min_value())\n+                }\n             }\n \n-            /// Returns the number of zeros in the binary representation of\n-            /// `self`.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let n: Wrapping<i8> = Wrapping(-0b1000_0000);\n-            ///\n-            /// assert_eq!(n.count_zeros(), 7);\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn count_zeros(self) -> u32 {\n-                self.0.count_zeros()\n+            doc_comment! {\n+                concat!(\"Returns the largest value that can be represented by this integer type.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert_eq!(<Wrapping<\", stringify!($t), \">>::max_value(), \",\n+\"Wrapping(\", stringify!($t), \"::max_value()));\n+```\"),\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                #[inline]\n+                pub const fn max_value() -> Self {\n+                    Wrapping(<$t>::max_value())\n+                }\n             }\n \n-            /// Returns the number of leading zeros in the binary representation\n-            /// of `self`.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let n: Wrapping<i16> = Wrapping(-1);\n-            ///\n-            /// assert_eq!(n.leading_zeros(), 0);\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn leading_zeros(self) -> u32 {\n-                self.0.leading_zeros()\n+            doc_comment! {\n+                concat!(\"Returns the number of ones in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(0b01001100\", stringify!($t), \");\n+\n+assert_eq!(n.count_ones(), 3);\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn count_ones(self) -> u32 {\n+                    self.0.count_ones()\n+                }\n             }\n \n-            /// Returns the number of trailing zeros in the binary representation\n-            /// of `self`.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let n: Wrapping<i8> = Wrapping(-4);\n-            ///\n-            /// assert_eq!(n.trailing_zeros(), 2);\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn trailing_zeros(self) -> u32 {\n-                self.0.trailing_zeros()\n+            doc_comment! {\n+                concat!(\"Returns the number of zeros in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert_eq!(Wrapping(!0\", stringify!($t), \").count_zeros(), 0);\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn count_zeros(self) -> u32 {\n+                    self.0.count_zeros()\n+                }\n+            }\n+\n+            doc_comment! {\n+                concat!(\"Returns the number of trailing zeros in the binary representation\n+of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(0b0101000\", stringify!($t), \");\n+\n+assert_eq!(n.trailing_zeros(), 3);\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn trailing_zeros(self) -> u32 {\n+                    self.0.trailing_zeros()\n+                }\n             }\n \n             /// Shifts the bits to the left by a specified amount, `n`,\n@@ -484,152 +509,390 @@ macro_rules! wrapping_int_impl {\n                 Wrapping(self.0.swap_bytes())\n             }\n \n-            /// Converts an integer from big endian to the target's endianness.\n-            ///\n-            /// On big endian this is a no-op. On little endian the bytes are\n-            /// swapped.\n+            /// Reverses the bit pattern of the integer.\n             ///\n             /// # Examples\n             ///\n+            /// Please note that this example is shared between integer types.\n+            /// Which explains why `i16` is used here.\n+            ///\n             /// Basic usage:\n             ///\n             /// ```\n-            /// #![feature(wrapping_int_impl)]\n+            /// #![feature(reverse_bits)]\n             /// use std::num::Wrapping;\n             ///\n-            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n+            /// let n = Wrapping(0b0000000_01010101i16);\n+            /// assert_eq!(n, Wrapping(85));\n+            ///\n+            /// let m = n.reverse_bits();\n             ///\n-            /// if cfg!(target_endian = \"big\") {\n-            ///     assert_eq!(Wrapping::<i64>::from_be(n), n);\n-            /// } else {\n-            ///     assert_eq!(Wrapping::<i64>::from_be(n), n.swap_bytes());\n-            /// }\n+            /// assert_eq!(m.0 as u16, 0b10101010_00000000);\n+            /// assert_eq!(m, Wrapping(-22016));\n             /// ```\n+            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+            #[cfg(not(stage0))]\n             #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn from_be(x: Self) -> Self {\n-                Wrapping(<$t>::from_be(x.0))\n+            pub fn reverse_bits(self) -> Self {\n+                Wrapping(self.0.reverse_bits())\n             }\n \n-            /// Converts an integer from little endian to the target's endianness.\n-            ///\n-            /// On little endian this is a no-op. On big endian the bytes are\n-            /// swapped.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n-            ///\n-            /// if cfg!(target_endian = \"little\") {\n-            ///     assert_eq!(Wrapping::<i64>::from_le(n), n);\n-            /// } else {\n-            ///     assert_eq!(Wrapping::<i64>::from_le(n), n.swap_bytes());\n-            /// }\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn from_le(x: Self) -> Self {\n-                Wrapping(<$t>::from_le(x.0))\n+            doc_comment! {\n+                concat!(\"Converts an integer from big endian to the target's endianness.\n+\n+On big endian this is a no-op. On little endian the bytes are\n+swapped.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(0x1A\", stringify!($t), \");\n+\n+if cfg!(target_endian = \\\"big\\\") {\n+    assert_eq!(<Wrapping<\", stringify!($t), \">>::from_be(n), n)\n+} else {\n+    assert_eq!(<Wrapping<\", stringify!($t), \">>::from_be(n), n.swap_bytes())\n+}\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn from_be(x: Self) -> Self {\n+                    Wrapping(<$t>::from_be(x.0))\n+                }\n             }\n \n-            /// Converts `self` to big endian from the target's endianness.\n-            ///\n-            /// On big endian this is a no-op. On little endian the bytes are\n-            /// swapped.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n-            ///\n-            /// if cfg!(target_endian = \"big\") {\n-            ///     assert_eq!(n.to_be(), n);\n-            /// } else {\n-            ///     assert_eq!(n.to_be(), n.swap_bytes());\n-            /// }\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn to_be(self) -> Self {\n-                Wrapping(self.0.to_be())\n+            doc_comment! {\n+                concat!(\"Converts an integer from little endian to the target's endianness.\n+\n+On little endian this is a no-op. On big endian the bytes are\n+swapped.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(0x1A\", stringify!($t), \");\n+\n+if cfg!(target_endian = \\\"little\\\") {\n+    assert_eq!(<Wrapping<\", stringify!($t), \">>::from_le(n), n)\n+} else {\n+    assert_eq!(<Wrapping<\", stringify!($t), \">>::from_le(n), n.swap_bytes())\n+}\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn from_le(x: Self) -> Self {\n+                    Wrapping(<$t>::from_le(x.0))\n+                }\n             }\n \n-            /// Converts `self` to little endian from the target's endianness.\n-            ///\n-            /// On little endian this is a no-op. On big endian the bytes are\n-            /// swapped.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let n: Wrapping<i64> = Wrapping(0x0123456789ABCDEF);\n-            ///\n-            /// if cfg!(target_endian = \"little\") {\n-            ///     assert_eq!(n.to_le(), n);\n-            /// } else {\n-            ///     assert_eq!(n.to_le(), n.swap_bytes());\n-            /// }\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn to_le(self) -> Self {\n-                Wrapping(self.0.to_le())\n+            doc_comment! {\n+                concat!(\"Converts `self` to big endian from the target's endianness.\n+\n+On big endian this is a no-op. On little endian the bytes are\n+swapped.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(0x1A\", stringify!($t), \");\n+\n+if cfg!(target_endian = \\\"big\\\") {\n+    assert_eq!(n.to_be(), n)\n+} else {\n+    assert_eq!(n.to_be(), n.swap_bytes())\n+}\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn to_be(self) -> Self {\n+                    Wrapping(self.0.to_be())\n+                }\n             }\n \n-            /// Raises self to the power of `exp`, using exponentiation by\n-            /// squaring.\n-            ///\n-            /// # Examples\n-            ///\n-            /// Basic usage:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// let x: Wrapping<i32> = Wrapping(2); // or any other integer type\n-            ///\n-            /// assert_eq!(x.pow(4), Wrapping(16));\n-            /// ```\n-            ///\n-            /// Results that are too large are wrapped:\n-            ///\n-            /// ```\n-            /// #![feature(wrapping_int_impl)]\n-            /// use std::num::Wrapping;\n-            ///\n-            /// // 5 ^ 4 = 625, which is too big for a u8\n-            /// let x: Wrapping<u8> = Wrapping(5);\n-            ///\n-            /// assert_eq!(x.pow(4).0, 113);\n-            /// ```\n-            #[inline]\n-            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n-            pub fn pow(self, exp: u32) -> Self {\n-                Wrapping(self.0.wrapping_pow(exp))\n+            doc_comment! {\n+                concat!(\"Converts `self` to little endian from the target's endianness.\n+\n+On little endian this is a no-op. On big endian the bytes are\n+swapped.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(0x1A\", stringify!($t), \");\n+\n+if cfg!(target_endian = \\\"little\\\") {\n+    assert_eq!(n.to_le(), n)\n+} else {\n+    assert_eq!(n.to_le(), n.swap_bytes())\n+}\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn to_le(self) -> Self {\n+                    Wrapping(self.0.to_le())\n+                }\n+            }\n+\n+        doc_comment! {\n+            concat!(\"Raises self to the power of `exp`, using exponentiation by squaring.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert_eq!(Wrapping(3\", stringify!($t), \").pow(4), Wrapping(81));\n+```\n+\n+Results that are too large are wrapped:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert_eq!(Wrapping(3i8).pow(5), Wrapping(-13));\n+assert_eq!(Wrapping(3i8).pow(6), Wrapping(-39));\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn pow(self, exp: u32) -> Self {\n+                    Wrapping(self.0.wrapping_pow(exp))\n+                }\n             }\n         }\n     )*)\n }\n \n wrapping_int_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n+macro_rules! wrapping_int_impl_signed {\n+    ($($t:ty)*) => ($(\n+        impl Wrapping<$t> {\n+            doc_comment! {\n+                concat!(\"Returns the number of leading zeros in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(\", stringify!($t), \"::max_value()) >> 2;\n+\n+assert_eq!(n.leading_zeros(), 3);\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn leading_zeros(self) -> u32 {\n+                    self.0.leading_zeros()\n+                }\n+            }\n+\n+            doc_comment! {\n+                concat!(\"Computes the absolute value of `self`, wrapping around at\n+the boundary of the type.\n+\n+The only case where such wrapping can occur is when one takes the absolute value of the negative\n+minimal value for the type this is a positive value that is too large to represent in the type. In\n+such a case, this function returns `MIN` itself.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert_eq!(Wrapping(100\", stringify!($t), \").abs(), Wrapping(100));\n+assert_eq!(Wrapping(-100\", stringify!($t), \").abs(), Wrapping(100));\n+assert_eq!(Wrapping(\", stringify!($t), \"::min_value()).abs(), Wrapping(\", stringify!($t),\n+\"::min_value()));\n+assert_eq!(Wrapping(-128i8).abs().0 as u8, 128u8);\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn abs(self) -> Wrapping<$t> {\n+                    Wrapping(self.0.wrapping_abs())\n+                }\n+            }\n+\n+            doc_comment! {\n+                concat!(\"Returns a number representing sign of `self`.\n+\n+ - `0` if the number is zero\n+ - `1` if the number is positive\n+ - `-1` if the number is negative\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert_eq!(Wrapping(10\", stringify!($t), \").signum(), Wrapping(1));\n+assert_eq!(Wrapping(0\", stringify!($t), \").signum(), Wrapping(0));\n+assert_eq!(Wrapping(-10\", stringify!($t), \").signum(), Wrapping(-1));\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn signum(self) -> Wrapping<$t> {\n+                    Wrapping(self.0.signum())\n+                }\n+            }\n+\n+            doc_comment! {\n+                concat!(\"Returns `true` if `self` is positive and `false` if the number is zero or\n+negative.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert!(Wrapping(10\", stringify!($t), \").is_positive());\n+assert!(!Wrapping(-10\", stringify!($t), \").is_positive());\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn is_positive(self) -> bool {\n+                    self.0.is_positive()\n+                }\n+            }\n+\n+            doc_comment! {\n+                concat!(\"Returns `true` if `self` is negative and `false` if the number is zero or\n+positive.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert!(Wrapping(-10\", stringify!($t), \").is_negative());\n+assert!(!Wrapping(10\", stringify!($t), \").is_negative());\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn is_negative(self) -> bool {\n+                    self.0.is_negative()\n+                }\n+            }\n+        }\n+    )*)\n+}\n+\n+wrapping_int_impl_signed! { isize i8 i16 i32 i64 i128 }\n+\n+macro_rules! wrapping_int_impl_unsigned {\n+    ($($t:ty)*) => ($(\n+        impl Wrapping<$t> {\n+            doc_comment! {\n+                concat!(\"Returns the number of leading zeros in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+let n = Wrapping(\", stringify!($t), \"::max_value()) >> 2;\n+\n+assert_eq!(n.leading_zeros(), 2);\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn leading_zeros(self) -> u32 {\n+                    self.0.leading_zeros()\n+                }\n+            }\n+\n+            doc_comment! {\n+                concat!(\"Returns `true` if and only if `self == 2^k` for some `k`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_int_impl)]\n+use std::num::Wrapping;\n+\n+assert!(Wrapping(16\", stringify!($t), \").is_power_of_two());\n+assert!(!Wrapping(10\", stringify!($t), \").is_power_of_two());\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+                pub fn is_power_of_two(self) -> bool {\n+                    self.0.is_power_of_two()\n+                }\n+            }\n+\n+            doc_comment! {\n+                concat!(\"Returns the smallest power of two greater than or equal to `self`.\n+\n+When return value overflows (i.e. `self > (1 << (N-1))` for type\n+`uN`), overflows to `2^N = 0`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(wrapping_next_power_of_two)]\n+use std::num::Wrapping;\n+\n+assert_eq!(Wrapping(2\", stringify!($t), \").next_power_of_two(), Wrapping(2));\n+assert_eq!(Wrapping(3\", stringify!($t), \").next_power_of_two(), Wrapping(4));\n+assert_eq!(Wrapping(200_u8).next_power_of_two(), Wrapping(0));\n+```\"),\n+                #[inline]\n+                #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n+                           reason = \"needs decision on wrapping behaviour\")]\n+                pub fn next_power_of_two(self) -> Self {\n+                    Wrapping(self.0.wrapping_next_power_of_two())\n+                }\n+            }\n+        }\n+    )*)\n+}\n+\n+wrapping_int_impl_unsigned! { usize u8 u16 u32 u64 u128 }\n \n mod shift_max {\n     #![allow(non_upper_case_globals)]\n@@ -656,11 +919,13 @@ mod shift_max {\n     pub const i16: u32 = (1 << 4) - 1;\n     pub const i32: u32 = (1 << 5) - 1;\n     pub const i64: u32 = (1 << 6) - 1;\n+    pub const i128: u32 = (1 << 7) - 1;\n     pub use self::platform::isize;\n \n     pub const u8: u32 = i8;\n     pub const u16: u32 = i16;\n     pub const u32: u32 = i32;\n     pub const u64: u32 = i64;\n+    pub const u128: u32 = i128;\n     pub use self::platform::usize;\n }"}]}