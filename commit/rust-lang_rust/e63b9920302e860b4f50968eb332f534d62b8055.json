{"sha": "e63b9920302e860b4f50968eb332f534d62b8055", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2M2I5OTIwMzAyZTg2MGI0ZjUwOTY4ZWIzMzJmNTM0ZDYyYjgwNTU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-15T10:39:31Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-22T10:36:31Z"}, "message": "Resolve PR comments", "tree": {"sha": "b878015b93d1aff000e8f14c6c8493bad5eca882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b878015b93d1aff000e8f14c6c8493bad5eca882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e63b9920302e860b4f50968eb332f534d62b8055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e63b9920302e860b4f50968eb332f534d62b8055", "html_url": "https://github.com/rust-lang/rust/commit/e63b9920302e860b4f50968eb332f534d62b8055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e63b9920302e860b4f50968eb332f534d62b8055/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdf5b555181ee6438a9cb01bb38ae5a52049475", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdf5b555181ee6438a9cb01bb38ae5a52049475", "html_url": "https://github.com/rust-lang/rust/commit/9fdf5b555181ee6438a9cb01bb38ae5a52049475"}], "stats": {"total": 212, "additions": 81, "deletions": 131}, "files": [{"sha": "5b9cb966af23550a0f3b959a6569163104811c1c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e63b9920302e860b4f50968eb332f534d62b8055", "patch": "@@ -924,8 +924,11 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn maybe_get_promoted_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) ->\n-        Option<IndexVec<Promoted, Body<'tcx>>> {\n+    pub fn maybe_get_promoted_mir(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        id: DefIndex,\n+    ) -> Option<IndexVec<Promoted, Body<'tcx>>> {\n         match self.is_proc_macro(id) {\n             true => None,\n             false => self.entry(id).promoted_mir.map(|promoted| promoted.decode((self, tcx)),)"}, {"sha": "1797d77461567529e985383042357e2f03bc5c52", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e63b9920302e860b4f50968eb332f534d62b8055", "patch": "@@ -1060,8 +1060,10 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n-    fn encode_promoted_mir(&mut self, def_id: DefId) ->\n-        Option<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>> {\n+    fn encode_promoted_mir(\n+        &mut self,\n+        def_id: DefId,\n+    ) -> Option<Lazy<IndexVec<mir::Promoted, mir::Body<'tcx>>>> {\n         debug!(\"EncodeContext::encode_promoted_mir({:?})\", def_id);\n         if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n             let promoted = self.tcx.promoted_mir(def_id);"}, {"sha": "c479c38f30c7ea9dcfe23bad512e991804854266", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=e63b9920302e860b4f50968eb332f534d62b8055", "patch": "@@ -16,7 +16,11 @@ pub fn renumber_mir<'tcx>(\n     debug!(\"renumber_mir: body.arg_count={:?}\", body.arg_count);\n \n     let mut visitor = NLLVisitor { infcx };\n-    visitor.visit_promoted(promoted);\n+\n+    for body in promoted.iter_mut() {\n+        visitor.visit_body(body);\n+    }\n+\n     visitor.visit_body(body);\n }\n \n@@ -47,13 +51,6 @@ impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n     {\n         renumber_regions(self.infcx, value)\n     }\n-\n-    fn visit_promoted(&mut self, promoted: &mut IndexVec<Promoted, Body<'tcx>>) {\n-        debug!(\"visiting promoted mir\");\n-        for body in promoted.iter_mut() {\n-            self.visit_body(body);\n-        }\n-    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {"}, {"sha": "aa83255bf62f45a541ceb239173041a17a43b8c3", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e63b9920302e860b4f50968eb332f534d62b8055", "patch": "@@ -112,7 +112,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n     };\n     debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n \n-    run_passes(tcx, &mut result, instance, MirPhase::Const, &[\n+    run_passes(tcx, &mut result, instance, None, MirPhase::Const, &[\n         &add_moves_for_packed_drops::AddMovesForPackedDrops,\n         &no_landing_pads::NoLandingPads,\n         &remove_noop_landing_pads::RemoveNoopLandingPads,"}, {"sha": "ac291c2996d065afc7140d92dc366141a8b59cf8", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 55, "deletions": 98, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e63b9920302e860b4f50968eb332f534d62b8055", "patch": "@@ -149,49 +149,46 @@ pub fn run_passes(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     instance: InstanceDef<'tcx>,\n+    promoted: Option<Promoted>,\n     mir_phase: MirPhase,\n     passes: &[&dyn MirPass<'tcx>],\n ) {\n     let phase_index = mir_phase.phase_index();\n \n-    let run_passes = |body: &mut Body<'tcx>, promoted| {\n-        if body.phase >= mir_phase {\n-            return;\n-        }\n+    if body.phase >= mir_phase {\n+        return;\n+    }\n \n-        let source = MirSource {\n-            instance,\n-            promoted,\n-        };\n-        let mut index = 0;\n-        let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n-            let run_hooks = |body: &_, index, is_after| {\n-                dump_mir::on_mir_pass(tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n-                                      &pass.name(), source, body, is_after);\n-            };\n-            run_hooks(body, index, false);\n-            pass.run_pass(tcx, source, body);\n-            run_hooks(body, index, true);\n-\n-            index += 1;\n+    let source = MirSource {\n+        instance,\n+        promoted,\n+    };\n+    let mut index = 0;\n+    let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n+        let run_hooks = |body: &_, index, is_after| {\n+            dump_mir::on_mir_pass(tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n+                                    &pass.name(), source, body, is_after);\n         };\n+        run_hooks(body, index, false);\n+        pass.run_pass(tcx, source, body);\n+        run_hooks(body, index, true);\n \n-        for pass in passes {\n-            run_pass(*pass);\n-        }\n-\n-        body.phase = mir_phase;\n+        index += 1;\n     };\n \n-    run_passes(body, None);\n+    for pass in passes {\n+        run_pass(*pass);\n+    }\n+\n+    body.phase = mir_phase;\n }\n \n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut body = tcx.mir_built(def_id).steal();\n-    run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Const, &[\n+    run_passes(tcx, &mut body, InstanceDef::Item(def_id), None, MirPhase::Const, &[\n         // What we need to do constant evaluation.\n         &simplify::SimplifyCfg::new(\"initial\"),\n         &rustc_peek::SanityCheck,\n@@ -213,7 +210,7 @@ fn mir_validated(\n \n     let mut body = tcx.mir_const(def_id).steal();\n     let qualify_and_promote_pass = qualify_consts::QualifyAndPromoteConstants::default();\n-    run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Validated, &[\n+    run_passes(tcx, &mut body, InstanceDef::Item(def_id), None, MirPhase::Validated, &[\n         // What we need to run borrowck etc.\n         &qualify_and_promote_pass,\n         &simplify::SimplifyCfg::new(\"qualify-consts\"),\n@@ -222,26 +219,13 @@ fn mir_validated(\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }\n \n-fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n-    if tcx.is_constructor(def_id) {\n-        // There's no reason to run all of the MIR passes on constructors when\n-        // we can just output the MIR we want directly. This also saves const\n-        // qualification and borrow checking the trouble of special casing\n-        // constructors.\n-        return shim::build_adt_ctor(tcx, def_id);\n-    }\n-\n-    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n-    // execute before we can steal.\n-    tcx.ensure().mir_borrowck(def_id);\n-\n-    if tcx.use_ast_borrowck() {\n-        tcx.ensure().borrowck(def_id);\n-    }\n-\n-    let (body, _) = tcx.mir_validated(def_id);\n-    let mut body = body.steal();\n-    run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Optimized, &[\n+fn run_optimization_passes<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    def_id: DefId,\n+    promoted: Option<Promoted>,\n+) {\n+    run_passes(tcx, body, InstanceDef::Item(def_id), promoted, MirPhase::Optimized, &[\n         // Remove all things only needed by analysis\n         &no_landing_pads::NoLandingPads,\n         &simplify_branches::SimplifyBranches::new(\"initial\"),\n@@ -292,6 +276,28 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n         &add_call_guards::CriticalCallEdges,\n         &dump_mir::Marker(\"PreCodegen\"),\n     ]);\n+}\n+\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n+    if tcx.is_constructor(def_id) {\n+        // There's no reason to run all of the MIR passes on constructors when\n+        // we can just output the MIR we want directly. This also saves const\n+        // qualification and borrow checking the trouble of special casing\n+        // constructors.\n+        return shim::build_adt_ctor(tcx, def_id);\n+    }\n+\n+    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n+    // execute before we can steal.\n+    tcx.ensure().mir_borrowck(def_id);\n+\n+    if tcx.use_ast_borrowck() {\n+        tcx.ensure().borrowck(def_id);\n+    }\n+\n+    let (body, _) = tcx.mir_validated(def_id);\n+    let mut body = body.steal();\n+    run_optimization_passes(tcx, &mut body, def_id, None);\n     tcx.arena.alloc(body)\n }\n \n@@ -304,57 +310,8 @@ fn promoted_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx IndexVec<Promot\n     let (_, promoted) = tcx.mir_validated(def_id);\n     let mut promoted = promoted.steal();\n \n-    for mut body in promoted.iter_mut() {\n-        run_passes(tcx, &mut body, InstanceDef::Item(def_id), MirPhase::Optimized, &[\n-            // Remove all things only needed by analysis\n-            &no_landing_pads::NoLandingPads,\n-            &simplify_branches::SimplifyBranches::new(\"initial\"),\n-            &remove_noop_landing_pads::RemoveNoopLandingPads,\n-            &cleanup_post_borrowck::CleanupNonCodegenStatements,\n-\n-            &simplify::SimplifyCfg::new(\"early-opt\"),\n-\n-            // These next passes must be executed together\n-            &add_call_guards::CriticalCallEdges,\n-            &elaborate_drops::ElaborateDrops,\n-            &no_landing_pads::NoLandingPads,\n-            // AddMovesForPackedDrops needs to run after drop\n-            // elaboration.\n-            &add_moves_for_packed_drops::AddMovesForPackedDrops,\n-            // AddRetag needs to run after ElaborateDrops, and it needs\n-            // an AllCallEdges pass right before it.  Otherwise it should\n-            // run fairly late, but before optimizations begin.\n-            &add_call_guards::AllCallEdges,\n-            &add_retag::AddRetag,\n-\n-            &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n-\n-            // No lifetime analysis based on borrowing can be done from here on out.\n-\n-            // From here on out, regions are gone.\n-            &erase_regions::EraseRegions,\n-\n-            // Optimizations begin.\n-            &uniform_array_move_out::RestoreSubsliceArrayMoveOut,\n-            &inline::Inline,\n-\n-            // Lowering generator control-flow and variables\n-            // has to happen before we do anything else to them.\n-            &generator::StateTransform,\n-\n-            &instcombine::InstCombine,\n-            &const_prop::ConstProp,\n-            &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n-            &deaggregator::Deaggregator,\n-            &copy_prop::CopyPropagation,\n-            &simplify_branches::SimplifyBranches::new(\"after-copy-prop\"),\n-            &remove_noop_landing_pads::RemoveNoopLandingPads,\n-            &simplify::SimplifyCfg::new(\"final\"),\n-            &simplify::SimplifyLocals,\n-\n-            &add_call_guards::CriticalCallEdges,\n-            &dump_mir::Marker(\"PreCodegen\"),\n-        ]);\n+    for (p, mut body) in promoted.iter_enumerated_mut() {\n+        run_optimization_passes(tcx, &mut body, def_id, Some(p));\n     }\n \n     tcx.intern_promoted(promoted)"}, {"sha": "cdccdfea3994342dddcf72a66e65c04688c250e2", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e63b9920302e860b4f50968eb332f534d62b8055/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=e63b9920302e860b4f50968eb332f534d62b8055", "patch": "@@ -304,12 +304,17 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let mut operand = {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n-            let mut promoted_place = |ty, substs, span| {\n+            let tcx = self.tcx;\n+            let mut promoted_place = |ty, span| {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n                 Place {\n                     base: PlaceBase::Static(box Static {\n-                        kind: StaticKind::Promoted(promoted_id, substs),\n+                        kind:\n+                            StaticKind::Promoted(\n+                                promoted_id,\n+                                InternalSubsts::identity_for_item(tcx, def_id),\n+                            ),\n                         ty,\n                         def_id,\n                     }),\n@@ -329,11 +334,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             Operand::Move(Place {\n                                 base: mem::replace(\n                                     &mut place.base,\n-                                    promoted_place(\n-                                        ty,\n-                                        InternalSubsts::identity_for_item(self.tcx, def_id),\n-                                        span,\n-                                    ).base\n+                                    promoted_place(ty, span).base\n                                 ),\n                                 projection: None,\n                             })\n@@ -349,13 +350,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let span = statement.source_info.span;\n                             mem::replace(\n                                 operand,\n-                                Operand::Copy(\n-                                    promoted_place(\n-                                        ty,\n-                                        InternalSubsts::identity_for_item(self.tcx, def_id),\n-                                        span,\n-                                    )\n-                                )\n+                                Operand::Copy(promoted_place(ty, span))\n                             )\n                         }\n                         _ => bug!()\n@@ -367,12 +362,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         TerminatorKind::Call { ref mut args, .. } => {\n                             let ty = args[index].ty(local_decls, self.tcx);\n                             let span = terminator.source_info.span;\n-                            let operand =\n-                                Operand::Copy(\n-                                    promoted_place(\n-                                        ty,\n-                                        InternalSubsts::identity_for_item(self.tcx, def_id),\n-                                        span));\n+                            let operand = Operand::Copy(promoted_place(ty, span));\n                             mem::replace(&mut args[index], operand)\n                         }\n                         // We expected a `TerminatorKind::Call` for which we'd like to promote an\n@@ -472,6 +462,7 @@ pub fn promote_candidates<'tcx>(\n             keep_original: false\n         };\n \n+        //FIXME(oli-obk): having a `maybe_push()` method on `IndexVec` might be nice\n         if let Some(promoted) = promoter.promote_candidate(def_id, candidate, promotions.len()) {\n             promotions.push(promoted);\n         }"}]}