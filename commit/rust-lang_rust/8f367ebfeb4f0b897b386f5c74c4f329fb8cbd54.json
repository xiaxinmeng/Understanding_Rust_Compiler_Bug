{"sha": "8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMzY3ZWJmZWI0ZjBiODk3YjM4NmY1Yzc0YzRmMzI5ZmI4Y2JkNTQ=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-01T12:20:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T05:56:53Z"}, "message": "Rename (again) str::unsafe::slice -> str::unsafe::slice_bytes and\nstr::unsafe::safe_slice -> str::unsafe::slice_bytes_safe_range", "tree": {"sha": "9796d775541b468b23646f034b028225c9cbce72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9796d775541b468b23646f034b028225c9cbce72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "html_url": "https://github.com/rust-lang/rust/commit/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01c01f68afc58bc9a7a4d4b85805925d45a39ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/01c01f68afc58bc9a7a4d4b85805925d45a39ec7", "html_url": "https://github.com/rust-lang/rust/commit/01c01f68afc58bc9a7a4d4b85805925d45a39ec7"}], "stats": {"total": 125, "additions": 39, "deletions": 86}, "files": [{"sha": "0aef3ff9e13384d4728667d2cf1b5c082dd64667", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -596,8 +596,8 @@ fn cmd_install(c: cargo, argv: [str]) unsafe {\n         let uuid = rest(target, 5u);\n         let idx = str::index(uuid, '/' as u8);\n         if idx != -1 {\n-            let source = str::unsafe::slice(uuid, 0u, idx as uint);\n-            uuid = str::unsafe::slice(uuid, idx as uint + 1u,\n+            let source = str::unsafe::slice_bytes(uuid, 0u, idx as uint);\n+            uuid = str::unsafe::slice_bytes(uuid, idx as uint + 1u,\n                                       str::byte_len(uuid));\n             install_uuid_specific(c, wd, source, uuid);\n         } else {\n@@ -607,8 +607,8 @@ fn cmd_install(c: cargo, argv: [str]) unsafe {\n         let name = target;\n         let idx = str::index(name, '/' as u8);\n         if idx != -1 {\n-            let source = str::unsafe::slice(name, 0u, idx as uint);\n-            name = str::unsafe::slice(name, idx as uint + 1u,\n+            let source = str::unsafe::slice_bytes(name, 0u, idx as uint);\n+            name = str::unsafe::slice_bytes(name, idx as uint + 1u,\n                                       str::byte_len(name));\n             install_named_specific(c, wd, source, name);\n         } else {"}, {"sha": "0052cdd352a7b8f57d55d3b8c8bb1b22b741fa96", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -570,7 +570,7 @@ fn link_binary(sess: session,\n                 (config.os == session::os_linux ||\n                  config.os == session::os_freebsd) &&\n                 str::find(filename, \"lib\") == 0 {\n-                ret str::unsafe::slice(filename, 3u,\n+                ret str::unsafe::slice_bytes(filename, 3u,\n                                str::byte_len(filename));\n             } else { ret filename; }\n         };"}, {"sha": "8732fa784a5967fd39bbd817c0cb83b03c93389d", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -168,7 +168,7 @@ fn create_compile_unit(cx: @crate_ctxt, full_path: str)\n \n     let work_dir = cx.sess.working_dir;\n     let file_path = if str::starts_with(full_path, work_dir) {\n-        str::unsafe::slice(full_path, str::byte_len(work_dir),\n+        str::unsafe::slice_bytes(full_path, str::byte_len(work_dir),\n                    str::byte_len(full_path))\n     } else {\n         full_path"}, {"sha": "eb6d1fd1d9d95b7789d1645c0ac243065ae9b683", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -118,11 +118,11 @@ fn get_line(fm: filemap, line: int) -> str unsafe {\n         // parsed. If we just slice the rest of the string, we'll print out\n         // the remainder of the file, which is undesirable.\n         end = str::byte_len(*fm.src);\n-        let rest = str::unsafe::slice(*fm.src, begin, end);\n+        let rest = str::unsafe::slice_bytes(*fm.src, begin, end);\n         let newline = str::index(rest, '\\n' as u8);\n         if newline != -1 { end = begin + (newline as uint); }\n     }\n-    ret str::unsafe::slice(*fm.src, begin, end);\n+    ret str::unsafe::slice_bytes(*fm.src, begin, end);\n }\n \n fn get_filemap(cm: codemap, filename: str) -> filemap {"}, {"sha": "4d7ee27eb9d10f5a550d980c635d8c457dfe7856", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -27,7 +27,7 @@ impl reader for reader {\n     fn get_str_from(start: uint) -> str unsafe {\n         // I'm pretty skeptical about this subtraction. What if there's a\n         // multi-byte character before the mark?\n-        ret str::unsafe::slice(*self.src, start - 1u, self.pos - 1u);\n+        ret str::unsafe::slice_bytes(*self.src, start - 1u, self.pos - 1u);\n     }\n     fn next() -> char {\n         if self.pos < self.len {\n@@ -584,7 +584,7 @@ fn trim_whitespace_prefix_and_push_line(&lines: [str],\n     let s1;\n     if all_whitespace(s, 0u, col) {\n         if col < str::byte_len(s) {\n-            s1 = str::unsafe::slice(s, col, str::byte_len(s));\n+            s1 = str::unsafe::slice_bytes(s, col, str::byte_len(s));\n         } else { s1 = \"\"; }\n     } else { s1 = s; }\n     log(debug, \"pushing line: \" + s1);"}, {"sha": "3703badf52793c1eb6b4898ccb5914ff69e54f6b", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -41,11 +41,11 @@ fn parse_expected(line_num: uint, line: str) -> [expected_error] unsafe {\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n     let start_kind = idx;\n     while idx < len && line[idx] != (' ' as u8) { idx += 1u; }\n-    let kind = str::to_lower(str::unsafe::slice(line, start_kind, idx));\n+    let kind = str::to_lower(str::unsafe::slice_bytes(line, start_kind, idx));\n \n     // Extract msg:\n     while idx < len && line[idx] == (' ' as u8) { idx += 1u; }\n-    let msg = str::unsafe::slice(line, idx, len);\n+    let msg = str::unsafe::slice_bytes(line, idx, len);\n \n     #debug(\"line=%u kind=%s msg=%s\", line_num - adjust_line, kind, msg);\n "}, {"sha": "e09861141c4af425527abdbfb9dd788c11fc8a2e", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -109,7 +109,7 @@ fn parse_name_value_directive(line: str,\n     if str::find(line, keycolon) >= 0 {\n         let colon = str::find(line, keycolon) as uint;\n         let value =\n-            str::unsafe::slice(line, colon + str::byte_len(keycolon),\n+            str::unsafe::slice_bytes(line, colon + str::byte_len(keycolon),\n                        str::byte_len(line));\n         #debug(\"%s: %s\", directive,  value);\n         option::some(value)"}, {"sha": "a5cfb8db3f7cf966d73814c1ea39b426abd60d00", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -286,7 +286,7 @@ fn check_variants_T<T: copy>(\n fn last_part(filename: str) -> str unsafe {\n   let ix = str::rindex(filename, 47u8 /* '/' */);\n   assert ix >= 0;\n-  str::unsafe::slice(filename, ix as uint + 1u, str::byte_len(filename) - 3u)\n+  str::unsafe::slice_bytes(filename, ix as uint + 1u, str::byte_len(filename) - 3u)\n }\n \n enum happiness { passed, cleanly_rejected(str), known_bug(str), failed(str), }"}, {"sha": "742d31fea3ec08371ad372957b23d01c05eb9ff7", "filename": "src/libcore/str.rs", "status": "modified", "additions": 12, "deletions": 60, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -38,8 +38,6 @@ export\n    chars,\n    substr,\n    char_slice,\n-   //slice,\n-   //safe_slice,\n    split,\n    splitn,\n    split_str,\n@@ -425,7 +423,7 @@ Failure:\n If `begin` + `len` is is greater than the byte length of the string\n */\n fn substr(s: str, begin: uint, len: uint) -> str unsafe {\n-    ret unsafe::slice(s, begin, begin + len);\n+    ret unsafe::slice_bytes(s, begin, begin + len);\n }\n \n /*\n@@ -446,48 +444,6 @@ fn char_slice(s: str, begin: uint, end: uint) -> str {\n     from_chars(vec::slice(chars(s), begin, end))\n }\n \n-/*\n-Function: slice\n-\n-Takes a bytewise slice from a string. Returns the substring from\n-[`begin`..`end`).\n-\n-This function is not unicode-safe.\n-\n-Failure:\n-\n-- If begin is greater than end.\n-- If end is greater than the length of the string.\n-\n-FIXME: rename to slice_byte or slice_byte_unsafe\n-*/\n-fn slice(s: str, begin: uint, end: uint) -> str unsafe {\n-    // FIXME: Typestate precondition\n-    assert (begin <= end);\n-    assert (end <= byte_len(s));\n-\n-    let v: [u8] = ::unsafe::reinterpret_cast(s);\n-    let v2 = vec::slice(v, begin, end);\n-    ::unsafe::leak(v);\n-    v2 += [0u8];\n-    let s2: str = ::unsafe::reinterpret_cast(v2);\n-    ::unsafe::leak(v2);\n-    ret s2;\n-}\n-\n-/*\n-Function: safe_slice\n-\n-FIXME: make sure char_slice / slice / byte_slice\n-       have these preconditions and assertions\n-FIXME: this shouldn't be mistaken for a UTF-8 safe slice\n-*/\n-fn safe_slice(s: str, begin: uint, end: uint) : uint::le(begin, end) -> str {\n-    // would need some magic to make this a precondition\n-    assert (end <= byte_len(s));\n-    ret slice(s, begin, end);\n-}\n-\n /*\n Function: split\n \n@@ -712,7 +668,7 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str unsafe {\n     if byte_len(s) == 0u {\n         ret \"\";\n     } else if starts_with(s, from) {\n-        ret to + replace(unsafe::slice(s, byte_len(from), byte_len(s)),\n+        ret to + replace(unsafe::slice_bytes(s, byte_len(from), byte_len(s)),\n                                        from, to);\n     } else {\n         let idx = find(s, from);\n@@ -1348,8 +1304,8 @@ mod unsafe {\n       // UNSAFE\n       from_bytes,\n       from_byte,\n-      slice,\n-      safe_slice;\n+      slice_bytes,\n+      slice_bytes_safe_range;\n \n    // Function: unsafe::from_bytes\n    //\n@@ -1371,19 +1327,15 @@ mod unsafe {\n    /*\n    Function: slice\n \n-   Takes a bytewise slice from a string. Returns the substring from\n-   [`begin`..`end`).\n-\n-   This function is not unicode-safe.\n+   Takes a bytewise (not UTF-8) slice from a string.\n+   Returns the substring from [`begin`..`end`).\n \n    Failure:\n \n    - If begin is greater than end.\n    - If end is greater than the length of the string.\n-\n-   FIXME: rename to byte_slice\n    */\n-   unsafe fn slice(s: str, begin: uint, end: uint) -> str unsafe {\n+   unsafe fn slice_bytes(s: str, begin: uint, end: uint) -> str unsafe {\n        // FIXME: Typestate precondition\n        assert (begin <= end);\n        assert (end <= byte_len(s));\n@@ -1398,15 +1350,15 @@ mod unsafe {\n    }\n \n    /*\n-   Function: safe_slice\n+   Function: slice_bytes_safe_range\n \n-   FIXME: rename to safe_range_byte_slice\n+   Like slice_bytes, with a precondition\n    */\n-   unsafe fn safe_slice(s: str, begin: uint, end: uint)\n+   unsafe fn slice_bytes_safe_range(s: str, begin: uint, end: uint)\n        : uint::le(begin, end) -> str {\n        // would need some magic to make this a precondition\n        assert (end <= byte_len(s));\n-       ret slice(s, begin, end);\n+       ret slice_bytes(s, begin, end);\n    }\n \n }\n@@ -1653,7 +1605,7 @@ mod tests {\n             ret rs;\n         }\n         assert (eq(half_a_million_letter_a(),\n-                        unsafe::slice(a_million_letter_a(), 0u, 500000u)));\n+               unsafe::slice_bytes(a_million_letter_a(), 0u, 500000u)));\n     }\n \n     #[test]"}, {"sha": "1e5c9657d1e0fc5a79d6c49c81e941f3fa020520", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -71,7 +71,7 @@ fn basename(p: path) -> path unsafe {\n     }\n     let len = str::byte_len(p);\n     if i + 1 as uint >= len { ret p; }\n-    ret str::unsafe::slice(p, i + 1 as uint, len);\n+    ret str::unsafe::slice_bytes(p, i + 1 as uint, len);\n }\n \n "}, {"sha": "bc96cb65efa680caf78be3d232c8477ef0ef33ba", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -229,14 +229,15 @@ fn getopts(args: [str], opts: [opt]) -> result unsafe {\n             let names;\n             let i_arg = option::none::<str>;\n             if cur[1] == '-' as u8 {\n-                let tail = str::unsafe::slice(cur, 2u, curlen);\n+                let tail = str::unsafe::slice_bytes(cur, 2u, curlen);\n                 let eq = str::index(tail, '=' as u8);\n                 if eq == -1 {\n                     names = [long(tail)];\n                 } else {\n-                    names = [long(str::unsafe::slice(tail, 0u, eq as uint))];\n+                    names =\n+                        [long(str::unsafe::slice_bytes(tail,0u,eq as uint))];\n                     i_arg =\n-                        option::some::<str>(str::unsafe::slice(tail,\n+                        option::some::<str>(str::unsafe::slice_bytes(tail,\n                                                        (eq as uint) + 1u,\n                                                        curlen - 2u));\n                 }"}, {"sha": "b8a4a164c7eecbfda57f096a7f506843639a0387", "filename": "src/test/compile-fail/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -5,5 +5,5 @@ import str::*;\n fn main() unsafe {\n     let a: uint = 4u;\n     let b: uint = 1u;\n-    log(error, str::unsafe::safe_slice(\"kitties\", a, b));\n+    log(error, str::unsafe::slice_bytes_safe_range(\"kitties\", a, b));\n }"}, {"sha": "ae5a024863b7dc0eb8bd7becc2fcf8247e44a53b", "filename": "src/test/compile-fail/no-constraint-prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -16,5 +16,5 @@ fn main() unsafe {\n     // the next statement, since it's not true in the\n     // prestate.\n     let d <- a;\n-    log(debug, str::unsafe::safe_slice(\"kitties\", b, d));\n+    log(debug, str::unsafe::slice_bytes_safe_range(\"kitties\", b, d));\n }"}, {"sha": "5277b1bc6e1315b9447fa5899b06476bbea6f12f", "filename": "src/test/run-fail/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-fail%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-fail%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffn-constraint.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -7,5 +7,5 @@ fn main() unsafe {\n     let a: uint = 4u;\n     let b: uint = 1u;\n     check (le(a, b));\n-    log(error, str::unsafe::safe_slice(\"kitties\", a, b));\n+    log(error, str::unsafe::slice_bytes_safe_range(\"kitties\", a, b));\n }"}, {"sha": "1f8e6f69b27305481228b8fdb358684abb447cbb", "filename": "src/test/run-pass/constraint-prop-expr-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -8,5 +8,5 @@ fn main() unsafe {\n     let c: uint = 17u;\n     check (le(a, b));\n     c <- a;\n-    log(debug, str::unsafe::safe_slice(\"kitties\", c, b));\n+    log(debug, str::unsafe::slice_bytes_safe_range(\"kitties\", c, b));\n }"}, {"sha": "12124e8801f21cb1d257f40273a58535668b51ed", "filename": "src/test/run-pass/constraint-prop-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -7,5 +7,5 @@ fn main() unsafe {\n     let b: uint = 4u;\n     check (le(a, b));\n     let c <- a;\n-    log(debug, str::unsafe::safe_slice(\"kitties\", c, b));\n+    log(debug, str::unsafe::slice_bytes_safe_range(\"kitties\", c, b));\n }"}, {"sha": "6c9af246dbda613d1cfc4f79bcaf322b25654843", "filename": "src/test/run-pass/constraint-prop-swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -7,5 +7,5 @@ fn main() unsafe {\n     let b: uint = 1u;\n     check (le(b, a));\n     b <-> a;\n-    log(debug, str::unsafe::safe_slice(\"kitties\", a, b));\n+    log(debug, str::unsafe::slice_bytes_safe_range(\"kitties\", a, b));\n }"}, {"sha": "62cee45c9581e58225afe98c0eb84ccb49648782", "filename": "src/test/run-pass/constraint-prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -7,5 +7,5 @@ fn main() unsafe {\n     let b: uint = 4u;\n     check (le(a, b));\n     let c = b;\n-    log(debug, str::unsafe::safe_slice(\"kitties\", a, c));\n+    log(debug, str::unsafe::slice_bytes_safe_range(\"kitties\", a, c));\n }"}, {"sha": "2d5e28f209ca4146c10bdc325de87f9a32c85144", "filename": "src/test/run-pass/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54/src%2Ftest%2Frun-pass%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-constraint.rs?ref=8f367ebfeb4f0b897b386f5c74c4f329fb8cbd54", "patch": "@@ -6,5 +6,5 @@ fn main() unsafe {\n     let a: uint = 1u;\n     let b: uint = 4u;\n     check (le(a, b));\n-    log(debug, str::unsafe::safe_slice(\"kitties\", a, b));\n+    log(debug, str::unsafe::slice_bytes_safe_range(\"kitties\", a, b));\n }"}]}