{"sha": "d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMWUwYWJkYjU3YzViZTM0MDkzNGNiNTFlMmY2YjFhMmU2YzAzNzM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-08T20:00:27Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-08T20:26:28Z"}, "message": "Refactor and simpfily", "tree": {"sha": "837abe3c0c20d35040fd8f21c34e093e16cd09db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837abe3c0c20d35040fd8f21c34e093e16cd09db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "html_url": "https://github.com/rust-lang/rust/commit/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ed93db13877888379ea38c843729419bdf99d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ed93db13877888379ea38c843729419bdf99d0", "html_url": "https://github.com/rust-lang/rust/commit/62ed93db13877888379ea38c843729419bdf99d0"}], "stats": {"total": 131, "additions": 42, "deletions": 89}, "files": [{"sha": "e6d2e8d9dc965e4fc89bef004814a573a26310f8", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 14, "deletions": 66, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "patch": "@@ -8,22 +8,10 @@ use ra_prof::profile;\n use ra_syntax::{AstNode, Parse, SyntaxNode};\n \n use crate::{\n-    ast_id_map::AstIdMap, ExpansionInfo, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc,\n-    MacroDefId, MacroFile, MacroFileKind,\n+    ast_id_map::AstIdMap, HirFileId, HirFileIdRepr, MacroCallId, MacroCallLoc, MacroDefId,\n+    MacroFile, MacroFileKind,\n };\n \n-#[derive(Debug, PartialEq, Eq, Clone)]\n-pub struct ParseMacroWithInfo {\n-    pub parsed: Parse<SyntaxNode>,\n-    pub expansion_info: Arc<ExpansionInfo>,\n-}\n-\n-#[derive(Debug, PartialEq, Eq, Clone)]\n-pub struct MacroExpandInfo {\n-    pub arg_map: Arc<mbe::TokenMap>,\n-    pub def_map: Arc<mbe::TokenMap>,\n-}\n-\n // FIXME: rename to ExpandDatabase\n #[salsa::query_group(AstDatabaseStorage)]\n pub trait AstDatabase: SourceDatabase {\n@@ -36,14 +24,11 @@ pub trait AstDatabase: SourceDatabase {\n     fn intern_macro(&self, macro_call: MacroCallLoc) -> MacroCallId;\n     fn macro_arg(&self, id: MacroCallId) -> Option<(Arc<tt::Subtree>, Arc<mbe::TokenMap>)>;\n     fn macro_def(&self, id: MacroDefId) -> Option<(Arc<mbe::MacroRules>, Arc<mbe::TokenMap>)>;\n-    fn parse_macro(&self, macro_file: MacroFile) -> Option<Parse<SyntaxNode>>;\n-    fn parse_macro_with_info(&self, macro_file: MacroFile) -> Option<ParseMacroWithInfo>;\n-    fn macro_expand(\n+    fn parse_macro(\n         &self,\n-        macro_call: MacroCallId,\n-    ) -> Result<(Arc<tt::Subtree>, MacroExpandInfo), String>;\n-\n-    fn macro_expansion_info(&self, macro_file: MacroFile) -> Option<Arc<ExpansionInfo>>;\n+        macro_file: MacroFile,\n+    ) -> Option<(Parse<SyntaxNode>, Arc<mbe::RevTokenMap>)>;\n+    fn macro_expand(&self, macro_call: MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n }\n \n pub(crate) fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n@@ -83,7 +68,7 @@ pub(crate) fn macro_arg(\n pub(crate) fn macro_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n-) -> Result<(Arc<tt::Subtree>, MacroExpandInfo), String> {\n+) -> Result<Arc<tt::Subtree>, String> {\n     let loc = db.lookup_intern_macro(id);\n     let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n \n@@ -94,34 +79,24 @@ pub(crate) fn macro_expand(\n     if count > 65536 {\n         return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n     }\n-\n-    Ok((\n-        Arc::new(tt),\n-        MacroExpandInfo { arg_map: macro_arg.1.clone(), def_map: macro_rules.1.clone() },\n-    ))\n+    Ok(Arc::new(tt))\n }\n \n pub(crate) fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n     match file_id.0 {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n-            db.parse_macro(macro_file).map(|it| it.syntax_node())\n+            db.parse_macro(macro_file).map(|(it, _)| it.syntax_node())\n         }\n     }\n }\n \n pub(crate) fn parse_macro(\n     db: &dyn AstDatabase,\n     macro_file: MacroFile,\n-) -> Option<Parse<SyntaxNode>> {\n+) -> Option<(Parse<SyntaxNode>, Arc<mbe::RevTokenMap>)> {\n     let _p = profile(\"parse_macro_query\");\n-    db.parse_macro_with_info(macro_file).map(|r| r.parsed)\n-}\n \n-pub(crate) fn parse_macro_with_info(\n-    db: &dyn AstDatabase,\n-    macro_file: MacroFile,\n-) -> Option<ParseMacroWithInfo> {\n     let macro_call_id = macro_file.macro_call_id;\n     let tt = db\n         .macro_expand(macro_call_id)\n@@ -133,39 +108,12 @@ pub(crate) fn parse_macro_with_info(\n         })\n         .ok()?;\n \n-    let (parsed, exp_map) = match macro_file.macro_file_kind {\n+    match macro_file.macro_file_kind {\n         MacroFileKind::Items => {\n-            mbe::token_tree_to_items(&tt.0).map(|(p, map)| (p.to_syntax(), map)).ok()?\n+            mbe::token_tree_to_items(&tt).ok().map(|(p, map)| (p.to_syntax(), Arc::new(map)))\n         }\n         MacroFileKind::Expr => {\n-            mbe::token_tree_to_expr(&tt.0).map(|(p, map)| (p.to_syntax(), map)).ok()?\n+            mbe::token_tree_to_expr(&tt).ok().map(|(p, map)| (p.to_syntax(), Arc::new(map)))\n         }\n-    };\n-\n-    let expand_info = tt.1;\n-    let loc: MacroCallLoc = db.lookup_intern_macro(macro_call_id);\n-\n-    let arg_tt = loc.ast_id.to_node(db).token_tree();\n-    let def_tt = loc.def.ast_id.to_node(db).token_tree();\n-\n-    let arg_range = arg_tt.map(|t| t.syntax().text_range());\n-    let def_range = def_tt.map(|t| t.syntax().text_range());\n-\n-    let shift = db.macro_def(loc.def)?.0.shift();\n-\n-    let arg_map =\n-        arg_range.map(|it| exp_map.map_ranges(&expand_info.arg_map, it, shift)).unwrap_or_default();\n-    let def_map =\n-        def_range.map(|it| exp_map.map_ranges(&expand_info.def_map, it, 0)).unwrap_or_default();\n-\n-    let info = ExpansionInfo { arg_map, def_map };\n-\n-    Some(ParseMacroWithInfo { parsed, expansion_info: Arc::new(info) })\n-}\n-\n-pub(crate) fn macro_expansion_info(\n-    db: &dyn AstDatabase,\n-    macro_file: MacroFile,\n-) -> Option<Arc<ExpansionInfo>> {\n-    db.parse_macro_with_info(macro_file).map(|res| res.expansion_info.clone())\n+    }\n }"}, {"sha": "1a1d6bdd4297c87e4250abea343133d288d4acb1", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "patch": "@@ -20,7 +20,6 @@ use ra_syntax::{\n };\n \n use crate::ast_id_map::FileAstId;\n-use std::sync::Arc;\n \n /// Input to the analyzer is a set of files, where each file is identified by\n /// `FileId` and contains source code. However, another source of source code in\n@@ -69,19 +68,29 @@ impl HirFileId {\n     }\n \n     /// Return expansion information if it is a macro-expansion file\n-    pub fn parent_expansion(\n-        self,\n-        db: &dyn db::AstDatabase,\n-    ) -> Option<((HirFileId, HirFileId), Arc<ExpansionInfo>)> {\n+    pub fn parent_expansion(self, db: &dyn db::AstDatabase) -> Option<ExpansionInfo> {\n         match self.0 {\n             HirFileIdRepr::FileId(_) => None,\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n \n-                let def_file = loc.def.ast_id.file_id;\n+                let arg_range = loc.ast_id.to_node(db).token_tree()?.syntax().text_range();\n+                let def_range = loc.def.ast_id.to_node(db).token_tree()?.syntax().text_range();\n+\n+                let macro_def = db.macro_def(loc.def)?;\n+                let shift = macro_def.0.shift();\n+                let rev_map = db.parse_macro(macro_file)?.1;\n+\n+                let arg_token_map = db.macro_arg(macro_file.macro_call_id)?.1;\n+                let def_token_map = macro_def.1;\n+\n+                let arg_map = rev_map.map_ranges(&arg_token_map, arg_range, shift);\n+                let def_map = rev_map.map_ranges(&def_token_map, def_range, 0);\n+\n                 let arg_file = loc.ast_id.file_id;\n+                let def_file = loc.def.ast_id.file_id;\n \n-                db.macro_expansion_info(macro_file).map(|ex| ((arg_file, def_file), ex))\n+                Some(ExpansionInfo { arg_file, def_file, arg_map, def_map })\n             }\n         }\n     }\n@@ -134,25 +143,24 @@ impl MacroCallId {\n #[derive(Debug, Clone, PartialEq, Eq)]\n /// ExpansionInfo mainly describes how to map text range between src and expanded macro\n pub struct ExpansionInfo {\n-    pub arg_map: Vec<(TextRange, TextRange)>,\n-    pub def_map: Vec<(TextRange, TextRange)>,\n+    pub(crate) arg_file: HirFileId,\n+    pub(crate) def_file: HirFileId,\n+\n+    pub(crate) arg_map: Vec<(TextRange, TextRange)>,\n+    pub(crate) def_map: Vec<(TextRange, TextRange)>,\n }\n \n impl ExpansionInfo {\n-    pub fn find_range(\n-        &self,\n-        from: TextRange,\n-        (arg_file_id, def_file_id): (HirFileId, HirFileId),\n-    ) -> Option<(HirFileId, TextRange)> {\n+    pub fn find_range(&self, from: TextRange) -> Option<(HirFileId, TextRange)> {\n         for (src, dest) in &self.arg_map {\n             if src.is_subrange(&from) {\n-                return Some((arg_file_id, *dest));\n+                return Some((self.arg_file, *dest));\n             }\n         }\n \n         for (src, dest) in &self.def_map {\n             if src.is_subrange(&from) {\n-                return Some((def_file_id, *dest));\n+                return Some((self.def_file, *dest));\n             }\n         }\n "}, {"sha": "b77e1923138a2df2e3a546fca433667d86177a27", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "patch": "@@ -37,7 +37,7 @@ fn find_range_from_node(\n     let text_range = node.text_range();\n     let (file_id, text_range) = src\n         .parent_expansion(db)\n-        .and_then(|(files, expansion_info)| expansion_info.find_range(text_range, files))\n+        .and_then(|expansion_info| expansion_info.find_range(text_range))\n         .unwrap_or((src, text_range));\n \n     // FIXME: handle recursive macro generated macro\n@@ -139,7 +139,6 @@ impl NavigationTarget {\n     pub(crate) fn from_module(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let src = module.definition_source(db);\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-\n         match src.ast {\n             ModuleSource::SourceFile(node) => {\n                 let (file_id, text_range) = find_range_from_node(db, src.file_id, node.syntax());\n@@ -324,9 +323,7 @@ impl NavigationTarget {\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n-\n         let focus_range = node.name().map(|it| find_range_from_node(db, file_id, it.syntax()).1);\n-\n         let (file_id, full_range) = find_range_from_node(db, file_id, node.syntax());\n \n         NavigationTarget::from_syntax("}, {"sha": "1bb27eb8512345760ce173f3ae44c3fba35833ac", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "patch": "@@ -94,10 +94,10 @@ impl FromIterator<TableEntry<FileId, Parse<ast::SourceFile>>> for SyntaxTreeStat\n     }\n }\n \n-impl FromIterator<TableEntry<MacroFile, Option<Parse<SyntaxNode>>>> for SyntaxTreeStats {\n+impl<M> FromIterator<TableEntry<MacroFile, Option<(Parse<SyntaxNode>, M)>>> for SyntaxTreeStats {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<MacroFile, Option<Parse<SyntaxNode>>>>,\n+        T: IntoIterator<Item = TableEntry<MacroFile, Option<(Parse<SyntaxNode>, M)>>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {"}, {"sha": "70a289f099c1718694cab893a327a5d938179602", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01e0abdb57c5be340934cb51e2f6b1a2e6c0373/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=d01e0abdb57c5be340934cb51e2f6b1a2e6c0373", "patch": "@@ -32,7 +32,7 @@ pub enum ExpandError {\n \n pub use crate::syntax_bridge::{\n     ast_to_token_tree, syntax_node_to_token_tree, token_tree_to_expr, token_tree_to_items,\n-    token_tree_to_macro_stmts, token_tree_to_pat, token_tree_to_ty, TokenMap,\n+    token_tree_to_macro_stmts, token_tree_to_pat, token_tree_to_ty, RevTokenMap, TokenMap,\n };\n \n /// This struct contains AST for a single `macro_rules` definition. What might"}]}