{"sha": "d048a00cf3c275d9f9974960d0db463844da898e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDhhMDBjZjNjMjc1ZDlmOTk3NDk2MGQwZGI0NjM4NDRkYTg5OGU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-08T22:29:17Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-08T22:30:01Z"}, "message": "Change util::unreachable to core::unreachable\n\nCloses #1931", "tree": {"sha": "ed70a4437963d2c11daeeb91bf18be117c1f3abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed70a4437963d2c11daeeb91bf18be117c1f3abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d048a00cf3c275d9f9974960d0db463844da898e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d048a00cf3c275d9f9974960d0db463844da898e", "html_url": "https://github.com/rust-lang/rust/commit/d048a00cf3c275d9f9974960d0db463844da898e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d048a00cf3c275d9f9974960d0db463844da898e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0824d1501b7911f45d028cb387e5e159bdd63eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0824d1501b7911f45d028cb387e5e159bdd63eca", "html_url": "https://github.com/rust-lang/rust/commit/0824d1501b7911f45d028cb387e5e159bdd63eca"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "6e518363125db776f747fd89b7712bb35c478351", "filename": "src/fuzzer/rand_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Ffuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Ffuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Frand_util.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -50,7 +50,7 @@ fn weighted_choice<T: copy>(r : rand::rng, v : [weighted<T>]) -> T {\n             ret item;\n         }\n     }\n-    std::util::unreachable();\n+    core::unreachable();\n }\n \n fn weighted_vec<T: copy>(v : [weighted<T>]) -> [T] {"}, {"sha": "5ea8fcb545fd41d90534a2146dde203afd2d6542", "filename": "src/libcore/core.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -6,7 +6,7 @@ import option::{some, none};\n import option = option::t;\n import path = path::path;\n import vec::vec_len;\n-export path, option, some, none, vec_len;\n+export path, option, some, none, vec_len, unreachable;\n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is\n@@ -39,3 +39,15 @@ mod std {\n     use std;\n     import std::test;\n }\n+\n+/*\n+Function: unreachable\n+\n+A standard function to use to indicate unreachable code. Because the\n+function is guaranteed to fail typestate will correctly identify\n+any code paths following the appearance of this function as unreachable.\n+*/\n+fn unreachable() -> ! {\n+    fail \"Internal error: entered unreachable code\";\n+}\n+"}, {"sha": "0432d136c35c4d864398c9f6e095e61387fc27dc", "filename": "src/libstd/generic_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgeneric_os.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -80,7 +80,7 @@ fn getenv(n: str) -> option<str> {\n             ret option::some(str::from_bytes(v)); // UTF-8 or fail\n         } else { nsize = res; }\n     }\n-    util::unreachable();\n+    core::unreachable();\n }\n \n #[cfg(target_os = \"win32\")]"}, {"sha": "bb67b574a440399c6160fd408b285cfa5a68c24e", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -158,7 +158,7 @@ mod chained {\n               }\n             }\n         }\n-        util::unreachable();\n+        core::unreachable();\n     }\n \n     fn search_tbl<K: copy, V: copy>("}, {"sha": "ea99d58aa86abe869a147d3cb2250bbde4379c43", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -1028,7 +1028,7 @@ mod node {\n               }\n             }\n         }\n-        util::unreachable();\n+        core::unreachable();\n     }\n \n     /*\n@@ -1092,7 +1092,7 @@ mod node {\n               }\n             }\n         }\n-        util::unreachable();\n+        core::unreachable();\n     }\n \n     fn concat2(left: @node, right: @node) -> @node {\n@@ -1176,7 +1176,7 @@ mod node {\n               }\n             }\n         }\n-        util::unreachable();\n+        core::unreachable();\n     }\n \n     /*\n@@ -1209,7 +1209,7 @@ mod node {\n               }\n             }\n         }\n-        util::unreachable();\n+        core::unreachable();\n     }\n \n     mod leaf_iterator {\n@@ -1248,7 +1248,7 @@ mod node {\n                   }\n                 }\n             }\n-            util::unreachable();\n+            core::unreachable();\n         }\n     }\n \n@@ -1292,7 +1292,7 @@ mod node {\n                   }\n                 }\n             }\n-            util::unreachable();\n+            core::unreachable();\n         }\n \n         fn get_current_or_next_leaf(it: t) -> option<leaf> {"}, {"sha": "2be273f8ab93f066f58c0a5d10c7e0ca3ed13641", "filename": "src/libstd/util.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -9,17 +9,6 @@ The identity function\n */\n pure fn id<T: copy>(x: T) -> T { x }\n \n-/*\n-Function: unreachable\n-\n-A standard function to use to indicate unreachable code. Because the\n-function is guaranteed to fail typestate will correctly identify\n-any code paths following the appearance of this function as unreachable.\n-*/\n-fn unreachable() -> ! {\n-    fail \"Internal error: entered unreachable code\";\n-}\n-\n /* FIXME (issue #141):  See test/run-pass/constrained-type.rs.  Uncomment\n  * the constraint once fixed. */\n /*"}, {"sha": "eef999a9571cab86a918dd24edd2969896b82d83", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -106,7 +106,7 @@ fn get_rpath_relative_to_output(os: session::os,\n         session::os_linux { \"$ORIGIN\" + fs::path_sep() }\n         session::os_freebsd { \"$ORIGIN\" + fs::path_sep() }\n         session::os_macos { \"@executable_path\" + fs::path_sep() }\n-        session::os_win32 { std::util::unreachable(); }\n+        session::os_win32 { core::unreachable(); }\n     };\n \n     prefix + get_relative_to("}, {"sha": "463ad79ffce593e584d8016cc69c692a9051dbd5", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -6,7 +6,7 @@ import syntax::visit;\n import visit::vt;\n import std::list;\n import std::map::hashmap;\n-import std::util::unreachable;\n+import core::unreachable;\n import option::is_none;\n import list::list;\n import driver::session::session;"}, {"sha": "854439c8533c56ed2512aa9e0e26f350d08796ab", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -2,7 +2,7 @@ import syntax::{visit, ast_util};\n import syntax::ast::*;\n import syntax::codemap::span;\n import std::list::{is_not_empty, list, nil, cons, tail};\n-import std::util::unreachable;\n+import core::unreachable;\n import std::list;\n import std::map::hashmap;\n "}, {"sha": "b3e55754e3b87c06ce9ea7c38ffce11477d41ad4", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -861,7 +861,7 @@ fn unresolved_err(e: env, cx: ctxt, sp: span, name: ident, kind: str) {\n               _ { ret none; }\n             }\n         }\n-        std::util::unreachable()\n+        core::unreachable()\n     }\n     let path = name;\n     alt cx {"}, {"sha": "ba1d12e545e1b5e9282b8383799d71d871671682", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -71,7 +71,7 @@ fn variant_opt(tcx: ty::ctxt, pat_id: ast::node_id) -> opt {\n     for v: ty::variant_info in *variants {\n         if vdef.var == v.id { ret var(v.disr_val, vdef); }\n     }\n-    std::util::unreachable();\n+    core::unreachable();\n }\n \n type bind_map = [{ident: ast::ident, val: ValueRef}];"}, {"sha": "1ae8aee0ea3a105d929d597520c731e8f7f558ac", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -44,7 +44,7 @@ fn make_free_glue(bcx: block, vptr: ValueRef, t: ty::t)\n fn content_ty(t: ty::t) -> ty::t {\n     alt ty::get(t).struct {\n       ty::ty_uniq({ty: ct, _}) { ct }\n-      _ { std::util::unreachable(); }\n+      _ { core::unreachable(); }\n     }\n }\n "}, {"sha": "f292ceddfff6f91dd8ed9a07002e1f6085bae48c", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -1034,7 +1034,7 @@ fn do_autoderef(fcx: @fn_ctxt, sp: span, t: ty::t) -> ty::t {\n           _ { ret t1; }\n         }\n     }\n-    std::util::unreachable();\n+    core::unreachable();\n }\n \n fn resolve_type_vars_if_possible(fcx: @fn_ctxt, typ: ty::t) -> ty::t {"}, {"sha": "8b1625b04a1d0c0ba3e069ab3185df0b63f33513", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -1321,7 +1321,7 @@ fn parse_capture_clause(p: parser) -> @ast::capture_clause {\n               _ { ret res; }\n             }\n         }\n-        std::util::unreachable();\n+        core::unreachable();\n     }\n \n     let copies = [];"}, {"sha": "53b9ff578c47aa9fc94615d47d59f3bab7db9b06", "filename": "src/rustc/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d048a00cf3c275d9f9974960d0db463844da898e/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs?ref=d048a00cf3c275d9f9974960d0db463844da898e", "patch": "@@ -1419,7 +1419,7 @@ fn operator_prec(op: ast::binop) -> int {\n     for spec: parse::parser::op_spec in *parse::parser::prec_table() {\n         if spec.op == op { ret spec.prec; }\n     }\n-    std::util::unreachable();\n+    core::unreachable();\n }\n \n fn need_parens(expr: @ast::expr, outer_prec: int) -> bool {"}]}