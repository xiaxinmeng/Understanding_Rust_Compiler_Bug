{"sha": "a9ef10019fd3be6e03afb4b213368f4af1917f9b", "node_id": "C_kwDOAAsO6NoAKGE5ZWYxMDAxOWZkM2JlNmUwM2FmYjRiMjEzMzY4ZjRhZjE5MTdmOWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T09:41:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T09:41:40Z"}, "message": "Auto merge of #103671 - matthiaskrgr:rollup-iuugpep, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #102642 (Add tests for static async functions in traits)\n - #103283 (Add suggestions for unsafe impl error codes)\n - #103523 (Fix unwanted merge of inline doc comments for impl blocks)\n - #103550 (diagnostics: do not suggest static candidates as traits to import)\n - #103641 (Don't carry MIR location in `ConstraintCategory::CallArgument`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4f78a496860b030e783d7d1aa1115fb57dfb977b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f78a496860b030e783d7d1aa1115fb57dfb977b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ef10019fd3be6e03afb4b213368f4af1917f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ef10019fd3be6e03afb4b213368f4af1917f9b", "html_url": "https://github.com/rust-lang/rust/commit/a9ef10019fd3be6e03afb4b213368f4af1917f9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ef10019fd3be6e03afb4b213368f4af1917f9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "898f463c93e72dac9b7a28ae662dd12fd71be0b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/898f463c93e72dac9b7a28ae662dd12fd71be0b7", "html_url": "https://github.com/rust-lang/rust/commit/898f463c93e72dac9b7a28ae662dd12fd71be0b7"}, {"sha": "84663cee394a56950dbb11e320e38096e15001c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/84663cee394a56950dbb11e320e38096e15001c3", "html_url": "https://github.com/rust-lang/rust/commit/84663cee394a56950dbb11e320e38096e15001c3"}], "stats": {"total": 1042, "additions": 928, "deletions": 114}, "files": [{"sha": "df04128135b8986c2a976af99df433447e1f1af2", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -92,7 +92,7 @@ pub struct OutlivesConstraint<'tcx> {\n     pub span: Span,\n \n     /// What caused this constraint?\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n \n     /// Variance diagnostic information\n     pub variance_info: VarianceDiagInfo<'tcx>,"}, {"sha": "583bc2e281da4a507f1e06231c08da6bf3cb0ada", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -983,7 +983,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err: &mut Diagnostic,\n         location: Location,\n         issued_borrow: &BorrowData<'tcx>,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) {\n         let used_in_call = matches!(\n             explanation,\n@@ -1333,7 +1333,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n@@ -1539,7 +1539,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         drop_span: Span,\n         borrow_spans: UseSpans<'tcx>,\n         proper_span: Span,\n-        explanation: BorrowExplanation,\n+        explanation: BorrowExplanation<'tcx>,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n         if let BorrowExplanation::MustBeValidFor { category, span, from_closure: false, .. } =\n             explanation\n@@ -1653,7 +1653,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         borrow_span: Span,\n         return_span: Span,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         opt_place_desc: Option<&String>,\n     ) -> Option<DiagnosticBuilder<'cx, ErrorGuaranteed>> {\n         let return_kind = match category {\n@@ -1748,7 +1748,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         use_span: UseSpans<'tcx>,\n         var_span: Span,\n         fr_name: &RegionName,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         constraint_span: Span,\n         captured_var: &str,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {"}, {"sha": "582d683dd359320679164d3aff5c75991122b2a7", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -21,7 +21,7 @@ use crate::{\n use super::{find_use, RegionName, UseSpans};\n \n #[derive(Debug)]\n-pub(crate) enum BorrowExplanation {\n+pub(crate) enum BorrowExplanation<'tcx> {\n     UsedLater(LaterUseKind, Span, Option<Span>),\n     UsedLaterInLoop(LaterUseKind, Span, Option<Span>),\n     UsedLaterWhenDropped {\n@@ -30,7 +30,7 @@ pub(crate) enum BorrowExplanation {\n         should_note_order: bool,\n     },\n     MustBeValidFor {\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         from_closure: bool,\n         span: Span,\n         region_name: RegionName,\n@@ -49,7 +49,7 @@ pub(crate) enum LaterUseKind {\n     Other,\n }\n \n-impl<'tcx> BorrowExplanation {\n+impl<'tcx> BorrowExplanation<'tcx> {\n     pub(crate) fn is_explained(&self) -> bool {\n         !matches!(self, BorrowExplanation::Unexplained)\n     }\n@@ -284,7 +284,7 @@ impl<'tcx> BorrowExplanation {\n     fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n         err: &mut Diagnostic,\n-        category: &ConstraintCategory,\n+        category: &ConstraintCategory<'tcx>,\n         span: Span,\n         region_name: &RegionName,\n     ) {\n@@ -316,7 +316,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n-    ) -> (ConstraintCategory, bool, Span, Option<RegionName>, Vec<ExtraConstraintInfo>) {\n+    ) -> (ConstraintCategory<'tcx>, bool, Span, Option<RegionName>, Vec<ExtraConstraintInfo>) {\n         let (blame_constraint, extra_info) = self.regioncx.best_blame_constraint(\n             borrow_region,\n             NllRegionVariableOrigin::FreeRegion,\n@@ -348,7 +348,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n         kind_place: Option<(WriteKind, Place<'tcx>)>,\n-    ) -> BorrowExplanation {\n+    ) -> BorrowExplanation<'tcx> {\n         let regioncx = &self.regioncx;\n         let body: &Body<'_> = &self.body;\n         let tcx = self.infcx.tcx;"}, {"sha": "35c3df768995a0d2907db1cb174122666596a9cc", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -161,7 +161,7 @@ impl OutlivesSuggestionBuilder {\n     pub(crate) fn intermediate_suggestion(\n         &mut self,\n         mbcx: &MirBorrowckCtxt<'_, '_>,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'_>,\n         diag: &mut Diagnostic,\n     ) {\n         // Emit an intermediate note."}, {"sha": "15230718dc0dee21f140070050507b30338714ae", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -2,7 +2,6 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n //! Error reporting machinery for lifetime errors.\n \n-use either::Either;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n@@ -17,7 +16,7 @@ use rustc_infer::infer::{\n     NllRegionVariableOrigin, RelateParamBound,\n };\n use rustc_middle::hir::place::PlaceBase;\n-use rustc_middle::mir::{ConstraintCategory, ReturnConstraint, TerminatorKind};\n+use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::Region;\n use rustc_middle::ty::TypeVisitor;\n@@ -40,7 +39,7 @@ use crate::{\n     MirBorrowckCtxt,\n };\n \n-impl ConstraintDescription for ConstraintCategory {\n+impl<'tcx> ConstraintDescription for ConstraintCategory<'tcx> {\n     fn description(&self) -> &'static str {\n         // Must end with a space. Allows for empty names to be provided.\n         match self {\n@@ -116,15 +115,15 @@ pub(crate) enum RegionErrorKind<'tcx> {\n \n /// Information about the various region constraints involved in a borrow checker error.\n #[derive(Clone, Debug)]\n-pub struct ErrorConstraintInfo {\n+pub struct ErrorConstraintInfo<'tcx> {\n     // fr: outlived_fr\n     pub(super) fr: RegionVid,\n     pub(super) fr_is_local: bool,\n     pub(super) outlived_fr: RegionVid,\n     pub(super) outlived_fr_is_local: bool,\n \n     // Category and span for best blame constraint\n-    pub(super) category: ConstraintCategory,\n+    pub(super) category: ConstraintCategory<'tcx>,\n     pub(super) span: Span,\n }\n \n@@ -499,7 +498,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     fn report_fnmut_error(\n         &self,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'tcx>,\n         kind: ReturnConstraint,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n@@ -572,7 +571,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn report_escaping_data_error(\n         &self,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { span, category, .. } = errci;\n \n@@ -676,7 +675,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     fn report_general_error(\n         &self,\n-        errci: &ErrorConstraintInfo,\n+        errci: &ErrorConstraintInfo<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo {\n             fr,\n@@ -789,20 +788,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         diag: &mut Diagnostic,\n         f: Region<'tcx>,\n         o: Region<'tcx>,\n-        category: &ConstraintCategory,\n+        category: &ConstraintCategory<'tcx>,\n     ) {\n         if !o.is_static() {\n             return;\n         }\n \n         let tcx = self.infcx.tcx;\n \n-        let instance =\n-            if let ConstraintCategory::CallArgument(location) = category\n-                && let Either::Right(term) = self.body.stmt_at(*location)\n-                && let TerminatorKind::Call { func, .. } = &term.kind\n-        {\n-            let func_ty = func.ty(self.body, tcx);\n+        let instance = if let ConstraintCategory::CallArgument(Some(func_ty)) = category {\n             let (fn_did, substs) = match func_ty.kind() {\n                 ty::FnDef(fn_did, substs) => (fn_did, substs),\n                 _ => return,"}, {"sha": "8b63294fbab0ee3af1abd29c58269aa2546352e5", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -91,7 +91,7 @@ pub struct RegionInferenceContext<'tcx> {\n \n     /// Map closure bounds to a `Span` that should be used for error reporting.\n     closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n \n     /// Map universe indexes to information on why we created it.\n     universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n@@ -267,7 +267,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<\n             Location,\n-            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n+            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>,\n         >,\n         universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n         type_tests: Vec<TypeTest<'tcx>>,\n@@ -1807,7 +1807,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn retrieve_closure_constraint_info(\n         &self,\n         constraint: OutlivesConstraint<'tcx>,\n-    ) -> Option<(ConstraintCategory, Span)> {\n+    ) -> Option<(ConstraintCategory<'tcx>, Span)> {\n         match constraint.locations {\n             Locations::All(_) => None,\n             Locations::Single(loc) => {\n@@ -1822,7 +1822,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         fr1: RegionVid,\n         fr1_origin: NllRegionVariableOrigin,\n         fr2: RegionVid,\n-    ) -> (ConstraintCategory, ObligationCause<'tcx>) {\n+    ) -> (ConstraintCategory<'tcx>, ObligationCause<'tcx>) {\n         let BlameConstraint { category, cause, .. } = self\n             .best_blame_constraint(fr1, fr1_origin, |r| self.provides_universal_region(r, fr1, fr2))\n             .0;\n@@ -2362,7 +2362,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n \n #[derive(Clone, Debug)]\n pub struct BlameConstraint<'tcx> {\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n     pub from_closure: bool,\n     pub cause: ObligationCause<'tcx>,\n     pub variance_info: ty::VarianceDiagInfo<'tcx>,"}, {"sha": "a581726a15c9c4ff6bfc77e9d241074a365b3a62", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     pub(super) fn fully_perform_op<R: fmt::Debug, Op>(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         op: Op,\n     ) -> Fallible<R>\n     where\n@@ -85,7 +85,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         trait_ref: ty::TraitRef<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         self.prove_predicate(\n             ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicates: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         for predicate in predicates {\n             let predicate = predicate.to_predicate(self.tcx());\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         predicate: ty::Predicate<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n@@ -164,7 +164,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         value: T,\n         location: impl NormalizeLocation,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> T\n     where\n         T: type_op::normalize::Normalizable<'tcx> + fmt::Display + Copy + 'tcx,"}, {"sha": "d5bfc2f520826c7163b12fdd187a6ef6d0bfa17d", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -37,7 +37,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     span: Span,\n-    category: ConstraintCategory,\n+    category: ConstraintCategory<'tcx>,\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n }\n \n@@ -50,7 +50,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         span: Span,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     ) -> Self {\n         Self {\n@@ -175,7 +175,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         &mut self,\n         sup: ty::RegionVid,\n         sub: ty::RegionVid,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         let category = match self.category {\n             ConstraintCategory::Boring | ConstraintCategory::BoringNoLocation => category,\n@@ -203,7 +203,7 @@ impl<'a, 'b, 'tcx> TypeOutlivesDelegate<'tcx> for &'a mut ConstraintConversion<'\n         _origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        constraint_category: ConstraintCategory,\n+        constraint_category: ConstraintCategory<'tcx>,\n     ) {\n         let b = self.to_region_vid(b);\n         let a = self.to_region_vid(a);"}, {"sha": "42c92e56e1623fd055409f6e6db85c23c28b4b09", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -942,7 +942,7 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n     pub(crate) member_constraints: MemberConstraintSet<'tcx, RegionVid>,\n \n     pub(crate) closure_bounds_mapping:\n-        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,\n+        FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory<'tcx>, Span)>>,\n \n     pub(crate) universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n@@ -1133,7 +1133,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn push_region_constraints(\n         &mut self,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         data: &QueryRegionConstraints<'tcx>,\n     ) {\n         debug!(\"constraints generated: {:#?}\", data);\n@@ -1158,7 +1158,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         sub: Ty<'tcx>,\n         sup: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         // Use this order of parameters because the sup type is usually the\n         // \"expected\" type in diagnostics.\n@@ -1171,7 +1171,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         self.relate_types(expected, ty::Variance::Invariant, found, locations, category)\n     }\n@@ -1183,7 +1183,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         user_ty: &UserTypeProjection,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;\n         let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);\n@@ -1618,12 +1618,19 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n \n+        let func_ty = if let TerminatorKind::Call { func, .. } = &term.kind {\n+            Some(func.ty(body, self.infcx.tcx))\n+        } else {\n+            None\n+        };\n+        debug!(?func_ty);\n+\n         for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n \n             let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {\n-                ConstraintCategory::CallArgument(term_location)\n+                ConstraintCategory::CallArgument(self.infcx.tcx.erase_regions(func_ty))\n             } else {\n                 ConstraintCategory::Boring\n             };"}, {"sha": "4f2dc263bf57b024c138adb9ab90ca41d387b0cb", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         v: ty::Variance,\n         b: Ty<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         TypeRelating::new(\n             self.infcx,\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         a: ty::SubstsRef<'tcx>,\n         b: ty::SubstsRef<'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) -> Fallible<()> {\n         TypeRelating::new(\n             self.infcx,\n@@ -64,7 +64,7 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     locations: Locations,\n \n     /// What category do we assign the resulting `'a: 'b` relationships?\n-    category: ConstraintCategory,\n+    category: ConstraintCategory<'tcx>,\n \n     /// Information so that error reporting knows what types we are relating\n     /// when reporting a bound region error.\n@@ -75,7 +75,7 @@ impl<'me, 'bccx, 'tcx> NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n         type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n         universe_info: UniverseInfo<'tcx>,\n     ) -> Self {\n         Self { type_checker, locations, category, universe_info }"}, {"sha": "25b2ed76adf2c41acec2332b78a2f8e530789ef4", "filename": "compiler/rustc_hir_analysis/src/coherence/unsafety.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -26,6 +26,12 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"implementing the trait `{}` is not unsafe\",\n                     trait_ref.print_only_trait_path()\n                 )\n+                .span_suggestion_verbose(\n+                    item.span.with_hi(item.span.lo() + rustc_span::BytePos(7)),\n+                    \"remove `unsafe` from this trait implementation\",\n+                    \"\",\n+                    rustc_errors::Applicability::MachineApplicable,\n+                )\n                 .emit();\n             }\n \n@@ -37,6 +43,18 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"the trait `{}` requires an `unsafe impl` declaration\",\n                     trait_ref.print_only_trait_path()\n                 )\n+                .note(format!(\n+                    \"the trait `{}` enforces invariants that the compiler can't check. \\\n+                    Review the trait documentation and make sure this implementation \\\n+                    upholds those invariants before adding the `unsafe` keyword\",\n+                    trait_ref.print_only_trait_path()\n+                ))\n+                .span_suggestion_verbose(\n+                    item.span.shrink_to_lo(),\n+                    \"add `unsafe` to this trait implementation\",\n+                    \"unsafe \",\n+                    rustc_errors::Applicability::MaybeIncorrect,\n+                )\n                 .emit();\n             }\n \n@@ -48,6 +66,18 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n                     attr_name\n                 )\n+                .note(format!(\n+                    \"the trait `{}` enforces invariants that the compiler can't check. \\\n+                    Review the trait documentation and make sure this implementation \\\n+                    upholds those invariants before adding the `unsafe` keyword\",\n+                    trait_ref.print_only_trait_path()\n+                ))\n+                .span_suggestion_verbose(\n+                    item.span.shrink_to_lo(),\n+                    \"add `unsafe` to this trait implementation\",\n+                    \"unsafe \",\n+                    rustc_errors::Applicability::MaybeIncorrect,\n+                )\n                 .emit();\n             }\n "}, {"sha": "6c21ed902d007112c7b256412fafeb6f86ae8f85", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let report_candidates = |span: Span,\n                                  err: &mut Diagnostic,\n-                                 mut sources: Vec<CandidateSource>,\n+                                 sources: &mut Vec<CandidateSource>,\n                                  sugg_span: Span| {\n             sources.sort();\n             sources.dedup();\n@@ -248,7 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         match error {\n             MethodError::NoMatch(NoMatchData {\n-                static_candidates: static_sources,\n+                static_candidates: mut static_sources,\n                 unsatisfied_predicates,\n                 out_of_scope_traits,\n                 lev_candidate,\n@@ -422,9 +422,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.help(&format!(\"try with `{}::{}`\", ty_str, item_name,));\n                     }\n \n-                    report_candidates(span, &mut err, static_sources, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_sources, sugg_span);\n                 } else if static_sources.len() > 1 {\n-                    report_candidates(span, &mut err, static_sources, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_sources, sugg_span);\n                 }\n \n                 let mut bound_spans = vec![];\n@@ -1007,6 +1007,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         source,\n                         out_of_scope_traits,\n                         &unsatisfied_predicates,\n+                        &static_sources,\n                         unsatisfied_bounds,\n                     );\n                 }\n@@ -1079,7 +1080,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return Some(err);\n             }\n \n-            MethodError::Ambiguity(sources) => {\n+            MethodError::Ambiguity(mut sources) => {\n                 let mut err = struct_span_err!(\n                     self.sess(),\n                     item_name.span,\n@@ -1088,7 +1089,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 err.span_label(item_name.span, format!(\"multiple `{}` found\", item_name));\n \n-                report_candidates(span, &mut err, sources, sugg_span);\n+                report_candidates(span, &mut err, &mut sources, sugg_span);\n                 err.emit();\n             }\n \n@@ -2015,6 +2016,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Option<ty::Predicate<'tcx>>,\n             Option<ObligationCause<'tcx>>,\n         )],\n+        static_candidates: &[CandidateSource],\n         unsatisfied_bounds: bool,\n     ) {\n         let mut alt_rcvr_sugg = false;\n@@ -2128,6 +2130,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(attr) => attr.level.is_stable(),\n                 None => true,\n             })\n+            .filter(|info| {\n+                // Static candidates are already implemented, and known not to work\n+                // Do not suggest them again\n+                static_candidates.iter().all(|sc| match *sc {\n+                    CandidateSource::Trait(def_id) => def_id != info.def_id,\n+                    CandidateSource::Impl(def_id) => {\n+                        self.tcx.trait_id_of_impl(def_id) != Some(info.def_id)\n+                    }\n+                })\n+            })\n             .filter(|info| {\n                 // We approximate the coherence rules to only suggest\n                 // traits that are legal to implement by requiring that"}, {"sha": "a299a3e578d2237bf8a32dea8157939fdcedf200", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -632,7 +632,7 @@ impl<'tcx> InferCtxt<'tcx> {\n /// creates query region constraints.\n pub fn make_query_region_constraints<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>, ConstraintCategory)>,\n+    outlives_obligations: impl Iterator<Item = (Ty<'tcx>, ty::Region<'tcx>, ConstraintCategory<'tcx>)>,\n     region_constraints: &RegionConstraintData<'tcx>,\n ) -> QueryRegionConstraints<'tcx> {\n     let RegionConstraintData { constraints, verifys, givens, member_constraints } ="}, {"sha": "ffb020398b858f90d1e3104a93a8a622619be9f0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -425,7 +425,7 @@ pub enum SubregionOrigin<'tcx> {\n static_assert_size!(SubregionOrigin<'_>, 32);\n \n impl<'tcx> SubregionOrigin<'tcx> {\n-    pub fn to_constraint_category(&self) -> ConstraintCategory {\n+    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n         match self {\n             Self::Subtype(type_trace) => type_trace.cause.to_constraint_category(),\n             Self::AscribeUserTypeProvePredicate(span) => ConstraintCategory::Predicate(*span),"}, {"sha": "6ca884799aa6fb3b77b5891c6ff20175f9aab922", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -210,7 +210,7 @@ pub trait TypeOutlivesDelegate<'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        constraint_category: ConstraintCategory,\n+        constraint_category: ConstraintCategory<'tcx>,\n     );\n \n     fn push_verify(\n@@ -259,7 +259,7 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         assert!(!ty.has_escaping_bound_vars());\n \n@@ -273,7 +273,7 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         components: &[Component<'tcx>],\n         region: ty::Region<'tcx>,\n-        category: ConstraintCategory,\n+        category: ConstraintCategory<'tcx>,\n     ) {\n         for component in components.iter() {\n             let origin = origin.clone();\n@@ -529,7 +529,7 @@ impl<'cx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'tcx> {\n         origin: SubregionOrigin<'tcx>,\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n-        _constraint_category: ConstraintCategory,\n+        _constraint_category: ConstraintCategory<'tcx>,\n     ) {\n         self.sub_regions(origin, a, b)\n     }"}, {"sha": "d3cf519b633c71db5860a291a17347e06ac07104", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -302,8 +302,10 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     }\n }\n \n-pub type QueryOutlivesConstraint<'tcx> =\n-    (ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>, ConstraintCategory);\n+pub type QueryOutlivesConstraint<'tcx> = (\n+    ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>,\n+    ConstraintCategory<'tcx>,\n+);\n \n TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {"}, {"sha": "79db35a764a805464696c4d97f0c6c1acecfcd4e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -2904,7 +2904,7 @@ fn pretty_print_const_value<'tcx>(\n /// `Location` represents the position of the start of the statement; or, if\n /// `statement_index` equals the number of statements, then the start of the\n /// terminator.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable)]\n pub struct Location {\n     /// The block that the location is within.\n     pub block: BasicBlock,"}, {"sha": "efd7357afc46c98f1b886a42e3b0b9217137ccce", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -15,7 +15,7 @@ use smallvec::SmallVec;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n-use super::{Field, Location, SourceInfo};\n+use super::{Field, SourceInfo};\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n@@ -314,21 +314,21 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     pub blame_span: Span,\n \n     // ... due to this reason.\n-    pub category: ConstraintCategory,\n+    pub category: ConstraintCategory<'tcx>,\n }\n \n // Make sure this enum doesn't unintentionally grow\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(ConstraintCategory, 16);\n+rustc_data_structures::static_assert_size!(ConstraintCategory<'_>, 16);\n \n /// Outlives-constraints can be categorized to determine whether and why they\n /// are interesting (for error reporting). Order of variants indicates sort\n /// order of the category, thereby influencing diagnostic output.\n ///\n /// See also `rustc_const_eval::borrow_check::constraints`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n-pub enum ConstraintCategory {\n+#[derive(TyEncodable, TyDecodable, HashStable, Lift, TypeVisitable, TypeFoldable)]\n+pub enum ConstraintCategory<'tcx> {\n     Return(ReturnConstraint),\n     Yield,\n     UseAsConst,\n@@ -342,7 +342,7 @@ pub enum ConstraintCategory {\n     ClosureBounds,\n \n     /// Contains the function type if available.\n-    CallArgument(Location),\n+    CallArgument(Option<Ty<'tcx>>),\n     CopyBound,\n     SizedBound,\n     Assignment,\n@@ -368,10 +368,6 @@ pub enum ConstraintCategory {\n     Internal,\n }\n \n-TrivialTypeTraversalAndLiftImpls! {\n-    ConstraintCategory,\n-}\n-\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n #[derive(TyEncodable, TyDecodable, HashStable, TypeVisitable, TypeFoldable)]\n pub enum ReturnConstraint {"}, {"sha": "e73d44bbb36c38e7b21f41a50bfd3916befe55f6", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         self\n     }\n \n-    pub fn to_constraint_category(&self) -> ConstraintCategory {\n+    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n         match self.code() {\n             MatchImpl(cause, _) => cause.to_constraint_category(),\n             AscribeUserTypeProvePredicate(predicate_span) => {"}, {"sha": "88592494493be71842957ba1c6d647f7cdb71680", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -55,12 +55,39 @@ pub(crate) fn try_inline(\n     let mut ret = Vec::new();\n \n     debug!(\"attrs={:?}\", attrs);\n-    let attrs_clone = attrs;\n+\n+    let attrs_without_docs = attrs.map(|attrs| {\n+        attrs.into_iter().filter(|a| a.doc_str().is_none()).cloned().collect::<Vec<_>>()\n+    });\n+    // We need this ugly code because:\n+    //\n+    // ```\n+    // attrs_without_docs.map(|a| a.as_slice())\n+    // ```\n+    //\n+    // will fail because it returns a temporary slice and:\n+    //\n+    // ```\n+    // attrs_without_docs.map(|s| {\n+    //     vec = s.as_slice();\n+    //     vec\n+    // })\n+    // ```\n+    //\n+    // will fail because we're moving an uninitialized variable into a closure.\n+    let vec;\n+    let attrs_without_docs = match attrs_without_docs {\n+        Some(s) => {\n+            vec = s;\n+            Some(vec.as_slice())\n+        }\n+        None => None,\n+    };\n \n     let kind = match res {\n         Res::Def(DefKind::Trait, did) => {\n             record_extern_fqn(cx, did, ItemType::Trait);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::TraitItem(Box::new(build_external_trait(cx, did)))\n         }\n         Res::Def(DefKind::Fn, did) => {\n@@ -69,27 +96,27 @@ pub(crate) fn try_inline(\n         }\n         Res::Def(DefKind::Struct, did) => {\n             record_extern_fqn(cx, did, ItemType::Struct);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::StructItem(build_struct(cx, did))\n         }\n         Res::Def(DefKind::Union, did) => {\n             record_extern_fqn(cx, did, ItemType::Union);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::UnionItem(build_union(cx, did))\n         }\n         Res::Def(DefKind::TyAlias, did) => {\n             record_extern_fqn(cx, did, ItemType::Typedef);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::TypedefItem(build_type_alias(cx, did))\n         }\n         Res::Def(DefKind::Enum, did) => {\n             record_extern_fqn(cx, did, ItemType::Enum);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::EnumItem(build_enum(cx, did))\n         }\n         Res::Def(DefKind::ForeignTy, did) => {\n             record_extern_fqn(cx, did, ItemType::ForeignType);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::ForeignTypeItem\n         }\n         // Never inline enum variants but leave them shown as re-exports.\n@@ -123,7 +150,7 @@ pub(crate) fn try_inline(\n         _ => return None,\n     };\n \n-    let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n+    let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs);\n     cx.inlined.insert(did.into());\n     let mut item = clean::Item::from_def_id_and_attrs_and_parts(\n         did,"}, {"sha": "3400717eba1e616a2c23a49cd7c5122f4bcfc09d", "filename": "src/test/rustdoc/auxiliary/reexport-doc-aux.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-doc-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-doc-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-doc-aux.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,5 @@\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn foo() {}\n+}"}, {"sha": "df2c889b4d57492ab64d2b3577c92b94c4d8460a", "filename": "src/test/rustdoc/reexport-doc.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Frustdoc%2Freexport-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Frustdoc%2Freexport-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexport-doc.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:reexport-doc-aux.rs\n+\n+extern crate reexport_doc_aux as dep;\n+\n+// @has 'reexport_doc/struct.Foo.html'\n+// @count - '//p' 'These are the docs for Foo.' 1\n+/// These are the docs for Foo.\n+pub use dep::Foo;"}, {"sha": "77841780f621655e91b0a9e098c5560efce79507", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -15,19 +15,19 @@ LL |     let a = bar(f, x);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:40:13\n+  --> $DIR/project-fn-ret-invariant.rs:42:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here\n    |        |\n    |        lifetime `'a` defined here\n-LL |     let f = foo; // <-- No consistent type can be inferred for `f` here.\n-LL |     let a = bar(f, x);\n+...\n+LL |     let b = bar(f, y);\n    |             ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of a function pointer to `foo`\n-   = note: the function `foo` is invariant over the parameter `'a`\n+   = note: requirement occurs because of the type `Type<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Type<'a>` is invariant over the parameter `'a`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n help: `'a` and `'b` must be the same: replace one with the other"}, {"sha": "e043379133ab041caef74535d315b2b630cac0a2", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -39,8 +39,8 @@ fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     let f = foo; // <-- No consistent type can be inferred for `f` here.\n     let a = bar(f, x);\n     //[oneuse]~^ ERROR lifetime may not live long enough\n-    //[oneuse]~| ERROR lifetime may not live long enough\n     let b = bar(f, y);\n+    //[oneuse]~^ ERROR lifetime may not live long enough\n     (a, b)\n }\n "}, {"sha": "a6f928f3b1bac653f2f95d4156331b090b30f3dc", "filename": "src/test/ui/async-await/in-trait/async-associated-types.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,24 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait MyTrait<'a, 'b, T> where Self: 'a, T: Debug + Sized + 'b {\n+    type MyAssoc;\n+\n+    async fn foo(&'a self, key: &'b T) -> Self::MyAssoc;\n+}\n+\n+impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+    type MyAssoc = (&'a U, &'b T);\n+\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0985150eee0decc8fa070500d0e94fa030e875e6", "filename": "src/test/ui/async-await/in-trait/async-associated-types.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,57 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n+  --> $DIR/async-associated-types.rs:16:6\n+   |\n+LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+   |      ^^\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `(&'a U, &'b T)`\n+              found `(&U, &T)`\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `MyTrait<'static, 'static, T>`\n+              found `MyTrait<'_, '_, T>`\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n+  --> $DIR/async-associated-types.rs:16:10\n+   |\n+LL | impl<'a, 'b, T: Debug + Sized + 'b, U: 'a> MyTrait<'a, 'b, T> for U {\n+   |          ^^\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `(&'a U, &'b T)`\n+              found `(&U, &T)`\n+   = note: but, the lifetime must be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/async-associated-types.rs:19:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+   |                                           ^^^^^^^^^^^^^^\n+   = note: expected `MyTrait<'static, 'static, T>`\n+              found `MyTrait<'_, '_, T>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "e546a0579c66f2f5774bd9b98b00943575b6a259", "filename": "src/test/ui/async-await/in-trait/async-associated-types2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(type_alias_impl_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    type Fut<'a>: Future<Output = i32>\n+    where\n+        Self: 'a;\n+\n+    fn foo<'a>(&'a self) -> Self::Fut<'a>;\n+}\n+\n+impl MyTrait for i32 {\n+    type Fut<'a> = impl Future<Output = i32> + 'a\n+    where\n+        Self: 'a;\n+\n+    fn foo<'a>(&'a self) -> Self::Fut<'a> {\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "38ba297189c691ad05b8c4328a00fea2347a551c", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+trait MyTrait {\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) -> i32 {\n+        //~^ ERROR method `foo` has an incompatible type for trait\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "22d2928f2f5641801c4b858ccbe6217d4aa8d830", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,17 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n+   |\n+LL |     async fn foo(&self) -> i32 {\n+   |                            ^^^ expected struct `Pin`, found opaque type\n+   |\n+note: type in trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22\n+   |\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected fn pointer `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found fn pointer `fn(&i32) -> impl Future<Output = i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "61d7e2520eab7a8cea7c3f8f97fd2a932aa4d5bd", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    // This will break once a PR that implements #102745 is merged\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+        Box::pin(async {\n+            *self\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "feeda719e0306605bce7df6e8b8d74dff26c3972", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-in-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    fn foo(&self) -> impl Future<Output = i32> + '_;\n+}\n+\n+impl MyTrait for i32 {\n+    // This will break once a PR that implements #102745 is merged\n+    async fn foo(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1313c9edd861c213850af2725cadc84f52146fed", "filename": "src/test/ui/async-await/in-trait/async-example-desugared.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    // This will break once a PR that implements #102745 is merged\n+    fn foo(&self) -> impl Future<Output = i32> + '_ {\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "abf94ef7450fcfceeaf672224213af3a32e78cd6", "filename": "src/test/ui/async-await/in-trait/async-example.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+    async fn bar(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) -> i32 {\n+        *self\n+    }\n+\n+    async fn bar(&self) -> i32 {\n+        self.foo().await\n+    }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    // Calling from non-async context\n+    let _ = x.foo();\n+    let _ = x.bar();\n+    // Calling from async block in non-async context\n+    async {\n+        let _: i32 = x.foo().await;\n+        let _: i32 = x.bar().await;\n+    };\n+}"}, {"sha": "a73d55adfeced13a9f9d9becb8e16d500ef4ae09", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,21 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+use std::hash::Hash;\n+\n+trait MyTrait<T, U> {\n+    async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+}\n+\n+impl<T, U> MyTrait<T, U> for (T, U) {\n+    async fn foo(&self) -> &(T, U) {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5c8d64fc6cb4c858810b1ea013dc2b3a2cb5f855", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics-and-bounds.rs:12:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics-and-bounds.rs:12:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:12:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "67000e5770ee8c2c5fa4641103777a3c52a259d6", "filename": "src/test/ui/async-await/in-trait/async-generics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,18 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T, U> {\n+    async fn foo(&self) -> &(T, U);\n+}\n+\n+impl<T, U> MyTrait<T, U> for (T, U) {\n+    async fn foo(&self) -> &(T, U) {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6ae73d9e3a60175029633c5aac78ef88e8c281da", "filename": "src/test/ui/async-await/in-trait/async-generics.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics.rs:9:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+  --> $DIR/async-generics.rs:9:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:9:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "3f7448cecd157fa006043471198734e2d5c56184", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,20 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait MyTrait<'a, 'b, T> {\n+    async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+}\n+\n+impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0f02420274333badbcbc3d84b3c0fd159a8bdcd6", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,23 @@\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+   |                                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n+   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait MyTrait<'a, 'b, T: 'b> {\n+   |                        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "acbac471cf7e8638e0a989e531c4f63b6ef5f519", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,18 @@\n+// check-fail\n+// known-bug: #102682\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<'a, 'b, T> {\n+    async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+}\n+\n+impl<'a, 'b, T, U> MyTrait<'a, 'b, T> for U {\n+    async fn foo(&'a self, key: &'b T) -> (&'a U, &'b T) {\n+        (self, key)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9a7d294bb17669f6de727d113abcc4c78903e990", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,23 @@\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/async-lifetimes.rs:9:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+   |                                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/async-lifetimes.rs:9:43\n+   |\n+LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n+   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait MyTrait<'a, 'b, T: 'b> {\n+   |                        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "6839abd381c3f9b3126a4038eaa83f1eb90bd0ef", "filename": "src/test/ui/async-await/in-trait/async-recursive-generic.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T> {\n+    async fn foo_recursive(&self, n: usize) -> T;\n+}\n+\n+impl<T> MyTrait<T> for T where T: Copy {\n+    async fn foo_recursive(&self, n: usize) -> T {\n+        //~^ ERROR recursion in an `async fn` requires boxing\n+        if n > 0 {\n+            self.foo_recursive(n - 1).await\n+        } else {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cab173bdd5b7030a508a74d04ceb1baba74aa5dc", "filename": "src/test/ui/async-await/in-trait/async-recursive-generic.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive-generic.rs:11:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> T {\n+   |                                                ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "61119f8095bcc0edcf2d380b3b54f827c0d4b59a", "filename": "src/test/ui/async-await/in-trait/async-recursive.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo_recursive(&self, n: usize) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo_recursive(&self, n: usize) -> i32 {\n+        //~^ ERROR recursion in an `async fn` requires boxing\n+        if n > 0 {\n+            self.foo_recursive(n - 1).await\n+        } else {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9feff37b3fe46772ccebb3d3c778dd70d325fc68", "filename": "src/test/ui/async-await/in-trait/async-recursive.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive.rs:11:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n+   |                                                ^^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "f94d32145a290297c1750035ba89297ecf8220eb", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,17 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> i32 {\n+        //~^ ERROR: `i32` is not a future [E0277]\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "03321dc5b5af16a4ccbd9baa3f78fb005151201b", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `i32` is not a future\n+  --> $DIR/fn-not-async-err.rs:11:22\n+   |\n+LL |     fn foo(&self) -> i32 {\n+   |                      ^^^ `i32` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `i32`\n+   = note: i32 must be a future or must implement `IntoFuture` to be awaited\n+note: required by a bound in `MyTrait::foo::{opaque#0}`\n+  --> $DIR/fn-not-async-err.rs:7:28\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |                            ^^^ required by this bound in `MyTrait::foo::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "594baa91ad8ba61c21eb6914ae4c0b24e5fedd0b", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> impl Future<Output = i32> {\n+        //~^ ERROR `impl Trait` only allowed in function and inherent method return types, not in `impl` method return [E0562]\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f591f184772901e061a6928067e2484df9ce552c", "filename": "src/test/ui/async-await/in-trait/fn-not-async-err2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,12 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n+  --> $DIR/fn-not-async-err2.rs:13:22\n+   |\n+LL |     fn foo(&self) -> impl Future<Output = i32> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "aa947b6900366a6d0edb25288672f866d90eba51", "filename": "src/test/ui/async-await/issues/issue-72312.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-72312.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -1,23 +1,22 @@\n error[E0521]: borrowed data escapes outside of associated function\n-  --> $DIR/issue-72312.rs:12:24\n+  --> $DIR/issue-72312.rs:12:9\n    |\n LL |       pub async fn start(&self) {\n    |                          -----\n    |                          |\n    |                          `self` is a reference that is only valid in the associated function body\n    |                          let's call the lifetime of this reference `'1`\n ...\n-LL |           require_static(async move {\n-   |  ________________________^\n+LL | /         require_static(async move {\n LL | |\n LL | |\n LL | |\n LL | |             &self;\n LL | |         });\n-   | |         ^\n-   | |         |\n-   | |_________`self` escapes the associated function body here\n-   |           argument requires that `'1` must outlive `'static`\n+   | |          ^\n+   | |          |\n+   | |__________`self` escapes the associated function body here\n+   |            argument requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "f1fa95f92469b49fd43ef8760929b703fd9260a5", "filename": "src/test/ui/borrowck/issue-103624.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,31 @@\n+// edition:2021\n+\n+struct StructA {\n+    b: StructB,\n+}\n+\n+async fn spawn_blocking<T>(f: impl (Fn() -> T) + Send + Sync + 'static) -> T {\n+    todo!()\n+}\n+\n+impl StructA {\n+    async fn foo(&self) {\n+        let bar = self.b.bar().await;\n+        spawn_blocking(move || {\n+            //~^ ERROR borrowed data escapes outside of associated function\n+            self.b;\n+            //~^ ERROR cannot move out of `self.b`, as `self` is a captured variable in an `Fn` closure\n+        })\n+        .await;\n+    }\n+}\n+\n+struct StructB {}\n+\n+impl StructB {\n+    async fn bar(&self) -> Option<u8> {\n+        None\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e6a35dd8801afc280faa41643ee659e24dea0d38", "filename": "src/test/ui/borrowck/issue-103624.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-103624.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,35 @@\n+error[E0507]: cannot move out of `self.b`, as `self` is a captured variable in an `Fn` closure\n+  --> $DIR/issue-103624.rs:16:13\n+   |\n+LL |     async fn foo(&self) {\n+   |                  ----- captured outer variable\n+LL |         let bar = self.b.bar().await;\n+LL |         spawn_blocking(move || {\n+   |                        ------- captured by this `Fn` closure\n+LL |\n+LL |             self.b;\n+   |             ^^^^^^ move occurs because `self.b` has type `StructB`, which does not implement the `Copy` trait\n+\n+error[E0521]: borrowed data escapes outside of associated function\n+  --> $DIR/issue-103624.rs:14:9\n+   |\n+LL |       async fn foo(&self) {\n+   |                    -----\n+   |                    |\n+   |                    `self` is a reference that is only valid in the associated function body\n+   |                    let's call the lifetime of this reference `'1`\n+LL |           let bar = self.b.bar().await;\n+LL | /         spawn_blocking(move || {\n+LL | |\n+LL | |             self.b;\n+LL | |\n+LL | |         })\n+   | |          ^\n+   | |          |\n+   | |__________`self` escapes the associated function body here\n+   |            argument requires that `'1` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0507, E0521.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "6320187827256a9224b66e2b2b2454d8ad4b1534", "filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -3,12 +3,24 @@ error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl MySafeTrait for Foo {}\n+LL + impl MySafeTrait for Foo {}\n+   |\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n   --> $DIR/coherence-default-trait-impl.rs:13:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `MyUnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl MyUnsafeTrait for Foo {}\n+   | ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "82169ee01bedd7b76ede76f5bc29d0f5f8053391", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -8,6 +8,12 @@ LL | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n+   | ++++++\n \n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:27:1\n@@ -19,6 +25,12 @@ LL | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n+   | ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99d808c0d4b1e115947acdbf76c2e9f55f23b19c", "filename": "src/test/ui/error-codes/E0199.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -3,6 +3,12 @@ error[E0199]: implementing the trait `Bar` is not unsafe\n    |\n LL | unsafe impl Bar for Foo { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl Bar for Foo { }\n+LL + impl Bar for Foo { }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1fd86aecee177a787d507289349ce8a10106d9b5", "filename": "src/test/ui/error-codes/E0200.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -3,6 +3,12 @@ error[E0200]: the trait `Bar` requires an `unsafe impl` declaration\n    |\n LL | impl Bar for Foo { }\n    | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `Bar` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl Bar for Foo { }\n+   | ++++++\n \n error: aborting due to previous error\n "}, {"sha": "01293379700d28ca717a24e470761d8fff529851", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -53,14 +53,15 @@ LL | fn case2() {\n error[E0597]: `a` does not live long enough\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:30:26\n    |\n-LL |     let cell = Cell::new(&a);\n-   |                ----------^^-\n-   |                |         |\n-   |                |         borrowed value does not live long enough\n-   |                argument requires that `a` is borrowed for `'static`\n+LL |       let cell = Cell::new(&a);\n+   |                            ^^ borrowed value does not live long enough\n ...\n-LL | }\n-   | - `a` dropped here while still borrowed\n+LL | /     foo(cell, |cell_a, cell_x| {\n+LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n+LL | |     })\n+   | |______- argument requires that `a` is borrowed for `'static`\n+LL |   }\n+   |   - `a` dropped here while still borrowed\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3326fa521fc9cea4efc8e4d26b039fb90f1c7663", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -1,14 +1,14 @@\n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:33:41\n    |\n-LL |         SomeEnum::SomeVariant(Cell::new(&c)),\n-   |                               ----------^^-\n-   |                               |         |\n-   |                               |         borrowed value does not live long enough\n-   |                               argument requires that `c` is borrowed for `'static`\n-...\n-LL | }\n-   | - `c` dropped here while still borrowed\n+LL | /     combine(\n+LL | |         SomeEnum::SomeVariant(Cell::new(&c)),\n+   | |                                         ^^ borrowed value does not live long enough\n+LL | |         SomeEnum::SomeOtherVariant::<Cell<&'static u32>>,\n+LL | |     );\n+   | |_____- argument requires that `c` is borrowed for `'static`\n+LL |   }\n+   |   - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-nullary-enums.rs:41:41"}, {"sha": "f881feb0060abc2cba308a8bd4a25460efd24aef", "filename": "src/test/ui/suggestions/issue-102354.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.rs?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,10 @@\n+trait Trait {\n+    fn func() {}\n+}\n+\n+impl Trait for i32 {}\n+\n+fn main() {\n+    let x: i32 = 123;\n+    x.func(); //~ERROR no method\n+}"}, {"sha": "4f76c5f2e75b2341ca846903592b1a299757d024", "filename": "src/test/ui/suggestions/issue-102354.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -0,0 +1,24 @@\n+error[E0599]: no method named `func` found for type `i32` in the current scope\n+  --> $DIR/issue-102354.rs:9:7\n+   |\n+LL |     x.func();\n+   |       ^^^^ this is an associated function, not a method\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in the trait `Trait`\n+  --> $DIR/issue-102354.rs:2:5\n+   |\n+LL |     fn func() {}\n+   |     ^^^^^^^^^\n+help: use associated function syntax instead\n+   |\n+LL |     i32::func();\n+   |     ~~~~~~~~~\n+help: disambiguate the associated function for the candidate\n+   |\n+LL |     <i32 as Trait>::func(x);\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "0b1fb30478ff682667923f9791e7276a949f1e31", "filename": "src/test/ui/traits/safety-trait-impl-cc.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -7,6 +7,12 @@ LL | |         panic!();\n LL | |     }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Foo` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl lib::Foo for Bar {\n+   | ++++++\n \n error: aborting due to previous error\n "}, {"sha": "721e2b48b954fa3db2194291f8a1b43069260434", "filename": "src/test/ui/traits/safety-trait-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9ef10019fd3be6e03afb4b213368f4af1917f9b/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr?ref=a9ef10019fd3be6e03afb4b213368f4af1917f9b", "patch": "@@ -3,12 +3,24 @@ error[E0200]: the trait `UnsafeTrait` requires an `unsafe impl` declaration\n    |\n LL | impl UnsafeTrait for u16 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `UnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl UnsafeTrait for u16 { }\n+   | ++++++\n \n error[E0199]: implementing the trait `SafeTrait` is not unsafe\n   --> $DIR/safety-trait-impl.rs:16:1\n    |\n LL | unsafe impl SafeTrait for u32 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl SafeTrait for u32 { }\n+LL + impl SafeTrait for u32 { }\n+   |\n \n error: aborting due to 2 previous errors\n "}]}