{"sha": "e61411673c8e47c504ff36cbc3479c0dd8939309", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MTQxMTY3M2M4ZTQ3YzUwNGZmMzZjYmMzNDc5YzBkZDg5MzkzMDk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-11T01:21:22Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-06-20T18:12:42Z"}, "message": "Update tests", "tree": {"sha": "0e4ff570d84089eac723d163037f3c20bc5ee7fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e4ff570d84089eac723d163037f3c20bc5ee7fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e61411673c8e47c504ff36cbc3479c0dd8939309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e61411673c8e47c504ff36cbc3479c0dd8939309", "html_url": "https://github.com/rust-lang/rust/commit/e61411673c8e47c504ff36cbc3479c0dd8939309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e61411673c8e47c504ff36cbc3479c0dd8939309/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c883fa45d39a5ef7316e2b6637885ec222b609d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c883fa45d39a5ef7316e2b6637885ec222b609d5", "html_url": "https://github.com/rust-lang/rust/commit/c883fa45d39a5ef7316e2b6637885ec222b609d5"}], "stats": {"total": 53, "additions": 12, "deletions": 41}, "files": [{"sha": "538a3fde8fdeb6fb525b1a62b8e15e89e1e1e33f", "filename": "src/test/ui/asm/parse-error.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e61411673c8e47c504ff36cbc3479c0dd8939309/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e61411673c8e47c504ff36cbc3479c0dd8939309/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=e61411673c8e47c504ff36cbc3479c0dd8939309", "patch": "@@ -34,11 +34,6 @@ fn main() {\n         //~^ ERROR expected one of\n         asm!(\"\", options(nomem, foo));\n         //~^ ERROR expected one of\n-        asm!(\"\", options(), options());\n-        //~^ ERROR asm options cannot be specified multiple times\n-        asm!(\"\", options(), options(), options());\n-        //~^ ERROR asm options cannot be specified multiple times\n-        //~^^ ERROR asm options cannot be specified multiple times\n         asm!(\"{}\", options(), const foo);\n         //~^ ERROR arguments are not allowed after options\n         asm!(\"{a}\", a = const foo, a = const bar);"}, {"sha": "dfbfc0abe3472db706d42858d0227692a90337d4", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e61411673c8e47c504ff36cbc3479c0dd8939309/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e61411673c8e47c504ff36cbc3479c0dd8939309/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=e61411673c8e47c504ff36cbc3479c0dd8939309", "patch": "@@ -82,111 +82,87 @@ error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `prese\n LL |         asm!(\"\", options(nomem, foo));\n    |                                 ^^^ expected one of 8 possible tokens\n \n-error: asm options cannot be specified multiple times\n-  --> $DIR/parse-error.rs:37:29\n-   |\n-LL |         asm!(\"\", options(), options());\n-   |                  ---------  ^^^^^^^^^ duplicate options\n-   |                  |\n-   |                  previously here\n-\n-error: asm options cannot be specified multiple times\n-  --> $DIR/parse-error.rs:39:29\n-   |\n-LL |         asm!(\"\", options(), options(), options());\n-   |                  ---------  ^^^^^^^^^ duplicate options\n-   |                  |\n-   |                  previously here\n-\n-error: asm options cannot be specified multiple times\n-  --> $DIR/parse-error.rs:39:40\n-   |\n-LL |         asm!(\"\", options(), options(), options());\n-   |                  ---------             ^^^^^^^^^ duplicate options\n-   |                  |\n-   |                  previously here\n-\n error: arguments are not allowed after options\n-  --> $DIR/parse-error.rs:42:31\n+  --> $DIR/parse-error.rs:37:31\n    |\n LL |         asm!(\"{}\", options(), const foo);\n    |                    ---------  ^^^^^^^^^ argument\n    |                    |\n    |                    previous options\n \n error: duplicate argument named `a`\n-  --> $DIR/parse-error.rs:44:36\n+  --> $DIR/parse-error.rs:39:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n    |                     |\n    |                     previously here\n \n error: argument never used\n-  --> $DIR/parse-error.rs:44:36\n+  --> $DIR/parse-error.rs:39:36\n    |\n LL |         asm!(\"{a}\", a = const foo, a = const bar);\n    |                                    ^^^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n error: explicit register arguments cannot have names\n-  --> $DIR/parse-error.rs:47:18\n+  --> $DIR/parse-error.rs:42:18\n    |\n LL |         asm!(\"\", a = in(\"eax\") foo);\n    |                  ^^^^^^^^^^^^^^^^^\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:49:36\n+  --> $DIR/parse-error.rs:44:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: named arguments cannot follow explicit register arguments\n-  --> $DIR/parse-error.rs:51:36\n+  --> $DIR/parse-error.rs:46:36\n    |\n LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n    |                     -------------  ^^^^^^^^^^^^^ named argument\n    |                     |\n    |                     explicit register argument\n \n error: positional arguments cannot follow named arguments or explicit register arguments\n-  --> $DIR/parse-error.rs:53:36\n+  --> $DIR/parse-error.rs:48:36\n    |\n LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n    |                     -------------  ^^^^^^^^^ positional argument\n    |                     |\n    |                     explicit register argument\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n-  --> $DIR/parse-error.rs:55:29\n+  --> $DIR/parse-error.rs:50:29\n    |\n LL |         asm!(\"\", options(), \"\");\n    |                             ^^ expected one of 8 possible tokens\n \n error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n-  --> $DIR/parse-error.rs:57:33\n+  --> $DIR/parse-error.rs:52:33\n    |\n LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n    |                                 ^^^^ expected one of 8 possible tokens\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:59:14\n+  --> $DIR/parse-error.rs:54:14\n    |\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n-  --> $DIR/parse-error.rs:61:21\n+  --> $DIR/parse-error.rs:56:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 25 previous errors\n "}]}