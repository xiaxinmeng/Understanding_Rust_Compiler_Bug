{"sha": "c1d400350608d880c4b66744e9905c7847fcf512", "node_id": "C_kwDOAAsO6NoAKGMxZDQwMDM1MDYwOGQ4ODBjNGI2Njc0NGU5OTA1Yzc4NDdmY2Y1MTI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-04T10:41:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-04T10:41:00Z"}, "message": "Rollup merge of #101189 - daxpedda:ready-into-inner, r=joshtriplett\n\nImplement `Ready::into_inner()`\n\nTracking issue: #101196.\n\nThis implements a method to unwrap the value inside a `Ready` outside an async context.\nSee https://docs.rs/futures/0.3.24/futures/future/struct.Ready.html#method.into_inner for previous work.\n\nThis was discussed in [Zulip beforehand](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/.60Ready.3A.3Ainto_inner.28.29.60):\n> An example I'm hitting right now:\nI have a cross-platform library that provides a functions that returns a `Future`. The only reason why it returns a `Future` is because the WASM platform requires it, but the native doesn't, to make a cross-platform API that is equal for all I just return a `Ready` on the native targets.\n>\n> Now I would like to expose native-only functions that aren't async, that users can use to avoid having to deal with async when they are targeting native. With `into_inner` that's easily solvable now.\n>\n> I want to point out that some internal restructuring could be used to solve that problem too, but in this case it's not that simple, the library uses internal traits that return the `Future` already and playing around with that would introduce unnecessary `cfg` in a lot more places. So it is really only a quality-of-life feature.", "tree": {"sha": "54636ce76fc3d79b17bc5dd0f126f87b992f6bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54636ce76fc3d79b17bc5dd0f126f87b992f6bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d400350608d880c4b66744e9905c7847fcf512", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPA28CRBK7hj4Ov3rIwAAWv8IAHkTySxPmR6ofj3NtjQjnIep\n8auxxlOYZN1cMARNHIvsH1yYBEjKOTGmjPNwXSwJ3DmH2pQ//Fbuvn6BT4BJZo0w\nmPBz235/sIYl+zSDitqxNNLzfNdpXiPMrc8LeiJusCRU93cKSzVe4LxYCBSjRMel\nwEDRlnN5LkzNtcuQ4a2WrXlfn/Zwz67xUWkDHRF28qHY/h5Qq+zw2ERMvHkfqLwz\nDe+sjIhDMwei181iYIpbuQbZnZVenX4w8easQEbOT+XzsGBPgQ74s5Z43vhXsOW5\nBnW3AGNm9hsVunDYTpRus5G8+720WYLQDQQWoNEHTEkcY2Xiv5gvItcddITJ8Hs=\n=5QUx\n-----END PGP SIGNATURE-----\n", "payload": "tree 54636ce76fc3d79b17bc5dd0f126f87b992f6bc9\nparent f1112099eba41abadb6f921df7edba70affe92c5\nparent 5ed178741358db3258d804f332d82e497b7eb11a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1664880060 +0530\ncommitter GitHub <noreply@github.com> 1664880060 +0530\n\nRollup merge of #101189 - daxpedda:ready-into-inner, r=joshtriplett\n\nImplement `Ready::into_inner()`\n\nTracking issue: #101196.\n\nThis implements a method to unwrap the value inside a `Ready` outside an async context.\nSee https://docs.rs/futures/0.3.24/futures/future/struct.Ready.html#method.into_inner for previous work.\n\nThis was discussed in [Zulip beforehand](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/.60Ready.3A.3Ainto_inner.28.29.60):\n> An example I'm hitting right now:\nI have a cross-platform library that provides a functions that returns a `Future`. The only reason why it returns a `Future` is because the WASM platform requires it, but the native doesn't, to make a cross-platform API that is equal for all I just return a `Ready` on the native targets.\n>\n> Now I would like to expose native-only functions that aren't async, that users can use to avoid having to deal with async when they are targeting native. With `into_inner` that's easily solvable now.\n>\n> I want to point out that some internal restructuring could be used to solve that problem too, but in this case it's not that simple, the library uses internal traits that return the `Future` already and playing around with that would introduce unnecessary `cfg` in a lot more places. So it is really only a quality-of-life feature.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d400350608d880c4b66744e9905c7847fcf512", "html_url": "https://github.com/rust-lang/rust/commit/c1d400350608d880c4b66744e9905c7847fcf512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d400350608d880c4b66744e9905c7847fcf512/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1112099eba41abadb6f921df7edba70affe92c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1112099eba41abadb6f921df7edba70affe92c5", "html_url": "https://github.com/rust-lang/rust/commit/f1112099eba41abadb6f921df7edba70affe92c5"}, {"sha": "5ed178741358db3258d804f332d82e497b7eb11a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed178741358db3258d804f332d82e497b7eb11a", "html_url": "https://github.com/rust-lang/rust/commit/5ed178741358db3258d804f332d82e497b7eb11a"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "a07b63fb62b9023a70bca9c419d1890c4124aa86", "filename": "library/core/src/future/ready.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1d400350608d880c4b66744e9905c7847fcf512/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d400350608d880c4b66744e9905c7847fcf512/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs?ref=c1d400350608d880c4b66744e9905c7847fcf512", "patch": "@@ -24,6 +24,30 @@ impl<T> Future for Ready<T> {\n     }\n }\n \n+impl<T> Ready<T> {\n+    /// Consumes the `Ready`, returning the wrapped value.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Will panic if this [`Ready`] was already polled to completion.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ready_into_inner)]\n+    /// use std::future;\n+    ///\n+    /// let a = future::ready(1);\n+    /// assert_eq!(a.into_inner(), 1);\n+    /// ```\n+    #[unstable(feature = \"ready_into_inner\", issue = \"101196\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn into_inner(self) -> T {\n+        self.0.expect(\"Called `into_inner()` on `Ready` after completion\")\n+    }\n+}\n+\n /// Creates a future that is immediately ready with a value.\n ///\n /// Futures created through this function are functionally similar to those"}]}