{"sha": "b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ODUzMGJmOGIzMGMyMGE3NWY1YmI3YzIwMjFhMjhjMGFlNDA0MTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-18T00:02:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-18T00:02:44Z"}, "message": "Report missing cases of `bare_trait_objects`", "tree": {"sha": "db152e7a46d3af4eb0cf74a4161ffdce0121ca5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db152e7a46d3af4eb0cf74a4161ffdce0121ca5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "html_url": "https://github.com/rust-lang/rust/commit/b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ed36bba4669a3a6737d1f973789a459b8530b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ed36bba4669a3a6737d1f973789a459b8530b2", "html_url": "https://github.com/rust-lang/rust/commit/38ed36bba4669a3a6737d1f973789a459b8530b2"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "7c5398003f3e61dde49b03c15c5dd85d67a6c31b", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "patch": "@@ -1608,6 +1608,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     // the whole path.\n     // Will fail except for `T::A` and `Self::A`; i.e., if `qself_ty`/`qself_def` are not a type\n     // parameter or `Self`.\n+    // NOTE: When this function starts resolving `Trait::AssocTy` successfully\n+    // it should also start reportint the `BARE_TRAIT_OBJECTS` lint.\n     pub fn associated_path_to_ty(\n         &self,\n         hir_ref_id: hir::HirId,"}, {"sha": "dc8a804bfea98db6a415c72e710e33b1b9318ace", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "patch": "@@ -6,14 +6,15 @@ use crate::check::callee::{self, DeferredCallResolution};\n use crate::check::method::{self, MethodCallee, SelfSource};\n use crate::check::{BreakableCtxt, Diverges, Expectation, FallbackMode, FnCtxt, LocalTy};\n \n+use rustc_ast::TraitObjectSyntax;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, GenericArg, Node, QPath};\n+use rustc_hir::{ExprKind, GenericArg, Node, QPath, TyKind};\n use rustc_infer::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::{InferOk, InferResult};\n@@ -26,7 +27,9 @@ use rustc_middle::ty::{\n     self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, ToPolyTraitRef, ToPredicate,\n     Ty, UserType,\n };\n-use rustc_session::{lint, parse::feature_err};\n+use rustc_session::lint;\n+use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n+use rustc_session::parse::feature_err;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n@@ -947,6 +950,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             result\n         });\n \n+        if result.is_ok() {\n+            self.maybe_lint_bare_trait(qpath, hir_id);\n+        }\n+\n         // Write back the new resolution.\n         self.write_resolution(hir_id, result);\n         (\n@@ -956,6 +963,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )\n     }\n \n+    fn maybe_lint_bare_trait(&self, qpath: &QPath<'_>, hir_id: hir::HirId) {\n+        if let QPath::TypeRelative(self_ty, _) = qpath {\n+            if let TyKind::TraitObject([poly_trait_ref, ..], _, TraitObjectSyntax::None) =\n+                self_ty.kind\n+            {\n+                self.tcx.struct_span_lint_hir(BARE_TRAIT_OBJECTS, hir_id, self_ty.span, |lint| {\n+                    let mut db = lint\n+                        .build(&format!(\"trait objects without an explicit `dyn` are deprecated\"));\n+                    let (sugg, app) = match self.tcx.sess.source_map().span_to_snippet(self_ty.span)\n+                    {\n+                        Ok(s) if poly_trait_ref.trait_ref.path.is_global() => {\n+                            (format!(\"<dyn ({})>\", s), Applicability::MachineApplicable)\n+                        }\n+                        Ok(s) => (format!(\"<dyn {}>\", s), Applicability::MachineApplicable),\n+                        Err(_) => (\"<dyn <type>>\".to_string(), Applicability::HasPlaceholders),\n+                    };\n+                    db.span_suggestion(self_ty.span, \"use `dyn`\", sugg, app);\n+                    db.emit()\n+                });\n+            }\n+        }\n+    }\n+\n     /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.\n     pub(in super::super) fn get_node_fn_decl(\n         &self,"}, {"sha": "4c961e998df64aad2d21614ae0f029812119d130", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "patch": "@@ -0,0 +1,18 @@\n+#![feature(associated_type_defaults)]\n+\n+trait Assoc {\n+    fn func() {}\n+    const CONST: u8 = 0;\n+    type Ty = u8;\n+}\n+\n+trait Dyn {}\n+\n+impl Assoc for dyn Dyn {}\n+\n+fn main() {\n+    Dyn::func(); //~ WARN trait objects without an explicit `dyn` are deprecated\n+    ::Dyn::func(); //~ WARN trait objects without an explicit `dyn` are deprecated\n+    Dyn::CONST; //~ WARN trait objects without an explicit `dyn` are deprecated\n+    let _: Dyn::Ty; //~ ERROR ambiguous associated type\n+}"}, {"sha": "0a2dc5858285a8289181dc2291f5b0487fc76a0e", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b48530bf8b30c20a75f5bb7c2021a28c0ae40413/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=b48530bf8b30c20a75f5bb7c2021a28c0ae40413", "patch": "@@ -0,0 +1,29 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bare-trait-objects-path.rs:17:12\n+   |\n+LL |     let _: Dyn::Ty;\n+   |            ^^^^^^^ help: use fully-qualified syntax: `<dyn Dyn as Trait>::Ty`\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/bare-trait-objects-path.rs:14:5\n+   |\n+LL |     Dyn::func();\n+   |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/bare-trait-objects-path.rs:15:5\n+   |\n+LL |     ::Dyn::func();\n+   |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/bare-trait-objects-path.rs:16:5\n+   |\n+LL |     Dyn::CONST;\n+   |     ^^^ help: use `dyn`: `<dyn Dyn>`\n+\n+error: aborting due to previous error; 3 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0223`."}]}