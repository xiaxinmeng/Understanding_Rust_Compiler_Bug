{"sha": "3a75f10af12e959273d19cf0f867f066e3db8add", "node_id": "C_kwDOAAsO6NoAKDNhNzVmMTBhZjEyZTk1OTI3M2QxOWNmMGY4NjdmMDY2ZTNkYjhhZGQ", "commit": {"author": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2023-01-31T11:09:54Z"}, "committer": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2023-02-01T19:09:22Z"}, "message": "Improve pretty-printing of `HirIdValidator` errors\n\nThis now uses `node_to_string` for both missing and seen Ids, which includes\nthe snippet of code for which the Id was allocated.\nAlso removes the duplicated printing of `HirId`, as `node_to_string` includes that already.\nSimilarly, changes all other users of `node_to_string` that do so, and changes the output of `node_to_string`, which is now \"$hirid ($what `$span` in $path)\".", "tree": {"sha": "5646134adee1549436ab2f6d570e70e80ade2daf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5646134adee1549436ab2f6d570e70e80ade2daf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a75f10af12e959273d19cf0f867f066e3db8add", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZNNjbpmzULCa7LeL/HvKd4JLMpgFAmPauVoACgkQ/HvKd4JL\nMpjfKg/+O+eZHTUtC023me8hb3ruyyl+dAwJ2OdMdsd40jz0sxVzdQ2dAYVM4ntI\nn2YGG6yfahuy/HncFB0UVSSZVVYIrRLfOqb2jvHp7YzxT7zKDd5kTONqaQ/W45qa\nd7S5RxGt3mpLmpVv9YNw6tv8tGZ5atvftVTz0vEQBvt/KuCdjha+IOIw7G1/bZJe\nM/6wkdY5h8dlHmxnbYueeR2QRbLQZpzKPRcgjts121DtseM+kMCUfQ4LCoZK3LkX\nVNqi9fDiZTuE7U1cPNZMcAZG5xNwWHd1jHecRBEssxJ0iowAeJgsCgFGHeH8MneS\nSEH8d5Sm4oiBPqlL3A0AcInzIVseseuVjFOncnUsBdpce640Pf1gMhRqjlzWGEa/\nR84uz14wgNG5Sp8dgVeRVOodrPasmVAdVAqIWyfiFjH8WqjOVrkTL7W/Fhvme4YI\nr1FVFYQYhGpGztqbray0HD/Av7EniLt6R91fztCgl9PmC3oNgR2TayC71irsNjwq\n2kVkEHcFv1N4rEcQzU6M6hn7yTZkjzaJKJ9ock8ITVa3MPyxaEh01I6AxJrk5Lk3\n4aTroelbwXqiToXtDsGNSL3zZQAh8hQV9cTqLop4Wh2P6G3E6LkbssqWih+Wfgrs\nl3QPffpY3YVIGnp3xQiM0ppQR3dKMLVZEbgcZEXBMo6MIZPbFS0=\n=o7OT\n-----END PGP SIGNATURE-----", "payload": "tree 5646134adee1549436ab2f6d570e70e80ade2daf\nparent 3b639486c17e9144a9176382ecb2a0b801263935\nauthor Arpad Borsos <swatinem@swatinem.de> 1675163394 +0100\ncommitter Arpad Borsos <swatinem@swatinem.de> 1675278562 +0100\n\nImprove pretty-printing of `HirIdValidator` errors\n\nThis now uses `node_to_string` for both missing and seen Ids, which includes\nthe snippet of code for which the Id was allocated.\nAlso removes the duplicated printing of `HirId`, as `node_to_string` includes that already.\nSimilarly, changes all other users of `node_to_string` that do so, and changes the output of `node_to_string`, which is now \"$hirid ($what `$span` in $path)\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a75f10af12e959273d19cf0f867f066e3db8add", "html_url": "https://github.com/rust-lang/rust/commit/3a75f10af12e959273d19cf0f867f066e3db8add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a75f10af12e959273d19cf0f867f066e3db8add/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b639486c17e9144a9176382ecb2a0b801263935", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b639486c17e9144a9176382ecb2a0b801263935", "html_url": "https://github.com/rust-lang/rust/commit/3b639486c17e9144a9176382ecb2a0b801263935"}], "stats": {"total": 81, "additions": 32, "deletions": 49}, "files": [{"sha": "237142acca6604a8af1731bd66919209b9ee7a09", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=3a75f10af12e959273d19cf0f867f066e3db8add", "patch": "@@ -454,8 +454,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n             None => {\n                 bug!(\n-                    \"no type for node {}: {} in fcx {}\",\n-                    id,\n+                    \"no type for node {} in fcx {}\",\n                     self.tcx.hir().node_to_string(id),\n                     self.tag()\n                 );"}, {"sha": "92240b66eb1d4727a4a6aaa9d6df41efa26b43ef", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=3a75f10af12e959273d19cf0f867f066e3db8add", "patch": "@@ -155,8 +155,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             None if self.is_tainted_by_errors() => Err(()),\n             None => {\n                 bug!(\n-                    \"no type for node {}: {} in mem_categorization\",\n-                    id,\n+                    \"no type for node {} in mem_categorization\",\n                     self.tcx().hir().node_to_string(id)\n                 );\n             }"}, {"sha": "7f2994fd79b98af288b56103a3482b240ebc5bc7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=3a75f10af12e959273d19cf0f867f066e3db8add", "patch": "@@ -290,7 +290,7 @@ impl<'hir> Map<'hir> {\n     #[track_caller]\n     pub fn parent_id(self, hir_id: HirId) -> HirId {\n         self.opt_parent_id(hir_id)\n-            .unwrap_or_else(|| bug!(\"No parent for node {:?}\", self.node_to_string(hir_id)))\n+            .unwrap_or_else(|| bug!(\"No parent for node {}\", self.node_to_string(hir_id)))\n     }\n \n     pub fn get_parent(self, hir_id: HirId) -> Node<'hir> {\n@@ -1191,12 +1191,10 @@ fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n }\n \n fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n-    let id_str = format!(\" (hir_id={})\", id);\n-\n     let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id.to_def_id());\n \n     let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n-    let node_str = |prefix| format!(\"{} {}{}\", prefix, span_str(), id_str);\n+    let node_str = |prefix| format!(\"{id} ({prefix} `{}`)\", span_str());\n \n     match map.find(id) {\n         Some(Node::Item(item)) => {\n@@ -1225,18 +1223,18 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::TraitAlias(..) => \"trait alias\",\n                 ItemKind::Impl { .. } => \"impl\",\n             };\n-            format!(\"{} {}{}\", item_str, path_str(item.owner_id.def_id), id_str)\n+            format!(\"{id} ({item_str} {})\", path_str(item.owner_id.def_id))\n         }\n         Some(Node::ForeignItem(item)) => {\n-            format!(\"foreign item {}{}\", path_str(item.owner_id.def_id), id_str)\n+            format!(\"{id} (foreign item {})\", path_str(item.owner_id.def_id))\n         }\n         Some(Node::ImplItem(ii)) => {\n             let kind = match ii.kind {\n                 ImplItemKind::Const(..) => \"assoc const\",\n                 ImplItemKind::Fn(..) => \"method\",\n                 ImplItemKind::Type(_) => \"assoc type\",\n             };\n-            format!(\"{} {} in {}{}\", kind, ii.ident, path_str(ii.owner_id.def_id), id_str)\n+            format!(\"{id} ({kind} `{}` in {})\", ii.ident, path_str(ii.owner_id.def_id))\n         }\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n@@ -1245,13 +1243,13 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n \n-            format!(\"{} {} in {}{}\", kind, ti.ident, path_str(ti.owner_id.def_id), id_str)\n+            format!(\"{id} ({kind} `{}` in {})\", ti.ident, path_str(ti.owner_id.def_id))\n         }\n         Some(Node::Variant(ref variant)) => {\n-            format!(\"variant {} in {}{}\", variant.ident, path_str(variant.def_id), id_str)\n+            format!(\"{id} (variant `{}` in {})\", variant.ident, path_str(variant.def_id))\n         }\n         Some(Node::Field(ref field)) => {\n-            format!(\"field {} in {}{}\", field.ident, path_str(field.def_id), id_str)\n+            format!(\"{id} (field `{}` in {})\", field.ident, path_str(field.def_id))\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n@@ -1269,16 +1267,15 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Infer(_)) => node_str(\"infer\"),\n         Some(Node::Local(_)) => node_str(\"local\"),\n         Some(Node::Ctor(ctor)) => format!(\n-            \"ctor {}{}\",\n+            \"{id} (ctor {})\",\n             ctor.ctor_def_id().map_or(\"<missing path>\".into(), |def_id| path_str(def_id)),\n-            id_str\n         ),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n         Some(Node::GenericParam(ref param)) => {\n-            format!(\"generic_param {}{}\", path_str(param.def_id), id_str)\n+            format!(\"{id} (generic_param {})\", path_str(param.def_id))\n         }\n-        Some(Node::Crate(..)) => String::from(\"root_crate\"),\n-        None => format!(\"unknown node{}\", id_str),\n+        Some(Node::Crate(..)) => String::from(\"(root_crate)\"),\n+        None => format!(\"{id} (unknown node)\"),\n     }\n }\n "}, {"sha": "f98172e420162c4ae6aecc0b8fd247e3589757f2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3a75f10af12e959273d19cf0f867f066e3db8add", "patch": "@@ -2171,7 +2171,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.late_bound_vars_map(id.owner)\n                 .and_then(|map| map.get(&id.local_id).cloned())\n                 .unwrap_or_else(|| {\n-                    bug!(\"No bound vars found for {:?} ({:?})\", self.hir().node_to_string(id), id)\n+                    bug!(\"No bound vars found for {}\", self.hir().node_to_string(id))\n                 })\n                 .iter(),\n         )"}, {"sha": "9beaac87183a7fcde3369cab7949c5eca5a299ee", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=3a75f10af12e959273d19cf0f867f066e3db8add", "patch": "@@ -372,7 +372,7 @@ impl<'tcx> TypeckResults<'tcx> {\n \n     pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n         self.node_type_opt(id).unwrap_or_else(|| {\n-            bug!(\"node_type: no type for node `{}`\", tls::with(|tcx| tcx.hir().node_to_string(id)))\n+            bug!(\"node_type: no type for node {}\", tls::with(|tcx| tcx.hir().node_to_string(id)))\n         })\n     }\n \n@@ -551,9 +551,8 @@ fn validate_hir_id_for_typeck_results(hir_owner: OwnerId, hir_id: hir::HirId) {\n fn invalid_hir_id_for_typeck_results(hir_owner: OwnerId, hir_id: hir::HirId) {\n     ty::tls::with(|tcx| {\n         bug!(\n-            \"node {} with HirId::owner {:?} cannot be placed in TypeckResults with hir_owner {:?}\",\n+            \"node {} cannot be placed in TypeckResults with hir_owner {:?}\",\n             tcx.hir().node_to_string(hir_id),\n-            hir_id.owner,\n             hir_owner\n         )\n     });"}, {"sha": "de0e50a65de6ebba0d48d65f729b8ab01cf63f99", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=3a75f10af12e959273d19cf0f867f066e3db8add", "patch": "@@ -74,37 +74,26 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n             .expect(\"owning item has no entry\");\n \n         if max != self.hir_ids_seen.len() - 1 {\n-            // Collect the missing ItemLocalIds\n-            let missing: Vec<_> = (0..=max as u32)\n-                .filter(|&i| !self.hir_ids_seen.contains(ItemLocalId::from_u32(i)))\n-                .collect();\n-\n-            // Try to map those to something more useful\n-            let mut missing_items = Vec::with_capacity(missing.len());\n+            let hir = self.tcx.hir();\n+            let pretty_owner = hir.def_path(owner.def_id).to_string_no_crate_verbose();\n \n-            for local_id in missing {\n-                let hir_id = HirId { owner, local_id: ItemLocalId::from_u32(local_id) };\n+            let missing_items: Vec<_> = (0..=max as u32)\n+                .map(|i| ItemLocalId::from_u32(i))\n+                .filter(|&local_id| !self.hir_ids_seen.contains(local_id))\n+                .map(|local_id| hir.node_to_string(HirId { owner, local_id }))\n+                .collect();\n \n-                trace!(\"missing hir id {:#?}\", hir_id);\n+            let seen_items: Vec<_> = self\n+                .hir_ids_seen\n+                .iter()\n+                .map(|local_id| hir.node_to_string(HirId { owner, local_id }))\n+                .collect();\n \n-                missing_items.push(format!(\n-                    \"[local_id: {}, owner: {}]\",\n-                    local_id,\n-                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose()\n-                ));\n-            }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n-                Max ItemLocalId = {}, missing IDs = {:#?}; seens IDs = {:#?}\",\n-                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose(),\n-                    max,\n-                    missing_items,\n-                    self.hir_ids_seen\n-                        .iter()\n-                        .map(|local_id| HirId { owner, local_id })\n-                        .map(|h| format!(\"({:?} {})\", h, self.tcx.hir().node_to_string(h)))\n-                        .collect::<Vec<_>>()\n+                Max ItemLocalId = {}, missing IDs = {:#?}; seen IDs = {:#?}\",\n+                    pretty_owner, max, missing_items, seen_items\n                 )\n             });\n         }"}, {"sha": "87dbf7c3fd699b2649d36acb122d49de5a99676c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a75f10af12e959273d19cf0f867f066e3db8add/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3a75f10af12e959273d19cf0f867f066e3db8add", "patch": "@@ -133,7 +133,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                                         .cloned()\n                                         .unwrap_or_else(|| {\n                                             bug!(\n-                                                \"node_type: no type for node `{}`\",\n+                                                \"node_type: no type for node {}\",\n                                                 ty::tls::with(|tcx| tcx\n                                                     .hir()\n                                                     .node_to_string(await_expr.hir_id))"}]}