{"sha": "6248bbbf268c327d70967bc7dcab909f912b9bf8", "node_id": "C_kwDOAAsO6NoAKDYyNDhiYmJmMjY4YzMyN2Q3MDk2N2JjN2RjYWI5MDlmOTEyYjliZjg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-08T00:52:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-12T22:25:36Z"}, "message": "Pre-intern some commonly used type variables.\n\nThis requires some rearrangement of plumbing, such as adding\n`mk_fresh_{,int_,float_}ty` and removing `mk_ty_infer`.", "tree": {"sha": "effad166d0ebe687f4a3b390228d41b93b70b9b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/effad166d0ebe687f4a3b390228d41b93b70b9b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6248bbbf268c327d70967bc7dcab909f912b9bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6248bbbf268c327d70967bc7dcab909f912b9bf8", "html_url": "https://github.com/rust-lang/rust/commit/6248bbbf268c327d70967bc7dcab909f912b9bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6248bbbf268c327d70967bc7dcab909f912b9bf8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8f284536d00ba649ca968584bedab4820d8527", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8f284536d00ba649ca968584bedab4820d8527", "html_url": "https://github.com/rust-lang/rust/commit/5b8f284536d00ba649ca968584bedab4820d8527"}], "stats": {"total": 109, "additions": 79, "deletions": 30}, "files": [{"sha": "ae00042eae73d544f8cb555f82001f6ae74ff462", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=6248bbbf268c327d70967bc7dcab909f912b9bf8", "patch": "@@ -273,12 +273,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ct_op: |c| c,\n             ty_op: |t| match *t.kind() {\n                 ty::Infer(ty::TyVar(_)) => self.tcx.mk_ty_var(ty::TyVid::from_u32(0)),\n-                ty::Infer(ty::IntVar(_)) => {\n-                    self.tcx.mk_ty_infer(ty::IntVar(ty::IntVid { index: 0 }))\n-                }\n-                ty::Infer(ty::FloatVar(_)) => {\n-                    self.tcx.mk_ty_infer(ty::FloatVar(ty::FloatVid { index: 0 }))\n-                }\n+                ty::Infer(ty::IntVar(_)) => self.tcx.mk_int_var(ty::IntVid { index: 0 }),\n+                ty::Infer(ty::FloatVar(_)) => self.tcx.mk_float_var(ty::FloatVid { index: 0 }),\n                 _ => t,\n             },\n         };"}, {"sha": "073a2b0753dc479d65a58c60021c0aa805b3872a", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=6248bbbf268c327d70967bc7dcab909f912b9bf8", "patch": "@@ -58,14 +58,9 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n         }\n     }\n \n-    fn freshen_ty<F>(\n-        &mut self,\n-        opt_ty: Option<Ty<'tcx>>,\n-        key: ty::InferTy,\n-        freshener: F,\n-    ) -> Ty<'tcx>\n+    fn freshen_ty<F>(&mut self, opt_ty: Option<Ty<'tcx>>, key: ty::InferTy, mk_fresh: F) -> Ty<'tcx>\n     where\n-        F: FnOnce(u32) -> ty::InferTy,\n+        F: FnOnce(u32) -> Ty<'tcx>,\n     {\n         if let Some(ty) = opt_ty {\n             return ty.fold_with(self);\n@@ -76,7 +71,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n             Entry::Vacant(entry) => {\n                 let index = self.ty_freshen_count;\n                 self.ty_freshen_count += 1;\n-                let t = self.infcx.tcx.mk_ty_infer(freshener(index));\n+                let t = mk_fresh(index);\n                 entry.insert(t);\n                 t\n             }\n@@ -204,7 +199,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n         match v {\n             ty::TyVar(v) => {\n                 let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n-                Some(self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy))\n+                Some(self.freshen_ty(opt_ty, ty::TyVar(v), |n| self.infcx.tcx.mk_fresh_ty(n)))\n             }\n \n             ty::IntVar(v) => Some(\n@@ -216,7 +211,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n                         .probe_value(v)\n                         .map(|v| v.to_type(self.infcx.tcx)),\n                     ty::IntVar(v),\n-                    ty::FreshIntTy,\n+                    |n| self.infcx.tcx.mk_fresh_int_ty(n),\n                 ),\n             ),\n \n@@ -229,7 +224,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n                         .probe_value(v)\n                         .map(|v| v.to_type(self.infcx.tcx)),\n                     ty::FloatVar(v),\n-                    ty::FreshFloatTy,\n+                    |n| self.infcx.tcx.mk_fresh_float_ty(n),\n                 ),\n             ),\n "}, {"sha": "5fe8a4521ca333dc7f3bb4a78f7dff99498214fe", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 67, "deletions": 9, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6248bbbf268c327d70967bc7dcab909f912b9bf8", "patch": "@@ -241,6 +241,11 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n }\n \n+const NUM_PREINTERNED_TY_VARS: u32 = 100;\n+const NUM_PREINTERNED_FRESH_TYS: u32 = 20;\n+const NUM_PREINTERNED_FRESH_INT_TYS: u32 = 3;\n+const NUM_PREINTERNED_FRESH_FLOAT_TYS: u32 = 3;\n+\n pub struct CommonTypes<'tcx> {\n     pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n@@ -266,7 +271,20 @@ pub struct CommonTypes<'tcx> {\n     /// Dummy type used for the `Self` of a `TraitRef` created for converting\n     /// a trait object, and which gets removed in `ExistentialTraitRef`.\n     /// This type must not appear anywhere in other converted types.\n+    /// `Infer(ty::FreshTy(0))` does the job.\n     pub trait_object_dummy_self: Ty<'tcx>,\n+\n+    /// Pre-interned `Infer(ty::TyVar(n))` for small values of `n`.\n+    pub ty_vars: Vec<Ty<'tcx>>,\n+\n+    /// Pre-interned `Infer(ty::FreshTy(n))` for small values of `n`.\n+    pub fresh_tys: Vec<Ty<'tcx>>,\n+\n+    /// Pre-interned `Infer(ty::FreshIntTy(n))` for small values of `n`.\n+    pub fresh_int_tys: Vec<Ty<'tcx>>,\n+\n+    /// Pre-interned `Infer(ty::FreshFloatTy(n))` for small values of `n`.\n+    pub fresh_float_tys: Vec<Ty<'tcx>>,\n }\n \n pub struct CommonLifetimes<'tcx> {\n@@ -289,6 +307,15 @@ impl<'tcx> CommonTypes<'tcx> {\n     ) -> CommonTypes<'tcx> {\n         let mk = |ty| interners.intern_ty(ty, sess, untracked);\n \n+        let ty_vars =\n+            (0..NUM_PREINTERNED_TY_VARS).map(|n| mk(Infer(ty::TyVar(TyVid::from(n))))).collect();\n+        let fresh_tys: Vec<_> =\n+            (0..NUM_PREINTERNED_FRESH_TYS).map(|n| mk(Infer(ty::FreshTy(n)))).collect();\n+        let fresh_int_tys: Vec<_> =\n+            (0..NUM_PREINTERNED_FRESH_INT_TYS).map(|n| mk(Infer(ty::FreshIntTy(n)))).collect();\n+        let fresh_float_tys: Vec<_> =\n+            (0..NUM_PREINTERNED_FRESH_FLOAT_TYS).map(|n| mk(Infer(ty::FreshFloatTy(n)))).collect();\n+\n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n             bool: mk(Bool),\n@@ -311,7 +338,12 @@ impl<'tcx> CommonTypes<'tcx> {\n             str_: mk(Str),\n             self_param: mk(ty::Param(ty::ParamTy { index: 0, name: kw::SelfUpper })),\n \n-            trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n+            trait_object_dummy_self: fresh_tys[0],\n+\n+            ty_vars,\n+            fresh_tys,\n+            fresh_int_tys,\n+            fresh_float_tys,\n         }\n     }\n }\n@@ -1868,28 +1900,54 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n-        self.mk_ty_infer(TyVar(v))\n+    pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const_internal(ty::ConstData { kind: kind.into(), ty })\n     }\n \n     #[inline]\n-    pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const_internal(ty::ConstData { kind: kind.into(), ty })\n+    pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types.ty_vars.get(v.as_usize()).copied().unwrap_or_else(|| self.mk_ty(Infer(TyVar(v))))\n     }\n \n     #[inline]\n     pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {\n-        self.mk_ty_infer(IntVar(v))\n+        self.mk_ty(Infer(IntVar(v)))\n     }\n \n     #[inline]\n     pub fn mk_float_var(self, v: FloatVid) -> Ty<'tcx> {\n-        self.mk_ty_infer(FloatVar(v))\n+        self.mk_ty(Infer(FloatVar(v)))\n+    }\n+\n+    #[inline]\n+    pub fn mk_fresh_ty(self, n: u32) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types\n+            .fresh_tys\n+            .get(n as usize)\n+            .copied()\n+            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshTy(n))))\n+    }\n+\n+    #[inline]\n+    pub fn mk_fresh_int_ty(self, n: u32) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types\n+            .fresh_int_tys\n+            .get(n as usize)\n+            .copied()\n+            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshIntTy(n))))\n     }\n \n     #[inline]\n-    pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {\n-        self.mk_ty(Infer(it))\n+    pub fn mk_fresh_float_ty(self, n: u32) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types\n+            .fresh_float_tys\n+            .get(n as usize)\n+            .copied()\n+            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshFloatTy(n))))\n     }\n \n     #[inline]"}, {"sha": "c4a95ddacbfb1899e60f6df12cddda56c84b0354", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6248bbbf268c327d70967bc7dcab909f912b9bf8", "patch": "@@ -1209,7 +1209,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // in order to place the projections inside the `<...>`.\n                 if !resugared {\n                     // Use a type that can't appear in defaults of type parameters.\n-                    let dummy_cx = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n+                    let dummy_cx = cx.tcx().mk_fresh_ty(0);\n                     let principal = principal.with_self_ty(cx.tcx(), dummy_cx);\n \n                     let args = cx\n@@ -2696,7 +2696,7 @@ define_print_and_forward_display! {\n \n     ty::ExistentialTraitRef<'tcx> {\n         // Use a type that can't appear in defaults of type parameters.\n-        let dummy_self = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n+        let dummy_self = cx.tcx().mk_fresh_ty(0);\n         let trait_ref = self.with_self_ty(cx.tcx(), dummy_self);\n         p!(print(trait_ref.print_only_trait_path()))\n     }"}, {"sha": "c58b6a24ab58fda936f64c507c349b2d368d7a0e", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=6248bbbf268c327d70967bc7dcab909f912b9bf8", "patch": "@@ -540,7 +540,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 match predicate.as_ref().skip_binder() {\n                     ty::ExistentialPredicate::Trait(trait_ref) => {\n                         // Use a type that can't appear in defaults of type parameters.\n-                        let dummy_self = cx.tcx.mk_ty_infer(ty::FreshTy(0));\n+                        let dummy_self = cx.tcx.mk_fresh_ty(0);\n                         let trait_ref = trait_ref.with_self_ty(cx.tcx, dummy_self);\n                         cx = cx.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n                     }"}, {"sha": "5cfb6cf332e1c1fd96bd82db6cd204f9a1ded0f7", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6248bbbf268c327d70967bc7dcab909f912b9bf8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6248bbbf268c327d70967bc7dcab909f912b9bf8", "patch": "@@ -879,7 +879,7 @@ pub fn object_region_bounds<'tcx>(\n     // Since we don't actually *know* the self type for an object,\n     // this \"open(err)\" serves as a kind of dummy standin -- basically\n     // a placeholder type.\n-    let open_ty = tcx.mk_ty_infer(ty::FreshTy(0));\n+    let open_ty = tcx.mk_fresh_ty(0);\n \n     let predicates = existential_predicates.iter().filter_map(|predicate| {\n         if let ty::ExistentialPredicate::Projection(_) = predicate.skip_binder() {"}]}