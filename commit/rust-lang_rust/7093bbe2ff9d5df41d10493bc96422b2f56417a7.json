{"sha": "7093bbe2ff9d5df41d10493bc96422b2f56417a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTNiYmUyZmY5ZDVkZjQxZDEwNDkzYmM5NjQyMmIyZjU2NDE3YTc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-26T07:36:11Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-26T07:39:35Z"}, "message": "Simplify handling parens on generic bound trait", "tree": {"sha": "fca96febb4103036c167db12ba8c6200b8adf6ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca96febb4103036c167db12ba8c6200b8adf6ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7093bbe2ff9d5df41d10493bc96422b2f56417a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7093bbe2ff9d5df41d10493bc96422b2f56417a7", "html_url": "https://github.com/rust-lang/rust/commit/7093bbe2ff9d5df41d10493bc96422b2f56417a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7093bbe2ff9d5df41d10493bc96422b2f56417a7/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0487164f195f6742485cab9ade8b02a637cf92", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d0487164f195f6742485cab9ade8b02a637cf92", "html_url": "https://github.com/rust-lang/rust/commit/2d0487164f195f6742485cab9ade8b02a637cf92"}], "stats": {"total": 67, "additions": 12, "deletions": 55}, "files": [{"sha": "20828429cb1f99b401356541b408c389f7b5fdf4", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 55, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7093bbe2ff9d5df41d10493bc96422b2f56417a7/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7093bbe2ff9d5df41d10493bc96422b2f56417a7/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=7093bbe2ff9d5df41d10493bc96422b2f56417a7", "patch": "@@ -473,7 +473,7 @@ fn rewrite_bounded_lifetime(\n             \"{}{}{}\",\n             result,\n             colon,\n-            join_bounds(context, shape.sub_width(overhead)?, bounds, true, false)?\n+            join_bounds(context, shape.sub_width(overhead)?, bounds, true)?\n         );\n         Some(result)\n     }\n@@ -489,13 +489,15 @@ impl Rewrite for ast::GenericBound {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match *self {\n             ast::GenericBound::Trait(ref poly_trait_ref, trait_bound_modifier) => {\n-                match trait_bound_modifier {\n+                let snippet = context.snippet(self.span());\n+                let has_paren = snippet.starts_with(\"(\") && snippet.ends_with(\")\");\n+                let rewrite = match trait_bound_modifier {\n                     ast::TraitBoundModifier::None => poly_trait_ref.rewrite(context, shape),\n-                    ast::TraitBoundModifier::Maybe => {\n-                        let rw = poly_trait_ref.rewrite(context, shape.offset_left(1)?)?;\n-                        Some(format!(\"?{}\", rw))\n-                    }\n-                }\n+                    ast::TraitBoundModifier::Maybe => poly_trait_ref\n+                        .rewrite(context, shape.offset_left(1)?)\n+                        .map(|s| format!(\"?{}\", s)),\n+                };\n+                rewrite.map(|s| if has_paren { format!(\"({})\", s) } else { s })\n             }\n             ast::GenericBound::Outlives(ref lifetime) => lifetime.rewrite(context, shape),\n         }\n@@ -508,14 +510,7 @@ impl Rewrite for ast::GenericBounds {\n             return Some(String::new());\n         }\n \n-        let span = mk_sp(self.get(0)?.span().lo(), self.last()?.span().hi());\n-        let has_paren = context.snippet(span).starts_with('(');\n-        let bounds_shape = if has_paren {\n-            shape.offset_left(1)?.sub_width(1)?\n-        } else {\n-            shape\n-        };\n-        join_bounds(context, bounds_shape, self, true, has_paren)\n+        join_bounds(context, shape, self, true)\n     }\n }\n \n@@ -751,7 +746,6 @@ fn join_bounds(\n     shape: Shape,\n     items: &[ast::GenericBound],\n     need_indent: bool,\n-    has_paren: bool,\n ) -> Option<String> {\n     debug_assert!(!items.is_empty());\n \n@@ -762,36 +756,9 @@ fn join_bounds(\n     };\n     let type_strs = items\n         .iter()\n-        .map(|item| {\n-            item.rewrite(\n-                context,\n-                if has_paren {\n-                    shape.sub_width(1)?.offset_left(1)?\n-                } else {\n-                    shape\n-                },\n-            )\n-        })\n+        .map(|item| item.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?;\n-    let mut result = String::with_capacity(128);\n-    let mut closing_paren = has_paren;\n-    if has_paren {\n-        result.push('(');\n-    }\n-    result.push_str(&type_strs[0]);\n-    if has_paren && type_strs.len() == 1 {\n-        result.push(')');\n-    }\n-    for (i, type_str) in type_strs[1..].iter().enumerate() {\n-        if closing_paren {\n-            if let ast::GenericBound::Outlives(..) = items[i + 1] {\n-                result.push(')');\n-                closing_paren = false;\n-            }\n-        }\n-        result.push_str(joiner);\n-        result.push_str(type_str);\n-    }\n+    let result = type_strs.join(joiner);\n     if items.len() <= 1 || (!result.contains('\\n') && result.len() <= shape.width) {\n         return Some(result);\n     }\n@@ -814,20 +781,10 @@ fn join_bounds(\n         ast::GenericBound::Trait(..) => last_line_extendable(s),\n     };\n     let mut result = String::with_capacity(128);\n-    let mut closing_paren = has_paren;\n-    if has_paren {\n-        result.push('(');\n-    }\n     result.push_str(&type_strs[0]);\n     let mut can_be_put_on_the_same_line = is_bound_extendable(&result, &items[0]);\n     let generic_bounds_in_order = is_generic_bounds_in_order(items);\n     for (bound, bound_str) in items[1..].iter().zip(type_strs[1..].iter()) {\n-        if closing_paren {\n-            if let ast::GenericBound::Outlives(..) = bound {\n-                closing_paren = false;\n-                result.push(')');\n-            }\n-        }\n         if generic_bounds_in_order && can_be_put_on_the_same_line {\n             result.push_str(joiner);\n         } else {"}]}