{"sha": "c1c36acb025880c742c65f436a61fd87fc627eb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzM2YWNiMDI1ODgwYzc0MmM2NWY0MzZhNjFmZDg3ZmM2MjdlYjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-16T08:36:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-16T08:36:05Z"}, "message": "Merge #6861\n\n6861: generate default implementation for an enum from an enum variant #6860 r=matklad a=bnjjj\n\nclose #6860\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "ffb378cf473e9a2d07bf341c3852ed1b6e0e0729", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb378cf473e9a2d07bf341c3852ed1b6e0e0729"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c36acb025880c742c65f436a61fd87fc627eb0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2cb2CRBK7hj4Ov3rIwAAdHIIAKnRzXyPIrM+Gdrp29Jbn6r7\nA5ph5ijyCfQqA3rKM1QMF8pdbfLFc30O5QsKB1ni6iwb/hEyrWMqav0LrW8wPkRh\nBf8uFeUUu0NHtaXEC25yZ8Up0xwxa7a18Cv4P/kL7S4jmvYS8QDtNxdGr8a39aJx\nOERoL/U350OHnCzlb4JfcEkj0WOEqxW9ozlSGVXo04PyX93VPdwPUA36eZUMDNaO\nzHl0+5VcqKx/FjNnKXGNaZroh7YxkydLAWMNSGGvizW7TKK1SsQiT9qZCDUGIG34\nBeRISRurXwu012q5V/ROMpyR0uu1RIkdvrZ8JPWDRBqA47ZQVRDbptLzabV8imU=\n=fZDe\n-----END PGP SIGNATURE-----\n", "payload": "tree ffb378cf473e9a2d07bf341c3852ed1b6e0e0729\nparent ece626fe81579b6b38cdbd17d3e47bb422360a56\nparent 2c82a1aec71e858040f24d4b39d3937c737f1ef5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608107765 +0000\ncommitter GitHub <noreply@github.com> 1608107765 +0000\n\nMerge #6861\n\n6861: generate default implementation for an enum from an enum variant #6860 r=matklad a=bnjjj\n\nclose #6860\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c36acb025880c742c65f436a61fd87fc627eb0", "html_url": "https://github.com/rust-lang/rust/commit/c1c36acb025880c742c65f436a61fd87fc627eb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c36acb025880c742c65f436a61fd87fc627eb0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece626fe81579b6b38cdbd17d3e47bb422360a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece626fe81579b6b38cdbd17d3e47bb422360a56", "html_url": "https://github.com/rust-lang/rust/commit/ece626fe81579b6b38cdbd17d3e47bb422360a56"}, {"sha": "2c82a1aec71e858040f24d4b39d3937c737f1ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c82a1aec71e858040f24d4b39d3937c737f1ef5", "html_url": "https://github.com/rust-lang/rust/commit/2c82a1aec71e858040f24d4b39d3937c737f1ef5"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "bcea46735181dbba1210b3ce7c01f7c1ef721ab9", "filename": "crates/assists/src/handlers/generate_default_from_enum_variant.rs", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/c1c36acb025880c742c65f436a61fd87fc627eb0/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c36acb025880c742c65f436a61fd87fc627eb0/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_default_from_enum_variant.rs?ref=c1c36acb025880c742c65f436a61fd87fc627eb0", "patch": "@@ -0,0 +1,175 @@\n+use ide_db::helpers::FamousDefs;\n+use ide_db::RootDatabase;\n+use syntax::ast::{self, AstNode, NameOwner};\n+use test_utils::mark;\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: generate_default_from_enum_variant\n+//\n+// Adds a Default impl for an enum using a variant.\n+//\n+// ```\n+// enum Version {\n+//  Undefined,\n+//  Minor<|>,\n+//  Major,\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Version {\n+//  Undefined,\n+//  Minor,\n+//  Major,\n+// }\n+//\n+// impl Default for Version {\n+//     fn default() -> Self {\n+//         Self::Minor\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_default_from_enum_variant(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+) -> Option<()> {\n+    let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n+    let variant_name = variant.name()?;\n+    let enum_name = variant.parent_enum().name()?;\n+    if !matches!(variant.kind(), ast::StructKind::Unit) {\n+        mark::hit!(test_gen_default_on_non_unit_variant_not_implemented);\n+        return None;\n+    }\n+\n+    if existing_default_impl(&ctx.sema, &variant).is_some() {\n+        mark::hit!(test_gen_default_impl_already_exists);\n+        return None;\n+    }\n+\n+    let target = variant.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_default_from_enum_variant\", AssistKind::Generate),\n+        \"Generate `Default` impl from this enum variant\",\n+        target,\n+        |edit| {\n+            let start_offset = variant.parent_enum().syntax().text_range().end();\n+            let buf = format!(\n+                r#\"\n+\n+impl Default for {0} {{\n+    fn default() -> Self {{\n+        Self::{1}\n+    }}\n+}}\"#,\n+                enum_name, variant_name\n+            );\n+            edit.insert(start_offset, buf);\n+        },\n+    )\n+}\n+\n+fn existing_default_impl(\n+    sema: &'_ hir::Semantics<'_, RootDatabase>,\n+    variant: &ast::Variant,\n+) -> Option<()> {\n+    let variant = sema.to_def(variant)?;\n+    let enum_ = variant.parent_enum(sema.db);\n+    let krate = enum_.module(sema.db).krate();\n+\n+    let default_trait = FamousDefs(sema, Some(krate)).core_default_Default()?;\n+    let enum_type = enum_.ty(sema.db);\n+\n+    if enum_type.impls_trait(sema.db, default_trait, &[]) {\n+        Some(())\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use test_utils::mark;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    fn check_not_applicable(ra_fixture: &str) {\n+        let fixture =\n+            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n+        check_assist_not_applicable(generate_default_from_enum_variant, &fixture)\n+    }\n+\n+    #[test]\n+    fn test_generate_default_from_variant() {\n+        check_assist(\n+            generate_default_from_enum_variant,\n+            r#\"\n+enum Variant {\n+    Undefined,\n+    Minor<|>,\n+    Major,\n+}\"#,\n+            r#\"enum Variant {\n+    Undefined,\n+    Minor,\n+    Major,\n+}\n+\n+impl Default for Variant {\n+    fn default() -> Self {\n+        Self::Minor\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_default_already_implemented() {\n+        mark::check!(test_gen_default_impl_already_exists);\n+        check_not_applicable(\n+            r#\"\n+enum Variant {\n+    Undefined,\n+    Minor<|>,\n+    Major,\n+}\n+\n+impl Default for Variant {\n+    fn default() -> Self {\n+        Self::Minor\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_from_impl_no_element() {\n+        mark::check!(test_gen_default_on_non_unit_variant_not_implemented);\n+        check_not_applicable(\n+            r#\"\n+enum Variant {\n+    Undefined,\n+    Minor(u32)<|>,\n+    Major,\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_default_from_variant_with_one_variant() {\n+        check_assist(\n+            generate_default_from_enum_variant,\n+            r#\"enum Variant { Undefi<|>ned }\"#,\n+            r#\"\n+enum Variant { Undefined }\n+\n+impl Default for Variant {\n+    fn default() -> Self {\n+        Self::Undefined\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "6e736ccb38906cecee990a46503ce3c83a392bdb", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c36acb025880c742c65f436a61fd87fc627eb0/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c36acb025880c742c65f436a61fd87fc627eb0/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=c1c36acb025880c742c65f436a61fd87fc627eb0", "patch": "@@ -137,6 +137,7 @@ mod handlers {\n     mod flip_comma;\n     mod flip_trait_bound;\n     mod generate_derive;\n+    mod generate_default_from_enum_variant;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n     mod generate_impl;\n@@ -186,6 +187,7 @@ mod handlers {\n             flip_comma::flip_comma,\n             flip_trait_bound::flip_trait_bound,\n             generate_derive::generate_derive,\n+            generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_impl::generate_impl,"}, {"sha": "cc7c4a3433a327c27a17ece7bb71303d54a2027c", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1c36acb025880c742c65f436a61fd87fc627eb0/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c36acb025880c742c65f436a61fd87fc627eb0/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=c1c36acb025880c742c65f436a61fd87fc627eb0", "patch": "@@ -364,6 +364,33 @@ fn foo<T: Copy + Clone>() { }\n     )\n }\n \n+#[test]\n+fn doctest_generate_default_from_enum_variant() {\n+    check_doc_test(\n+        \"generate_default_from_enum_variant\",\n+        r#####\"\n+enum Version {\n+ Undefined,\n+ Minor<|>,\n+ Major,\n+}\n+\"#####,\n+        r#####\"\n+enum Version {\n+ Undefined,\n+ Minor,\n+ Major,\n+}\n+\n+impl Default for Version {\n+    fn default() -> Self {\n+        Self::Minor\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_derive() {\n     check_doc_test("}]}