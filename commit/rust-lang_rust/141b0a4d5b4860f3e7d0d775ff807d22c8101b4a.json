{"sha": "141b0a4d5b4860f3e7d0d775ff807d22c8101b4a", "node_id": "C_kwDOAAsO6NoAKDE0MWIwYTRkNWI0ODYwZjNlN2QwZDc3NWZmODA3ZDIyYzgxMDFiNGE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-09T10:19:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-09T10:19:57Z"}, "message": "Rollup merge of #97874 - lcnr:combine-comment, r=davidtwco\n\nrewrite combine doc comment\n\nit was from 2014 and somewhat outdated", "tree": {"sha": "9435916243566093396d95d5403a8a32776a005f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9435916243566093396d95d5403a8a32776a005f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioclNCRBK7hj4Ov3rIwAATOYIAFMCmvajxh09SREG8tNdPJRw\nVSTUfe91g5QgFPPIyr9RVOC41vAS6lx0XWoO9R9i+rp3rs9MPVLBayVuI0V20Kw3\neSsxKWsG9GXXc3hx5wlyxdDYnHcBBtv4N7G79j1SSvY67jKMpSYjnf6C+zexVMv6\nHI+8I3x6bNV73VcQ0lVe3ScWrbtc6wVZi41E9ppOw5MH4mQhiD37dALOoatiA0hz\nHr3JX0u8gJaUCpHJFic7qhXL8BrjHso+PjHXJUFhWEEF10iUxDfkPuOYFjuSjtgs\ngx/GkT1BIeeEy5/HbsgbKeeEUo/alP1/D5wO8mrP3GZ2E/MKO2E4FhRiqjny420=\n=TfKp\n-----END PGP SIGNATURE-----\n", "payload": "tree 9435916243566093396d95d5403a8a32776a005f\nparent 5d81f91a3bbb6b26894b2b03a488321eb3665214\nparent 36a4490271f5e32c54f2a9d8e49267c2783e0586\nauthor Yuki Okushi <jtitor@2k36.org> 1654769997 +0900\ncommitter GitHub <noreply@github.com> 1654769997 +0900\n\nRollup merge of #97874 - lcnr:combine-comment, r=davidtwco\n\nrewrite combine doc comment\n\nit was from 2014 and somewhat outdated\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a", "html_url": "https://github.com/rust-lang/rust/commit/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d81f91a3bbb6b26894b2b03a488321eb3665214", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d81f91a3bbb6b26894b2b03a488321eb3665214", "html_url": "https://github.com/rust-lang/rust/commit/5d81f91a3bbb6b26894b2b03a488321eb3665214"}, {"sha": "36a4490271f5e32c54f2a9d8e49267c2783e0586", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4490271f5e32c54f2a9d8e49267c2783e0586", "html_url": "https://github.com/rust-lang/rust/commit/36a4490271f5e32c54f2a9d8e49267c2783e0586"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "120e57ecebd759a0162cad85fdbc97b566d4e8f2", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141b0a4d5b4860f3e7d0d775ff807d22c8101b4a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=141b0a4d5b4860f3e7d0d775ff807d22c8101b4a", "patch": "@@ -1,26 +1,26 @@\n-///////////////////////////////////////////////////////////////////////////\n-// # Type combining\n-//\n-// There are four type combiners: equate, sub, lub, and glb.  Each\n-// implements the trait `Combine` and contains methods for combining\n-// two instances of various things and yielding a new instance.  These\n-// combiner methods always yield a `Result<T>`.  There is a lot of\n-// common code for these operations, implemented as default methods on\n-// the `Combine` trait.\n-//\n-// Each operation may have side-effects on the inference context,\n-// though these can be unrolled using snapshots. On success, the\n-// LUB/GLB operations return the appropriate bound. The Eq and Sub\n-// operations generally return the first operand.\n-//\n-// ## Contravariance\n-//\n-// When you are relating two things which have a contravariant\n-// relationship, you should use `contratys()` or `contraregions()`,\n-// rather than inversing the order of arguments!  This is necessary\n-// because the order of arguments is not relevant for LUB and GLB.  It\n-// is also useful to track which value is the \"expected\" value in\n-// terms of error reporting.\n+//! There are four type combiners: [Equate], [Sub], [Lub], and [Glb].\n+//! Each implements the trait [TypeRelation] and contains methods for\n+//! combining two instances of various things and yielding a new instance.\n+//! These combiner methods always yield a `Result<T>`. To relate two\n+//! types, you can use `infcx.at(cause, param_env)` which then allows\n+//! you to use the relevant methods of [At](super::at::At).\n+//!\n+//! Combiners mostly do their specific behavior and then hand off the\n+//! bulk of the work to [InferCtxt::super_combine_tys] and\n+//! [InferCtxt::super_combine_consts].\n+//!\n+//! Combining two types may have side-effects on the inference contexts\n+//! which can be undone by using snapshots. You probably want to use\n+//! either [InferCtxt::commit_if_ok] or [InferCtxt::probe].\n+//!\n+//! On success, the  LUB/GLB operations return the appropriate bound. The\n+//! return value of `Equate` or `Sub` shouldn't really be used.\n+//!\n+//! ## Contravariance\n+//!\n+//! We explicitly track which argument is expected using\n+//! [TypeRelation::a_is_expected], so when dealing with contravariance\n+//! this should be correctly updated.\n \n use super::equate::Equate;\n use super::glb::Glb;"}]}