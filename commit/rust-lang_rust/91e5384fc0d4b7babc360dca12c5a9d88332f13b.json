{"sha": "91e5384fc0d4b7babc360dca12c5a9d88332f13b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZTUzODRmYzBkNGI3YmFiYzM2MGRjYTEyYzVhOWQ4ODMzMmYxM2I=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-17T22:51:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-17T22:51:16Z"}, "message": "Rollup merge of #81869 - mark-i-m:leading-vert, r=petrochenkov\n\nSimplify pattern grammar, improve or-pattern diagnostics\n\nThis implements the change under FCP in https://github.com/rust-lang/rust/issues/81415. It allows nested or-patterns to contain a leading `|`, simplifying the [grammar for patterns](https://github.com/rust-lang/reference/pull/957/files?short_path=cc629f1#diff-cc629f15712821139bc706c63b3845ab59a008e2a998e08ffad42e3aebcbcbe2).\n\nAlong the way, we also improve the diagnostics around a few specially-handled cases, such as using `||` instead of `|`, using or-patterns in fn params, including the leading `|` in the pattern span, etc.\n\nr? `@petrochenkov`", "tree": {"sha": "c1c5d50bc96f0ada0f2491c7eaa94997c5861f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c5d50bc96f0ada0f2491c7eaa94997c5861f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91e5384fc0d4b7babc360dca12c5a9d88332f13b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLZ3kCRBK7hj4Ov3rIwAAdHIIAIRWLkIBY7p+8bi4VQs8k6cn\nL4bRFy2rhRi6BNafvqIWi1+edAbmfoWeknXu6pvHtyMiHD1lJMCRUSSZh3DZBFw2\ncNxSelJIKQD5FrqBjDm5ABoeyKcmGzJb2gom9O9nfnCPbPtlFMu9SnTz5zPp5/f9\n4l0ArUYOfd10Bbp6AX7oIwRJ5TvRe3Fk+cYTM0Q0uTyPVioVdK9MVKAkOqIR+kZS\nX38eUy0xqpGvhfB80Go0+w1C5nVpQ8giB8xnlYfOXy88J0vwD6GzlRbUnHFmPUpw\nGoO4UrEqYGrsIROeRiUuKR8v8u5yz8+eDQzoeBbDYerg+5SEmpYuOEnlWJ7LWNo=\n=KKPv\n-----END PGP SIGNATURE-----\n", "payload": "tree c1c5d50bc96f0ada0f2491c7eaa94997c5861f37\nparent d2232506629b3de71db97694889928bf91330566\nparent aee1e59e6f00876a881e9d8c2ff00e0f11f896eb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613602276 +0100\ncommitter GitHub <noreply@github.com> 1613602276 +0100\n\nRollup merge of #81869 - mark-i-m:leading-vert, r=petrochenkov\n\nSimplify pattern grammar, improve or-pattern diagnostics\n\nThis implements the change under FCP in https://github.com/rust-lang/rust/issues/81415. It allows nested or-patterns to contain a leading `|`, simplifying the [grammar for patterns](https://github.com/rust-lang/reference/pull/957/files?short_path=cc629f1#diff-cc629f15712821139bc706c63b3845ab59a008e2a998e08ffad42e3aebcbcbe2).\n\nAlong the way, we also improve the diagnostics around a few specially-handled cases, such as using `||` instead of `|`, using or-patterns in fn params, including the leading `|` in the pattern span, etc.\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91e5384fc0d4b7babc360dca12c5a9d88332f13b", "html_url": "https://github.com/rust-lang/rust/commit/91e5384fc0d4b7babc360dca12c5a9d88332f13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91e5384fc0d4b7babc360dca12c5a9d88332f13b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2232506629b3de71db97694889928bf91330566", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2232506629b3de71db97694889928bf91330566", "html_url": "https://github.com/rust-lang/rust/commit/d2232506629b3de71db97694889928bf91330566"}, {"sha": "aee1e59e6f00876a881e9d8c2ff00e0f11f896eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee1e59e6f00876a881e9d8c2ff00e0f11f896eb", "html_url": "https://github.com/rust-lang/rust/commit/aee1e59e6f00876a881e9d8c2ff00e0f11f896eb"}], "stats": {"total": 490, "additions": 188, "deletions": 302}, "files": [{"sha": "f23e3b9f7471a865a22daae11eca453206f833aa", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, PResult};\n use rustc_feature::Features;\n-use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, Parser};\n+use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, GateOr, Parser, RecoverComma};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -914,7 +914,9 @@ pub fn parse_ast_fragment<'a>(\n             }\n         }\n         AstFragmentKind::Ty => AstFragment::Ty(this.parse_ty()?),\n-        AstFragmentKind::Pat => AstFragment::Pat(this.parse_pat(None)?),\n+        AstFragmentKind::Pat => {\n+            AstFragment::Pat(this.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)?)\n+        }\n         AstFragmentKind::Arms\n         | AstFragmentKind::Fields\n         | AstFragmentKind::FieldPats"}, {"sha": "0f49386dec07b083e80293934094cc9b14437159", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -1654,7 +1654,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn recover_arg_parse(&mut self) -> PResult<'a, (P<ast::Pat>, P<ast::Ty>)> {\n-        let pat = self.parse_pat(Some(\"argument name\"))?;\n+        let pat = self.parse_pat_no_top_alt(Some(\"argument name\"))?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n "}, {"sha": "59fd060aa24658f3bb6a4156af7b21eb1def6e9b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -1726,7 +1726,7 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n-            let pat = this.parse_pat(PARAM_EXPECTED)?;\n+            let pat = this.parse_pat_no_top_alt(PARAM_EXPECTED)?;\n             let ty = if this.eat(&token::Colon) {\n                 this.parse_ty()?\n             } else {\n@@ -1803,7 +1803,7 @@ impl<'a> Parser<'a> {\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n-        let pat = self.parse_top_pat(GateOr::No, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, GateOr::No, RecoverComma::Yes)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n@@ -1866,7 +1866,7 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_top_pat(GateOr::Yes, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::Yes)?;\n         if !self.eat_keyword(kw::In) {\n             self.error_missing_in_for_loop();\n         }\n@@ -1977,7 +1977,7 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n-            let pat = this.parse_top_pat(GateOr::No, RecoverComma::Yes)?;\n+            let pat = this.parse_pat_allow_top_alt(None, GateOr::No, RecoverComma::Yes)?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n                 let cond = this.parse_expr()?;"}, {"sha": "ace4134b1f698362872b2dc204f079ce488685c2", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -14,6 +14,7 @@ use crate::lexer::UnmatchedBrace;\n pub use attr_wrapper::AttrWrapper;\n pub use diagnostics::AttemptLocalParseRecovery;\n use diagnostics::Error;\n+pub use pat::{GateOr, RecoverComma};\n pub use path::PathStyle;\n \n use rustc_ast::ptr::P;"}, {"sha": "a84ae5151442d8c9f0c6c5c1d5b53bebe45612c2", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -120,9 +120,9 @@ impl<'a> Parser<'a> {\n             },\n             NonterminalKind::Pat2018 { .. } | NonterminalKind::Pat2021 { .. } => {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n-                    NonterminalKind::Pat2018 { .. } => this.parse_pat(None),\n+                    NonterminalKind::Pat2018 { .. } => this.parse_pat_no_top_alt(None),\n                     NonterminalKind::Pat2021 { .. } => {\n-                        this.parse_top_pat(GateOr::Yes, RecoverComma::No)\n+                        this.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n                     }\n                     _ => unreachable!(),\n                 })?)"}, {"sha": "8874548da784df87e2bd16dae267174620fb40e0", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 102, "deletions": 81, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -19,14 +19,14 @@ const WHILE_PARSING_OR_MSG: &str = \"while parsing this or-pattern starting here\"\n \n /// Whether or not an or-pattern should be gated when occurring in the current context.\n #[derive(PartialEq, Clone, Copy)]\n-pub(super) enum GateOr {\n+pub enum GateOr {\n     Yes,\n     No,\n }\n \n /// Whether or not to recover a `,` when parsing or-patterns.\n #[derive(PartialEq, Copy, Clone)]\n-pub(super) enum RecoverComma {\n+pub enum RecoverComma {\n     Yes,\n     No,\n }\n@@ -37,80 +37,57 @@ impl<'a> Parser<'a> {\n     /// Corresponds to `pat<no_top_alt>` in RFC 2535 and does not admit or-patterns\n     /// at the top level. Used when parsing the parameters of lambda expressions,\n     /// functions, function pointers, and `pat` macro fragments.\n-    pub fn parse_pat(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n+    pub fn parse_pat_no_top_alt(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n         self.parse_pat_with_range_pat(true, expected)\n     }\n \n-    /// Entry point to the main pattern parser.\n+    /// Parses a pattern.\n+    ///\n     /// Corresponds to `top_pat` in RFC 2535 and allows or-pattern at the top level.\n-    pub(super) fn parse_top_pat(\n+    /// Used for parsing patterns in all cases when `pat<no_top_alt>` is not used.\n+    ///\n+    /// Note that after the FCP in <https://github.com/rust-lang/rust/issues/81415>,\n+    /// a leading vert is allowed in nested or-patterns, too. This allows us to\n+    /// simplify the grammar somewhat.\n+    pub fn parse_pat_allow_top_alt(\n         &mut self,\n+        expected: Expected,\n         gate_or: GateOr,\n         rc: RecoverComma,\n     ) -> PResult<'a, P<Pat>> {\n         // Allow a '|' before the pats (RFCs 1925, 2530, and 2535).\n-        let gated_leading_vert = self.eat_or_separator(None) && gate_or == GateOr::Yes;\n-        let leading_vert_span = self.prev_token.span;\n-\n-        // Parse the possibly-or-pattern.\n-        let pat = self.parse_pat_with_or(None, gate_or, rc)?;\n-\n-        // If we parsed a leading `|` which should be gated,\n-        // and no other gated or-pattern has been parsed thus far,\n-        // then we should really gate the leading `|`.\n-        // This complicated procedure is done purely for diagnostics UX.\n-        if gated_leading_vert && self.sess.gated_spans.is_ungated(sym::or_patterns) {\n-            self.sess.gated_spans.gate(sym::or_patterns, leading_vert_span);\n-        }\n-\n-        Ok(pat)\n-    }\n-\n-    /// Parse the pattern for a function or function pointer parameter.\n-    /// Special recovery is provided for or-patterns and leading `|`.\n-    pub(super) fn parse_fn_param_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        self.recover_leading_vert(None, \"not allowed in a parameter pattern\");\n-        let pat = self.parse_pat_with_or(PARAM_EXPECTED, GateOr::No, RecoverComma::No)?;\n-\n-        if let PatKind::Or(..) = &pat.kind {\n-            self.ban_illegal_fn_param_or_pat(&pat);\n-        }\n-\n-        Ok(pat)\n-    }\n+        let leading_vert_span =\n+            if self.eat_or_separator(None) { Some(self.prev_token.span) } else { None };\n \n-    /// Ban `A | B` immediately in a parameter pattern and suggest wrapping in parens.\n-    fn ban_illegal_fn_param_or_pat(&self, pat: &Pat) {\n-        let msg = \"wrap the pattern in parenthesis\";\n-        let fix = format!(\"({})\", pprust::pat_to_string(pat));\n-        self.struct_span_err(pat.span, \"an or-pattern parameter must be wrapped in parenthesis\")\n-            .span_suggestion(pat.span, msg, fix, Applicability::MachineApplicable)\n-            .emit();\n-    }\n-\n-    /// Parses a pattern, that may be a or-pattern (e.g. `Foo | Bar` in `Some(Foo | Bar)`).\n-    /// Corresponds to `pat<allow_top_alt>` in RFC 2535.\n-    fn parse_pat_with_or(\n-        &mut self,\n-        expected: Expected,\n-        gate_or: GateOr,\n-        rc: RecoverComma,\n-    ) -> PResult<'a, P<Pat>> {\n         // Parse the first pattern (`p_0`).\n-        let first_pat = self.parse_pat(expected)?;\n+        let first_pat = self.parse_pat_no_top_alt(expected)?;\n         self.maybe_recover_unexpected_comma(first_pat.span, rc, gate_or)?;\n \n         // If the next token is not a `|`,\n         // this is not an or-pattern and we should exit here.\n         if !self.check(&token::BinOp(token::Or)) && self.token != token::OrOr {\n+            // If we parsed a leading `|` which should be gated,\n+            // then we should really gate the leading `|`.\n+            // This complicated procedure is done purely for diagnostics UX.\n+            if let Some(leading_vert_span) = leading_vert_span {\n+                if gate_or == GateOr::Yes && self.sess.gated_spans.is_ungated(sym::or_patterns) {\n+                    self.sess.gated_spans.gate(sym::or_patterns, leading_vert_span);\n+                }\n+\n+                // If there was a leading vert, treat this as an or-pattern. This improves\n+                // diagnostics.\n+                let span = leading_vert_span.to(self.prev_token.span);\n+                return Ok(self.mk_pat(span, PatKind::Or(vec![first_pat])));\n+            }\n+\n             return Ok(first_pat);\n         }\n \n         // Parse the patterns `p_1 | ... | p_n` where `n > 0`.\n-        let lo = first_pat.span;\n+        let lo = leading_vert_span.unwrap_or(first_pat.span);\n         let mut pats = vec![first_pat];\n         while self.eat_or_separator(Some(lo)) {\n-            let pat = self.parse_pat(expected).map_err(|mut err| {\n+            let pat = self.parse_pat_no_top_alt(expected).map_err(|mut err| {\n                 err.span_label(lo, WHILE_PARSING_OR_MSG);\n                 err\n             })?;\n@@ -127,6 +104,62 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }\n \n+    /// Parse the pattern for a function or function pointer parameter.\n+    pub(super) fn parse_fn_param_pat(&mut self) -> PResult<'a, P<Pat>> {\n+        // We actually do _not_ allow top-level or-patterns in function params, but we use\n+        // `parse_pat_allow_top_alt` anyway so that we can detect when a user tries to use it. This\n+        // allows us to print a better error message.\n+        //\n+        // In order to get good UX, we first recover in the case of a leading vert for an illegal\n+        // top-level or-pat. Normally, this means recovering both `|` and `||`, but in this case,\n+        // a leading `||` probably doesn't indicate an or-pattern attempt, so we handle that\n+        // separately.\n+        if let token::OrOr = self.token.kind {\n+            let span = self.token.span;\n+            let mut err = self.struct_span_err(span, \"unexpected `||` before function parameter\");\n+            err.span_suggestion(\n+                span,\n+                \"remove the `||`\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+            err.note(\"alternatives in or-patterns are separated with `|`, not `||`\");\n+            err.emit();\n+            self.bump();\n+        }\n+\n+        let pat = self.parse_pat_allow_top_alt(PARAM_EXPECTED, GateOr::No, RecoverComma::No)?;\n+\n+        if let PatKind::Or(..) = &pat.kind {\n+            self.ban_illegal_fn_param_or_pat(&pat);\n+        }\n+\n+        Ok(pat)\n+    }\n+\n+    /// Ban `A | B` immediately in a parameter pattern and suggest wrapping in parens.\n+    fn ban_illegal_fn_param_or_pat(&self, pat: &Pat) {\n+        // If all we have a leading vert, then print a special message. This is the case if\n+        // `parse_pat_allow_top_alt` returns an or-pattern with one variant.\n+        let (msg, fix) = match &pat.kind {\n+            PatKind::Or(pats) if pats.len() == 1 => {\n+                let msg = \"remove the leading `|`\";\n+                let fix = pprust::pat_to_string(pat);\n+                (msg, fix)\n+            }\n+\n+            _ => {\n+                let msg = \"wrap the pattern in parentheses\";\n+                let fix = format!(\"({})\", pprust::pat_to_string(pat));\n+                (msg, fix)\n+            }\n+        };\n+\n+        self.struct_span_err(pat.span, \"an or-pattern parameter must be wrapped in parentheses\")\n+            .span_suggestion(pat.span, msg, fix, Applicability::MachineApplicable)\n+            .emit();\n+    }\n+\n     /// Eat the or-pattern `|` separator.\n     /// If instead a `||` token is encountered, recover and pretend we parsed `|`.\n     fn eat_or_separator(&mut self, lo: Option<Span>) -> bool {\n@@ -179,7 +212,7 @@ impl<'a> Parser<'a> {\n \n     /// We have parsed `||` instead of `|`. Error and suggest `|` instead.\n     fn ban_unexpected_or_or(&mut self, lo: Option<Span>) {\n-        let mut err = self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\");\n+        let mut err = self.struct_span_err(self.token.span, \"unexpected token `||` in pattern\");\n         err.span_suggestion(\n             self.token.span,\n             \"use a single `|` to separate multiple alternative patterns\",\n@@ -244,30 +277,14 @@ impl<'a> Parser<'a> {\n     /// sequence of patterns until `)` is reached.\n     fn skip_pat_list(&mut self) -> PResult<'a, ()> {\n         while !self.check(&token::CloseDelim(token::Paren)) {\n-            self.parse_pat(None)?;\n+            self.parse_pat_no_top_alt(None)?;\n             if !self.eat(&token::Comma) {\n                 return Ok(());\n             }\n         }\n         Ok(())\n     }\n \n-    /// Recursive possibly-or-pattern parser with recovery for an erroneous leading `|`.\n-    /// See `parse_pat_with_or` for details on parsing or-patterns.\n-    fn parse_pat_with_or_inner(&mut self) -> PResult<'a, P<Pat>> {\n-        self.recover_leading_vert(None, \"only allowed in a top-level pattern\");\n-        self.parse_pat_with_or(None, GateOr::Yes, RecoverComma::No)\n-    }\n-\n-    /// Recover if `|` or `||` is here.\n-    /// The user is thinking that a leading `|` is allowed in this position.\n-    fn recover_leading_vert(&mut self, lo: Option<Span>, ctx: &str) {\n-        if let token::BinOp(token::Or) | token::OrOr = self.token.kind {\n-            self.ban_illegal_vert(lo, \"leading\", ctx);\n-            self.bump();\n-        }\n-    }\n-\n     /// A `|` or possibly `||` token shouldn't be here. Ban it.\n     fn ban_illegal_vert(&mut self, lo: Option<Span>, pos: &str, ctx: &str) {\n         let span = self.token.span;\n@@ -305,8 +322,9 @@ impl<'a> Parser<'a> {\n             self.parse_pat_tuple_or_parens()?\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             // Parse `[pat, pat,...]` as a slice pattern.\n-            let (pats, _) =\n-                self.parse_delim_comma_seq(token::Bracket, |p| p.parse_pat_with_or_inner())?;\n+            let (pats, _) = self.parse_delim_comma_seq(token::Bracket, |p| {\n+                p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n+            })?;\n             PatKind::Slice(pats)\n         } else if self.check(&token::DotDot) && !self.is_pat_range_end_start(1) {\n             // A rest pattern `..`.\n@@ -429,7 +447,7 @@ impl<'a> Parser<'a> {\n \n         // At this point we attempt to parse `@ $pat_rhs` and emit an error.\n         self.bump(); // `@`\n-        let mut rhs = self.parse_pat(None)?;\n+        let mut rhs = self.parse_pat_no_top_alt(None)?;\n         let sp = lhs.span.to(rhs.span);\n \n         if let PatKind::Ident(_, _, ref mut sub @ None) = rhs.kind {\n@@ -518,8 +536,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) =\n-            self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner())?;\n+        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n+            p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n+        })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -548,7 +567,7 @@ impl<'a> Parser<'a> {\n         }\n \n         // Parse the pattern we hope to be an identifier.\n-        let mut pat = self.parse_pat(Some(\"identifier\"))?;\n+        let mut pat = self.parse_pat_no_top_alt(Some(\"identifier\"))?;\n \n         // If we don't have `mut $ident (@ pat)?`, error.\n         if let PatKind::Ident(BindingMode::ByValue(m @ Mutability::Not), ..) = &mut pat.kind {\n@@ -793,7 +812,7 @@ impl<'a> Parser<'a> {\n     fn parse_pat_ident(&mut self, binding_mode: BindingMode) -> PResult<'a, PatKind> {\n         let ident = self.parse_ident()?;\n         let sub = if self.eat(&token::At) {\n-            Some(self.parse_pat(Some(\"binding pattern\"))?)\n+            Some(self.parse_pat_no_top_alt(Some(\"binding pattern\"))?)\n         } else {\n             None\n         };\n@@ -832,7 +851,9 @@ impl<'a> Parser<'a> {\n         if qself.is_some() {\n             return self.error_qpath_before_pat(&path, \"(\");\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner())?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| {\n+            p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n+        })?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -998,7 +1019,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form `fieldname: pat`.\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_with_or_inner()?;\n+            let pat = self.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "2e00ddfaacc81a27324fb44cb2216e2451c85232", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -220,7 +220,7 @@ impl<'a> Parser<'a> {\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;\n-        let pat = self.parse_top_pat(GateOr::Yes, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::Yes)?;\n \n         let (err, ty) = if self.eat(&token::Colon) {\n             // Save the state of the parser before parsing type normally, in case there is a `:`"}, {"sha": "c01d17c0b3d7e10c24e0c7d44f167123d0b54038", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns.stderr?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -8,10 +8,10 @@ LL |         Some(0 | 1 | 2) => {}\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:28:11\n+  --> $DIR/feature-gate-or_patterns.rs:28:9\n    |\n LL |     let | A | B;\n-   |           ^^^^^\n+   |         ^^^^^^^\n    |\n    = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n@@ -26,10 +26,10 @@ LL |     let A | B;\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n \n error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns.rs:30:11\n+  --> $DIR/feature-gate-or_patterns.rs:30:9\n    |\n LL |     for | A | B in 0 {}\n-   |           ^^^^^\n+   |         ^^^^^^^\n    |\n    = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(or_patterns)]` to the crate attributes to enable"}, {"sha": "bbc75d2b411eb2ab6c244446a0e9dc8247a9a9c1", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.fixed?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -11,4 +11,4 @@ enum E { A, B }\n use E::*;\n \n #[cfg(FALSE)]\n-fn fun1((A | B): E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis\n+fn fun1((A | B): E) {} //~ ERROR an or-pattern parameter must be wrapped in parentheses"}, {"sha": "65b93dcbf7467e4a6dbaf04baad13218aeae0e58", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -11,4 +11,4 @@ enum E { A, B }\n use E::*;\n \n #[cfg(FALSE)]\n-fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis\n+fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parentheses"}, {"sha": "0e6424a430043522ed5a3d320a157911a4dbe900", "filename": "src/test/ui/or-patterns/fn-param-wrap-parens.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffn-param-wrap-parens.stderr?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -1,8 +1,8 @@\n-error: an or-pattern parameter must be wrapped in parenthesis\n+error: an or-pattern parameter must be wrapped in parentheses\n   --> $DIR/fn-param-wrap-parens.rs:14:9\n    |\n LL | fn fun1(A | B: E) {}\n-   |         ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+   |         ^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n \n error: aborting due to previous error\n "}, {"sha": "4d06101044f6c1f0ceeb0c84e5818dfdd275e4d1", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -4,41 +4,41 @@ fn main() {\n     let x = 3;\n \n     match x {\n-        1 | 2 || 3 => (), //~ ERROR unexpected token `||` after pattern\n+        1 | 2 || 3 => (), //~ ERROR unexpected token `||` in pattern\n         _ => (),\n     }\n \n     match x {\n-        (1 | 2 || 3) => (), //~ ERROR unexpected token `||` after pattern\n+        (1 | 2 || 3) => (), //~ ERROR unexpected token `||` in pattern\n         _ => (),\n     }\n \n     match (x,) {\n-        (1 | 2 || 3,) => (), //~ ERROR unexpected token `||` after pattern\n+        (1 | 2 || 3,) => (), //~ ERROR unexpected token `||` in pattern\n         _ => (),\n     }\n \n     struct TS(u8);\n \n     match TS(x) {\n-        TS(1 | 2 || 3) => (), //~ ERROR unexpected token `||` after pattern\n+        TS(1 | 2 || 3) => (), //~ ERROR unexpected token `||` in pattern\n         _ => (),\n     }\n \n     struct NS { f: u8 }\n \n     match (NS { f: x }) {\n-        NS { f: 1 | 2 || 3 } => (), //~ ERROR unexpected token `||` after pattern\n+        NS { f: 1 | 2 || 3 } => (), //~ ERROR unexpected token `||` in pattern\n         _ => (),\n     }\n \n     match [x] {\n-        [1 | 2 || 3] => (), //~ ERROR unexpected token `||` after pattern\n+        [1 | 2 || 3] => (), //~ ERROR unexpected token `||` in pattern\n         _ => (),\n     }\n \n     match x {\n-        || 1 | 2 | 3 => (), //~ ERROR unexpected token `||` after pattern\n+        || 1 | 2 | 3 => (), //~ ERROR unexpected token `||` in pattern\n         _ => (),\n     }\n }"}, {"sha": "b0a82b3673b83f3f329e513518d209d95be6c10d", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -1,52 +1,52 @@\n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/multiple-pattern-typo.rs:7:15\n    |\n LL |         1 | 2 || 3 => (),\n    |         -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |         |\n    |         while parsing this or-pattern starting here\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/multiple-pattern-typo.rs:12:16\n    |\n LL |         (1 | 2 || 3) => (),\n    |          -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |          |\n    |          while parsing this or-pattern starting here\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/multiple-pattern-typo.rs:17:16\n    |\n LL |         (1 | 2 || 3,) => (),\n    |          -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |          |\n    |          while parsing this or-pattern starting here\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/multiple-pattern-typo.rs:24:18\n    |\n LL |         TS(1 | 2 || 3) => (),\n    |            -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |            |\n    |            while parsing this or-pattern starting here\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/multiple-pattern-typo.rs:31:23\n    |\n LL |         NS { f: 1 | 2 || 3 } => (),\n    |                 -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |                 |\n    |                 while parsing this or-pattern starting here\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/multiple-pattern-typo.rs:36:16\n    |\n LL |         [1 | 2 || 3] => (),\n    |          -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n    |          |\n    |          while parsing this or-pattern starting here\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/multiple-pattern-typo.rs:41:9\n    |\n LL |         || 1 | 2 | 3 => (),"}, {"sha": "cbc24eb26fa475a4545f92b1fd7fc752162df9de", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -14,29 +14,8 @@ fn no_top_level_or_patterns() {\n     //           -------- This looks like an or-pattern but is in fact `|A| (B: E | ())`.\n \n     // ...and for now neither do we allow or-patterns at the top level of functions.\n-    fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis\n+    fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parentheses\n \n     fn fun2(| A | B: E) {}\n-    //~^ ERROR a leading `|` is not allowed in a parameter pattern\n-    //~| ERROR an or-pattern parameter must be wrapped in parenthesis\n-}\n-\n-// We also do not allow a leading `|` when not in a top level position:\n-\n-fn no_leading_inner() {\n-    struct TS(E);\n-    struct NS { f: E }\n-\n-    let ( | A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let ( | A | B,) = (E::B,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let [ | A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let TS( | A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let NS { f: | A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-\n-    let ( || A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let [ || A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let TS( || A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let NS { f: || A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-\n-    let recovery_witness: String = 0; //~ ERROR mismatched types\n+    //~^ ERROR an or-pattern parameter must be wrapped in parentheses\n }"}, {"sha": "db4d827757b036138203b402398f35ab9ba3621d", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 6, "deletions": 85, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -1,82 +1,14 @@\n-error: an or-pattern parameter must be wrapped in parenthesis\n+error: an or-pattern parameter must be wrapped in parentheses\n   --> $DIR/or-patterns-syntactic-fail.rs:17:13\n    |\n LL |     fn fun1(A | B: E) {}\n-   |             ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+   |             ^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n \n-error: a leading `|` is not allowed in a parameter pattern\n+error: an or-pattern parameter must be wrapped in parentheses\n   --> $DIR/or-patterns-syntactic-fail.rs:19:13\n    |\n LL |     fn fun2(| A | B: E) {}\n-   |             ^ help: remove the `|`\n-\n-error: an or-pattern parameter must be wrapped in parenthesis\n-  --> $DIR/or-patterns-syntactic-fail.rs:19:15\n-   |\n-LL |     fn fun2(| A | B: E) {}\n-   |               ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:30:11\n-   |\n-LL |     let ( | A | B) = E::A;\n-   |           ^ help: remove the `|`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:31:11\n-   |\n-LL |     let ( | A | B,) = (E::B,);\n-   |           ^ help: remove the `|`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:32:11\n-   |\n-LL |     let [ | A | B ] = [E::A];\n-   |           ^ help: remove the `|`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:33:13\n-   |\n-LL |     let TS( | A | B );\n-   |             ^ help: remove the `|`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:34:17\n-   |\n-LL |     let NS { f: | A | B };\n-   |                 ^ help: remove the `|`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:36:11\n-   |\n-LL |     let ( || A | B) = E::A;\n-   |           ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:37:11\n-   |\n-LL |     let [ || A | B ] = [E::A];\n-   |           ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:38:13\n-   |\n-LL |     let TS( || A | B );\n-   |             ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:39:17\n-   |\n-LL |     let NS { f: || A | B };\n-   |                 ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n+   |             ^^^^^^^ help: wrap the pattern in parentheses: `(A | B)`\n \n error[E0369]: no implementation for `E | ()`\n   --> $DIR/or-patterns-syntactic-fail.rs:13:22\n@@ -88,17 +20,6 @@ LL |     let _ = |A | B: E| ();\n    |\n    = note: an implementation of `std::ops::BitOr` might be missing for `E`\n \n-error[E0308]: mismatched types\n-  --> $DIR/or-patterns-syntactic-fail.rs:41:36\n-   |\n-LL |     let recovery_witness: String = 0;\n-   |                           ------   ^\n-   |                           |        |\n-   |                           |        expected struct `String`, found integer\n-   |                           |        help: try using a conversion method: `0.to_string()`\n-   |                           expected due to this\n-\n-error: aborting due to 14 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0369.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "c8fac4faa2a660b525712e112fa048b9c9a8d563", "filename": "src/test/ui/or-patterns/remove-leading-vert.fixed", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -9,17 +9,17 @@ fn main() {}\n \n #[cfg(FALSE)]\n fn leading() {\n-    fn fun1(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n-    fn fun2(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n-    let (  A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let (  A): (E); //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let (  A,): (E,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let [  A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let [  A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let TS(  A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let TS(  A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    fn fun1( A: E) {} //~ ERROR an or-pattern parameter must be wrapped in parentheses\n+    fn fun2(  A: E) {} //~ ERROR unexpected `||` before function parameter\n+    let ( | A): E;\n+    let ( | A): (E); //~ ERROR unexpected token `||` in pattern\n+    let ( | A,): (E,);\n+    let [ | A ]: [E; 1];\n+    let [ | A ]: [E; 1]; //~ ERROR unexpected token `||` in pattern\n+    let TS( | A ): TS;\n+    let TS( | A ): TS; //~ ERROR unexpected token `||` in pattern\n+    let NS { f: | A }: NS;\n+    let NS { f: | A }: NS; //~ ERROR unexpected token `||` in pattern\n }\n \n #[cfg(FALSE)]\n@@ -29,12 +29,12 @@ fn trailing() {\n     let ( A | B  ): E; //~ ERROR a trailing `|` is not allowed in an or-pattern\n     let [ A | B  ]: [E; 1]; //~ ERROR a trailing `|` is not allowed in an or-pattern\n     let S { f: B  }; //~ ERROR a trailing `|` is not allowed in an or-pattern\n-    let ( A | B  ): E; //~ ERROR unexpected token `||` after pattern\n+    let ( A | B  ): E; //~ ERROR unexpected token `||` in pattern\n     //~^ ERROR a trailing `|` is not allowed in an or-pattern\n     match A {\n         A  => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n         A  => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n-        A | B  => {} //~ ERROR unexpected token `||` after pattern\n+        A | B  => {} //~ ERROR unexpected token `||` in pattern\n         //~^ ERROR a trailing `|` is not allowed in an or-pattern\n         | A | B  => {}\n         //~^ ERROR a trailing `|` is not allowed in an or-pattern"}, {"sha": "2cf6b27ab1aacd75ec75dca24d6dc81cae21ed96", "filename": "src/test/ui/or-patterns/remove-leading-vert.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -9,17 +9,17 @@ fn main() {}\n \n #[cfg(FALSE)]\n fn leading() {\n-    fn fun1( | A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n-    fn fun2( || A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n-    let ( | A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let ( || A): (E); //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let ( | A,): (E,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let [ | A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let [ || A ]: [E; 1]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let TS( | A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let TS( || A ): TS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let NS { f: | A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n-    let NS { f: || A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    fn fun1( | A: E) {} //~ ERROR an or-pattern parameter must be wrapped in parentheses\n+    fn fun2( || A: E) {} //~ ERROR unexpected `||` before function parameter\n+    let ( | A): E;\n+    let ( || A): (E); //~ ERROR unexpected token `||` in pattern\n+    let ( | A,): (E,);\n+    let [ | A ]: [E; 1];\n+    let [ || A ]: [E; 1]; //~ ERROR unexpected token `||` in pattern\n+    let TS( | A ): TS;\n+    let TS( || A ): TS; //~ ERROR unexpected token `||` in pattern\n+    let NS { f: | A }: NS;\n+    let NS { f: || A }: NS; //~ ERROR unexpected token `||` in pattern\n }\n \n #[cfg(FALSE)]\n@@ -29,12 +29,12 @@ fn trailing() {\n     let ( A | B | ): E; //~ ERROR a trailing `|` is not allowed in an or-pattern\n     let [ A | B | ]: [E; 1]; //~ ERROR a trailing `|` is not allowed in an or-pattern\n     let S { f: B | }; //~ ERROR a trailing `|` is not allowed in an or-pattern\n-    let ( A || B | ): E; //~ ERROR unexpected token `||` after pattern\n+    let ( A || B | ): E; //~ ERROR unexpected token `||` in pattern\n     //~^ ERROR a trailing `|` is not allowed in an or-pattern\n     match A {\n         A | => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n         A || => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n-        A || B | => {} //~ ERROR unexpected token `||` after pattern\n+        A || B | => {} //~ ERROR unexpected token `||` in pattern\n         //~^ ERROR a trailing `|` is not allowed in an or-pattern\n         | A | B | => {}\n         //~^ ERROR a trailing `|` is not allowed in an or-pattern"}, {"sha": "5c9efd44a187f6513bf3795a405f17e96b90045f", "filename": "src/test/ui/or-patterns/remove-leading-vert.stderr", "status": "modified", "additions": 17, "deletions": 55, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91e5384fc0d4b7babc360dca12c5a9d88332f13b/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr?ref=91e5384fc0d4b7babc360dca12c5a9d88332f13b", "patch": "@@ -1,78 +1,40 @@\n-error: a leading `|` is not allowed in a parameter pattern\n+error: an or-pattern parameter must be wrapped in parentheses\n   --> $DIR/remove-leading-vert.rs:12:14\n    |\n LL |     fn fun1( | A: E) {}\n-   |              ^ help: remove the `|`\n+   |              ^^^ help: remove the leading `|`: `A`\n \n-error: a leading `|` is not allowed in a parameter pattern\n+error: unexpected `||` before function parameter\n   --> $DIR/remove-leading-vert.rs:13:14\n    |\n LL |     fn fun2( || A: E) {}\n    |              ^^ help: remove the `||`\n    |\n    = note: alternatives in or-patterns are separated with `|`, not `||`\n \n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/remove-leading-vert.rs:14:11\n-   |\n-LL |     let ( | A): E;\n-   |           ^ help: remove the `|`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/remove-leading-vert.rs:15:11\n    |\n LL |     let ( || A): (E);\n-   |           ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/remove-leading-vert.rs:16:11\n-   |\n-LL |     let ( | A,): (E,);\n-   |           ^ help: remove the `|`\n+   |           ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/remove-leading-vert.rs:17:11\n-   |\n-LL |     let [ | A ]: [E; 1];\n-   |           ^ help: remove the `|`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/remove-leading-vert.rs:18:11\n    |\n LL |     let [ || A ]: [E; 1];\n-   |           ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/remove-leading-vert.rs:19:13\n-   |\n-LL |     let TS( | A ): TS;\n-   |             ^ help: remove the `|`\n+   |           ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n-error: a leading `|` is only allowed in a top-level pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/remove-leading-vert.rs:20:13\n    |\n LL |     let TS( || A ): TS;\n-   |             ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n-\n-error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/remove-leading-vert.rs:21:17\n-   |\n-LL |     let NS { f: | A }: NS;\n-   |                 ^ help: remove the `|`\n+   |             ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n-error: a leading `|` is only allowed in a top-level pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/remove-leading-vert.rs:22:17\n    |\n LL |     let NS { f: || A }: NS;\n-   |                 ^^ help: remove the `||`\n-   |\n-   = note: alternatives in or-patterns are separated with `|`, not `||`\n+   |                 ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n \n error: a trailing `|` is not allowed in an or-pattern\n   --> $DIR/remove-leading-vert.rs:27:13\n@@ -114,7 +76,7 @@ LL |     let S { f: B | };\n    |                |\n    |                while parsing this or-pattern starting here\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/remove-leading-vert.rs:32:13\n    |\n LL |     let ( A || B | ): E;\n@@ -148,7 +110,7 @@ LL |         A || => {}\n    |\n    = note: alternatives in or-patterns are separated with `|`, not `||`\n \n-error: unexpected token `||` after pattern\n+error: unexpected token `||` in pattern\n   --> $DIR/remove-leading-vert.rs:37:11\n    |\n LL |         A || B | => {}\n@@ -168,9 +130,9 @@ error: a trailing `|` is not allowed in an or-pattern\n   --> $DIR/remove-leading-vert.rs:39:17\n    |\n LL |         | A | B | => {}\n-   |           -     ^ help: remove the `|`\n-   |           |\n-   |           while parsing this or-pattern starting here\n+   |         -       ^ help: remove the `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n \n error: a trailing `|` is not allowed in an or-pattern\n   --> $DIR/remove-leading-vert.rs:43:11\n@@ -196,5 +158,5 @@ LL |     let a | ;\n    |         |\n    |         while parsing this or-pattern starting here\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 21 previous errors\n "}]}