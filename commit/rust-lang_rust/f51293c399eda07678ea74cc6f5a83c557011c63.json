{"sha": "f51293c399eda07678ea74cc6f5a83c557011c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MTI5M2MzOTllZGEwNzY3OGVhNzRjYzZmNWE4M2M1NTcwMTFjNjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T23:27:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T23:27:25Z"}, "message": "Rm extraneous infcx", "tree": {"sha": "c5013a04ff7f9f8149336e0645d02637b8abe554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5013a04ff7f9f8149336e0645d02637b8abe554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f51293c399eda07678ea74cc6f5a83c557011c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f51293c399eda07678ea74cc6f5a83c557011c63", "html_url": "https://github.com/rust-lang/rust/commit/f51293c399eda07678ea74cc6f5a83c557011c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f51293c399eda07678ea74cc6f5a83c557011c63/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d41f7d6ad08dccd47bf49632f6706e5ac2a185", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d41f7d6ad08dccd47bf49632f6706e5ac2a185", "html_url": "https://github.com/rust-lang/rust/commit/45d41f7d6ad08dccd47bf49632f6706e5ac2a185"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "6ef0853fdd737bea15f087f1052cf53907c9d913", "filename": "src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f51293c399eda07678ea74cc6f5a83c557011c63/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51293c399eda07678ea74cc6f5a83c557011c63/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=f51293c399eda07678ea74cc6f5a83c557011c63", "patch": "@@ -778,10 +778,8 @@ pub fn unsugar_range(expr: &Expr) -> Option<UnsugaredRange> {\n /// Convenience function to get the return type of a function or `None` if the function diverges.\n pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> Option<ty::Ty<'tcx>> {\n     let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, fn_item);\n-    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(parameter_env), ProjectionMode::Any);\n-\n-    let fn_sig = cx.tcx.node_id_to_type(fn_item).fn_sig().subst(infcx.tcx, &infcx.parameter_environment.free_substs);\n-    let fn_sig = infcx.tcx.liberate_late_bound_regions(infcx.parameter_environment.free_id_outlive, &fn_sig);\n+    let fn_sig = cx.tcx.node_id_to_type(fn_item).fn_sig().subst(cx.tcx, &parameter_env.free_substs);\n+    let fn_sig = cx.tcx.liberate_late_bound_regions(parameter_env.free_id_outlive, &fn_sig);\n     if let ty::FnConverging(ret_ty) = fn_sig.output {\n         Some(ret_ty)\n     } else {"}]}