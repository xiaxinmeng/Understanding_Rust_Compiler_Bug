{"sha": "a77a65c029fc2543ec753982ff8d6da2bdb1d866", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3N2E2NWMwMjlmYzI1NDNlYzc1Mzk4MmZmOGQ2ZGEyYmRiMWQ4NjY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-19T15:19:37Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-31T00:02:14Z"}, "message": "Print future breakage report", "tree": {"sha": "f770d94017afba901c18d3351dad2e9fab711d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f770d94017afba901c18d3351dad2e9fab711d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77a65c029fc2543ec753982ff8d6da2bdb1d866", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+cqYYACgkQtAh+UQ6Y\nsWTc7w/9HzP2Qi1/HgjP+/f7aKg2GI0cxjo+Huj2lrNr5za1ELrdGZ2HyIU2nSd1\nDdqD7h4N27Eg90cBnjx9wSrHFI6yoAk0q9WLIUzsMXtUFBeVliOoDPMWWMcxpGFZ\n3y0NMxYUZ+CIsuOd1O+0vMUMkHTolQK+VggNxSQmlTOfjRG4IYDrdduwhymMwmgA\nWMr2MQnvfZ9ClJB4dDHY0qEPQxolmC+HENKRCHHQbbrpxZEPkK0zpeInQbyOoba3\nEq68KER06E7Un4hsbzawXNw4e24u/9ijtU/Yjh8hrk3U8QHsphIYl8l6iaQ40KwI\nptcnssixtgXTmy4rVLRcxX1EQOY2R7y81EZ6my2yYl9V3s5CgK7S2A2ow5YomPW6\ny+ddtDqELcGWbWEArY5A2K80MprP/ans0QXGJeBPbLnGQzd0eiF20htywhloPxKm\nGdZIoqRdSEV9S5joylrfU9Zv+bzgst0yadKWk3QVLCcN9Wcq6qA5q4CX+e0Kd1CR\npqmJr65uzdjKD7DjRubWQf1+doXah3UBH4wvQ/nsugfdEnfkMyJwKPvfperfFQfJ\nikJ6X7rIVU/Y+iFSQ5RUIwG+7lkbkCP1PpCErQHWxlBBBswTbOO3PR2bVbOfaup9\n5YwM0qccTIc8sVadxVvGqefRZQdOMDzh4754MtXbNkliX/No2Eg=\n=bmAJ\n-----END PGP SIGNATURE-----", "payload": "tree f770d94017afba901c18d3351dad2e9fab711d47\nparent 6bdb4e32067a37b339d77f7788a772356d486f72\nauthor Aaron Hill <aa1ronham@gmail.com> 1603120777 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1604102534 -0400\n\nPrint future breakage report\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77a65c029fc2543ec753982ff8d6da2bdb1d866", "html_url": "https://github.com/rust-lang/rust/commit/a77a65c029fc2543ec753982ff8d6da2bdb1d866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77a65c029fc2543ec753982ff8d6da2bdb1d866/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bdb4e32067a37b339d77f7788a772356d486f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdb4e32067a37b339d77f7788a772356d486f72", "html_url": "https://github.com/rust-lang/rust/commit/6bdb4e32067a37b339d77f7788a772356d486f72"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "1171a598d8bd86cdaf1eb82789c31170f562f4b0", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a77a65c029fc2543ec753982ff8d6da2bdb1d866/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77a65c029fc2543ec753982ff8d6da2bdb1d866/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=a77a65c029fc2543ec753982ff8d6da2bdb1d866", "patch": "@@ -86,6 +86,13 @@ pub fn extract_rendered(output: &str) -> String {\n             if line.starts_with('{') {\n                 if let Ok(diagnostic) = serde_json::from_str::<Diagnostic>(line) {\n                     diagnostic.rendered\n+                } else if let Ok(report) = serde_json::from_str::<FutureIncompatReport>(line) {\n+                    Some(format!(\"Future incompatibility report: {}\",\n+                            report.future_incompat_report.into_iter().map(|item| {\n+                                format!(\"Future breakage date: {}, diagnostic:\\n{}\",\n+                                        item.future_breakage_date.unwrap_or_else(|| \"None\".to_string()),\n+                                        item.diagnostic.rendered.unwrap_or_else(|| \"Not rendered\".to_string()))\n+                            }).collect::<String>()))\n                 } else if serde_json::from_str::<ArtifactNotification>(line).is_ok() {\n                     // Ignore the notification.\n                     None\n@@ -105,14 +112,10 @@ pub fn extract_rendered(output: &str) -> String {\n }\n \n pub fn parse_output(file_name: &str, output: &str, proc_res: &ProcRes) -> Vec<Error> {\n-    let lines = output.lines();\n-    let last_line = lines.next_back();\n-    lines.flat_map(|line| parse_line(file_name, line, output, proc_res, false)).chain(\n-        last_line.into_iter().flat_map(|line| parse_line(file_name, line, output, proc_res, true))\n-    ).collect()\n+    output.lines().flat_map(|line| parse_line(file_name, line, output, proc_res)).collect()\n }\n \n-fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes, last_line: bool) -> Vec<Error> {\n+fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes) -> Vec<Error> {\n     // The compiler sometimes intermingles non-JSON stuff into the\n     // output.  This hack just skips over such lines. Yuck.\n     if line.starts_with('{') {"}]}