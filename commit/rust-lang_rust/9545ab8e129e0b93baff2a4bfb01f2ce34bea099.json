{"sha": "9545ab8e129e0b93baff2a4bfb01f2ce34bea099", "node_id": "C_kwDOAAsO6NoAKDk1NDVhYjhlMTI5ZTBiOTNiYWZmMmE0YmZiMDFmMmNlMzRiZWEwOTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-22T19:08:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T19:08:01Z"}, "message": "Rollup merge of #109392 - cbeuw:composite-ret, r=JakobDegen\n\nCustom MIR: Allow optional RET type annotation\n\nThis currently doesn't compile because the type of `RET` is inferred, which fails if RET is a composite type and fields are initialised separately.\n```rust\n#![feature(custom_mir, core_intrinsics)]\nextern crate core;\nuse core::intrinsics::mir::*;\n#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\nfn fn0() -> (i32, bool) {\n    mir! ({\n        RET.0 = 0;\n        RET.1 = true;\n        Return()\n    })\n}\n```\n```\nerror[E0282]: type annotations needed\n --> src/lib.rs:8:9\n  |\n8 |         RET.0 = 0;\n  |         ^^^ cannot infer type\n\nFor more information about this error, try `rustc --explain E0282`.\n```\n\nThis PR allows the user to manually specify the return type with `type RET = ...;` if required:\n\n```rust\n#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\nfn fn0() -> (i32, bool) {\n    mir! (\n        type RET = (i32, bool);\n        {\n            RET.0 = 0;\n            RET.1 = true;\n            Return()\n        }\n    )\n}\n```\n\nThe syntax is not optimal, I'm happy to see other suggestions. Ideally I wanted it to be a normal type annotation like `let RET: ...;`, but this runs into the multiple parsing options error during macro expansion, as it can be parsed as a normal `let` declaration as well.\n\nr? ```@oli-obk``` or ```@tmiasko``` or ```@JakobDegen```", "tree": {"sha": "c70fa7e8cd332c271842939b3fac1ae219d71d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c70fa7e8cd332c271842939b3fac1ae219d71d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9545ab8e129e0b93baff2a4bfb01f2ce34bea099", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG1IRCRBK7hj4Ov3rIwAA/NwIAGw4eNaqU6ayyhpgWyL+owHr\nzeshKlF5XCnAePwhHZThMEYCiJ3U8nPnzo1zNo8RaeYQU14hrsw+CvwUdqMEWVX1\nG1Ip2+W1+PB8UhIzPgw32YIPlsjwqnA4redUpwQL3hV1eeyG0z/7uCur3wP6hsvk\nDCH/A3Sq6n/nf/ANLe+wdxlLjrk9zagCLAE/vT/CWliqFlGGhUdvDumMyw/53G50\nCHPVaaawuDKgVedidUkWbawwEZ06cQBfdhW0Jqlg35yKXZvcueuyDPWTaKlwwDkc\nThJ8SZLRg+JNUjIDKAkWN9uhwwAzCsr55CGZvSb4EMeg+EtN2robN7Cav1c6OUQ=\n=N0eU\n-----END PGP SIGNATURE-----\n", "payload": "tree c70fa7e8cd332c271842939b3fac1ae219d71d64\nparent 56959e5fe33d7e6846aaef544fca8ab548ae733e\nparent 9dc275bb54ab088ac85a08dc807984afd57a78c7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679512081 +0100\ncommitter GitHub <noreply@github.com> 1679512081 +0100\n\nRollup merge of #109392 - cbeuw:composite-ret, r=JakobDegen\n\nCustom MIR: Allow optional RET type annotation\n\nThis currently doesn't compile because the type of `RET` is inferred, which fails if RET is a composite type and fields are initialised separately.\n```rust\n#![feature(custom_mir, core_intrinsics)]\nextern crate core;\nuse core::intrinsics::mir::*;\n#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\nfn fn0() -> (i32, bool) {\n    mir! ({\n        RET.0 = 0;\n        RET.1 = true;\n        Return()\n    })\n}\n```\n```\nerror[E0282]: type annotations needed\n --> src/lib.rs:8:9\n  |\n8 |         RET.0 = 0;\n  |         ^^^ cannot infer type\n\nFor more information about this error, try `rustc --explain E0282`.\n```\n\nThis PR allows the user to manually specify the return type with `type RET = ...;` if required:\n\n```rust\n#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\nfn fn0() -> (i32, bool) {\n    mir! (\n        type RET = (i32, bool);\n        {\n            RET.0 = 0;\n            RET.1 = true;\n            Return()\n        }\n    )\n}\n```\n\nThe syntax is not optimal, I'm happy to see other suggestions. Ideally I wanted it to be a normal type annotation like `let RET: ...;`, but this runs into the multiple parsing options error during macro expansion, as it can be parsed as a normal `let` declaration as well.\n\nr? ```@oli-obk``` or ```@tmiasko``` or ```@JakobDegen```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9545ab8e129e0b93baff2a4bfb01f2ce34bea099", "html_url": "https://github.com/rust-lang/rust/commit/9545ab8e129e0b93baff2a4bfb01f2ce34bea099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9545ab8e129e0b93baff2a4bfb01f2ce34bea099/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56959e5fe33d7e6846aaef544fca8ab548ae733e", "url": "https://api.github.com/repos/rust-lang/rust/commits/56959e5fe33d7e6846aaef544fca8ab548ae733e", "html_url": "https://github.com/rust-lang/rust/commit/56959e5fe33d7e6846aaef544fca8ab548ae733e"}, {"sha": "9dc275bb54ab088ac85a08dc807984afd57a78c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc275bb54ab088ac85a08dc807984afd57a78c7", "html_url": "https://github.com/rust-lang/rust/commit/9dc275bb54ab088ac85a08dc807984afd57a78c7"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "3061f76df04d0e9a1429a77a2559b0869477a81c", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9545ab8e129e0b93baff2a4bfb01f2ce34bea099/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9545ab8e129e0b93baff2a4bfb01f2ce34bea099/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=9545ab8e129e0b93baff2a4bfb01f2ce34bea099", "patch": "@@ -49,6 +49,8 @@\n //!\n //! The input to the [`mir!`] macro is:\n //!\n+//!  - An optional return type annotation in the form of `type RET = ...;`. This may be required\n+//!    if the compiler cannot infer the type of RET.\n //!  - A possibly empty list of local declarations. Locals can also be declared inline on\n //!    assignments via `let`. Type inference generally works. Shadowing does not.\n //!  - A list of basic blocks. The first of these is the start block and is where execution begins.\n@@ -124,6 +126,18 @@\n //!         }\n //!     )\n //! }\n+//!\n+//! #[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+//! fn annotated_return_type() -> (i32, bool) {\n+//!     mir!(\n+//!         type RET = (i32, bool);\n+//!         {\n+//!             RET.0 = 1;\n+//!             RET.1 = true;\n+//!             Return()\n+//!         }\n+//!     )\n+//! }\n //! ```\n //!\n //! We can also set off compilation failures that happen in sufficiently late stages of the\n@@ -342,6 +356,7 @@ define!(\n #[rustc_macro_transparency = \"transparent\"]\n pub macro mir {\n     (\n+        $(type RET = $ret_ty:ty ;)?\n         $(let $local_decl:ident $(: $local_decl_ty:ty)? ;)*\n \n         {\n@@ -362,7 +377,7 @@ pub macro mir {\n         {\n             // Now all locals\n             #[allow(non_snake_case)]\n-            let RET;\n+            let RET $(: $ret_ty)?;\n             $(\n                 let $local_decl $(: $local_decl_ty)? ;\n             )*"}, {"sha": "701d6b1ab71312feac4e39be94f66c80d03d4cb3", "filename": "tests/mir-opt/building/custom/composite_return.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9545ab8e129e0b93baff2a4bfb01f2ce34bea099/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9545ab8e129e0b93baff2a4bfb01f2ce34bea099/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.rs?ref=9545ab8e129e0b93baff2a4bfb01f2ce34bea099", "patch": "@@ -0,0 +1,21 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+// EMIT_MIR composite_return.tuple.built.after.mir\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+fn tuple() -> (i32, bool) {\n+    mir!(\n+        type RET = (i32, bool);\n+        {\n+            RET.0 = 1;\n+            RET.1 = true;\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(tuple(), (1, true));\n+}"}, {"sha": "d159c1a655eb574e712cc7dc61f98a517d52de9f", "filename": "tests/mir-opt/building/custom/composite_return.tuple.built.after.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9545ab8e129e0b93baff2a4bfb01f2ce34bea099/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9545ab8e129e0b93baff2a4bfb01f2ce34bea099/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fcomposite_return.tuple.built.after.mir?ref=9545ab8e129e0b93baff2a4bfb01f2ce34bea099", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `tuple` after built\n+\n+fn tuple() -> (i32, bool) {\n+    let mut _0: (i32, bool);             // return place in scope 0 at $DIR/composite_return.rs:+0:15: +0:26\n+\n+    bb0: {\n+        (_0.0: i32) = const 1_i32;       // scope 0 at $DIR/composite_return.rs:+4:13: +4:22\n+        (_0.1: bool) = const true;       // scope 0 at $DIR/composite_return.rs:+5:13: +5:25\n+        return;                          // scope 0 at $DIR/composite_return.rs:+6:13: +6:21\n+    }\n+}"}]}