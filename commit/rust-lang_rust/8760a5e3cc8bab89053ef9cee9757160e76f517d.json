{"sha": "8760a5e3cc8bab89053ef9cee9757160e76f517d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjBhNWUzY2M4YmFiODkwNTNlZjljZWU5NzU3MTYwZTc2ZjUxN2Q=", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2016-09-07T15:09:24Z"}, "committer": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2016-09-07T15:14:10Z"}, "message": "Follow target ABI sign-/zero-extension rules for enum types\n\nWhile attempting to port Rust to s390x, I ran into an ABI violation\n(that caused rust_eh_personality to be miscompiled, breaking unwinding).\nThe problem is that this function returns an enum type, which is\nsupposed to be sign-extended according to the s390x ABI.  However,\ncommon code would ignore target sign-/zero-extension rules for any\ntypes that do not satisfy is_integral(), which includes enums.\n\nFor the general case of Rust enum types, which map to structure types\nwith a discriminant, that seems correct.  However, in the special case\nof simple enums that map directly to C enum types (i.e. LLVM integers),\nthis is incorrect; we must follow the target extension rules for those.\n\nSigned-off-by: Ulrich Weigand <ulrich.weigand@de.ibm.com>", "tree": {"sha": "a26e08951bbcd997d1d34b2555b90265c81200dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a26e08951bbcd997d1d34b2555b90265c81200dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8760a5e3cc8bab89053ef9cee9757160e76f517d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8760a5e3cc8bab89053ef9cee9757160e76f517d", "html_url": "https://github.com/rust-lang/rust/commit/8760a5e3cc8bab89053ef9cee9757160e76f517d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8760a5e3cc8bab89053ef9cee9757160e76f517d/comments", "author": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2819eca69cc053afaf975f4702abbde83c6b7cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2819eca69cc053afaf975f4702abbde83c6b7cdc", "html_url": "https://github.com/rust-lang/rust/commit/2819eca69cc053afaf975f4702abbde83c6b7cdc"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "ab0fd0c92edd40616c440d44b8b5c24b96ded5e7", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8760a5e3cc8bab89053ef9cee9757160e76f517d/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8760a5e3cc8bab89053ef9cee9757160e76f517d/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=8760a5e3cc8bab89053ef9cee9757160e76f517d", "patch": "@@ -26,6 +26,7 @@ use cabi_asmjs;\n use machine::{llalign_of_min, llsize_of, llsize_of_real, llsize_of_store};\n use type_::Type;\n use type_of;\n+use adt;\n \n use rustc::hir;\n use rustc::ty::{self, Ty};\n@@ -317,6 +318,14 @@ impl FnType {\n                 if ty.is_integral() {\n                     arg.signedness = Some(ty.is_signed());\n                 }\n+                // Rust enum types that map onto C enums (LLVM integers) also\n+                // need to follow the target ABI zero-/sign-extension rules.\n+                if let ty::TyEnum(..) = ty.sty {\n+                    if arg.ty.kind() == llvm::Integer {\n+                        let repr = adt::represent_type(ccx, ty);\n+                        arg.signedness = Some(adt::is_discr_signed(&repr));\n+                    }\n+                }\n                 if llsize_of_real(ccx, arg.ty) == 0 {\n                     // For some forsaken reason, x86_64-pc-windows-gnu\n                     // doesn't ignore zero-sized struct arguments."}]}