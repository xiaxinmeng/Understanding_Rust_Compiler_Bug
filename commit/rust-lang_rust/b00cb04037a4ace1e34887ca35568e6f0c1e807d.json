{"sha": "b00cb04037a4ace1e34887ca35568e6f0c1e807d", "node_id": "C_kwDOAAsO6NoAKGIwMGNiMDQwMzdhNGFjZTFlMzQ4ODdjYTM1NTY4ZTZmMGMxZTgwN2Q", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-14T20:01:18Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-14T20:01:18Z"}, "message": "Sort target features alphabetically", "tree": {"sha": "f0de85ad606c250f34737305ea7d391223f5e20a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0de85ad606c250f34737305ea7d391223f5e20a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b00cb04037a4ace1e34887ca35568e6f0c1e807d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgWnoWpkMvJlSFxMiZfPmQ9OBZ0B\nzicY1KArCIU18CM8IAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQMRyXIMOBD+Q/B/9pcs/giIZ8MUIzjZYqkHgURaljKHGLkzn3yHDto4EmcZUUtPBdO\nwOFVqjMRGM6DnnUNDopg8=\n-----END SSH SIGNATURE-----", "payload": "tree f0de85ad606c250f34737305ea7d391223f5e20a\nparent 1b8012fa1019dce7ecc66980a6bd810325b9c2da\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1665777678 +0200\ncommitter nils <48135649+Nilstrieb@users.noreply.github.com> 1665777678 +0200\n\nSort target features alphabetically\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b00cb04037a4ace1e34887ca35568e6f0c1e807d", "html_url": "https://github.com/rust-lang/rust/commit/b00cb04037a4ace1e34887ca35568e6f0c1e807d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b00cb04037a4ace1e34887ca35568e6f0c1e807d/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8012fa1019dce7ecc66980a6bd810325b9c2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8012fa1019dce7ecc66980a6bd810325b9c2da", "html_url": "https://github.com/rust-lang/rust/commit/1b8012fa1019dce7ecc66980a6bd810325b9c2da"}], "stats": {"total": 294, "additions": 160, "deletions": 134}, "files": [{"sha": "83407ee8f9d32e891d6584d23512115004c8f75a", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 112, "deletions": 96, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/b00cb04037a4ace1e34887ca35568e6f0c1e807d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00cb04037a4ace1e34887ca35568e6f0c1e807d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=b00cb04037a4ace1e34887ca35568e6f0c1e807d", "patch": "@@ -13,17 +13,25 @@ pub const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n // if it doesn't, to_llvm_feature in llvm_util in rustc_codegen_llvm needs to be adapted\n \n const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"aclass\", Some(sym::arm_target_feature)),\n-    (\"mclass\", Some(sym::arm_target_feature)),\n-    (\"rclass\", Some(sym::arm_target_feature)),\n-    (\"dsp\", Some(sym::arm_target_feature)),\n-    (\"neon\", Some(sym::arm_target_feature)),\n+    (\"aes\", Some(sym::arm_target_feature)),\n     (\"crc\", Some(sym::arm_target_feature)),\n     (\"crypto\", Some(sym::arm_target_feature)),\n-    (\"aes\", Some(sym::arm_target_feature)),\n-    (\"sha2\", Some(sym::arm_target_feature)),\n-    (\"i8mm\", Some(sym::arm_target_feature)),\n+    (\"d32\", Some(sym::arm_target_feature)),\n     (\"dotprod\", Some(sym::arm_target_feature)),\n+    (\"dsp\", Some(sym::arm_target_feature)),\n+    (\"fp-armv8\", Some(sym::arm_target_feature)),\n+    (\"i8mm\", Some(sym::arm_target_feature)),\n+    (\"mclass\", Some(sym::arm_target_feature)),\n+    (\"neon\", Some(sym::arm_target_feature)),\n+    (\"rclass\", Some(sym::arm_target_feature)),\n+    (\"sha2\", Some(sym::arm_target_feature)),\n+    // This is needed for inline assembly, but shouldn't be stabilized as-is\n+    // since it should be enabled per-function using #[instruction_set], not\n+    // #[target_feature].\n+    (\"thumb-mode\", Some(sym::arm_target_feature)),\n+    (\"thumb2\", Some(sym::arm_target_feature)),\n     (\"v5te\", Some(sym::arm_target_feature)),\n     (\"v6\", Some(sym::arm_target_feature)),\n     (\"v6k\", Some(sym::arm_target_feature)),\n@@ -33,118 +41,115 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"vfp2\", Some(sym::arm_target_feature)),\n     (\"vfp3\", Some(sym::arm_target_feature)),\n     (\"vfp4\", Some(sym::arm_target_feature)),\n-    (\"fp-armv8\", Some(sym::arm_target_feature)),\n-    // This is needed for inline assembly, but shouldn't be stabilized as-is\n-    // since it should be enabled per-function using #[instruction_set], not\n-    // #[target_feature].\n-    (\"thumb-mode\", Some(sym::arm_target_feature)),\n-    (\"thumb2\", Some(sym::arm_target_feature)),\n-    (\"d32\", Some(sym::arm_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    // FEAT_AdvSimd & FEAT_FP\n-    (\"neon\", None),\n-    // FEAT_FP16\n-    (\"fp16\", None),\n-    // FEAT_SVE\n-    (\"sve\", None),\n+    // tidy-alphabetical-start\n+    // FEAT_AES\n+    (\"aes\", None),\n+    // FEAT_BF16\n+    (\"bf16\", None),\n+    // FEAT_BTI\n+    (\"bti\", None),\n     // FEAT_CRC\n     (\"crc\", None),\n-    // FEAT_RAS\n-    (\"ras\", None),\n-    // FEAT_LSE\n-    (\"lse\", None),\n-    // FEAT_RDM\n-    (\"rdm\", None),\n-    // FEAT_RCPC\n-    (\"rcpc\", None),\n-    // FEAT_RCPC2\n-    (\"rcpc2\", None),\n-    // FEAT_DotProd\n-    (\"dotprod\", None),\n-    // FEAT_TME\n-    (\"tme\", None),\n-    // FEAT_FHM\n-    (\"fhm\", None),\n     // FEAT_DIT\n     (\"dit\", None),\n-    // FEAT_FLAGM\n-    (\"flagm\", None),\n-    // FEAT_SSBS\n-    (\"ssbs\", None),\n-    // FEAT_SB\n-    (\"sb\", None),\n-    // FEAT_PAUTH (address authentication)\n-    (\"paca\", None),\n-    // FEAT_PAUTH (generic authentication)\n-    (\"pacg\", None),\n+    // FEAT_DotProd\n+    (\"dotprod\", None),\n     // FEAT_DPB\n     (\"dpb\", None),\n     // FEAT_DPB2\n     (\"dpb2\", None),\n-    // FEAT_SVE2\n-    (\"sve2\", None),\n-    // FEAT_SVE2_AES\n-    (\"sve2-aes\", None),\n-    // FEAT_SVE2_SM4\n-    (\"sve2-sm4\", None),\n-    // FEAT_SVE2_SHA3\n-    (\"sve2-sha3\", None),\n-    // FEAT_SVE2_BitPerm\n-    (\"sve2-bitperm\", None),\n-    // FEAT_FRINTTS\n-    (\"frintts\", None),\n-    // FEAT_I8MM\n-    (\"i8mm\", None),\n     // FEAT_F32MM\n     (\"f32mm\", None),\n     // FEAT_F64MM\n     (\"f64mm\", None),\n-    // FEAT_BF16\n-    (\"bf16\", None),\n-    // FEAT_RAND\n-    (\"rand\", None),\n-    // FEAT_BTI\n-    (\"bti\", None),\n-    // FEAT_MTE\n-    (\"mte\", None),\n-    // FEAT_JSCVT\n-    (\"jsconv\", None),\n     // FEAT_FCMA\n     (\"fcma\", None),\n-    // FEAT_AES\n-    (\"aes\", None),\n+    // FEAT_FHM\n+    (\"fhm\", None),\n+    // FEAT_FLAGM\n+    (\"flagm\", None),\n+    // FEAT_FP16\n+    (\"fp16\", None),\n+    // FEAT_FRINTTS\n+    (\"frintts\", None),\n+    // FEAT_I8MM\n+    (\"i8mm\", None),\n+    // FEAT_JSCVT\n+    (\"jsconv\", None),\n+    // FEAT_LOR\n+    (\"lor\", None),\n+    // FEAT_LSE\n+    (\"lse\", None),\n+    // FEAT_MTE\n+    (\"mte\", None),\n+    // FEAT_AdvSimd & FEAT_FP\n+    (\"neon\", None),\n+    // FEAT_PAUTH (address authentication)\n+    (\"paca\", None),\n+    // FEAT_PAUTH (generic authentication)\n+    (\"pacg\", None),\n+    // FEAT_PAN\n+    (\"pan\", None),\n+    // FEAT_PMUv3\n+    (\"pmuv3\", None),\n+    // FEAT_RAND\n+    (\"rand\", None),\n+    // FEAT_RAS\n+    (\"ras\", None),\n+    // FEAT_RCPC\n+    (\"rcpc\", None),\n+    // FEAT_RCPC2\n+    (\"rcpc2\", None),\n+    // FEAT_RDM\n+    (\"rdm\", None),\n+    // FEAT_SB\n+    (\"sb\", None),\n     // FEAT_SHA1 & FEAT_SHA256\n     (\"sha2\", None),\n     // FEAT_SHA512 & FEAT_SHA3\n     (\"sha3\", None),\n     // FEAT_SM3 & FEAT_SM4\n     (\"sm4\", None),\n-    // FEAT_PAN\n-    (\"pan\", None),\n-    // FEAT_LOR\n-    (\"lor\", None),\n-    // FEAT_VHE\n-    (\"vh\", None),\n-    // FEAT_PMUv3\n-    (\"pmuv3\", None),\n     // FEAT_SPE\n     (\"spe\", None),\n+    // FEAT_SSBS\n+    (\"ssbs\", None),\n+    // FEAT_SVE\n+    (\"sve\", None),\n+    // FEAT_SVE2\n+    (\"sve2\", None),\n+    // FEAT_SVE2_AES\n+    (\"sve2-aes\", None),\n+    // FEAT_SVE2_BitPerm\n+    (\"sve2-bitperm\", None),\n+    // FEAT_SVE2_SHA3\n+    (\"sve2-sha3\", None),\n+    // FEAT_SVE2_SM4\n+    (\"sve2-sm4\", None),\n+    // FEAT_TME\n+    (\"tme\", None),\n     (\"v8.1a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.2a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.3a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.4a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.5a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.6a\", Some(sym::aarch64_ver_target_feature)),\n     (\"v8.7a\", Some(sym::aarch64_ver_target_feature)),\n+    // FEAT_VHE\n+    (\"vh\", None),\n+    // tidy-alphabetical-end\n ];\n \n const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n     &[\"paca\", \"pacg\"], // Together these represent `pauth` in LLVM\n ];\n \n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"adx\", None),\n     (\"aes\", None),\n     (\"avx\", None),\n@@ -194,69 +199,80 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"xsavec\", None),\n     (\"xsaveopt\", None),\n     (\"xsaves\", None),\n+    // tidy-alphabetical-end\n ];\n \n const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"hvx\", Some(sym::hexagon_target_feature)),\n     (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power8-vector\", Some(sym::powerpc_target_feature)),\n+    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n     (\"power9-vector\", Some(sym::powerpc_target_feature)),\n     (\"vsx\", Some(sym::powerpc_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n+    // tidy-alphabetical-start\n     (\"fp64\", Some(sym::mips_target_feature)),\n     (\"msa\", Some(sym::mips_target_feature)),\n     (\"virt\", Some(sym::mips_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"m\", Some(sym::riscv_target_feature)),\n+    // tidy-alphabetical-start\n     (\"a\", Some(sym::riscv_target_feature)),\n     (\"c\", Some(sym::riscv_target_feature)),\n-    (\"f\", Some(sym::riscv_target_feature)),\n     (\"d\", Some(sym::riscv_target_feature)),\n     (\"e\", Some(sym::riscv_target_feature)),\n+    (\"f\", Some(sym::riscv_target_feature)),\n+    (\"m\", Some(sym::riscv_target_feature)),\n     (\"v\", Some(sym::riscv_target_feature)),\n-    (\"zfinx\", Some(sym::riscv_target_feature)),\n-    (\"zdinx\", Some(sym::riscv_target_feature)),\n-    (\"zhinx\", Some(sym::riscv_target_feature)),\n-    (\"zhinxmin\", Some(sym::riscv_target_feature)),\n-    (\"zfh\", Some(sym::riscv_target_feature)),\n-    (\"zfhmin\", Some(sym::riscv_target_feature)),\n     (\"zba\", Some(sym::riscv_target_feature)),\n     (\"zbb\", Some(sym::riscv_target_feature)),\n     (\"zbc\", Some(sym::riscv_target_feature)),\n-    (\"zbs\", Some(sym::riscv_target_feature)),\n     (\"zbkb\", Some(sym::riscv_target_feature)),\n     (\"zbkc\", Some(sym::riscv_target_feature)),\n     (\"zbkx\", Some(sym::riscv_target_feature)),\n+    (\"zbs\", Some(sym::riscv_target_feature)),\n+    (\"zdinx\", Some(sym::riscv_target_feature)),\n+    (\"zfh\", Some(sym::riscv_target_feature)),\n+    (\"zfhmin\", Some(sym::riscv_target_feature)),\n+    (\"zfinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinx\", Some(sym::riscv_target_feature)),\n+    (\"zhinxmin\", Some(sym::riscv_target_feature)),\n+    (\"zk\", Some(sym::riscv_target_feature)),\n+    (\"zkn\", Some(sym::riscv_target_feature)),\n     (\"zknd\", Some(sym::riscv_target_feature)),\n     (\"zkne\", Some(sym::riscv_target_feature)),\n     (\"zknh\", Some(sym::riscv_target_feature)),\n-    (\"zksed\", Some(sym::riscv_target_feature)),\n-    (\"zksh\", Some(sym::riscv_target_feature)),\n     (\"zkr\", Some(sym::riscv_target_feature)),\n-    (\"zkn\", Some(sym::riscv_target_feature)),\n     (\"zks\", Some(sym::riscv_target_feature)),\n-    (\"zk\", Some(sym::riscv_target_feature)),\n+    (\"zksed\", Some(sym::riscv_target_feature)),\n+    (\"zksh\", Some(sym::riscv_target_feature)),\n     (\"zkt\", Some(sym::riscv_target_feature)),\n+    // tidy-alphabetical-end\n ];\n \n const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"simd128\", None),\n+    // tidy-alphabetical-start\n     (\"atomics\", Some(sym::wasm_target_feature)),\n-    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n     (\"bulk-memory\", Some(sym::wasm_target_feature)),\n     (\"mutable-globals\", Some(sym::wasm_target_feature)),\n+    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n     (\"reference-types\", Some(sym::wasm_target_feature)),\n     (\"sign-ext\", Some(sym::wasm_target_feature)),\n+    (\"simd128\", None),\n+    // tidy-alphabetical-end\n ];\n \n const BPF_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[(\"alu32\", Some(sym::bpf_target_feature))];"}, {"sha": "02c076f1bb5f94c0b25f93784b904dfec77bba9c", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/b00cb04037a4ace1e34887ca35568e6f0c1e807d/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00cb04037a4ace1e34887ca35568e6f0c1e807d/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=b00cb04037a4ace1e34887ca35568e6f0c1e807d", "patch": "@@ -14,77 +14,85 @@\n #[cfg(all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")))]\n fn arm_linux() {\n     use std::arch::is_arm_feature_detected;\n+    // tidy-alphabetical-start\n+    println!(\"aes: {}\", is_arm_feature_detected!(\"aes\"));\n+    println!(\"crc: {}\", is_arm_feature_detected!(\"crc\"));\n+    println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n     println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n     println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n-    println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n-    println!(\"crc: {}\", is_arm_feature_detected!(\"crc\"));\n-    println!(\"aes: {}\", is_arm_feature_detected!(\"aes\"));\n     println!(\"sha2: {}\", is_arm_feature_detected!(\"sha2\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")))]\n fn aarch64_linux() {\n     use std::arch::is_aarch64_feature_detected;\n-    println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n+    // tidy-alphabetical-start\n+    println!(\"aes: {}\", is_aarch64_feature_detected!(\"aes\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n-    println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n-    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n-    println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n+    println!(\"bf16: {}\", is_aarch64_feature_detected!(\"bf16\"));\n+    println!(\"bti: {}\", is_aarch64_feature_detected!(\"bti\"));\n     println!(\"crc: {}\", is_aarch64_feature_detected!(\"crc\"));\n-    println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n-    println!(\"lse2: {}\", is_aarch64_feature_detected!(\"lse2\"));\n-    println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n-    println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n-    println!(\"rcpc2: {}\", is_aarch64_feature_detected!(\"rcpc2\"));\n+    println!(\"dit: {}\", is_aarch64_feature_detected!(\"dit\"));\n     println!(\"dotprod: {}\", is_aarch64_feature_detected!(\"dotprod\"));\n-    println!(\"tme: {}\", is_aarch64_feature_detected!(\"tme\"));\n+    println!(\"dpb2: {}\", is_aarch64_feature_detected!(\"dpb2\"));\n+    println!(\"dpb: {}\", is_aarch64_feature_detected!(\"dpb\"));\n+    println!(\"f32mm: {}\", is_aarch64_feature_detected!(\"f32mm\"));\n+    println!(\"f64mm: {}\", is_aarch64_feature_detected!(\"f64mm\"));\n+    println!(\"fcma: {}\", is_aarch64_feature_detected!(\"fcma\"));\n     println!(\"fhm: {}\", is_aarch64_feature_detected!(\"fhm\"));\n-    println!(\"dit: {}\", is_aarch64_feature_detected!(\"dit\"));\n     println!(\"flagm: {}\", is_aarch64_feature_detected!(\"flagm\"));\n-    println!(\"ssbs: {}\", is_aarch64_feature_detected!(\"ssbs\"));\n-    println!(\"sb: {}\", is_aarch64_feature_detected!(\"sb\"));\n-    println!(\"paca: {}\", is_aarch64_feature_detected!(\"paca\"));\n-    println!(\"pacg: {}\", is_aarch64_feature_detected!(\"pacg\"));\n-    println!(\"dpb: {}\", is_aarch64_feature_detected!(\"dpb\"));\n-    println!(\"dpb2: {}\", is_aarch64_feature_detected!(\"dpb2\"));\n-    println!(\"sve2: {}\", is_aarch64_feature_detected!(\"sve2\"));\n-    println!(\"sve2-aes: {}\", is_aarch64_feature_detected!(\"sve2-aes\"));\n-    println!(\"sve2-sm4: {}\", is_aarch64_feature_detected!(\"sve2-sm4\"));\n-    println!(\"sve2-sha3: {}\", is_aarch64_feature_detected!(\"sve2-sha3\"));\n-    println!(\"sve2-bitperm: {}\", is_aarch64_feature_detected!(\"sve2-bitperm\"));\n+    println!(\"fp16: {}\", is_aarch64_feature_detected!(\"fp16\"));\n     println!(\"frintts: {}\", is_aarch64_feature_detected!(\"frintts\"));\n     println!(\"i8mm: {}\", is_aarch64_feature_detected!(\"i8mm\"));\n-    println!(\"f32mm: {}\", is_aarch64_feature_detected!(\"f32mm\"));\n-    println!(\"f64mm: {}\", is_aarch64_feature_detected!(\"f64mm\"));\n-    println!(\"bf16: {}\", is_aarch64_feature_detected!(\"bf16\"));\n-    println!(\"rand: {}\", is_aarch64_feature_detected!(\"rand\"));\n-    println!(\"bti: {}\", is_aarch64_feature_detected!(\"bti\"));\n-    println!(\"mte: {}\", is_aarch64_feature_detected!(\"mte\"));\n     println!(\"jsconv: {}\", is_aarch64_feature_detected!(\"jsconv\"));\n-    println!(\"fcma: {}\", is_aarch64_feature_detected!(\"fcma\"));\n-    println!(\"aes: {}\", is_aarch64_feature_detected!(\"aes\"));\n+    println!(\"lse2: {}\", is_aarch64_feature_detected!(\"lse2\"));\n+    println!(\"lse: {}\", is_aarch64_feature_detected!(\"lse\"));\n+    println!(\"mte: {}\", is_aarch64_feature_detected!(\"mte\"));\n+    println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n+    println!(\"paca: {}\", is_aarch64_feature_detected!(\"paca\"));\n+    println!(\"pacg: {}\", is_aarch64_feature_detected!(\"pacg\"));\n+    println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n+    println!(\"rand: {}\", is_aarch64_feature_detected!(\"rand\"));\n+    println!(\"rcpc2: {}\", is_aarch64_feature_detected!(\"rcpc2\"));\n+    println!(\"rcpc: {}\", is_aarch64_feature_detected!(\"rcpc\"));\n+    println!(\"rdm: {}\", is_aarch64_feature_detected!(\"rdm\"));\n+    println!(\"sb: {}\", is_aarch64_feature_detected!(\"sb\"));\n     println!(\"sha2: {}\", is_aarch64_feature_detected!(\"sha2\"));\n     println!(\"sha3: {}\", is_aarch64_feature_detected!(\"sha3\"));\n     println!(\"sm4: {}\", is_aarch64_feature_detected!(\"sm4\"));\n+    println!(\"ssbs: {}\", is_aarch64_feature_detected!(\"ssbs\"));\n+    println!(\"sve2-aes: {}\", is_aarch64_feature_detected!(\"sve2-aes\"));\n+    println!(\"sve2-bitperm: {}\", is_aarch64_feature_detected!(\"sve2-bitperm\"));\n+    println!(\"sve2-sha3: {}\", is_aarch64_feature_detected!(\"sve2-sha3\"));\n+    println!(\"sve2-sm4: {}\", is_aarch64_feature_detected!(\"sve2-sm4\"));\n+    println!(\"sve2: {}\", is_aarch64_feature_detected!(\"sve2\"));\n+    println!(\"sve: {}\", is_aarch64_feature_detected!(\"sve\"));\n+    println!(\"tme: {}\", is_aarch64_feature_detected!(\"tme\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"powerpc\", target_os = \"linux\"))]\n fn powerpc_linux() {\n     use std::arch::is_powerpc_feature_detected;\n+    // tidy-alphabetical-start\n     println!(\"altivec: {}\", is_powerpc_feature_detected!(\"altivec\"));\n-    println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc_feature_detected!(\"power8\"));\n+    println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n #[cfg(all(target_arch = \"powerpc64\", target_os = \"linux\"))]\n fn powerpc64_linux() {\n     use std::arch::is_powerpc64_feature_detected;\n+    // tidy-alphabetical-start\n     println!(\"altivec: {}\", is_powerpc64_feature_detected!(\"altivec\"));\n-    println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc64_feature_detected!(\"power8\"));\n+    println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n+    // tidy-alphabetical-end\n }\n \n #[test]\n@@ -102,9 +110,9 @@ fn x86_all() {\n     // the below is in alphabetical order and matches\n     // the order of X86_ALLOWED_FEATURES in rustc_codegen_ssa's target_features.rs\n \n+    // tidy-alphabetical-start\n     println!(\"adx: {:?}\", is_x86_feature_detected!(\"adx\"));\n     println!(\"aes: {:?}\", is_x86_feature_detected!(\"aes\"));\n-    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n     println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n     println!(\"avx512bf16: {:?}\", is_x86_feature_detected!(\"avx512bf16\"));\n     println!(\"avx512bitalg: {:?}\", is_x86_feature_detected!(\"avx512bitalg\"));\n@@ -117,13 +125,14 @@ fn x86_all() {\n     println!(\"avx512ifma: {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n     println!(\"avx512pf: {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n     println!(\"avx512vaes: {:?}\", is_x86_feature_detected!(\"avx512vaes\"));\n-    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n     println!(\"avx512vbmi2: {:?}\", is_x86_feature_detected!(\"avx512vbmi2\"));\n+    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n     println!(\"avx512vl: {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n     println!(\"avx512vnni: {:?}\", is_x86_feature_detected!(\"avx512vnni\"));\n     println!(\"avx512vp2intersect: {:?}\", is_x86_feature_detected!(\"avx512vp2intersect\"));\n     println!(\"avx512vpclmulqdq: {:?}\", is_x86_feature_detected!(\"avx512vpclmulqdq\"));\n     println!(\"avx512vpopcntdq: {:?}\", is_x86_feature_detected!(\"avx512vpopcntdq\"));\n+    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n     println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n     println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n     println!(\"cmpxchg16b: {:?}\", is_x86_feature_detected!(\"cmpxchg16b\"));\n@@ -138,16 +147,17 @@ fn x86_all() {\n     println!(\"rdseed: {:?}\", is_x86_feature_detected!(\"rdseed\"));\n     println!(\"rtm: {:?}\", is_x86_feature_detected!(\"rtm\"));\n     println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n-    println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"sse2: {:?}\", is_x86_feature_detected!(\"sse2\"));\n     println!(\"sse3: {:?}\", is_x86_feature_detected!(\"sse3\"));\n     println!(\"sse4.1: {:?}\", is_x86_feature_detected!(\"sse4.1\"));\n     println!(\"sse4.2: {:?}\", is_x86_feature_detected!(\"sse4.2\"));\n     println!(\"sse4a: {:?}\", is_x86_feature_detected!(\"sse4a\"));\n+    println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n     println!(\"tbm: {:?}\", is_x86_feature_detected!(\"tbm\"));\n     println!(\"xsave: {:?}\", is_x86_feature_detected!(\"xsave\"));\n     println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n     println!(\"xsaveopt: {:?}\", is_x86_feature_detected!(\"xsaveopt\"));\n     println!(\"xsaves: {:?}\", is_x86_feature_detected!(\"xsaves\"));\n+    // tidy-alphabetical-end\n }"}]}