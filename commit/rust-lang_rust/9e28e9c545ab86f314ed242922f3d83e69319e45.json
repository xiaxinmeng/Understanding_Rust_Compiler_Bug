{"sha": "9e28e9c545ab86f314ed242922f3d83e69319e45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMjhlOWM1NDVhYjg2ZjMxNGVkMjQyOTIyZjNkODNlNjkzMTllNDU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-13T19:47:41Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-13T19:49:04Z"}, "message": "Create TypeFoldable derive proc-macro.", "tree": {"sha": "1742783a68fcbe526e3dd58e722da93a10890e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1742783a68fcbe526e3dd58e722da93a10890e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e28e9c545ab86f314ed242922f3d83e69319e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e28e9c545ab86f314ed242922f3d83e69319e45", "html_url": "https://github.com/rust-lang/rust/commit/9e28e9c545ab86f314ed242922f3d83e69319e45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e28e9c545ab86f314ed242922f3d83e69319e45/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695fe965173795f9242dfcad6d1c07d7a17b106a", "url": "https://api.github.com/repos/rust-lang/rust/commits/695fe965173795f9242dfcad6d1c07d7a17b106a", "html_url": "https://github.com/rust-lang/rust/commit/695fe965173795f9242dfcad6d1c07d7a17b106a"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "351d60b9368b511788b3add8e5b9a5b0974e3850", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e28e9c545ab86f314ed242922f3d83e69319e45/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e28e9c545ab86f314ed242922f3d83e69319e45/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=9e28e9c545ab86f314ed242922f3d83e69319e45", "patch": "@@ -9,6 +9,7 @@ use synstructure::decl_derive;\n use proc_macro::TokenStream;\n \n mod hash_stable;\n+mod type_foldable;\n mod query;\n mod symbols;\n \n@@ -23,3 +24,4 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n }\n \n decl_derive!([HashStable, attributes(stable_hasher)] => hash_stable::hash_stable_derive);\n+decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_foldable_derive);"}, {"sha": "e6057767b47733bf3fce085d112cfa14569a9303", "filename": "src/librustc_macros/src/type_foldable.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9e28e9c545ab86f314ed242922f3d83e69319e45/src%2Flibrustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e28e9c545ab86f314ed242922f3d83e69319e45/src%2Flibrustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Ftype_foldable.rs?ref=9e28e9c545ab86f314ed242922f3d83e69319e45", "patch": "@@ -0,0 +1,39 @@\n+use synstructure;\n+use syn;\n+use quote::quote;\n+\n+pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n+    if let syn::Data::Union(_) = s.ast().data {\n+        panic!(\"cannot derive on union\")\n+    }\n+\n+    s.add_bounds(synstructure::AddBounds::Generics);\n+    let body_fold = s.each_variant(|vi| {\n+        let bindings = vi.bindings();\n+        vi.construct(|_, index| {\n+            let bind = &bindings[index];\n+            quote!{\n+                ::rustc::ty::fold::TypeFoldable::fold_with(#bind, __folder)\n+            }\n+        })\n+    });\n+    let body_visit = s.fold(false, |acc, bind| {\n+        quote!{ #acc || ::rustc::ty::fold::TypeFoldable::visit_with(#bind, __folder) }\n+    });\n+\n+    s.bound_impl(quote!(::rustc::ty::fold::TypeFoldable<'tcx>), quote!{\n+        fn super_fold_with<__F: ::rustc::ty::fold::TypeFolder<'tcx>>(\n+            &self,\n+            __folder: &mut __F\n+        ) -> Self {\n+            match *self { #body_fold }\n+        }\n+\n+        fn super_visit_with<__F: ::rustc::ty::fold::TypeVisitor<'tcx>>(\n+            &self,\n+            __folder: &mut __F\n+        ) -> bool {\n+            match *self { #body_visit }\n+        }\n+    })\n+}"}]}