{"sha": "0c26a3bc0ce507cbc2bee0b3368664760bedcf25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjZhM2JjMGNlNTA3Y2JjMmJlZTBiMzM2ODY2NDc2MGJlZGNmMjU=", "commit": {"author": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-05T18:54:29Z"}, "committer": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-06T10:19:24Z"}, "message": "Add benchmark for integer log10.", "tree": {"sha": "8a1106f4a53ab3bf77fa196291d8f3b6873e65dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a1106f4a53ab3bf77fa196291d8f3b6873e65dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c26a3bc0ce507cbc2bee0b3368664760bedcf25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c26a3bc0ce507cbc2bee0b3368664760bedcf25", "html_url": "https://github.com/rust-lang/rust/commit/0c26a3bc0ce507cbc2bee0b3368664760bedcf25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c26a3bc0ce507cbc2bee0b3368664760bedcf25/comments", "author": null, "committer": null, "parents": [{"sha": "b2d9bcda7ec267dbabfaef67f7af344ef71e002c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d9bcda7ec267dbabfaef67f7af344ef71e002c", "html_url": "https://github.com/rust-lang/rust/commit/b2d9bcda7ec267dbabfaef67f7af344ef71e002c"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "0f55d6837ebd40af733773e7e47136319d78d9a6", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c26a3bc0ce507cbc2bee0b3368664760bedcf25/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c26a3bc0ce507cbc2bee0b3368664760bedcf25/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=0c26a3bc0ce507cbc2bee0b3368664760bedcf25", "patch": "@@ -1,6 +1,7 @@\n // wasm32 does not support benches (no time).\n #![cfg(not(target_arch = \"wasm32\"))]\n #![feature(flt2dec)]\n+#![feature(int_log)]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "542a0a0ca08ac2f9ec709304020bf0b998be96d6", "filename": "library/core/benches/num/int_log/mod.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0c26a3bc0ce507cbc2bee0b3368664760bedcf25/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c26a3bc0ce507cbc2bee0b3368664760bedcf25/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs?ref=0c26a3bc0ce507cbc2bee0b3368664760bedcf25", "patch": "@@ -0,0 +1,60 @@\n+#![feature(int_log)]\n+\n+use rand::Rng;\n+use test::{black_box, Bencher};\n+\n+macro_rules! int_log_bench {\n+    ($t:ty, $predictable:ident, $random:ident, $random_small:ident) => {\n+        #[bench]\n+        fn $predictable(bench: &mut Bencher) {\n+            bench.iter(|| {\n+                for n in 0..(<$t>::BITS / 8) {\n+                    for i in 1..=(100 as $t) {\n+                        let x = black_box(i << (n * 8));\n+                        black_box(x.log10());\n+                    }\n+                }\n+            });\n+        }\n+\n+        #[bench]\n+        fn $random(bench: &mut Bencher) {\n+            let mut rng = rand::thread_rng();\n+            /* Exponentially distributed random numbers from the whole range of the type.  */\n+            let numbers: Vec<$t> = (0..256)\n+                .map(|_| {\n+                    let x = rng.gen::<$t>() >> rng.gen_range(0, <$t>::BITS);\n+                    if x != 0 { x } else { 1 }\n+                })\n+                .collect();\n+            bench.iter(|| {\n+                for x in &numbers {\n+                    black_box(black_box(x).log10());\n+                }\n+            });\n+        }\n+\n+        #[bench]\n+        fn $random_small(bench: &mut Bencher) {\n+            let mut rng = rand::thread_rng();\n+            /* Exponentially distributed random numbers from the range 0..256.  */\n+            let numbers: Vec<$t> = (0..256)\n+                .map(|_| {\n+                    let x = (rng.gen::<u8>() >> rng.gen_range(0, u8::BITS)) as $t;\n+                    if x != 0 { x } else { 1 }\n+                })\n+                .collect();\n+            bench.iter(|| {\n+                for x in &numbers {\n+                    black_box(black_box(x).log10());\n+                }\n+            });\n+        }\n+    };\n+}\n+\n+int_log_bench! {u8, u8_log10_predictable, u8_log10_random, u8_log10_random_small}\n+int_log_bench! {u16, u16_log10_predictable, u16_log10_random, u16_log10_random_small}\n+int_log_bench! {u32, u32_log10_predictable, u32_log10_random, u32_log10_random_small}\n+int_log_bench! {u64, u64_log10_predictable, u64_log10_random, u64_log10_random_small}\n+int_log_bench! {u128, u128_log10_predictable, u128_log10_random, u128_log10_random_small}"}, {"sha": "2f9cad2725d7f093b1c8f8192730597853bed1df", "filename": "library/core/benches/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c26a3bc0ce507cbc2bee0b3368664760bedcf25/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c26a3bc0ce507cbc2bee0b3368664760bedcf25/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fmod.rs?ref=0c26a3bc0ce507cbc2bee0b3368664760bedcf25", "patch": "@@ -1,5 +1,6 @@\n mod dec2flt;\n mod flt2dec;\n+mod int_log;\n \n use std::str::FromStr;\n use test::Bencher;"}]}