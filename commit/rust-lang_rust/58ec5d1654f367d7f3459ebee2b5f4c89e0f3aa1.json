{"sha": "58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZWM1ZDE2NTRmMzY3ZDdmMzQ1OWViZWUyYjVmNGM4OWUwZjNhYTE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-13T09:57:58Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-13T10:44:05Z"}, "message": "Move capture checking into resolve.rs\n\nDrops capture.rs. The new algorithm also checks for captures function\narguments and obj fields.", "tree": {"sha": "803ad4b840000f5af60041d6c565f210f12bf7a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803ad4b840000f5af60041d6c565f210f12bf7a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "html_url": "https://github.com/rust-lang/rust/commit/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89490e416b9eff7d22cbea235475db1cba581ff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/89490e416b9eff7d22cbea235475db1cba581ff6", "html_url": "https://github.com/rust-lang/rust/commit/89490e416b9eff7d22cbea235475db1cba581ff6"}], "stats": {"total": 215, "additions": 74, "deletions": 141}, "files": [{"sha": "6592c23ad10be6eacb1100862750a2dd4049750a", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -7,7 +7,6 @@ import front::eval;\n import front::ast;\n import middle::trans;\n import middle::resolve;\n-import middle::capture;\n import middle::ty;\n import middle::typeck;\n import middle::typestate_check;\n@@ -94,8 +93,6 @@ fn compile_input(session::session sess,\n                  bind creader::read_crates(sess, crate));\n     auto def_map = time(time_passes, \"resolution\",\n                         bind resolve::resolve_crate(sess, crate));\n-    time[()](time_passes, \"capture checking\",\n-             bind capture::check_for_captures(sess, crate, def_map));\n \n     auto ty_cx = ty::mk_ctxt(sess, def_map);\n     auto typeck_result ="}, {"sha": "5e5185bf7eeac823a517942388f0b4a29db1657c", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -46,7 +46,6 @@ tag def {\n     def_const(def_id);\n     def_arg(def_id);\n     def_local(def_id);\n-    def_upvar(def_id);\n     def_variant(def_id /* tag */, def_id /* variant */);\n     def_ty(def_id);\n     def_ty_arg(uint);\n@@ -74,7 +73,6 @@ fn def_id_of_def(def d) -> def_id {\n         case (def_const(?id)) { ret id; }\n         case (def_arg(?id)) { ret id; }\n         case (def_local(?id)) { ret id; }\n-        case (def_upvar(?id)) { ret id; }\n         case (def_variant(_, ?id)) { ret id; }\n         case (def_ty(?id)) { ret id; }\n         case (def_ty_arg(_)) { fail; }"}, {"sha": "7124554a7c4b64a5b994e96cb172c1599ea04029", "filename": "src/comp/middle/capture.rs", "status": "removed", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/89490e416b9eff7d22cbea235475db1cba581ff6/src%2Fcomp%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89490e416b9eff7d22cbea235475db1cba581ff6/src%2Fcomp%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcapture.rs?ref=89490e416b9eff7d22cbea235475db1cba581ff6", "patch": "@@ -1,119 +0,0 @@\n-import driver::session;\n-import front::ast;\n-import std::map::hashmap;\n-import std::option;\n-import std::option::some;\n-import std::option::none;\n-import std::_int;\n-import std::_vec;\n-import util::common;\n-import resolve::def_map;\n-\n-type fn_id_of_local = std::map::hashmap[ast::def_id, ast::def_id];\n-type env = rec(mutable vec[ast::def_id] current_context, // fn or obj\n-               def_map def_map,\n-               fn_id_of_local idmap,\n-               session::session sess);\n-\n-fn current_context(&env e) -> ast::def_id {\n-    ret e.current_context.(_vec::len(e.current_context) - 1u);\n-}\n-\n-fn enter_item(@env e, &@ast::item i) {\n-    alt (i.node) {\n-        case (ast::item_fn(?name, _, _, ?id, _)) {\n-            _vec::push(e.current_context, id);\n-        }\n-        case (ast::item_obj(?name, _, _, ?ids, _)) {\n-            _vec::push(e.current_context, ids.ty);\n-        }\n-        case (_) {}\n-    }\n-}\n-\n-fn leave_item(@env e, &@ast::item i) {\n-    alt (i.node) {\n-        case (ast::item_fn(?name, _, _, ?id, _)) {\n-            _vec::pop(e.current_context);\n-        }\n-        case (ast::item_obj(_, _, _, ?ids, _)) {\n-            _vec::pop(e.current_context);\n-        }\n-        case (_) {}\n-    }\n-}\n-\n-fn walk_expr(@env e, &@ast::expr x) {\n-    alt (x.node) {\n-        case (ast::expr_for(?d, _, _, _)) {\n-            alt (d.node) {\n-                case (ast::decl_local(?local)) {\n-                    e.idmap.insert(local.id, current_context(*e));\n-                }\n-                case (_) { }\n-            }\n-        }\n-        case (ast::expr_for_each(?d, _, _, _)) {\n-            alt (d.node) {\n-                case (ast::decl_local(?local)) {\n-                    e.idmap.insert(local.id, current_context(*e));\n-                }\n-                case (_) { }\n-            }\n-        }\n-        case (ast::expr_path(?pt, ?ann)) {\n-            auto local_id;\n-            alt (e.def_map.get(ast::ann_tag(ann))) {\n-                case (ast::def_local(?id)) { local_id = id; }\n-                case (_) { ret; }\n-            }\n-            auto df = ast::def_id_of_def(e.def_map.get(ast::ann_tag(ann)));\n-            auto def_context = e.idmap.get(df);\n-\n-            if (current_context(*e) != def_context) {\n-                e.sess.span_err(x.span,\n-                                \"attempted dynamic environment-capture\");\n-            }\n-        }\n-        case (_) { }\n-    }\n-}\n-\n-fn walk_block(@env e, &ast::block b) {\n-    for (@ast::stmt st in b.node.stmts) {\n-        alt (st.node) {\n-            case (ast::stmt_decl(?d,_)) {\n-                alt (d.node) {\n-                    case (ast::decl_local(?loc)) {\n-                        e.idmap.insert(loc.id, current_context(*e));\n-                    }\n-                    case (_) { }\n-                }\n-            }\n-            case (_) { }\n-        }\n-    }\n-}\n-\n-fn check_for_captures(session::session sess, @ast::crate crate, def_map dm) {\n-    let vec[ast::def_id] curctx = vec();\n-    auto env = @rec(mutable current_context = curctx,\n-                    def_map = dm,\n-                    idmap = common::new_def_hash[ast::def_id](),\n-                    sess = sess);\n-    auto visitor = rec(visit_item_pre = bind enter_item(env, _),\n-                       visit_item_post = bind leave_item(env, _),\n-                       visit_block_pre = bind walk_block(env, _),\n-                       visit_expr_pre = bind walk_expr(env, _)\n-                       with walk::default_visitor());\n-    walk::walk_crate(visitor, *crate);\n-}\n-\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:"}, {"sha": "11837033b6c8b427a4a1caa5e07e421cccc4f138", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -317,8 +317,8 @@ fn resolve_import(&env e, &@ast::view_item it, &list[scope] sc) {\n \n     if (n_idents == 1u) {\n         register(e, defid, it.span, end_id,\n-                 lookup_in_scope(e, sc, end_id, ns_value),\n-                 lookup_in_scope(e, sc, end_id, ns_type));\n+                 lookup_in_scope(e, sc, it.span, end_id, ns_value),\n+                 lookup_in_scope(e, sc, it.span, end_id, ns_type));\n     } else {\n         auto dcur = lookup_in_scope_strict(e, sc, it.span, ids.(0), ns_value);\n         auto i = 1u;\n@@ -394,7 +394,7 @@ fn lookup_path_strict(&env e, &list[scope] sc, &span sp, vec[ident] idents,\n                       \n fn lookup_in_scope_strict(&env e, list[scope] sc, &span sp, ident id,\n                         namespace ns) -> def {\n-    alt (lookup_in_scope(e, sc, id, ns)) {\n+    alt (lookup_in_scope(e, sc, sp, id, ns)) {\n         case (none[def]) {\n             unresolved(e, sp, id, ns_name(ns));\n             fail;\n@@ -405,7 +405,35 @@ fn lookup_in_scope_strict(&env e, list[scope] sc, &span sp, ident id,\n     }\n }\n \n-fn lookup_in_scope(&env e, list[scope] sc, ident id, namespace ns)\n+fn scope_is_fn(&scope sc) -> bool {\n+    ret alt (sc) {\n+        case (scope_item(?it)) {\n+            alt (it.node) {\n+                case (ast::item_fn(_, _, _, _, _)) { true }\n+                case (_) { false }\n+            }\n+        }\n+        case (scope_native_item(_)) { true }\n+        case (_) { false }\n+    };\n+}\n+\n+fn def_is_local(&def d) -> bool {\n+    ret alt (d) {\n+        case (ast::def_arg(_)) { true }\n+        case (ast::def_local(_)) { true }\n+        case (ast::def_binding(_)) { true }\n+        case (_) { false }\n+    };\n+}\n+fn def_is_obj_field(&def d) -> bool {\n+    ret alt (d) {\n+        case (ast::def_obj_field(_)) { true }\n+        case (_) { false }\n+    };\n+}\n+\n+fn lookup_in_scope(&env e, list[scope] sc, &span sp, ident id, namespace ns)\n     -> option::t[def] {\n     fn in_scope(&env e, ident id, &scope s, namespace ns)\n         -> option::t[def] {\n@@ -441,15 +469,13 @@ fn lookup_in_scope(&env e, list[scope] sc, ident id, namespace ns)\n                     case (_) {}\n                 }\n             }\n-\n             case (scope_native_item(?it)) {\n                 alt (it.node) {\n                     case (ast::native_item_fn(_, _, ?decl, ?ty_params, _, _)){\n                         ret lookup_in_fn(id, decl, ty_params, ns);\n                     }\n                 }\n             }\n-\n             case (scope_loop(?d)) {\n                 if (ns == ns_value) {\n                     alt (d.node) {\n@@ -461,11 +487,9 @@ fn lookup_in_scope(&env e, list[scope] sc, ident id, namespace ns)\n                     }\n                 }\n             }\n-\n             case (scope_block(?b)) {\n                 ret lookup_in_block(id, b.node, ns);\n             }\n-\n             case (scope_arm(?a)) {\n                 if (ns == ns_value) {\n                     ret lookup_in_pat(id, *a.pat);\n@@ -475,16 +499,30 @@ fn lookup_in_scope(&env e, list[scope] sc, ident id, namespace ns)\n         ret none[def];\n     }\n \n+    auto left_fn = false;\n+    // Used to determine whether obj fields are in scope\n+    auto left_fn_level2 = false;\n     while (true) {\n         alt (sc) {\n             case (nil[scope]) {\n                 ret none[def];\n             }\n             case (cons[scope](?hd, ?tl)) {\n-                alt (in_scope(e, id, hd, ns)) {\n-                    case (some[def](?x)) { ret some(x); }\n-                    case (_) { sc = *tl; }\n+                auto fnd = in_scope(e, id, hd, ns);\n+                if (fnd != none[def]) {\n+                    auto df = option::get(fnd);\n+                    if ((left_fn && def_is_local(df)) ||\n+                        (left_fn_level2 && def_is_obj_field(df))) {\n+                        e.sess.span_err(sp, \"attempted dynamic \" + \n+                                        \"environment-capture\");\n+                    }\n+                    ret fnd;\n+                }\n+                if (left_fn) { left_fn_level2 = true; }\n+                if (ns == ns_value && !left_fn) {\n+                    left_fn = scope_is_fn(hd);\n                 }\n+                sc = *tl;\n             }\n         }\n     }\n@@ -841,7 +879,6 @@ fn check_def_by_ns(def d, namespace ns) -> bool {\n         case (ast::def_const(?id)) { ns == ns_value }\n         case (ast::def_arg(?id)) { ns == ns_value }\n         case (ast::def_local(?id)) { ns == ns_value }\n-        case (ast::def_upvar(?id)) { ns == ns_value }\n         case (ast::def_variant(_, ?id)) { ns == ns_value }\n         case (ast::def_ty(?id)) { ns == ns_type }\n         case (ast::def_binding(?id)) { ns == ns_type }"}, {"sha": "d822be174bb8ee6813e390bcd2339f5bf477cb93", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -3807,9 +3807,6 @@ fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n                     case (ast::def_local(?did)) {\n                         _vec::push[ast::def_id](e.refs, did);\n                     }\n-                    case (ast::def_upvar(?did)) {\n-                        _vec::push[ast::def_id](e.refs, did);\n-                    }\n                     case (_) {}\n                 }\n             }"}, {"sha": "ca5534b315ca6b04d8707d8efc0b5e18da1857ab", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -17,7 +17,6 @@ mod middle {\n     mod walk;\n     mod metadata;\n     mod resolve;\n-    mod capture;\n     mod typeck;\n     mod typestate_check;\n }"}, {"sha": "fa1e1d08acf80ed8215f3f4d6ed28ef76c8d81a0", "filename": "src/test/compile-fail/bad-env-capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -1,6 +1,5 @@\n // xfail-stage0\n // xfail-stage1\n-// xfail-stage2\n // error-pattern: attempted dynamic environment-capture\n fn foo() {\n   let int x;"}, {"sha": "ccec331049516e0b623fd4c281d4f405f345562a", "filename": "src/test/compile-fail/bad-env-capture2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -0,0 +1,11 @@\n+// xfail-stage0\n+// xfail-stage1\n+// error-pattern: attempted dynamic environment-capture\n+fn foo(int x) {\n+  fn bar() {\n+    log x;\n+  }\n+}\n+fn main() {\n+  foo(2);\n+}\n\\ No newline at end of file"}, {"sha": "77f7881d14af825b7af138586543d10efd9a50a8", "filename": "src/test/compile-fail/bad-env-capture3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs?ref=58ec5d1654f367d7f3459ebee2b5f4c89e0f3aa1", "patch": "@@ -0,0 +1,14 @@\n+// xfail-stage0\n+// xfail-stage1\n+// error-pattern: attempted dynamic environment-capture\n+obj foo(int x) {\n+    fn mth() {\n+        fn bar() {\n+            log x;\n+        }\n+    }\n+}\n+\n+fn main() {\n+  foo(2);\n+}"}]}