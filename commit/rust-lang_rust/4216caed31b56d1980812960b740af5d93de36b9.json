{"sha": "4216caed31b56d1980812960b740af5d93de36b9", "node_id": "C_kwDOAAsO6NoAKDQyMTZjYWVkMzFiNTZkMTk4MDgxMjk2MGI3NDBhZjVkOTNkZTM2Yjk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-22T20:34:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-22T20:50:01Z"}, "message": "filter candidates in pick probe for diagnostics", "tree": {"sha": "19198a83ddb9b80d35b285468750828caabd1901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19198a83ddb9b80d35b285468750828caabd1901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4216caed31b56d1980812960b740af5d93de36b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4216caed31b56d1980812960b740af5d93de36b9", "html_url": "https://github.com/rust-lang/rust/commit/4216caed31b56d1980812960b740af5d93de36b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4216caed31b56d1980812960b740af5d93de36b9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289b2b8cf971b1adf132cb5b7f15368837c5e353", "url": "https://api.github.com/repos/rust-lang/rust/commits/289b2b8cf971b1adf132cb5b7f15368837c5e353", "html_url": "https://github.com/rust-lang/rust/commit/289b2b8cf971b1adf132cb5b7f15368837c5e353"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "7c74ac6f170374fada1b221d37e86e882c53616b", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4216caed31b56d1980812960b740af5d93de36b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4216caed31b56d1980812960b740af5d93de36b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=4216caed31b56d1980812960b740af5d93de36b9", "patch": "@@ -530,24 +530,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         hir_id: hir::HirId,\n     ) -> Vec<AssocItem> {\n-        let mut methods =\n-            self.probe_for_return_type(span, probe::Mode::MethodCall, expected, checked_ty, hir_id);\n-        methods.retain(|m| {\n-            self.has_only_self_parameter(m)\n-                && self\n-                    .tcx\n-                    // This special internal attribute is used to permit\n-                    // \"identity-like\" conversion methods to be suggested here.\n-                    //\n-                    // FIXME (#46459 and #46460): ideally\n-                    // `std::convert::Into::into` and `std::borrow:ToOwned` would\n-                    // also be `#[rustc_conversion_suggestion]`, if not for\n-                    // method-probing false-positives and -negatives (respectively).\n-                    //\n-                    // FIXME? Other potential candidate methods: `as_ref` and\n-                    // `as_mut`?\n-                    .has_attr(m.def_id, sym::rustc_conversion_suggestion)\n-        });\n+        let methods = self.probe_for_return_type(\n+            span,\n+            probe::Mode::MethodCall,\n+            expected,\n+            checked_ty,\n+            hir_id,\n+            |m| {\n+                self.has_only_self_parameter(m)\n+                    && self\n+                        .tcx\n+                        // This special internal attribute is used to permit\n+                        // \"identity-like\" conversion methods to be suggested here.\n+                        //\n+                        // FIXME (#46459 and #46460): ideally\n+                        // `std::convert::Into::into` and `std::borrow:ToOwned` would\n+                        // also be `#[rustc_conversion_suggestion]`, if not for\n+                        // method-probing false-positives and -negatives (respectively).\n+                        //\n+                        // FIXME? Other potential candidate methods: `as_ref` and\n+                        // `as_mut`?\n+                        .has_attr(m.def_id, sym::rustc_conversion_suggestion)\n+            },\n+        );\n \n         methods\n     }"}, {"sha": "28aa2302f882f92a03e4aaea45318f32c2046942", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4216caed31b56d1980812960b740af5d93de36b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4216caed31b56d1980812960b740af5d93de36b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=4216caed31b56d1980812960b740af5d93de36b9", "patch": "@@ -252,14 +252,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// would result in an error (basically, the same criteria we\n     /// would use to decide if a method is a plausible fit for\n     /// ambiguity purposes).\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self, candidate_filter))]\n     pub fn probe_for_return_type(\n         &self,\n         span: Span,\n         mode: Mode,\n         return_type: Ty<'tcx>,\n         self_ty: Ty<'tcx>,\n         scope_expr_id: hir::HirId,\n+        candidate_filter: impl Fn(&ty::AssocItem) -> bool,\n     ) -> Vec<ty::AssocItem> {\n         let method_names = self\n             .probe_op(\n@@ -271,7 +272,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self_ty,\n                 scope_expr_id,\n                 ProbeScope::AllTraits,\n-                |probe_cx| Ok(probe_cx.candidate_method_names()),\n+                |probe_cx| Ok(probe_cx.candidate_method_names(candidate_filter)),\n             )\n             .unwrap_or_default();\n         method_names\n@@ -966,12 +967,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn candidate_method_names(&self) -> Vec<Ident> {\n+    fn candidate_method_names(\n+        &self,\n+        candidate_filter: impl Fn(&ty::AssocItem) -> bool,\n+    ) -> Vec<Ident> {\n         let mut set = FxHashSet::default();\n         let mut names: Vec<_> = self\n             .inherent_candidates\n             .iter()\n             .chain(&self.extension_candidates)\n+            .filter(|candidate| candidate_filter(&candidate.item))\n             .filter(|candidate| {\n                 if let Some(return_ty) = self.return_type {\n                     self.matches_return_type(&candidate.item, None, return_ty)\n@@ -1689,7 +1694,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             pcx.allow_similar_names = true;\n             pcx.assemble_inherent_candidates();\n \n-            let method_names = pcx.candidate_method_names();\n+            let method_names = pcx.candidate_method_names(|_| true);\n             pcx.allow_similar_names = false;\n             let applicable_close_candidates: Vec<ty::AssocItem> = method_names\n                 .iter()"}]}