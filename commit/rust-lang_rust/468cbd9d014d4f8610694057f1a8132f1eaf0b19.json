{"sha": "468cbd9d014d4f8610694057f1a8132f1eaf0b19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OGNiZDlkMDE0ZDRmODYxMDY5NDA1N2YxYTgxMzJmMWVhZjBiMTk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-21T10:12:01Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-22T19:59:59Z"}, "message": "iterator: add a size_hint default method\n\nalso adds an implementation for the vector iterators", "tree": {"sha": "423324451ff92511df46bd9a82886ed4bbe164fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423324451ff92511df46bd9a82886ed4bbe164fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/468cbd9d014d4f8610694057f1a8132f1eaf0b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/468cbd9d014d4f8610694057f1a8132f1eaf0b19", "html_url": "https://github.com/rust-lang/rust/commit/468cbd9d014d4f8610694057f1a8132f1eaf0b19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/468cbd9d014d4f8610694057f1a8132f1eaf0b19/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df166bae1ff583b39b4046becc87d28c9f90094b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df166bae1ff583b39b4046becc87d28c9f90094b", "html_url": "https://github.com/rust-lang/rust/commit/df166bae1ff583b39b4046becc87d28c9f90094b"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "fa27f4560c146390b6ab88c69831cb2b1c205652", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/468cbd9d014d4f8610694057f1a8132f1eaf0b19/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468cbd9d014d4f8610694057f1a8132f1eaf0b19/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=468cbd9d014d4f8610694057f1a8132f1eaf0b19", "patch": "@@ -17,6 +17,8 @@ implementing the `Iterator` trait.\n \n */\n \n+#[allow(default_methods)]; // solid enough for the use case here\n+\n use cmp;\n use iter::{FromIter, Times};\n use num::{Zero, One};\n@@ -31,6 +33,12 @@ use clone::Clone;\n pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n     fn next(&mut self) -> Option<A>;\n+\n+    /// Return a lower bound and upper bound on the remaining length of the iterator.\n+    ///\n+    /// The common use case for the estimate is pre-allocating space to store the results.\n+    #[cfg(not(stage0))]\n+    fn size_hint(&self) -> (Option<uint>, Option<uint>) { (None, None) }\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -594,6 +602,27 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n             self.b.next()\n         }\n     }\n+\n+    #[inline]\n+    #[cfg(not(stage0))]\n+    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+        let (a_lower, a_upper) = self.a.size_hint();\n+        let (b_lower, b_upper) = self.b.size_hint();\n+\n+        let lower = match (a_lower, b_lower) {\n+            (Some(x), Some(y)) => Some(x + y),\n+            (Some(x), None) => Some(x),\n+            (None, Some(y)) => Some(y),\n+            (None, None) => None\n+        };\n+\n+        let upper = match (a_upper, b_upper) {\n+            (Some(x), Some(y)) => Some(x + y),\n+            _ => None\n+        };\n+\n+        (lower, upper)\n+    }\n }\n \n /// An iterator which iterates two other iterators simultaneously\n@@ -627,6 +656,12 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n             _ => None\n         }\n     }\n+\n+    #[inline]\n+    #[cfg(not(stage0))]\n+    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n }\n \n /// An iterator which filters the elements of `iter` with `predicate`\n@@ -647,6 +682,13 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n         }\n         None\n     }\n+\n+    #[inline]\n+    #[cfg(not(stage0))]\n+    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (None, upper) // can't know a lower bound, due to the predicate\n+    }\n }\n \n /// An iterator which uses `f` to both filter and map elements from `iter`\n@@ -666,6 +708,13 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n         }\n         None\n     }\n+\n+    #[inline]\n+    #[cfg(not(stage0))]\n+    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (None, upper) // can't know a lower bound, due to the predicate\n+    }\n }\n \n /// An iterator which yields the current count and the element during iteration"}, {"sha": "b03b6efcaaf3119c271f8986c1020db04dad57c4", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/468cbd9d014d4f8610694057f1a8132f1eaf0b19/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/468cbd9d014d4f8610694057f1a8132f1eaf0b19/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=468cbd9d014d4f8610694057f1a8132f1eaf0b19", "patch": "@@ -29,6 +29,7 @@ use ptr::to_unsafe_ptr;\n use ptr;\n use ptr::RawPtr;\n use sys;\n+use sys::size_of;\n use uint;\n use unstable::intrinsics;\n use vec;\n@@ -2454,6 +2455,13 @@ macro_rules! iterator {\n                     }\n                 }\n             }\n+\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+                let exact = Some(((self.end as uint) - (self.ptr as uint)) / size_of::<$elem>());\n+                (exact, exact)\n+            }\n         }\n     }\n }\n@@ -3909,16 +3917,23 @@ mod tests {\n     }\n \n     #[test]\n+    #[cfg(not(stage0))]\n     fn test_iterator() {\n         use iterator::*;\n         let xs = [1, 2, 5, 10, 11];\n-        let ys = [1, 2, 5, 10, 11, 19];\n         let mut it = xs.iter();\n-        let mut i = 0;\n-        for it.advance |&x| {\n-            assert_eq!(x, ys[i]);\n-            i += 1;\n-        }\n+        assert_eq!(it.size_hint(), (Some(5), Some(5)));\n+        assert_eq!(it.next().unwrap(), &1);\n+        assert_eq!(it.size_hint(), (Some(4), Some(4)));\n+        assert_eq!(it.next().unwrap(), &2);\n+        assert_eq!(it.size_hint(), (Some(3), Some(3)));\n+        assert_eq!(it.next().unwrap(), &5);\n+        assert_eq!(it.size_hint(), (Some(2), Some(2)));\n+        assert_eq!(it.next().unwrap(), &10);\n+        assert_eq!(it.size_hint(), (Some(1), Some(1)));\n+        assert_eq!(it.next().unwrap(), &11);\n+        assert_eq!(it.size_hint(), (Some(0), Some(0)));\n+        assert!(it.next().is_none());\n     }\n \n     #[test]"}]}