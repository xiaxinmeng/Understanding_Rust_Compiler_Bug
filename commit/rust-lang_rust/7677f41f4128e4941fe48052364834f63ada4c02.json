{"sha": "7677f41f4128e4941fe48052364834f63ada4c02", "node_id": "C_kwDOAAsO6NoAKDc2NzdmNDFmNDEyOGU0OTQxZmU0ODA1MjM2NDgzNGY2M2FkYTRjMDI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-10T15:42:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-10T15:42:09Z"}, "message": "Preallocate some vecs", "tree": {"sha": "4795bbf5cc7f5552f4ce5a10f94c120ec592768a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4795bbf5cc7f5552f4ce5a10f94c120ec592768a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7677f41f4128e4941fe48052364834f63ada4c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7677f41f4128e4941fe48052364834f63ada4c02", "html_url": "https://github.com/rust-lang/rust/commit/7677f41f4128e4941fe48052364834f63ada4c02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7677f41f4128e4941fe48052364834f63ada4c02/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79492cb8ae0057389940507f4a8f2a342614a1f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/79492cb8ae0057389940507f4a8f2a342614a1f7", "html_url": "https://github.com/rust-lang/rust/commit/79492cb8ae0057389940507f4a8f2a342614a1f7"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "a6449d019ff6a07dcaf185d62f80c72f3dee3edc", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7677f41f4128e4941fe48052364834f63ada4c02/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7677f41f4128e4941fe48052364834f63ada4c02/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=7677f41f4128e4941fe48052364834f63ada4c02", "patch": "@@ -67,7 +67,7 @@ impl InferenceContext<'_> {\n                 let arg = projection.substitution.as_slice(Interner).get(1)?;\n                 if let Some(subst) = arg.ty(Interner)?.as_tuple() {\n                     let generic_args = subst.as_slice(Interner);\n-                    let mut sig_tys = Vec::new();\n+                    let mut sig_tys = Vec::with_capacity(generic_args.len() + 1);\n                     for arg in generic_args {\n                         sig_tys.push(arg.ty(Interner)?.clone());\n                     }"}, {"sha": "175fded8ccae10882528093fcb4ea25e6afdb200", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7677f41f4128e4941fe48052364834f63ada4c02/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7677f41f4128e4941fe48052364834f63ada4c02/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7677f41f4128e4941fe48052364834f63ada4c02", "patch": "@@ -235,7 +235,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::Closure { body, args, ret_type, arg_types, closure_kind } => {\n                 assert_eq!(args.len(), arg_types.len());\n \n-                let mut sig_tys = Vec::new();\n+                let mut sig_tys = Vec::with_capacity(arg_types.len() + 1);\n \n                 // collect explicitly written argument types\n                 for arg_type in arg_types.iter() {\n@@ -256,7 +256,8 @@ impl<'a> InferenceContext<'a> {\n                     num_binders: 0,\n                     sig: FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic: false },\n                     substitution: FnSubst(\n-                        Substitution::from_iter(Interner, sig_tys.clone()).shifted_in(Interner),\n+                        Substitution::from_iter(Interner, sig_tys.iter().cloned())\n+                            .shifted_in(Interner),\n                     ),\n                 })\n                 .intern(Interner);\n@@ -318,16 +319,16 @@ impl<'a> InferenceContext<'a> {\n             Expr::Call { callee, args, .. } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let mut derefs = Autoderef::new(&mut self.table, callee_ty.clone());\n-                let mut res = None;\n-                let mut derefed_callee = callee_ty.clone();\n-                // manual loop to be able to access `derefs.table`\n-                while let Some((callee_deref_ty, _)) = derefs.next() {\n-                    res = derefs.table.callable_sig(&callee_deref_ty, args.len());\n-                    if res.is_some() {\n-                        derefed_callee = callee_deref_ty;\n-                        break;\n+                let (res, derefed_callee) = 'b: {\n+                    // manual loop to be able to access `derefs.table`\n+                    while let Some((callee_deref_ty, _)) = derefs.next() {\n+                        let res = derefs.table.callable_sig(&callee_deref_ty, args.len());\n+                        if res.is_some() {\n+                            break 'b (res, callee_deref_ty);\n+                        }\n                     }\n-                }\n+                    (None, callee_ty.clone())\n+                };\n                 // if the function is unresolved, we use is_varargs=true to\n                 // suppress the arg count diagnostic here\n                 let is_varargs ="}]}