{"sha": "f4aaedb51e47022cdd6c8857976e209e9d135e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YWFlZGI1MWU0NzAyMmNkZDZjODg1Nzk3NmUyMDllOWQxMzVlM2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T17:32:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:56Z"}, "message": "Fallout in tests -- break test into a run-pass and compile-fail component", "tree": {"sha": "e91f3f79632165c5410a994cb47c3de20649b849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e91f3f79632165c5410a994cb47c3de20649b849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4aaedb51e47022cdd6c8857976e209e9d135e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4aaedb51e47022cdd6c8857976e209e9d135e3f", "html_url": "https://github.com/rust-lang/rust/commit/f4aaedb51e47022cdd6c8857976e209e9d135e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4aaedb51e47022cdd6c8857976e209e9d135e3f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532fcb250fb888431b0049f68dc619a1f77e70a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/532fcb250fb888431b0049f68dc619a1f77e70a7", "html_url": "https://github.com/rust-lang/rust/commit/532fcb250fb888431b0049f68dc619a1f77e70a7"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "3f72391ff90c7e068dde8ad2cb895cc1e2dd4237", "filename": "src/test/compile-fail/associated-types-projection-to-unrelated-trait-in-method-without-default.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f4aaedb51e47022cdd6c8857976e209e9d135e3f/src%2Ftest%2Fcompile-fail%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aaedb51e47022cdd6c8857976e209e9d135e3f/src%2Ftest%2Fcompile-fail%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs?ref=f4aaedb51e47022cdd6c8857976e209e9d135e3f", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we get an error when you use `<Self as Get>::Value` in\n+// the trait definition even if there is no default method.\n+\n+trait Get {\n+    type Value;\n+}\n+\n+trait Other {\n+    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n+    //~^ ERROR E0277\n+}\n+\n+impl Get for () {\n+    type Value = f32;\n+}\n+\n+impl Get for f64 {\n+    type Value = u32;\n+}\n+\n+impl Other for () {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+impl Other for f64 {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+fn main() { }"}, {"sha": "8059db5204ee625fbe017d8bf7f910813540610d", "filename": "src/test/run-pass/associated-types-projection-to-unrelated-trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4aaedb51e47022cdd6c8857976e209e9d135e3f/src%2Ftest%2Frun-pass%2Fassociated-types-projection-to-unrelated-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4aaedb51e47022cdd6c8857976e209e9d135e3f/src%2Ftest%2Frun-pass%2Fassociated-types-projection-to-unrelated-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-to-unrelated-trait.rs?ref=f4aaedb51e47022cdd6c8857976e209e9d135e3f", "patch": "@@ -21,7 +21,8 @@ trait Get {\n }\n \n trait Other {\n-    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n+    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value)\n+        where Self: Get;\n }\n \n impl Get for () {"}]}