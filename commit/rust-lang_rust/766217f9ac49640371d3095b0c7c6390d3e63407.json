{"sha": "766217f9ac49640371d3095b0c7c6390d3e63407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NjIxN2Y5YWM0OTY0MDM3MWQzMDk1YjBjN2M2MzkwZDNlNjM0MDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-15T16:48:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T16:48:52Z"}, "message": "Merge pull request #1227 from Manishearth/readme_improvements\n\nList lints at the end of the readme", "tree": {"sha": "591e675d8a837d20921112c8246db506226a857c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/591e675d8a837d20921112c8246db506226a857c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/766217f9ac49640371d3095b0c7c6390d3e63407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/766217f9ac49640371d3095b0c7c6390d3e63407", "html_url": "https://github.com/rust-lang/rust/commit/766217f9ac49640371d3095b0c7c6390d3e63407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/766217f9ac49640371d3095b0c7c6390d3e63407/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc84759ac587590b9cdeeeee54ff15276d31104f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc84759ac587590b9cdeeeee54ff15276d31104f", "html_url": "https://github.com/rust-lang/rust/commit/dc84759ac587590b9cdeeeee54ff15276d31104f"}, {"sha": "b778269f543462e5a486e00b3f7be19b6185af9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b778269f543462e5a486e00b3f7be19b6185af9f", "html_url": "https://github.com/rust-lang/rust/commit/b778269f543462e5a486e00b3f7be19b6185af9f"}], "stats": {"total": 314, "additions": 157, "deletions": 157}, "files": [{"sha": "7aec86c2f39e64221b06d264345c33b8b10e6874", "filename": "README.md", "status": "modified", "additions": 157, "deletions": 157, "changes": 314, "blob_url": "https://github.com/rust-lang/rust/blob/766217f9ac49640371d3095b0c7c6390d3e63407/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/766217f9ac49640371d3095b0c7c6390d3e63407/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=766217f9ac49640371d3095b0c7c6390d3e63407", "patch": "@@ -15,6 +15,163 @@ Table of contents:\n *   [*clippy-service*](#link-with-clippy-service)\n *   [License](#license)\n \n+## Usage\n+\n+As a general rule clippy will only work with the *latest* Rust nightly for now.\n+\n+### As a Compiler Plugin\n+\n+Since stable Rust is backwards compatible, you should be able to\n+compile your stable programs with nightly Rust with clippy plugged in to\n+circumvent this.\n+\n+Add in your `Cargo.toml`:\n+\n+```toml\n+[dependencies]\n+clippy = \"*\"\n+```\n+\n+You then need to add `#![feature(plugin)]` and `#![plugin(clippy)]` to the top\n+of your crate entry point (`main.rs` or `lib.rs`).\n+\n+Sample `main.rs`:\n+\n+```rust\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+\n+\n+fn main(){\n+    let x = Some(1u8);\n+    match x {\n+        Some(y) => println!(\"{:?}\", y),\n+        _ => ()\n+    }\n+}\n+```\n+\n+Produces this warning:\n+\n+```terminal\n+src/main.rs:8:5: 11:6 warning: you seem to be trying to use match for destructuring a single type. Consider using `if let`, #[warn(single_match)] on by default\n+src/main.rs:8     match x {\n+src/main.rs:9         Some(y) => println!(\"{:?}\", y),\n+src/main.rs:10         _ => ()\n+src/main.rs:11     }\n+src/main.rs:8:5: 11:6 help: Try\n+if let Some(y) = x { println!(\"{:?}\", y) }\n+```\n+\n+### As a cargo subcommand (`cargo clippy`)\n+\n+An alternate way to use clippy is by installing clippy through cargo as a cargo\n+subcommand.\n+\n+```terminal\n+cargo install clippy\n+```\n+\n+Now you can run clippy by invoking `cargo clippy`, or\n+`rustup run nightly cargo clippy` directly from a directory that is usually\n+compiled with stable.\n+\n+In case you are not using rustup, you need to set the environment flag\n+`SYSROOT` during installation so clippy knows where to find `librustc` and\n+similar crates.\n+\n+```terminal\n+SYSROOT=/path/to/rustc/sysroot cargo install clippy\n+```\n+\n+### Running clippy from the command line without installing\n+\n+To have cargo compile your crate with clippy without needing `#![plugin(clippy)]`\n+in your code, you can use:\n+\n+```terminal\n+cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n+```\n+\n+*[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):*\n+Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n+\n+### Optional dependency\n+\n+If you want to make clippy an optional dependency, you can do the following:\n+\n+In your `Cargo.toml`:\n+\n+```toml\n+[dependencies]\n+clippy = {version = \"*\", optional = true}\n+\n+[features]\n+default = []\n+```\n+\n+And, in your `main.rs` or `lib.rs`:\n+\n+```rust\n+#![cfg_attr(feature=\"clippy\", feature(plugin))]\n+\n+#![cfg_attr(feature=\"clippy\", plugin(clippy))]\n+```\n+\n+Then build by enabling the feature: `cargo build --features \"clippy\"`\n+\n+Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n+`cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy`\n+(the `-Z no trans`, while not neccessary, will stop the compilation process after\n+typechecking (and lints) have completed, which can significantly reduce the runtime).\n+\n+## Configuration\n+\n+Some lints can be configured in a `clippy.toml` file. It contains basic `variable = value` mapping eg.\n+\n+```toml\n+blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n+cyclomatic-complexity-threshold = 30\n+```\n+\n+See the wiki for more information about which lints can be configured and the\n+meaning of the variables.\n+\n+You can also specify the path to the configuration file with:\n+\n+```rust\n+#![plugin(clippy(conf_file=\"path/to/clippy's/configuration\"))]\n+```\n+\n+To deactivate the \u201cfor further information visit *wiki-link*\u201d message you can\n+define the `CLIPPY_DISABLE_WIKI_LINKS` environment variable.\n+\n+### Allowing/denying lints\n+\n+You can add options  to `allow`/`warn`/`deny`:\n+\n+*   the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy)]`)\n+\n+*   all lints using both the `clippy` and `clippy_pedantic` lint groups (`#![deny(clippy)]`,\n+    `#![deny(clippy_pedantic)]`). Note that `clippy_pedantic` contains some very aggressive\n+    lints prone to false positives.\n+\n+*   only some lints (`#![deny(single_match, box_vec)]`, etc)\n+\n+*   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc\n+\n+Note: `deny` produces errors instead of warnings.\n+\n+## Link with clippy service\n+\n+`clippy-service` is a rust web initiative providing `rust-clippy` as a web service.\n+\n+Both projects are independent and maintained by different people\n+(even if some `clippy-service`'s contributions are authored by some `rust-clippy` members).\n+\n+You can check out this great service at [clippy.bashy.io](https://clippy.bashy.io/).\n+\n ## Lints\n \n There are 171 lints included in this crate:\n@@ -195,163 +352,6 @@ name\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n \n-## Usage\n-\n-As a general rule clippy will only work with the *latest* Rust nightly for now.\n-\n-### As a Compiler Plugin\n-\n-Since stable Rust is backwards compatible, you should be able to\n-compile your stable programs with nightly Rust with clippy plugged in to\n-circumvent this.\n-\n-Add in your `Cargo.toml`:\n-\n-```toml\n-[dependencies]\n-clippy = \"*\"\n-```\n-\n-You then need to add `#![feature(plugin)]` and `#![plugin(clippy)]` to the top\n-of your crate entry point (`main.rs` or `lib.rs`).\n-\n-Sample `main.rs`:\n-\n-```rust\n-#![feature(plugin)]\n-\n-#![plugin(clippy)]\n-\n-\n-fn main(){\n-    let x = Some(1u8);\n-    match x {\n-        Some(y) => println!(\"{:?}\", y),\n-        _ => ()\n-    }\n-}\n-```\n-\n-Produces this warning:\n-\n-```terminal\n-src/main.rs:8:5: 11:6 warning: you seem to be trying to use match for destructuring a single type. Consider using `if let`, #[warn(single_match)] on by default\n-src/main.rs:8     match x {\n-src/main.rs:9         Some(y) => println!(\"{:?}\", y),\n-src/main.rs:10         _ => ()\n-src/main.rs:11     }\n-src/main.rs:8:5: 11:6 help: Try\n-if let Some(y) = x { println!(\"{:?}\", y) }\n-```\n-\n-### As a cargo subcommand (`cargo clippy`)\n-\n-An alternate way to use clippy is by installing clippy through cargo as a cargo\n-subcommand.\n-\n-```terminal\n-cargo install clippy\n-```\n-\n-Now you can run clippy by invoking `cargo clippy`, or\n-`rustup run nightly cargo clippy` directly from a directory that is usually\n-compiled with stable.\n-\n-In case you are not using rustup, you need to set the environment flag\n-`SYSROOT` during installation so clippy knows where to find `librustc` and\n-similar crates.\n-\n-```terminal\n-SYSROOT=/path/to/rustc/sysroot cargo install clippy\n-```\n-\n-### Running clippy from the command line without installing\n-\n-To have cargo compile your crate with clippy without needing `#![plugin(clippy)]`\n-in your code, you can use:\n-\n-```terminal\n-cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n-```\n-\n-*[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):*\n-Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n-\n-### Optional dependency\n-\n-If you want to make clippy an optional dependency, you can do the following:\n-\n-In your `Cargo.toml`:\n-\n-```toml\n-[dependencies]\n-clippy = {version = \"*\", optional = true}\n-\n-[features]\n-default = []\n-```\n-\n-And, in your `main.rs` or `lib.rs`:\n-\n-```rust\n-#![cfg_attr(feature=\"clippy\", feature(plugin))]\n-\n-#![cfg_attr(feature=\"clippy\", plugin(clippy))]\n-```\n-\n-Then build by enabling the feature: `cargo build --features \"clippy\"`\n-\n-Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n-`cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy`\n-(the `-Z no trans`, while not neccessary, will stop the compilation process after\n-typechecking (and lints) have completed, which can significantly reduce the runtime).\n-\n-## Configuration\n-\n-Some lints can be configured in a `clippy.toml` file. It contains basic `variable = value` mapping eg.\n-\n-```toml\n-blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n-cyclomatic-complexity-threshold = 30\n-```\n-\n-See the wiki for more information about which lints can be configured and the\n-meaning of the variables.\n-\n-You can also specify the path to the configuration file with:\n-\n-```rust\n-#![plugin(clippy(conf_file=\"path/to/clippy's/configuration\"))]\n-```\n-\n-To deactivate the \u201cfor further information visit *wiki-link*\u201d message you can\n-define the `CLIPPY_DISABLE_WIKI_LINKS` environment variable.\n-\n-### Allowing/denying lints\n-\n-You can add options  to `allow`/`warn`/`deny`:\n-\n-*   the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy)]`)\n-\n-*   all lints using both the `clippy` and `clippy_pedantic` lint groups (`#![deny(clippy)]`,\n-    `#![deny(clippy_pedantic)]`). Note that `clippy_pedantic` contains some very aggressive\n-    lints prone to false positives.\n-\n-*   only some lints (`#![deny(single_match, box_vec)]`, etc)\n-\n-*   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc\n-\n-Note: `deny` produces errors instead of warnings.\n-\n-## Link with clippy service\n-\n-`clippy-service` is a rust web initiative providing `rust-clippy` as a web service.\n-\n-Both projects are independent and maintained by different people\n-(even if some `clippy-service`'s contributions are authored by some `rust-clippy` members).\n-\n-You can check out this great service at [clippy.bashy.io](https://clippy.bashy.io/).\n-\n ## License\n \n Licensed under [MPL](https://www.mozilla.org/MPL/2.0/)."}]}