{"sha": "fc3e591bdb28745ef29e90de2c1625e6d4e4a229", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjM2U1OTFiZGIyODc0NWVmMjllOTBkZTJjMTYyNWU2ZDRlNGEyMjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-24T10:49:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-24T10:49:36Z"}, "message": "Avoid monomorphization", "tree": {"sha": "bf0d57ad3c6ba18bff21cfdc3a2eb97784a764d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0d57ad3c6ba18bff21cfdc3a2eb97784a764d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc3e591bdb28745ef29e90de2c1625e6d4e4a229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3e591bdb28745ef29e90de2c1625e6d4e4a229", "html_url": "https://github.com/rust-lang/rust/commit/fc3e591bdb28745ef29e90de2c1625e6d4e4a229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc3e591bdb28745ef29e90de2c1625e6d4e4a229/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87", "html_url": "https://github.com/rust-lang/rust/commit/e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "ae69cf1a7438183407f8e5adfe0d3f742df0f97e", "filename": "docs/dev/style.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fc3e591bdb28745ef29e90de2c1625e6d4e4a229/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc3e591bdb28745ef29e90de2c1625e6d4e4a229/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=fc3e591bdb28745ef29e90de2c1625e6d4e4a229", "patch": "@@ -231,6 +231,41 @@ if words.len() != 2 {\n }\n ```\n \n+# Avoid Monomorphization\n+\n+Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*.\n+This allows for exceptionally good performance, but leads to increased compile times.\n+Runtime performance obeys 80%/20% rule -- only a small fraction of code is hot.\n+Compile time **does not** obey this rule -- all code has to be compiled.\n+For this reason, avoid making a lot of code type parametric, *especially* on the boundaries between crates.\n+\n+```rust\n+// Good\n+fn frbonicate(f: impl FnMut()) {\n+    frobnicate_impl(&mut f)\n+}\n+fn frobnicate_impl(f: &mut dyn FnMut()) {\n+    // lots of code\n+}\n+\n+// Not as good\n+fn frbonicate(f: impl FnMut()) {\n+    // lots of code\n+}\n+```\n+\n+Avoid `AsRef` polymorphism, it pays back only for widely used libraries:\n+\n+```rust\n+// Good\n+fn frbonicate(f: &Path) {\n+}\n+\n+// Not as good\n+fn frbonicate(f: impl AsRef<Path>) {\n+}\n+```\n+\n # Documentation\n \n For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines."}]}