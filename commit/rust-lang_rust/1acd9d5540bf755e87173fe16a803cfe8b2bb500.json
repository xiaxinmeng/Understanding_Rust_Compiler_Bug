{"sha": "1acd9d5540bf755e87173fe16a803cfe8b2bb500", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhY2Q5ZDU1NDBiZjc1NWU4NzE3M2ZlMTZhODAzY2ZlOGIyYmI1MDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-06T14:22:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-06T14:22:00Z"}, "message": "Merge #1780\n\n1780: add option to disable notify r=matklad a=matklad\n\nThis should help if notify uses 100% of CPU. Put\r\n\r\n```\r\n{\r\n    \"rust-analyzer.useClientWatching\": true,\r\n}\r\n```\r\n\r\ninto `.vscode/settings.json` (or appropriate config of your editor) to use editor's file watching capabilites instead of notify\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a5fb9afa541a4e6ab5818530b3fd19d5e461ef9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5fb9afa541a4e6ab5818530b3fd19d5e461ef9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1acd9d5540bf755e87173fe16a803cfe8b2bb500", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcmuICRBK7hj4Ov3rIwAAdHIIAJ1OHnS9Fa4wvhSPmM7T9fQg\nOHs7A9Uv2isoFyP5e1cb2KdE1MQ7dq/O8VpQgOL+53SnMh3bFeo5D4fAXyqNr+3j\nrmcm+k2pLq9AFsWx4innPWKnVP8aCdAhtSuQBveOpP+/sdc9VwqsX+V69O1l35Ju\nXwYH950j3PfHXOgUeujDFFjnQx+fYc5dm1fTeDybxLsRmb8XzXHTxCb7p8/YGusj\nQ+4GltWrtI6ASyuYUtDls3zB6Rt/VrF8TsXWpE2r3RbM/o7TeuycL4iwLwljZUj9\n4LKYi9K+i5SGHF50RuhCuwW1W4EBgC1vEPXNTk+8SB9IFabWejgXOlpW+UFjIWA=\n=5xWF\n-----END PGP SIGNATURE-----\n", "payload": "tree a5fb9afa541a4e6ab5818530b3fd19d5e461ef9e\nparent 007737a0e7dd2866e02a6398d8ee4aa7d5051d8c\nparent 28df377759ee5625b0dad4c797be306c8d2624e3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1567779720 +0000\ncommitter GitHub <noreply@github.com> 1567779720 +0000\n\nMerge #1780\n\n1780: add option to disable notify r=matklad a=matklad\n\nThis should help if notify uses 100% of CPU. Put\r\n\r\n```\r\n{\r\n    \"rust-analyzer.useClientWatching\": true,\r\n}\r\n```\r\n\r\ninto `.vscode/settings.json` (or appropriate config of your editor) to use editor's file watching capabilites instead of notify\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1acd9d5540bf755e87173fe16a803cfe8b2bb500", "html_url": "https://github.com/rust-lang/rust/commit/1acd9d5540bf755e87173fe16a803cfe8b2bb500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1acd9d5540bf755e87173fe16a803cfe8b2bb500/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007737a0e7dd2866e02a6398d8ee4aa7d5051d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/007737a0e7dd2866e02a6398d8ee4aa7d5051d8c", "html_url": "https://github.com/rust-lang/rust/commit/007737a0e7dd2866e02a6398d8ee4aa7d5051d8c"}, {"sha": "28df377759ee5625b0dad4c797be306c8d2624e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/28df377759ee5625b0dad4c797be306c8d2624e3", "html_url": "https://github.com/rust-lang/rust/commit/28df377759ee5625b0dad4c797be306c8d2624e3"}], "stats": {"total": 222, "additions": 151, "deletions": 71}, "files": [{"sha": "f93f11a82951fa8ef8c474c5c337c83f617a9279", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -958,7 +958,7 @@ dependencies = [\n  \"ra_hir 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n  \"ra_project_model 0.1.0\",\n- \"ra_vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_vfs_glob 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1065,7 +1065,7 @@ dependencies = [\n  \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n- \"ra_vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_vfs_glob 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1165,7 +1165,7 @@ dependencies = [\n \n [[package]]\n name = \"ra_vfs\"\n-version = \"0.3.0\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1183,7 +1183,7 @@ name = \"ra_vfs_glob\"\n version = \"0.1.0\"\n dependencies = [\n  \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ra_vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1945,7 +1945,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n \"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n-\"checksum ra_vfs 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ccc8b709e0b7ceec822513451b610df1b9370b01953a8bc545a041a6b3bfef01\"\n+\"checksum ra_vfs 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fdf6a0926414eb0c00866eb9274894182302f879cd06b5459c1d8ee7f1234aed\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n \"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\"\n \"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\""}, {"sha": "62850746feb1444d340e7676ff1f697c9ae6c1ce", "filename": "crates/ra_batch/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_batch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_batch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2FCargo.toml?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -9,7 +9,7 @@ log = \"0.4.5\"\n rustc-hash = \"1.0\"\n crossbeam-channel = \"0.3.5\"\n \n-ra_vfs = \"0.3.0\"\n+ra_vfs = \"0.4.0\"\n ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_api = { path = \"../ra_ide_api\" }"}, {"sha": "07a7e0c8625b7a1ab03eb80f38fee270618d78c8", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -6,7 +6,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{CrateGraph, FileId, SourceRootId};\n use ra_ide_api::{AnalysisChange, AnalysisHost, FeatureFlags};\n use ra_project_model::{PackageRoot, ProjectWorkspace};\n-use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask};\n+use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use ra_vfs_glob::RustPackageFilterBuilder;\n \n type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n@@ -37,6 +37,7 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n             })\n             .collect(),\n         sender,\n+        Watch(false),\n     );\n     let crate_graph = ws.to_crate_graph(&mut |path: &Path| {\n         let vfs_file = vfs.load(path);"}, {"sha": "46a0f958c069b9abfa2735ada19404c2141fb3ae", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -16,7 +16,7 @@ lsp-types = { version = \"0.61.0\", features = [\"proposed\"] }\n rustc-hash = \"1.0\"\n parking_lot = \"0.9.0\"\n jod-thread = \"0.1.0\"\n-ra_vfs = \"0.3.0\"\n+ra_vfs = \"0.4.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_ide_api = { path = \"../ra_ide_api\" }"}, {"sha": "cf53e7c4ce678968c476c1e916d3dbd5834275b4", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -15,6 +15,8 @@ pub struct ServerConfig {\n     pub publish_decorations: bool,\n \n     pub exclude_globs: Vec<String>,\n+    #[serde(deserialize_with = \"nullable_bool_false\")]\n+    pub use_client_watching: bool,\n \n     pub lru_capacity: Option<usize>,\n \n@@ -31,6 +33,7 @@ impl Default for ServerConfig {\n         ServerConfig {\n             publish_decorations: false,\n             exclude_globs: Vec::new(),\n+            use_client_watching: false,\n             lru_capacity: None,\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),"}, {"sha": "25fa51b8a77f185ed10831a3e1eb018152981d77", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 118, "deletions": 56, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -9,8 +9,9 @@ use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestI\n use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_ide_api::{Canceled, FeatureFlags, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n-use ra_vfs::VfsTask;\n+use ra_vfs::{VfsTask, Watch};\n use relative_path::RelativePathBuf;\n+use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n use threadpool::ThreadPool;\n \n@@ -55,72 +56,96 @@ pub fn main_loop(\n ) -> Result<()> {\n     log::info!(\"server_config: {:#?}\", config);\n \n-    // FIXME: support dynamic workspace loading.\n-    let workspaces = {\n-        let mut loaded_workspaces = Vec::new();\n-        for ws_root in &ws_roots {\n-            let workspace = ra_project_model::ProjectWorkspace::discover_with_sysroot(\n-                ws_root.as_path(),\n-                config.with_sysroot,\n-            );\n-            match workspace {\n-                Ok(workspace) => loaded_workspaces.push(workspace),\n-                Err(e) => {\n-                    log::error!(\"loading workspace failed: {}\", e);\n+    let mut loop_state = LoopState::default();\n+    let mut world_state = {\n+        // FIXME: support dynamic workspace loading.\n+        let workspaces = {\n+            let mut loaded_workspaces = Vec::new();\n+            for ws_root in &ws_roots {\n+                let workspace = ra_project_model::ProjectWorkspace::discover_with_sysroot(\n+                    ws_root.as_path(),\n+                    config.with_sysroot,\n+                );\n+                match workspace {\n+                    Ok(workspace) => loaded_workspaces.push(workspace),\n+                    Err(e) => {\n+                        log::error!(\"loading workspace failed: {}\", e);\n+\n+                        show_message(\n+                            req::MessageType::Error,\n+                            format!(\"rust-analyzer failed to load workspace: {}\", e),\n+                            &connection.sender,\n+                        );\n+                    }\n+                }\n+            }\n+            loaded_workspaces\n+        };\n \n+        let globs = config\n+            .exclude_globs\n+            .iter()\n+            .map(|glob| ra_vfs_glob::Glob::new(glob))\n+            .collect::<std::result::Result<Vec<_>, _>>()?;\n+\n+        if config.use_client_watching {\n+            let registration_options = req::DidChangeWatchedFilesRegistrationOptions {\n+                watchers: workspaces\n+                    .iter()\n+                    .flat_map(|ws| ws.to_roots())\n+                    .filter(|root| root.is_member())\n+                    .map(|root| format!(\"{}/**/*.rs\", root.path().display()))\n+                    .map(|glob_pattern| req::FileSystemWatcher { glob_pattern, kind: None })\n+                    .collect(),\n+            };\n+            let registration = req::Registration {\n+                id: \"file-watcher\".to_string(),\n+                method: \"workspace/didChangeWatchedFiles\".to_string(),\n+                register_options: Some(serde_json::to_value(registration_options).unwrap()),\n+            };\n+            let params = req::RegistrationParams { registrations: vec![registration] };\n+            let request =\n+                request_new::<req::RegisterCapability>(loop_state.next_request_id(), params);\n+            connection.sender.send(request.into()).unwrap();\n+        }\n+\n+        let feature_flags = {\n+            let mut ff = FeatureFlags::default();\n+            for (flag, value) in config.feature_flags {\n+                if let Err(_) = ff.set(flag.as_str(), value) {\n+                    log::error!(\"unknown feature flag: {:?}\", flag);\n                     show_message(\n                         req::MessageType::Error,\n-                        format!(\"rust-analyzer failed to load workspace: {}\", e),\n+                        format!(\"unknown feature flag: {:?}\", flag),\n                         &connection.sender,\n                     );\n                 }\n             }\n-        }\n-        loaded_workspaces\n-    };\n-\n-    let globs = config\n-        .exclude_globs\n-        .iter()\n-        .map(|glob| ra_vfs_glob::Glob::new(glob))\n-        .collect::<std::result::Result<Vec<_>, _>>()?;\n-\n-    let feature_flags = {\n-        let mut ff = FeatureFlags::default();\n-        for (flag, value) in config.feature_flags {\n-            if let Err(_) = ff.set(flag.as_str(), value) {\n-                log::error!(\"unknown feature flag: {:?}\", flag);\n-                show_message(\n-                    req::MessageType::Error,\n-                    format!(\"unknown feature flag: {:?}\", flag),\n-                    &connection.sender,\n-                );\n-            }\n-        }\n-        ff\n+            ff\n+        };\n+        log::info!(\"feature_flags: {:#?}\", feature_flags);\n+\n+        WorldState::new(\n+            ws_roots,\n+            workspaces,\n+            config.lru_capacity,\n+            &globs,\n+            Watch(!config.use_client_watching),\n+            Options {\n+                publish_decorations: config.publish_decorations,\n+                supports_location_link: client_caps\n+                    .text_document\n+                    .and_then(|it| it.definition)\n+                    .and_then(|it| it.link_support)\n+                    .unwrap_or(false),\n+            },\n+            feature_flags,\n+        )\n     };\n-    log::info!(\"feature_flags: {:#?}\", feature_flags);\n-\n-    let mut world_state = WorldState::new(\n-        ws_roots,\n-        workspaces,\n-        config.lru_capacity,\n-        &globs,\n-        Options {\n-            publish_decorations: config.publish_decorations,\n-            supports_location_link: client_caps\n-                .text_document\n-                .and_then(|it| it.definition)\n-                .and_then(|it| it.link_support)\n-                .unwrap_or(false),\n-        },\n-        feature_flags,\n-    );\n \n     let pool = ThreadPool::new(THREADPOOL_SIZE);\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (libdata_sender, libdata_receiver) = unbounded::<LibraryData>();\n-    let mut loop_state = LoopState::default();\n \n     log::info!(\"server initialized, serving requests\");\n     {\n@@ -227,6 +252,8 @@ impl fmt::Debug for Event {\n \n #[derive(Debug, Default)]\n struct LoopState {\n+    next_request_id: u64,\n+    pending_responses: FxHashSet<RequestId>,\n     pending_requests: PendingRequests,\n     subscriptions: Subscriptions,\n     // We try not to index more than MAX_IN_FLIGHT_LIBS libraries at the same\n@@ -236,6 +263,16 @@ struct LoopState {\n     workspace_loaded: bool,\n }\n \n+impl LoopState {\n+    fn next_request_id(&mut self) -> RequestId {\n+        self.next_request_id += 1;\n+        let res: RequestId = self.next_request_id.into();\n+        let inserted = self.pending_responses.insert(res.clone());\n+        assert!(inserted);\n+        res\n+    }\n+}\n+\n fn loop_turn(\n     pool: &ThreadPool,\n     task_sender: &Sender<Task>,\n@@ -290,7 +327,12 @@ fn loop_turn(\n                 )?;\n                 state_changed = true;\n             }\n-            Message::Response(resp) => log::error!(\"unexpected response: {:?}\", resp),\n+            Message::Response(resp) => {\n+                let removed = loop_state.pending_responses.remove(&resp.id);\n+                if !removed {\n+                    log::error!(\"unexpected response: {:?}\", resp)\n+                }\n+            }\n         },\n     };\n \n@@ -479,6 +521,18 @@ fn on_notification(\n         }\n         Err(not) => not,\n     };\n+    let not = match notification_cast::<req::DidChangeWatchedFiles>(not) {\n+        Ok(params) => {\n+            let mut vfs = state.vfs.write();\n+            for change in params.changes {\n+                let uri = change.uri;\n+                let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n+                vfs.notify_changed(path)\n+            }\n+            return Ok(());\n+        }\n+        Err(not) => not,\n+    };\n     log::error!(\"unhandled notification: {:?}\", not);\n     Ok(())\n }\n@@ -682,3 +736,11 @@ where\n {\n     Notification::new(N::METHOD.to_string(), params)\n }\n+\n+fn request_new<R>(id: RequestId, params: R::Params) -> Request\n+where\n+    R: lsp_types::request::Request,\n+    R::Params: Serialize,\n+{\n+    Request::new(id, R::METHOD.to_string(), params)\n+}"}, {"sha": "0540f166ee89ad4440c49c5d5d52e87f5dd17922", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -5,10 +5,11 @@ use serde::{Deserialize, Serialize};\n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n     CodeLensParams, CompletionParams, CompletionResponse, DidChangeConfigurationParams,\n-    DocumentOnTypeFormattingParams, DocumentSymbolParams, DocumentSymbolResponse, Hover,\n-    InitializeResult, MessageType, PublishDiagnosticsParams, ReferenceParams, ShowMessageParams,\n-    SignatureHelp, TextDocumentEdit, TextDocumentPositionParams, TextEdit, WorkspaceEdit,\n-    WorkspaceSymbolParams,\n+    DidChangeWatchedFilesParams, DidChangeWatchedFilesRegistrationOptions,\n+    DocumentOnTypeFormattingParams, DocumentSymbolParams, DocumentSymbolResponse,\n+    FileSystemWatcher, Hover, InitializeResult, MessageType, PublishDiagnosticsParams,\n+    ReferenceParams, Registration, RegistrationParams, ShowMessageParams, SignatureHelp,\n+    TextDocumentEdit, TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,\n };\n \n pub enum AnalyzerStatus {}"}, {"sha": "086ecd587f6356ee55289b448aaac98dcd0faaec", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -12,7 +12,7 @@ use ra_ide_api::{\n     SourceRootId,\n };\n use ra_project_model::ProjectWorkspace;\n-use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask};\n+use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n use relative_path::RelativePathBuf;\n \n@@ -60,6 +60,7 @@ impl WorldState {\n         workspaces: Vec<ProjectWorkspace>,\n         lru_capacity: Option<usize>,\n         exclude_globs: &[Glob],\n+        watch: Watch,\n         options: Options,\n         feature_flags: FeatureFlags,\n     ) -> WorldState {\n@@ -85,7 +86,7 @@ impl WorldState {\n         }\n         let (task_sender, task_receiver) = unbounded();\n         let task_sender = Box::new(move |t| task_sender.send(t).unwrap());\n-        let (mut vfs, vfs_roots) = Vfs::new(roots, task_sender);\n+        let (mut vfs, vfs_roots) = Vfs::new(roots, task_sender, watch);\n         let roots_to_scan = vfs_roots.len();\n         for r in vfs_roots {\n             let vfs_root_path = vfs.root2path(r);"}, {"sha": "d1073b2be84b000695124c062f68456de3a0d4d6", "filename": "crates/ra_vfs_glob/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_vfs_glob%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/crates%2Fra_vfs_glob%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs_glob%2FCargo.toml?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -5,5 +5,5 @@ version = \"0.1.0\"\n authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n-ra_vfs = \"0.3.0\"\n+ra_vfs = \"0.4.0\"\n globset = \"0.4.4\""}, {"sha": "56c2d9eb50a5db29592e08d5a4dc84b3d8b444db", "filename": "docs/user/README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -74,6 +74,8 @@ See https://github.com/microsoft/vscode/issues/72308[microsoft/vscode#72308] for\n * `rust-analyzer.excludeGlobs`: a list of glob-patterns for exclusion (see globset [docs](https://docs.rs/globset) for syntax).\n   Note: glob patterns are applied to all Cargo packages and a rooted at a package root.\n   This is not very intuitive and a limitation of a current implementation.\n+* `rust-analyzer.useClientWatching`: use client provided file watching instead\n+  of notify watching.\n * `rust-analyzer.cargo-watch.check-arguments`: cargo-watch check arguments.\n   (e.g: `--features=\"shumway,pdf\"` will run as `cargo watch -x \"check --features=\"shumway,pdf\"\"` )\n * `rust-analyzer.trace.server`: enables internal logging"}, {"sha": "7a48d6794fa4a523bc9e79561892319e5b5a5274", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -205,6 +205,11 @@\n                     \"default\": [],\n                     \"description\": \"Paths to exclude from analysis\"\n                 },\n+                \"rust-analyzer.useClientWatching\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"description\": \"client provided file watching instead of notify watching.\"\n+                },\n                 \"rust-analyzer.cargo-watch.arguments\": {\n                     \"type\": \"string\",\n                     \"description\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\","}, {"sha": "a4581485cccb83b764d0c7bd1f22e017acb575f6", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -23,6 +23,7 @@ export class Config {\n     public lruCapacity: null | number = null;\n     public displayInlayHints = true;\n     public excludeGlobs = [];\n+    public useClientWatching = false;\n     public featureFlags = {};\n     public cargoWatchOptions: CargoWatchOptions = {\n         enableOnStartup: 'ask',\n@@ -133,6 +134,9 @@ export class Config {\n         if (config.has('excludeGlobs')) {\n             this.excludeGlobs = config.get('excludeGlobs') || [];\n         }\n+        if (config.has('useClientWatching')) {\n+            this.useClientWatching = config.get('useClientWatching') || false;\n+        }\n         if (config.has('featureFlags')) {\n             this.featureFlags = config.get('featureFlags') || {};\n         }"}, {"sha": "ff50fcd994cf3e72a7979463e41ee480b0a79ca6", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1acd9d5540bf755e87173fe16a803cfe8b2bb500/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1acd9d5540bf755e87173fe16a803cfe8b2bb500/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=1acd9d5540bf755e87173fe16a803cfe8b2bb500", "patch": "@@ -46,6 +46,7 @@ export class Server {\n                     Server.config.showWorkspaceLoadedNotification,\n                 lruCapacity: Server.config.lruCapacity,\n                 excludeGlobs: Server.config.excludeGlobs,\n+                useClientWatching: Server.config.useClientWatching,\n                 featureFlags: Server.config.featureFlags\n             },\n             traceOutputChannel"}]}