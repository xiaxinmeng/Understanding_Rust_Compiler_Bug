{"sha": "24be49f7dd927d74af8a5adae672fa35234740e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YmU0OWY3ZGQ5MjdkNzRhZjhhNWFkYWU2NzJmYTM1MjM0NzQwZTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T08:29:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T08:29:56Z"}, "message": "add a 'tcx lifetime to Lvalue in preparation for statics", "tree": {"sha": "8232b783574b856fc4df5e832b7761f4a3e7b009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8232b783574b856fc4df5e832b7761f4a3e7b009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24be49f7dd927d74af8a5adae672fa35234740e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYCdIEAAoJEFbW7qD8Z6xGm60P/0z3H7O2zwgULHMhUvl80o8d\n2adtpIV3sWFBFU4H6RsmZhrup5ZhKyqb40Xdjzbkd1LLAncZBDvjiA61txA/JOx+\nX77qNfvCnCkXG486De1cDCdNHL0k8+Q1ifNTvm2WFQgpSeby4Yu6s2bfOC/CYSgs\n1Etnm3ZCw5aBELE6NtV02y2iQTlx7AxNTa+Hppe6lzonBSPFCJhqW/L4xwynzdTF\npTR2FeK4y+VBSjoYOB7ctQOFLxeOr5aSs0oKF54grOm097x+wMWer/NkwXf/jda1\nr3zTJsGq3gEsfA2Lpc5rmN5jy+KvJea7f1z1Sv7xjrDMAttnMUOozBUoDKJQLGlX\nUgvI/fgay6pkcGmy/hwfRd7ih4KxCDaXkSAzzN692H8xBDmROt8aHruzyf1zl4We\njGX+mcjcfT5GmQTM5mzTc/AbGqtbKuUDecZ87ZiAg/IcrVUs8zupufiW/MoTV4np\nnJI/LNGSFwpsqBWJ/pNmZ+BHfX+367rNDhdWyrIYXUIl766DeYR2LlZRzPRSz8bZ\nBFk4Yq6vdb6W57CHCOP5N77ujJ7TTb557Anc11ddVfarwuhtyuSPkzZT4UCZCArC\nhqBOWdl54joJ1PqazE716QB5fIpg4X2nwDolL6l1nOHcyObNYIx3dNdVvCBAs5ov\nr2GuRgOyfc8oMxUMRuLr\n=lDF5\n-----END PGP SIGNATURE-----", "payload": "tree 8232b783574b856fc4df5e832b7761f4a3e7b009\nparent ed679c3d238b7ece32d5072067d1a192318c0945\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477038596 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477038596 +0200\n\nadd a 'tcx lifetime to Lvalue in preparation for statics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24be49f7dd927d74af8a5adae672fa35234740e0", "html_url": "https://github.com/rust-lang/rust/commit/24be49f7dd927d74af8a5adae672fa35234740e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24be49f7dd927d74af8a5adae672fa35234740e0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed679c3d238b7ece32d5072067d1a192318c0945", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed679c3d238b7ece32d5072067d1a192318c0945", "html_url": "https://github.com/rust-lang/rust/commit/ed679c3d238b7ece32d5072067d1a192318c0945"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "2663ea159dcddbee102e67ac48c319f0867f4dca", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24be49f7dd927d74af8a5adae672fa35234740e0/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24be49f7dd927d74af8a5adae672fa35234740e0/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=24be49f7dd927d74af8a5adae672fa35234740e0", "patch": "@@ -77,7 +77,7 @@ pub struct Frame<'a, 'tcx: 'a> {\n     pub return_to_block: StackPopCleanup,\n \n     /// The location where the result of the current stack frame should be written to.\n-    pub return_lvalue: Lvalue,\n+    pub return_lvalue: Lvalue<'tcx>,\n \n     /// The list of locals for this stack frame, stored in order as\n     /// `[arguments..., variables..., temporaries...]`. The locals are stored as `Value`s, which\n@@ -99,7 +99,7 @@ pub struct Frame<'a, 'tcx: 'a> {\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub enum Lvalue {\n+pub enum Lvalue<'tcx> {\n     /// An lvalue referring to a value allocated in the `Memory` system.\n     Ptr {\n         ptr: Pointer,\n@@ -347,7 +347,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         span: codemap::Span,\n         mir: CachedMir<'a, 'tcx>,\n         substs: &'tcx Substs<'tcx>,\n-        return_lvalue: Lvalue,\n+        return_lvalue: Lvalue<'tcx>,\n         return_to_block: StackPopCleanup,\n     ) -> EvalResult<'tcx, ()> {\n         ::log_settings::settings().indentation += 1;\n@@ -406,7 +406,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         op: mir::BinOp,\n         left: &mir::Operand<'tcx>,\n         right: &mir::Operand<'tcx>,\n-        dest: Lvalue,\n+        dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n         let (val, overflowed) = self.binop_with_overflow(op, left, right)?;\n@@ -421,7 +421,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         op: mir::BinOp,\n         left: &mir::Operand<'tcx>,\n         right: &mir::Operand<'tcx>,\n-        dest: Lvalue,\n+        dest: Lvalue<'tcx>,\n     ) -> EvalResult<'tcx, bool> {\n         let (val, overflowed) = self.binop_with_overflow(op, left, right)?;\n         self.write_primval(dest, val)?;\n@@ -430,7 +430,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     fn assign_fields<I: IntoIterator<Item = u64>>(\n         &mut self,\n-        dest: Lvalue,\n+        dest: Lvalue<'tcx>,\n         offsets: I,\n         operands: &[mir::Operand<'tcx>],\n     ) -> EvalResult<'tcx, ()> {\n@@ -863,7 +863,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    fn eval_lvalue(&mut self, mir_lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue> {\n+    fn eval_lvalue(&mut self, mir_lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue<'tcx>> {\n         use rustc::mir::repr::Lvalue::*;\n         let lvalue = match *mir_lvalue {\n             Local(mir::RETURN_POINTER) => self.frame().return_lvalue,\n@@ -900,7 +900,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn eval_lvalue_projection(\n         &mut self,\n         proj: &mir::LvalueProjection<'tcx>,\n-    ) -> EvalResult<'tcx, Lvalue> {\n+    ) -> EvalResult<'tcx, Lvalue<'tcx>> {\n         let base = self.eval_lvalue(&proj.base)?;\n         let base_ty = self.lvalue_ty(&proj.base);\n         let base_layout = self.type_layout(base_ty);\n@@ -1071,7 +1071,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    fn force_allocation(&mut self, lvalue: Lvalue) -> EvalResult<'tcx, Lvalue> {\n+    fn force_allocation(&mut self, lvalue: Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue<'tcx>> {\n         let new_lvalue = match lvalue {\n             Lvalue::Local { frame, local } => {\n                 let ptr = match self.stack[frame].get_local(local) {\n@@ -1157,7 +1157,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     fn write_primval(\n         &mut self,\n-        dest: Lvalue,\n+        dest: Lvalue<'tcx>,\n         val: PrimVal,\n     ) -> EvalResult<'tcx, ()> {\n         match dest {\n@@ -1175,7 +1175,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn write_value(\n         &mut self,\n         src_val: Value,\n-        dest: Lvalue,\n+        dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n         match dest {\n@@ -1441,7 +1441,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    fn dump_local(&self, lvalue: Lvalue) {\n+    fn dump_local(&self, lvalue: Lvalue<'tcx>) {\n         if let Lvalue::Local { frame, local } = lvalue {\n             if let Some(val) = self.stack[frame].get_local(local) {\n                 match val {\n@@ -1473,7 +1473,7 @@ impl<'a, 'tcx: 'a> Frame<'a, 'tcx> {\n     }\n }\n \n-impl Lvalue {\n+impl<'tcx> Lvalue<'tcx> {\n     pub fn from_ptr(ptr: Pointer) -> Self {\n         Lvalue::Ptr { ptr: ptr, extra: LvalueExtra::None }\n     }\n@@ -1492,7 +1492,7 @@ impl Lvalue {\n         ptr\n     }\n \n-    fn elem_ty_and_len<'tcx>(self, ty: Ty<'tcx>) -> (Ty<'tcx>, u64) {\n+    fn elem_ty_and_len(self, ty: Ty<'tcx>) -> (Ty<'tcx>, u64) {\n         match ty.sty {\n             ty::TyArray(elem, n) => (elem, n as u64),\n "}, {"sha": "c4289375432f66810ba2947c0a3730c6cfd41c34", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24be49f7dd927d74af8a5adae672fa35234740e0/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24be49f7dd927d74af8a5adae672fa35234740e0/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=24be49f7dd927d74af8a5adae672fa35234740e0", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n         args: &[mir::Operand<'tcx>],\n-        dest: Lvalue,\n+        dest: Lvalue<'tcx>,\n         dest_ty: Ty<'tcx>,\n         dest_layout: &'tcx Layout,\n     ) -> EvalResult<'tcx, ()> {"}, {"sha": "e8be90cf91aec80f02b52f40e4e0087318e4841e", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24be49f7dd927d74af8a5adae672fa35234740e0/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24be49f7dd927d74af8a5adae672fa35234740e0/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=24be49f7dd927d74af8a5adae672fa35234740e0", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n         fn_ty: &'tcx BareFnTy,\n-        destination: Option<(Lvalue, mir::BasicBlock)>,\n+        destination: Option<(Lvalue<'tcx>, mir::BasicBlock)>,\n         arg_operands: &[mir::Operand<'tcx>],\n         span: Span,\n     ) -> EvalResult<'tcx, ()> {\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self,\n         def_id: DefId,\n         args: &[mir::Operand<'tcx>],\n-        dest: Lvalue,\n+        dest: Lvalue<'tcx>,\n         dest_size: usize,\n     ) -> EvalResult<'tcx, ()> {\n         let name = self.tcx.item_name(def_id);"}]}