{"sha": "9c07f424da9332c2728e04c124b88264dceb17de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDdmNDI0ZGE5MzMyYzI3MjhlMDRjMTI0Yjg4MjY0ZGNlYjE3ZGU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-23T13:00:22Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-23T13:00:22Z"}, "message": "Use rustc traits instead of our own", "tree": {"sha": "5cb0d6f96467d8ab4d6aea121f58d9a913621a8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb0d6f96467d8ab4d6aea121f58d9a913621a8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c07f424da9332c2728e04c124b88264dceb17de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c07f424da9332c2728e04c124b88264dceb17de", "html_url": "https://github.com/rust-lang/rust/commit/9c07f424da9332c2728e04c124b88264dceb17de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c07f424da9332c2728e04c124b88264dceb17de/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d38f8dffbeca5c5f81c3c72d42d4287c0acb1fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d38f8dffbeca5c5f81c3c72d42d4287c0acb1fc", "html_url": "https://github.com/rust-lang/rust/commit/4d38f8dffbeca5c5f81c3c72d42d4287c0acb1fc"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "84de97488c51fc1beca11fe7878032b8280076ed", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c07f424da9332c2728e04c124b88264dceb17de/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c07f424da9332c2728e04c124b88264dceb17de/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=9c07f424da9332c2728e04c124b88264dceb17de", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::{FloatTy, IntTy, UintTy};\n use error::{EvalResult, EvalError};\n use eval_context::EvalContext;\n use value::PrimVal;\n-use memory::{MemoryPointer, HasDataLayout};\n+use memory::{MemoryPointer, PointerArithmetic};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn cast_primval("}, {"sha": "ad7326761a622f8a642f69109376044c8e4ac98b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c07f424da9332c2728e04c124b88264dceb17de/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c07f424da9332c2728e04c124b88264dceb17de/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9c07f424da9332c2728e04c124b88264dceb17de", "patch": "@@ -68,30 +68,30 @@ pub struct MemoryPointer {\n     pub offset: u64,\n }\n \n-impl MemoryPointer {\n+impl<'tcx> MemoryPointer {\n     pub fn new(alloc_id: AllocId, offset: u64) -> Self {\n         MemoryPointer { alloc_id, offset }\n     }\n \n-    pub(crate) fn wrapping_signed_offset<'a, L: HasDataLayout<'a>>(self, i: i64, l: L) -> Self {\n+    pub(crate) fn wrapping_signed_offset<L: PointerArithmetic>(self, i: i64, l: L) -> Self {\n         MemoryPointer::new(self.alloc_id, l.wrapping_signed_offset(self.offset, i))\n     }\n \n-    pub(crate) fn overflowing_signed_offset<'a, L: HasDataLayout<'a>>(self, i: i128, l: L) -> (Self, bool) {\n+    pub(crate) fn overflowing_signed_offset<L: PointerArithmetic>(self, i: i128, l: L) -> (Self, bool) {\n         let (res, over) = l.overflowing_signed_offset(self.offset, i);\n         (MemoryPointer::new(self.alloc_id, res), over)\n     }\n \n-    pub(crate) fn signed_offset<'a, 'tcx, L: HasDataLayout<'a>>(self, i: i64, l: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn signed_offset<L: PointerArithmetic>(self, i: i64, l: L) -> EvalResult<'tcx, Self> {\n         Ok(MemoryPointer::new(self.alloc_id, l.signed_offset(self.offset, i)?))\n     }\n \n-    pub(crate) fn overflowing_offset<'a, L: HasDataLayout<'a>>(self, i: u64, l: L) -> (Self, bool) {\n+    pub(crate) fn overflowing_offset<L: PointerArithmetic>(self, i: u64, l: L) -> (Self, bool) {\n         let (res, over) = l.overflowing_offset(self.offset, i);\n         (MemoryPointer::new(self.alloc_id, res), over)\n     }\n \n-    pub(crate) fn offset<'a, 'tcx, L: HasDataLayout<'a>>(self, i: u64, l: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn offset<L: PointerArithmetic>(self, i: u64, l: L) -> EvalResult<'tcx, Self> {\n         Ok(MemoryPointer::new(self.alloc_id, l.offset(self.offset, i)?))\n     }\n }\n@@ -1183,9 +1183,7 @@ impl<'a, 'tcx> HasMemory<'a, 'tcx> for EvalContext<'a, 'tcx> {\n // Pointer arithmetic\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub(crate) trait HasDataLayout<'a> : Copy {\n-    fn data_layout(self) -> &'a TargetDataLayout;\n-\n+pub trait PointerArithmetic : layout::HasDataLayout {\n     // These are not supposed to be overriden.\n \n     //// Trunace the given value to the pointer size; also return whether there was an overflow\n@@ -1236,17 +1234,17 @@ pub(crate) trait HasDataLayout<'a> : Copy {\n     }\n }\n \n-impl<'a> HasDataLayout<'a> for &'a TargetDataLayout {\n+impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n+\n+impl<'a, 'tcx> layout::HasDataLayout for &'a Memory<'a, 'tcx> {\n     #[inline]\n-    fn data_layout(self) -> &'a TargetDataLayout {\n-        self\n+    fn data_layout(&self) -> &TargetDataLayout {\n+        self.layout\n     }\n }\n-\n-impl<'a, 'b, 'tcx, T> HasDataLayout<'a> for &'b T\n-    where T: HasMemory<'a, 'tcx> {\n+impl<'a, 'tcx> layout::HasDataLayout for &'a EvalContext<'a, 'tcx> {\n     #[inline]\n-    fn data_layout(self) -> &'a TargetDataLayout {\n+    fn data_layout(&self) -> &TargetDataLayout {\n         self.memory().layout\n     }\n }"}, {"sha": "10fa3394043d9ff34c6b9b3e45c122beaaf903ee", "filename": "src/librustc_mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c07f424da9332c2728e04c124b88264dceb17de/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c07f424da9332c2728e04c124b88264dceb17de/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs?ref=9c07f424da9332c2728e04c124b88264dceb17de", "patch": "@@ -2,7 +2,7 @@\n #![allow(float_cmp)]\n \n use error::{EvalError, EvalResult};\n-use memory::{Memory, MemoryPointer, HasMemory, HasDataLayout};\n+use memory::{Memory, MemoryPointer, HasMemory, PointerArithmetic};\n \n pub(super) fn bytes_to_f32(bytes: u128) -> f32 {\n     f32::from_bits(bytes as u32)\n@@ -59,7 +59,7 @@ impl<'tcx> Pointer {\n         self.primval\n     }\n \n-    pub(crate) fn signed_offset<'a, L: HasDataLayout<'a>>(self, i: i64, layout: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn signed_offset<L: PointerArithmetic>(self, i: i64, layout: L) -> EvalResult<'tcx, Self> {\n         match self.primval {\n             PrimVal::Bytes(b) => {\n                 assert_eq!(b as u64 as u128, b);\n@@ -70,7 +70,7 @@ impl<'tcx> Pointer {\n         }\n     }\n \n-    pub(crate) fn offset<'a, L: HasDataLayout<'a>>(self, i: u64, layout: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn offset<L: PointerArithmetic>(self, i: u64, layout: L) -> EvalResult<'tcx, Self> {\n         match self.primval {\n             PrimVal::Bytes(b) => {\n                 assert_eq!(b as u64 as u128, b);\n@@ -81,7 +81,7 @@ impl<'tcx> Pointer {\n         }\n     }\n \n-    pub(crate) fn wrapping_signed_offset<'a, L: HasDataLayout<'a>>(self, i: i64, layout: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn wrapping_signed_offset<L: PointerArithmetic>(self, i: i64, layout: L) -> EvalResult<'tcx, Self> {\n         match self.primval {\n             PrimVal::Bytes(b) => {\n                 assert_eq!(b as u64 as u128, b);"}]}