{"sha": "7fa991fb8545d8b03f0ab953770cb4fa08921abc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTk5MWZiODU0NWQ4YjAzZjBhYjk1Mzc3MGNiNGZhMDg5MjFhYmM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-30T04:36:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-30T04:36:46Z"}, "message": "Rollup merge of #81291 - sexxi-goose:fix-struct-update-functional-record-update-syntax-error, r=nikomatsakis\n\nSupport FRU pattern with `[feature(capture_disjoint_fields)]`\n\nIn case of a functional record update syntax for creating a structure, `ExprUseVisitor` to only detect the precise use of some of the field in the `..x` part of the syntax. However, when we start building MIR, we\n1. First, build the place for `x`\n2. and then, add precise field projections so that only some parts of `x` end up getting read.\n\nWhen `capture_disjoint_fields` is enabled, and FRU is used within a closure `x` won't be completely captured, and therefore the first step will fail. This PR updates `mir_build` to create a place builder in the first step and then create place from the builder only after applying the field projection.\n\nCloses https://github.com/rust-lang/project-rfc-2229/issues/32\nr? ``````@nikomatsakis``````", "tree": {"sha": "54c0955ab34bca2303c2807adf8738be0dfa1586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c0955ab34bca2303c2807adf8738be0dfa1586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa991fb8545d8b03f0ab953770cb4fa08921abc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFOJfCRBK7hj4Ov3rIwAAdHIIADmvhTINnZo8kueY4HtG9G2x\nL2sJfws8GU/Q2eGqYWnMUP1S691kjFXLydn+5BKvKP0tjAaCHDCSXMuZcC9EKHnl\nf0Bw9X5jtP+au/XrtjlCdjcHb1H9kNMqViZQ+NA9M2b816qPpj1IOd1fA7/fLOcD\nxwSkpoRN89bJhuWYa+YAtNOpPFPJciz0hkokYzyUDdMvY7u3BEpfTnBNCd7WQnKJ\njn63eGbweGlD4xdOm2KsRI+x0SNc4WOeQG06C4sEsEguoH4RnpAHjEH3RE4B4Qyp\n7CiYkO0smX2x2e+0sF+BDoWs0KQD2Ypv8Vwun7bbDAldLudHetC6P6Wam036yhM=\n=4C0F\n-----END PGP SIGNATURE-----\n", "payload": "tree 54c0955ab34bca2303c2807adf8738be0dfa1586\nparent 91ea1cbc177e3ed460c5435092d1cc07e4423428\nparent 5e983d7b3f03e9243d905e0579f32be00170c9af\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611981406 +0900\ncommitter GitHub <noreply@github.com> 1611981406 +0900\n\nRollup merge of #81291 - sexxi-goose:fix-struct-update-functional-record-update-syntax-error, r=nikomatsakis\n\nSupport FRU pattern with `[feature(capture_disjoint_fields)]`\n\nIn case of a functional record update syntax for creating a structure, `ExprUseVisitor` to only detect the precise use of some of the field in the `..x` part of the syntax. However, when we start building MIR, we\n1. First, build the place for `x`\n2. and then, add precise field projections so that only some parts of `x` end up getting read.\n\nWhen `capture_disjoint_fields` is enabled, and FRU is used within a closure `x` won't be completely captured, and therefore the first step will fail. This PR updates `mir_build` to create a place builder in the first step and then create place from the builder only after applying the field projection.\n\nCloses https://github.com/rust-lang/project-rfc-2229/issues/32\nr? ``````@nikomatsakis``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa991fb8545d8b03f0ab953770cb4fa08921abc", "html_url": "https://github.com/rust-lang/rust/commit/7fa991fb8545d8b03f0ab953770cb4fa08921abc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa991fb8545d8b03f0ab953770cb4fa08921abc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ea1cbc177e3ed460c5435092d1cc07e4423428", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ea1cbc177e3ed460c5435092d1cc07e4423428", "html_url": "https://github.com/rust-lang/rust/commit/91ea1cbc177e3ed460c5435092d1cc07e4423428"}, {"sha": "5e983d7b3f03e9243d905e0579f32be00170c9af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e983d7b3f03e9243d905e0579f32be00170c9af", "html_url": "https://github.com/rust-lang/rust/commit/5e983d7b3f03e9243d905e0579f32be00170c9af"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "2503360b1e4d0d574220627be391b39e37150026", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fa991fb8545d8b03f0ab953770cb4fa08921abc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa991fb8545d8b03f0ab953770cb4fa08921abc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=7fa991fb8545d8b03f0ab953770cb4fa08921abc", "patch": "@@ -303,7 +303,7 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         self.base\n     }\n \n-    fn field(self, f: Field, ty: Ty<'tcx>) -> Self {\n+    crate fn field(self, f: Field, ty: Ty<'tcx>) -> Self {\n         self.project(PlaceElem::Field(f, ty))\n     }\n "}, {"sha": "32c01f2c73326891353785e2ebd0df1e28e2169b", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7fa991fb8545d8b03f0ab953770cb4fa08921abc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa991fb8545d8b03f0ab953770cb4fa08921abc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=7fa991fb8545d8b03f0ab953770cb4fa08921abc", "patch": "@@ -296,7 +296,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let field_names = this.hir.all_fields(adt_def, variant_index);\n \n                 let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n-                    let base = unpack!(block = this.as_place(block, base));\n+                    let place_builder = unpack!(block = this.as_place_builder(block, base));\n \n                     // MIR does not natively support FRU, so for each\n                     // base-supplied field, generate an operand that\n@@ -306,9 +306,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         .zip(field_types.into_iter())\n                         .map(|(n, ty)| match fields_map.get(&n) {\n                             Some(v) => v.clone(),\n-                            None => this.consume_by_copy_or_move(\n-                                this.hir.tcx().mk_place_field(base, n, ty),\n-                            ),\n+                            None => {\n+                                let place_builder = place_builder.clone();\n+                                this.consume_by_copy_or_move(\n+                                    place_builder\n+                                        .field(n, ty)\n+                                        .into_place(this.hir.tcx(), this.hir.typeck_results()),\n+                                )\n+                            },\n                         })\n                         .collect()\n                 } else {"}, {"sha": "e89cf4550c15475f1772b2dc8d0d20250d0552e7", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7fa991fb8545d8b03f0ab953770cb4fa08921abc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa991fb8545d8b03f0ab953770cb4fa08921abc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.rs?ref=7fa991fb8545d8b03f0ab953770cb4fa08921abc", "patch": "@@ -0,0 +1,46 @@\n+// run-pass\n+\n+// Test that functional record update/struct update syntax works inside\n+// a closure when the feature `capture_disjoint_fields` is enabled.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+#[derive(Clone)]\n+struct S {\n+    a: String,\n+    b: String,\n+}\n+\n+struct T {\n+    a: String,\n+    s: S,\n+}\n+\n+fn main() {\n+    let a = String::new();\n+    let b = String::new();\n+    let c = String::new();\n+    let s = S {a, b};\n+    let t = T {\n+        a: c,\n+        s: s.clone()\n+    };\n+\n+    let c = || {\n+        let s2 = S {\n+            a: format!(\"New s2\"),\n+            ..s\n+        };\n+        let s3 = S {\n+            a: format!(\"New s3\"),\n+            ..t.s\n+        };\n+        println!(\"{} {}\", s2.a, s2.b);\n+        println!(\"{} {} {}\", s3.a, s3.b, t.a);\n+    };\n+\n+    c();\n+}"}, {"sha": "7ed73abba8608ec1d01b91d4e8c53e39eaf094dd", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/fru_syntax.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7fa991fb8545d8b03f0ab953770cb4fa08921abc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fa991fb8545d8b03f0ab953770cb4fa08921abc/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffru_syntax.stderr?ref=7fa991fb8545d8b03f0ab953770cb4fa08921abc", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/fru_syntax.rs:6:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}]}