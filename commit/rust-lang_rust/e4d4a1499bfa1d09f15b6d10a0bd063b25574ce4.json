{"sha": "e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZDRhMTQ5OWJmYTFkMDlmMTViNmQxMGEwYmQwNjNiMjU1NzRjZTQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-22T16:12:52Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-25T00:24:30Z"}, "message": "convert most of libcore records into structs", "tree": {"sha": "1a4a99234db820b0a5f406cde4961baf8c03fefc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a4a99234db820b0a5f406cde4961baf8c03fefc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "html_url": "https://github.com/rust-lang/rust/commit/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2ae2c2c131bfbf2d8ab1b8ff9874e23abb7003", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2ae2c2c131bfbf2d8ab1b8ff9874e23abb7003", "html_url": "https://github.com/rust-lang/rust/commit/6e2ae2c2c131bfbf2d8ab1b8ff9874e23abb7003"}], "stats": {"total": 191, "additions": 105, "deletions": 86}, "files": [{"sha": "698e264b57a65ae12ccabcbe1d6792c058a851d5", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "patch": "@@ -87,7 +87,10 @@ unsafe fn get_safe_point_count() -> uint {\n     return *module_meta;\n }\n \n-type SafePoint = { sp_meta: *Word, fn_meta: *Word };\n+struct SafePoint {\n+    sp_meta: *Word,\n+    fn_meta: *Word,\n+}\n \n // Returns the safe point metadata for the given program counter, if\n // any.\n@@ -106,7 +109,10 @@ unsafe fn is_safe_point(pc: *Word) -> Option<SafePoint> {\n         let sp: **Word = bump(safe_points, spi*3);\n         let sp_loc = *sp;\n         if sp_loc == pc {\n-            return Some({sp_meta: *bump(sp, 1), fn_meta: *bump(sp, 2)});\n+            return Some(SafePoint {\n+                sp_meta: *bump(sp, 1),\n+                fn_meta: *bump(sp, 2),\n+            });\n         }\n         spi += 1;\n     }"}, {"sha": "ffe4379b5bc1e49d11c5b12325867c1f12834a04", "filename": "src/libcore/io.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "patch": "@@ -1086,11 +1086,9 @@ pub fn read_whole_file(file: &Path) -> Result<~[u8], ~str> {\n // fsync related\n \n pub mod fsync {\n+    use prelude::*;\n     use io::{FILERes, FdRes, fd_t};\n-    use kinds::Copy;\n     use libc;\n-    use option::Option;\n-    use option;\n     use os;\n \n     pub enum Level {\n@@ -1127,19 +1125,19 @@ pub mod fsync {\n         }\n     }\n \n-    pub type Arg<t> = {\n+    pub struct Arg<t> {\n         val: t,\n         opt_level: Option<Level>,\n-        fsync_fn: fn@(f: t, Level) -> int\n-    };\n+        fsync_fn: fn@(f: t, Level) -> int,\n+    }\n \n     // fsync file after executing blk\n     // FIXME (#2004) find better way to create resources within lifetime of\n     // outer res\n     pub fn FILE_res_sync(file: &FILERes, opt_level: Option<Level>,\n                          blk: fn(v: Res<*libc::FILE>)) {\n         unsafe {\n-            blk(move Res({\n+            blk(Res(Arg {\n                 val: file.f, opt_level: opt_level,\n                 fsync_fn: fn@(file: *libc::FILE, l: Level) -> int {\n                     unsafe {\n@@ -1153,7 +1151,7 @@ pub mod fsync {\n     // fsync fd after executing blk\n     pub fn fd_res_sync(fd: &FdRes, opt_level: Option<Level>,\n                        blk: fn(v: Res<fd_t>)) {\n-        blk(move Res({\n+        blk(Res(Arg {\n             val: fd.fd, opt_level: opt_level,\n             fsync_fn: fn@(fd: fd_t, l: Level) -> int {\n                 return os::fsync_fd(fd, l) as int;\n@@ -1167,7 +1165,7 @@ pub mod fsync {\n     // Call o.fsync after executing blk\n     pub fn obj_sync(o: FSyncable, opt_level: Option<Level>,\n                     blk: fn(v: Res<FSyncable>)) {\n-        blk(Res({\n+        blk(Res(Arg {\n             val: o, opt_level: opt_level,\n             fsync_fn: fn@(o: FSyncable, l: Level) -> int {\n                 return o.fsync(l);"}, {"sha": "976c186912b37032ff9cf638d57da4b3ae20d04a", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "patch": "@@ -42,7 +42,10 @@ pub trait Rng {\n }\n \n /// A value with a particular weight compared to other values\n-pub type Weighted<T> = { weight: uint, item: T };\n+pub struct Weighted<T> {\n+    weight: uint,\n+    item: T,\n+}\n \n /// Extension methods for random number generators\n impl Rng {\n@@ -312,12 +315,12 @@ pub fn seeded_rng(seed: &~[u8]) -> Rng {\n     }\n }\n \n-type XorShiftState = {\n+struct XorShiftState {\n     mut x: u32,\n     mut y: u32,\n     mut z: u32,\n-    mut w: u32\n-};\n+    mut w: u32,\n+}\n \n impl XorShiftState: Rng {\n     fn next() -> u32 {\n@@ -338,7 +341,7 @@ pub pure fn xorshift() -> Rng {\n }\n \n pub pure fn seeded_xorshift(x: u32, y: u32, z: u32, w: u32) -> Rng {\n-    {mut x: x, mut y: y, mut z: z, mut w: w} as Rng\n+    XorShiftState { x: x, y: y, z: z, w: w } as Rng\n }\n \n \n@@ -492,21 +495,24 @@ pub mod tests {\n     #[test]\n     pub fn choose_weighted() {\n         let r = rand::Rng();\n-        assert r.choose_weighted(~[{weight: 1u, item: 42}]) == 42;\n         assert r.choose_weighted(~[\n-            {weight: 0u, item: 42},\n-            {weight: 1u, item: 43}\n+            rand::Weighted { weight: 1u, item: 42 },\n+        ]) == 42;\n+        assert r.choose_weighted(~[\n+            rand::Weighted { weight: 0u, item: 42 },\n+            rand::Weighted { weight: 1u, item: 43 },\n         ]) == 43;\n     }\n \n     #[test]\n     pub fn choose_weighted_option() {\n         let r = rand::Rng();\n-        assert r.choose_weighted_option(~[{weight: 1u, item: 42}]) ==\n-               Some(42);\n         assert r.choose_weighted_option(~[\n-            {weight: 0u, item: 42},\n-            {weight: 1u, item: 43}\n+            rand::Weighted { weight: 1u, item: 42 },\n+        ]) == Some(42);\n+        assert r.choose_weighted_option(~[\n+            rand::Weighted { weight: 0u, item: 42 },\n+            rand::Weighted { weight: 1u, item: 43 },\n         ]) == Some(43);\n         let v: Option<int> = r.choose_weighted_option([]);\n         assert v.is_none();\n@@ -518,9 +524,9 @@ pub mod tests {\n         let empty: ~[int] = ~[];\n         assert r.weighted_vec(~[]) == empty;\n         assert r.weighted_vec(~[\n-            {weight: 0u, item: 3u},\n-            {weight: 1u, item: 2u},\n-            {weight: 2u, item: 1u}\n+            rand::Weighted { weight: 0u, item: 3u },\n+            rand::Weighted { weight: 1u, item: 2u },\n+            rand::Weighted { weight: 2u, item: 1u },\n         ]) == ~[2u, 1u, 1u];\n     }\n "}, {"sha": "ff6dc924922cc5fea70fe4065ef30e75854bb3b4", "filename": "src/libcore/run.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "patch": "@@ -220,11 +220,13 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n             libc::close(pipe_err.out);\n         }\n \n-        type ProgRepr = {pid: pid_t,\n-                         mut in_fd: c_int,\n-                         out_file: *libc::FILE,\n-                         err_file: *libc::FILE,\n-                         mut finished: bool};\n+        struct ProgRepr {\n+            pid: pid_t,\n+            mut in_fd: c_int,\n+            out_file: *libc::FILE,\n+            err_file: *libc::FILE,\n+            mut finished: bool,\n+        }\n \n         fn close_repr_input(r: &ProgRepr) {\n             let invalid_fd = -1i32;\n@@ -274,12 +276,15 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n             fn finish() -> int { finish_repr(&self.r) }\n             fn destroy() { destroy_repr(&self.r); }\n         }\n-        let repr = {pid: pid,\n-                    mut in_fd: pipe_input.out,\n-                    out_file: os::fdopen(pipe_output.in),\n-                    err_file: os::fdopen(pipe_err.in),\n-                    mut finished: false};\n-        return ProgRes(move repr) as Program;\n+        let repr = ProgRepr {\n+            pid: pid,\n+            in_fd: pipe_input.out,\n+            out_file: os::fdopen(pipe_output.in),\n+            err_file: os::fdopen(pipe_err.in),\n+            finished: false,\n+        };\n+\n+        ProgRes(repr) as Program\n     }\n }\n "}, {"sha": "a4d99bf5db4a6cb78ea9efcd977a6783d2cc9441", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "patch": "@@ -168,10 +168,10 @@ impl SchedMode : cmp::Eq {\n  *     default these foreign stacks have unspecified size, but with this\n  *     option their size can be precisely specified.\n  */\n-pub type SchedOpts = {\n+pub struct SchedOpts {\n     mode: SchedMode,\n-    foreign_stack_size: Option<uint>\n-};\n+    foreign_stack_size: Option<uint>,\n+}\n \n /**\n  * Task configuration options\n@@ -200,12 +200,12 @@ pub type SchedOpts = {\n  *     into foreign code that blocks. Without doing so in a different\n  *     scheduler other tasks will be impeded or even blocked indefinitely.\n  */\n-pub type TaskOpts = {\n+pub struct TaskOpts {\n     linked: bool,\n     supervised: bool,\n     mut notify_chan: Option<Chan<TaskResult>>,\n     sched: Option<SchedOpts>,\n-};\n+}\n \n /**\n  * The task builder type.\n@@ -251,15 +251,15 @@ priv impl TaskBuilder {\n         self.consumed = true;\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n-            opts: {\n+            opts: TaskOpts {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n-                mut notify_chan: move notify_chan,\n+                notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n             gen_body: self.gen_body,\n             can_not_copy: None,\n-            mut consumed: false\n+            consumed: false\n         }\n     }\n }\n@@ -272,10 +272,10 @@ impl TaskBuilder {\n     fn unlinked() -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n-            opts: {\n+            opts: TaskOpts {\n                 linked: false,\n                 supervised: self.opts.supervised,\n-                mut notify_chan: move notify_chan,\n+                notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n@@ -290,10 +290,10 @@ impl TaskBuilder {\n     fn supervised() -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n-            opts: {\n+            opts: TaskOpts {\n                 linked: false,\n                 supervised: true,\n-                mut notify_chan: move notify_chan,\n+                notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n@@ -307,10 +307,10 @@ impl TaskBuilder {\n     fn linked() -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n-            opts: {\n+            opts: TaskOpts {\n                 linked: true,\n                 supervised: false,\n-                mut notify_chan: move notify_chan,\n+                notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n@@ -352,10 +352,10 @@ impl TaskBuilder {\n \n         // Reconfigure self to use a notify channel.\n         TaskBuilder {\n-            opts: {\n+            opts: TaskOpts {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n-                mut notify_chan: Some(move notify_pipe_ch),\n+                notify_chan: Some(notify_pipe_ch),\n                 sched: self.opts.sched\n             },\n             can_not_copy: None,\n@@ -366,11 +366,14 @@ impl TaskBuilder {\n     fn sched_mode(mode: SchedMode) -> TaskBuilder {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n-            opts: {\n+            opts: TaskOpts {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n-                mut notify_chan: move notify_chan,\n-                sched: Some({ mode: mode, foreign_stack_size: None})\n+                notify_chan: notify_chan,\n+                sched: Some(SchedOpts {\n+                    mode: mode,\n+                    foreign_stack_size: None,\n+                })\n             },\n             can_not_copy: None,\n             .. self.consume()\n@@ -393,10 +396,10 @@ impl TaskBuilder {\n         let prev_gen_body = self.gen_body;\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         TaskBuilder {\n-            opts: {\n+            opts: TaskOpts {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n-                mut notify_chan: move notify_chan,\n+                notify_chan: notify_chan,\n                 sched: self.opts.sched\n             },\n             // tjc: I think this is the line that gets miscompiled\n@@ -424,10 +427,10 @@ impl TaskBuilder {\n     fn spawn(f: fn~()) {\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n         let x = self.consume();\n-        let opts = {\n+        let opts = TaskOpts {\n             linked: x.opts.linked,\n             supervised: x.opts.supervised,\n-            mut notify_chan: move notify_chan,\n+            notify_chan: notify_chan,\n             sched: x.opts.sched\n         };\n         spawn::spawn_raw(move opts, (x.gen_body)(move f));\n@@ -482,10 +485,10 @@ pub fn default_task_opts() -> TaskOpts {\n      * into the same scheduler, and do not post lifecycle notifications.\n      */\n \n-    {\n+    TaskOpts {\n         linked: true,\n         supervised: false,\n-        mut notify_chan: None,\n+        notify_chan: None,\n         sched: None\n     }\n }"}, {"sha": "edeacb31e1d0993059b3b422b41b0cc550b16ec8", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "patch": "@@ -114,14 +114,14 @@ pub fn taskset_each(tasks: &TaskSet, blk: fn(v: *rust_task) -> bool) {\n }\n \n // One of these per group of linked-failure tasks.\n-type TaskGroupData = {\n+struct TaskGroupData {\n     // All tasks which might kill this group. When this is empty, the group\n     // can be \"GC\"ed (i.e., its link in the ancestor list can be removed).\n     mut members:     TaskSet,\n     // All tasks unidirectionally supervised by (directly or transitively)\n     // tasks in this group.\n     mut descendants: TaskSet,\n-};\n+}\n type TaskGroupArc = private::Exclusive<Option<TaskGroupData>>;\n \n type TaskGroupInner = &mut Option<TaskGroupData>;\n@@ -138,7 +138,7 @@ pure fn taskgroup_is_dead(tg: &TaskGroupData) -> bool {\n // taskgroup which was spawned-unlinked. Tasks from intermediate generations\n // have references to the middle of the list; when intermediate generations\n // die, their node in the list will be collected at a descendant's spawn-time.\n-type AncestorNode = {\n+struct AncestorNode {\n     // Since the ancestor list is recursive, we end up with references to\n     // exclusives within other exclusives. This is dangerous business (if\n     // circular references arise, deadlock and memory leaks are imminent).\n@@ -150,7 +150,8 @@ type AncestorNode = {\n     mut parent_group: Option<TaskGroupArc>,\n     // Recursive rest of the list.\n     mut ancestors:    AncestorList,\n-};\n+}\n+\n enum AncestorList = Option<private::Exclusive<AncestorNode>>;\n \n // Accessors for taskgroup arcs and ancestor arcs that wrap the unsafety.\n@@ -450,11 +451,10 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n                 // Main task, doing first spawn ever. Lazily initialise here.\n                 let mut members = new_taskset();\n                 taskset_insert(&mut members, spawner);\n-                let tasks =\n-                    private::exclusive(Some({\n-                        mut members:     move members,\n-                        mut descendants: new_taskset()\n-                    }));\n+                let tasks = private::exclusive(Some(TaskGroupData {\n+                    members: members,\n+                    descendants: new_taskset(),\n+                }));\n                 // Main task/group has no ancestors, no notifier, etc.\n                 let group =\n                     @TCB(spawner, move tasks, AncestorList(None), true, None);\n@@ -475,9 +475,9 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n             (move g, move a, spawner_group.is_main)\n         } else {\n             // Child is in a separate group from spawner.\n-            let g = private::exclusive(Some({\n-                mut members:     new_taskset(),\n-                mut descendants: new_taskset()\n+            let g = private::exclusive(Some(TaskGroupData {\n+                members:     new_taskset(),\n+                descendants: new_taskset(),\n             }));\n             let a = if supervised {\n                 // Child's ancestors start with the spawner.\n@@ -495,10 +495,11 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n                     };\n                 assert new_generation < uint::max_value;\n                 // Build a new node in the ancestor list.\n-                AncestorList(Some(private::exclusive(\n-                    { generation:       new_generation,\n-                      mut parent_group: Some(spawner_group.tasks.clone()),\n-                      mut ancestors:    move old_ancestors })))\n+                AncestorList(Some(private::exclusive(AncestorNode {\n+                    generation: new_generation,\n+                    parent_group: Some(spawner_group.tasks.clone()),\n+                    ancestors: old_ancestors,\n+                })))\n             } else {\n                 // Child has no ancestors.\n                 AncestorList(None)\n@@ -685,9 +686,9 @@ fn test_spawn_raw_simple() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_spawn_raw_unsupervise() {\n-    let opts = {\n+    let opts = task::TaskOpts {\n         linked: false,\n-        mut notify_chan: None,\n+        notify_chan: None,\n         .. default_task_opts()\n     };\n     do spawn_raw(move opts) {\n@@ -700,8 +701,8 @@ fn test_spawn_raw_unsupervise() {\n fn test_spawn_raw_notify_success() {\n     let (notify_po, notify_ch) = pipes::stream();\n \n-    let opts = {\n-        notify_chan: Some(move notify_ch),\n+    let opts = task::TaskOpts {\n+        notify_chan: Some(notify_ch),\n         .. default_task_opts()\n     };\n     do spawn_raw(move opts) {\n@@ -715,9 +716,9 @@ fn test_spawn_raw_notify_failure() {\n     // New bindings for these\n     let (notify_po, notify_ch) = pipes::stream();\n \n-    let opts = {\n+    let opts = task::TaskOpts {\n         linked: false,\n-        notify_chan: Some(move notify_ch),\n+        notify_chan: Some(notify_ch),\n         .. default_task_opts()\n     };\n     do spawn_raw(move opts) {"}, {"sha": "ebfcfd3757739d8376ffb4fa58b8906af3d961a1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=e4d4a1499bfa1d09f15b6d10a0bd063b25574ce4", "patch": "@@ -2027,10 +2027,10 @@ pub mod raw {\n         unboxed: UnboxedVecRepr\n     }\n \n-    pub type SliceRepr = {\n+    pub struct SliceRepr {\n         mut data: *u8,\n         mut len: uint\n-    };\n+    }\n \n     /**\n      * Sets the length of a vector"}]}