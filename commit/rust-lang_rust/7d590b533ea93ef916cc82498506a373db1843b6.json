{"sha": "7d590b533ea93ef916cc82498506a373db1843b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNTkwYjUzM2VhOTNlZjkxNmNjODI0OTg1MDZhMzczZGIxODQzYjY=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-02-14T03:23:10Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-10T15:21:53Z"}, "message": "changes for new compile-fail/E0389 message", "tree": {"sha": "a5910c8067ec0b38e07c52956330609e846a2a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5910c8067ec0b38e07c52956330609e846a2a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d590b533ea93ef916cc82498506a373db1843b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d590b533ea93ef916cc82498506a373db1843b6", "html_url": "https://github.com/rust-lang/rust/commit/7d590b533ea93ef916cc82498506a373db1843b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d590b533ea93ef916cc82498506a373db1843b6/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87344aa59af2ebb868253228e2b558d701573dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/87344aa59af2ebb868253228e2b558d701573dff", "html_url": "https://github.com/rust-lang/rust/commit/87344aa59af2ebb868253228e2b558d701573dff"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "e5e8ffdc2f388657687448024945d086dfc4dcf6", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 50, "deletions": 9, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7d590b533ea93ef916cc82498506a373db1843b6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d590b533ea93ef916cc82498506a373db1843b6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=7d590b533ea93ef916cc82498506a373db1843b6", "patch": "@@ -1551,12 +1551,46 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 self.is_mutable(place, is_local_mutation_allowed)\n             {\n                 error_reported = true;\n-\n                 let item_msg = match self.describe_place(place) {\n                     Some(name) => format!(\"immutable item `{}`\", name),\n                     None => \"immutable item\".to_owned(),\n                 };\n \n+            // let item_msg = match place{\n+            //     Place::Projection(ref proj) => {\n+            //         let Projection { ref base, ref elem } = **proj;\n+            //         match *elem {\n+            //             ProjectionElem::Deref => {\n+            //                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n+            //                     debug!(\"place_err = {:?} and base={:?}\", place_err, base);\n+            //                     format!(\"`&`-reference {:?}\", place_err)\n+\n+\n+            //                 }else{\n+            //                     match self.describe_place(place) {\n+            //                         Some(name) => format!(\"immutable item `{}`\", name),\n+            //                         None => \"immutable item\".to_owned(),\n+            //                     }\n+            //                 }\n+            //             }\n+            //             _ => {\n+            //                     match self.describe_place(place) {\n+            //                     Some(name) => format!(\"immutable item `{}`\", name),\n+            //                     None => \"immutable item\".to_owned(),\n+            //                     }   \n+\n+            //                  }\n+            //             }\n+            //         },\n+                \n+            //     _=> {\n+            //     match self.describe_place(place) {\n+            //         Some(name) => format!(\"immutable item `{}`\", name),\n+            //         None => \"immutable item\".to_owned(),\n+            //     }\n+            //     }\n+            // };\n+\n                 let mut err = self.tcx\n                     .cannot_borrow_path_as_mutable(span, &item_msg, Origin::Mir);\n                 err.span_label(span, \"cannot borrow as mutable\");\n@@ -1573,20 +1607,27 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                     error_reported = true;\n \n-                    let item_msg = match self.describe_place(place) {\n-                        Some(name) => format!(\"immutable item `{}`\", name),\n-                        None => \"immutable item\".to_owned(),\n+                    let item_msg = if error_reported{\n+                        if let Some(name) = self.describe_place(place_err) {\n+                            format!(\"`&`-reference {}\", name)\n+                        }else{\n+                        match self.describe_place(place) {\n+                            Some(name) => {format!(\"immutable item `{}`\", name)}\n+                            None => {\"immutable item\".to_owned()}\n+                        } \n+                      }\n+                    }else{\n+                        match self.describe_place(place) {\n+                            Some(name) => {format!(\"immutable item `{}`\", name)}\n+                            None => {\"immutable item\".to_owned()}\n+                        }\n                     };\n \n                     let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir);\n-                    err.span_label(span, \"cannot mutate\");\n \n                     if place != place_err {\n-                        if let Some(name) = self.describe_place(place_err) {\n-                            err.note(&format!(\"Value not mutable causing this error: `{}`\", name));\n-                        }\n+                        err.span_label(span, \"cannot assign through `&`-reference\");                        \n                     }\n-\n                     err.emit();\n                 }\n             }"}]}