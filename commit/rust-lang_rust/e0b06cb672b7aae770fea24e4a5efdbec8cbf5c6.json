{"sha": "e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYjA2Y2I2NzJiN2FhZTc3MGZlYTI0ZTRhNWVmZGJlYzhjYmY1YzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T12:13:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T12:18:12Z"}, "message": "Switch to StaticLoc for statics", "tree": {"sha": "8623aa0e20f91374ad8d10a6fb1d807274dee5e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8623aa0e20f91374ad8d10a6fb1d807274dee5e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "html_url": "https://github.com/rust-lang/rust/commit/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "982a32aca317deb91ae03346cbc7880bd7d4429b", "url": "https://api.github.com/repos/rust-lang/rust/commits/982a32aca317deb91ae03346cbc7880bd7d4429b", "html_url": "https://github.com/rust-lang/rust/commit/982a32aca317deb91ae03346cbc7880bd7d4429b"}], "stats": {"total": 93, "additions": 65, "deletions": 28}, "files": [{"sha": "905bb5bcba0cf592fcf74fbcf2a309e112c36d38", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -734,7 +734,7 @@ pub struct Static {\n \n impl Static {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {"}, {"sha": "b9d21bdd72ed2fe39127561dee58e2a3a50d27dd", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -88,7 +88,7 @@ impl HasSource for Const {\n impl HasSource for Static {\n     type Ast = ast::StaticDef;\n     fn source(self, db: &impl DefDatabase) -> Source<ast::StaticDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Trait {"}, {"sha": "e6eefcace4212d07818f15dce89b0754e46a9deb", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -104,10 +104,21 @@ impl FromSource for Const {\n impl FromSource for Static {\n     type Ast = ast::StaticDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Static { id })\n+        let module = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n+            Container::Module(it) => it,\n+            Container::Trait(_) | Container::ImplBlock(_) => return None,\n+        };\n+        module\n+            .declarations(db)\n+            .into_iter()\n+            .filter_map(|it| match it {\n+                ModuleDef::Static(it) => Some(it),\n+                _ => None,\n+            })\n+            .find(|it| same_source(&it.source(db), &src))\n     }\n }\n+\n impl FromSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {"}, {"sha": "cfc4bd3260e07df76a70268084de8508321b8dcd", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     path::known,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    DefWithBodyId, LocationCtx,\n+    DefWithBodyId,\n };\n use hir_expand::{\n     name::AsName, AstId, HirFileId, MacroCallId, MacroCallLoc, MacroFileKind, Source,\n@@ -28,8 +28,8 @@ use crate::{\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, HasBody, Local, MacroDef, Module, Name, Path, ScopeDef, Static, Struct, Trait,\n-    Ty, TypeAlias,\n+    GenericParam, HasBody, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Ty,\n+    TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n@@ -68,16 +68,12 @@ fn def_with_body_from_child_node(\n     db: &impl HirDatabase,\n     child: Source<&SyntaxNode>,\n ) -> Option<DefWithBody> {\n-    let module_source = crate::ModuleSource::from_child_node(db, child);\n-    let module = Module::from_definition(db, Source::new(child.file_id, module_source))?;\n-    let ctx = LocationCtx::new(db, module.id, child.file_id);\n-\n     child.value.ancestors().find_map(|node| {\n         match_ast! {\n             match node {\n                 ast::FnDef(def)  => { return Function::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n                 ast::ConstDef(def) => { return Const::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n-                ast::StaticDef(def) => { Some(Static { id: ctx.to_def(&def) }.into()) },\n+                ast::StaticDef(def) => { return Static::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n                 _ => { None },\n             }\n         }"}, {"sha": "3209c66bd0e544c9d4810b7df7bd3aac31ce2547", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -2550,8 +2550,6 @@ fn test() {\n     [233; 246) 'GLOBAL_STATIC': u32\n     [256; 257) 'w': u32\n     [260; 277) 'GLOBAL...IC_MUT': u32\n-    [118; 120) '99': u32\n-    [161; 163) '99': u32\n     \"###\n     );\n }"}, {"sha": "87f41159952b73203e1c16b996a0490608359ce5", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -63,11 +63,11 @@ impl Attrs {\n                 AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n                 AdtId::UnionId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n             },\n-            AttrDefId::StaticId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::MacroDefId(it) => attrs_from_ast(it.ast_id, db),\n             AttrDefId::ImplId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             AttrDefId::ConstId(it) => attrs_from_loc(it.lookup(db), db),\n+            AttrDefId::StaticId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::FunctionId(it) => attrs_from_loc(it.lookup(db), db),\n             AttrDefId::TypeAliasId(it) => attrs_from_loc(it.lookup(db), db),\n         }"}, {"sha": "1589085b53fb850482855a1c7558e97d216b05f5", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -17,7 +17,7 @@ use crate::{\n     expr::{Expr, ExprId, Pat, PatId},\n     nameres::CrateDefMap,\n     path::Path,\n-    AstItemDef, DefWithBodyId, HasModule, HasSource, Lookup, ModuleId,\n+    DefWithBodyId, HasModule, HasSource, Lookup, ModuleId,\n };\n \n pub struct Expander {\n@@ -160,6 +160,7 @@ impl Body {\n                 (src.file_id, c.module(db), src.value.body())\n             }\n             DefWithBodyId::StaticId(s) => {\n+                let s = s.lookup(db);\n                 let src = s.source(db);\n                 (src.file_id, s.module(db), src.value.body())\n             }"}, {"sha": "81a8ec18db1b38cb7254a25b061c792a0a9f67ee", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -204,7 +204,7 @@ impl ConstData {\n     }\n \n     pub(crate) fn static_data_query(db: &impl DefDatabase, konst: StaticId) -> Arc<ConstData> {\n-        let node = konst.source(db).value;\n+        let node = konst.lookup(db).source(db).value;\n         const_data_for(&node)\n     }\n }"}, {"sha": "32adb11bdc4d39e3f6103e7f213b402283878ef7", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -18,7 +18,8 @@ use crate::{\n         CrateDefMap,\n     },\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ItemLoc, ModuleId, StaticId, StructOrUnionId, TraitId, TypeAliasId, TypeAliasLoc,\n+    ImplId, ItemLoc, ModuleId, StaticId, StaticLoc, StructOrUnionId, TraitId, TypeAliasId,\n+    TypeAliasLoc,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -32,7 +33,7 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_const(&self, loc: ConstLoc) -> ConstId;\n     #[salsa::interned]\n-    fn intern_static(&self, loc: ItemLoc<ast::StaticDef>) -> StaticId;\n+    fn intern_static(&self, loc: StaticLoc) -> StaticId;\n     #[salsa::interned]\n     fn intern_trait(&self, loc: ItemLoc<ast::TraitDef>) -> TraitId;\n     #[salsa::interned]"}, {"sha": "225511428871e15a03877734c23f76f601c71775", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -52,10 +52,10 @@ impl Documentation {\n                 let src = it.parent.child_source(db);\n                 docs_from_ast(&src.value[it.local_id])\n             }\n-            AttrDefId::StaticId(it) => docs_from_ast(&it.source(db).value),\n             AttrDefId::TraitId(it) => docs_from_ast(&it.source(db).value),\n             AttrDefId::MacroDefId(it) => docs_from_ast(&it.ast_id.to_node(db)),\n             AttrDefId::ConstId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+            AttrDefId::StaticId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::FunctionId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::TypeAliasId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n             AttrDefId::ImplId(_) => None,"}, {"sha": "89f1ceb5814409d3fe59c37adc88ce0c9ef8178b", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -245,12 +245,24 @@ impl Lookup for ConstId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StaticId(salsa::InternId);\n impl_intern_key!(StaticId);\n-impl AstItemDef<ast::StaticDef> for StaticId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StaticDef>) -> Self {\n-        db.intern_static(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct StaticLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::StaticDef>,\n+}\n+\n+impl Intern for StaticLoc {\n+    type ID = StaticId;\n+    fn intern(self, db: &impl db::DefDatabase) -> StaticId {\n+        db.intern_static(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StaticDef> {\n-        db.lookup_intern_static(self)\n+}\n+\n+impl Lookup for StaticId {\n+    type Data = StaticLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> StaticLoc {\n+        db.lookup_intern_static(*self)\n     }\n }\n \n@@ -481,6 +493,12 @@ impl HasModule for ConstLoc {\n     }\n }\n \n+impl HasModule for StaticLoc {\n+    fn module(&self, _db: &impl db::DefDatabase) -> ModuleId {\n+        self.container\n+    }\n+}\n+\n pub trait HasSource {\n     type Value;\n     fn source(&self, db: &impl db::DefDatabase) -> Source<Self::Value>;\n@@ -513,6 +531,15 @@ impl HasSource for ConstLoc {\n     }\n }\n \n+impl HasSource for StaticLoc {\n+    type Value = ast::StaticDef;\n+\n+    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::StaticDef> {\n+        let node = self.ast_id.to_node(db);\n+        Source::new(self.ast_id.file_id(), node)\n+    }\n+}\n+\n pub trait HasChildSource {\n     type ChildId;\n     type Value;"}, {"sha": "7b2487999793d8b41246cad3ae660d77f90bc253", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     path::{Path, PathKind},\n     per_ns::PerNs,\n     AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplId,\n-    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticId, StructId,\n+    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructId,\n     StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n };\n \n@@ -715,7 +715,10 @@ where\n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Static(ast_id) => {\n-                PerNs::values(StaticId::from_ast_id(ctx, ast_id).into())\n+                let def = StaticLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+\n+                PerNs::values(def.into())\n             }\n             raw::DefKind::Trait(ast_id) => PerNs::types(TraitId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::TypeAlias(ast_id) => {"}, {"sha": "4ff0a091b83f791af6aaeea0c1d1c35213cc0315", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=e0b06cb672b7aae770fea24e4a5efdbec8cbf5c6", "patch": "@@ -540,7 +540,7 @@ impl HasResolver for ConstId {\n \n impl HasResolver for StaticId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n-        self.module(db).resolver(db)\n+        self.lookup(db).container.resolver(db)\n     }\n }\n "}]}