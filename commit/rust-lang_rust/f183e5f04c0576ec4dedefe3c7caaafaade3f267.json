{"sha": "f183e5f04c0576ec4dedefe3c7caaafaade3f267", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODNlNWYwNGMwNTc2ZWM0ZGVkZWZlM2M3Y2FhYWZhYWRlM2YyNjc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-28T06:09:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-28T06:09:15Z"}, "message": "Rollup merge of #81426 - BoxyUwU:boxychangesv2, r=oli-obk\n\nconst_evaluatable: expand abstract consts in try_unify\n\nSee this [zulip topic](https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/combining.20const.20bounds) for more info\n\ncc ```@lcnr```\nr? ```@oli-obk```", "tree": {"sha": "f5528bad7e5c62449f93b3a8a270244dfb9c209a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5528bad7e5c62449f93b3a8a270244dfb9c209a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f183e5f04c0576ec4dedefe3c7caaafaade3f267", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgElULCRBK7hj4Ov3rIwAAdHIIAIJKzZbd2Mx/rZTUt4r2QDN8\nCnV4uAMQRZ7/jaCp2jCXR4QTO4Ufo2uEBj9Ldrphh7dp7nadvDaz5sn5snxBXY6O\nXKjVCU4plzYDAe64PkuU+CQLt7L+ApRye3hU6Zrw8Su435grKKPvPm2mBnuInr6H\nl53ONzIR/ELuHEJmMaPw2nMugb0iAkQXUtvda02R3ZJyahdKVgTLa3jtBob8JJyb\no6zGqRNyxjvjcMiooRYC16L8gL9tS6YCWxxaZGk9/NGGVNqejQCd2y9d77MHGM/n\n0uYOmIiA+mVb21eVnRTlWEUa0kt6n2176ifFC3f3T+U1Lr2obK87pDRj3B6s4DQ=\n=10QD\n-----END PGP SIGNATURE-----\n", "payload": "tree f5528bad7e5c62449f93b3a8a270244dfb9c209a\nparent b8eac50ff59fb67ee3338f0e90b9c21058c96a1a\nparent ab421a176240a658ed02e8eee70b7ea211c087e3\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611814155 +0900\ncommitter GitHub <noreply@github.com> 1611814155 +0900\n\nRollup merge of #81426 - BoxyUwU:boxychangesv2, r=oli-obk\n\nconst_evaluatable: expand abstract consts in try_unify\n\nSee this [zulip topic](https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/combining.20const.20bounds) for more info\n\ncc ```@lcnr```\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f183e5f04c0576ec4dedefe3c7caaafaade3f267", "html_url": "https://github.com/rust-lang/rust/commit/f183e5f04c0576ec4dedefe3c7caaafaade3f267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f183e5f04c0576ec4dedefe3c7caaafaade3f267/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8eac50ff59fb67ee3338f0e90b9c21058c96a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8eac50ff59fb67ee3338f0e90b9c21058c96a1a", "html_url": "https://github.com/rust-lang/rust/commit/b8eac50ff59fb67ee3338f0e90b9c21058c96a1a"}, {"sha": "ab421a176240a658ed02e8eee70b7ea211c087e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab421a176240a658ed02e8eee70b7ea211c087e3", "html_url": "https://github.com/rust-lang/rust/commit/ab421a176240a658ed02e8eee70b7ea211c087e3"}], "stats": {"total": 149, "additions": 145, "deletions": 4}, "files": [{"sha": "b587ed6487e3c6929e4ca2349b53c2632d39737a", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f183e5f04c0576ec4dedefe3c7caaafaade3f267/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183e5f04c0576ec4dedefe3c7caaafaade3f267/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=f183e5f04c0576ec4dedefe3c7caaafaade3f267", "patch": "@@ -609,9 +609,29 @@ where\n /// Tries to unify two abstract constants using structural equality.\n pub(super) fn try_unify<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    a: AbstractConst<'tcx>,\n-    b: AbstractConst<'tcx>,\n+    mut a: AbstractConst<'tcx>,\n+    mut b: AbstractConst<'tcx>,\n ) -> bool {\n+    // We substitute generics repeatedly to allow AbstractConsts to unify where a\n+    // ConstKind::Unevalated could be turned into an AbstractConst that would unify e.g.\n+    // Param(N) should unify with Param(T), substs: [Unevaluated(\"T2\", [Unevaluated(\"T3\", [Param(N)])])]\n+    while let Node::Leaf(a_ct) = a.root() {\n+        let a_ct = a_ct.subst(tcx, a.substs);\n+        match AbstractConst::from_const(tcx, a_ct) {\n+            Ok(Some(a_act)) => a = a_act,\n+            Ok(None) => break,\n+            Err(_) => return true,\n+        }\n+    }\n+    while let Node::Leaf(b_ct) = b.root() {\n+        let b_ct = b_ct.subst(tcx, b.substs);\n+        match AbstractConst::from_const(tcx, b_ct) {\n+            Ok(Some(b_act)) => b = b_act,\n+            Ok(None) => break,\n+            Err(_) => return true,\n+        }\n+    }\n+\n     match (a.root(), b.root()) {\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n             let a_ct = a_ct.subst(tcx, a.substs);\n@@ -632,8 +652,6 @@ pub(super) fn try_unify<'tcx>(\n                 // we do not want to use `assert_eq!(a(), b())` to infer that `N` and `M` have to be `1`. This\n                 // means that we only allow inference variables if they are equal.\n                 (ty::ConstKind::Infer(a_val), ty::ConstKind::Infer(b_val)) => a_val == b_val,\n-                // We may want to instead recurse into unevaluated constants here. That may require some\n-                // care to prevent infinite recursion, so let's just ignore this for now.\n                 (\n                     ty::ConstKind::Unevaluated(a_def, a_substs, None),\n                     ty::ConstKind::Unevaluated(b_def, b_substs, None),"}, {"sha": "0fe84c1cd2a7225cdc2f6d601436fadd8ca58033", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested-abstract-consts-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-1.rs?ref=f183e5f04c0576ec4dedefe3c7caaafaade3f267", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+fn callee<const M2: usize>() -> usize\n+where\n+    [u8; M2 + 1]: Sized,\n+{\n+    M2\n+}\n+\n+fn caller<const N1: usize>() -> usize\n+where\n+    [u8; N1 + 1]: Sized,\n+    [u8; (N1 + 1) + 1]: Sized,\n+{\n+    callee::<{ N1 + 1 }>()\n+}\n+\n+fn main() {\n+    assert_eq!(caller::<4>(), 5);\n+}\n+\n+// Test that the ``(N1 + 1) + 1`` bound on ``caller`` satisfies the ``M2 + 1`` bound on ``callee``"}, {"sha": "4f588238e23ffb458ec33950a20d85c1295c519f", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested-abstract-consts-2.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested-abstract-consts-2.rs?ref=f183e5f04c0576ec4dedefe3c7caaafaade3f267", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+#![feature(const_evaluatable_checked, const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Generic<const K: u64>;\n+\n+struct ConstU64<const K: u64>;\n+\n+impl<const K: u64> Generic<K>\n+where\n+    ConstU64<{ K - 1 }>: ,\n+{\n+    fn foo(self) -> u64 {\n+        K\n+    }\n+}\n+\n+impl<const K: u64> Generic<K>\n+where\n+    ConstU64<{ K - 1 }>: ,\n+    ConstU64<{ K + 1 }>: ,\n+    ConstU64<{ K + 1 - 1 }>: ,\n+{\n+    fn bar(self) -> u64 {\n+        let x: Generic<{ K + 1 }> = Generic;\n+        x.foo()\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!((Generic::<10>).bar(), 11);\n+}\n+\n+// Test that the ``ConstU64<{ K + 1 - 1}>`` bound on ``bar``'s impl block satisfies the\n+// ``ConstU64<{K - 1}>`` bound on ``foo``'s impl block"}, {"sha": "1428f774b0d70f14919d236462c686d3e2920435", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested_uneval_unification-1.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs?ref=f183e5f04c0576ec4dedefe3c7caaafaade3f267", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+fn zero_init<const N: usize>() -> Substs1<N>\n+where\n+    [u8; N + 1]: ,\n+{\n+    Substs1([0; N + 1])\n+}\n+struct Substs1<const N: usize>([u8; N + 1])\n+where\n+    [(); N + 1]: ;\n+\n+fn substs2<const M: usize>() -> Substs1<{ M * 2 }>\n+where\n+    [(); { M * 2 } + 1]: ,\n+{\n+    zero_init::<{ M * 2 }>()\n+}\n+\n+fn substs3<const L: usize>() -> Substs1<{ (L - 1) * 2 }>\n+where\n+    [(); (L - 1)]: ,\n+    [(); (L - 1) * 2 + 1]: ,\n+{\n+    substs2::<{ L - 1 }>()\n+}\n+\n+fn main() {\n+    assert_eq!(substs3::<2>().0, [0; 3]);\n+}\n+\n+// Test that the ``{ (L - 1) * 2 + 1 }`` bound on ``substs3`` satisfies the\n+// ``{ N + 1 }`` bound on ``Substs1``"}, {"sha": "be8219a7446692589f422f0d1284f5a11fcd2bdd", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested_uneval_unification-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f183e5f04c0576ec4dedefe3c7caaafaade3f267/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-2.rs?ref=f183e5f04c0576ec4dedefe3c7caaafaade3f267", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features, unused_parens, unused_braces)]\n+\n+fn zero_init<const N: usize>() -> Substs1<{ (N) }>\n+where\n+    [u8; { (N) }]: ,\n+{\n+    Substs1([0; { (N) }])\n+}\n+\n+struct Substs1<const N: usize>([u8; { (N) }])\n+where\n+    [(); { (N) }]: ;\n+\n+fn substs2<const M: usize>() -> Substs1<{ (M) }> {\n+    zero_init::<{ (M) }>()\n+}\n+\n+fn substs3<const L: usize>() -> Substs1<{ (L) }> {\n+    substs2::<{ (L) }>()\n+}\n+\n+fn main() {\n+    assert_eq!(substs3::<2>().0, [0; 2]);\n+}\n+\n+// Test that the implicit ``{ (L) }`` bound on ``substs3`` satisfies the\n+// ``{ (N) }`` bound on ``Substs1``"}]}