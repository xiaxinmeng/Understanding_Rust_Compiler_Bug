{"sha": "43e7d80ec4ee340636ffabfa2c05ed24a725fa89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTdkODBlYzRlZTM0MDYzNmZmYWJmYTJjMDVlZDI0YTcyNWZhODk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T19:31:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-21T08:27:01Z"}, "message": "source map pattern", "tree": {"sha": "45c563c7c1e71700dbd9683c28e457b2e9f4953e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c563c7c1e71700dbd9683c28e457b2e9f4953e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e7d80ec4ee340636ffabfa2c05ed24a725fa89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e7d80ec4ee340636ffabfa2c05ed24a725fa89", "html_url": "https://github.com/rust-lang/rust/commit/43e7d80ec4ee340636ffabfa2c05ed24a725fa89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e7d80ec4ee340636ffabfa2c05ed24a725fa89/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00059c8224772778586bdf063c76dcbdd04f011", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00059c8224772778586bdf063c76dcbdd04f011", "html_url": "https://github.com/rust-lang/rust/commit/c00059c8224772778586bdf063c76dcbdd04f011"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "d6a9057de13e4478d992de2fea1d512b08b897bd", "filename": "guide.md", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/43e7d80ec4ee340636ffabfa2c05ed24a725fa89/guide.md", "raw_url": "https://github.com/rust-lang/rust/raw/43e7d80ec4ee340636ffabfa2c05ed24a725fa89/guide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/guide.md?ref=43e7d80ec4ee340636ffabfa2c05ed24a725fa89", "patch": "@@ -426,8 +426,65 @@ actually written by the user.\n \n [`HirFileId`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/ids.rs#L18-L125\n \n+Now that we understand how to identify a definition, in a source or in a\n+macro-generated file, we can discuss name resolution a bit.\n+\n ## Name resolution\n \n+Name resolution faces the same problem as the module tree: if we look at the\n+syntax tree directly, we'll have to recompute name resolution after every\n+modification. The solution to the problem is the same: we [lower] source code of\n+each module into a position-independent representation which does not change if\n+we modify bodies of the items. After that we [loop] resolving all imports until\n+we've reached a fixed point.\n+\n+[lower]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L113-L117\n+[loop]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L113-L117\n+\n+And, given all our preparation with ids and position-independent representation,\n+it is satisfying to [test] that typing inside function body does not invalidate\n+name resolution results.\n+\n+[test]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/tests.rs#L376\n+\n+An interesting fact about name resolution is that it \"erases\" all of\n+intermediate paths from the imports: in the end, we know which items are defined\n+and which items are imported in each module, but, if the import was `use\n+foo::bar::baz`, we deliberately forget what modules `foo` and `bar` resolve to.\n+\n+To serve \"goto definition\" requests on intermediate segments we need this info\n+in IDE. Luckily, we need it only for a tiny fraction of imports, so we just ask\n+the module explicitly, \"where does `foo::bar` path resolve to?\". This is a\n+general pattern: we try to compute the minimal possible amount of information\n+during analysis while allowing IDE to ask for additional specific bits.\n+\n+Name resolution is also a good place to introduce another salsa pattern used\n+throughout the analyzer:\n+\n ## Source Map pattern\n \n+Due to an obscure edge case in completion, IDE needs to know the syntax node of\n+an use statement which imported the given completion candidate. We can't just\n+store the syntax node as a part of name resolution: this will break\n+incrementality, due to the fact that syntax changes after every file\n+modification.\n+\n+We solve this problem during the lowering step of name resolution. Lowering\n+query actually produces a *pair* of outputs: `LoweredModule` and [`SourceMap`].\n+`LoweredModule` module contains [imports], but in a position-independent form.\n+The `SourceMap` contains a mapping from position-independent imports to\n+(position-dependent) syntax nodes.\n+\n+The result of this basic lowering query changes after every modification. But\n+there's an intermediate [projection query] which returns only the first\n+position-independent part of the lowering. The result of this query is stable.\n+Naturally, name resolution [uses] this stable projection query.\n+\n+[imports]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L52-L59\n+[`SourceMap`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L52-L59\n+[projection query]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/nameres/lower.rs#L97-L103\n+[uses]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/query_definitions.rs#L49\n+\n+## Type inference\n+\n ## Tying it all together: completion"}]}