{"sha": "64dfd3b2340a42f5fda5802d50c9739d38533102", "node_id": "C_kwDOAAsO6NoAKDY0ZGZkM2IyMzQwYTQyZjVmZGE1ODAyZDUwYzk3MzlkMzg1MzMxMDI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-17T14:26:45Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-17T15:15:11Z"}, "message": "Make negative coherence work when there's impl negative on super predicates", "tree": {"sha": "af400c4c1e7bb7983e39dfbc999c7e9f2ad07d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af400c4c1e7bb7983e39dfbc999c7e9f2ad07d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64dfd3b2340a42f5fda5802d50c9739d38533102", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmIzUIMACgkQgTGiTgx5\n76+S3g/9HX8BVmrT+LfyA3niKgiW5u6MpF+Nmc+i+GtbDmdP4pU134T3Wq55lT0R\nhJbJWsU3RRWDSNgI6ju1LsEsVMuAsDuguGzrozonxH0xz+a9+Oyy0g99z7vqO8/5\nRNDlqQEbLOiKLiDxN1G/ZnFv7Tg5A9MJ2pHNVbVK1LEN0UmZtqDHo5oR9sSHrwcE\nwksqyRqP03A5no35JmZVx79nEpYG/B9AcgwKPpJdoP/lc0rjmVt/u2fzvzbwMJJt\nSaHdMD6uWC6+pFUM0Xpma7XBDKaTiF9f80V65auVxfrP/YOMPm9aFqKrj/BrAcg4\n0qX2Jsl3+CnDS0RfnCMtf8hDh7LTdkrh0L/rRBKrda769Xbl184f5NZ2U0xnrMR2\nxTPk4uR84LyUYY9TRxvVGnC//ge0xWTNS9DXs3NQZXUq1v5CyDX2X4pLfsXE4MNs\nGzXq82hsc0ddh/Pe0YWWdhp+oimcA7ozH/xNRln+JxZgI5hJSy3OBZx9z96OgHnP\n2l5lbykyia7HDl54MGU80gtBINhUarXxnrq6DuXlKdH4kpUrTMjKIWQ5QWWHpdOa\nWQlaJbPlnzUIMDWdv550elaHyXyASw4mJ8/Y5eWU7iVgGn5JFLdICR4FULJyp0C3\nlb0UD48Sf6bvhyer34FelR4vvsN8qmogBG+F5SNvfG42fJgL9Q8=\n=k59g\n-----END PGP SIGNATURE-----", "payload": "tree af400c4c1e7bb7983e39dfbc999c7e9f2ad07d55\nparent 78346489c66779d024c60af2d2f0f5d9d455f688\nauthor Santiago Pastorino <spastorino@gmail.com> 1647527205 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1647530111 -0300\n\nMake negative coherence work when there's impl negative on super predicates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64dfd3b2340a42f5fda5802d50c9739d38533102", "html_url": "https://github.com/rust-lang/rust/commit/64dfd3b2340a42f5fda5802d50c9739d38533102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64dfd3b2340a42f5fda5802d50c9739d38533102/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78346489c66779d024c60af2d2f0f5d9d455f688", "url": "https://api.github.com/repos/rust-lang/rust/commits/78346489c66779d024c60af2d2f0f5d9d455f688", "html_url": "https://github.com/rust-lang/rust/commit/78346489c66779d024c60af2d2f0f5d9d455f688"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "72a06abd8e034b5d3e7466a269ad91268d6be955", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64dfd3b2340a42f5fda5802d50c9739d38533102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dfd3b2340a42f5fda5802d50c9739d38533102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=64dfd3b2340a42f5fda5802d50c9739d38533102", "patch": "@@ -18,7 +18,7 @@ use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::CRATE_HIR_ID;\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_infer::traits::TraitEngine;\n+use rustc_infer::traits::{util, TraitEngine};\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{self, TreatParams};\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -353,6 +353,7 @@ fn negative_impl<'cx, 'tcx>(\n     })\n }\n \n+#[instrument(level = \"debug\", skip(selcx))]\n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -361,14 +362,18 @@ fn negative_impl_exists<'cx, 'tcx>(\n ) -> bool {\n     let infcx = &selcx.infcx().fork();\n     let tcx = infcx.tcx;\n-    o.flip_polarity(tcx)\n-        .map(|o| {\n+\n+    let super_obligations = util::elaborate_predicates(tcx, iter::once(o.predicate));\n+\n+    for o in iter::once(o.clone()).chain(super_obligations) {\n+        if let Some(o) = o.flip_polarity(tcx) {\n             let mut fulfillment_cx = FulfillmentContext::new();\n             fulfillment_cx.register_predicate_obligation(infcx, o);\n \n             let errors = fulfillment_cx.select_all_or_error(infcx);\n+\n             if !errors.is_empty() {\n-                return false;\n+                continue;\n             }\n \n             let mut outlives_env = OutlivesEnvironment::new(param_env);\n@@ -389,13 +394,16 @@ fn negative_impl_exists<'cx, 'tcx>(\n \n             let errors =\n                 infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+\n             if !errors.is_empty() {\n-                return false;\n+                continue;\n             }\n \n-            true\n-        })\n-        .unwrap_or(false)\n+            return true;\n+        }\n+    }\n+\n+    false\n }\n \n pub fn trait_ref_is_knowable<'tcx>("}, {"sha": "d296a094a37046920af49bcff1d06b794d44da33", "filename": "src/test/ui/coherence/coherence-overlap-super-negative.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64dfd3b2340a42f5fda5802d50c9739d38533102/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-super-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dfd3b2340a42f5fda5802d50c9739d38533102/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-super-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-super-negative.rs?ref=64dfd3b2340a42f5fda5802d50c9739d38533102", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(negative_impls)]\n+#![feature(rustc_attrs)]\n+#![feature(with_negative_coherence)]\n+\n+trait Trait1: Trait2 {}\n+trait Trait2 {}\n+\n+struct MyType {}\n+impl !Trait2 for MyType {}\n+\n+#[rustc_strict_coherence]\n+trait Foo {}\n+impl<T: Trait1> Foo for T {}\n+impl Foo for MyType {}\n+\n+fn main() {}"}]}