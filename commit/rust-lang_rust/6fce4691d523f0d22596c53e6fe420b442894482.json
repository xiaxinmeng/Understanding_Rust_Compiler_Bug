{"sha": "6fce4691d523f0d22596c53e6fe420b442894482", "node_id": "C_kwDOAAsO6NoAKDZmY2U0NjkxZDUyM2YwZDIyNTk2YzUzZTZmZTQyMGI0NDI4OTQ0ODI", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-11-21T20:04:59Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-11-21T20:05:06Z"}, "message": "Clippy: Don't import GenericParamDefKind", "tree": {"sha": "515baae4dbeb7119162a99e93f55f376f0a867de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515baae4dbeb7119162a99e93f55f376f0a867de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fce4691d523f0d22596c53e6fe420b442894482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fce4691d523f0d22596c53e6fe420b442894482", "html_url": "https://github.com/rust-lang/rust/commit/6fce4691d523f0d22596c53e6fe420b442894482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fce4691d523f0d22596c53e6fe420b442894482/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28fb084ec70844a03f83dbd7a776ca0917b890be", "url": "https://api.github.com/repos/rust-lang/rust/commits/28fb084ec70844a03f83dbd7a776ca0917b890be", "html_url": "https://github.com/rust-lang/rust/commit/28fb084ec70844a03f83dbd7a776ca0917b890be"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a26cdf647164596bb273098c4b69072b9da259e3", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fce4691d523f0d22596c53e6fe420b442894482/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fce4691d523f0d22596c53e6fe420b442894482/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=6fce4691d523f0d22596c53e6fe420b442894482", "patch": "@@ -13,9 +13,9 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n-    self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, GenericParamDefKind, IntTy, List, ParamEnv,\n-    Predicate, PredicateKind, ProjectionTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable,\n-    TypeVisitable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n+    self, AdtDef, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate, PredicateKind,\n+    ProjectionTy, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n@@ -1011,7 +1011,7 @@ pub fn make_projection<'tcx>(\n                 assoc_item.def_id,\n                 substs.len(),\n                 generic_count,\n-                params.map(GenericParamDefKind::descr).collect::<Vec<_>>(),\n+                params.map(ty::GenericParamDefKind::descr).collect::<Vec<_>>(),\n                 substs,\n             );\n \n@@ -1022,9 +1022,9 @@ pub fn make_projection<'tcx>(\n                 .find(|(_, (param, arg))| {\n                     !matches!(\n                         (param, arg),\n-                        (GenericParamDefKind::Lifetime, GenericArgKind::Lifetime(_))\n-                            | (GenericParamDefKind::Type { .. }, GenericArgKind::Type(_))\n-                            | (GenericParamDefKind::Const { .. }, GenericArgKind::Const(_))\n+                        (ty::GenericParamDefKind::Lifetime, GenericArgKind::Lifetime(_))\n+                            | (ty::GenericParamDefKind::Type { .. }, GenericArgKind::Type(_))\n+                            | (ty::GenericParamDefKind::Const { .. }, GenericArgKind::Const(_))\n                     )\n                 })\n             {\n@@ -1036,7 +1036,7 @@ pub fn make_projection<'tcx>(\n                     idx,\n                     param.descr(),\n                     arg,\n-                    params.map(GenericParamDefKind::descr).collect::<Vec<_>>(),\n+                    params.map(ty::GenericParamDefKind::descr).collect::<Vec<_>>(),\n                     substs,\n                 );\n             }"}]}