{"sha": "816f1477bbcf591c0cce20f92824606412ed3c5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmYxNDc3YmJjZjU5MWMwY2NlMjBmOTI4MjQ2MDY0MTJlZDNjNWI=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-27T00:29:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-27T00:29:49Z"}, "message": "Rollup merge of #36742 - shepmaster:llvm-4-preamble, r=alexcrichton\n\nExtend preprocessor LLVM version checks to support LLVM 4.x\n\nThis doesn't actually do anything for LLVM 4.x yet, but sets the stage.", "tree": {"sha": "4c313f48d3a2fa6fc4b72fa66895a1311c49821f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c313f48d3a2fa6fc4b72fa66895a1311c49821f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816f1477bbcf591c0cce20f92824606412ed3c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816f1477bbcf591c0cce20f92824606412ed3c5b", "html_url": "https://github.com/rust-lang/rust/commit/816f1477bbcf591c0cce20f92824606412ed3c5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816f1477bbcf591c0cce20f92824606412ed3c5b/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2e115995bdb485cfe2ee71e66cca29206714c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2e115995bdb485cfe2ee71e66cca29206714c4", "html_url": "https://github.com/rust-lang/rust/commit/ee2e115995bdb485cfe2ee71e66cca29206714c4"}, {"sha": "e6e117c33ac16d2dc0a852bbc8809e5b23fa8c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e117c33ac16d2dc0a852bbc8809e5b23fa8c7b", "html_url": "https://github.com/rust-lang/rust/commit/e6e117c33ac16d2dc0a852bbc8809e5b23fa8c7b"}], "stats": {"total": 77, "additions": 43, "deletions": 34}, "files": [{"sha": "12cd81ec700444b7b07f8db14bd76e3a0065c96d", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=816f1477bbcf591c0cce20f92824606412ed3c5b", "patch": "@@ -22,7 +22,7 @@ struct RustArchiveMember {\n   Archive::Child child;\n \n   RustArchiveMember(): filename(NULL), name(NULL),\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     child(NULL, NULL, NULL)\n #else\n     child(NULL, NULL)\n@@ -35,7 +35,7 @@ struct RustArchiveMember {\n struct RustArchiveIterator {\n     Archive::child_iterator cur;\n     Archive::child_iterator end;\n-#if LLVM_VERSION_MINOR >= 9\n+#if LLVM_VERSION_GE(3, 9)\n     Error err;\n #endif\n };\n@@ -81,15 +81,15 @@ LLVMRustOpenArchive(char *path) {\n         return nullptr;\n     }\n \n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n     ErrorOr<std::unique_ptr<Archive>> archive_or =\n #else\n     Expected<std::unique_ptr<Archive>> archive_or =\n #endif\n         Archive::create(buf_or.get()->getMemBufferRef());\n \n     if (!archive_or) {\n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n         LLVMRustSetLastError(archive_or.getError().message().c_str());\n #else\n         LLVMRustSetLastError(toString(archive_or.takeError()).c_str());\n@@ -112,7 +112,7 @@ extern \"C\" LLVMRustArchiveIteratorRef\n LLVMRustArchiveIteratorNew(LLVMRustArchiveRef ra) {\n     Archive *ar = ra->getBinary();\n     RustArchiveIterator *rai = new RustArchiveIterator();\n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n     rai->cur = ar->child_begin();\n #else\n     rai->cur = ar->child_begin(rai->err);\n@@ -127,15 +127,15 @@ LLVMRustArchiveIteratorNew(LLVMRustArchiveRef ra) {\n \n extern \"C\" LLVMRustArchiveChildConstRef\n LLVMRustArchiveIteratorNext(LLVMRustArchiveIteratorRef rai) {\n-#if LLVM_VERSION_MINOR >= 9\n+#if LLVM_VERSION_GE(3, 9)\n     if (rai->err) {\n         LLVMRustSetLastError(toString(std::move(rai->err)).c_str());\n         return NULL;\n     }\n #endif\n     if (rai->cur == rai->end)\n         return NULL;\n-#if LLVM_VERSION_MINOR == 8\n+#if LLVM_VERSION_EQ(3, 8)\n     const ErrorOr<Archive::Child>* cur = rai->cur.operator->();\n     if (!*cur) {\n         LLVMRustSetLastError(cur->getError().message().c_str());\n@@ -207,7 +207,7 @@ LLVMRustWriteArchive(char *Dst,\n                      bool WriteSymbtab,\n                      LLVMRustArchiveKind rust_kind) {\n \n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n   std::vector<NewArchiveIterator> Members;\n #else\n   std::vector<NewArchiveMember> Members;\n@@ -218,20 +218,20 @@ LLVMRustWriteArchive(char *Dst,\n     auto Member = NewMembers[i];\n     assert(Member->name);\n     if (Member->filename) {\n-#if LLVM_VERSION_MINOR >= 9\n+#if LLVM_VERSION_GE(3, 9)\n       Expected<NewArchiveMember> MOrErr = NewArchiveMember::getFile(Member->filename, true);\n       if (!MOrErr) {\n         LLVMRustSetLastError(toString(MOrErr.takeError()).c_str());\n         return LLVMRustResult::Failure;\n       }\n       Members.push_back(std::move(*MOrErr));\n-#elif LLVM_VERSION_MINOR == 8\n+#elif LLVM_VERSION_EQ(3, 8)\n       Members.push_back(NewArchiveIterator(Member->filename));\n #else\n       Members.push_back(NewArchiveIterator(Member->filename, Member->name));\n #endif\n     } else {\n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n       Members.push_back(NewArchiveIterator(Member->child, Member->name));\n #else\n       Expected<NewArchiveMember> MOrErr = NewArchiveMember::getOldMember(Member->child, true);\n@@ -243,7 +243,7 @@ LLVMRustWriteArchive(char *Dst,\n #endif\n     }\n   }\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n   auto pair = writeArchive(Dst, Members, WriteSymbtab, Kind, true, false);\n #else\n   auto pair = writeArchive(Dst, Members, WriteSymbtab, Kind, true);"}, {"sha": "60093e9bd37a812afdd97d87ed125658fd0f6a1b", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=816f1477bbcf591c0cce20f92824606412ed3c5b", "patch": "@@ -46,7 +46,7 @@ LLVMInitializePasses() {\n   initializeVectorization(Registry);\n   initializeIPO(Registry);\n   initializeAnalysis(Registry);\n-#if LLVM_VERSION_MINOR == 7\n+#if LLVM_VERSION_EQ(3, 7)\n   initializeIPA(Registry);\n #endif\n   initializeTransformUtils(Registry);\n@@ -297,7 +297,7 @@ LLVMRustCreateTargetMachine(const char *triple,\n                             bool FunctionSections,\n                             bool DataSections) {\n \n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n     Reloc::Model RM;\n #else\n     Optional<Reloc::Model> RM;\n@@ -316,7 +316,7 @@ LLVMRustCreateTargetMachine(const char *triple,\n             RM = Reloc::DynamicNoPIC;\n             break;\n         default:\n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n             RM = Reloc::Default;\n #endif\n             break;\n@@ -337,7 +337,7 @@ LLVMRustCreateTargetMachine(const char *triple,\n     }\n \n     TargetOptions Options;\n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n     Options.PositionIndependentExecutable = PositionIndependentExecutable;\n #endif\n \n@@ -539,7 +539,7 @@ extern \"C\" void\n LLVMRustRunRestrictionPass(LLVMModuleRef M, char **symbols, size_t len) {\n     llvm::legacy::PassManager passes;\n \n-#if LLVM_VERSION_MINOR <= 8\n+#if LLVM_VERSION_LE(3, 8)\n     ArrayRef<const char*> ref(symbols, len);\n     passes.add(llvm::createInternalizePass(ref));\n #else\n@@ -593,7 +593,7 @@ LLVMRustGetModuleDataLayout(LLVMModuleRef M) {\n \n extern \"C\" void\n LLVMRustSetModulePIELevel(LLVMModuleRef M) {\n-#if LLVM_VERSION_MINOR >= 9\n+#if LLVM_VERSION_GE(3, 9)\n     unwrap(M)->setPIELevel(PIELevel::Level::Large);\n #endif\n }"}, {"sha": "672ab117f15f3c801006079ce22db0be62c7a989", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=816f1477bbcf591c0cce20f92824606412ed3c5b", "patch": "@@ -394,7 +394,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateSubroutineType(\n     LLVMRustMetadataRef File,\n     LLVMRustMetadataRef ParameterTypes) {\n     return wrap(Builder->createSubroutineType(\n-#if LLVM_VERSION_MINOR == 7\n+#if LLVM_VERSION_EQ(3, 7)\n         unwrapDI<DIFile>(File),\n #endif\n         DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n@@ -416,7 +416,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n     LLVMValueRef Fn,\n     LLVMRustMetadataRef TParam,\n     LLVMRustMetadataRef Decl) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     DITemplateParameterArray TParams =\n         DITemplateParameterArray(unwrap<MDTuple>(TParam));\n     DISubprogram *Sub = Builder->createFunction(\n@@ -565,7 +565,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n     int64_t* AddrOps,\n     unsigned AddrOpsCount,\n     unsigned ArgNo) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     if (Tag == 0x100) { // DW_TAG_auto_variable\n         return wrap(Builder->createAutoVariable(\n             unwrapDI<DIDescriptor>(Scope), Name,\n@@ -814,7 +814,7 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n \n     raw_string_ostream Stream(Err);\n     DiagnosticPrinterRawOStream DP(Stream);\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     if (Linker::linkModules(*Dst, std::move(Src.get()))) {\n #else\n     if (Linker::LinkModules(Dst, Src->get(), [&](const DiagnosticInfo &DI) { DI.print(DP); })) {\n@@ -937,14 +937,14 @@ to_rust(DiagnosticKind kind)\n         return LLVMRustDiagnosticKind::OptimizationRemarkMissed;\n     case DK_OptimizationRemarkAnalysis:\n         return LLVMRustDiagnosticKind::OptimizationRemarkAnalysis;\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     case DK_OptimizationRemarkAnalysisFPCommute:\n         return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisFPCommute;\n     case DK_OptimizationRemarkAnalysisAliasing:\n         return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisAliasing;\n #endif\n     default:\n-#if LLVM_VERSION_MINOR >= 9\n+#if LLVM_VERSION_GE(3, 9)\n         return (kind >= DK_FirstRemark && kind <= DK_LastRemark) ?\n             LLVMRustDiagnosticKind::OptimizationRemarkOther :\n             LLVMRustDiagnosticKind::Other;\n@@ -994,7 +994,7 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMVectorTypeKind;\n   case Type::X86_MMXTyID:\n     return LLVMX86_MMXTypeKind;\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n   case Type::TokenTyID:\n     return LLVMTokenTypeKind;\n #endif\n@@ -1043,7 +1043,7 @@ LLVMRustBuildCleanupPad(LLVMBuilderRef Builder,\n                         unsigned ArgCnt,\n                         LLVMValueRef *LLArgs,\n                         const char *Name) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     Value **Args = unwrap(LLArgs);\n     if (ParentPad == NULL) {\n         Type *Ty = Type::getTokenTy(unwrap(Builder)->getContext());\n@@ -1061,7 +1061,7 @@ extern \"C\" LLVMValueRef\n LLVMRustBuildCleanupRet(LLVMBuilderRef Builder,\n                         LLVMValueRef CleanupPad,\n                         LLVMBasicBlockRef UnwindBB) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     CleanupPadInst *Inst = cast<CleanupPadInst>(unwrap(CleanupPad));\n     return wrap(unwrap(Builder)->CreateCleanupRet(Inst, unwrap(UnwindBB)));\n #else\n@@ -1075,7 +1075,7 @@ LLVMRustBuildCatchPad(LLVMBuilderRef Builder,\n                       unsigned ArgCnt,\n                       LLVMValueRef *LLArgs,\n                       const char *Name) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     Value **Args = unwrap(LLArgs);\n     return wrap(unwrap(Builder)->CreateCatchPad(unwrap(ParentPad),\n                                                 ArrayRef<Value*>(Args, ArgCnt),\n@@ -1089,7 +1089,7 @@ extern \"C\" LLVMValueRef\n LLVMRustBuildCatchRet(LLVMBuilderRef Builder,\n                       LLVMValueRef Pad,\n                       LLVMBasicBlockRef BB) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     return wrap(unwrap(Builder)->CreateCatchRet(cast<CatchPadInst>(unwrap(Pad)),\n                                                 unwrap(BB)));\n #else\n@@ -1103,7 +1103,7 @@ LLVMRustBuildCatchSwitch(LLVMBuilderRef Builder,\n                          LLVMBasicBlockRef BB,\n                          unsigned NumHandlers,\n                          const char *Name) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     if (ParentPad == NULL) {\n         Type *Ty = Type::getTokenTy(unwrap(Builder)->getContext());\n         ParentPad = wrap(Constant::getNullValue(Ty));\n@@ -1120,7 +1120,7 @@ LLVMRustBuildCatchSwitch(LLVMBuilderRef Builder,\n extern \"C\" void\n LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n                    LLVMBasicBlockRef Handler) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     Value *CatchSwitch = unwrap(CatchSwitchRef);\n     cast<CatchSwitchInst>(CatchSwitch)->addHandler(unwrap(Handler));\n #endif\n@@ -1129,14 +1129,14 @@ LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n extern \"C\" void\n LLVMRustSetPersonalityFn(LLVMBuilderRef B,\n                          LLVMValueRef Personality) {\n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n     unwrap(B)->GetInsertBlock()\n              ->getParent()\n              ->setPersonalityFn(cast<Function>(unwrap(Personality)));\n #endif\n }\n \n-#if LLVM_VERSION_MINOR >= 8\n+#if LLVM_VERSION_GE(3, 8)\n extern \"C\" OperandBundleDef*\n LLVMRustBuildOperandBundleDef(const char *Name,\n                               LLVMValueRef *Inputs,"}, {"sha": "ffe94d1e22f20b117bd607cb3ab129f10ef75100", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/816f1477bbcf591c0cce20f92824606412ed3c5b/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=816f1477bbcf591c0cce20f92824606412ed3c5b", "patch": "@@ -45,7 +45,16 @@\n #include \"llvm-c/ExecutionEngine.h\"\n #include \"llvm-c/Object.h\"\n \n-#if LLVM_VERSION_MINOR >= 7\n+#define LLVM_VERSION_GE(major, minor) \\\n+  (LLVM_VERSION_MAJOR > (major) || LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR >= (minor))\n+\n+#define LLVM_VERSION_EQ(major, minor) \\\n+  (LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR == (minor))\n+\n+#define LLVM_VERSION_LE(major, minor) \\\n+  (LLVM_VERSION_MAJOR < (major) || LLVM_VERSION_MAJOR == (major) && LLVM_VERSION_MINOR <= (minor))\n+\n+#if LLVM_VERSION_GE(3, 7)\n #include \"llvm/IR/LegacyPassManager.h\"\n #else\n #include \"llvm/PassManager.h\""}]}