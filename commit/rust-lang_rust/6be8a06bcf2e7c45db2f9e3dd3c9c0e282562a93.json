{"sha": "6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZThhMDZiY2YyZTdjNDVkYjJmOWUzZGQzYzljMGUyODI1NjJhOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-02T15:54:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-02T15:54:11Z"}, "message": "Auto merge of #87698 - camsteffen:rollup-yvjfc26, r=camsteffen\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #86176 (Implement a `explicit_generic_args_with_impl_trait` feature gate)\n - #87654 (Add documentation for the order of Option and Result)\n - #87659 (Fix invalid suggestions for non-ASCII characters in byte constants)\n - #87673 (Tweak opaque type mismatch error)\n - #87687 (Inline some macros)\n - #87690 (Add missing \"allocated object\" doc link to `<*mut T>::add`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5b4d80eede168926e22d9f1aa206ceb983e2e011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b4d80eede168926e22d9f1aa206ceb983e2e011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "html_url": "https://github.com/rust-lang/rust/commit/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3227e35765bab6d02c581928e26ad1d34bacf394", "url": "https://api.github.com/repos/rust-lang/rust/commits/3227e35765bab6d02c581928e26ad1d34bacf394", "html_url": "https://github.com/rust-lang/rust/commit/3227e35765bab6d02c581928e26ad1d34bacf394"}, {"sha": "7fc26e96657f39de592d7667eac3b0df39642a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc26e96657f39de592d7667eac3b0df39642a66", "html_url": "https://github.com/rust-lang/rust/commit/7fc26e96657f39de592d7667eac3b0df39642a66"}], "stats": {"total": 607, "additions": 437, "deletions": 170}, "files": [{"sha": "bacf5662bc0058d4e98afbf064553bfc630aec94", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -442,18 +442,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         then: &Block,\n         else_opt: Option<&Expr>,\n     ) -> hir::ExprKind<'hir> {\n-        macro_rules! make_if {\n-            ($opt:expr) => {{\n-                let cond = self.lower_expr(cond);\n-                let then_expr = self.lower_block_expr(then);\n-                hir::ExprKind::If(cond, self.arena.alloc(then_expr), $opt)\n-            }};\n-        }\n-        if let Some(rslt) = else_opt {\n-            make_if!(Some(self.lower_expr(rslt)))\n-        } else {\n-            make_if!(None)\n-        }\n+        let cond = self.lower_expr(cond);\n+        let then = self.arena.alloc(self.lower_block_expr(then));\n+        let els = else_opt.map(|els| self.lower_expr(els));\n+        hir::ExprKind::If(cond, then, els)\n     }\n \n     fn lower_expr_if_let("}, {"sha": "db8d01e31b74dc243c34b56e00086d6468aef7b2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -687,6 +687,9 @@ declare_features! (\n     /// Trait upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n     (incomplete, trait_upcasting, \"1.56.0\", Some(65991), None),\n \n+    /// Allows explicit generic arguments specification with `impl Trait` present.\n+    (active, explicit_generic_args_with_impl_trait, \"1.56.0\", Some(83701), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "cdc9a21253145747b161011f0621fd5e6f9101d1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -71,7 +71,7 @@ use rustc_middle::ty::{\n     subst::{GenericArgKind, Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n+use rustc_span::{sym, BytePos, DesugaringKind, MultiSpan, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::ControlFlow;\n use std::{cmp, fmt, iter};\n@@ -1485,31 +1485,49 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let count = values.len();\n                     let kind = key.descr();\n                     let mut returned_async_output_error = false;\n-                    for sp in values {\n-                        err.span_label(\n-                            *sp,\n-                            format!(\n-                                \"{}{}{} {}{}\",\n-                                if sp.is_desugaring(DesugaringKind::Async)\n-                                    && !returned_async_output_error\n-                                {\n-                                    \"checked the `Output` of this `async fn`, \"\n-                                } else if count == 1 {\n-                                    \"the \"\n-                                } else {\n-                                    \"\"\n-                                },\n-                                if count > 1 { \"one of the \" } else { \"\" },\n-                                target,\n-                                kind,\n-                                pluralize!(count),\n-                            ),\n-                        );\n-                        if sp.is_desugaring(DesugaringKind::Async)\n-                            && returned_async_output_error == false\n-                        {\n-                            err.note(\"while checking the return type of the `async fn`\");\n+                    for &sp in values {\n+                        if sp.is_desugaring(DesugaringKind::Async) && !returned_async_output_error {\n+                            if &[sp] != err.span.primary_spans() {\n+                                let mut span: MultiSpan = sp.into();\n+                                span.push_span_label(\n+                                    sp,\n+                                    format!(\n+                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n+                                        if count > 1 { \"one of the \" } else { \"\" },\n+                                        target,\n+                                        kind,\n+                                        pluralize!(count),\n+                                    ),\n+                                );\n+                                err.span_note(\n+                                    span,\n+                                    \"while checking the return type of the `async fn`\",\n+                                );\n+                            } else {\n+                                err.span_label(\n+                                    sp,\n+                                    format!(\n+                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n+                                        if count > 1 { \"one of the \" } else { \"\" },\n+                                        target,\n+                                        kind,\n+                                        pluralize!(count),\n+                                    ),\n+                                );\n+                                err.note(\"while checking the return type of the `async fn`\");\n+                            }\n                             returned_async_output_error = true;\n+                        } else {\n+                            err.span_label(\n+                                sp,\n+                                format!(\n+                                    \"{}{} {}{}\",\n+                                    if count == 1 { \"the \" } else { \"one of the \" },\n+                                    target,\n+                                    kind,\n+                                    pluralize!(count),\n+                                ),\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "a15eecd2414c27f8689754e5577e862ae2a14d16", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -769,7 +769,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                 // (#83606): Do not emit a suggestion if the parent has an `impl Trait`\n                 // as an argument otherwise it will cause the E0282 error.\n-                if !has_impl_trait {\n+                if !has_impl_trait || self.tcx.features().explicit_generic_args_with_impl_trait {\n                     err.span_suggestion_verbose(\n                         span,\n                         \"consider specifying the const argument\","}, {"sha": "4e95cdc0efa5f30c83392dc47498ca379b5d6d4d", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -153,16 +153,37 @@ pub(crate) fn emit_unescape_error(\n         EscapeError::NonAsciiCharInByte => {\n             assert!(mode.is_bytes());\n             let (c, span) = last_char();\n-            handler\n-                .struct_span_err(span, \"non-ASCII character in byte constant\")\n-                .span_label(span, \"byte constant must be ASCII\")\n-                .span_suggestion(\n+            let mut err = handler.struct_span_err(span, \"non-ASCII character in byte constant\");\n+            err.span_label(span, \"byte constant must be ASCII\");\n+            if (c as u32) <= 0xFF {\n+                err.span_suggestion(\n                     span,\n-                    \"use a \\\\xHH escape for a non-ASCII byte\",\n+                    &format!(\n+                        \"if you meant to use the unicode code point for '{}', use a \\\\xHH escape\",\n+                        c\n+                    ),\n                     format!(\"\\\\x{:X}\", c as u32),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else if matches!(mode, Mode::Byte) {\n+                err.span_label(span, \"this multibyte character does not fit into a single byte\");\n+            } else if matches!(mode, Mode::ByteStr) {\n+                let mut utf8 = String::new();\n+                utf8.push(c);\n+                err.span_suggestion(\n+                    span,\n+                    &format!(\n+                        \"if you meant to use the UTF-8 encoding of '{}', use \\\\xHH escapes\",\n+                        c\n+                    ),\n+                    utf8.as_bytes()\n+                        .iter()\n+                        .map(|b: &u8| format!(\"\\\\x{:X}\", *b))\n+                        .fold(\"\".to_string(), |a, c| a + &c),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            err.emit();\n         }\n         EscapeError::NonAsciiCharInByteString => {\n             assert!(mode.is_bytes());"}, {"sha": "95b92fd34c8aa237b655b57f30a1b3df75aef6f8", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -554,6 +554,7 @@ symbols! {\n         expected,\n         expf32,\n         expf64,\n+        explicit_generic_args_with_impl_trait,\n         export_name,\n         expr,\n         extended_key_value_attributes,"}, {"sha": "9e700d9e8d8ba632652b3988ac69cd91b850994e", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -459,7 +459,32 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let default_counts = gen_params.own_defaults();\n         let param_counts = gen_params.own_counts();\n-        let named_type_param_count = param_counts.types - has_self as usize;\n+\n+        // Subtracting from param count to ensure type params synthesized from `impl Trait`\n+        // cannot be explictly specified even with `explicit_generic_args_with_impl_trait`\n+        // feature enabled.\n+        let synth_type_param_count = if tcx.features().explicit_generic_args_with_impl_trait {\n+            gen_params\n+                .params\n+                .iter()\n+                .filter(|param| {\n+                    matches!(\n+                        param.kind,\n+                        ty::GenericParamDefKind::Type {\n+                            synthetic: Some(\n+                                hir::SyntheticTyParamKind::ImplTrait\n+                                    | hir::SyntheticTyParamKind::FromAttr\n+                            ),\n+                            ..\n+                        }\n+                    )\n+                })\n+                .count()\n+        } else {\n+            0\n+        };\n+        let named_type_param_count =\n+            param_counts.types - has_self as usize - synth_type_param_count;\n         let infer_lifetimes =\n             gen_pos != GenericArgPosition::Type && !gen_args.has_lifetime_params();\n \n@@ -588,6 +613,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 param_counts.consts + named_type_param_count\n                     - default_counts.types\n                     - default_counts.consts\n+                    - synth_type_param_count\n             };\n             debug!(\"expected_min: {:?}\", expected_min);\n             debug!(\"arg_counts.lifetimes: {:?}\", gen_args.num_lifetime_params());\n@@ -617,7 +643,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         seg: &hir::PathSegment<'_>,\n         generics: &ty::Generics,\n     ) -> bool {\n-        let explicit = !seg.infer_args;\n+        if seg.infer_args || tcx.features().explicit_generic_args_with_impl_trait {\n+            return false;\n+        }\n+\n         let impl_trait = generics.params.iter().any(|param| {\n             matches!(\n                 param.kind,\n@@ -630,7 +659,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             )\n         });\n \n-        if explicit && impl_trait {\n+        if impl_trait {\n             let spans = seg\n                 .args()\n                 .args"}, {"sha": "dee81510b795b8942f368ed91c77f91044e23650", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -13,41 +13,6 @@ use rustc_trait_selection::traits::{\n     StatementAsExpression,\n };\n \n-macro_rules! create_maybe_get_coercion_reason {\n-    ($fn_name:ident, $node:expr) => {\n-        pub(crate) fn $fn_name(&self, hir_id: hir::HirId, sp: Span) -> Option<(Span, String)> {\n-            let node = $node(self.tcx.hir(), hir_id);\n-            if let hir::Node::Block(block) = node {\n-                // check that the body's parent is an fn\n-                let parent = self.tcx.hir().get(\n-                    self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(block.hir_id)),\n-                );\n-                if let (\n-                    Some(expr),\n-                    hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. }),\n-                ) = (&block.expr, parent)\n-                {\n-                    // check that the `if` expr without `else` is the fn body's expr\n-                    if expr.span == sp {\n-                        return self.get_fn_decl(hir_id).and_then(|(fn_decl, _)| {\n-                            let span = fn_decl.output.span();\n-                            let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n-                            Some((\n-                                span,\n-                                format!(\"expected `{}` because of this return type\", snippet),\n-                            ))\n-                        });\n-                    }\n-                }\n-            }\n-            if let hir::Node::Local(hir::Local { ty: Some(_), pat, .. }) = node {\n-                return Some((pat.span, \"expected because of this assignment\".to_string()));\n-            }\n-            None\n-        }\n-    };\n-}\n-\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn check_match(\n         &self,\n@@ -154,7 +119,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     expr.span,\n                     &arms[0].body,\n                     &mut coercion,\n-                    |hir_id, span| self.maybe_get_coercion_reason(hir_id, span),\n+                    |hir_id, span| self.coercion_reason_match(hir_id, span),\n                 ) {\n                 tcx.ty_error()\n             } else {\n@@ -373,23 +338,56 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error\n     }\n \n-    create_maybe_get_coercion_reason!(\n-        maybe_get_coercion_reason,\n-        |hir: rustc_middle::hir::map::Map<'a>, id| {\n-            let arm_id = hir.get_parent_node(id);\n-            let match_id = hir.get_parent_node(arm_id);\n-            let containing_id = hir.get_parent_node(match_id);\n-            hir.get(containing_id)\n-        }\n-    );\n+    pub(crate) fn coercion_reason_if(\n+        &self,\n+        hir_id: hir::HirId,\n+        span: Span,\n+    ) -> Option<(Span, String)> {\n+        self.coercion_reason_inner(hir_id, span, 1)\n+    }\n \n-    create_maybe_get_coercion_reason!(\n-        maybe_get_coercion_reason_if,\n-        |hir: rustc_middle::hir::map::Map<'a>, id| {\n-            let rslt = hir.get_parent_node(hir.get_parent_node(id));\n-            hir.get(rslt)\n+    pub(crate) fn coercion_reason_match(\n+        &self,\n+        hir_id: hir::HirId,\n+        span: Span,\n+    ) -> Option<(Span, String)> {\n+        self.coercion_reason_inner(hir_id, span, 2)\n+    }\n+\n+    fn coercion_reason_inner(\n+        &self,\n+        hir_id: hir::HirId,\n+        span: Span,\n+        parent_index: usize,\n+    ) -> Option<(Span, String)> {\n+        let hir = self.tcx.hir();\n+        let mut parent_iter = hir.parent_iter(hir_id);\n+        let (_, node) = parent_iter.nth(parent_index)?;\n+        match node {\n+            hir::Node::Block(block) => {\n+                let expr = block.expr?;\n+                // check that the body's parent is an fn\n+                let (_, parent) = parent_iter.nth(1)?;\n+                if let hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. }) = parent {\n+                    // check that the `if` expr without `else` is the fn body's expr\n+                    if expr.span == span {\n+                        let (fn_decl, _) = self.get_fn_decl(hir_id)?;\n+                        let span = fn_decl.output.span();\n+                        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n+                        return Some((\n+                            span,\n+                            format!(\"expected `{}` because of this return type\", snippet),\n+                        ));\n+                    }\n+                }\n+                None\n+            }\n+            hir::Node::Local(hir::Local { ty: Some(_), pat, .. }) => {\n+                Some((pat.span, \"expected because of this assignment\".to_string()))\n+            }\n+            _ => None,\n         }\n-    );\n+    }\n \n     pub(crate) fn if_cause(\n         &self,"}, {"sha": "e95884ae23b9397343ffb21ba2b067c67cd448b3", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -838,7 +838,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.diverges.set(cond_diverges | then_diverges & else_diverges);\n         } else {\n             self.if_fallback_coercion(sp, then_expr, &mut coerce, |hir_id, span| {\n-                self.maybe_get_coercion_reason_if(hir_id, span)\n+                self.coercion_reason_if(hir_id, span)\n             });\n \n             // If the condition is false we can't diverge."}, {"sha": "d4e9c384f93021ced4d79096bf4f709a1dd45135", "filename": "library/core/src/option.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -285,6 +285,19 @@\n //! assert_eq!(res, [\"error!\", \"error!\", \"foo\", \"error!\", \"bar\"]);\n //! ```\n //!\n+//! ## Comparison operators\n+//!\n+//! If `T` implements [`PartialOrd`] then [`Option<T>`] will derive its\n+//! [`PartialOrd`] implementation.  With this order, [`None`] compares as\n+//! less than any [`Some`], and two [`Some`] compare the same way as their\n+//! contained values would in `T`.  If `T` also implements\n+//! [`Ord`], then so does [`Option<T>`].\n+//!\n+//! ```\n+//! assert!(None < Some(0));\n+//! assert!(Some(0) < Some(1));\n+//! ```\n+//!\n //! ## Iterating over `Option`\n //!\n //! An [`Option`] can be iterated over. This can be helpful if you need an"}, {"sha": "98a4cb59a66291b1043b02c813a5c9f511cb3afa", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -596,6 +596,7 @@ impl<T: ?Sized> *mut T {\n     /// enables more aggressive compiler optimizations.\n     ///\n     /// [`wrapping_add`]: #method.wrapping_add\n+    /// [allocated object]: crate::ptr#allocated-object\n     ///\n     /// # Examples\n     ///"}, {"sha": "861790e8a4099cd03c2f325c6745373c1f2e9628", "filename": "library/core/src/result.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -379,6 +379,24 @@\n //! [`and_then`]: Result::and_then\n //! [`or_else`]: Result::or_else\n //!\n+//! ## Comparison operators\n+//!\n+//! If `T` and `E` both implement [`PartialOrd`] then [`Result<T, E>`] will\n+//! derive its [`PartialOrd`] implementation.  With this order, an [`Ok`]\n+//! compares as less than any [`Err`], while two [`Ok`] or two [`Err`]\n+//! compare as their contained values would in `T` or `E` respectively.  If `T`\n+//! and `E` both also implement [`Ord`], then so does [`Result<T, E>`].\n+//!\n+//! ```\n+//! assert!(Ok(1) < Err(0));\n+//! let x: Result<i32, ()> = Ok(0);\n+//! let y = Ok(1);\n+//! assert!(x < y);\n+//! let x: Result<(), i32> = Err(0);\n+//! let y = Err(1);\n+//! assert!(x < y);\n+//! ```\n+//!\n //! ## Iterating over `Result`\n //!\n //! A [`Result`] can be iterated over. This can be helpful if you need an"}, {"sha": "479571d85fe0510f5bf16730230f6bcbfed972cf", "filename": "src/doc/unstable-book/src/language-features/explicit-generic-args-with-impl-trait.md", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,53 @@\n+# `explicit_generic_args_with_impl_trait`\n+\n+The tracking issue for this feature is: [#83701]\n+\n+[#83701]: https://github.com/rust-lang/rust/issues/83701\n+\n+------------------------\n+\n+The `explicit_generic_args_with_impl_trait` feature gate lets you specify generic arguments even\n+when `impl Trait` is used in argument position.\n+\n+A simple example is:\n+\n+```rust\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str>(\"\".to_string());\n+}\n+```\n+\n+This is currently rejected:\n+\n+```text\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+ --> src/main.rs:6:11\n+  |\n+6 |     foo::<str>(\"\".to_string());\n+  |           ^^^ explicit generic argument not allowed\n+\n+```\n+\n+However it would compile if `explicit_generic_args_with_impl_trait` is enabled.\n+\n+Note that the synthetic type parameters from `impl Trait` are still implicit and you\n+cannot explicitly specify these:\n+\n+```rust,compile_fail\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+fn bar<T: ?Sized, F: AsRef<T>>(_f: F) {}\n+\n+fn main() {\n+    bar::<str, _>(\"\".to_string()); // Okay\n+    bar::<str, String>(\"\".to_string()); // Okay\n+\n+    foo::<str>(\"\".to_string()); // Okay\n+    foo::<str, String>(\"\".to_string()); // Error, you cannot specify `impl Trait` explicitly\n+}\n+```"}, {"sha": "4dc5cafb98614ca06db17d11b52e75f3c7d6962d", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n-LL | async fn make_u32() -> u32 {\n-   |                        --- checked the `Output` of this `async fn`, found opaque type\n-...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/dont-suggest-missing-await.rs:7:24\n+   |\n+LL | async fn make_u32() -> u32 {\n+   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "a7aedbb2b322f4fe3c43c5c08c1ae034e1f6354b", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -12,16 +12,19 @@ LL |     fun(async {}, async {});\n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16\n    |\n-LL | async fn one() {}\n-   |                - checked the `Output` of this `async fn`, expected opaque type\n-LL | async fn two() {}\n-   |                - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |     fun(one(), two());\n    |                ^^^^^ expected opaque type, found a different opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/generator-desc.rs:5:16\n+   |\n+LL | async fn one() {}\n+   |                ^ checked the `Output` of this `async fn`, expected opaque type\n+note: while checking the return type of the `async fn`\n+  --> $DIR/generator-desc.rs:6:16\n+   |\n+LL | async fn two() {}\n+   |                ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:5:16>)\n               found opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s"}, {"sha": "220f0774e2d54281eeead56b5ba7ba1933bfc7f7", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -57,6 +57,8 @@ async fn struct_() -> Struct {\n \n async fn tuple() -> Tuple {\n     //~^ NOTE checked the `Output` of this `async fn`, expected opaque type\n+    //~| NOTE while checking the return type of the `async fn`\n+    //~| NOTE in this expansion of desugaring of `async` block or function\n     Tuple(1i32)\n }\n \n@@ -92,7 +94,6 @@ async fn match_() {\n         Tuple(_) => {} //~ ERROR mismatched types\n         //~^ NOTE expected opaque type, found struct `Tuple`\n         //~| NOTE expected opaque type `impl Future`\n-        //~| NOTE while checking the return type of the `async fn`\n     }\n }\n "}, {"sha": "9fb2d5bc6cb42d098ce1e27ff67e5a1076854b62", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -16,7 +16,7 @@ LL |     foo().await?;\n    |          ^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/issue-61076.rs:65:5\n+  --> $DIR/issue-61076.rs:67:5\n    |\n LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n@@ -33,7 +33,7 @@ LL |     t.await?;\n    |      ^^^^^^\n \n error[E0609]: no field `0` on type `impl Future`\n-  --> $DIR/issue-61076.rs:76:26\n+  --> $DIR/issue-61076.rs:78:26\n    |\n LL |     let _: i32 = tuple().0;\n    |                          ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -44,7 +44,7 @@ LL |     let _: i32 = tuple().await.0;\n    |                         ^^^^^^\n \n error[E0609]: no field `a` on type `impl Future`\n-  --> $DIR/issue-61076.rs:80:28\n+  --> $DIR/issue-61076.rs:82:28\n    |\n LL |     let _: i32 = struct_().a;\n    |                            ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -55,7 +55,7 @@ LL |     let _: i32 = struct_().await.a;\n    |                           ^^^^^^\n \n error[E0599]: no method named `method` found for opaque type `impl Future` in the current scope\n-  --> $DIR/issue-61076.rs:84:15\n+  --> $DIR/issue-61076.rs:86:15\n    |\n LL |     struct_().method();\n    |               ^^^^^^ method not found in `impl Future`\n@@ -66,15 +66,16 @@ LL |     struct_().await.method();\n    |               ^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-61076.rs:92:9\n+  --> $DIR/issue-61076.rs:94:9\n    |\n-LL | async fn tuple() -> Tuple {\n-   |                     ----- checked the `Output` of this `async fn`, expected opaque type\n-...\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-61076.rs:58:21\n+   |\n+LL | async fn tuple() -> Tuple {\n+   |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future`\n                    found struct `Tuple`\n help: consider `await`ing on the `Future`"}, {"sha": "9d742049046b22a674196b19be37fb311af2a63d", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n-LL | async fn make_u32() -> u32 {\n-   |                        --- checked the `Output` of this `async fn`, found opaque type\n-...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await-closure.rs:8:24\n+   |\n+LL | async fn make_u32() -> u32 {\n+   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "890f66c58d0f89fce20840d8681d2fac1551fd95", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:12:14\n    |\n-LL | async fn make_u32() -> u32 {\n-   |                        --- checked the `Output` of this `async fn`, found opaque type\n-...\n LL |     take_u32(x)\n    |              ^ expected `u32`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:5:24\n+   |\n+LL | async fn make_u32() -> u32 {\n+   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -18,13 +19,14 @@ LL |     take_u32(x.await)\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:22:5\n    |\n-LL | async fn dummy() {}\n-   |                  - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "01a07ad3b0ee461fe9bbcd15c4da9963cc470118", "filename": "src/test/ui/attributes/key-value-non-ascii.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-non-ascii.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -2,10 +2,12 @@ error: non-ASCII character in byte constant\n   --> $DIR/key-value-non-ascii.rs:3:19\n    |\n LL | #[rustc_dummy = b\"\ufb03.rs\"]\n-   |                   ^\n-   |                   |\n-   |                   byte constant must be ASCII\n-   |                   help: use a \\xHH escape for a non-ASCII byte: `\\xFB03`\n+   |                   ^ byte constant must be ASCII\n+   |\n+help: if you meant to use the UTF-8 encoding of '\ufb03', use \\xHH escapes\n+   |\n+LL | #[rustc_dummy = b\"/xEF/xAC/x83.rs\"]\n+   |                   ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "832a3e3b7b10d81d742fc54302c692c0f690035d", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,7 @@\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str, String>(\"\".to_string()); //~ ERROR E0107\n+}"}, {"sha": "739e55e294381720b3339470ca36efae01e6595c", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,17 @@\n+error[E0107]: this function takes at most 1 generic argument but 2 generic arguments were supplied\n+  --> $DIR/explicit-generic-args-for-impl.rs:6:5\n+   |\n+LL |     foo::<str, String>(\"\".to_string());\n+   |     ^^^        ------ help: remove this generic argument\n+   |     |\n+   |     expected at most 1 generic argument\n+   |\n+note: function defined here, with at most 1 generic parameter: `T`\n+  --> $DIR/explicit-generic-args-for-impl.rs:3:4\n+   |\n+LL | fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+   |    ^^^ -\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "a6585bcf84862a159a3b81751fd4187c23fb8792", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(explicit_generic_args_with_impl_trait)]\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str>(\"\".to_string());\n+}"}, {"sha": "0e4d6986d46ecdce76d7f08ba30c45cf6c83aa03", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,7 @@\n+// gate-test-explicit_generic_args_with_impl_trait\n+\n+fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n+\n+fn main() {\n+    foo::<str>(\"\".to_string()); //~ ERROR E0632\n+}"}, {"sha": "6adc4e6b23968ed57e04443005c220aed915727d", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,9 @@\n+error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n+  --> $DIR/feature-gate.rs:6:11\n+   |\n+LL |     foo::<str>(\"\".to_string());\n+   |           ^^^ explicit generic argument not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0632`."}, {"sha": "b9fb42088d9d385359561f7c8cec94c8f72b8290", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -36,10 +36,12 @@ error: non-ASCII character in byte constant\n   --> $DIR/byte-literals.rs:10:7\n    |\n LL |     b'\u00e9';\n-   |       ^\n-   |       |\n-   |       byte constant must be ASCII\n-   |       help: use a \\xHH escape for a non-ASCII byte: `\\xE9`\n+   |       ^ byte constant must be ASCII\n+   |\n+help: if you meant to use the unicode code point for '\u00e9', use a \\xHH escape\n+   |\n+LL |     b'\\xE9';\n+   |       ^^^^\n \n error[E0763]: unterminated byte constant\n   --> $DIR/byte-literals.rs:11:6"}, {"sha": "4f22a16224f0c3f2b9fc4bc9f4588b19ea0189d4", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -24,10 +24,12 @@ error: non-ASCII character in byte constant\n   --> $DIR/byte-string-literals.rs:6:7\n    |\n LL |     b\"\u00e9\";\n-   |       ^\n-   |       |\n-   |       byte constant must be ASCII\n-   |       help: use a \\xHH escape for a non-ASCII byte: `\\xE9`\n+   |       ^ byte constant must be ASCII\n+   |\n+help: if you meant to use the unicode code point for '\u00e9', use a \\xHH escape\n+   |\n+LL |     b\"\\xE9\";\n+   |       ^^^^\n \n error: raw byte string must be ASCII\n   --> $DIR/byte-string-literals.rs:7:10"}, {"sha": "1e0aa9ce40d18c18c96ae0b3f3f0c189e64749ea", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -13,13 +13,12 @@ LL | |         _ => cx.answer_str(\"hi\"),\n    | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n LL | |     }\n    | |_____- `match` arms have incompatible types\n-   | \n-  ::: $DIR/auxiliary/issue-81839.rs:6:49\n    |\n-LL |       pub async fn answer_str(&self, _s: &str) -> Test {\n-   |                                                   ---- checked the `Output` of this `async fn`, found opaque type\n+note: while checking the return type of the `async fn`\n+  --> $DIR/auxiliary/issue-81839.rs:6:49\n    |\n-   = note: while checking the return type of the `async fn`\n+LL |     pub async fn answer_str(&self, _s: &str) -> Test {\n+   |                                                 ^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n            found opaque type `impl Future`\n "}, {"sha": "990a4469764f0410168430c3c02a73a5047705eb", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -14,8 +14,14 @@ fn extra_semicolon() {\n }\n \n async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n \n async fn async_extra_semicolon_same() {\n     let _ = match true { //~ NOTE `match` arms have incompatible types\n@@ -26,7 +32,6 @@ async fn async_extra_semicolon_same() {\n         false => async_dummy(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n         //~| NOTE expected type `()`\n-        //~| NOTE while checking the return type of the `async fn`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -40,7 +45,6 @@ async fn async_extra_semicolon_different() {\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n         //~| NOTE expected type `()`\n-        //~| NOTE while checking the return type of the `async fn`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -53,7 +57,6 @@ async fn async_different_futures() {\n         //~^ NOTE expected opaque type, found a different opaque type\n         //~| NOTE expected type `impl Future`\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n-        //~| NOTE while checking the return type of the `async fn`\n     };\n }\n "}, {"sha": "9e64b539f0fdc1a0db05036b98095dc5981d8fd6", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -1,9 +1,6 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:26:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:32:18\n    |\n-LL |   async fn async_dummy() {}\n-   |                          - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => {\n@@ -18,7 +15,11 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n+   |\n+LL | async fn async_dummy() {}\n+   |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -31,11 +32,8 @@ LL |             async_dummy()\n    |                         --\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:40:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:45:18\n    |\n-LL |   async fn async_dummy2() {}\n-   |                           - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => {\n@@ -50,7 +48,11 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -66,11 +68,8 @@ LL |         false => Box::new(async_dummy2()),\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:52:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:56:18\n    |\n-LL |   async fn async_dummy2() {}\n-   |                           - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => async_dummy(),\n@@ -83,9 +82,13 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-           found opaque type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:17:25>)\n+           found opaque type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "fd5d46a4e923e8fdc295f2befb66eaed6b73ee13", "filename": "src/test/ui/suggestions/multibyte-escapes.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.rs?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #87397.\n+\n+fn main() {\n+    b'\u00b5';\n+    //~^ ERROR: non-ASCII character in byte constant\n+    //~| HELP: if you meant to use the unicode code point for '\u00b5', use a \\xHH escape\n+    //~| NOTE: byte constant must be ASCII\n+\n+    b'\u5b57';\n+    //~^ ERROR: non-ASCII character in byte constant\n+    //~| NOTE: this multibyte character does not fit into a single byte\n+    //~| NOTE: byte constant must be ASCII\n+\n+    b\"\u5b57\";\n+    //~^ ERROR: non-ASCII character in byte constant\n+    //~| HELP: if you meant to use the UTF-8 encoding of '\u5b57', use \\xHH escapes\n+    //~| NOTE: byte constant must be ASCII\n+}"}, {"sha": "bb4f8e8c304a10cbdcb6e5c0a35b384a3e2be628", "filename": "src/test/ui/suggestions/multibyte-escapes.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmultibyte-escapes.stderr?ref=6be8a06bcf2e7c45db2f9e3dd3c9c0e282562a93", "patch": "@@ -0,0 +1,33 @@\n+error: non-ASCII character in byte constant\n+  --> $DIR/multibyte-escapes.rs:4:7\n+   |\n+LL |     b'\u00b5';\n+   |       ^ byte constant must be ASCII\n+   |\n+help: if you meant to use the unicode code point for '\u00b5', use a \\xHH escape\n+   |\n+LL |     b'\\xB5';\n+   |       ^^^^\n+\n+error: non-ASCII character in byte constant\n+  --> $DIR/multibyte-escapes.rs:9:7\n+   |\n+LL |     b'\u5b57';\n+   |       ^^\n+   |       |\n+   |       byte constant must be ASCII\n+   |       this multibyte character does not fit into a single byte\n+\n+error: non-ASCII character in byte constant\n+  --> $DIR/multibyte-escapes.rs:14:7\n+   |\n+LL |     b\"\u5b57\";\n+   |       ^^ byte constant must be ASCII\n+   |\n+help: if you meant to use the UTF-8 encoding of '\u5b57', use \\xHH escapes\n+   |\n+LL |     b\"\\xE5\\xAD\\x97\";\n+   |       ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}