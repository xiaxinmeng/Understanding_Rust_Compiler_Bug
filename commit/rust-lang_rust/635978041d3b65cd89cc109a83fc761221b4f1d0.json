{"sha": "635978041d3b65cd89cc109a83fc761221b4f1d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNTk3ODA0MWQzYjY1Y2Q4OWNjMTA5YTgzZmM3NjEyMjFiNGYxZDA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-16T19:55:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-01T18:13:16Z"}, "message": "Compute all_traits_impls during resolution.", "tree": {"sha": "cbdcbe1d9221a608723e437c82c613f42025662a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbdcbe1d9221a608723e437c82c613f42025662a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/635978041d3b65cd89cc109a83fc761221b4f1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/635978041d3b65cd89cc109a83fc761221b4f1d0", "html_url": "https://github.com/rust-lang/rust/commit/635978041d3b65cd89cc109a83fc761221b4f1d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/635978041d3b65cd89cc109a83fc761221b4f1d0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26eeec0bafabb08df96168448f4b64d9fb650b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/26eeec0bafabb08df96168448f4b64d9fb650b0b", "html_url": "https://github.com/rust-lang/rust/commit/26eeec0bafabb08df96168448f4b64d9fb650b0b"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "8e74a20f60aae6969b3e1b45e496aad7dbe94693", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -383,15 +383,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             this.lower_trait_ref(trait_ref, ImplTraitContext::disallowed())\n                         });\n \n-                        if let Some(ref trait_ref) = trait_ref {\n-                            if let Res::Def(DefKind::Trait, def_id) = trait_ref.path.res {\n-                                this.trait_impls\n-                                    .entry(def_id)\n-                                    .or_default()\n-                                    .push(lowered_trait_def_id);\n-                            }\n-                        }\n-\n                         let lowered_ty = this.lower_ty(ty, ImplTraitContext::disallowed());\n \n                         (trait_ref, lowered_ty)"}, {"sha": "7a26aa5c3d6c8f816eb06aa57d9a7942c16d2786", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -104,8 +104,6 @@ struct LoweringContext<'a, 'hir: 'a> {\n     owners: IndexVec<LocalDefId, Option<hir::OwnerNode<'hir>>>,\n     bodies: BTreeMap<hir::BodyId, hir::Body<'hir>>,\n \n-    trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n-\n     modules: BTreeMap<LocalDefId, hir::ModuleItems>,\n \n     generator_kind: Option<hir::GeneratorKind>,\n@@ -324,7 +322,6 @@ pub fn lower_crate<'a, 'hir>(\n         arena,\n         owners: IndexVec::default(),\n         bodies: BTreeMap::new(),\n-        trait_impls: BTreeMap::new(),\n         modules: BTreeMap::new(),\n         attrs: BTreeMap::default(),\n         catch_scopes: Vec::new(),\n@@ -512,7 +509,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let krate = hir::Crate {\n             owners: self.owners,\n             bodies: self.bodies,\n-            trait_impls: self.trait_impls,\n             modules: self.modules,\n             proc_macros,\n             trait_map,"}, {"sha": "489b2848b0985833f03c75f87ea1e96894cac1bc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -672,7 +672,6 @@ pub struct ModuleItems {\n pub struct Crate<'hir> {\n     pub owners: IndexVec<LocalDefId, Option<OwnerNode<'hir>>>,\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n-    pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n \n     /// A list of modules written out in the order in which they\n     /// appear in the crate. This includes the main crate module."}, {"sha": "34aee4f1b3b3fc24703738a8be4c59927c4532c0", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -170,7 +170,7 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n-    providers.all_local_trait_impls = |tcx, ()| &tcx.hir_crate(()).trait_impls;\n+    providers.all_local_trait_impls = |tcx, ()| &tcx.resolutions(()).trait_impls;\n     providers.expn_that_defined = |tcx, id| {\n         let id = id.expect_local();\n         tcx.resolutions(()).definitions.expansion_that_defined(id)"}, {"sha": "6ff1215b149bbb9f061eddfa142ab74258ffe873", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -44,6 +44,7 @@ use rustc_span::Span;\n use rustc_target::abi::Align;\n \n use std::cmp::Ordering;\n+use std::collections::BTreeMap;\n use std::hash::{Hash, Hasher};\n use std::ops::ControlFlow;\n use std::{fmt, ptr, str};\n@@ -132,6 +133,7 @@ pub struct ResolverOutputs {\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,\n     pub main_def: Option<MainDefinition>,\n+    pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "7b65ab2acf6c454cf10a174a085dfa9930b4cb58", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -1281,7 +1281,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             this.with_self_rib(Res::SelfTy(None, None), |this| {\n                 // Resolve the trait reference, if necessary.\n                 this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n-                    let item_def_id = this.r.local_def_id(item_id).to_def_id();\n+                    let item_def_id = this.r.local_def_id(item_id);\n+\n+                    // Register the trait definitions from here.\n+                    if let Some(trait_id) = trait_id {\n+                        this.r.trait_impls.entry(trait_id).or_default().push(item_def_id);\n+                    }\n+\n+                    let item_def_id = item_def_id.to_def_id();\n                     this.with_self_rib(Res::SelfTy(trait_id, Some((item_def_id, false))), |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n                             // Resolve type arguments in the trait path."}, {"sha": "51e0ee0a57fe2002f18dc3ec2ef723e4bfb54725", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -60,7 +60,7 @@ use rustc_span::{Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n-use std::collections::BTreeSet;\n+use std::collections::{BTreeMap, BTreeSet};\n use std::ops::ControlFlow;\n use std::{cmp, fmt, iter, ptr};\n use tracing::debug;\n@@ -1034,6 +1034,7 @@ pub struct Resolver<'a> {\n     item_generics_num_lifetimes: FxHashMap<LocalDefId, usize>,\n \n     main_def: Option<MainDefinition>,\n+    trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1398,6 +1399,7 @@ impl<'a> Resolver<'a> {\n             legacy_const_generic_args: Default::default(),\n             item_generics_num_lifetimes: Default::default(),\n             main_def: Default::default(),\n+            trait_impls: Default::default(),\n         };\n \n         let root_parent_scope = ParentScope::module(graph_root, &resolver);\n@@ -1455,6 +1457,7 @@ impl<'a> Resolver<'a> {\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n             main_def,\n+            trait_impls: self.trait_impls,\n         }\n     }\n \n@@ -1474,6 +1477,7 @@ impl<'a> Resolver<'a> {\n                 .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n                 .collect(),\n             main_def: self.main_def.clone(),\n+            trait_impls: self.trait_impls.clone(),\n         }\n     }\n "}, {"sha": "7ac26a31872df4792b80aeb08af9b3658cae035f", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635978041d3b65cd89cc109a83fc761221b4f1d0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=635978041d3b65cd89cc109a83fc761221b4f1d0", "patch": "@@ -195,7 +195,7 @@ fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n }\n \n pub fn check_coherence(tcx: TyCtxt<'_>) {\n-    for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n+    for &trait_def_id in tcx.all_local_trait_impls(()).keys() {\n         tcx.ensure().coherent_trait(trait_def_id);\n     }\n "}]}