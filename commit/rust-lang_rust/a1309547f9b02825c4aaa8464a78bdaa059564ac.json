{"sha": "a1309547f9b02825c4aaa8464a78bdaa059564ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzA5NTQ3ZjliMDI4MjVjNGFhYTg0NjRhNzhiZGFhMDU5NTY0YWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T06:13:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T06:13:28Z"}, "message": "Rollup merge of #68884 - Zoxc:gen-type, r=nikomatsakis\n\nMake the `type_of` return a generic type for generators\n\nFixes https://github.com/rust-lang/rust/issues/67651.\n\nr? @nikomatsakis", "tree": {"sha": "28d24c4cb408d60024e9af7a50777c02c7e7d4f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d24c4cb408d60024e9af7a50777c02c7e7d4f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1309547f9b02825c4aaa8464a78bdaa059564ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeaUICRBK7hj4Ov3rIwAAdHIIAFFAXy+/SexzIYHq6x9yvlbY\nhy70cSCRRuViZKYqpD1eR2zuH2tqAZqLlfpxtHGx+rHFF8CXfJxfq7uwLIFjdzyS\naGOZwXyksqYKzuMlCrRhuuvJ5QevVOGS6zd94EryQ8GN6JlOcCj8NA3N2G5oC1vZ\nHftnrnBMKV03olLom3oUcVBi+aKIYD4S/IBsGCQTYC8aNR80CJKG+l55V0UzD7rJ\nPMlFmg5xdoyHkpqxFVEKr4WSjdiUvrD1zBNbToEYW+UaVtIB7O0YS7SOrCjqlyLK\n79tMSnc4tGxzyoD91A8JSJqzPO7WcV5l8BWPS5t0c+kd0EN90l//l1wzhGkJerU=\n=ewey\n-----END PGP SIGNATURE-----\n", "payload": "tree 28d24c4cb408d60024e9af7a50777c02c7e7d4f3\nparent 342c5f33d097b2dc07a2dbc0ca45a37379d2ff60\nparent 47a84f2170c8a4bae817eff603172f5faf52ce64\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585030408 +0100\ncommitter GitHub <noreply@github.com> 1585030408 +0100\n\nRollup merge of #68884 - Zoxc:gen-type, r=nikomatsakis\n\nMake the `type_of` return a generic type for generators\n\nFixes https://github.com/rust-lang/rust/issues/67651.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1309547f9b02825c4aaa8464a78bdaa059564ac", "html_url": "https://github.com/rust-lang/rust/commit/a1309547f9b02825c4aaa8464a78bdaa059564ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1309547f9b02825c4aaa8464a78bdaa059564ac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342c5f33d097b2dc07a2dbc0ca45a37379d2ff60", "url": "https://api.github.com/repos/rust-lang/rust/commits/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60", "html_url": "https://github.com/rust-lang/rust/commit/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60"}, {"sha": "47a84f2170c8a4bae817eff603172f5faf52ce64", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a84f2170c8a4bae817eff603172f5faf52ce64", "html_url": "https://github.com/rust-lang/rust/commit/47a84f2170c8a4bae817eff603172f5faf52ce64"}], "stats": {"total": 326, "additions": 231, "deletions": 95}, "files": [{"sha": "a7ec4f501ae7672afc183eabd4af0fd6139f7c0a", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -139,7 +139,8 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n \n             let (yield_ty, return_ty) = if body.generator_kind.is_some() {\n-                let gen_sig = match ty.kind {\n+                let gen_ty = tcx.body_tables(body_id).node_type(id);\n+                let gen_sig = match gen_ty.kind {\n                     ty::Generator(_, gen_substs, ..) => gen_substs.as_generator().sig(),\n                     _ => span_bug!(tcx.hir().span(id), \"generator w/o generator type: {:?}\", ty),\n                 };"}, {"sha": "675d003bff1f24b8889c3bc57634e4a3599b05c8", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -188,12 +188,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n         Node::Field(field) => icx.to_ty(&field.ty),\n \n         Node::Expr(&Expr { kind: ExprKind::Closure(.., gen), .. }) => {\n-            if gen.is_some() {\n-                return tcx.typeck_tables_of(def_id).node_type(hir_id);\n-            }\n-\n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-            tcx.mk_closure(def_id, substs)\n+            if let Some(movability) = gen {\n+                tcx.mk_generator(def_id, substs, movability)\n+            } else {\n+                tcx.mk_closure(def_id, substs)\n+            }\n         }\n \n         Node::AnonConst(_) => {"}, {"sha": "46a132da309bba541da8a8d8056311de7e0128b0", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -18,22 +18,6 @@ LL | |             break 0u8;\n LL | |         };\n    | |_________- enclosing `async` block\n \n-error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n-   |\n-LL | fn return_targets_async_block_not_fn() -> u8 {\n-   |    ---------------------------------      ^^ expected `u8`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n-\n-error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n-   |\n-LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected `()`, found `u8`\n-   |\n-   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n-\n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:22:58\n    |\n@@ -55,6 +39,22 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    |\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n+   |\n+LL | fn return_targets_async_block_not_fn() -> u8 {\n+   |    ---------------------------------      ^^ expected `u8`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n+   |\n+LL |     let _: &dyn Future<Output = ()> = &block;\n+   |                                       ^^^^^^ expected `()`, found `u8`\n+   |\n+   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n+\n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |"}, {"sha": "cf10ebfeca9399cc7db1dc9b95362339f9f2849f", "filename": "src/test/ui/async-await/async-error-span.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -5,6 +5,7 @@\n use std::future::Future;\n \n fn get_future() -> impl Future<Output = ()> {\n+//~^ ERROR the trait bound `(): std::future::Future` is not satisfied\n     panic!()\n }\n "}, {"sha": "4054e739c483d58e0dce7cedd73aa7e913271fa7", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -1,15 +1,27 @@\n+error[E0277]: the trait bound `(): std::future::Future` is not satisfied\n+  --> $DIR/async-error-span.rs:7:20\n+   |\n+LL | fn get_future() -> impl Future<Output = ()> {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `()`\n+LL |\n+LL |     panic!()\n+   |     -------- this returned value is of type `!`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/async-error-span.rs:12:9\n+  --> $DIR/async-error-span.rs:13:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:13:5\n+  --> $DIR/async-error-span.rs:14:5\n    |\n LL |     get_future().await;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0698`.\n+Some errors have detailed explanations: E0277, E0698.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "cebff3be6b059299f47d7548fa38b0d56fb1c771", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -62,6 +62,7 @@ fn foo10() -> Result<(), ()> {\n fn foo11() -> Result<(), ()> {\n     let _ = await bar()?; //~ ERROR `await` is only allowed inside `async` functions and blocks\n     //~^ ERROR incorrect use of `await`\n+    //~| ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n     Ok(())\n }\n fn foo12() -> Result<(), ()> {"}, {"sha": "61f2570b2ff934a42fbd2982988ce545ebada08b", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -71,63 +71,63 @@ LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:69:14\n    |\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:73:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:74:24\n    |\n LL |     let _ = bar().await();\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:78:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:79:24\n    |\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:106:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:107:13\n    |\n LL |     let _ = await!(bar());\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:110:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:111:13\n    |\n LL |     let _ = await!(bar())?;\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:116:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:124:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: expected expression, found `=>`\n-  --> $DIR/incorrect-syntax-suggestions.rs:131:25\n+  --> $DIR/incorrect-syntax-suggestions.rs:132:25\n    |\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n    |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:131:11\n+  --> $DIR/incorrect-syntax-suggestions.rs:132:11\n    |\n LL |     match await { await => () }\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/incorrect-syntax-suggestions.rs:134:1\n+  --> $DIR/incorrect-syntax-suggestions.rs:135:1\n    |\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator\n@@ -162,71 +162,71 @@ LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:69:14\n    |\n LL | fn foo12() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:73:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:74:13\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:78:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:79:13\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:83:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:84:13\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:87:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:88:13\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:92:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:93:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:99:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:100:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:116:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:124:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n@@ -242,7 +242,16 @@ LL |     let _ = await bar()?;\n    = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n    = note: required by `std::ops::Try::into_result`\n \n-error: aborting due to 35 previous errors\n+error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n+  --> $DIR/incorrect-syntax-suggestions.rs:63:19\n+   |\n+LL |     let _ = await bar()?;\n+   |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n+   = note: required by `std::ops::Try::into_result`\n+\n+error: aborting due to 36 previous errors\n \n Some errors have detailed explanations: E0277, E0728.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "bd96a3b709baea3a6a44959bcd6d55b940011087", "filename": "src/test/ui/async-await/issue-67651.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+trait From {\n+    fn from();\n+}\n+\n+impl From for () {\n+    fn from() {}\n+}\n+\n+impl From for () {\n+//~^ ERROR conflicting implementations of trait\n+    fn from() {}\n+}\n+\n+fn bar() -> impl core::future::Future<Output = ()> {\n+    async move { From::from() }\n+}\n+\n+fn main() {}"}, {"sha": "99857c215eb8f483024918ff5c9bdac8ff599d3b", "filename": "src/test/ui/async-await/issue-67651.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67651.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `From` for type `()`:\n+  --> $DIR/issue-67651.rs:11:1\n+   |\n+LL | impl From for () {\n+   | ---------------- first implementation here\n+...\n+LL | impl From for () {\n+   | ^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "6edb9e63d480a6ebc45f38b122b87885793e659b", "filename": "src/test/ui/async-await/issues/issue-63388-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr?ref=342c5f33d097b2dc07a2dbc0ca45a37379d2ff60", "patch": "@@ -1,13 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-63388-2.rs:12:10\n-   |\n-LL |         foo: &dyn Foo, bar: &'a dyn Foo\n-   |              --------       -----------\n-LL |     ) -> &dyn Foo\n-   |          ^ help: consider using the named lifetime: `&'a`\n-   |\n-   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "458bc9faeaf272bfb2d879edd699b31bcf054718", "filename": "src/test/ui/async-await/issues/issue-63388-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -8,7 +8,7 @@ trait Foo {}\n \n impl Xyz {\n     async fn do_sth<'a>(\n-        foo: &dyn Foo, bar: &'a dyn Foo //~ ERROR cannot infer\n+        foo: &dyn Foo, bar: &'a dyn Foo\n     ) -> &dyn Foo //~ ERROR missing lifetime specifier\n     {\n         foo"}, {"sha": "6edb9e63d480a6ebc45f38b122b87885793e659b", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -8,21 +8,6 @@ LL |     ) -> &dyn Foo\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n \n-error: cannot infer an appropriate lifetime\n-  --> $DIR/issue-63388-2.rs:11:9\n-   |\n-LL |         foo: &dyn Foo, bar: &'a dyn Foo\n-   |         ^^^ ...but this borrow...\n-...\n-LL |         foo\n-   |         --- this return type evaluates to the `'static` lifetime...\n-   |\n-note: ...can't outlive the lifetime `'_` as defined on the method body at 11:14\n-  --> $DIR/issue-63388-2.rs:11:14\n-   |\n-LL |         foo: &dyn Foo, bar: &'a dyn Foo\n-   |              ^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0106`."}, {"sha": "2f80435046bdf5d2434000338251e27ed47d52ca", "filename": "src/test/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -5,6 +5,7 @@\n async fn copy() -> Result<()> //~ ERROR wrong number of type arguments\n {\n     Ok(())\n+    //~^ type annotations needed\n }\n \n fn main() { }"}, {"sha": "04cfa5249982e144659df44ee10a52fcfb025de8", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -4,6 +4,13 @@ error[E0107]: wrong number of type arguments: expected 2, found 1\n LL | async fn copy() -> Result<()>\n    |                    ^^^^^^^^^^ expected 2 type arguments\n \n-error: aborting due to previous error\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-65159.rs:7:5\n+   |\n+LL |     Ok(())\n+   |     ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0107, E0282.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "05960c0c7f6364f472a245023e9cead0afddc0e2", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -9,6 +9,9 @@ impl<T> Trait<'_, '_> for T { }\n async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n     //~^ ERROR ambiguous lifetime bound\n     //~| ERROR ambiguous lifetime bound\n+    //~| ERROR ambiguous lifetime bound\n+    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n     (a, b)\n }\n "}, {"sha": "c69595a3f4d01dfae6601b378d0a525a0f09e9e6", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -14,5 +14,42 @@ LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'\n    |\n    = help: add #![feature(member_constraints)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: ambiguous lifetime bound in `impl Trait`\n+  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n+   |\n+LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+   |                                                                ^^^^^^^^^^^^^^^^^^ the elided lifetimes here do not outlive one another\n+   |\n+   = help: add #![feature(member_constraints)] to the crate attributes to enable\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ret-impl-trait-no-fg.rs:9:1\n+   |\n+LL | / async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     (a, b)\n+LL | | }\n+   | |_^\n+   |\n+   = note: hidden type `(&u8, &u8)` captures lifetime '_#4r\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ret-impl-trait-no-fg.rs:9:1\n+   |\n+LL | / async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     (a, b)\n+LL | | }\n+   | |_^\n+   |\n+   = note: hidden type `(&u8, &u8)` captures lifetime '_#5r\n+\n+error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "bd1f80811b5425748ffe18cf90ff1e3c70f5136a", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 68, "deletions": 9, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -1,13 +1,72 @@\n-error[E0658]: `Wrap<&Struct, Struct>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n-  --> $DIR/ref-self-async.rs:47:39\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:23:9\n    |\n-LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                       ^^^^^^^^^^^^^^^^^\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       -         - let's call the lifetime of this reference `'1`\n+   |                       |\n+   |                       let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:29:9\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             -         - let's call the lifetime of this reference `'1`\n+   |                             |\n+   |                             let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:33:9\n    |\n-   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n-   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     -          - let's call the lifetime of this reference `'1`\n+   |                                     |\n+   |                                     let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:37:9\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     -          - let's call the lifetime of this reference `'1`\n+   |                                     |\n+   |                                     let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:41:9\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             -           - let's call the lifetime of this reference `'1`\n+   |                                             |\n+   |                                             let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:45:9\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                             -           - let's call the lifetime of this reference `'1`\n+   |                                             |\n+   |                                             let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:49:9\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                            -                - let's call the lifetime of this reference `'1`\n+   |                                            |\n+   |                                            let's call the lifetime of this reference `'2`\n+LL |         f\n+   |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0fbbd95c975d6afb2ea35b35033a5480eabeba99", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n \n #![allow(non_snake_case)]\n+#![feature(arbitrary_self_types)]\n \n use std::marker::PhantomData;\n use std::ops::Deref;"}, {"sha": "bda958241b67b6564df1b8d6e7b8ee6a02ab8c04", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1309547f9b02825c4aaa8464a78bdaa059564ac/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=a1309547f9b02825c4aaa8464a78bdaa059564ac", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:22:9\n+  --> $DIR/ref-self-async.rs:23:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:28:9\n+  --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:32:9\n+  --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:36:9\n+  --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:40:9\n+  --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:44:9\n+  --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n@@ -59,7 +59,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:48:9\n+  --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ---"}]}