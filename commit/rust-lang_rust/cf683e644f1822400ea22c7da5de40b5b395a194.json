{"sha": "cf683e644f1822400ea22c7da5de40b5b395a194", "node_id": "C_kwDOAAsO6NoAKGNmNjgzZTY0NGYxODIyNDAwZWEyMmM3ZGE1ZGU0MGI1YjM5NWExOTQ", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-12-01T15:11:24Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-12-02T16:14:18Z"}, "message": "Rename TypeFolderFallible to FallibleTypeFolder", "tree": {"sha": "18c7ee24a68dbbaf3a0b2bd90103948034b2e661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c7ee24a68dbbaf3a0b2bd90103948034b2e661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf683e644f1822400ea22c7da5de40b5b395a194", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmGo8NoACgkQB8rDzKfg\nZD8AdA/9Fac5QKXjm6UacKQnjeS71XTGNwhogYHHVMwHCriTrc1P16ZXhIX/iKaF\nYSA6jxbCuXyP2Zj76D7R4V1tmlVC9Z8YwoIXy00GD4YpkLJMZVE3QZFqaxwKHQX1\n1FlTYw+f+/7xfpjcKt1P4bC2S9orFKiUgXrBzse2uwJaAv5S84KX92D+n4oWLR44\nZOxRFuGMfqopc9Tql2i6V6NIGFv/oo8K0ZvXhSiT3ixIh3RZNqgG91VUc6KAWFmP\n6CkFSuBq6tHRzv8ppyQ4BWDanzRHANFeMF1BD/bRpA79KDXXlunZF1jivHT6LYj0\nZHFJRbG2zao7h01pfL/daluUMcz4i0bYBWQrtXscMZ76CXamBZQrs3LP7w4/mRKU\npnDqtv/YGo4uS8dVXpv8zTYgIcN/CByMkcv8AzlNlGW46MNvpefDLJQdt+ubB12M\nHcXa2LWRfoJfZVwnFtXmC9w9lbJcrtTIccf6iqpYZ0aHfqWkkYug886i/F2lZyQc\n0bojj2m1Rh2o7g+06k36psRmJHPzBUn2igc+/45bkv8lHM5LL6OJKzKHaEjBlmCu\noA54oCfYuw2NaU7WRATn/YKTvMkxu7YScoKuhwwpqZ8Lm14alb2IDMYds/NapuOY\naXRJJUOX7z0n3ZiTyuCcjEUc7mBep0pr1tuEO2zx8s49uPam0wg=\n=CMB/\n-----END PGP SIGNATURE-----", "payload": "tree 18c7ee24a68dbbaf3a0b2bd90103948034b2e661\nparent d79e17daf0157d8c39747544e93113db387e6fc5\nauthor Alan Egerton <eggyal@gmail.com> 1638371484 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1638461658 +0000\n\nRename TypeFolderFallible to FallibleTypeFolder\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf683e644f1822400ea22c7da5de40b5b395a194", "html_url": "https://github.com/rust-lang/rust/commit/cf683e644f1822400ea22c7da5de40b5b395a194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf683e644f1822400ea22c7da5de40b5b395a194/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d79e17daf0157d8c39747544e93113db387e6fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d79e17daf0157d8c39747544e93113db387e6fc5", "html_url": "https://github.com/rust-lang/rust/commit/d79e17daf0157d8c39747544e93113db387e6fc5"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "f036e1214aaf7d97cee8453922d964a3cd78b7db", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -1,7 +1,7 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{TypeFolder, TypeFolderFallible, TypeVisitor};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeVisitor};\n use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n use std::ops::ControlFlow;\n@@ -192,7 +192,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolderFallible<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         if !t.needs_infer() {\n             Ok(t) // micro-optimize -- if there is nothing in this type that this fold affects..."}, {"sha": "20453eeb1474e847c84d83730d84a33561f8358d", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -1,7 +1,7 @@\n use crate::traits;\n use crate::traits::project::Normalized;\n use rustc_middle::ty;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolderFallible, TypeVisitor};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -60,7 +60,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n // TypeFoldable implementations.\n \n impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {"}, {"sha": "9f448a593da508128e74f7cbd7ebb71b7251b9c6", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -25,7 +25,7 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n     s.bound_impl(\n         quote!(::rustc_middle::ty::fold::TypeFoldable<'tcx>),\n         quote! {\n-            fn try_super_fold_with<__F: ::rustc_middle::ty::fold::TypeFolderFallible<'tcx>>(\n+            fn try_super_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n                 self,\n                 __folder: &mut __F\n             ) -> Result<Self, __F::Error> {"}, {"sha": "4e927f00acd5eda6cc42bf9c773746e402ee6676", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -52,7 +52,7 @@ macro_rules! TrivialTypeFoldableImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n             impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n-                fn try_super_fold_with<F: $crate::ty::fold::TypeFolderFallible<$tcx>>(\n+                fn try_super_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                     self,\n                     _: &mut F\n                 ) -> ::std::result::Result<$ty, F::Error> {\n@@ -95,7 +95,7 @@ macro_rules! EnumTypeFoldableImpl {\n         impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n             $(where $($wc)*)*\n         {\n-            fn try_super_fold_with<V: $crate::ty::fold::TypeFolderFallible<$tcx>>(\n+            fn try_super_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                 self,\n                 folder: &mut V,\n             ) -> ::std::result::Result<Self, V::Error> {"}, {"sha": "e67aa75c10033b03c9ec7af887c2cb7cd0792ad7", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -7,7 +7,7 @@ use crate::mir::interpret::{Allocation, ConstValue, GlobalAlloc, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{TypeFoldable, TypeFolderFallible, TypeVisitor};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n@@ -2760,7 +2760,7 @@ impl UserTypeProjection {\n TrivialTypeFoldableAndLiftImpls! { ProjectionKind, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {"}, {"sha": "ad8b9d323eed584be331cc999292a64f044d9208", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -16,7 +16,7 @@ TrivialTypeFoldableAndLiftImpls! {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -148,7 +148,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n \n@@ -158,7 +158,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -175,7 +175,7 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -188,7 +188,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -292,7 +292,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -312,7 +312,7 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -345,7 +345,7 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Field {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n@@ -354,7 +354,7 @@ impl<'tcx> TypeFoldable<'tcx> for Field {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n@@ -363,7 +363,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n }\n \n impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n@@ -372,7 +372,7 @@ impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -390,11 +390,11 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ConstantKind<'tcx> {\n     #[inline(always)]\n-    fn try_fold_with<F: TypeFolderFallible<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_mir_const(self)\n     }\n \n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {"}, {"sha": "aff485a413226b005226998c8dd6ca99294bbe50", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -63,12 +63,12 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.try_fold_with(folder).into_ok()\n     }\n \n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error>;\n \n-    fn try_fold_with<F: TypeFolderFallible<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_super_fold_with(folder)\n     }\n \n@@ -216,8 +216,8 @@ impl TypeFoldable<'tcx> for hir::Constness {\n ///\n /// If this folder is fallible (and therefore its [`Error`][`TypeFolder::Error`]\n /// associated type is something other than the default, never),\n-/// [`TypeFolderFallible`] should be implemented manually; otherwise,\n-/// a blanket implementation of [`TypeFolderFallible`] will defer to\n+/// [`FallibleTypeFolder`] should be implemented manually; otherwise,\n+/// a blanket implementation of [`FallibleTypeFolder`] will defer to\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n pub trait TypeFolder<'tcx>: Sized {\n@@ -269,7 +269,7 @@ pub trait TypeFolder<'tcx>: Sized {\n     }\n }\n \n-/// The `TypeFolderFallible` trait defines the actual *folding*. There is a\n+/// The `FallibleTypeFolder` trait defines the actual *folding*. There is a\n /// method defined for every foldable type. Each of these has a\n /// default implementation that does an \"identity\" fold. Within each\n /// identity fold, it should invoke `foo.try_fold_with(self)` to fold each\n@@ -278,7 +278,7 @@ pub trait TypeFolder<'tcx>: Sized {\n /// A blanket implementation of this trait (that defers to the relevant\n /// method of [`TypeFolder`]) is provided for all infallible folders in\n /// order to ensure the two APIs are coherent.\n-pub trait TypeFolderFallible<'tcx>: TypeFolder<'tcx> {\n+pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n     fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n     where\n         T: TypeFoldable<'tcx>,\n@@ -318,7 +318,7 @@ pub trait TypeFolderFallible<'tcx>: TypeFolder<'tcx> {\n \n // Blanket implementation of fallible trait for infallible folders\n // delegates to infallible methods to prevent incoherence\n-impl<'tcx, F> TypeFolderFallible<'tcx> for F\n+impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n where\n     F: TypeFolder<'tcx, Error = !>,\n {"}, {"sha": "584303413fb877821400cf23e028990045108c4b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -9,7 +9,7 @@\n //!\n //! [\"The `ty` module: representing types\"]: https://rustc-dev-guide.rust-lang.org/ty.html\n \n-pub use self::fold::{TypeFoldable, TypeFolder, TypeFolderFallible, TypeVisitor};\n+pub use self::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n@@ -1269,7 +1269,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n-    fn try_super_fold_with<F: ty::fold::TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {"}, {"sha": "30ed008a5deeb9d7737d7582d83abbdf7d300a86", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -4,7 +4,7 @@\n \n use crate::mir::interpret;\n use crate::mir::ProjectionKind;\n-use crate::ty::fold::{TypeFoldable, TypeFolderFallible, TypeVisitor};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeVisitor};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, InferConst, Lift, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n@@ -669,7 +669,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n \n /// AdtDefs are basically the same as a DefId.\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::AdtDef {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         _folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -682,7 +682,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::AdtDef {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<(T, U), F::Error> {\n@@ -698,7 +698,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>\n     for (A, B, C)\n {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<(A, B, C), F::Error> {\n@@ -731,7 +731,7 @@ EnumTypeFoldableImpl! {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -745,7 +745,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -759,7 +759,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -772,7 +772,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -785,7 +785,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -798,14 +798,14 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         self.try_map_bound(|ty| ty.try_fold_with(folder))\n     }\n \n-    fn try_fold_with<F: TypeFolderFallible<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n \n@@ -819,7 +819,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -832,7 +832,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::Existentia\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -845,7 +845,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -858,7 +858,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -909,7 +909,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -922,7 +922,7 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -966,7 +966,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })\n     }\n \n-    fn try_fold_with<F: TypeFolderFallible<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n \n@@ -1018,14 +1018,14 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         _folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n \n-    fn try_fold_with<F: TypeFolderFallible<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n \n@@ -1039,11 +1039,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n-    fn try_fold_with<F: TypeFolderFallible<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n \n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1069,7 +1069,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1082,7 +1082,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1095,7 +1095,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1108,7 +1108,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n         }\n     }\n \n-    fn try_fold_with<F: TypeFolderFallible<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n \n@@ -1123,7 +1123,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1152,7 +1152,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         _folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1165,7 +1165,7 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -1193,7 +1193,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {"}, {"sha": "8fddafaf6206a4c51145047bcff7e462dfd71e42", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -2,7 +2,7 @@\n \n use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{TypeFoldable, TypeFolder, TypeFolderFallible, TypeVisitor};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n@@ -153,7 +153,7 @@ impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n@@ -375,7 +375,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n }\n \n impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n-    fn try_super_fold_with<F: TypeFolderFallible<'tcx>>(\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {"}, {"sha": "25eb56456e15f3dc67e8e06b66ae7eaaa46be11d", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -1,7 +1,7 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use crate::ty::fold::{TypeFolder, TypeFolderFallible};\n+use crate::ty::fold::{FallibleTypeFolder, TypeFolder};\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n@@ -1048,7 +1048,7 @@ pub fn fold_list<'tcx, F, T>(\n     intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,\n ) -> Result<&'tcx ty::List<T>, F::Error>\n where\n-    F: TypeFolderFallible<'tcx>,\n+    F: FallibleTypeFolder<'tcx>,\n     T: TypeFoldable<'tcx> + PartialEq + Copy,\n {\n     let mut iter = list.iter();"}, {"sha": "26bacf787e2ebaded063e0854d2b9d55c5163436", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf683e644f1822400ea22c7da5de40b5b395a194/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=cf683e644f1822400ea22c7da5de40b5b395a194", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeFolderFallible};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n@@ -178,7 +178,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx> TypeFolderFallible<'tcx> for QueryNormalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     fn try_fold_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,"}]}