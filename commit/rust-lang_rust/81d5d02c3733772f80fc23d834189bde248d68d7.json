{"sha": "81d5d02c3733772f80fc23d834189bde248d68d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZDVkMDJjMzczMzc3MmY4MGZjMjNkODM0MTg5YmRlMjQ4ZDY4ZDc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-13T23:39:51Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-14T09:05:37Z"}, "message": "Rename Module field anonymous_children to module_children, expand it to include both named an anonymous modules, and fix #31644", "tree": {"sha": "17f2966ab3fdd588ee6506e1135480d023c196c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f2966ab3fdd588ee6506e1135480d023c196c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81d5d02c3733772f80fc23d834189bde248d68d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81d5d02c3733772f80fc23d834189bde248d68d7", "html_url": "https://github.com/rust-lang/rust/commit/81d5d02c3733772f80fc23d834189bde248d68d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81d5d02c3733772f80fc23d834189bde248d68d7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af85643b13f9eae3de6fe15f06825c4d197752d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af85643b13f9eae3de6fe15f06825c4d197752d", "html_url": "https://github.com/rust-lang/rust/commit/4af85643b13f9eae3de6fe15f06825c4d197752d"}], "stats": {"total": 87, "additions": 19, "deletions": 68}, "files": [{"sha": "5c94c6e4369b09288f336f9046e8f6310385c1a9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=81d5d02c3733772f80fc23d834189bde248d68d7", "patch": "@@ -306,6 +306,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 let def = Def::Mod(self.ast_map.local_def_id(item.id));\n                 let module = self.new_module(parent_link, Some(def), false, is_public);\n                 self.define(parent, name, TypeNS, (module, sp));\n+                parent.module_children.borrow_mut().insert(item.id, module);\n                 module\n             }\n \n@@ -474,7 +475,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n             let parent_link = BlockParentLink(parent, block_id);\n             let new_module = self.new_module(parent_link, None, false, false);\n-            parent.anonymous_children.borrow_mut().insert(block_id, new_module);\n+            parent.module_children.borrow_mut().insert(block_id, new_module);\n             new_module\n         } else {\n             parent"}, {"sha": "3244d2f1d96090cfd50249366414b68937d4f4a3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 50, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=81d5d02c3733772f80fc23d834189bde248d68d7", "patch": "@@ -801,9 +801,9 @@ pub struct ModuleS<'a> {\n     resolutions: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n     imports: RefCell<Vec<ImportDirective>>,\n \n-    // The anonymous children of this node. Anonymous children are pseudo-\n-    // modules that are implicitly created around items contained within\n-    // blocks.\n+    // The module children of this node, including normal modules and anonymous modules.\n+    // Anonymous children are pseudo-modules that are implicitly created around items\n+    // contained within blocks.\n     //\n     // For example, if we have this:\n     //\n@@ -815,7 +815,7 @@ pub struct ModuleS<'a> {\n     //\n     // There will be an anonymous module created around `g` with the ID of the\n     // entry block for `f`.\n-    anonymous_children: RefCell<NodeMap<Module<'a>>>,\n+    module_children: RefCell<NodeMap<Module<'a>>>,\n \n     shadowed_traits: RefCell<Vec<&'a NameBinding<'a>>>,\n \n@@ -848,7 +848,7 @@ impl<'a> ModuleS<'a> {\n             is_extern_crate: false,\n             resolutions: RefCell::new(HashMap::new()),\n             imports: RefCell::new(Vec::new()),\n-            anonymous_children: RefCell::new(NodeMap()),\n+            module_children: RefCell::new(NodeMap()),\n             shadowed_traits: RefCell::new(Vec::new()),\n             glob_count: Cell::new(0),\n             pub_count: Cell::new(0),\n@@ -906,14 +906,6 @@ impl<'a> ModuleS<'a> {\n         }\n     }\n \n-    fn for_each_local_child<F: FnMut(Name, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n-        self.for_each_child(|name, ns, name_binding| {\n-            if !name_binding.is_import() && !name_binding.is_extern_crate() {\n-                f(name, ns, name_binding)\n-            }\n-        })\n-    }\n-\n     fn def_id(&self) -> Option<DefId> {\n         self.def.as_ref().map(Def::def_id)\n     }\n@@ -1640,20 +1632,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         // Descend into children and anonymous children.\n-        build_reduced_graph::populate_module_if_necessary(self, module_);\n-\n-        module_.for_each_local_child(|_, _, child_node| {\n-            match child_node.module() {\n-                None => {\n-                    // Continue.\n-                }\n-                Some(child_module) => {\n-                    self.report_unresolved_imports(child_module);\n-                }\n-            }\n-        });\n-\n-        for (_, module_) in module_.anonymous_children.borrow().iter() {\n+        for (_, module_) in module_.module_children.borrow().iter() {\n             self.report_unresolved_imports(module_);\n         }\n     }\n@@ -1676,32 +1655,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     // generate a fake \"implementation scope\" containing all the\n     // implementations thus found, for compatibility with old resolve pass.\n \n-    fn with_scope<F>(&mut self, name: Option<Name>, f: F)\n+    fn with_scope<F>(&mut self, id: NodeId, f: F)\n         where F: FnOnce(&mut Resolver)\n     {\n         let orig_module = self.current_module;\n \n         // Move down in the graph.\n-        match name {\n-            None => {\n-                // Nothing to do.\n-            }\n-            Some(name) => {\n-                build_reduced_graph::populate_module_if_necessary(self, &orig_module);\n-\n-                if let Success(name_binding) = orig_module.resolve_name(name, TypeNS, false) {\n-                    match name_binding.module() {\n-                        None => {\n-                            debug!(\"!!! (with scope) didn't find module for `{}` in `{}`\",\n-                                   name,\n-                                   module_to_string(orig_module));\n-                        }\n-                        Some(module) => {\n-                            self.current_module = module;\n-                        }\n-                    }\n-                }\n-            }\n+        if let Some(module) = orig_module.module_children.borrow().get(&id) {\n+            self.current_module = module;\n         }\n \n         f(self);\n@@ -1825,7 +1786,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             ItemMod(_) | ItemForeignMod(_) => {\n-                self.with_scope(Some(name), |this| {\n+                self.with_scope(item.id, |this| {\n                     intravisit::walk_item(this, item);\n                 });\n             }\n@@ -2261,7 +2222,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // Move down in the graph, if there's an anonymous module rooted here.\n         let orig_module = self.current_module;\n         let anonymous_module =\n-            orig_module.anonymous_children.borrow().get(&block.id).map(|module| *module);\n+            orig_module.module_children.borrow().get(&block.id).map(|module| *module);\n \n         if let Some(anonymous_module) = anonymous_module {\n             debug!(\"(resolving block) found anonymous module, moving down\");"}, {"sha": "fa9b54a91ea6ebb42cd085fa980a996e05860b25", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=81d5d02c3733772f80fc23d834189bde248d68d7", "patch": "@@ -243,19 +243,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         errors.extend(self.resolve_imports_for_module(module_));\n         self.resolver.current_module = orig_module;\n \n-        build_reduced_graph::populate_module_if_necessary(self.resolver, module_);\n-        module_.for_each_local_child(|_, _, child_node| {\n-            match child_node.module() {\n-                None => {\n-                    // Nothing to do.\n-                }\n-                Some(child_module) => {\n-                    errors.extend(self.resolve_imports_for_module_subtree(child_module));\n-                }\n-            }\n-        });\n-\n-        for (_, child_module) in module_.anonymous_children.borrow().iter() {\n+        for (_, child_module) in module_.module_children.borrow().iter() {\n             errors.extend(self.resolve_imports_for_module_subtree(child_module));\n         }\n "}, {"sha": "28e969b21498a6cce2fbaa9b4b6e19cb174de748", "filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d5d02c3733772f80fc23d834189bde248d68d7/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs?ref=81d5d02c3733772f80fc23d834189bde248d68d7", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod Foo {\n-    pub static X: isize = 42;\n+enum Foo {\n+    X\n }\n \n-enum Foo {  //~ ERROR duplicate definition of type or module `Foo`\n-    X\n+mod Foo { //~ ERROR duplicate definition of type or module `Foo`\n+    pub static X: isize = 42;\n+    fn f() { f() } // Check that this does not result in a resolution error\n }\n \n fn main() {}"}]}