{"sha": "0dedc6c0546c709087ebad1dc1f9d85b183b2f09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZWRjNmMwNTQ2YzcwOTA4N2ViYWQxZGMxZjlkODViMTgzYjJmMDk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-15T09:26:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-15T09:26:04Z"}, "message": "Rollup merge of #80254 - Aaron1011:rustdoc-auto-param-env, r=estebank\n\nDon't try to add nested predicate to Rustdoc auto-trait `ParamEnv`\n\nFixes #80233\n\nWe already have logic in `evaluate_predicates` that tries to add\nunimplemented predicates to our `ParamEnv`. Trying to add a predicate\nthat already holds can lead to errors later on, since projection\nwill prefer trait candidates from the `ParamEnv` to predicates from an\nimpl.", "tree": {"sha": "f3d5b805f29175ec63f15e6a8e2efa6fb3a5bcb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d5b805f29175ec63f15e6a8e2efa6fb3a5bcb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dedc6c0546c709087ebad1dc1f9d85b183b2f09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAV+sCRBK7hj4Ov3rIwAAdHIIAKdH1pc3aKzeW1SkfINU54MU\n0sBuoZCdSRwBk00KTlr0aR5mmycszseex7GGMf/r0+VwKFb2zaSDwLpC8MDOdJ7/\ncjoN4H2gsPXk/LfvrmwgRZoq2d6b+FIgfc7RvpcyAiCUjeEvD+xcH/m1YWcgGD3a\nhnXdVb262BMc0kJ/8F9blNFXEaRPIxL5Y6gsx04webza+JG37Rd2yTxGhTk8m3ZA\noN0RvQFvaTuOGqaYC6OojE7q/eaZoD9LKjuDmy3Ycdu0Qzn6W4oHcMDg/4l0MAQX\ngyALIiZAP10kPks7CyZ7XghlaBpsXLQdGP8QPichCA1kTb3UhXa8+yr/Krt2bUU=\n=Bz8b\n-----END PGP SIGNATURE-----\n", "payload": "tree f3d5b805f29175ec63f15e6a8e2efa6fb3a5bcb6\nparent dcf622eb70aebe16d40c5f88fa2a41fa7019541c\nparent f2d7c05db0e4876b9c409a8be8e99aceadc34b1a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610702764 +0900\ncommitter GitHub <noreply@github.com> 1610702764 +0900\n\nRollup merge of #80254 - Aaron1011:rustdoc-auto-param-env, r=estebank\n\nDon't try to add nested predicate to Rustdoc auto-trait `ParamEnv`\n\nFixes #80233\n\nWe already have logic in `evaluate_predicates` that tries to add\nunimplemented predicates to our `ParamEnv`. Trying to add a predicate\nthat already holds can lead to errors later on, since projection\nwill prefer trait candidates from the `ParamEnv` to predicates from an\nimpl.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dedc6c0546c709087ebad1dc1f9d85b183b2f09", "html_url": "https://github.com/rust-lang/rust/commit/0dedc6c0546c709087ebad1dc1f9d85b183b2f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dedc6c0546c709087ebad1dc1f9d85b183b2f09/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf622eb70aebe16d40c5f88fa2a41fa7019541c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf622eb70aebe16d40c5f88fa2a41fa7019541c", "html_url": "https://github.com/rust-lang/rust/commit/dcf622eb70aebe16d40c5f88fa2a41fa7019541c"}, {"sha": "f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "html_url": "https://github.com/rust-lang/rust/commit/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "f8fe141746fdbf13f80348e6bc750bd8757d431f", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dedc6c0546c709087ebad1dc1f9d85b183b2f09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dedc6c0546c709087ebad1dc1f9d85b183b2f09/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=0dedc6c0546c709087ebad1dc1f9d85b183b2f09", "patch": "@@ -636,12 +636,10 @@ impl AutoTraitFinder<'tcx> {\n             let bound_predicate = predicate.bound_atom();\n             match bound_predicate.skip_binder() {\n                 ty::PredicateAtom::Trait(p, _) => {\n-                    if self.is_param_no_infer(p.trait_ref.substs)\n-                        && !only_projections\n-                        && is_new_pred\n-                    {\n-                        self.add_user_pred(computed_preds, predicate);\n-                    }\n+                    // Add this to `predicates` so that we end up calling `select`\n+                    // with it. If this predicate ends up being unimplemented,\n+                    // then `evaluate_predicates` will handle adding it the `ParamEnv`\n+                    // if possible.\n                     predicates.push_back(bound_predicate.rebind(p));\n                 }\n                 ty::PredicateAtom::Projection(p) => {"}, {"sha": "585a0864bb25d5fe529dfbad84a3af930780827f", "filename": "src/test/rustdoc/issue-80233-normalize-auto-trait.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0dedc6c0546c709087ebad1dc1f9d85b183b2f09/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dedc6c0546c709087ebad1dc1f9d85b183b2f09/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs?ref=0dedc6c0546c709087ebad1dc1f9d85b183b2f09", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for issue #80233\n+// Tests that we don't ICE when processing auto traits\n+\n+#![crate_type = \"lib\"]\n+pub trait Trait1 {}\n+\n+pub trait Trait2 {\n+    type Type2;\n+}\n+\n+pub trait Trait3 {\n+    type Type3;\n+}\n+\n+impl Trait2 for Struct1 {\n+    type Type2 = Struct1;\n+}\n+\n+impl<I: Trait2> Trait2 for Vec<I> {\n+    type Type2 = Vec<I::Type2>;\n+}\n+\n+impl<T: Trait1> Trait3 for T {\n+    type Type3 = Struct1;\n+}\n+\n+impl<T: Trait3> Trait3 for Vec<T> {\n+    type Type3 = Vec<T::Type3>;\n+}\n+\n+pub struct Struct1 {}\n+\n+// @has issue_80233_normalize_auto_trait/struct.Question.html\n+// @has - '//code' 'impl<T> Send for Question<T>'\n+pub struct Question<T: Trait1> {\n+    pub ins: <<Vec<T> as Trait3>::Type3 as Trait2>::Type2,\n+}"}]}