{"sha": "482d63673cbb2cec971f85653ff5babbf9bce0ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MmQ2MzY3M2NiYjJjZWM5NzFmODU2NTNmZjViYWJiZjliY2UwY2U=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-05T01:23:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-11T01:31:38Z"}, "message": "Use `Symbol` in `Linker`.", "tree": {"sha": "02d76f1d78cf080211e67a2012572b863efd232c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d76f1d78cf080211e67a2012572b863efd232c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/482d63673cbb2cec971f85653ff5babbf9bce0ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/482d63673cbb2cec971f85653ff5babbf9bce0ce", "html_url": "https://github.com/rust-lang/rust/commit/482d63673cbb2cec971f85653ff5babbf9bce0ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/482d63673cbb2cec971f85653ff5babbf9bce0ce/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a57f46cbc4dc1e84553b0c3093912dc3955bfe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a57f46cbc4dc1e84553b0c3093912dc3955bfe9", "html_url": "https://github.com/rust-lang/rust/commit/5a57f46cbc4dc1e84553b0c3093912dc3955bfe9"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "68d3f90cd3991160e18b6c656d1588a3dc771547", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=482d63673cbb2cec971f85653ff5babbf9bce0ce", "patch": "@@ -12,6 +12,7 @@ use crate::llvm::{self, ArchiveKind};\n use rustc_codegen_ssa::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, find_library};\n use rustc::session::Session;\n+use syntax::symbol::Symbol;\n \n struct ArchiveConfig<'a> {\n     pub sess: &'a Session,\n@@ -109,7 +110,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n-    fn add_native_library(&mut self, name: &str) {\n+    fn add_native_library(&mut self, name: Symbol) {\n         let location = find_library(name, &self.config.lib_search_paths,\n                                     self.config.sess);\n         self.add_archive(&location, |_| false).unwrap_or_else(|e| {"}, {"sha": "8d2120a345a8d61ea8015b51408bf41c582022b9", "filename": "src/librustc_codegen_ssa/back/archive.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs?ref=482d63673cbb2cec971f85653ff5babbf9bce0ce", "patch": "@@ -1,9 +1,10 @@\n use rustc::session::Session;\n+use syntax::symbol::Symbol;\n \n use std::io;\n use std::path::{Path, PathBuf};\n \n-pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)\n+pub fn find_library(name: Symbol, search_paths: &[PathBuf], sess: &Session)\n                     -> PathBuf {\n     // On Windows, static libraries sometimes show up as libfoo.a and other\n     // times show up as foo.lib\n@@ -40,7 +41,7 @@ pub trait ArchiveBuilder<'a> {\n         lto: bool,\n         skip_objects: bool,\n     ) -> io::Result<()>;\n-    fn add_native_library(&mut self, name: &str);\n+    fn add_native_library(&mut self, name: Symbol);\n     fn update_symbols(&mut self);\n \n     fn build(self);"}, {"sha": "2c2ede5e189be80712d861d636776b2f280f6aa3", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=482d63673cbb2cec971f85653ff5babbf9bce0ce", "patch": "@@ -8,6 +8,7 @@ use std::mem;\n use std::process::{self, Output};\n \n use rustc_target::spec::LldFlavor;\n+use syntax::symbol::Symbol;\n \n #[derive(Clone)]\n pub struct Command {\n@@ -49,6 +50,11 @@ impl Command {\n         self\n     }\n \n+    pub fn sym_arg(&mut self, arg: Symbol) -> &mut Command {\n+        self.arg(&arg.as_str());\n+        self\n+    }\n+\n     pub fn args<I>(&mut self, args: I) -> &mut Command\n     where\n         I: IntoIterator<Item: AsRef<OsStr>>,"}, {"sha": "c6e0e6a1e80e5c0e1c6b1f71f9a2b84d9388239d", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=482d63673cbb2cec971f85653ff5babbf9bce0ce", "patch": "@@ -13,6 +13,7 @@ use rustc::hir::def_id::CrateNum;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor};\n+use syntax::symbol::Symbol;\n \n use crate::{METADATA_FILENAME, RLIB_BYTECODE_EXTENSION, CrateInfo, CodegenResults};\n use super::archive::ArchiveBuilder;\n@@ -316,7 +317,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             NativeLibraryKind::NativeUnknown => continue,\n         }\n         if let Some(name) = lib.name {\n-            ab.add_native_library(&name.as_str());\n+            ab.add_native_library(name);\n         }\n     }\n \n@@ -1273,15 +1274,14 @@ pub fn add_local_native_libraries(cmd: &mut dyn Linker,\n     let search_path = archive_search_paths(sess);\n     for lib in relevant_libs {\n         let name = match lib.name {\n-            Some(ref l) => l,\n+            Some(l) => l,\n             None => continue,\n         };\n         match lib.kind {\n-            NativeLibraryKind::NativeUnknown => cmd.link_dylib(&name.as_str()),\n-            NativeLibraryKind::NativeFramework => cmd.link_framework(&name.as_str()),\n-            NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(&name.as_str()),\n-            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(&name.as_str(),\n-                                                                        &search_path)\n+            NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n+            NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n+            NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(name),\n+            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path)\n         }\n     }\n }\n@@ -1594,7 +1594,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(cmd: &mut dyn Linker,\n             cmd.include_path(&fix_windows_verbatim_for_gcc(dir));\n         }\n         let filestem = cratepath.file_stem().unwrap().to_str().unwrap();\n-        cmd.link_rust_dylib(&unlib(&sess.target, filestem),\n+        cmd.link_rust_dylib(Symbol::intern(&unlib(&sess.target, filestem)),\n                             parent.unwrap_or(Path::new(\"\")));\n     }\n }\n@@ -1637,22 +1637,22 @@ pub fn add_upstream_native_libraries(cmd: &mut dyn Linker,\n     for &(cnum, _) in crates {\n         for lib in codegen_results.crate_info.native_libraries[&cnum].iter() {\n             let name = match lib.name {\n-                Some(ref l) => l,\n+                Some(l) => l,\n                 None => continue,\n             };\n             if !relevant_lib(sess, &lib) {\n                 continue\n             }\n             match lib.kind {\n-                NativeLibraryKind::NativeUnknown => cmd.link_dylib(&name.as_str()),\n-                NativeLibraryKind::NativeFramework => cmd.link_framework(&name.as_str()),\n+                NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n+                NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n                 NativeLibraryKind::NativeStaticNobundle => {\n                     // Link \"static-nobundle\" native libs only if the crate they originate from\n                     // is being linked statically to the current crate.  If it's linked dynamically\n                     // or is an rlib already included via some other dylib crate, the symbols from\n                     // native libs will have already been included in that dylib.\n                     if data[cnum.as_usize() - 1] == Linkage::Static {\n-                        cmd.link_staticlib(&name.as_str())\n+                        cmd.link_staticlib(name)\n                     }\n                 },\n                 // ignore statically included native libraries here as we've"}, {"sha": "c42cd024926dc71f21444c13fab5e12865d9cb58", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482d63673cbb2cec971f85653ff5babbf9bce0ce/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=482d63673cbb2cec971f85653ff5babbf9bce0ce", "patch": "@@ -17,6 +17,7 @@ use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use rustc_serialize::{json, Encoder};\n+use syntax::symbol::Symbol;\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n@@ -99,13 +100,13 @@ impl LinkerInfo {\n /// used to dispatch on whether a GNU-like linker (generally `ld.exe`) or an\n /// MSVC linker (e.g., `link.exe`) is being used.\n pub trait Linker {\n-    fn link_dylib(&mut self, lib: &str);\n-    fn link_rust_dylib(&mut self, lib: &str, path: &Path);\n-    fn link_framework(&mut self, framework: &str);\n-    fn link_staticlib(&mut self, lib: &str);\n+    fn link_dylib(&mut self, lib: Symbol);\n+    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path);\n+    fn link_framework(&mut self, framework: Symbol);\n+    fn link_staticlib(&mut self, lib: Symbol);\n     fn link_rlib(&mut self, lib: &Path);\n     fn link_whole_rlib(&mut self, lib: &Path);\n-    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]);\n+    fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]);\n     fn include_path(&mut self, path: &Path);\n     fn framework_path(&mut self, path: &Path);\n     fn output_filename(&mut self, path: &Path);\n@@ -215,9 +216,13 @@ impl<'a> GccLinker<'a> {\n }\n \n impl<'a> Linker for GccLinker<'a> {\n-    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(format!(\"-l{}\", lib)); }\n-    fn link_staticlib(&mut self, lib: &str) {\n-        self.hint_static(); self.cmd.arg(format!(\"-l{}\", lib));\n+    fn link_dylib(&mut self, lib: Symbol) {\n+        self.hint_dynamic();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+    fn link_staticlib(&mut self, lib: Symbol) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n     }\n     fn link_rlib(&mut self, lib: &Path) { self.hint_static(); self.cmd.arg(lib); }\n     fn include_path(&mut self, path: &Path) { self.cmd.arg(\"-L\").arg(path); }\n@@ -232,14 +237,14 @@ impl<'a> Linker for GccLinker<'a> {\n     fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n-    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n         self.hint_dynamic();\n         self.cmd.arg(format!(\"-l{}\", lib));\n     }\n \n-    fn link_framework(&mut self, framework: &str) {\n+    fn link_framework(&mut self, framework: Symbol) {\n         self.hint_dynamic();\n-        self.cmd.arg(\"-framework\").arg(framework);\n+        self.cmd.arg(\"-framework\").sym_arg(framework);\n     }\n \n     // Here we explicitly ask that the entire archive is included into the\n@@ -248,7 +253,7 @@ impl<'a> Linker for GccLinker<'a> {\n     // don't otherwise explicitly reference them. This can occur for\n     // libraries which are just providing bindings, libraries with generic\n     // functions, etc.\n-    fn link_whole_staticlib(&mut self, lib: &str, search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]) {\n         self.hint_static();\n         let target = &self.sess.target.target;\n         if !target.options.is_like_osx {\n@@ -539,11 +544,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_dylib(&mut self, lib: &str) {\n+    fn link_dylib(&mut self, lib: Symbol) {\n         self.cmd.arg(&format!(\"{}.lib\", lib));\n     }\n \n-    fn link_rust_dylib(&mut self, lib: &str, path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: Symbol, path: &Path) {\n         // When producing a dll, the MSVC linker may not actually emit a\n         // `foo.lib` file if the dll doesn't actually export any symbols, so we\n         // check to see if the file is there and just omit linking to it if it's\n@@ -554,7 +559,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn link_staticlib(&mut self, lib: &str) {\n+    fn link_staticlib(&mut self, lib: Symbol) {\n         self.cmd.arg(&format!(\"{}.lib\", lib));\n     }\n \n@@ -605,11 +610,11 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn framework_path(&mut self, _path: &Path) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         bug!(\"frameworks are not supported on windows\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n         // not supported?\n         self.link_staticlib(lib);\n     }\n@@ -740,8 +745,8 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(\"-L\").arg(path);\n     }\n \n-    fn link_staticlib(&mut self, lib: &str) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_staticlib(&mut self, lib: Symbol) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n     fn output_filename(&mut self, path: &Path) {\n@@ -752,12 +757,12 @@ impl<'a> Linker for EmLinker<'a> {\n         self.cmd.arg(path);\n     }\n \n-    fn link_dylib(&mut self, lib: &str) {\n+    fn link_dylib(&mut self, lib: Symbol) {\n         // Emscripten always links statically\n         self.link_staticlib(lib);\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n         // not supported?\n         self.link_staticlib(lib);\n     }\n@@ -767,7 +772,7 @@ impl<'a> Linker for EmLinker<'a> {\n         self.link_rlib(lib);\n     }\n \n-    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n         self.link_dylib(lib);\n     }\n \n@@ -803,7 +808,7 @@ impl<'a> Linker for EmLinker<'a> {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         bug!(\"frameworks are not supported on Emscripten\")\n     }\n \n@@ -948,12 +953,12 @@ impl<'a> WasmLd<'a> {\n }\n \n impl<'a> Linker for WasmLd<'a> {\n-    fn link_dylib(&mut self, lib: &str) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_dylib(&mut self, lib: Symbol) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n-    fn link_staticlib(&mut self, lib: &str) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_staticlib(&mut self, lib: Symbol) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n     fn link_rlib(&mut self, lib: &Path) {\n@@ -995,16 +1000,16 @@ impl<'a> Linker for WasmLd<'a> {\n         self.cmd.args(args);\n     }\n \n-    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_rust_dylib(&mut self, lib: Symbol, _path: &Path) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n-        self.cmd.arg(\"-l\").arg(lib);\n+    fn link_whole_staticlib(&mut self, lib: Symbol, _search_path: &[PathBuf]) {\n+        self.cmd.arg(\"-l\").sym_arg(lib);\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n@@ -1162,27 +1167,27 @@ impl<'a> Linker for PtxLinker<'a> {\n         ::std::mem::replace(&mut self.cmd, Command::new(\"\"))\n     }\n \n-    fn link_dylib(&mut self, _lib: &str) {\n+    fn link_dylib(&mut self, _lib: Symbol) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_rust_dylib(&mut self, _lib: &str, _path: &Path) {\n+    fn link_rust_dylib(&mut self, _lib: Symbol, _path: &Path) {\n         panic!(\"external dylibs not supported\")\n     }\n \n-    fn link_staticlib(&mut self, _lib: &str) {\n+    fn link_staticlib(&mut self, _lib: Symbol) {\n         panic!(\"staticlibs not supported\")\n     }\n \n-    fn link_whole_staticlib(&mut self, _lib: &str, _search_path: &[PathBuf]) {\n+    fn link_whole_staticlib(&mut self, _lib: Symbol, _search_path: &[PathBuf]) {\n         panic!(\"staticlibs not supported\")\n     }\n \n     fn framework_path(&mut self, _path: &Path) {\n         panic!(\"frameworks not supported\")\n     }\n \n-    fn link_framework(&mut self, _framework: &str) {\n+    fn link_framework(&mut self, _framework: Symbol) {\n         panic!(\"frameworks not supported\")\n     }\n "}]}