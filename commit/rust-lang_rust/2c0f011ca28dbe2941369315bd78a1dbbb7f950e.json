{"sha": "2c0f011ca28dbe2941369315bd78a1dbbb7f950e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMGYwMTFjYTI4ZGJlMjk0MTM2OTMxNWJkNzhhMWRiYmI3Zjk1MGU=", "commit": {"author": {"name": "Pascal Hertleif", "email": "killercup@gmail.com", "date": "2018-11-29T13:12:40Z"}, "committer": {"name": "Pascal Hertleif", "email": "killercup@gmail.com", "date": "2018-12-23T14:41:49Z"}, "message": "Improve docs for collecting into `Option`s\n\nChanges the original example to use more idiomatic formatting as well\nas `.checked_add`. Also adds a second example to show a case where the\n`.collect` returns `None`.", "tree": {"sha": "21c55f75d0cae68bbe77d05e278b54f94da3b857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c55f75d0cae68bbe77d05e278b54f94da3b857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c0f011ca28dbe2941369315bd78a1dbbb7f950e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f011ca28dbe2941369315bd78a1dbbb7f950e", "html_url": "https://github.com/rust-lang/rust/commit/2c0f011ca28dbe2941369315bd78a1dbbb7f950e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f011ca28dbe2941369315bd78a1dbbb7f950e/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddab10a692aab2e2984b5c826ed9d78a57e94851", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddab10a692aab2e2984b5c826ed9d78a57e94851", "html_url": "https://github.com/rust-lang/rust/commit/ddab10a692aab2e2984b5c826ed9d78a57e94851"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "dbad29229eb8d5090fd406c01daea8bdda98044f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2c0f011ca28dbe2941369315bd78a1dbbb7f950e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0f011ca28dbe2941369315bd78a1dbbb7f950e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=2c0f011ca28dbe2941369315bd78a1dbbb7f950e", "patch": "@@ -1253,20 +1253,42 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// returned. Should no [`None`][Option::None] occur, a container with the\n     /// values of each [`Option`] is returned.\n     ///\n-    /// Here is an example which increments every integer in a vector,\n-    /// checking for overflow:\n+    /// # Examples\n+    ///\n+    /// Here is an example which increments every integer in a vector.\n+    /// `We use the checked variant of `add` that returns `None` when the\n+    /// calculation would result in an overflow.\n     ///\n     /// ```\n-    /// use std::u16;\n+    /// let items = vec![0_u16, 1, 2];\n+    ///\n+    /// let res: Option<Vec<u16>> = items\n+    ///     .iter()\n+    ///     .map(|x| x.checked_add(1))\n+    ///     .collect();\n     ///\n-    /// let v = vec![1, 2];\n-    /// let res: Option<Vec<u16>> = v.iter().map(|&x: &u16|\n-    ///     if x == u16::MAX { None }\n-    ///     else { Some(x + 1) }\n-    /// ).collect();\n-    /// assert!(res == Some(vec![2, 3]));\n+    /// assert_eq!(res, Some(vec![1, 2, 3]));\n     /// ```\n     ///\n+    /// As you can see, this will return the expected, valid items.\n+    ///\n+    /// Here is another example that tries to subtract one from another list\n+    /// of integers, this time checking for underflow:\n+    ///\n+    /// ```\n+    /// let items = vec![2_u16, 1, 0];\n+    ///\n+    /// let res: Option<Vec<u16>> = items\n+    ///     .iter()\n+    ///     .map(|x| x.checked_sub(1))\n+    ///     .collect();\n+    ///\n+    /// assert_eq!(res, None);\n+    /// ```\n+    ///\n+    /// Since the last element is zero, it would underflow. Thus, the resulting\n+    /// value is `None`.\n+    ///\n     /// [`Iterator`]: ../iter/trait.Iterator.html\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {"}]}