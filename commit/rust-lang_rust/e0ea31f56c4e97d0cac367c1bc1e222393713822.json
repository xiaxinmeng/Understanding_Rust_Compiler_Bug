{"sha": "e0ea31f56c4e97d0cac367c1bc1e222393713822", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWEzMWY1NmM0ZTk3ZDBjYWMzNjdjMWJjMWUyMjIzOTM3MTM4MjI=", "commit": {"author": {"name": "korenchkin", "email": "torstenweber12@gmail.com", "date": "2014-01-18T11:59:57Z"}, "committer": {"name": "TorstenWeber", "email": "TorstenWeber12@gmail.com", "date": "2014-01-18T20:45:05Z"}, "message": "Consistent formatting for args and attrs", "tree": {"sha": "a5a6c5964ac459af1bedc307e807293bd229f5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5a6c5964ac459af1bedc307e807293bd229f5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ea31f56c4e97d0cac367c1bc1e222393713822", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ea31f56c4e97d0cac367c1bc1e222393713822", "html_url": "https://github.com/rust-lang/rust/commit/e0ea31f56c4e97d0cac367c1bc1e222393713822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ea31f56c4e97d0cac367c1bc1e222393713822/comments", "author": {"login": "tweber12", "id": 2572424, "node_id": "MDQ6VXNlcjI1NzI0MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2572424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tweber12", "html_url": "https://github.com/tweber12", "followers_url": "https://api.github.com/users/tweber12/followers", "following_url": "https://api.github.com/users/tweber12/following{/other_user}", "gists_url": "https://api.github.com/users/tweber12/gists{/gist_id}", "starred_url": "https://api.github.com/users/tweber12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tweber12/subscriptions", "organizations_url": "https://api.github.com/users/tweber12/orgs", "repos_url": "https://api.github.com/users/tweber12/repos", "events_url": "https://api.github.com/users/tweber12/events{/privacy}", "received_events_url": "https://api.github.com/users/tweber12/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tweber12", "id": 2572424, "node_id": "MDQ6VXNlcjI1NzI0MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2572424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tweber12", "html_url": "https://github.com/tweber12", "followers_url": "https://api.github.com/users/tweber12/followers", "following_url": "https://api.github.com/users/tweber12/following{/other_user}", "gists_url": "https://api.github.com/users/tweber12/gists{/gist_id}", "starred_url": "https://api.github.com/users/tweber12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tweber12/subscriptions", "organizations_url": "https://api.github.com/users/tweber12/orgs", "repos_url": "https://api.github.com/users/tweber12/repos", "events_url": "https://api.github.com/users/tweber12/events{/privacy}", "received_events_url": "https://api.github.com/users/tweber12/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3f2e697d8d21190bb99e86bae2de39f012162aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f2e697d8d21190bb99e86bae2de39f012162aa", "html_url": "https://github.com/rust-lang/rust/commit/f3f2e697d8d21190bb99e86bae2de39f012162aa"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "b8f7cf97412d16128c171193cf56c972277c4679", "filename": "doc/guide-testing.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0ea31f56c4e97d0cac367c1bc1e222393713822/doc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/e0ea31f56c4e97d0cac367c1bc1e222393713822/doc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-testing.md?ref=e0ea31f56c4e97d0cac367c1bc1e222393713822", "patch": "@@ -33,7 +33,7 @@ test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n # Unit testing in Rust\n \n Rust has built in support for simple unit testing. Functions can be\n-marked as unit tests using the 'test' attribute.\n+marked as unit tests using the `test` attribute.\n \n ~~~\n #[test]\n@@ -44,13 +44,13 @@ fn return_none_if_empty() {\n \n A test function's signature must have no arguments and no return\n value. To run the tests in a crate, it must be compiled with the\n-'--test' flag: `rustc myprogram.rs --test -o myprogram-tests`. Running\n+`--test` flag: `rustc myprogram.rs --test -o myprogram-tests`. Running\n the resulting executable will run all the tests in the crate. A test\n is considered successful if its function returns; if the task running\n the test fails, through a call to `fail!`, a failed `check` or\n `assert`, or some other (`assert_eq`, ...) means, then the test fails.\n \n-When compiling a crate with the '--test' flag '--cfg test' is also\n+When compiling a crate with the `--test` flag `--cfg test` is also\n implied, so that tests can be conditionally compiled.\n \n ~~~\n@@ -64,17 +64,17 @@ mod tests {\n ~~~\n \n Additionally `#[test]` items behave as if they also have the\n-`#[cfg(test)]` attribute, and will not be compiled when the --test flag\n+`#[cfg(test)]` attribute, and will not be compiled when the `--test` flag\n is not used.\n \n-Tests that should not be run can be annotated with the 'ignore'\n+Tests that should not be run can be annotated with the `ignore`\n attribute. The existence of these tests will be noted in the test\n runner output, but the test will not be run. Tests can also be ignored\n by configuration so, for example, to ignore a test on windows you can\n write `#[ignore(cfg(target_os = \"win32\"))]`.\n \n Tests that are intended to fail can be annotated with the\n-'should_fail' attribute. The test will be run, and if it causes its\n+`should_fail` attribute. The test will be run, and if it causes its\n task to fail then the test will be counted as successful; otherwise it\n will be counted as a failure. For example:\n \n@@ -87,11 +87,11 @@ fn test_out_of_bounds_failure() {\n }\n ~~~\n \n-A test runner built with the '--test' flag supports a limited set of\n+A test runner built with the `--test` flag supports a limited set of\n arguments to control which tests are run: the first free argument\n passed to a test runner specifies a filter used to narrow down the set\n-of tests being run; the '--ignored' flag tells the test runner to run\n-only tests with the 'ignore' attribute.\n+of tests being run; the `--ignored` flag tells the test runner to run\n+only tests with the `ignore` attribute.\n \n ## Parallelism\n "}]}