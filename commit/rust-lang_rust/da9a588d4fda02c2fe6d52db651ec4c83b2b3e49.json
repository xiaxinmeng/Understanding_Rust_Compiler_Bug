{"sha": "da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOWE1ODhkNGZkYTAyYzJmZTZkNTJkYjY1MWVjNGM4M2IyYjNlNDk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-21T17:11:27Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-21T17:11:27Z"}, "message": "remove redundant wrapping of return types of allow_internal_unstable() and rustc_allow_const_fn_unstable()", "tree": {"sha": "1fb08662196f74d9b0b011e138cf84cbdbdded30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fb08662196f74d9b0b011e138cf84cbdbdded30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "html_url": "https://github.com/rust-lang/rust/commit/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b90c02a2aaa53881aa650d3792726135402403", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b90c02a2aaa53881aa650d3792726135402403", "html_url": "https://github.com/rust-lang/rust/commit/a9b90c02a2aaa53881aa650d3792726135402403"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "24da75114a65671458855207720e69763cdaba71", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "patch": "@@ -1035,15 +1035,15 @@ pub fn find_transparency(\n pub fn allow_internal_unstable<'a>(\n     sess: &'a Session,\n     attrs: &'a [Attribute],\n-) -> Option<impl Iterator<Item = Symbol> + 'a> {\n-    Some(allow_unstable(sess, attrs, sym::allow_internal_unstable))\n+) -> impl Iterator<Item = Symbol> + 'a {\n+    allow_unstable(sess, attrs, sym::allow_internal_unstable)\n }\n \n pub fn rustc_allow_const_fn_unstable<'a>(\n     sess: &'a Session,\n     attrs: &'a [Attribute],\n-) -> Option<impl Iterator<Item = Symbol> + 'a> {\n-    Some(allow_unstable(sess, attrs, sym::rustc_allow_const_fn_unstable))\n+) -> impl Iterator<Item = Symbol> + 'a {\n+    allow_unstable(sess, attrs, sym::rustc_allow_const_fn_unstable)\n }\n \n fn allow_unstable<'a>("}, {"sha": "ca304c05cdce30614a7e464c2255f62e2cc2b5a8", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "patch": "@@ -756,8 +756,8 @@ impl SyntaxExtension {\n         name: Symbol,\n         attrs: &[ast::Attribute],\n     ) -> SyntaxExtension {\n-        let allow_internal_unstable = attr::allow_internal_unstable(sess, &attrs)\n-            .map(|features| features.collect::<Vec<Symbol>>().into());\n+        let allow_internal_unstable =\n+            Some(attr::allow_internal_unstable(sess, &attrs).collect::<Vec<Symbol>>().into());\n \n         let mut local_inner_macros = false;\n         if let Some(macro_export) = sess.find_by_name(attrs, sym::macro_export) {"}, {"sha": "19aee033a6923fb1cda51eef51fe67efb3999160", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "patch": "@@ -85,8 +85,7 @@ pub fn rustc_allow_const_fn_unstable(\n     feature_gate: Symbol,\n ) -> bool {\n     let attrs = tcx.get_attrs(def_id);\n-    attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs)\n-        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+    attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs).any(|name| name == feature_gate)\n }\n \n // Returns `true` if the given `const fn` is \"const-stable\"."}, {"sha": "da713566c31211e607e4f63d1af344b231611099", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9a588d4fda02c2fe6d52db651ec4c83b2b3e49/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=da9a588d4fda02c2fe6d52db651ec4c83b2b3e49", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n             // opt-in via `rustc_allow_const_fn_unstable`.\n             attr::rustc_allow_const_fn_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n-                .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+                .any(|name| name == feature_gate)\n         };\n \n         match required_gates {"}]}