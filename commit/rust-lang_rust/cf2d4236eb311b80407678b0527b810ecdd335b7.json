{"sha": "cf2d4236eb311b80407678b0527b810ecdd335b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMmQ0MjM2ZWIzMTFiODA0MDc2NzhiMDUyN2I4MTBlY2RkMzM1Yjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-10T16:37:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T06:26:27Z"}, "message": "--bless some tests", "tree": {"sha": "f1c4be6b5b5f1907d65b887201f5ab97cda1288e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c4be6b5b5f1907d65b887201f5ab97cda1288e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2d4236eb311b80407678b0527b810ecdd335b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2d4236eb311b80407678b0527b810ecdd335b7", "html_url": "https://github.com/rust-lang/rust/commit/cf2d4236eb311b80407678b0527b810ecdd335b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2d4236eb311b80407678b0527b810ecdd335b7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3bc4272287f1d245236d92fe1ab3c1f41e967de", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bc4272287f1d245236d92fe1ab3c1f41e967de", "html_url": "https://github.com/rust-lang/rust/commit/b3bc4272287f1d245236d92fe1ab3c1f41e967de"}], "stats": {"total": 312, "additions": 112, "deletions": 200}, "files": [{"sha": "46db5dbc8b3c51fa31d93c6c47fccb49f87ec7b5", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | () => (pub fn r#async () { })\n-   |               ^^^^^^^\n+LL | r#async\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e12d1a48463d73aa392a73273fc369d150d3aaa6", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -33,10 +33,10 @@ LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n-  --> <::edition_kw_macro_2015::passes_ident macros>:1:22\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:27:23\n    |\n-LL | ($ i : ident) => ($ i)\n-   |                      ^ expected one of `move`, `|`, or `||`\n+LL |     ($i: ident) => ($i)\n+   |                       ^ expected one of `move`, `|`, or `||`\n    | \n   ::: $DIR/edition-keywords-2018-2015-parsing.rs:16:8\n    |"}, {"sha": "2de383d0bcaed2ef6abc84abfcb0e019052639fa", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -7,8 +7,8 @@ LL |     produces_async! {}\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n-LL | () => (pub fn r#async () { })\n-   |               ^^^^^^^\n+LL | r#async\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "110165fc077ca54711b7659be84dd9e12089f24f", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -33,10 +33,10 @@ LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n-  --> <::edition_kw_macro_2018::passes_ident macros>:1:22\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:27:23\n    |\n-LL | ($ i : ident) => ($ i)\n-   |                      ^ expected one of `move`, `|`, or `||`\n+LL |     ($i: ident) => ($i)\n+   |                       ^ expected one of `move`, `|`, or `||`\n    | \n   ::: $DIR/edition-keywords-2018-2018-parsing.rs:16:8\n    |"}, {"sha": "2f3d48bf039074087c46d525c808800ff5120783", "filename": "src/test/ui/macro_backtrace/main.-Zmacro-backtrace.stderr", "status": "modified", "additions": 54, "deletions": 50, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -13,66 +13,70 @@ LL |       pong!();\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n    |\n-LL | / macro_rules! pong {\n-LL | |     () => { syntax error };\n-   | |                    ^^^^^ expected one of 8 possible tokens\n-LL | | }\n-   | |_- in this expansion of `pong!`\n+LL | /  macro_rules! pong {\n+LL | |      () => { syntax error };\n+   | |                     ^^^^^ expected one of 8 possible tokens\n+LL | |  }\n+   | |__- in this expansion of `pong!`\n ...\n-LL |       ping!();\n-   |       -------- in this macro invocation\n+LL |        ping!();\n+   |        -------- in this macro invocation\n    | \n-  ::: <::ping::ping macros>:1:1\n+  ::: $DIR/auxiliary/ping.rs:5:1\n    |\n-LL |   () => { pong ! () ; }\n-   |   ---------------------\n-   |   |       |\n-   |   |       in this macro invocation\n-   |   in this expansion of `ping!`\n+LL |  / macro_rules! ping {\n+LL |  |     () => {\n+LL |  |         pong!();\n+   |  |         -------- in this macro invocation\n+LL |  |     }\n+LL |  | }\n+   |  |_- in this expansion of `ping!`\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n    |\n-LL | / macro_rules! pong {\n-LL | |     () => { syntax error };\n-   | |                    ^^^^^ expected one of 8 possible tokens\n-LL | | }\n-   | |_- in this expansion of `pong!` (#5)\n+LL | /  macro_rules! pong {\n+LL | |      () => { syntax error };\n+   | |                     ^^^^^ expected one of 8 possible tokens\n+LL | |  }\n+   | |__- in this expansion of `pong!` (#5)\n ...\n-LL |       deep!();\n-   |       -------- in this macro invocation (#1)\n+LL |        deep!();\n+   |        -------- in this macro invocation (#1)\n    | \n-  ::: <::ping::deep macros>:1:1\n+  ::: $DIR/auxiliary/ping.rs:5:1\n    |\n-LL |   () => { foo ! () ; }\n-   |   --------------------\n-   |   |       |\n-   |   |       in this macro invocation (#2)\n-   |   in this expansion of `deep!` (#1)\n-   | \n-  ::: <::ping::foo macros>:1:1\n-   |\n-LL |   () => { bar ! () ; }\n-   |   --------------------\n-   |   |       |\n-   |   |       in this macro invocation (#3)\n-   |   in this expansion of `foo!` (#2)\n-   | \n-  ::: <::ping::bar macros>:1:1\n-   |\n-LL |   () => { ping ! () ; }\n-   |   ---------------------\n-   |   |       |\n-   |   |       in this macro invocation (#4)\n-   |   in this expansion of `bar!` (#3)\n-   | \n-  ::: <::ping::ping macros>:1:1\n-   |\n-LL |   () => { pong ! () ; }\n-   |   ---------------------\n-   |   |       |\n-   |   |       in this macro invocation (#5)\n-   |   in this expansion of `ping!` (#4)\n+LL |  / macro_rules! ping {\n+LL |  |     () => {\n+LL |  |         pong!();\n+   |  |         -------- in this macro invocation (#5)\n+LL |  |     }\n+LL |  | }\n+   |  |_- in this expansion of `ping!` (#4)\n+...\n+LL | /  macro_rules! deep {\n+LL | |      () => {\n+LL | |          foo!();\n+   | |          ------- in this macro invocation (#2)\n+LL | |      }\n+LL | |  }\n+   | |__- in this expansion of `deep!` (#1)\n+...\n+LL | /  macro_rules! foo {\n+LL | |      () => {\n+LL | |          bar!();\n+   | |          ------- in this macro invocation (#3)\n+LL | |      }\n+LL | |  }\n+   | |__- in this expansion of `foo!` (#2)\n+...\n+LL | /  macro_rules! bar {\n+LL | |      () => {\n+LL | |          ping!();\n+   | |          -------- in this macro invocation (#4)\n+LL | |      }\n+LL | |  }\n+   | |__- in this expansion of `bar!` (#3)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "665e92f2424182d1f23b95413e7efba9b2a6e8ba", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -5,10 +5,14 @@ LL | macro_rules! unknown { () => () }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find a built-in macro with name `line`\n-  --> <::core::macros::builtin::line macros>:1:1\n+  --> $SRC_DIR/libcore/macros/mod.rs:LL:COL\n    |\n-LL | () => { } ;\n-   | ^^^^^^^^^^^\n+LL | /     macro_rules! line {\n+LL | |         () => {\n+LL | |             /* compiler built-in */\n+LL | |         };\n+LL | |     }\n+   | |_____^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c6dde67cfeba6141903901f1a29a1193aff753cd", "filename": "src/test/ui/methods/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -42,10 +42,13 @@ LL |     ($ident:ident) => { let $ident: i32 = 42; }\n error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n   --> $DIR/method-on-ambiguous-numeric-type.rs:30:9\n    |\n-LL |     mac!(bar);\n-   |     ---------- you must specify a type for this binding, like `i32`\n LL |     bar.pow(2);\n    |         ^^^\n+   |\n+help: you must specify a type for this binding, like `i32`\n+   |\n+LL |     ($ident:ident) => { let $ident: i32 = 42; }\n+   |                             ^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "30a4cd7c116a627917ac5868ac03aad2c39f20bd", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -21,21 +21,10 @@ LL |         local_def;\n    |         ^^^^^^^^^ not found in this scope\n \n error[E0412]: cannot find type `ItemUse` in crate `$crate`\n-  --> $DIR/auxiliary/mixed-site-span.rs:14:1\n-   |\n-LL | / pub fn proc_macro_rules(input: TokenStream) -> TokenStream {\n-LL | |     if input.is_empty() {\n-LL | |         let id = |s| TokenTree::from(Ident::new(s, Span::mixed_site()));\n-LL | |         let item_def = id(\"ItemDef\");\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ not found in `$crate`\n-   | \n-  ::: $DIR/mixed-site-span.rs:26:1\n-   |\n-LL |   pass_dollar_crate!();\n-   |   --------------------- in this macro invocation\n+  --> $DIR/mixed-site-span.rs:26:1\n+   |\n+LL | pass_dollar_crate!();\n+   | ^^^^^^^^^^^^^^^^^^^^^ not found in `$crate`\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: possible candidate is found in another module, you can import it into scope"}, {"sha": "4405278528eebe973c37c2b83f21241a06301fd8", "filename": "src/test/ui/proc-macro/multispan.stderr", "status": "modified", "additions": 28, "deletions": 105, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -1,19 +1,8 @@\n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:14:5\n-   |\n-LL |       hello!(hi);\n-   |       ----------- in this macro invocation\n+  --> $DIR/multispan.rs:14:5\n+   |\n+LL |     hello!(hi);\n+   |     ^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:14:12\n@@ -23,21 +12,10 @@ LL |     hello!(hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:17:5\n-   |\n-LL |       hello!(hi hi);\n-   |       -------------- in this macro invocation\n+  --> $DIR/multispan.rs:17:5\n+   |\n+LL |     hello!(hi hi);\n+   |     ^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:17:12\n@@ -47,21 +25,10 @@ LL |     hello!(hi hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:20:5\n-   |\n-LL |       hello!(hi hi hi);\n-   |       ----------------- in this macro invocation\n+  --> $DIR/multispan.rs:20:5\n+   |\n+LL |     hello!(hi hi hi);\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:20:12\n@@ -71,21 +38,10 @@ LL |     hello!(hi hi hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:23:5\n-   |\n-LL |       hello!(hi hey hi yo hi beep beep hi hi);\n-   |       ---------------------------------------- in this macro invocation\n+  --> $DIR/multispan.rs:23:5\n+   |\n+LL |     hello!(hi hey hi yo hi beep beep hi hi);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:23:12\n@@ -95,21 +51,10 @@ LL |     hello!(hi hey hi yo hi beep beep hi hi);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:24:5\n-   |\n-LL |       hello!(hi there, hi how are you? hi... hi.);\n-   |       -------------------------------------------- in this macro invocation\n+  --> $DIR/multispan.rs:24:5\n+   |\n+LL |     hello!(hi there, hi how are you? hi... hi.);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:24:12\n@@ -119,21 +64,10 @@ LL |     hello!(hi there, hi how are you? hi... hi.);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:25:5\n-   |\n-LL |       hello!(whoah. hi di hi di ho);\n-   |       ------------------------------ in this macro invocation\n+  --> $DIR/multispan.rs:25:5\n+   |\n+LL |     hello!(whoah. hi di hi di ho);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:25:19\n@@ -143,21 +77,10 @@ LL |     hello!(whoah. hi di hi di ho);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n-  --> $DIR/auxiliary/multispan.rs:31:1\n-   |\n-LL | / pub fn hello(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |     }\n-LL | |\n-LL | |     TokenStream::new()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/multispan.rs:26:5\n-   |\n-LL |       hello!(hi good hi and good bye);\n-   |       -------------------------------- in this macro invocation\n+  --> $DIR/multispan.rs:26:5\n+   |\n+LL |     hello!(hi good hi and good bye);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:26:12"}, {"sha": "ca82a3453452559cf5f4f40de65a7f45973622e7", "filename": "src/test/ui/proc-macro/three-equals.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf2d4236eb311b80407678b0527b810ecdd335b7/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr?ref=cf2d4236eb311b80407678b0527b810ecdd335b7", "patch": "@@ -1,19 +1,8 @@\n error: found 2 equal signs, need exactly 3\n-  --> $DIR/auxiliary/three-equals.rs:42:1\n-   |\n-LL | / pub fn three_equals(input: TokenStream) -> TokenStream {\n-LL | |     if let Err(diag) = parse(input) {\n-LL | |         diag.emit();\n-LL | |         return TokenStream::new();\n-...  |\n-LL | |     \"3\".parse().unwrap()\n-LL | | }\n-   | |_^\n-   | \n-  ::: $DIR/three-equals.rs:15:5\n-   |\n-LL |       three_equals!(==);\n-   |       ------------------ in this macro invocation\n+  --> $DIR/three-equals.rs:15:5\n+   |\n+LL |     three_equals!(==);\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: input must be: `===`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}]}