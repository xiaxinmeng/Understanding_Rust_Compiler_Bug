{"sha": "b1316eca922655f5d81559c1c26f457693aa5c2b", "node_id": "C_kwDOAAsO6NoAKGIxMzE2ZWNhOTIyNjU1ZjVkODE1NTljMWMyNmY0NTc2OTNhYTVjMmI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T13:33:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T15:01:19Z"}, "message": "support and test some more math functions", "tree": {"sha": "1bd1c264f3a584d28069b8502663d31c212705e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bd1c264f3a584d28069b8502663d31c212705e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1316eca922655f5d81559c1c26f457693aa5c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1316eca922655f5d81559c1c26f457693aa5c2b", "html_url": "https://github.com/rust-lang/rust/commit/b1316eca922655f5d81559c1c26f457693aa5c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1316eca922655f5d81559c1c26f457693aa5c2b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "html_url": "https://github.com/rust-lang/rust/commit/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068"}], "stats": {"total": 95, "additions": 71, "deletions": 24}, "files": [{"sha": "e7cfd43f1b1e7dd184752c1c96d294d21e81252b", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1316eca922655f5d81559c1c26f457693aa5c2b/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1316eca922655f5d81559c1c26f457693aa5c2b/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b1316eca922655f5d81559c1c26f457693aa5c2b", "patch": "@@ -575,15 +575,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_machine_usize(u64::try_from(n).unwrap(), this), dest)?;\n             }\n \n-            // math functions\n+            // math functions (note that there are also intrinsics for some other functions)\n             #[rustfmt::skip]\n             | \"cbrtf\"\n             | \"coshf\"\n             | \"sinhf\"\n             | \"tanf\"\n+            | \"tanhf\"\n             | \"acosf\"\n             | \"asinf\"\n             | \"atanf\"\n+            | \"log1pf\"\n+            | \"expm1f\"\n             => {\n                 let [f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n@@ -593,9 +596,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"coshf\" => f.cosh(),\n                     \"sinhf\" => f.sinh(),\n                     \"tanf\" => f.tan(),\n+                    \"tanhf\" => f.tanh(),\n                     \"acosf\" => f.acos(),\n                     \"asinf\" => f.asin(),\n                     \"atanf\" => f.atan(),\n+                    \"log1pf\" => f.ln_1p(),\n+                    \"expm1f\" => f.exp_m1(),\n                     _ => bug!(),\n                 };\n                 this.write_scalar(Scalar::from_u32(res.to_bits()), dest)?;\n@@ -604,6 +610,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"_hypotf\"\n             | \"hypotf\"\n             | \"atan2f\"\n+            | \"fdimf\"\n             => {\n                 let [f1, f2] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // underscore case for windows, here and below\n@@ -614,6 +621,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let res = match link_name.as_str() {\n                     \"_hypotf\" | \"hypotf\" => f1.hypot(f2),\n                     \"atan2f\" => f1.atan2(f2),\n+                    #[allow(deprecated)]\n+                    \"fdimf\" => f1.abs_sub(f2),\n                     _ => bug!(),\n                 };\n                 this.write_scalar(Scalar::from_u32(res.to_bits()), dest)?;\n@@ -623,9 +632,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"cosh\"\n             | \"sinh\"\n             | \"tan\"\n+            | \"tanh\"\n             | \"acos\"\n             | \"asin\"\n             | \"atan\"\n+            | \"log1p\"\n+            | \"expm1\"\n             => {\n                 let [f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n@@ -635,9 +647,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"cosh\" => f.cosh(),\n                     \"sinh\" => f.sinh(),\n                     \"tan\" => f.tan(),\n+                    \"tanh\" => f.tanh(),\n                     \"acos\" => f.acos(),\n                     \"asin\" => f.asin(),\n                     \"atan\" => f.atan(),\n+                    \"log1p\" => f.ln_1p(),\n+                    \"expm1\" => f.exp_m1(),\n                     _ => bug!(),\n                 };\n                 this.write_scalar(Scalar::from_u64(res.to_bits()), dest)?;\n@@ -646,6 +661,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"_hypot\"\n             | \"hypot\"\n             | \"atan2\"\n+            | \"fdim\"\n             => {\n                 let [f1, f2] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n@@ -654,6 +670,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let res = match link_name.as_str() {\n                     \"_hypot\" | \"hypot\" => f1.hypot(f2),\n                     \"atan2\" => f1.atan2(f2),\n+                    #[allow(deprecated)]\n+                    \"fdim\" => f1.abs_sub(f2),\n                     _ => bug!(),\n                 };\n                 this.write_scalar(Scalar::from_u64(res.to_bits()), dest)?;"}, {"sha": "5973f4cd197fe78a0a8e7545dc3cac689222c8dc", "filename": "tests/pass/intrinsics-math.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b1316eca922655f5d81559c1c26f457693aa5c2b/tests%2Fpass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1316eca922655f5d81559c1c26f457693aa5c2b/tests%2Fpass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintrinsics-math.rs?ref=b1316eca922655f5d81559c1c26f457693aa5c2b", "patch": "@@ -32,24 +32,24 @@ pub fn main() {\n     assert_approx_eq!(25f32.powi(-2), 0.0016f32);\n     assert_approx_eq!(23.2f64.powi(2), 538.24f64);\n \n-    assert_approx_eq!(0f32.sin(), 0f32);\n-    assert_approx_eq!((f64::consts::PI / 2f64).sin(), 1f64);\n-\n-    assert_approx_eq!(0f32.cos(), 1f32);\n-    assert_approx_eq!((f64::consts::PI * 2f64).cos(), 1f64);\n-\n     assert_approx_eq!(25f32.powf(-2f32), 0.0016f32);\n     assert_approx_eq!(400f64.powf(0.5f64), 20f64);\n \n-    assert_approx_eq!((1f32.exp() - f32::consts::E).abs(), 0f32);\n+    assert_approx_eq!(1f32.exp(), f32::consts::E);\n     assert_approx_eq!(1f64.exp(), f64::consts::E);\n \n+    assert_approx_eq!(1f32.exp_m1(), f32::consts::E - 1.0);\n+    assert_approx_eq!(1f64.exp_m1(), f64::consts::E - 1.0);\n+\n     assert_approx_eq!(10f32.exp2(), 1024f32);\n     assert_approx_eq!(50f64.exp2(), 1125899906842624f64);\n \n-    assert_approx_eq!((f32::consts::E.ln() - 1f32).abs(), 0f32);\n+    assert_approx_eq!(f32::consts::E.ln(), 1f32);\n     assert_approx_eq!(1f64.ln(), 0f64);\n \n+    assert_approx_eq!(0f32.ln_1p(), 0f32);\n+    assert_approx_eq!(0f64.ln_1p(), 0f64);\n+\n     assert_approx_eq!(10f32.log10(), 1f32);\n     assert_approx_eq!(f64::consts::E.log10(), f64::consts::LOG10_E);\n \n@@ -66,6 +66,12 @@ pub fn main() {\n     assert_approx_eq!((-1.0f32).abs(), 1.0f32);\n     assert_approx_eq!(34.2f64.abs(), 34.2f64);\n \n+    #[allow(deprecated)]\n+    {\n+        assert_approx_eq!(5.0f32.abs_sub(3.0), 2.0);\n+        assert_approx_eq!(3.0f64.abs_sub(5.0), 0.0);\n+    }\n+\n     assert_approx_eq!(3.8f32.floor(), 3.0f32);\n     assert_approx_eq!((-1.1f64).floor(), -2.0f64);\n \n@@ -81,31 +87,54 @@ pub fn main() {\n     assert_approx_eq!(3.0f32.hypot(4.0f32), 5.0f32);\n     assert_approx_eq!(3.0f64.hypot(4.0f64), 5.0f64);\n \n-    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n-    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n+    assert_eq!(3.3_f32.round(), 3.0);\n+    assert_eq!(3.3_f64.round(), 3.0);\n \n-    assert_approx_eq!(1.0f32.cosh(), 1.54308f32);\n-    assert_approx_eq!(1.0f64.cosh(), 1.54308f64);\n+    assert_eq!(ldexp(0.65f64, 3i32), 5.2f64);\n+    assert_eq!(ldexp(1.42, 0xFFFF), f64::INFINITY);\n+    assert_eq!(ldexp(1.42, -0xFFFF), 0f64);\n+\n+    // Trigonometric functions.\n+\n+    assert_approx_eq!(0f32.sin(), 0f32);\n+    assert_approx_eq!((f64::consts::PI / 2f64).sin(), 1f64);\n+    assert_approx_eq!(f32::consts::FRAC_PI_6.sin(), 0.5);\n+    assert_approx_eq!(f64::consts::FRAC_PI_6.sin(), 0.5);\n+    assert_approx_eq!(f32::consts::FRAC_PI_4.sin().asin(), f32::consts::FRAC_PI_4);\n+    assert_approx_eq!(f64::consts::FRAC_PI_4.sin().asin(), f64::consts::FRAC_PI_4);\n \n     assert_approx_eq!(1.0f32.sinh(), 1.1752012f32);\n     assert_approx_eq!(1.0f64.sinh(), 1.1752012f64);\n+    assert_approx_eq!(2.0f32.asinh(), 1.443635475178810342493276740273105f32);\n+    assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n \n-    assert_approx_eq!(1.0f32.tan(), 1.557408f32);\n-    assert_approx_eq!(1.0f64.tan(), 1.557408f64);\n-\n+    assert_approx_eq!(0f32.cos(), 1f32);\n+    assert_approx_eq!((f64::consts::PI * 2f64).cos(), 1f64);\n+    assert_approx_eq!(f32::consts::FRAC_PI_3.cos(), 0.5);\n+    assert_approx_eq!(f64::consts::FRAC_PI_3.cos(), 0.5);\n     assert_approx_eq!(f32::consts::FRAC_PI_4.cos().acos(), f32::consts::FRAC_PI_4);\n     assert_approx_eq!(f64::consts::FRAC_PI_4.cos().acos(), f64::consts::FRAC_PI_4);\n \n-    assert_approx_eq!(f32::consts::FRAC_PI_4.sin().asin(), f32::consts::FRAC_PI_4);\n-    assert_approx_eq!(f64::consts::FRAC_PI_4.sin().asin(), f64::consts::FRAC_PI_4);\n+    assert_approx_eq!(1.0f32.cosh(), 1.54308f32);\n+    assert_approx_eq!(1.0f64.cosh(), 1.54308f64);\n+    assert_approx_eq!(2.0f32.acosh(), 1.31695789692481670862504634730796844f32);\n+    assert_approx_eq!(3.0f64.acosh(), 1.76274717403908605046521864995958461f64);\n \n+    assert_approx_eq!(1.0f32.tan(), 1.557408f32);\n+    assert_approx_eq!(1.0f64.tan(), 1.557408f64);\n     assert_approx_eq!(1.0_f32, 1.0_f32.tan().atan());\n     assert_approx_eq!(1.0_f64, 1.0_f64.tan().atan());\n+    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n+    assert_approx_eq!(1.0f32.atan2(2.0f32), 0.46364761f32);\n \n-    assert_eq!(3.3_f32.round(), 3.0);\n-    assert_eq!(3.3_f64.round(), 3.0);\n-\n-    assert_eq!(ldexp(0.65f64, 3i32), 5.2f64);\n-    assert_eq!(ldexp(1.42, 0xFFFF), f64::INFINITY);\n-    assert_eq!(ldexp(1.42, -0xFFFF), 0f64);\n+    assert_approx_eq!(\n+        1.0f32.tanh(),\n+        (1.0 - f32::consts::E.powi(-2)) / (1.0 + f32::consts::E.powi(-2))\n+    );\n+    assert_approx_eq!(\n+        1.0f64.tanh(),\n+        (1.0 - f64::consts::E.powi(-2)) / (1.0 + f64::consts::E.powi(-2))\n+    );\n+    assert_approx_eq!(0.5f32.atanh(), 0.54930614433405484569762261846126285f32);\n+    assert_approx_eq!(0.5f64.atanh(), 0.54930614433405484569762261846126285f64);\n }"}]}