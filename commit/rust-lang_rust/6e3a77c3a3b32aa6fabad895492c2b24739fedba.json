{"sha": "6e3a77c3a3b32aa6fabad895492c2b24739fedba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlM2E3N2MzYTNiMzJhYTZmYWJhZDg5NTQ5MmMyYjI0NzM5ZmVkYmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T01:19:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T01:19:42Z"}, "message": "Merge remote branch 'tohava/master'\n\nConflicts:\n\tsrc/boot/fe/ast.ml", "tree": {"sha": "5e92169975465400c1f617c39fcbacf9bffab706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e92169975465400c1f617c39fcbacf9bffab706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3a77c3a3b32aa6fabad895492c2b24739fedba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3a77c3a3b32aa6fabad895492c2b24739fedba", "html_url": "https://github.com/rust-lang/rust/commit/6e3a77c3a3b32aa6fabad895492c2b24739fedba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3a77c3a3b32aa6fabad895492c2b24739fedba/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed92925083ebe26e6e3a9cec6b1f3906f9ce2dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed92925083ebe26e6e3a9cec6b1f3906f9ce2dd1", "html_url": "https://github.com/rust-lang/rust/commit/ed92925083ebe26e6e3a9cec6b1f3906f9ce2dd1"}, {"sha": "0830b5bf24a7117130e0089754cd96e51411284d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0830b5bf24a7117130e0089754cd96e51411284d", "html_url": "https://github.com/rust-lang/rust/commit/0830b5bf24a7117130e0089754cd96e51411284d"}], "stats": {"total": 236, "additions": 166, "deletions": 70}, "files": [{"sha": "76e112721b13a0aabb335ad2b00509e9c3c365fc", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=6e3a77c3a3b32aa6fabad895492c2b24739fedba", "patch": "@@ -371,6 +371,7 @@ self: $(CFG_COMPILER)\n # of inter-task shutdown races introduced with notification proxies.\n \n TASK_XFAILS := test/run-pass/acyclic-unwind.rs \\\n+               test/run-pass/alt-type-simple.rs \\\n                test/run-pass/basic.rs \\\n                test/run-pass/clone-with-exterior.rs \\\n                test/run-pass/comm.rs \\"}, {"sha": "79ff2c7c4b6ca67a52b42ade4b0c820daa849518", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=6e3a77c3a3b32aa6fabad895492c2b24739fedba", "patch": "@@ -322,7 +322,7 @@ and pat =\n and tag_arm' = pat * block\n and tag_arm = tag_arm' identified\n \n-and type_arm' = ident * slot * block\n+and type_arm' = (ident * slot) * block\n and type_arm = type_arm' identified\n \n and port_arm' = port_case * block\n@@ -1253,7 +1253,6 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n                   fmt_cbb ff;\n           end;\n           fmt_cbb ff;\n-\n       | STMT_alt_port at ->\n           fmt_obox ff;\n           fmt ff \"alt \";\n@@ -1273,7 +1272,6 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n                   fmt_cbb ff;\n           end;\n           fmt_cbb ff;\n-\n       | STMT_note at ->\n           begin\n             fmt ff \"note \";\n@@ -1308,10 +1306,11 @@ and fmt_tag_arm (ff:Format.formatter) (tag_arm:tag_arm) : unit =\n     fmt_arm ff (fun ff -> fmt_pat ff pat) block;\n \n and fmt_type_arm (ff:Format.formatter) (type_arm:type_arm) : unit =\n-  let (_, slot, block) = type_arm.node in\n-    fmt_arm ff (fun ff -> fmt_slot ff slot) block;\n-\n-\n+  let ((ident, slot), block) = type_arm.node in\n+  let fmt_type_arm_case (ff:Format.formatter) =\n+    fmt_slot ff slot; fmt ff \" \"; fmt_ident ff ident\n+  in\n+    fmt_arm ff fmt_type_arm_case block;\n and fmt_port_arm (ff:Format.formatter) (port_arm:port_arm) : unit =\n   let (port_case, block) = port_arm.node in\n     fmt_arm ff (fun ff -> fmt_port_case ff port_case) block;"}, {"sha": "a47fca5acf06c966ce54205e53dc22dc009e7007", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 110, "deletions": 62, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=6e3a77c3a3b32aa6fabad895492c2b24739fedba", "patch": "@@ -225,69 +225,117 @@ and parse_stmts (ps:pstate) : Ast.stmt array =\n \n       | ALT ->\n           bump ps;\n-          begin\n+          let rec parse_pat ps  =\n             match peek ps with\n-                TYPE -> [| |]\n-              | LPAREN ->\n-                  let (stmts, lval) = bracketed LPAREN RPAREN parse_lval ps in\n-                  let rec parse_pat ps =\n-                    match peek ps with\n-                        IDENT _ ->\n-                          let apos = lexpos ps in\n-                          let name = Pexp.parse_name ps in\n-                          let bpos = lexpos ps in\n-\n-                          if peek ps != LPAREN then\n-                            begin\n-                              match name with\n-                                  Ast.NAME_base (Ast.BASE_ident ident) ->\n-                                    let slot =\n-                                      { Ast.slot_mode = Ast.MODE_local;\n-                                        Ast.slot_ty = None }\n-                                    in\n-                                      Ast.PAT_slot\n-                                        ((span ps apos bpos slot), ident)\n-                                |_ -> raise (unexpected ps)\n-                            end\n-                          else\n-                            let lv = name_to_lval apos bpos name in\n-                              Ast.PAT_tag (lv, paren_comma_list parse_pat ps)\n-\n-                      | LIT_INT _\n-                      | LIT_UINT _\n-                      | LIT_CHAR _\n-                      | LIT_BOOL _ ->\n-                          Ast.PAT_lit (Pexp.parse_lit ps)\n-\n-                      | UNDERSCORE -> bump ps; Ast.PAT_wild\n-\n-                      | tok -> raise (Parse_err (ps,\n-                          \"Expected pattern but found '\" ^\n-                            (string_of_tok tok) ^ \"'\"))\n-                  in\n-                  let rec parse_arms ps =\n-                    match peek ps with\n-                        CASE ->\n-                          bump ps;\n-                          let pat = bracketed LPAREN RPAREN parse_pat ps in\n-                          let block = parse_block ps in\n-                          let arm = (pat, block) in\n-                          (span ps apos (lexpos ps) arm)::(parse_arms ps)\n-                      | _ -> []\n-                  in\n-                  let parse_alt_block ps =\n-                    let arms = ctxt \"alt tag arms\" parse_arms ps in\n-                    spans ps stmts apos begin\n-                      Ast.STMT_alt_tag {\n-                        Ast.alt_tag_lval = lval;\n-                        Ast.alt_tag_arms = Array.of_list arms\n-                      }\n-                    end\n-                  in\n-                  bracketed LBRACE RBRACE parse_alt_block ps\n-              | _ -> [| |]\n-          end\n-\n+                IDENT _ ->\n+                  let apos = lexpos ps in\n+                  let name = Pexp.parse_name ps in\n+                  let bpos = lexpos ps in\n+                    \n+                    if peek ps != LPAREN then\n+                      begin\n+                        match name with\n+                            Ast.NAME_base (Ast.BASE_ident ident) ->\n+                              let slot =\n+                                { Ast.slot_mode = Ast.MODE_local;\n+                                  Ast.slot_ty = None }\n+                              in\n+                                Left \n+                                  (Ast.PAT_slot ((span ps apos bpos slot), \n+                                                 ident))\n+                          |_ -> raise (unexpected ps)\n+                      end\n+                    else\n+                      let lv = name_to_lval apos bpos name in\n+                      let parse_pat ps = either_get_left (parse_pat ps) in\n+                        Left \n+                          (Ast.PAT_tag (lv, paren_comma_list parse_pat ps))\n+                          \n+              | LIT_INT _\n+              | LIT_UINT _\n+              | LIT_CHAR _\n+              | LIT_BOOL _ ->\n+                  Left (Ast.PAT_lit (Pexp.parse_lit ps))\n+                    \n+              | UNDERSCORE -> bump ps; Left (Ast.PAT_wild)\n+                  \n+              | tok -> raise (Parse_err (ps,\n+                                         \"Expected pattern but found '\" ^\n+                                           (string_of_tok tok) ^ \"'\"))\n+          in\n+          let rec parse_arms ps parse_case =\n+            match peek ps with \n+                CASE -> \n+                  bump ps;\n+                  let case = parse_case ps in\n+                  let blk = parse_block ps in\n+                  let combine_and_span case =\n+                    (span ps apos (lexpos ps) (case, blk)) in\n+                  let is_default = either_has_right case in\n+                    if is_default then\n+                      let arm = combine_and_span (either_get_right case) in\n+                        ([], Some arm)\n+                    else\n+                      let rec_result = parse_arms ps parse_case in\n+                      let arm = combine_and_span (either_get_left case) in\n+                        (arm::(fst rec_result), (snd rec_result))\n+              | _ -> ([], None)\n+          in\n+          let parse_alt_block ps str parse_case make_stmt =\n+            let br_parse_case = bracketed LPAREN RPAREN parse_case in\n+            let arms = (ctxt (String.concat \" \" [\"alt\"; str; \"arms\"]) \n+                          (fun ps -> parse_arms ps br_parse_case) ps) in\n+              make_stmt (fst arms) (snd arms) \n+          in\n+          let which_alt = match peek ps with \n+              TYPE -> \"type\" | LPAREN -> \"tag\" | _ -> raise (unexpected ps)\n+          in\n+          let (stmts, lval) = if which_alt = \"type\" then bump ps; \n+            bracketed LPAREN RPAREN parse_lval ps \n+          in\n+          let make_alt_tag_stmt val_arms dflt_arm =\n+            assert (not (bool_of_option dflt_arm));\n+            spans ps stmts apos begin\n+              Ast.STMT_alt_tag {\n+                Ast.alt_tag_lval = lval;\n+                Ast.alt_tag_arms = Array.of_list val_arms;\n+              }\n+            end\n+          in \n+          let make_alt_type_stmt val_arms dflt_arm =\n+            spans ps stmts apos begin\n+              Ast.STMT_alt_type {\n+                Ast.alt_type_lval = lval;\n+                Ast.alt_type_arms = Array.of_list val_arms;\n+                Ast.alt_type_else = option_map (fun x -> snd x.node) dflt_arm;\n+              }\n+            end\n+          in\n+          let parse_slot_and_ident ps =\n+            match peek ps with\n+                UNDERSCORE -> Right ()\n+              | _ -> Left (pair_rev (Pexp.parse_slot_and_ident false ps)) \n+                  \n+          in\n+          let parse_alt_tag_block ps =\n+            parse_alt_block ps\n+              \"tag\"\n+              parse_pat\n+              make_alt_tag_stmt\n+          in\n+          let parse_alt_type_block ps =\n+            parse_alt_block ps\n+              \"type\"\n+              parse_slot_and_ident\n+              make_alt_type_stmt\n+          in\n+          let parse_alt_block2 ps =\n+            match which_alt with\n+                \"type\" -> parse_alt_type_block ps\n+              | \"tag\" -> parse_alt_tag_block ps\n+              | _ -> assert false\n+          in\n+            bracketed LBRACE RBRACE parse_alt_block2 ps\n       | IF ->\n           let final_else = ref None in\n           let rec parse_stmt_if _ ="}, {"sha": "a0b666b3f192298b1277e28f462a20ac3ac8a114", "filename": "src/boot/me/dead.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Fme%2Fdead.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Fme%2Fdead.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdead.ml?ref=6e3a77c3a3b32aa6fabad895492c2b24739fedba", "patch": "@@ -70,7 +70,7 @@ let dead_code_visitor\n \n         | Ast.STMT_alt_type { Ast.alt_type_arms = arms;\n                               Ast.alt_type_else = alt_type_else } ->\n-            let arm_ids = Array.map (fun { node = (_, _, block) } -> \n+            let arm_ids = Array.map (fun { node = ((_, _), block) } -> \n                                        block.id) arms in\n             let else_ids =\n               begin"}, {"sha": "d9b9185669c6b34b3e1260e55880b1ec0bbef568", "filename": "src/boot/util/common.ml", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Futil%2Fcommon.ml", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Fboot%2Futil%2Fcommon.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Futil%2Fcommon.ml?ref=6e3a77c3a3b32aa6fabad895492c2b24739fedba", "patch": "@@ -3,6 +3,8 @@\n  * types shared across all phases of the compiler.\n  *)\n \n+type ('a, 'b) either = Left of 'a | Right of 'b\n+\n type filename = string\n type pos = (filename * int * int)\n type span = {lo: pos; hi: pos}\n@@ -343,6 +345,11 @@ let rec list_drop n ls =\n ;;\n \n \n+(*\n+ * Auxiliary pair functions.\n+ *)\n+let pair_rev (x,y) = (y,x)\n+\n (*\n  * Auxiliary option functions.\n  *)\n@@ -357,11 +364,35 @@ let may f x =\n       Some x' -> f x'\n     | None -> ()\n \n+let option_map f x =\n+  match x with\n+      Some x' -> Some (f x')\n+    | None -> None\n+\n let option_get x =\n   match x with\n       Some x -> x\n     | None -> raise Not_found\n \n+(*\n+ * Auxiliary either functions.\n+ *)\n+let either_has_left x =\n+  match x with\n+      Left _ -> true\n+    | Right _ -> false\n+        \n+let either_has_right x = not (either_has_left x)\n+\n+let either_get_left x =\n+  match x with\n+      Left x -> x\n+    | Right _ -> raise Not_found\n+\n+let either_get_right x =\n+  match x with\n+      Right x -> x\n+    | Left _ -> raise Not_found\n (*\n  * Auxiliary stack functions.\n  *)"}, {"sha": "f2582879ce5e48d6ae383a627d0eed09d1b97ae1", "filename": "src/test/compile-fail/bad-alt.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Ftest%2Fcompile-fail%2Fbad-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Ftest%2Fcompile-fail%2Fbad-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-alt.rs?ref=6e3a77c3a3b32aa6fabad895492c2b24739fedba", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: Unexpected token 'x'\n+\n+fn main() {\n+  let int x = 5;\n+  alt x;\n+}"}, {"sha": "85f6ff684598ac6aab144fbee2b2dcc1d8df3dfb", "filename": "src/test/run-pass/alt-type-simple.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Ftest%2Frun-pass%2Falt-type-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3a77c3a3b32aa6fabad895492c2b24739fedba/src%2Ftest%2Frun-pass%2Falt-type-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-type-simple.rs?ref=6e3a77c3a3b32aa6fabad895492c2b24739fedba", "patch": "@@ -0,0 +1,11 @@\n+fn altsimple(any x) {\n+  alt type (f) {\n+    case (int i) { print(\"int\"); }\n+    case (str s) { print(\"str\"); }\n+  }\n+}\n+\n+fn main() {\n+  altsimple(5);\n+  altsimple(\"asdfasdfsDF\");\n+}"}]}