{"sha": "1479c18396d764482aa0e56b372c5f57a97c102b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NzljMTgzOTZkNzY0NDgyYWEwZTU2YjM3MmM1ZjU3YTk3YzEwMmI=", "commit": {"author": {"name": "Frank", "email": "lifrank@grinnell.edu", "date": "2020-09-24T20:32:03Z"}, "committer": {"name": "Frank", "email": "lifrank@grinnell.edu", "date": "2020-09-25T16:09:04Z"}, "message": "add disallowed_method lint", "tree": {"sha": "5d24b1f867251f71ef3f90a04a25a2a047719845", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d24b1f867251f71ef3f90a04a25a2a047719845"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1479c18396d764482aa0e56b372c5f57a97c102b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1479c18396d764482aa0e56b372c5f57a97c102b", "html_url": "https://github.com/rust-lang/rust/commit/1479c18396d764482aa0e56b372c5f57a97c102b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1479c18396d764482aa0e56b372c5f57a97c102b/comments", "author": {"login": "ilknarf", "id": 30297768, "node_id": "MDQ6VXNlcjMwMjk3NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/30297768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilknarf", "html_url": "https://github.com/ilknarf", "followers_url": "https://api.github.com/users/ilknarf/followers", "following_url": "https://api.github.com/users/ilknarf/following{/other_user}", "gists_url": "https://api.github.com/users/ilknarf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilknarf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilknarf/subscriptions", "organizations_url": "https://api.github.com/users/ilknarf/orgs", "repos_url": "https://api.github.com/users/ilknarf/repos", "events_url": "https://api.github.com/users/ilknarf/events{/privacy}", "received_events_url": "https://api.github.com/users/ilknarf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ilknarf", "id": 30297768, "node_id": "MDQ6VXNlcjMwMjk3NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/30297768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilknarf", "html_url": "https://github.com/ilknarf", "followers_url": "https://api.github.com/users/ilknarf/followers", "following_url": "https://api.github.com/users/ilknarf/following{/other_user}", "gists_url": "https://api.github.com/users/ilknarf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilknarf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilknarf/subscriptions", "organizations_url": "https://api.github.com/users/ilknarf/orgs", "repos_url": "https://api.github.com/users/ilknarf/repos", "events_url": "https://api.github.com/users/ilknarf/events{/privacy}", "received_events_url": "https://api.github.com/users/ilknarf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "html_url": "https://github.com/rust-lang/rust/commit/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a"}], "stats": {"total": 199, "additions": 199, "deletions": 0}, "files": [{"sha": "575cbd60792fb96511e5e7432ee0fc980620e751", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -1559,6 +1559,7 @@ Released 2018-09-13\n [`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n+[`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons"}, {"sha": "7088b2718f20de465cf26af13498c4bbe195e282", "filename": "clippy_lints/src/disallowed_method.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -0,0 +1,75 @@\n+use crate::utils::span_lint;\n+\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_lint::{LateLintPass, LateContext};\n+use rustc_session::{impl_lint_pass, declare_tool_lint};\n+use rustc_hir::*;\n+use rustc_span::Symbol;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Lints for specific trait methods defined in clippy.toml\n+    ///\n+    /// **Why is this bad?** Some methods are undesirable in certain contexts,\n+    /// and it would be beneficial to lint for them as needed.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // example code where clippy issues a warning\n+    /// foo.bad_method(); // Foo is disallowed\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // example code which does not raise clippy warning\n+    /// GoodStruct.bad_method(); // not disallowed\n+    /// ```\n+    pub DISALLOWED_METHOD,\n+    nursery,\n+    \"used disallowed method call\"\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct DisallowedMethod {\n+    disallowed: FxHashSet<Vec<Symbol>>,\n+}\n+\n+impl DisallowedMethod {\n+    pub fn new(disallowed: FxHashSet<String>) -> Self {\n+        Self {\n+            disallowed: disallowed.iter()\n+                .map(|s| {\n+                    s.split(\"::\").map(|seg| Symbol::intern(seg)).collect::<Vec<_>>()\n+                })\n+                .collect(),\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n+\n+impl <'tcx> LateLintPass<'tcx> for DisallowedMethod {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let ExprKind::MethodCall(path, _, _args, _) = &expr.kind {\n+            let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n+\n+            let method_call = cx.get_def_path(def_id);\n+            if self.disallowed.contains(&method_call) {\n+                span_lint(\n+                    cx,\n+                    DISALLOWED_METHOD,\n+                    expr.span,\n+                    &format!(\n+                        \"Use of a disallowed method `{}`\",\n+                        method_call\n+                            .iter()\n+                            .map(|s| s.to_ident_string())\n+                            .collect::<Vec<_>>()\n+                            .join(\"::\"),\n+                    )\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "7c886ab87d0e68f0d69a533ae3fecc7ed67bfc64", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -175,6 +175,7 @@ mod dbg_macro;\n mod default_trait_access;\n mod dereference;\n mod derive;\n+mod disallowed_method;\n mod doc;\n mod double_comparison;\n mod double_parens;\n@@ -525,6 +526,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &derive::UNSAFE_DERIVE_DESERIALIZE,\n+        &disallowed_method::DISALLOWED_METHOD,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n@@ -1118,6 +1120,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     store.register_late_pass(|| box manual_strip::ManualStrip);\n     store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n+    let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(disallowed_methods.clone()));\n+\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1807,6 +1812,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&cognitive_complexity::COGNITIVE_COMPLEXITY),\n+        LintId::of(&disallowed_method::DISALLOWED_METHOD),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&floating_point_arithmetic::IMPRECISE_FLOPS),\n         LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),"}, {"sha": "07591ce22298f713b17038511a1e14eaa7688700", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -164,6 +164,8 @@ define_Conf! {\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n+    /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n+    (disallowed_methods, \"disallowed_methods\": Vec<String>, [\"disallowed_method::Foo::bad_method\", \"disallowed_method::Baz::bad_method\", \"disallowed_method::Quux::bad_method\"].iter().map(ToString::to_string).collect()),\n }\n \n impl Default for Conf {"}, {"sha": "a77bbcb0abe873e03670776107cb5e91b2a22d1a", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -381,6 +381,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"derive\",\n     },\n+    Lint {\n+        name: \"disallowed_method\",\n+        group: \"nursery\",\n+        desc: \"default lint description\",\n+        deprecation: None,\n+        module: \"disallowed_method\",\n+    },\n     Lint {\n         name: \"diverging_sub_expression\",\n         group: \"complexity\","}, {"sha": "a1f515e443dc57f5ec57d94eedadc227e1baf97b", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -0,0 +1 @@\n+disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\"]"}, {"sha": "3d3f0729abd85a82a9dcc5bf9541ba7a1fc29105", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -0,0 +1,13 @@\n+#![warn(clippy::disallowed_method)]\n+\n+extern crate regex;\n+use regex::Regex;\n+\n+fn main() {\n+    let a = vec![1, 2, 3, 4];\n+    let re = Regex::new(r\"ab.*c\").unwrap();\n+\n+    re.is_match(\"abc\");\n+\n+    a.iter().sum::<i32>();\n+}"}, {"sha": "5da551cb430bc6c4c49bd7a06b1b8f8251027d64", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -0,0 +1,16 @@\n+error: Use of a disallowed method `regex::re_unicode::Regex::is_match`\n+  --> $DIR/conf_disallowed_method.rs:10:5\n+   |\n+LL |     re.is_match(\"abc\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n+\n+error: Use of a disallowed method `core::iter::traits::iterator::Iterator::sum`\n+  --> $DIR/conf_disallowed_method.rs:12:5\n+   |\n+LL |     a.iter().sum::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a54a04b4d2c664f37f170055d7bb34d6ba0a461e", "filename": "tests/ui/disallowed_method.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisallowed_method.rs?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -0,0 +1,56 @@\n+#![warn(clippy::disallowed_method)]\n+#![allow(clippy::no_effect, clippy::many_single_char_names)]\n+\n+struct ImplStruct;\n+\n+trait Baz {\n+    fn bad_method(self);\n+}\n+\n+impl Baz for ImplStruct {\n+    fn bad_method(self) {}\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn bad_method(self) {}\n+}\n+\n+struct StaticStruct;\n+\n+trait Quux {\n+    fn bad_method();\n+}\n+\n+impl Quux for StaticStruct {\n+    fn bad_method() {}\n+}\n+\n+struct NormalStruct;\n+\n+impl NormalStruct {\n+    fn bad_method(self) {}\n+}\n+\n+struct AttrStruct {\n+    bad_method: i32,\n+}\n+\n+fn main() {\n+    let b = ImplStruct;\n+    let f = Foo;\n+    let c = ImplStruct;\n+    let n = NormalStruct;\n+    let a = AttrStruct{ bad_method: 5 };\n+\n+    // lint these\n+    b.bad_method();\n+    c.bad_method();\n+    f.bad_method();\n+    // these are good\n+    // good because not a method call (ExprKind => Call)\n+    StaticStruct::bad_method();\n+    n.bad_method();\n+    a.bad_method;\n+}"}, {"sha": "93dabf38cfcc55b2ed7bc8d2ba65a523f800ff91", "filename": "tests/ui/disallowed_method.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui%2Fdisallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1479c18396d764482aa0e56b372c5f57a97c102b/tests%2Fui%2Fdisallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisallowed_method.stderr?ref=1479c18396d764482aa0e56b372c5f57a97c102b", "patch": "@@ -0,0 +1,22 @@\n+error: Use of a disallowed method `disallowed_method::Baz::bad_method`\n+  --> $DIR/disallowed_method.rs:48:5\n+   |\n+LL |     b.bad_method();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n+\n+error: Use of a disallowed method `disallowed_method::Baz::bad_method`\n+  --> $DIR/disallowed_method.rs:49:5\n+   |\n+LL |     c.bad_method();\n+   |     ^^^^^^^^^^^^^^\n+\n+error: Use of a disallowed method `disallowed_method::Foo::bad_method`\n+  --> $DIR/disallowed_method.rs:50:5\n+   |\n+LL |     f.bad_method();\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}