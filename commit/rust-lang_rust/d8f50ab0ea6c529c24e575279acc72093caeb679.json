{"sha": "d8f50ab0ea6c529c24e575279acc72093caeb679", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZjUwYWIwZWE2YzUyOWMyNGU1NzUyNzlhY2M3MjA5M2NhZWI2Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-13T01:32:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-13T01:32:17Z"}, "message": "Auto merge of #61789 - Centril:rollup-hhyvopq, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #60376 (Stabilize Option::xor)\n - #61398 (Stabilize copy_within)\n - #61629 (Hygienize macros in the standard library)\n - #61675 (Include frame pointer for bare metal RISC-V targets)\n - #61750 (Fix x.py install)\n - #61761 (Add an alias for x86_64-sun-solaris target tuple)\n - #61762 (rustbuild: fix libtest_stamp)\n - #61763 (ci: fix ci stats upload condition)\n - #61776 (Fix typos in error_codes)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5d835ff63e67e12dd877cd2eefb3a84b2087283e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d835ff63e67e12dd877cd2eefb3a84b2087283e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8f50ab0ea6c529c24e575279acc72093caeb679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f50ab0ea6c529c24e575279acc72093caeb679", "html_url": "https://github.com/rust-lang/rust/commit/d8f50ab0ea6c529c24e575279acc72093caeb679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8f50ab0ea6c529c24e575279acc72093caeb679/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2887008e0ce0824be4e0e9562c22ea397b165c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/2887008e0ce0824be4e0e9562c22ea397b165c97", "html_url": "https://github.com/rust-lang/rust/commit/2887008e0ce0824be4e0e9562c22ea397b165c97"}, {"sha": "af281d24ca6cf3e8fe74bb7629e93f144870f0f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/af281d24ca6cf3e8fe74bb7629e93f144870f0f0", "html_url": "https://github.com/rust-lang/rust/commit/af281d24ca6cf3e8fe74bb7629e93f144870f0f0"}], "stats": {"total": 135, "additions": 67, "deletions": 68}, "files": [{"sha": "14372d47df8c3bd5aeed091e69f5bfdfd1ec703c", "filename": ".azure-pipelines/steps/run.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/.azure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/.azure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Frun.yml?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -155,6 +155,6 @@ steps:\n - bash: aws s3 cp --acl public-read cpu-usage.csv s3://$DEPLOY_BUCKET/rustc-builds/$BUILD_SOURCEVERSION/cpu-$SYSTEM_JOBNAME.csv\n   env:\n     AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)\n-  condition: contains(variables, 'AWS_SECRET_ACCESS_KEY')\n+  condition: variables['AWS_SECRET_ACCESS_KEY']\n   continueOnError: true\n   displayName: Upload CPU usage statistics"}, {"sha": "cd0a93b01150c75a257ddb822aa26bc9ecf31298", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -787,7 +787,7 @@ impl<'a> Builder<'a> {\n \n         let libtest_stamp = match cmd {\n             \"check\" | \"clippy\" | \"fix\" => check::libtest_stamp(self, cmp, target),\n-            _ => compile::libstd_stamp(self, cmp, target),\n+            _ => compile::libtest_stamp(self, cmp, target),\n         };\n \n         let librustc_stamp = match cmd {"}, {"sha": "557586709c61275af7c8658af672075aa67f8a03", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -251,7 +251,10 @@ install!((self, builder, _config),\n     };\n     Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {\n         builder.ensure(dist::Analysis {\n-            compiler: self.compiler,\n+            // Find the actual compiler (handling the full bootstrap option) which\n+            // produced the save-analysis data because that data isn't copied\n+            // through the sysroot uplifting.\n+            compiler: builder.compiler_for(builder.top_stage, builder.config.build, self.target),\n             target: self.target\n         });\n         install_analysis(builder, self.compiler.stage, self.target);"}, {"sha": "250c419c531f8030a1045b6303d5e947a4a5d6d8", "filename": "src/liballoc/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Fliballoc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Fliballoc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fmacros.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -42,7 +42,7 @@ macro_rules! vec {\n     ($($x:expr),*) => (\n         <[_]>::into_vec(box [$($x),*])\n     );\n-    ($($x:expr,)*) => (vec![$($x),*])\n+    ($($x:expr,)*) => ($crate::vec![$($x),*])\n }\n \n // HACK(japaric): with cfg(test) the inherent `[T]::into_vec` method, which is"}, {"sha": "8b44025f91f5e710f88141df83c262f13661c3af", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -6,13 +6,13 @@\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {\n     () => (\n-        panic!(\"explicit panic\")\n+        $crate::panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n         $crate::panicking::panic(&($msg, file!(), line!(), __rust_unstable_column!()))\n     });\n     ($msg:expr,) => (\n-        panic!($msg)\n+        $crate::panic!($msg)\n     );\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*),\n@@ -58,7 +58,7 @@ macro_rules! assert_eq {\n         }\n     });\n     ($left:expr, $right:expr,) => ({\n-        assert_eq!($left, $right)\n+        $crate::assert_eq!($left, $right)\n     });\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n@@ -115,7 +115,7 @@ macro_rules! assert_ne {\n         }\n     });\n     ($left:expr, $right:expr,) => {\n-        assert_ne!($left, $right)\n+        $crate::assert_ne!($left, $right)\n     };\n     ($left:expr, $right:expr, $($arg:tt)+) => ({\n         match (&($left), &($right)) {\n@@ -208,7 +208,7 @@ macro_rules! debug_assert {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n }\n \n /// Asserts that two expressions are not equal to each other.\n@@ -235,7 +235,7 @@ macro_rules! debug_assert_eq {\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n macro_rules! debug_assert_ne {\n-    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_ne!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n \n /// Unwraps a result or propagates its error.\n@@ -310,7 +310,7 @@ macro_rules! r#try {\n             return $crate::result::Result::Err($crate::convert::From::from(err))\n         }\n     });\n-    ($expr:expr,) => (r#try!($expr));\n+    ($expr:expr,) => ($crate::r#try!($expr));\n }\n \n /// Writes formatted data into a buffer.\n@@ -425,10 +425,10 @@ macro_rules! write {\n #[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n     ($dst:expr) => (\n-        write!($dst, \"\\n\")\n+        $crate::write!($dst, \"\\n\")\n     );\n     ($dst:expr,) => (\n-        writeln!($dst)\n+        $crate::writeln!($dst)\n     );\n     ($dst:expr, $($arg:tt)*) => (\n         $dst.write_fmt(format_args_nl!($($arg)*))\n@@ -494,10 +494,10 @@ macro_rules! unreachable {\n         panic!(\"internal error: entered unreachable code\")\n     });\n     ($msg:expr) => ({\n-        unreachable!(\"{}\", $msg)\n+        $crate::unreachable!(\"{}\", $msg)\n     });\n     ($msg:expr,) => ({\n-        unreachable!($msg)\n+        $crate::unreachable!($msg)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         panic!(concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)"}, {"sha": "eec4b149ddc7840e78d0dc5f7a5149c806d43fd4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -725,8 +725,6 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(option_xor)]\n-    ///\n     /// let x = Some(2);\n     /// let y: Option<u32> = None;\n     /// assert_eq!(x.xor(y), Some(2));\n@@ -744,7 +742,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.xor(y), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"option_xor\", issue = \"50512\")]\n+    #[stable(feature = \"option_xor\", since = \"1.37.0\")]\n     pub fn xor(self, optb: Option<T>) -> Option<T> {\n         match (self, optb) {\n             (Some(a), None) => Some(a),"}, {"sha": "d93e5a9ca2b6348e88f8c7e208acd810d4a4970e", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -2146,14 +2146,13 @@ impl<T> [T] {\n     /// Copying four bytes within a slice:\n     ///\n     /// ```\n-    /// # #![feature(copy_within)]\n     /// let mut bytes = *b\"Hello, World!\";\n     ///\n     /// bytes.copy_within(1..5, 8);\n     ///\n     /// assert_eq!(&bytes, b\"Hello, Wello!\");\n     /// ```\n-    #[unstable(feature = \"copy_within\", issue = \"54236\")]\n+    #[stable(feature = \"copy_within\", since = \"1.37.0\")]\n     pub fn copy_within<R: ops::RangeBounds<usize>>(&mut self, src: R, dest: usize)\n     where\n         T: Copy,\n@@ -2178,8 +2177,8 @@ impl<T> [T] {\n         assert!(dest <= self.len() - count, \"dest is out of bounds\");\n         unsafe {\n             ptr::copy(\n-                self.get_unchecked(src_start),\n-                self.get_unchecked_mut(dest),\n+                self.as_ptr().add(src_start),\n+                self.as_mut_ptr().add(dest),\n                 count,\n             );\n         }"}, {"sha": "bf072a9243b5107b5e9cea84be5b66baebaedfe7", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -28,7 +28,6 @@\n #![feature(inner_deref)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n-#![feature(copy_within)]\n #![feature(int_error_matching)]\n #![feature(const_fn)]\n #![warn(rust_2018_idioms)]"}, {"sha": "eaa799fa96ee2d5abc0b9f8c05db5b2106299a59", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -1512,6 +1512,13 @@ fn test_copy_within() {\n     let mut bytes = *b\"Hello, World!\";\n     bytes.copy_within(.., 0);\n     assert_eq!(&bytes, b\"Hello, World!\");\n+\n+    // Ensure that copying at the end of slice won't cause UB.\n+    let mut bytes = *b\"Hello, World!\";\n+    bytes.copy_within(13..13, 5);\n+    assert_eq!(&bytes, b\"Hello, World!\");\n+    bytes.copy_within(5..5, 13);\n+    assert_eq!(&bytes, b\"Hello, World!\");\n }\n \n #[test]\n@@ -1536,6 +1543,13 @@ fn test_copy_within_panics_src_inverted() {\n     // 2 is greater than 1, so this range is invalid.\n     bytes.copy_within(2..1, 0);\n }\n+#[test]\n+#[should_panic(expected = \"attempted to index slice up to maximum usize\")]\n+fn test_copy_within_panics_src_out_of_bounds() {\n+    let mut bytes = *b\"Hello, World!\";\n+    // an inclusive range ending at usize::max_value() would make src_end overflow\n+    bytes.copy_within(usize::max_value()..=usize::max_value(), 0);\n+}\n \n #[test]\n fn test_is_sorted() {"}, {"sha": "65821d8dd8379b61661bc93256dbe1cb9c7d5346", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -1883,7 +1883,7 @@ This pattern should be rewritten. There are a few possible ways to do this:\n     # }\n     ```\n \n-The same applies to transmutes to `*mut fn()`, which were observedin practice.\n+The same applies to transmutes to `*mut fn()`, which were observed in practice.\n Note though that use of this type is generally incorrect.\n The intention is typically to describe a function pointer, but just `fn()`\n alone suffices for that. `*mut fn()` is a pointer to a fn pointer."}, {"sha": "42ba49ba2b8dbe1e54a77e37480c30492497c654", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -268,16 +268,16 @@ pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n pub type TargetResult = Result<Target, String>;\n \n macro_rules! supported_targets {\n-    ( $(($triple:expr, $module:ident),)+ ) => (\n-        $(mod $module;)*\n+    ( $(($( $triple:literal, )+ $module:ident ),)+ ) => {\n+        $(mod $module;)+\n \n         /// List of supported targets\n-        const TARGETS: &[&str] = &[$($triple),*];\n+        const TARGETS: &[&str] = &[$($($triple),+),+];\n \n         fn load_specific(target: &str) -> Result<Target, LoadTargetError> {\n             match target {\n                 $(\n-                    $triple => {\n+                    $($triple)|+ => {\n                         let mut t = $module::target()\n                             .map_err(LoadTargetError::Other)?;\n                         t.options.is_builtin = true;\n@@ -307,7 +307,7 @@ macro_rules! supported_targets {\n         mod test_json_encode_decode {\n             use serialize::json::ToJson;\n             use super::Target;\n-            $(use super::$module;)*\n+            $(use super::$module;)+\n \n             $(\n                 #[test]\n@@ -322,9 +322,9 @@ macro_rules! supported_targets {\n                         assert_eq!(original, parsed);\n                     });\n                 }\n-            )*\n+            )+\n         }\n-    )\n+    };\n }\n \n supported_targets! {\n@@ -426,7 +426,9 @@ supported_targets! {\n     (\"armv7r-none-eabi\", armv7r_none_eabi),\n     (\"armv7r-none-eabihf\", armv7r_none_eabihf),\n \n-    (\"x86_64-sun-solaris\", x86_64_sun_solaris),\n+    // `x86_64-pc-solaris` is an alias for `x86_64_sun_solaris` for backwards compatibility reasons.\n+    // (See <https://github.com/rust-lang/rust/issues/40531>.)\n+    (\"x86_64-sun-solaris\", \"x86_64-pc-solaris\", x86_64_sun_solaris),\n     (\"sparcv9-sun-solaris\", sparcv9_sun_solaris),\n \n     (\"x86_64-pc-windows-gnu\", x86_64_pc_windows_gnu),"}, {"sha": "8a97a09bb60aa5c71f5c2b5ac238ccc868bcc156", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n             relocation_model: \"static\".to_string(),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n+            eliminate_frame_pointer: false,\n             .. Default::default()\n         },\n     })"}, {"sha": "647d33e3ffeeed91ea49ab8ca96f63b37f979e7d", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> TargetResult {\n             relocation_model: \"static\".to_string(),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n+            eliminate_frame_pointer: false,\n             .. Default::default()\n         },\n     })"}, {"sha": "a5c13fa28e2cedeefb09ec45aeec77d0951d6191", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n             relocation_model: \"static\".to_string(),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n+            eliminate_frame_pointer: false,\n             .. Default::default()\n         },\n     })"}, {"sha": "237d615ffcc4b6cd463df06c19f2b88d1cb4abc6", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n             relocation_model: \"static\".to_string(),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n+            eliminate_frame_pointer: false,\n             .. Default::default()\n         },\n     })"}, {"sha": "ef1b549d1dcf4db4d467316b8236f596bf8ce5e4", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -56,13 +56,13 @@\n #[allow_internal_unstable(__rust_unstable_column, libstd_sys_internals)]\n macro_rules! panic {\n     () => ({\n-        panic!(\"explicit panic\")\n+        $crate::panic!(\"explicit panic\")\n     });\n     ($msg:expr) => ({\n         $crate::rt::begin_panic($msg, &(file!(), line!(), __rust_unstable_column!()))\n     });\n     ($msg:expr,) => ({\n-        panic!($msg)\n+        $crate::panic!($msg)\n     });\n     ($fmt:expr, $($arg:tt)+) => ({\n         $crate::rt::begin_panic_fmt(&format_args!($fmt, $($arg)+),\n@@ -145,7 +145,7 @@ macro_rules! print {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! println {\n-    () => (print!(\"\\n\"));\n+    () => ($crate::print!(\"\\n\"));\n     ($($arg:tt)*) => ({\n         $crate::io::_print(format_args_nl!($($arg)*));\n     })\n@@ -204,7 +204,7 @@ macro_rules! eprint {\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! eprintln {\n-    () => (eprint!(\"\\n\"));\n+    () => ($crate::eprint!(\"\\n\"));\n     ($($arg:tt)*) => ({\n         $crate::io::_eprint(format_args_nl!($($arg)*));\n     })\n@@ -337,23 +337,23 @@ macro_rules! eprintln {\n #[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     () => {\n-        eprintln!(\"[{}:{}]\", file!(), line!());\n+        $crate::eprintln!(\"[{}:{}]\", file!(), line!());\n     };\n     ($val:expr) => {\n         // Use of `match` here is intentional because it affects the lifetimes\n         // of temporaries - https://stackoverflow.com/a/48732525/1063961\n         match $val {\n             tmp => {\n-                eprintln!(\"[{}:{}] {} = {:#?}\",\n+                $crate::eprintln!(\"[{}:{}] {} = {:#?}\",\n                     file!(), line!(), stringify!($val), &tmp);\n                 tmp\n             }\n         }\n     };\n     // Trailing comma with single argument is ignored\n-    ($val:expr,) => { dbg!($val) };\n+    ($val:expr,) => { $crate::dbg!($val) };\n     ($($val:expr),+ $(,)?) => {\n-        ($(dbg!($val)),+,)\n+        ($($crate::dbg!($val)),+,)\n     };\n }\n "}, {"sha": "9ea56271f593fa244dc88a57907b90e9f4a97b62", "filename": "src/test/ui/explain.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fexplain.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fexplain.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.stdout?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -53,7 +53,7 @@ This pattern should be rewritten. There are a few possible ways to do this:\n     let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n     ```\n \n-The same applies to transmutes to `*mut fn()`, which were observedin practice.\n+The same applies to transmutes to `*mut fn()`, which were observed in practice.\n Note though that use of this type is generally incorrect.\n The intention is typically to describe a function pointer, but just `fn()`\n alone suffices for that. `*mut fn()` is a pointer to a fn pointer."}, {"sha": "890c8307543f337266f113734da2784e3be16a47", "filename": "src/test/ui/hygiene/no_implicit_prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -13,7 +13,7 @@ mod bar {\n     }\n     fn f() {\n         ::foo::m!();\n-        println!(); //~ ERROR cannot find macro `print!` in this scope\n+        assert_eq!(0, 0); //~ ERROR cannot find macro `panic!` in this scope\n     }\n }\n "}, {"sha": "737b375ed89712d26cccfaa7fb0705ac9b2abfb1", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -7,11 +7,11 @@ LL |     fn f() { ::bar::m!(); }\n LL |         Vec::new();\n    |         ^^^ use of undeclared type or module `Vec`\n \n-error: cannot find macro `print!` in this scope\n+error: cannot find macro `panic!` in this scope\n   --> $DIR/no_implicit_prelude.rs:16:9\n    |\n-LL |         println!();\n-   |         ^^^^^^^^^^^\n+LL |         assert_eq!(0, 0);\n+   |         ^^^^^^^^^^^^^^^^^\n    |\n    = help: have you added the `#[macro_use]` on the module/import?\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "29e9b8ec841f54661233112fcbb236606490a9df", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -33,7 +33,6 @@ mod inner2 {\n \n fn main() {\n     panic!(); //~ ERROR `panic` is ambiguous\n-              //~| ERROR `panic` is ambiguous\n }\n \n mod inner3 {"}, {"sha": "13d3227d8b38f3283c0919e9e81f5bee963648f8", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -22,7 +22,7 @@ LL | use inner1::*;\n    = help: consider adding an explicit import of `exported` to disambiguate\n \n error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n+  --> $DIR/local-modularized-tricky-fail-1.rs:46:1\n    |\n LL | include!();\n    | ^^^^^^^ ambiguous name\n@@ -59,26 +59,6 @@ LL |       define_panic!();\n    |       ---------------- in this macro invocation\n    = help: use `crate::panic` to refer to this macro unambiguously\n \n-error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/local-modularized-tricky-fail-1.rs:35:5\n-   |\n-LL |     panic!();\n-   |     ^^^^^^^^^ ambiguous name\n-   |\n-   = note: `panic` could refer to a macro from prelude\n-note: `panic` could also refer to the macro defined here\n-  --> $DIR/local-modularized-tricky-fail-1.rs:11:5\n-   |\n-LL | /     macro_rules! panic {\n-LL | |         () => ()\n-LL | |     }\n-   | |_____^\n-...\n-LL |       define_panic!();\n-   |       ---------------- in this macro invocation\n-   = help: use `crate::panic` to refer to this macro unambiguously\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}, {"sha": "b6e087c3844fa040efd5878c1c445e761f2d1a4f", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f50ab0ea6c529c24e575279acc72093caeb679/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=d8f50ab0ea6c529c24e575279acc72093caeb679", "patch": "@@ -118,6 +118,7 @@ static TARGETS: &[&str] = &[\n     \"x86_64-pc-windows-msvc\",\n     \"x86_64-rumprun-netbsd\",\n     \"x86_64-sun-solaris\",\n+    \"x86_64-pc-solaris\",\n     \"x86_64-unknown-cloudabi\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-linux-gnu\","}]}