{"sha": "fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZDc2YjRkM2M4YzFiNmNjN2RiM2QwZWQxYTE3YmY0NWM1MTgxOGY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-01T13:14:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-01T13:14:13Z"}, "message": "Rollup merge of #53782 - rask:task/arc-docs-adjustment, r=cramertj\n\nMake Arc cloning mechanics clearer in module docs\n\nAdd some more wording to module documentation regarding how\n`Arc::clone()` works, as some users have assumed cloning Arc's\nto work via dereferencing to inner value as follows:\n\n    use std::sync::Arc;\n\n    let myarc = Arc::new(1);\n    let myarcref = myarc.clone();\n\n    assert!(1 == myarcref);\n\nInstead of the actual mechanic of referencing the existing\nArc value:\n\n    use std::sync::Arg;\n\n    let myarc = Arc::new(1);\n    let myarcref = myarc.clone();\n\n    assert!(myarcref == &myarc); // not sure if assert could assert this in the real world", "tree": {"sha": "4ff7406b095558bebb1bc721cb79d5e1f094eb66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff7406b095558bebb1bc721cb79d5e1f094eb66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbipClCRBK7hj4Ov3rIwAAdHIIAIWAI32OjCS9jiByp9fjWN+o\n/2YO2u7Y7eI9sbB+w76w0JTuwzv6X/McgACyeKkfHGQNosN1VJur/3aqkF2W9u3p\nwQvCav5FwRfhNwHF6eIXcZmuAGtl4KNK6DQOuCkopYp1ali5Fpuf7oZ/xF5Zt1LV\nLS9Qa2ASZ9sv+WCAw6dAKNv3RZPYNJGgX1d35KdxnfBsp3jDNjAkLPXECsc0BkWD\npXaWJ8ipuLElA3Lea3V7p7pkbRl+CwkZ6k1GsJv7KxhKMnYxS5o/VWnPpPA2d1TJ\nvCiYHDo0mJtdDrjW72nU1G3UYavNzyVVWCGccSuEE0717IetzJ9z6jBt+abjPTw=\n=ATDH\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ff7406b095558bebb1bc721cb79d5e1f094eb66\nparent 8d161a668214e409114761427b540549d775b4fa\nparent bf7e324e4e610b1f12971e601073ccfd6f197fff\nauthor kennytm <kennytm@gmail.com> 1535807653 +0800\ncommitter GitHub <noreply@github.com> 1535807653 +0800\n\nRollup merge of #53782 - rask:task/arc-docs-adjustment, r=cramertj\n\nMake Arc cloning mechanics clearer in module docs\n\nAdd some more wording to module documentation regarding how\n`Arc::clone()` works, as some users have assumed cloning Arc's\nto work via dereferencing to inner value as follows:\n\n    use std::sync::Arc;\n\n    let myarc = Arc::new(1);\n    let myarcref = myarc.clone();\n\n    assert!(1 == myarcref);\n\nInstead of the actual mechanic of referencing the existing\nArc value:\n\n    use std::sync::Arg;\n\n    let myarc = Arc::new(1);\n    let myarcref = myarc.clone();\n\n    assert!(myarcref == &myarc); // not sure if assert could assert this in the real world\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f", "html_url": "https://github.com/rust-lang/rust/commit/fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d161a668214e409114761427b540549d775b4fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d161a668214e409114761427b540549d775b4fa", "html_url": "https://github.com/rust-lang/rust/commit/8d161a668214e409114761427b540549d775b4fa"}, {"sha": "bf7e324e4e610b1f12971e601073ccfd6f197fff", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7e324e4e610b1f12971e601073ccfd6f197fff", "html_url": "https://github.com/rust-lang/rust/commit/bf7e324e4e610b1f12971e601073ccfd6f197fff"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "db7a4044b267f7eedc0cecf47473790d73e4adbf", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=fcd76b4d3c8c1b6cc7db3d0ed1a17bf45c51818f", "patch": "@@ -49,9 +49,10 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///\n /// The type `Arc<T>` provides shared ownership of a value of type `T`,\n /// allocated in the heap. Invoking [`clone`][clone] on `Arc` produces\n-/// a new pointer to the same value in the heap. When the last `Arc`\n-/// pointer to a given value is destroyed, the pointed-to value is\n-/// also destroyed.\n+/// a new `Arc` instance, which points to the same value on the heap as the\n+/// source `Arc`, while increasing a reference count. When the last `Arc`\n+/// pointer to a given value is destroyed, the pointed-to value is also\n+/// destroyed.\n ///\n /// Shared references in Rust disallow mutation by default, and `Arc` is no\n /// exception: you cannot generally obtain a mutable reference to something\n@@ -107,7 +108,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// // The two syntaxes below are equivalent.\n /// let a = foo.clone();\n /// let b = Arc::clone(&foo);\n-/// // a and b both point to the same memory location as foo.\n+/// // a, b, and foo are all Arcs that point to the same memory location\n /// ```\n ///\n /// The [`Arc::clone(&from)`] syntax is the most idiomatic because it conveys more explicitly"}]}