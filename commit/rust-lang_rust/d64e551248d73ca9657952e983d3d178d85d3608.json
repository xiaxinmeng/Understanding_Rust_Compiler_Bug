{"sha": "d64e551248d73ca9657952e983d3d178d85d3608", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGU1NTEyNDhkNzNjYTk2NTc5NTJlOTgzZDNkMTc4ZDg1ZDM2MDg=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-11-03T16:34:11Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-11-12T05:16:57Z"}, "message": "libsyntax: deny warnings in doctests", "tree": {"sha": "11dcbfcc63cac5274f3cd92bdbe7af1d19b863f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11dcbfcc63cac5274f3cd92bdbe7af1d19b863f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64e551248d73ca9657952e983d3d178d85d3608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64e551248d73ca9657952e983d3d178d85d3608", "html_url": "https://github.com/rust-lang/rust/commit/d64e551248d73ca9657952e983d3d178d85d3608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64e551248d73ca9657952e983d3d178d85d3608/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17f81b4b796123aa4e204145cca870fa270cf81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17f81b4b796123aa4e204145cca870fa270cf81", "html_url": "https://github.com/rust-lang/rust/commit/a17f81b4b796123aa4e204145cca870fa270cf81"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "36199cef23a3efe8d0398e5279b37bfaa1b0a533", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64e551248d73ca9657952e983d3d178d85d3608/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d64e551248d73ca9657952e983d3d178d85d3608/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=d64e551248d73ca9657952e983d3d178d85d3608", "patch": "@@ -26,7 +26,7 @@ TEST_TARGET_CRATES = $(filter-out core rustc_unicode alloc_system libc \\\n \t\t     \t\t  alloc_jemalloc,$(TARGET_CRATES)) \\\n \t\t\tcollectionstest coretest\n TEST_DOC_CRATES = $(DOC_CRATES) arena flate fmt_macros getopts graphviz \\\n-                log rand rbml serialize\n+                log rand rbml serialize syntax\n TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve \\\n \t\t   \t\trustc_trans rustc_lint,\\\n                      $(HOST_CRATES))"}, {"sha": "1f34af617d588e409501a8b85cb7012c00f82c4a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d64e551248d73ca9657952e983d3d178d85d3608", "patch": "@@ -908,13 +908,15 @@ pub enum Expr_ {\n /// separately. `position` represents the index of the associated\n /// item qualified with this Self type.\n ///\n-///     <Vec<T> as a::b::Trait>::AssociatedItem\n-///      ^~~~~     ~~~~~~~~~~~~~~^\n-///      ty        position = 3\n+/// ```ignore\n+/// <Vec<T> as a::b::Trait>::AssociatedItem\n+///  ^~~~~     ~~~~~~~~~~~~~~^\n+///  ty        position = 3\n ///\n-///     <Vec<T>>::AssociatedItem\n-///      ^~~~~    ^\n-///      ty       position = 0\n+/// <Vec<T>>::AssociatedItem\n+///  ^~~~~    ^\n+///  ty       position = 0\n+/// ```\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct QSelf {\n     pub ty: P<Ty>,"}, {"sha": "5a0fc4fda0ccac065a80812dc6b820125e4abb3d", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d64e551248d73ca9657952e983d3d178d85d3608", "patch": "@@ -54,6 +54,7 @@\n //! following snippet\n //!\n //! ```rust\n+//! # #![allow(dead_code)]\n //! struct A { x : i32 }\n //!\n //! struct B(i32);\n@@ -88,7 +89,7 @@\n //!\n //! ```rust\n //! trait PartialEq {\n-//!     fn eq(&self, other: &Self);\n+//!     fn eq(&self, other: &Self) -> bool;\n //! }\n //! impl PartialEq for i32 {\n //!     fn eq(&self, other: &i32) -> bool {\n@@ -905,7 +906,7 @@ impl<'a> MethodDef<'a> {\n         })\n     }\n \n-    /// ```\n+    /// ```ignore\n     /// #[derive(PartialEq)]\n     /// struct A { x: i32, y: i32 }\n     ///\n@@ -1010,7 +1011,7 @@ impl<'a> MethodDef<'a> {\n                                       &StaticStruct(struct_def, summary))\n     }\n \n-    /// ```\n+    /// ```ignore\n     /// #[derive(PartialEq)]\n     /// enum A {\n     ///     A1,\n@@ -1596,7 +1597,7 @@ pub fn cs_fold<F>(use_foldl: bool,\n /// Call the method that is being derived on all the fields, and then\n /// process the collected results. i.e.\n ///\n-/// ```\n+/// ```ignore\n /// f(cx, span, vec![self_1.method(__arg_1_1, __arg_2_1),\n ///                  self_2.method(__arg_1_2, __arg_2_2)])\n /// ```"}, {"sha": "af0e7ce5c8d368a2030de2ac301d52ed1ccb2064", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=d64e551248d73ca9657952e983d3d178d85d3608", "patch": "@@ -77,9 +77,10 @@ struct Context<'a, 'b:'a> {\n /// expressions.\n ///\n /// If parsing succeeds, the return value is:\n-///\n-///     Some((fmtstr, unnamed arguments, ordering of named arguments,\n-///           named arguments))\n+/// ```ignore\n+/// Some((fmtstr, unnamed arguments, ordering of named arguments,\n+///       named arguments))\n+/// ```\n fn parse_args(ecx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n               -> Option<(P<ast::Expr>, Vec<P<ast::Expr>>, Vec<String>,\n                          HashMap<String, P<ast::Expr>>)> {"}, {"sha": "295c3e05bc012ebf893dc8b24c0c4994eb35893d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=d64e551248d73ca9657952e983d3d178d85d3608", "patch": "@@ -23,7 +23,8 @@\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       test(attr(deny(warnings))))]\n \n #![feature(associated_consts)]\n #![feature(drain)]"}, {"sha": "1e38eebec5d635f86e7cd3d35dae16f2765e2129", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d64e551248d73ca9657952e983d3d178d85d3608", "patch": "@@ -3965,7 +3965,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses an optional `where` clause and places it in `generics`.\n     ///\n-    /// ```\n+    /// ```ignore\n     /// where T : Trait<U, V> + 'b, 'a : 'b\n     /// ```\n     pub fn parse_where_clause(&mut self) -> PResult<ast::WhereClause> {"}, {"sha": "cbbd5289a5a2d5415a846ebfa050725f96aeac85", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64e551248d73ca9657952e983d3d178d85d3608/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=d64e551248d73ca9657952e983d3d178d85d3608", "patch": "@@ -11,8 +11,10 @@\n //! This pretty-printer is a direct reimplementation of Philip Karlton's\n //! Mesa pretty-printer, as described in appendix A of\n //!\n-//!     STAN-CS-79-770: \"Pretty Printing\", by Derek C. Oppen.\n-//!     Stanford Department of Computer Science, 1979.\n+//! ````ignore\n+//! STAN-CS-79-770: \"Pretty Printing\", by Derek C. Oppen.\n+//! Stanford Department of Computer Science, 1979.\n+//! ````\n //!\n //! The algorithm's aim is to break a stream into as few lines as possible\n //! while respecting the indentation-consistency requirements of the enclosing"}]}