{"sha": "bb73ea670296e5a633310c7c5a6e3852928a4383", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNzNlYTY3MDI5NmU1YTYzMzMxMGM3YzVhNmUzODUyOTI4YTQzODM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-21T18:44:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-21T18:44:13Z"}, "message": "Rollup merge of #79231 - wusyong:issue-79137, r=lcnr\n\nExhaustively match in variant count instrinsic\n\nFix #79137", "tree": {"sha": "366587cd87690c73dda85a2657633710db1a11f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/366587cd87690c73dda85a2657633710db1a11f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb73ea670296e5a633310c7c5a6e3852928a4383", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfuV/9CRBK7hj4Ov3rIwAAdHIIAIiXubZPOm162NVPIB6G2OGF\n6bhldiQ/kJ4pU4VhtfFTYMiZKavUyrqCS+R7hbZ8aop7Adk/VQjs7Eq0LPGTycj4\nbXxSWFEkcOsjk0LynMhYxiW4EqYqS+nWlwcUKgrSsZcPmqzW/EpJCiTiF/OrkDZQ\nMrsYamCFHsiTqkUVwImGJ2n+GdsnaHC7yZz4NVLtP5grOSMWIriG67GVOI7WCBkF\ndUqVxniTbBW1q+QWrm4bup2V6uBkfirOzUb70uaDXJIlbStiZ5gNpxz0G5KRJrBa\nlmJr5/TZcSDCf0XMHK2CPgdnDxeRHy/iwZBmUTy4Io1cMAlZ/smyBSMHQUpbG4Q=\n=BpJZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 366587cd87690c73dda85a2657633710db1a11f3\nparent 5d428cae7d5926d5b53098436ebcc53d0dadb228\nparent bc43380297c38f8cc888ce3e92fe20de9afbe50e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605984253 +0100\ncommitter GitHub <noreply@github.com> 1605984253 +0100\n\nRollup merge of #79231 - wusyong:issue-79137, r=lcnr\n\nExhaustively match in variant count instrinsic\n\nFix #79137\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb73ea670296e5a633310c7c5a6e3852928a4383", "html_url": "https://github.com/rust-lang/rust/commit/bb73ea670296e5a633310c7c5a6e3852928a4383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb73ea670296e5a633310c7c5a6e3852928a4383/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d428cae7d5926d5b53098436ebcc53d0dadb228", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d428cae7d5926d5b53098436ebcc53d0dadb228", "html_url": "https://github.com/rust-lang/rust/commit/5d428cae7d5926d5b53098436ebcc53d0dadb228"}, {"sha": "bc43380297c38f8cc888ce3e92fe20de9afbe50e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc43380297c38f8cc888ce3e92fe20de9afbe50e", "html_url": "https://github.com/rust-lang/rust/commit/bc43380297c38f8cc888ce3e92fe20de9afbe50e"}], "stats": {"total": 88, "additions": 81, "deletions": 7}, "files": [{"sha": "f666a89ca56decd9af79427d36d37ed196b59af6", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bb73ea670296e5a633310c7c5a6e3852928a4383/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb73ea670296e5a633310c7c5a6e3852928a4383/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=bb73ea670296e5a633310c7c5a6e3852928a4383", "patch": "@@ -75,13 +75,35 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             ensure_monomorphic_enough(tcx, tp_ty)?;\n             ConstValue::from_u64(tcx.type_id_hash(tp_ty))\n         }\n-        sym::variant_count => {\n-            if let ty::Adt(ref adt, _) = tp_ty.kind() {\n-                ConstValue::from_machine_usize(adt.variants.len() as u64, &tcx)\n-            } else {\n-                ConstValue::from_machine_usize(0u64, &tcx)\n-            }\n-        }\n+        sym::variant_count => match tp_ty.kind() {\n+            ty::Adt(ref adt, _) => ConstValue::from_machine_usize(adt.variants.len() as u64, &tcx),\n+            ty::Projection(_)\n+            | ty::Opaque(_, _)\n+            | ty::Param(_)\n+            | ty::Bound(_, _)\n+            | ty::Placeholder(_)\n+            | ty::Infer(_) => throw_inval!(TooGeneric),\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Foreign(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Dynamic(_, _)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Error(_) => ConstValue::from_machine_usize(0u64, &tcx),\n+        },\n         other => bug!(\"`{}` is not a zero arg intrinsic\", other),\n     })\n }"}, {"sha": "58e0c387ffb9c19cd245747a1e31062f715cb835", "filename": "src/test/ui/consts/issue-79137-monomorphic.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb73ea670296e5a633310c7c5a6e3852928a4383/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb73ea670296e5a633310c7c5a6e3852928a4383/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-monomorphic.rs?ref=bb73ea670296e5a633310c7c5a6e3852928a4383", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+// Verify that variant count intrinsic can still evaluate for types like `Option<T>`.\n+\n+#![feature(variant_count)]\n+\n+pub struct GetVariantCount<T>(T);\n+\n+impl<T> GetVariantCount<T> {\n+    pub const VALUE: usize = std::mem::variant_count::<T>();\n+}\n+\n+const fn check_variant_count<T>() -> bool {\n+    matches!(GetVariantCount::<Option<T>>::VALUE, GetVariantCount::<Option<()>>::VALUE)\n+}\n+\n+fn main() {\n+    assert!(check_variant_count::<()>());\n+}"}, {"sha": "456035458cfc562945722ec16509d346a650bd65", "filename": "src/test/ui/consts/issue-79137-toogeneric.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb73ea670296e5a633310c7c5a6e3852928a4383/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb73ea670296e5a633310c7c5a6e3852928a4383/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.rs?ref=bb73ea670296e5a633310c7c5a6e3852928a4383", "patch": "@@ -0,0 +1,19 @@\n+// Test that `variant_count` only gets evaluated once the type is concrete enough.\n+\n+#![feature(variant_count)]\n+\n+pub struct GetVariantCount<T>(T);\n+\n+impl<T> GetVariantCount<T> {\n+    pub const VALUE: usize = std::mem::variant_count::<T>();\n+}\n+\n+const fn check_variant_count<T>() -> bool {\n+    matches!(GetVariantCount::<T>::VALUE, GetVariantCount::<T>::VALUE)\n+    //~^ ERROR constant pattern depends on a generic parameter\n+    //~| ERROR constant pattern depends on a generic parameter\n+}\n+\n+fn main() {\n+    assert!(check_variant_count::<Option<()>>());\n+}"}, {"sha": "579e6aa09bdbd34a250b7a5a8eee3c9c07b36a5a", "filename": "src/test/ui/consts/issue-79137-toogeneric.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb73ea670296e5a633310c7c5a6e3852928a4383/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb73ea670296e5a633310c7c5a6e3852928a4383/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79137-toogeneric.stderr?ref=bb73ea670296e5a633310c7c5a6e3852928a4383", "patch": "@@ -0,0 +1,14 @@\n+error: constant pattern depends on a generic parameter\n+  --> $DIR/issue-79137-toogeneric.rs:12:43\n+   |\n+LL |     matches!(GetVariantCount::<T>::VALUE, GetVariantCount::<T>::VALUE)\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: constant pattern depends on a generic parameter\n+  --> $DIR/issue-79137-toogeneric.rs:12:43\n+   |\n+LL |     matches!(GetVariantCount::<T>::VALUE, GetVariantCount::<T>::VALUE)\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}