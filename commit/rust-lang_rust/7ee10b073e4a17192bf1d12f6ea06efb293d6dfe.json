{"sha": "7ee10b073e4a17192bf1d12f6ea06efb293d6dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZTEwYjA3M2U0YTE3MTkyYmYxZDEyZjZlYTA2ZWZiMjkzZDZkZmU=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-23T12:58:02Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-23T12:58:02Z"}, "message": "Restore folding import groups", "tree": {"sha": "114313c46f4e0cda34d9fe872ac2271e431b1c98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/114313c46f4e0cda34d9fe872ac2271e431b1c98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee10b073e4a17192bf1d12f6ea06efb293d6dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee10b073e4a17192bf1d12f6ea06efb293d6dfe", "html_url": "https://github.com/rust-lang/rust/commit/7ee10b073e4a17192bf1d12f6ea06efb293d6dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee10b073e4a17192bf1d12f6ea06efb293d6dfe/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e514084f281840f117bd92fdb177d81e3cc95ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e514084f281840f117bd92fdb177d81e3cc95ba2", "html_url": "https://github.com/rust-lang/rust/commit/e514084f281840f117bd92fdb177d81e3cc95ba2"}], "stats": {"total": 103, "additions": 97, "deletions": 6}, "files": [{"sha": "8b79ea874b162bcad890c8a3c5d635724f1dc5cd", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 97, "deletions": 6, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/7ee10b073e4a17192bf1d12f6ea06efb293d6dfe/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee10b073e4a17192bf1d12f6ea06efb293d6dfe/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=7ee10b073e4a17192bf1d12f6ea06efb293d6dfe", "patch": "@@ -21,6 +21,7 @@ pub struct Fold {\n pub fn folding_ranges(file: &File) -> Vec<Fold> {\n     let mut res = vec![];\n     let mut visited_comments = FxHashSet::default();\n+    let mut visited_imports = FxHashSet::default();\n \n     for node in file.syntax().descendants() {\n         // Fold items that span multiple lines\n@@ -33,18 +34,25 @@ pub fn folding_ranges(file: &File) -> Vec<Fold> {\n             }\n         }\n \n-        // Also fold groups of comments\n-        if visited_comments.contains(&node) {\n-            continue;\n-        }\n-        if node.kind() == COMMENT {\n+        // Fold groups of comments\n+        if node.kind() == COMMENT && !visited_comments.contains(&node) {\n             if let Some(range) = contiguous_range_for_comment(node, &mut visited_comments) {\n                 res.push(Fold {\n                     range,\n                     kind: FoldKind::Comment,\n                 })\n             }\n         }\n+\n+        // Fold groups of imports\n+        if node.kind() == USE_ITEM && !visited_imports.contains(&node) {\n+            if let Some(range) = contiguous_range_for_group(node, &mut visited_imports) {\n+                res.push(Fold {\n+                    range,\n+                    kind: FoldKind::Imports,\n+                })\n+            }\n+        }\n     }\n \n     res\n@@ -74,6 +82,44 @@ fn has_newline(node: SyntaxNodeRef) -> bool {\n     false\n }\n \n+fn contiguous_range_for_group<'a>(\n+    first: SyntaxNodeRef<'a>,\n+    visited: &mut FxHashSet<SyntaxNodeRef<'a>>,\n+) -> Option<TextRange> {\n+    visited.insert(first);\n+\n+    let mut last = first;\n+    for node in first.siblings(Direction::Next) {\n+        if let Some(ws) = ast::Whitespace::cast(node) {\n+            // There is a blank line, which means that the group ends here\n+            if ws.count_newlines_lazy().take(2).count() == 2 {\n+                break;\n+            }\n+\n+            // Ignore whitespace without blank lines\n+            continue;\n+        }\n+\n+        // Stop if we find a node that doesn't belong to the group\n+        if node.kind() != first.kind() {\n+            break;\n+        }\n+\n+        visited.insert(node);\n+        last = node;\n+    }\n+\n+    if first != last {\n+        Some(TextRange::from_to(\n+            first.range().start(),\n+            last.range().end(),\n+        ))\n+    } else {\n+        // The group consists of only one element, therefore it cannot be folded\n+        None\n+    }\n+}\n+\n fn contiguous_range_for_comment<'a>(\n     first: SyntaxNodeRef<'a>,\n     visited: &mut FxHashSet<SyntaxNodeRef<'a>>,\n@@ -128,7 +174,8 @@ mod tests {\n         let file = File::parse(&text);\n         let folds = folding_ranges(&file);\n \n-        assert_eq!(folds.len(), ranges.len());\n+        assert_eq!(folds.len(), ranges.len(), \"The amount of folds is different than the expected amount\");\n+        assert_eq!(folds.len(), fold_kinds.len(), \"The amount of fold kinds is different than the expected amount\");\n         for ((fold, range), fold_kind) in folds\n             .into_iter()\n             .zip(ranges.into_iter())\n@@ -186,4 +233,48 @@ fn main() {\n         do_check(text, folds);\n     }\n \n+    #[test]\n+    fn test_fold_import_groups() {\n+        let text = r#\"\n+<|>use std::str;\n+use std::vec;\n+use std::io as iop;<|>\n+\n+<|>use std::mem;\n+use std::f64;<|>\n+\n+use std::collections::HashMap;\n+// Some random comment\n+use std::collections::VecDeque;\n+\n+fn main() {\n+}\"#;\n+\n+        let folds = &[FoldKind::Imports, FoldKind::Imports];\n+        do_check(text, folds);\n+    }\n+\n+    #[test]\n+    fn test_fold_import_and_groups() {\n+        let text = r#\"\n+<|>use std::str;\n+use std::vec;\n+use std::io as iop;<|>\n+\n+<|>use std::mem;\n+use std::f64;<|>\n+\n+<|>use std::collections::{\n+    HashMap,\n+    VecDeque,\n+};<|>\n+// Some random comment\n+\n+fn main() {\n+}\"#;\n+\n+        let folds = &[FoldKind::Imports, FoldKind::Imports, FoldKind::Imports];\n+        do_check(text, folds);\n+    }\n+\n }"}]}