{"sha": "95500c078bec0082fe0e4f3e20d962d436a0e099", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTAwYzA3OGJlYzAwODJmZTBlNGYzZTIwZDk2MmQ0MzZhMGUwOTk=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-02-20T21:26:35Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2019-02-28T22:07:45Z"}, "message": "refactor: combine item count numbers into a new struct", "tree": {"sha": "2906fdd3bed8def40dccf539531a35971629eeb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2906fdd3bed8def40dccf539531a35971629eeb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95500c078bec0082fe0e4f3e20d962d436a0e099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95500c078bec0082fe0e4f3e20d962d436a0e099", "html_url": "https://github.com/rust-lang/rust/commit/95500c078bec0082fe0e4f3e20d962d436a0e099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95500c078bec0082fe0e4f3e20d962d436a0e099/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9459351c0136715089f9e9d96f57fed2c80a52", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9459351c0136715089f9e9d96f57fed2c80a52", "html_url": "https://github.com/rust-lang/rust/commit/fc9459351c0136715089f9e9d96f57fed2c80a52"}], "stats": {"total": 86, "additions": 57, "deletions": 29}, "files": [{"sha": "cb6d180fbd3b47570752cf003432ae30de3db8ad", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 57, "deletions": 29, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/95500c078bec0082fe0e4f3e20d962d436a0e099/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95500c078bec0082fe0e4f3e20d962d436a0e099/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=95500c078bec0082fe0e4f3e20d962d436a0e099", "patch": "@@ -5,6 +5,9 @@ use crate::passes::Pass;\n \n use syntax::attr;\n \n+use std::ops::Sub;\n+use std::fmt;\n+\n pub const CALCULATE_DOC_COVERAGE: Pass = Pass {\n     name: \"calculate-doc-coverage\",\n     pass: calculate_doc_coverage,\n@@ -15,29 +18,66 @@ fn calculate_doc_coverage(krate: clean::Crate, _: &DocContext<'_, '_, '_>) -> cl\n     let mut calc = CoverageCalculator::default();\n     let krate = calc.fold_crate(krate);\n \n-    let total_minus_traits = calc.total - calc.total_trait_impls;\n-    let docs_minus_traits = calc.with_docs - calc.trait_impls_with_docs;\n+    let non_traits = calc.items - calc.trait_impl_items;\n \n-    print!(\"Rustdoc found {}/{} items with documentation\", calc.with_docs, calc.total);\n-    println!(\" ({}/{} not counting trait impls)\", docs_minus_traits, total_minus_traits);\n+    print!(\"Rustdoc found {} items with documentation\", calc.items);\n+    println!(\" ({} not counting trait impls)\", non_traits);\n \n-    if calc.total > 0 {\n-        let percentage = (calc.with_docs as f64 * 100.0) / calc.total as f64;\n-        let percentage_minus_traits =\n-            (docs_minus_traits as f64 * 100.0) / total_minus_traits as f64;\n+    if let (Some(percentage), Some(percentage_non_traits)) =\n+        (calc.items.percentage(), non_traits.percentage())\n+    {\n         println!(\"    Score: {:.1}% ({:.1}% not counting trait impls)\",\n-                 percentage, percentage_minus_traits);\n+                 percentage, percentage_non_traits);\n     }\n \n     krate\n }\n \n+#[derive(Default, Copy, Clone)]\n+struct ItemCount {\n+    total: u64,\n+    with_docs: u64,\n+}\n+\n+impl ItemCount {\n+    fn count_item(&mut self, has_docs: bool) {\n+        self.total += 1;\n+\n+        if has_docs {\n+            self.with_docs += 1;\n+        }\n+    }\n+\n+    fn percentage(&self) -> Option<f64> {\n+        if self.total > 0 {\n+            Some((self.with_docs as f64 * 100.0) / self.total as f64)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl Sub for ItemCount {\n+    type Output = Self;\n+\n+    fn sub(self, rhs: Self) -> Self {\n+        ItemCount {\n+            total: self.total - rhs.total,\n+            with_docs: self.with_docs - rhs.with_docs,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for ItemCount {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}/{}\", self.with_docs, self.total)\n+    }\n+}\n+\n #[derive(Default)]\n struct CoverageCalculator {\n-    total: usize,\n-    with_docs: usize,\n-    total_trait_impls: usize,\n-    trait_impls_with_docs: usize,\n+    items: ItemCount,\n+    trait_impl_items: ItemCount,\n }\n \n impl fold::DocFolder for CoverageCalculator {\n@@ -65,24 +105,15 @@ impl fold::DocFolder for CoverageCalculator {\n                     if let Some(ref tr) = i.trait_ {\n                         debug!(\"counting impl {:#} for {:#}\", tr, i.for_);\n \n-                        self.total += 1;\n-                        if has_docs {\n-                            self.with_docs += 1;\n-                        }\n+                        self.items.count_item(has_docs);\n \n                         // trait impls inherit their docs from the trait definition, so documenting\n                         // them can be considered optional\n \n-                        self.total_trait_impls += 1;\n-                        if has_docs {\n-                            self.trait_impls_with_docs += 1;\n-                        }\n+                        self.trait_impl_items.count_item(has_docs);\n \n                         for it in &i.items {\n-                            self.total_trait_impls += 1;\n-                            if !it.attrs.doc_strings.is_empty() {\n-                                self.trait_impls_with_docs += 1;\n-                            }\n+                            self.trait_impl_items.count_item(!it.attrs.doc_strings.is_empty());\n                         }\n                     } else {\n                         // inherent impls *can* be documented, and those docs show up, but in most\n@@ -92,10 +123,7 @@ impl fold::DocFolder for CoverageCalculator {\n                     }\n                 } else {\n                     debug!(\"counting {} {:?}\", i.type_(), i.name);\n-                    self.total += 1;\n-                    if has_docs {\n-                        self.with_docs += 1;\n-                    }\n+                    self.items.count_item(has_docs);\n                 }\n             }\n         }"}]}