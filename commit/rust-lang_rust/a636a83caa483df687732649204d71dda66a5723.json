{"sha": "a636a83caa483df687732649204d71dda66a5723", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MzZhODNjYWE0ODNkZjY4NzczMjY0OTIwNGQ3MWRkYTY2YTU3MjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-20T11:51:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-22T16:57:43Z"}, "message": "Use Names in path fragments and MacroDef", "tree": {"sha": "ea59d0717c2b549965edb9c3f3f3c279c39bcf1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea59d0717c2b549965edb9c3f3f3c279c39bcf1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a636a83caa483df687732649204d71dda66a5723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a636a83caa483df687732649204d71dda66a5723", "html_url": "https://github.com/rust-lang/rust/commit/a636a83caa483df687732649204d71dda66a5723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a636a83caa483df687732649204d71dda66a5723/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64fb709f99bdfb7d9a182eeaa068c7f209ce421b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64fb709f99bdfb7d9a182eeaa068c7f209ce421b", "html_url": "https://github.com/rust-lang/rust/commit/64fb709f99bdfb7d9a182eeaa068c7f209ce421b"}], "stats": {"total": 79, "additions": 40, "deletions": 39}, "files": [{"sha": "b19c0f2ecc5d2f9f490aba6062fd189243102114", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -1787,7 +1787,7 @@ fn encode_macro_defs(rbml_w: &mut Encoder,\n     for def in &krate.exported_macros {\n         rbml_w.start_tag(tag_macro_def);\n \n-        encode_name(rbml_w, def.ident.name);\n+        encode_name(rbml_w, def.name);\n         encode_attributes(rbml_w, &def.attrs);\n \n         rbml_w.wr_tagged_str(tag_macro_def_body,"}, {"sha": "8d0ba4fc483d294ace9ac3f6bee807e6c2b9982f", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -333,11 +333,11 @@ pub struct Crate {\n /// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MacroDef {\n-    pub ident: Ident,\n+    pub name: Name,\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n-    pub imported_from: Option<Ident>,\n+    pub imported_from: Option<Name>,\n     pub export: bool,\n     pub use_locally: bool,\n     pub allow_internal_unstable: bool,\n@@ -1039,14 +1039,14 @@ pub type Variant = Spanned<Variant_>;\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PathListItem_ {\n     PathListIdent {\n-        name: Ident,\n+        name: Name,\n         /// renamed in list, eg `use foo::{bar as baz};`\n-        rename: Option<Ident>,\n+        rename: Option<Name>,\n         id: NodeId\n     },\n     PathListMod {\n         /// renamed in list, eg `use foo::{self as baz};`\n-        rename: Option<Ident>,\n+        rename: Option<Name>,\n         id: NodeId\n     }\n }\n@@ -1058,7 +1058,7 @@ impl PathListItem_ {\n         }\n     }\n \n-    pub fn rename(&self) -> Option<Ident> {\n+    pub fn rename(&self) -> Option<Name> {\n         match *self {\n             PathListIdent { rename, .. } | PathListMod { rename, .. } => rename\n         }\n@@ -1077,7 +1077,7 @@ pub enum ViewPath_ {\n     /// or just\n     ///\n     /// `foo::bar::baz` (with `as baz` implicitly on the right)\n-    ViewPathSimple(Ident, Path),\n+    ViewPathSimple(Name, Path),\n \n     /// `foo::bar::*`\n     ViewPathGlob(Path),"}, {"sha": "8735f7cf8c67dbd859ec90fd5bd1179e65b74329", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -22,7 +22,7 @@ pub fn lower_view_path(view_path: &ViewPath) -> P<hir::ViewPath> {\n     P(Spanned {\n         node: match view_path.node {\n             ViewPathSimple(ident, ref path) => {\n-                hir::ViewPathSimple(ident, lower_path(path))\n+                hir::ViewPathSimple(ident.name, lower_path(path))\n             }\n             ViewPathGlob(ref path) => {\n                 hir::ViewPathGlob(lower_path(path))\n@@ -35,11 +35,14 @@ pub fn lower_view_path(view_path: &ViewPath) -> P<hir::ViewPath> {\n                                         PathListIdent { id, name, rename } =>\n                                             hir::PathListIdent {\n                                                 id: id,\n-                                                name: name,\n-                                                rename: rename.clone(),\n+                                                name: name.name,\n+                                                rename: rename.map(|x| x.name),\n                                             },\n                                         PathListMod { id, rename } =>\n-                                            hir::PathListMod { id: id, rename: rename.clone() }\n+                                            hir::PathListMod {\n+                                                id: id,\n+                                                rename: rename.map(|x| x.name)\n+                                            }\n                                     },\n                                     span: path_list_ident.span\n                                 }\n@@ -526,11 +529,11 @@ pub fn lower_crate(c: &Crate) -> hir::Crate {\n \n pub fn lower_macro_def(m: &MacroDef) -> hir::MacroDef {\n     hir::MacroDef {\n-        ident: m.ident,\n+        name: m.ident.name,\n         attrs: m.attrs.clone(),\n         id: m.id,\n         span: m.span,\n-        imported_from: m.imported_from,\n+        imported_from: m.imported_from.map(|x| x.name),\n         export: m.export,\n         use_locally: m.use_locally,\n         allow_internal_unstable: m.allow_internal_unstable,"}, {"sha": "0a56bcceb43c0a871e77398901b6b0b509593693", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -2174,15 +2174,14 @@ impl<'a> State<'a> {\n \n     pub fn print_view_path(&mut self, vp: &hir::ViewPath) -> io::Result<()> {\n         match vp.node {\n-            hir::ViewPathSimple(ident, ref path) => {\n+            hir::ViewPathSimple(name, ref path) => {\n                 try!(self.print_path(path, false, 0));\n \n                 // FIXME(#6993) can't compare identifiers directly here\n-                if path.segments.last().unwrap().identifier.name !=\n-                        ident.name {\n+                if path.segments.last().unwrap().identifier.name != name {\n                     try!(space(&mut self.s));\n                     try!(self.word_space(\"as\"));\n-                    try!(self.print_ident(ident));\n+                    try!(self.print_name(name));\n                 }\n \n                 Ok(())\n@@ -2203,7 +2202,7 @@ impl<'a> State<'a> {\n                 try!(self.commasep(Inconsistent, &idents[..], |s, w| {\n                     match w.node {\n                         hir::PathListIdent { name, .. } => {\n-                            s.print_ident(name)\n+                            s.print_name(name)\n                         },\n                         hir::PathListMod { .. } => {\n                             word(&mut s.s, \"self\")"}, {"sha": "068b89b6ded0039bca57ed6f4189b4e44311fa8a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -312,8 +312,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                           ResolutionError::SelfImportsOnlyAllowedWithin);\n                         }\n \n-                        let subclass = SingleImport(binding.name,\n-                                                    source_name);\n+                        let subclass = SingleImport(binding, source_name);\n                         self.build_import_directive(&**parent,\n                                                     module_path,\n                                                     subclass,\n@@ -343,7 +342,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         for source_item in source_items {\n                             let (module_path, name, rename) = match source_item.node {\n                                 PathListIdent { name, rename, .. } =>\n-                                    (module_path.clone(), name.name, rename.unwrap_or(name).name),\n+                                    (module_path.clone(), name, rename.unwrap_or(name)),\n                                 PathListMod { rename, .. } => {\n                                     let name = match module_path.last() {\n                                         Some(name) => *name,\n@@ -358,7 +357,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                         }\n                                     };\n                                     let module_path = module_path.split_last().unwrap().1;\n-                                    let rename = rename.map(|n| n.name).unwrap_or(name);\n+                                    let rename = rename.unwrap_or(name);\n                                     (module_path.to_vec(), name, rename)\n                                 }\n                             };"}, {"sha": "2cb1f6802f08212182d211172ef79d5f318b1c53", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -2210,23 +2210,23 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             ItemUse(ref view_path) => {\n                 // check for imports shadowing primitive types\n-                let check_rename = |this: &Self, id, ident: Ident| {\n+                let check_rename = |this: &Self, id, name| {\n                     match this.def_map.borrow().get(&id).map(|d| d.full_def()) {\n                         Some(DefTy(..)) | Some(DefStruct(..)) | Some(DefTrait(..)) | None => {\n-                            this.check_if_primitive_type_name(ident.name, item.span);\n+                            this.check_if_primitive_type_name(name, item.span);\n                         }\n                         _ => {}\n                     }\n                 };\n \n                 match view_path.node {\n-                    hir::ViewPathSimple(ident, _) => {\n-                        check_rename(self, item.id, ident);\n+                    hir::ViewPathSimple(name, _) => {\n+                        check_rename(self, item.id, name);\n                     }\n                     hir::ViewPathList(ref prefix, ref items) => {\n                         for item in items {\n-                            if let Some(ident) = item.node.rename() {\n-                                check_rename(self, item.node.id(), ident);\n+                            if let Some(name) = item.node.rename() {\n+                                check_rename(self, item.node.id(), name);\n                             }\n                         }\n "}, {"sha": "21895301a6ce8d8902f4dfa746c623f45c6cf0ee", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -43,7 +43,7 @@ use super::{Clean, ToSource};\n ///\n /// The returned value is `None` if the `id` could not be inlined, and `Some`\n /// of a vector of items if it was successfully expanded.\n-pub fn try_inline(cx: &DocContext, id: ast::NodeId, into: Option<ast::Ident>)\n+pub fn try_inline(cx: &DocContext, id: ast::NodeId, into: Option<ast::Name>)\n                   -> Option<Vec<clean::Item>> {\n     let tcx = match cx.tcx_opt() {\n         Some(tcx) => tcx,"}, {"sha": "f9b5b570490e2c38269e44a4b151583404d81b48", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -2386,14 +2386,14 @@ impl Clean<Vec<Item>> for doctree::Import {\n                 (ret, ImportList(resolve_use_source(cx, p.clean(cx), self.id),\n                                  remaining))\n             }\n-            hir::ViewPathSimple(i, ref p) => {\n+            hir::ViewPathSimple(name, ref p) => {\n                 if !denied {\n-                    match inline::try_inline(cx, self.id, Some(i)) {\n+                    match inline::try_inline(cx, self.id, Some(name)) {\n                         Some(items) => return items,\n                         None => {}\n                     }\n                 }\n-                (vec![], SimpleImport(i.clean(cx),\n+                (vec![], SimpleImport(name.clean(cx),\n                                       resolve_use_source(cx, p.clean(cx), self.id)))\n             }\n         };"}, {"sha": "be283c19cfac4eadebb4ad56c24e097a9a57609c", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -210,12 +210,12 @@ pub struct DefaultImpl {\n }\n \n pub struct Macro {\n-    pub name: Ident,\n+    pub name: Name,\n     pub id: ast::NodeId,\n     pub attrs: Vec<ast::Attribute>,\n     pub whence: Span,\n     pub stab: Option<attr::Stability>,\n-    pub imported_from: Option<Ident>,\n+    pub imported_from: Option<Name>,\n }\n \n pub struct ExternCrate {"}, {"sha": "d818115567770aadec18d876de92e667bce65354", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a636a83caa483df687732649204d71dda66a5723/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a636a83caa483df687732649204d71dda66a5723", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     }\n \n-    fn resolve_id(&mut self, id: ast::NodeId, renamed: Option<ast::Ident>,\n+    fn resolve_id(&mut self, id: ast::NodeId, renamed: Option<ast::Name>,\n                   glob: bool, om: &mut Module, please_inline: bool) -> bool {\n         let tcx = match self.cx.tcx_opt() {\n             Some(tcx) => tcx,\n@@ -241,9 +241,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     pub fn visit_item(&mut self, item: &hir::Item,\n-                      renamed: Option<ast::Ident>, om: &mut Module) {\n+                      renamed: Option<ast::Name>, om: &mut Module) {\n         debug!(\"Visiting item {:?}\", item);\n-        let name = renamed.map_or(item.name, |x| x.name);\n+        let name = renamed.unwrap_or(item.name);\n         match item.node {\n             hir::ItemExternCrate(ref p) => {\n                 let path = match *p {\n@@ -398,7 +398,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         Macro {\n             id: def.id,\n             attrs: def.attrs.clone(),\n-            name: def.ident,\n+            name: def.name,\n             whence: def.span,\n             stab: self.stability(def.id),\n             imported_from: def.imported_from,"}]}