{"sha": "8107ef77f0647158e693c22bbee1a2f71a0c4e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDdlZjc3ZjA2NDcxNThlNjkzYzIyYmJlZTFhMmY3MWEwYzRlMzc=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-16T20:37:28Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-17T14:35:48Z"}, "message": "Rename functions in the CloneableVector trait\n\n* Deprecated `to_owned` in favor of `to_vec`\n* Deprecated `into_owned` in favor of `into_vec`\n\n[breaking-change]", "tree": {"sha": "f8817f12a4bc1503169b257be8dba1a4e698f4e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8817f12a4bc1503169b257be8dba1a4e698f4e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8107ef77f0647158e693c22bbee1a2f71a0c4e37", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8107ef77f0647158e693c22bbee1a2f71a0c4e37", "html_url": "https://github.com/rust-lang/rust/commit/8107ef77f0647158e693c22bbee1a2f71a0c4e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8107ef77f0647158e693c22bbee1a2f71a0c4e37/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efbbb51ec0bfa371573bd4ae2c34b1ba69e11e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/efbbb51ec0bfa371573bd4ae2c34b1ba69e11e11", "html_url": "https://github.com/rust-lang/rust/commit/efbbb51ec0bfa371573bd4ae2c34b1ba69e11e11"}], "stats": {"total": 105, "additions": 59, "deletions": 46}, "files": [{"sha": "1c5aa8a323bab8cdaca429e08dfb3d35cd7766d1", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -277,21 +277,33 @@ impl<T: Clone> Iterator<Vec<T>> for Permutations<T> {\n \n /// Extension methods for vector slices with cloneable elements\n pub trait CloneableVector<T> {\n-    /// Copy `self` into a new owned vector\n-    fn to_owned(&self) -> Vec<T>;\n+    /// Copy `self` into a new vector\n+    fn to_vec(&self) -> Vec<T>;\n+\n+    /// Deprecated. Use `to_vec`\n+    #[deprecated = \"Replaced by `to_vec`\"]\n+    fn to_owned(&self) -> Vec<T> {\n+        self.to_vec()\n+    }\n \n     /// Convert `self` into an owned vector, not making a copy if possible.\n-    fn into_owned(self) -> Vec<T>;\n+    fn into_vec(self) -> Vec<T>;\n+\n+    /// Deprecated. Use `into_vec`\n+    #[deprecated = \"Replaced by `into_vec`\"]\n+    fn into_owned(self) -> Vec<T> {\n+        self.into_vec()\n+    }\n }\n \n /// Extension methods for vector slices\n impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     /// Returns a copy of `v`.\n     #[inline]\n-    fn to_owned(&self) -> Vec<T> { Vec::from_slice(*self) }\n+    fn to_vec(&self) -> Vec<T> { Vec::from_slice(*self) }\n \n     #[inline(always)]\n-    fn into_owned(self) -> Vec<T> { self.to_owned() }\n+    fn into_vec(self) -> Vec<T> { self.to_vec() }\n }\n \n /// Extension methods for vectors containing `Clone` elements.\n@@ -325,7 +337,7 @@ impl<'a,T:Clone> ImmutableCloneableVector<T> for &'a [T] {\n     fn permutations(self) -> Permutations<T> {\n         Permutations{\n             swaps: ElementSwaps::new(self.len()),\n-            v: self.to_owned(),\n+            v: self.to_vec(),\n         }\n     }\n \n@@ -888,7 +900,7 @@ mod tests {\n     fn test_slice() {\n         // Test fixed length vector.\n         let vec_fixed = [1i, 2, 3, 4];\n-        let v_a = vec_fixed.slice(1u, vec_fixed.len()).to_owned();\n+        let v_a = vec_fixed.slice(1u, vec_fixed.len()).to_vec();\n         assert_eq!(v_a.len(), 3u);\n         let v_a = v_a.as_slice();\n         assert_eq!(v_a[0], 2);\n@@ -897,15 +909,15 @@ mod tests {\n \n         // Test on stack.\n         let vec_stack = &[1i, 2, 3];\n-        let v_b = vec_stack.slice(1u, 3u).to_owned();\n+        let v_b = vec_stack.slice(1u, 3u).to_vec();\n         assert_eq!(v_b.len(), 2u);\n         let v_b = v_b.as_slice();\n         assert_eq!(v_b[0], 2);\n         assert_eq!(v_b[1], 3);\n \n         // Test `Box<[T]>`\n         let vec_unique = vec![1i, 2, 3, 4, 5, 6];\n-        let v_d = vec_unique.slice(1u, 6u).to_owned();\n+        let v_d = vec_unique.slice(1u, 6u).to_vec();\n         assert_eq!(v_d.len(), 5u);\n         let v_d = v_d.as_slice();\n         assert_eq!(v_d[0], 2);\n@@ -1132,7 +1144,7 @@ mod tests {\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);\n             assert_eq!(max_opt.unwrap(), 1);\n-            assert_eq!(it.next(), Some(v.as_slice().to_owned()));\n+            assert_eq!(it.next(), Some(v.as_slice().to_vec()));\n             assert_eq!(it.next(), None);\n         }\n         {\n@@ -1141,7 +1153,7 @@ mod tests {\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);\n             assert_eq!(max_opt.unwrap(), 1);\n-            assert_eq!(it.next(), Some(v.as_slice().to_owned()));\n+            assert_eq!(it.next(), Some(v.as_slice().to_vec()));\n             assert_eq!(it.next(), None);\n         }\n         {"}, {"sha": "94ca1beeb6d1890195bcc6a58ce94d932f802f34", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -422,8 +422,8 @@ impl<T> Collection for Vec<T> {\n }\n \n impl<T: Clone> CloneableVector<T> for Vec<T> {\n-    fn to_owned(&self) -> Vec<T> { self.clone() }\n-    fn into_owned(self) -> Vec<T> { self }\n+    fn to_vec(&self) -> Vec<T> { self.clone() }\n+    fn into_vec(self) -> Vec<T> { self }\n }\n \n // FIXME: #13996: need a way to mark the return value as `noalias`"}, {"sha": "ec60be195158ad67714689040f24a4a8e230c5c4", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -124,23 +124,23 @@ impl<'a,T:fmt::Show> fmt::Show for MaybeOwnedVector<'a,T> {\n \n impl<'a,T:Clone> CloneableVector<T> for MaybeOwnedVector<'a,T> {\n     /// Returns a copy of `self`.\n-    fn to_owned(&self) -> Vec<T> {\n-        self.as_slice().to_owned()\n+    fn to_vec(&self) -> Vec<T> {\n+        self.as_slice().to_vec()\n     }\n \n     /// Convert `self` into an owned slice, not making a copy if possible.\n-    fn into_owned(self) -> Vec<T> {\n+    fn into_vec(self) -> Vec<T> {\n         match self {\n-            Growable(v) => v.as_slice().to_owned(),\n-            Borrowed(v) => v.to_owned(),\n+            Growable(v) => v.as_slice().to_vec(),\n+            Borrowed(v) => v.to_vec(),\n         }\n     }\n }\n \n impl<'a, T: Clone> Clone for MaybeOwnedVector<'a, T> {\n     fn clone(&self) -> MaybeOwnedVector<'a, T> {\n         match *self {\n-            Growable(ref v) => Growable(v.to_owned()),\n+            Growable(ref v) => Growable(v.to_vec()),\n             Borrowed(v) => Borrowed(v)\n         }\n     }"}, {"sha": "b049f119bc2e588d8786e4bfe2387ff4735e4fc2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -1238,7 +1238,7 @@ fn link_args(cmd: &mut Command,\n         abi::OsMacos | abi::OsiOS => {\n             let morestack = lib_path.join(\"libmorestack.a\");\n \n-            let mut v = \"-Wl,-force_load,\".as_bytes().to_owned();\n+            let mut v = b\"-Wl,-force_load,\".to_vec();\n             v.push_all(morestack.as_vec());\n             cmd.arg(v.as_slice());\n         }"}, {"sha": "e433c3df8644c2713e179d200c17d90960ca48ac", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -36,7 +36,7 @@ pub mod config;\n \n \n pub fn main_args(args: &[String]) -> int {\n-    let owned_args = args.to_owned();\n+    let owned_args = args.to_vec();\n     monitor(proc() run_compiler(owned_args.as_slice()));\n     0\n }"}, {"sha": "99b98b690fa667faf2e6f55c82ebd6e8182fbf96", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -46,7 +46,7 @@ impl<'a> FileSearch<'a> {\n                 FileMatches => found = true,\n                 FileDoesntMatch => ()\n             }\n-            visited_dirs.insert(path.as_vec().to_owned());\n+            visited_dirs.insert(path.as_vec().to_vec());\n         }\n \n         debug!(\"filesearch: searching lib path\");\n@@ -59,18 +59,18 @@ impl<'a> FileSearch<'a> {\n             }\n         }\n \n-        visited_dirs.insert(tlib_path.as_vec().to_owned());\n+        visited_dirs.insert(tlib_path.as_vec().to_vec());\n         // Try RUST_PATH\n         if !found {\n             let rustpath = rust_path();\n             for path in rustpath.iter() {\n                 let tlib_path = make_rustpkg_lib_path(\n                     self.sysroot, path, self.triple);\n                 debug!(\"is {} in visited_dirs? {:?}\", tlib_path.display(),\n-                        visited_dirs.contains_equiv(&tlib_path.as_vec().to_owned()));\n+                        visited_dirs.contains_equiv(&tlib_path.as_vec().to_vec()));\n \n                 if !visited_dirs.contains_equiv(&tlib_path.as_vec()) {\n-                    visited_dirs.insert(tlib_path.as_vec().to_owned());\n+                    visited_dirs.insert(tlib_path.as_vec().to_vec());\n                     // Don't keep searching the RUST_PATH if one match turns up --\n                     // if we did, we'd get a \"multiple matching crates\" error\n                     match f(&tlib_path) {"}, {"sha": "e9c7a1cccb3e0060fe4c06d219afe8c5375facf6", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -369,7 +369,7 @@ impl<'a, O:DataFlowOperator> DataFlowContext<'a, O> {\n         let slice = match e {\n             Entry => on_entry,\n             Exit => {\n-                let mut t = on_entry.to_owned();\n+                let mut t = on_entry.to_vec();\n                 self.apply_gen_kill_frozen(cfgidx, t.as_mut_slice());\n                 temp_bits = t;\n                 temp_bits.as_slice()\n@@ -445,7 +445,7 @@ impl<'a, O:DataFlowOperator> DataFlowContext<'a, O> {\n         cfg.graph.each_edge(|_edge_index, edge| {\n             let flow_exit = edge.source();\n             let (start, end) = self.compute_id_range(flow_exit);\n-            let mut orig_kills = self.kills.slice(start, end).to_owned();\n+            let mut orig_kills = self.kills.slice(start, end).to_vec();\n \n             let mut changed = false;\n             for &node_id in edge.data.exiting_scopes.iter() {"}, {"sha": "de61cf808d2955eae14f20853324ed965bd5259f", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -1136,10 +1136,11 @@ impl<'l> Visitor<DxrVisitorEnv> for DxrVisitor<'l> {\n                 }\n             },\n             ast::ViewItemExternCrate(ident, ref s, id) => {\n-                let name = get_ident(ident).get().to_owned();\n+                let name = get_ident(ident);\n+                let name = name.get();\n                 let s = match *s {\n-                    Some((ref s, _)) => s.get().to_owned(),\n-                    None => name.to_owned(),\n+                    Some((ref s, _)) => s.get().to_string(),\n+                    None => name.to_string(),\n                 };\n                 let sub_span = self.span.sub_span_after_keyword(i.span, keywords::Crate);\n                 let cnum = match self.sess.cstore.find_extern_mod_stmt_cnum(id) {\n@@ -1150,7 +1151,7 @@ impl<'l> Visitor<DxrVisitorEnv> for DxrVisitor<'l> {\n                                           sub_span,\n                                           id,\n                                           cnum,\n-                                          name.as_slice(),\n+                                          name,\n                                           s.as_slice(),\n                                           e.cur_scope);\n             },\n@@ -1273,9 +1274,9 @@ impl<'l> Visitor<DxrVisitorEnv> for DxrVisitor<'l> {\n         // process collected paths\n         for &(id, ref p, ref immut, ref_kind) in self.collected_paths.iter() {\n             let value = if *immut {\n-                self.span.snippet(p.span).into_owned()\n+                self.span.snippet(p.span).into_string()\n             } else {\n-                \"<mutable>\".to_owned()\n+                \"<mutable>\".to_string()\n             };\n             let sub_span = self.span.span_for_first_ident(p.span);\n             let def_map = self.analysis.ty_cx.def_map.borrow();\n@@ -1330,7 +1331,7 @@ impl<'l> Visitor<DxrVisitorEnv> for DxrVisitor<'l> {\n         let value = self.span.snippet(l.span);\n \n         for &(id, ref p, ref immut, _) in self.collected_paths.iter() {\n-            let value = if *immut { value.to_owned() } else { \"<mutable>\".to_owned() };\n+            let value = if *immut { value.to_string() } else { \"<mutable>\".to_string() };\n             let types = self.analysis.ty_cx.node_types.borrow();\n             let typ = ppaux::ty_to_string(&self.analysis.ty_cx, *types.get(&(id as uint)));\n             // Get the span only for the name of the variable (I hope the path"}, {"sha": "1af6fde02afa4e69a09cdf91514fa0318e22c262", "filename": "src/librustc/middle/save/recorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Frecorder.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -170,7 +170,7 @@ impl<'a> FmtStrs<'a> {\n                 String::from_str(v)\n             }\n         )));\n-        Some(strs.fold(String::new(), |s, ss| s.append(ss.as_slice()))).map(|s| s.into_owned())\n+        Some(strs.fold(String::new(), |s, ss| s.append(ss.as_slice())))\n     }\n \n     pub fn record_without_span(&mut self,\n@@ -503,7 +503,7 @@ impl<'a> FmtStrs<'a> {\n         };\n         let (dcn, dck) = match declid {\n             Some(declid) => (s!(declid.node), s!(declid.krate)),\n-            None => (\"\".to_owned(), \"\".to_owned())\n+            None => (\"\".to_string(), \"\".to_string())\n         };\n         self.check_and_record(MethodCall,\n                               span,"}, {"sha": "fc8d315e156d0a1c3bf5f360352ce961ed878403", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -95,7 +95,7 @@ impl Emitter for ExpectErrorEmitter {\n }\n \n fn errors(msgs: &[&str]) -> (Box<Emitter+Send>, uint) {\n-    let v = Vec::from_fn(msgs.len(), |i| msgs[i].to_owned());\n+    let v = msgs.iter().map(|m| m.to_string()).collect();\n     (box ExpectErrorEmitter { messages: v } as Box<Emitter+Send>, msgs.len())\n }\n \n@@ -114,7 +114,7 @@ fn test_env(_test_name: &str,\n \n     let sess = session::build_session_(options, None, span_diagnostic_handler);\n     let krate_config = Vec::new();\n-    let input = driver::StrInput(source_string.to_owned());\n+    let input = driver::StrInput(source_string.to_string());\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input);\n     let (krate, ast_map) =\n         driver::phase_2_configure_and_expand(&sess, krate, \"test\")"}, {"sha": "0f2fcaff31036a66c7a2fcb674ae3df75d700798", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -778,11 +778,11 @@ mod tests {\n             c_ = Some(c.clone());\n             c.clone();\n             // force a copy, reading the memory\n-            c.as_bytes().to_owned();\n+            c.as_bytes().to_vec();\n         });\n         let c_ = c_.unwrap();\n         // force a copy, reading the memory\n-        c_.as_bytes().to_owned();\n+        c_.as_bytes().to_vec();\n     }\n \n     #[test]"}, {"sha": "9fb25787c8120b81c33159b93d5aaed9211ff0b2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -1544,7 +1544,7 @@ mod test {\n     fn run_renaming_test(t: &RenamingTest, test_idx: uint) {\n         let invalid_name = token::special_idents::invalid.name;\n         let (teststr, bound_connections, bound_ident_check) = match *t {\n-            (ref str,ref conns, bic) => (str.to_owned(), conns.clone(), bic)\n+            (ref str,ref conns, bic) => (str.to_string(), conns.clone(), bic)\n         };\n         let cr = expand_crate_str(teststr.to_string());\n         let bindings = crate_bindings(&cr);"}, {"sha": "143175e558b6dbe922b8b1951c3ef9f624487e5a", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -72,7 +72,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<Vec<u8> , uint>, key: String) -> uint {\n-   let key = key.to_owned().into_ascii().as_slice().to_lower().into_string();\n+   let key = key.into_ascii().as_slice().to_lower().into_string();\n    match mm.find_equiv(&key.as_bytes()) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }\n@@ -179,7 +179,7 @@ fn main() {\n    let mut proc_mode = false;\n \n    for line in rdr.lines() {\n-       let line = line.unwrap().as_slice().trim().to_owned();\n+       let line = line.unwrap().as_slice().trim().to_string();\n \n        if line.len() == 0u { continue; }\n "}, {"sha": "8908b5b87ed3c80f59dfc36046b473df0e254797", "filename": "src/test/bench/shootout-regex-dna.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-regex-dna.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -109,7 +109,7 @@ fn main() {\n     let (mut variant_strs, mut counts) = (vec!(), vec!());\n     for variant in variants.move_iter() {\n         let seq_arc_copy = seq_arc.clone();\n-        variant_strs.push(variant.to_string().to_owned());\n+        variant_strs.push(variant.to_string());\n         counts.push(Future::spawn(proc() {\n             count_matches(seq_arc_copy.as_slice(), &variant)\n         }));"}, {"sha": "291fab29584ddb5841595c6f9033f926ce61a496", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -15,6 +15,6 @@ use std::collections::HashMap;\n \n pub fn main() {\n     let mut m = HashMap::new();\n-    m.insert(\"foo\".as_bytes().to_owned(), \"bar\".as_bytes().to_owned());\n+    m.insert(b\"foo\".to_vec(), b\"bar\".to_vec());\n     println!(\"{:?}\", m);\n }"}, {"sha": "15423121fda6c4581a3ff6bfb6743ae5e37e1620", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8107ef77f0647158e693c22bbee1a2f71a0c4e37/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=8107ef77f0647158e693c22bbee1a2f71a0c4e37", "patch": "@@ -56,7 +56,7 @@ priv fn parse_list(len: uint, io: @io::Reader) -> Result {\n }\n \n priv fn chop(s: String) -> String {\n-  s.slice(0, s.len() - 1).to_owned()\n+  s.slice(0, s.len() - 1).to_string()\n }\n \n priv fn parse_bulk(io: @io::Reader) -> Result {"}]}