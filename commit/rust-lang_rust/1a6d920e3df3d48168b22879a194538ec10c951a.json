{"sha": "1a6d920e3df3d48168b22879a194538ec10c951a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmQ5MjBlM2RmM2Q0ODE2OGIyMjg3OWExOTQ1MzhlYzEwYzk1MWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-14T02:28:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:53Z"}, "message": "green: Allow specifying an IoFactory for pools\n\nThis allows creation of different sched pools with different io factories.\nNamely, this will be used to test the basic I/O loop in the green crate. This\ncan also be used to override the global default.", "tree": {"sha": "a44483a5bf9bdca9f3de7924d3fcb6c6201fc576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a44483a5bf9bdca9f3de7924d3fcb6c6201fc576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6d920e3df3d48168b22879a194538ec10c951a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d920e3df3d48168b22879a194538ec10c951a", "html_url": "https://github.com/rust-lang/rust/commit/1a6d920e3df3d48168b22879a194538ec10c951a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6d920e3df3d48168b22879a194538ec10c951a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be66e212b37045b927138965a76abe3608325ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be66e212b37045b927138965a76abe3608325ca", "html_url": "https://github.com/rust-lang/rust/commit/8be66e212b37045b927138965a76abe3608325ca"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "82d5bc83e2efd0e05f64f10856b5baaa9d3d3764", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=1a6d920e3df3d48168b22879a194538ec10c951a", "patch": "@@ -115,6 +115,9 @@ pub fn run(main: proc()) -> int {\n pub struct PoolConfig {\n     /// The number of schedulers (OS threads) to spawn into this M:N pool.\n     threads: uint,\n+    /// A factory function used to create new event loops. If this is not\n+    /// specified then the default event loop factory is used.\n+    event_loop_factory: Option<fn() -> ~rtio::EventLoop>,\n }\n \n impl PoolConfig {\n@@ -123,6 +126,7 @@ impl PoolConfig {\n     pub fn new() -> PoolConfig {\n         PoolConfig {\n             threads: rt::default_sched_threads(),\n+            event_loop_factory: None,\n         }\n     }\n }\n@@ -138,6 +142,7 @@ pub struct SchedPool {\n     priv stack_pool: StackPool,\n     priv deque_pool: deque::BufferPool<~task::GreenTask>,\n     priv sleepers: SleeperList,\n+    priv factory: fn() -> ~rtio::EventLoop,\n }\n \n impl SchedPool {\n@@ -148,7 +153,11 @@ impl SchedPool {\n     pub fn new(config: PoolConfig) -> SchedPool {\n         static mut POOL_ID: AtomicUint = INIT_ATOMIC_UINT;\n \n-        let PoolConfig { threads: nscheds } = config;\n+        let PoolConfig {\n+            threads: nscheds,\n+            event_loop_factory: factory\n+        } = config;\n+        let factory = factory.unwrap_or(default_event_loop_factory());\n         assert!(nscheds > 0);\n \n         // The pool of schedulers that will be returned from this function\n@@ -161,6 +170,7 @@ impl SchedPool {\n             stack_pool: StackPool::new(),\n             deque_pool: deque::BufferPool::new(),\n             next_friend: 0,\n+            factory: factory,\n         };\n \n         // Create a work queue for each scheduler, ntimes. Create an extra\n@@ -176,7 +186,7 @@ impl SchedPool {\n             rtdebug!(\"inserting a regular scheduler\");\n \n             let mut sched = ~Scheduler::new(pool.id,\n-                                            new_event_loop(),\n+                                            (pool.factory)(),\n                                             worker,\n                                             pool.stealers.clone(),\n                                             pool.sleepers.clone());\n@@ -232,7 +242,7 @@ impl SchedPool {\n         // other schedulers as well as having a stealer handle to all other\n         // schedulers.\n         let mut sched = ~Scheduler::new(self.id,\n-                                        new_event_loop(),\n+                                        (self.factory)(),\n                                         worker,\n                                         self.stealers.clone(),\n                                         self.sleepers.clone());\n@@ -270,19 +280,19 @@ impl Drop for SchedPool {\n     }\n }\n \n-fn new_event_loop() -> ~rtio::EventLoop {\n+fn default_event_loop_factory() -> fn() -> ~rtio::EventLoop {\n     match crate_map::get_crate_map() {\n         None => {}\n         Some(map) => {\n             match map.event_loop_factory {\n                 None => {}\n-                Some(factory) => return factory()\n+                Some(factory) => return factory\n             }\n         }\n     }\n \n     // If the crate map didn't specify a factory to create an event loop, then\n     // instead just use a basic event loop missing all I/O services to at least\n     // get the scheduler running.\n-    return basic::event_loop();\n+    return basic::event_loop;\n }"}, {"sha": "1ee64398ca382908f48132d5ed7311d0e52bc3a4", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=1a6d920e3df3d48168b22879a194538ec10c951a", "patch": "@@ -161,7 +161,10 @@ mod test {\n     #[test]\n     fn test_homing_closes_correctly() {\n         let (port, chan) = Chan::new();\n-        let mut pool = SchedPool::new(PoolConfig { threads: 1 });\n+        let mut pool = SchedPool::new(PoolConfig {\n+            threads: 1,\n+            event_loop_factory: None,\n+        });\n \n         do pool.spawn(TaskOpts::new()) {\n             let listener = UdpWatcher::bind(local_loop(), next_test_ip4());\n@@ -179,7 +182,10 @@ mod test {\n     #[test]\n     fn test_homing_read() {\n         let (port, chan) = Chan::new();\n-        let mut pool = SchedPool::new(PoolConfig { threads: 1 });\n+        let mut pool = SchedPool::new(PoolConfig {\n+            threads: 1,\n+            event_loop_factory: None,\n+        });\n \n         do pool.spawn(TaskOpts::new()) {\n             let addr1 = next_test_ip4();"}, {"sha": "210ee2fc4511a126e845d87827967a741709e309", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=1a6d920e3df3d48168b22879a194538ec10c951a", "patch": "@@ -96,7 +96,7 @@ impl rtio::EventLoop for UvEventLoop {\n \n #[cfg(not(test))]\n #[lang = \"event_loop_factory\"]\n-pub extern \"C\" fn new_loop() -> ~rtio::EventLoop {\n+pub fn new_loop() -> ~rtio::EventLoop {\n     ~UvEventLoop::new() as ~rtio::EventLoop\n }\n "}, {"sha": "d9b40cfbb6e8ce329b27bb4026189e8978fc91c0", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6d920e3df3d48168b22879a194538ec10c951a/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=1a6d920e3df3d48168b22879a194538ec10c951a", "patch": "@@ -30,7 +30,7 @@ pub struct CrateMap<'a> {\n     version: i32,\n     entries: &'a [ModEntry<'a>],\n     children: &'a [&'a CrateMap<'a>],\n-    event_loop_factory: Option<extern \"C\" fn() -> ~EventLoop>,\n+    event_loop_factory: Option<fn() -> ~EventLoop>,\n }\n \n #[cfg(not(windows))]"}]}