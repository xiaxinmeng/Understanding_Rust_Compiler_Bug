{"sha": "2736d63db073e5ae021177ff3ac3cb001789b493", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MzZkNjNkYjA3M2U1YWUwMjExNzdmZjNhYzNjYjAwMTc4OWI0OTM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-05T02:38:11Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-05T02:38:11Z"}, "message": "Adding comments; removing dead code.", "tree": {"sha": "10cbe6d0fb2c8c75b729c6c9e24f186edc1aadc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10cbe6d0fb2c8c75b729c6c9e24f186edc1aadc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2736d63db073e5ae021177ff3ac3cb001789b493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2736d63db073e5ae021177ff3ac3cb001789b493", "html_url": "https://github.com/rust-lang/rust/commit/2736d63db073e5ae021177ff3ac3cb001789b493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2736d63db073e5ae021177ff3ac3cb001789b493/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f95766a40ae6f547e5bae473d8412e51a2e8adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f95766a40ae6f547e5bae473d8412e51a2e8adf", "html_url": "https://github.com/rust-lang/rust/commit/5f95766a40ae6f547e5bae473d8412e51a2e8adf"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "9ffc6d429c0a3f5296e97182e09485726fe370e2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2736d63db073e5ae021177ff3ac3cb001789b493/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2736d63db073e5ae021177ff3ac3cb001789b493/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2736d63db073e5ae021177ff3ac3cb001789b493", "patch": "@@ -7231,15 +7231,16 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::def_id oid,\n                                            typarams_ty,\n                                            fields_ty]);\n \n-        // Hand this thing we've constructed off to trans_malloc_boxed, which\n-        // makes space for the refcount.\n+        // Hand this type we've synthesized off to trans_malloc_boxed, which\n+        // allocates a box, including space for a refcount.\n         auto box = trans_malloc_boxed(bcx, body_ty);\n         bcx = box.bcx;\n \n-        // And mk_imm_box throws a refcount into the type we're synthesizing:\n-        // [rc, [tydesc_ty, [typaram, ...], [field, ...]]]\n+        // mk_imm_box throws a refcount into the type we're synthesizing, so\n+        // that it looks like: [rc, [tydesc_ty, [typaram, ...], [field, ...]]]\n         let ty::t boxed_body_ty = ty::mk_imm_box(ccx.tcx, body_ty);\n \n+        // Grab onto the refcount and body parts of the box we allocated.\n         auto rc = GEP_tup_like(bcx, boxed_body_ty, box.val,\n                                [0, \n                                 abi::box_rc_field_refcnt]);\n@@ -7253,6 +7254,12 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::def_id oid,\n \n         // Put together a tydesc for the body, so that the object can later be\n         // freed by calling through its tydesc.\n+\n+        // Every object (not just those with type parameters) needs to have a\n+        // tydesc to describe its body, since all objects have unknown type to\n+        // the user of the object.  So the tydesc is needed to keep track of\n+        // the types of the object's fields, so that the fields can be freed\n+        // later.\n         auto body_tydesc =\n             GEP_tup_like(bcx, body_ty, body.val,\n                          [0, abi::obj_body_elt_tydesc]);\n@@ -7263,17 +7270,16 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::def_id oid,\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);\n \n-        auto dtor = C_null(T_ptr(T_glue_fn(ccx.tn)));\n-        alt (ob.dtor) {\n-            case (some(?d)) {\n-                dtor = trans_dtor(cx, llself_ty, self_ty, ty_params, d);\n-            }\n-            case (none) {}\n-        }\n-\n         bcx = body_td.bcx;\n         bcx.build.Store(body_td.val, body_tydesc.val);\n \n+        // Copy the object's type parameters and fields into the space we\n+        // allocated for the object body.  (This is something like saving the\n+        // lexical environment of a function in its closure: the \"captured\n+        // typarams\" are any type parameters that are passed to the object\n+        // constructor and are then available to the object's methods.\n+        // Likewise for the object's fields.)\n+\n         // Copy typarams into captured typarams.\n         auto body_typarams =\n             GEP_tup_like(bcx, body_ty, body.val,"}]}