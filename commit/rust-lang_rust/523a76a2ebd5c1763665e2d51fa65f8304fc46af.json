{"sha": "523a76a2ebd5c1763665e2d51fa65f8304fc46af", "node_id": "C_kwDOAAsO6NoAKDUyM2E3NmEyZWJkNWMxNzYzNjY1ZTJkNTFmYTY1ZjgzMDRmYzQ2YWY", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-09-28T16:59:03Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-09-29T21:24:24Z"}, "message": "remove the unused :: between trait and type to give user correct diagnostic information\n\tmodified:   compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs\n\tnew file:   src/test/ui/type/issue-101866.rs\n\tnew file:   src/test/ui/type/issue-101866.stderr", "tree": {"sha": "785f6f1eabb89e8ebf313cd87a67a340f613f1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785f6f1eabb89e8ebf313cd87a67a340f613f1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/523a76a2ebd5c1763665e2d51fa65f8304fc46af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/523a76a2ebd5c1763665e2d51fa65f8304fc46af", "html_url": "https://github.com/rust-lang/rust/commit/523a76a2ebd5c1763665e2d51fa65f8304fc46af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/523a76a2ebd5c1763665e2d51fa65f8304fc46af/comments", "author": null, "committer": null, "parents": [{"sha": "09ae7846a272a500ff7145255f0de5556c0b8949", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ae7846a272a500ff7145255f0de5556c0b8949", "html_url": "https://github.com/rust-lang/rust/commit/09ae7846a272a500ff7145255f0de5556c0b8949"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "5fdadd0b4b41bce2fa84ab56e6f5eacddfdaa850", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/523a76a2ebd5c1763665e2d51fa65f8304fc46af/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a76a2ebd5c1763665e2d51fa65f8304fc46af/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=523a76a2ebd5c1763665e2d51fa65f8304fc46af", "patch": "@@ -2263,13 +2263,22 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                                     trait_impls.non_blanket_impls().len()\n                                 )\n                             };\n-\n+                            let mut suggestions = vec![(\n+                                trait_path_segment.ident.span.shrink_to_lo(),\n+                                format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())\n+                            )];\n+                            if let Some(generic_arg) = trait_path_segment.args {\n+                                let between_span = trait_path_segment.ident.span.between(generic_arg.span_ext);\n+                                // get rid of :: between Trait and <type>\n+                                // must be '::' between them, otherwise the parser won't accept the code\n+                                suggestions.push((between_span, \"\".to_string(),));\n+                                suggestions.push((generic_arg.span_ext.shrink_to_hi(), format!(\">\")));\n+                            } else {\n+                                suggestions.push((trait_path_segment.ident.span.shrink_to_hi(), format!(\">\")));\n+                            }\n                             err.multipart_suggestion(\n                                 message,\n-                                vec![\n-                                    (trait_path_segment.ident.span.shrink_to_lo(), format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())),\n-                                    (trait_path_segment.ident.span.shrink_to_hi(), format!(\">\"))\n-                                ],\n+                                suggestions,\n                                 Applicability::MaybeIncorrect\n                             );\n                         }"}, {"sha": "d332c4adb00609d6c3b63de1ba0328ef1f8fd434", "filename": "src/test/ui/type/issue-101866.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/523a76a2ebd5c1763665e2d51fa65f8304fc46af/src%2Ftest%2Fui%2Ftype%2Fissue-101866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523a76a2ebd5c1763665e2d51fa65f8304fc46af/src%2Ftest%2Fui%2Ftype%2Fissue-101866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-101866.rs?ref=523a76a2ebd5c1763665e2d51fa65f8304fc46af", "patch": "@@ -0,0 +1,15 @@\n+trait TraitA<T> {\n+    fn func();\n+}\n+\n+struct StructA {}\n+\n+impl TraitA<i32> for StructA {\n+    fn func() {}\n+}\n+\n+fn main() {\n+    TraitA::<i32>::func();\n+    //~^ ERROR: cannot call associated function on trait without specifying the corresponding `impl` type [E0790]\n+    //~| help: use the fully-qualified path to the only available implementation\n+}"}, {"sha": "788e54b93819082f1829ee5019dc3ee5ef2b3f30", "filename": "src/test/ui/type/issue-101866.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/523a76a2ebd5c1763665e2d51fa65f8304fc46af/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/523a76a2ebd5c1763665e2d51fa65f8304fc46af/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr?ref=523a76a2ebd5c1763665e2d51fa65f8304fc46af", "patch": "@@ -0,0 +1,18 @@\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/issue-101866.rs:12:5\n+   |\n+LL |     fn func();\n+   |     ---------- `TraitA::func` defined here\n+...\n+LL |     TraitA::<i32>::func();\n+   |     ^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL -     TraitA::<i32>::func();\n+LL +     <::StructA as TraitA<i32>>::func();\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0790`."}]}