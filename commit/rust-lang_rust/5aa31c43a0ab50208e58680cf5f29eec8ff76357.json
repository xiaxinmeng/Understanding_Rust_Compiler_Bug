{"sha": "5aa31c43a0ab50208e58680cf5f29eec8ff76357", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYTMxYzQzYTBhYjUwMjA4ZTU4NjgwY2Y1ZjI5ZWVjOGZmNzYzNTc=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-01-22T20:38:19Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-01-23T01:05:06Z"}, "message": "libnative: Implement get_host_addresses.", "tree": {"sha": "f00f043241fea9415fb23557421754e6306bd36d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f00f043241fea9415fb23557421754e6306bd36d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa31c43a0ab50208e58680cf5f29eec8ff76357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa31c43a0ab50208e58680cf5f29eec8ff76357", "html_url": "https://github.com/rust-lang/rust/commit/5aa31c43a0ab50208e58680cf5f29eec8ff76357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa31c43a0ab50208e58680cf5f29eec8ff76357/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fce792249e72a181f2ad52413b25b1db643c371f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fce792249e72a181f2ad52413b25b1db643c371f", "html_url": "https://github.com/rust-lang/rust/commit/fce792249e72a181f2ad52413b25b1db643c371f"}], "stats": {"total": 221, "additions": 162, "deletions": 59}, "files": [{"sha": "3e7ce59b69d3af9fd90454dd3f43ff3ba683c8a8", "filename": "src/libnative/io/addrinfo.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibnative%2Fio%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibnative%2Fio%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Faddrinfo.rs?ref=5aa31c43a0ab50208e58680cf5f29eec8ff76357", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ai = std::io::net::addrinfo;\n+use std::c_str::CString;\n+use std::cast;\n+use std::io;\n+use std::io::IoError;\n+use std::libc;\n+use std::libc::{c_char, c_int};\n+use std::ptr::null;\n+use std::str::raw::from_c_str;\n+\n+use super::net::sockaddr_to_addr;\n+\n+pub struct GetAddrInfoRequest;\n+\n+impl GetAddrInfoRequest {\n+    pub fn run(host: Option<&str>, servname: Option<&str>,\n+               hint: Option<ai::Hint>) -> Result<~[ai::Info], IoError> {\n+        assert!(host.is_some() || servname.is_some());\n+\n+        let c_host = host.map_or(unsafe { CString::new(null(), true) }, |x| x.to_c_str());\n+        let c_serv = servname.map_or(unsafe { CString::new(null(), true) }, |x| x.to_c_str());\n+\n+        let hint = hint.map(|hint| {\n+            libc::addrinfo {\n+                ai_flags: hint.flags as c_int,\n+                ai_family: hint.family as c_int,\n+                ai_socktype: 0,\n+                ai_protocol: 0,\n+                ai_addrlen: 0,\n+                ai_canonname: null(),\n+                ai_addr: null(),\n+                ai_next: null()\n+            }\n+        });\n+\n+        let hint_ptr = hint.as_ref().map_or(null(), |x| x as *libc::addrinfo);\n+        let res = null();\n+\n+        // Make the call\n+        let s = unsafe {\n+            let ch = if c_host.is_null() { null() } else { c_host.with_ref(|x| x) };\n+            let cs = if c_serv.is_null() { null() } else { c_serv.with_ref(|x| x) };\n+            getaddrinfo(ch, cs, hint_ptr, &res)\n+        };\n+\n+        // Error?\n+        if s != 0 {\n+            let err_str = unsafe { from_c_str(gai_strerror(s)) };\n+\n+            return Err(IoError {\n+                kind: io::OtherIoError,\n+                desc: \"unable to resolve host\",\n+                detail: Some(err_str),\n+            });\n+        }\n+\n+        // Collect all the results we found\n+        let mut addrs = ~[];\n+        let mut rp = res;\n+        while rp.is_not_null() {\n+            unsafe {\n+                let addr = match sockaddr_to_addr(cast::transmute((*rp).ai_addr),\n+                                                  (*rp).ai_addrlen as uint) {\n+                    Ok(a) => a,\n+                    Err(e) => return Err(e)\n+                };\n+                addrs.push(ai::Info {\n+                    address: addr,\n+                    family: (*rp).ai_family as uint,\n+                    socktype: None,\n+                    protocol: None,\n+                    flags: (*rp).ai_flags as uint\n+                });\n+\n+                rp = (*rp).ai_next;\n+            }\n+        }\n+\n+        unsafe { freeaddrinfo(res); }\n+\n+        Ok(addrs)\n+    }\n+}\n+\n+extern {\n+    fn getaddrinfo(node: *c_char, service: *c_char,\n+                   hints: *libc::addrinfo, res: **libc::addrinfo) -> c_int;\n+    fn gai_strerror(errcode: c_int) -> *c_char;\n+    fn freeaddrinfo(res: *libc::addrinfo);\n+}"}, {"sha": "0bb80ba97fb4e0cd64322f413780720dfa776fdd", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=5aa31c43a0ab50208e58680cf5f29eec8ff76357", "patch": "@@ -23,28 +23,29 @@\n \n use std::c_str::CString;\n use std::comm::SharedChan;\n+use std::io;\n+use std::io::IoError;\n+use std::io::net::ip::SocketAddr;\n+use std::io::process::ProcessConfig;\n+use std::io::signal::Signum;\n use std::libc::c_int;\n use std::libc;\n use std::os;\n use std::rt::rtio;\n use std::rt::rtio::{RtioTcpStream, RtioTcpListener, RtioUdpSocket,\n                     RtioUnixListener, RtioPipe, RtioFileStream, RtioProcess,\n                     RtioSignal, RtioTTY, CloseBehavior, RtioTimer};\n-use std::io;\n-use std::io::IoError;\n-use std::io::net::ip::SocketAddr;\n-use std::io::process::ProcessConfig;\n-use std::io::signal::Signum;\n use ai = std::io::net::addrinfo;\n \n // Local re-exports\n pub use self::file::FileDesc;\n pub use self::process::Process;\n \n // Native I/O implementations\n+pub mod addrinfo;\n pub mod file;\n-pub mod process;\n pub mod net;\n+pub mod process;\n \n type IoResult<T> = Result<T, IoError>;\n \n@@ -186,9 +187,9 @@ impl rtio::IoFactory for IoFactory {\n     fn unix_connect(&mut self, _path: &CString) -> IoResult<~RtioPipe> {\n         Err(unimpl())\n     }\n-    fn get_host_addresses(&mut self, _host: Option<&str>, _servname: Option<&str>,\n-                          _hint: Option<ai::Hint>) -> IoResult<~[ai::Info]> {\n-        Err(unimpl())\n+    fn get_host_addresses(&mut self, host: Option<&str>, servname: Option<&str>,\n+                          hint: Option<ai::Hint>) -> IoResult<~[ai::Info]> {\n+        addrinfo::GetAddrInfoRequest::run(host, servname, hint)\n     }\n \n     // filesystem operations"}, {"sha": "9be4247b05667a764eef4ef9278a42969d81c367", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=5aa31c43a0ab50208e58680cf5f29eec8ff76357", "patch": "@@ -134,8 +134,8 @@ fn sockname(fd: sock_t,\n     return sockaddr_to_addr(&storage, len as uint);\n }\n \n-fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n-                    len: uint) -> IoResult<ip::SocketAddr> {\n+pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n+                        len: uint) -> IoResult<ip::SocketAddr> {\n     match storage.ss_family as libc::c_int {\n         libc::AF_INET => {\n             assert!(len as uint >= mem::size_of::<libc::sockaddr_in>());"}, {"sha": "2fe4819c789c7ba76ccacbe26eaa70f1a2838b13", "filename": "src/librustuv/addrinfo.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibrustuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibrustuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faddrinfo.rs?ref=5aa31c43a0ab50208e58680cf5f29eec8ff76357", "patch": "@@ -10,6 +10,7 @@\n \n use ai = std::io::net::addrinfo;\n use std::cast;\n+use std::libc;\n use std::libc::c_int;\n use std::ptr::null;\n use std::rt::task::BlockedTask;\n@@ -19,7 +20,7 @@ use super::{Loop, UvError, Request, wait_until_woken_after, wakeup};\n use uvll;\n \n struct Addrinfo {\n-    handle: *uvll::addrinfo,\n+    handle: *libc::addrinfo,\n }\n \n struct Ctx {\n@@ -62,7 +63,7 @@ impl GetAddrInfoRequest {\n             let socktype = 0;\n             let protocol = 0;\n \n-            uvll::addrinfo {\n+            libc::addrinfo {\n                 ai_flags: flags,\n                 ai_family: hint.family as c_int,\n                 ai_socktype: socktype,\n@@ -73,7 +74,7 @@ impl GetAddrInfoRequest {\n                 ai_next: null(),\n             }\n         });\n-        let hint_ptr = hint.as_ref().map_or(null(), |x| x as *uvll::addrinfo);\n+        let hint_ptr = hint.as_ref().map_or(null(), |x| x as *libc::addrinfo);\n         let mut req = Request::new(uvll::UV_GETADDRINFO);\n \n         return match unsafe {\n@@ -100,7 +101,7 @@ impl GetAddrInfoRequest {\n \n         extern fn getaddrinfo_cb(req: *uvll::uv_getaddrinfo_t,\n                                  status: c_int,\n-                                 res: *uvll::addrinfo) {\n+                                 res: *libc::addrinfo) {\n             let req = Request::wrap(req);\n             assert!(status != uvll::ECANCELED);\n             let cx: &mut Ctx = unsafe { req.get_data() };"}, {"sha": "b1a74b84e7c608f54b0b059888ce345f36c095cb", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=5aa31c43a0ab50208e58680cf5f29eec8ff76357", "patch": "@@ -30,7 +30,7 @@\n #[allow(non_camel_case_types)]; // C types\n \n use std::libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n-use std::libc::{ssize_t, sockaddr, free};\n+use std::libc::{ssize_t, sockaddr, free, addrinfo};\n use std::libc;\n use std::rt::global_heap::malloc_raw;\n \n@@ -249,45 +249,6 @@ pub type uv_signal_cb = extern \"C\" fn(handle: *uv_signal_t,\n                                       signum: c_int);\n pub type uv_fs_cb = extern \"C\" fn(req: *uv_fs_t);\n \n-// XXX: This is a standard C type. Could probably be defined in libc\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"linux\")]\n-pub struct addrinfo {\n-    ai_flags: c_int,\n-    ai_family: c_int,\n-    ai_socktype: c_int,\n-    ai_protocol: c_int,\n-    ai_addrlen: libc::socklen_t,\n-    ai_addr: *sockaddr,\n-    ai_canonname: *char,\n-    ai_next: *addrinfo\n-}\n-\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"freebsd\")]\n-pub struct addrinfo {\n-    ai_flags: c_int,\n-    ai_family: c_int,\n-    ai_socktype: c_int,\n-    ai_protocol: c_int,\n-    ai_addrlen: libc::socklen_t,\n-    ai_canonname: *char,\n-    ai_addr: *sockaddr,\n-    ai_next: *addrinfo\n-}\n-\n-#[cfg(windows)]\n-pub struct addrinfo {\n-    ai_flags: c_int,\n-    ai_family: c_int,\n-    ai_socktype: c_int,\n-    ai_protocol: c_int,\n-    ai_addrlen: size_t,\n-    ai_canonname: *char,\n-    ai_addr: *sockaddr,\n-    ai_next: *addrinfo\n-}\n-\n #[cfg(unix)] pub type uv_uid_t = libc::types::os::arch::posix88::uid_t;\n #[cfg(unix)] pub type uv_gid_t = libc::types::os::arch::posix88::gid_t;\n #[cfg(windows)] pub type uv_uid_t = libc::c_uchar;"}, {"sha": "fd59fb2382bf71861d9360cc5f9f2d10178c1d6d", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa31c43a0ab50208e58680cf5f29eec8ff76357/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=5aa31c43a0ab50208e58680cf5f29eec8ff76357", "patch": "@@ -267,7 +267,7 @@ pub mod types {\n                 pub enum timezone {}\n             }\n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::c_uint;\n+                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = u32;\n                 pub type sa_family_t = u16;\n@@ -309,6 +309,16 @@ pub mod types {\n                     ipv6mr_multiaddr: in6_addr,\n                     ipv6mr_interface: c_uint,\n                 }\n+                pub struct addrinfo {\n+                    ai_flags: c_int,\n+                    ai_family: c_int,\n+                    ai_socktype: c_int,\n+                    ai_protocol: c_int,\n+                    ai_addrlen: socklen_t,\n+                    ai_addr: *sockaddr,\n+                    ai_canonname: *c_char,\n+                    ai_next: *addrinfo\n+                }\n             }\n         }\n \n@@ -624,7 +634,7 @@ pub mod types {\n                 pub enum timezone {}\n             }\n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::c_uint;\n+                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = u32;\n                 pub type sa_family_t = u8;\n@@ -671,6 +681,16 @@ pub mod types {\n                     ipv6mr_multiaddr: in6_addr,\n                     ipv6mr_interface: c_uint,\n                 }\n+                pub struct addrinfo {\n+                    ai_flags: c_int,\n+                    ai_family: c_int,\n+                    ai_socktype: c_int,\n+                    ai_protocol: c_int,\n+                    ai_addrlen: socklen_t,\n+                    ai_canonname: *c_char,\n+                    ai_addr: *sockaddr,\n+                    ai_next: *addrinfo\n+                }\n             }\n         }\n \n@@ -811,7 +831,7 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::{c_int, c_uint};\n+                use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n \n                 pub type SOCKET = c_uint;\n                 pub type socklen_t = c_int;\n@@ -854,6 +874,16 @@ pub mod types {\n                     ipv6mr_multiaddr: in6_addr,\n                     ipv6mr_interface: c_uint,\n                 }\n+                pub struct addrinfo {\n+                    ai_flags: c_int,\n+                    ai_family: c_int,\n+                    ai_socktype: c_int,\n+                    ai_protocol: c_int,\n+                    ai_addrlen: size_t,\n+                    ai_canonname: *c_char,\n+                    ai_addr: *sockaddr,\n+                    ai_next: *addrinfo\n+                }\n             }\n         }\n \n@@ -1121,7 +1151,7 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n-                use libc::types::os::arch::c95::{c_int, c_uint};\n+                use libc::types::os::arch::c95::{c_char, c_int, c_uint};\n \n                 pub type socklen_t = c_int;\n                 pub type sa_family_t = u8;\n@@ -1168,6 +1198,16 @@ pub mod types {\n                     ipv6mr_multiaddr: in6_addr,\n                     ipv6mr_interface: c_uint,\n                 }\n+                pub struct addrinfo {\n+                    ai_flags: c_int,\n+                    ai_family: c_int,\n+                    ai_socktype: c_int,\n+                    ai_protocol: c_int,\n+                    ai_addrlen: socklen_t,\n+                    ai_canonname: *c_char,\n+                    ai_addr: *sockaddr,\n+                    ai_next: *addrinfo\n+                }\n             }\n         }\n "}]}