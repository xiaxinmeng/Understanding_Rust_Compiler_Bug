{"sha": "ef04b07239d75f2b6bb66f18855f3af695d76e1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDRiMDcyMzlkNzVmMmI2YmI2NmYxODg1NWYzYWY2OTVkNzZlMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T01:46:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T01:46:20Z"}, "message": "Auto merge of #27120 - apasel422:associated-item-error, r=arielb1\n\nPreviously, these would both be labeled as methods.", "tree": {"sha": "15c7277a3450345a9a2028d1157d2714142dc16a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15c7277a3450345a9a2028d1157d2714142dc16a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef04b07239d75f2b6bb66f18855f3af695d76e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef04b07239d75f2b6bb66f18855f3af695d76e1c", "html_url": "https://github.com/rust-lang/rust/commit/ef04b07239d75f2b6bb66f18855f3af695d76e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef04b07239d75f2b6bb66f18855f3af695d76e1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be23d44a539deff16170d2af8fa10fb1cecc6a01", "url": "https://api.github.com/repos/rust-lang/rust/commits/be23d44a539deff16170d2af8fa10fb1cecc6a01", "html_url": "https://github.com/rust-lang/rust/commit/be23d44a539deff16170d2af8fa10fb1cecc6a01"}, {"sha": "ce856a55f6585969580d95cf773de5703ded7f09", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce856a55f6585969580d95cf773de5703ded7f09", "html_url": "https://github.com/rust-lang/rust/commit/ce856a55f6585969580d95cf773de5703ded7f09"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "a0d06e5e1244a2559e3bd940f418b301f9769e58", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef04b07239d75f2b6bb66f18855f3af695d76e1c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef04b07239d75f2b6bb66f18855f3af695d76e1c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=ef04b07239d75f2b6bb66f18855f3af695d76e1c", "patch": "@@ -321,5 +321,7 @@ register_diagnostics! {\n     E0432, // unresolved import\n     E0433, // failed to resolve\n     E0434, // can't capture dynamic environment in a fn item\n-    E0435  // attempt to use a non-constant value in a constant\n+    E0435, // attempt to use a non-constant value in a constant\n+    E0437, // type is not a member of trait\n+    E0438, // const is not a member of trait\n }"}, {"sha": "a3a0398e5ce1d58f5735d66066a70c2076f7580c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef04b07239d75f2b6bb66f18855f3af695d76e1c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef04b07239d75f2b6bb66f18855f3af695d76e1c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ef04b07239d75f2b6bb66f18855f3af695d76e1c", "patch": "@@ -123,6 +123,10 @@ pub enum ResolutionError<'a> {\n     UndeclaredAssociatedType,\n     /// error E0407: method is not a member of trait\n     MethodNotMemberOfTrait(Name, &'a str),\n+    /// error E0437: type is not a member of trait\n+    TypeNotMemberOfTrait(Name, &'a str),\n+    /// error E0438: const is not a member of trait\n+    ConstNotMemberOfTrait(Name, &'a str),\n     /// error E0408: variable `{}` from pattern #1 is not bound in pattern\n     VariableNotBoundInPattern(Name, usize),\n     /// error E0409: variable is bound with different mode in pattern #{} than in pattern #1\n@@ -220,6 +224,18 @@ fn resolve_error<'b, 'a:'b, 'tcx:'a>(resolver: &'b Resolver<'a, 'tcx>, span: syn\n                          method,\n                          trait_);\n         },\n+        ResolutionError::TypeNotMemberOfTrait(type_, trait_) => {\n+            span_err!(resolver.session, span, E0437,\n+                         \"type `{}` is not a member of trait `{}`\",\n+                         type_,\n+                         trait_);\n+        },\n+        ResolutionError::ConstNotMemberOfTrait(const_, trait_) => {\n+            span_err!(resolver.session, span, E0438,\n+                         \"const `{}` is not a member of trait `{}`\",\n+                         const_,\n+                         trait_);\n+        },\n         ResolutionError::VariableNotBoundInPattern(variable_name, pattern_number) => {\n             span_err!(resolver.session, span, E0408,\n                          \"variable `{}` from pattern #1 is not bound in pattern #{}\",\n@@ -2385,10 +2401,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         for impl_item in impl_items {\n                             match impl_item.node {\n                                 ConstImplItem(..) => {\n-                                    // If this is a trait impl, ensure the method\n+                                    // If this is a trait impl, ensure the const\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.ident.name,\n-                                                          impl_item.span);\n+                                                          impl_item.span,\n+                                        |n, s| ResolutionError::ConstNotMemberOfTrait(n, s));\n                                     this.with_constant_rib(|this| {\n                                         visit::walk_impl_item(this, impl_item);\n                                     });\n@@ -2397,7 +2414,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     // If this is a trait impl, ensure the method\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.ident.name,\n-                                                          impl_item.span);\n+                                                          impl_item.span,\n+                                        |n, s| ResolutionError::MethodNotMemberOfTrait(n, s));\n \n                                     // We also need a new scope for the method-\n                                     // specific type parameters.\n@@ -2410,10 +2428,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     });\n                                 }\n                                 TypeImplItem(ref ty) => {\n-                                    // If this is a trait impl, ensure the method\n+                                    // If this is a trait impl, ensure the type\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.ident.name,\n-                                                          impl_item.span);\n+                                                          impl_item.span,\n+                                        |n, s| ResolutionError::TypeNotMemberOfTrait(n, s));\n \n                                     this.visit_ty(ty);\n                                 }\n@@ -2426,15 +2445,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         });\n     }\n \n-    fn check_trait_item(&self, name: Name, span: Span) {\n+    fn check_trait_item<F>(&self, name: Name, span: Span, err: F)\n+        where F: FnOnce(Name, &str) -> ResolutionError {\n         // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n         if let Some((did, ref trait_ref)) = self.current_trait_ref {\n             if !self.trait_item_map.contains_key(&(name, did)) {\n                 let path_str = path_names_to_string(&trait_ref.path, 0);\n                 resolve_error(self,\n                               span,\n-                              ResolutionError::MethodNotMemberOfTrait(name,\n-                                                                       &*path_str));\n+                              err(name, &*path_str));\n             }\n         }\n     }"}, {"sha": "0ed4e62778e8b7297f91a42b05d0cde82ae4341e", "filename": "src/test/compile-fail/trait-impl-can-not-have-untraitful-items.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef04b07239d75f2b6bb66f18855f3af695d76e1c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef04b07239d75f2b6bb66f18855f3af695d76e1c/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-can-not-have-untraitful-items.rs?ref=ef04b07239d75f2b6bb66f18855f3af695d76e1c", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_consts)]\n+\n trait A { }\n \n impl A for isize {\n+    const BAR: () = (); //~ ERROR const `BAR` is not a member of trait `A`\n+    type Baz = (); //~ ERROR type `Baz` is not a member of trait `A`\n     fn foo(&self) { } //~ ERROR method `foo` is not a member of trait `A`\n }\n ", "previous_filename": "src/test/compile-fail/trait-impl-can-not-have-untraitful-methods.rs"}]}