{"sha": "711ff657e260def1c05d27d6447fa6b6733a5b2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMWZmNjU3ZTI2MGRlZjFjMDVkMjdkNjQ0N2ZhNmI2NzMzYTViMmE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-23T17:24:49Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-23T17:24:49Z"}, "message": "Get rid of visit_fn_block in visit.rs\n\nIt seems redundant and error-prone.", "tree": {"sha": "5bd79df2a3a78da038a101924e2f260b40a61661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd79df2a3a78da038a101924e2f260b40a61661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/711ff657e260def1c05d27d6447fa6b6733a5b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/711ff657e260def1c05d27d6447fa6b6733a5b2a", "html_url": "https://github.com/rust-lang/rust/commit/711ff657e260def1c05d27d6447fa6b6733a5b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/711ff657e260def1c05d27d6447fa6b6733a5b2a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e65239ad81af6123bcf9e4b5173dad2ced99c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e65239ad81af6123bcf9e4b5173dad2ced99c2", "html_url": "https://github.com/rust-lang/rust/commit/25e65239ad81af6123bcf9e4b5173dad2ced99c2"}], "stats": {"total": 38, "additions": 3, "deletions": 35}, "files": [{"sha": "3a2b6ef966c2ec2d0259f58197b4cffe8dc9d0e5", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/711ff657e260def1c05d27d6447fa6b6733a5b2a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711ff657e260def1c05d27d6447fa6b6733a5b2a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=711ff657e260def1c05d27d6447fa6b6733a5b2a", "patch": "@@ -337,9 +337,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           visit_ty: bind walk_ty(e, _, _, _),\n           visit_constr: bind walk_constr(e, _, _, _, _, _),\n           visit_fn_proto:\n-              bind visit_fn_proto_with_scope(e, _, _, _, _, _, _, _, _),\n-          visit_fn_block:\n-              bind visit_fn_block_with_scope(e, _, _, _, _, _, _)\n+              bind visit_fn_proto_with_scope(e, _, _, _, _, _, _, _, _)\n           with *visit::default_visitor()};\n     visit::visit_crate(*c, cons(scope_crate, @nil), visit::mk_vt(v));\n     e.used_imports.track = false;\n@@ -444,15 +442,6 @@ fn visit_fn_proto_with_scope(e: @env, decl: ast::fn_decl, tp: [ast::ty_param],\n     visit::visit_fn_proto(decl, tp, body, sp, name, id, cons(scope, @sc), v);\n }\n \n-fn visit_fn_block_with_scope(_e: @env, decl: fn_decl, blk: ast::blk,\n-                             span: span, id: node_id,\n-                             sc: scopes, v: vt<scopes>) {\n-    let scope = scope_fn_expr(decl, id, []);\n-    log(debug, (\"scope=\", scope));\n-    visit::visit_fn_block(decl, blk, span, id, cons(scope, @sc), v);\n-    log(debug, (\"unscope\"));\n-}\n-\n fn visit_block_with_scope(b: ast::blk, sc: scopes, v: vt<scopes>) {\n     let pos = @mutable 0u, loc = @mutable 0u;\n     let block_sc = cons(scope_block(b, pos, loc), @sc);"}, {"sha": "3c77db09d499680fe82b3e4ab853e961874dff0e", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/711ff657e260def1c05d27d6447fa6b6733a5b2a/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/711ff657e260def1c05d27d6447fa6b6733a5b2a/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=711ff657e260def1c05d27d6447fa6b6733a5b2a", "patch": "@@ -36,10 +36,7 @@ type visitor<E> =\n       visit_fn_proto: fn@(fn_decl, [ty_param], blk, span, fn_ident, node_id,\n                           E, vt<E>),\n \n-      // Function sugar like { || ... }:\n-      visit_fn_block: fn@(fn_decl, blk, span, node_id, E, vt<E>),\n-\n-      // Invoked by both visit_fn_proto and visit_fn_block above.\n+      // Invoked by both visit_fn_proto above.\n       // Intended to be a common flow point for all fn decls in AST.\n       visit_fn_body: fn@(fn_decl, blk, span, fn_ident, node_id, E, vt<E>)};\n \n@@ -58,7 +55,6 @@ fn default_visitor<E>() -> visitor<E> {\n           visit_ty: bind skip_ty::<E>(_, _, _),\n           visit_constr: bind visit_constr::<E>(_, _, _, _, _),\n           visit_fn_proto: bind visit_fn_proto::<E>(_, _, _, _, _, _, _, _),\n-          visit_fn_block: bind visit_fn_block::<E>(_, _, _, _, _, _),\n           visit_fn_body: bind visit_fn_body::<E>(_, _, _, _, _, _, _)};\n }\n \n@@ -220,11 +216,6 @@ fn visit_fn_proto<E>(decl: fn_decl, _tp: [ty_param], body: blk, sp: span,\n     v.visit_fn_body(decl, body, sp, i, id, e, v);\n }\n \n-fn visit_fn_block<E>(decl: fn_decl, body: blk, sp: span, id: node_id,\n-                     e: E, v: vt<E>) {\n-    v.visit_fn_body(decl, body, sp, option::none, id, e, v);\n-}\n-\n fn visit_fn_body<E>(decl: fn_decl, body: blk, _sp: span,\n                     _name: fn_ident, _id: node_id,\n                     e: E, v: vt<E>) {\n@@ -321,7 +312,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         v.visit_fn_proto(decl, [], body, ex.span, none, ex.id, e, v);\n       }\n       expr_fn_block(decl, body) {\n-        v.visit_fn_block(decl, body, ex.span, ex.id, e, v);\n+        v.visit_fn_proto(decl, [], body, ex.span, none, ex.id, e, v);\n       }\n       expr_block(b) { v.visit_block(b, e, v); }\n       expr_assign(a, b) { v.visit_expr(b, e, v); v.visit_expr(a, e, v); }\n@@ -398,7 +389,6 @@ type simple_visitor =\n       visit_ty: fn@(@ty),\n       visit_constr: fn@(@path, span, node_id),\n       visit_fn_proto: fn@(fn_decl, [ty_param], blk, span, fn_ident, node_id),\n-      visit_fn_block: fn@(fn_decl, blk, span, node_id),\n       visit_fn_body: fn@(fn_decl, blk, span, fn_ident, node_id)};\n \n fn simple_ignore_ty(_t: @ty) {}\n@@ -420,8 +410,6 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_fn_proto:\n               fn(_d: fn_decl, _tps: [ty_param], _b: blk, _sp: span,\n                  _ident: fn_ident, _id: node_id) { },\n-          visit_fn_block:\n-              fn(_f: fn_decl, _b: blk, _sp: span, _node_id: node_id) { },\n           visit_fn_body:\n               fn(_f: fn_decl, _b: blk, _sp: span,\n                  _nm: fn_ident, _node_id: node_id) { }\n@@ -489,13 +477,6 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(decl, tps, body, sp, ident, id);\n         visit_fn_proto(decl, tps, body, sp, ident, id, e, v);\n     }\n-    fn v_fn_block(f: fn@(fn_decl, blk, span, node_id),\n-                  fn_decl: fn_decl, blk: blk,\n-                  sp: span, node_id: node_id,\n-                  &&e: (), v: vt<()>) {\n-        f(fn_decl, blk, sp, node_id);\n-        visit_fn_block(fn_decl, blk, sp, node_id, e, v);\n-    }\n     fn v_fn_body(f: fn@(fn_decl, blk, span, fn_ident, node_id),\n                  fn_decl: fn_decl, blk: blk,\n                  sp: span, name: fn_ident, node_id: node_id,\n@@ -524,8 +505,6 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n                 visit_constr: bind v_constr(v.visit_constr, _, _, _, _, _),\n                 visit_fn_proto:\n                     bind v_fn(v.visit_fn_proto, _, _, _, _, _, _, _, _),\n-                visit_fn_block:\n-                    bind v_fn_block(v.visit_fn_block, _, _, _, _, _, _),\n                 visit_fn_body:\n                     bind v_fn_body(v.visit_fn_body, _, _, _, _, _, _, _),\n                });"}]}