{"sha": "87903420968a958e9f420788edb181ddca7b8b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTAzNDIwOTY4YTk1OGU5ZjQyMDc4OGVkYjE4MWRkY2E3YjhiMzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-23T13:41:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-23T13:41:33Z"}, "message": "Merge #2374\n\n2374: Simplify HasSource r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6551407c9053a4e521a3f4cda018b8b1c1f9cb00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6551407c9053a4e521a3f4cda018b8b1c1f9cb00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87903420968a958e9f420788edb181ddca7b8b31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2TcNCRBK7hj4Ov3rIwAAdHIIAGU9BnVKPQEN8Ln5kq+a8hkz\nWFwv5WhRXfKKTw6ILe53TVf1y+PqxybC4nfsrus5cUt3OdV3MJwfKmw76cBfLFgP\nwe+XY7q9j8EYY+QNb+qD4mbZ5ToLj7z3gLf9NVLmWTXuw2X60JUv+DCfBhmJPa5S\nSNjRDoyNibs47GLSvUWvpNKTBeRo6lGjBi/oexql4AI9iAUmIvBJuAKQSHI555R3\nEv4Isats+sthhaR4kZH0U/eaFNnA0WSq3m5lMiUj2noC21XZ0s4zqaO4CKL7qDvy\nqsteXxr9Sr/lf32qNVBLGlOeH0AuvqUqtoB9a6SlDbW76GImOqi9HlRgd7Br4iU=\n=YIm0\n-----END PGP SIGNATURE-----\n", "payload": "tree 6551407c9053a4e521a3f4cda018b8b1c1f9cb00\nparent cf8ac6e3c75b501cf59ba7b4d97c58efb9cb2adb\nparent 338ff052c2fe658d6fcf88888918b2e372129e21\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574516493 +0000\ncommitter GitHub <noreply@github.com> 1574516493 +0000\n\nMerge #2374\n\n2374: Simplify HasSource r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87903420968a958e9f420788edb181ddca7b8b31", "html_url": "https://github.com/rust-lang/rust/commit/87903420968a958e9f420788edb181ddca7b8b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87903420968a958e9f420788edb181ddca7b8b31/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf8ac6e3c75b501cf59ba7b4d97c58efb9cb2adb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8ac6e3c75b501cf59ba7b4d97c58efb9cb2adb", "html_url": "https://github.com/rust-lang/rust/commit/cf8ac6e3c75b501cf59ba7b4d97c58efb9cb2adb"}, {"sha": "338ff052c2fe658d6fcf88888918b2e372129e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/338ff052c2fe658d6fcf88888918b2e372129e21", "html_url": "https://github.com/rust-lang/rust/commit/338ff052c2fe658d6fcf88888918b2e372129e21"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "50c9a79fc00cc72ea0193873973f7330bfaae150", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=87903420968a958e9f420788edb181ddca7b8b31", "patch": "@@ -9,7 +9,7 @@ use hir_def::{\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n-    nameres::per_ns::PerNs,\n+    nameres::{per_ns::PerNs, raw::ImportId},\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n     ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n@@ -30,7 +30,7 @@ use crate::{\n         TypeAliasId,\n     },\n     ty::{InferenceResult, Namespace, TraitRef},\n-    Either, HasSource, ImportId, Name, Source, Ty,\n+    Either, HasSource, Name, Source, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -129,17 +129,6 @@ impl Module {\n         })\n     }\n \n-    /// Returns the syntax of the last path segment corresponding to this import\n-    pub fn import_source(\n-        self,\n-        db: &impl HirDatabase,\n-        import: ImportId,\n-    ) -> Either<ast::UseTree, ast::ExternCrateItem> {\n-        let src = self.definition_source(db);\n-        let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n-        source_map.get(&src.value, import)\n-    }\n-\n     /// Returns the crate this module is part of.\n     pub fn krate(self) -> Crate {\n         Crate { crate_id: self.id.krate }\n@@ -189,11 +178,13 @@ impl Module {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef, Option<ImportId>)> {\n+    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef, Option<Import>)> {\n         db.crate_def_map(self.id.krate)[self.id.module_id]\n             .scope\n             .entries()\n-            .map(|(name, res)| (name.clone(), res.def.into(), res.import))\n+            .map(|(name, res)| {\n+                (name.clone(), res.def.into(), res.import.map(|id| Import { parent: self, id }))\n+            })\n             .collect()\n     }\n \n@@ -236,6 +227,11 @@ impl Module {\n     }\n }\n \n+pub struct Import {\n+    pub(crate) parent: Module,\n+    pub(crate) id: ImportId,\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructField {\n     pub(crate) parent: VariantDef,"}, {"sha": "402f821bf9f8b9010bc49dd8adc56c54481c4087", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=87903420968a958e9f420788edb181ddca7b8b31", "patch": "@@ -5,24 +5,24 @@ use hir_expand::either::Either;\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{DefDatabase, HirDatabase},\n     ids::AstItemDef,\n-    Const, Enum, EnumVariant, FieldSource, Function, HasBody, MacroDef, Module, ModuleSource,\n-    Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Const, Enum, EnumVariant, FieldSource, Function, HasBody, Import, MacroDef, Module,\n+    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::Source;\n \n pub trait HasSource {\n     type Ast;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<Self::Ast>;\n+    fn source(self, db: &impl DefDatabase) -> Source<Self::Ast>;\n }\n \n /// NB: Module is !HasSource, because it has two source nodes at the same time:\n /// definition and declaration.\n impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ModuleSource> {\n+    pub fn definition_source(self, db: &impl DefDatabase) -> Source<ModuleSource> {\n         let def_map = db.crate_def_map(self.id.krate);\n         let src = def_map[self.id.module_id].definition_source(db);\n         src.map(|it| match it {\n@@ -33,18 +33,15 @@ impl Module {\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n-    pub fn declaration_source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> Option<Source<ast::Module>> {\n+    pub fn declaration_source(self, db: &impl DefDatabase) -> Option<Source<ast::Module>> {\n         let def_map = db.crate_def_map(self.id.krate);\n         def_map[self.id.module_id].declaration_source(db)\n     }\n }\n \n impl HasSource for StructField {\n     type Ast = FieldSource;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<FieldSource> {\n+    fn source(self, db: &impl DefDatabase) -> Source<FieldSource> {\n         let var = VariantId::from(self.parent);\n         let src = var.child_source(db);\n         src.map(|it| match it[self.id].clone() {\n@@ -55,64 +52,74 @@ impl HasSource for StructField {\n }\n impl HasSource for Struct {\n     type Ast = ast::StructDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StructDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::StructDef> {\n         self.id.0.source(db)\n     }\n }\n impl HasSource for Union {\n     type Ast = ast::StructDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StructDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::StructDef> {\n         self.id.0.source(db)\n     }\n }\n impl HasSource for Enum {\n     type Ast = ast::EnumDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::EnumDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::EnumDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for EnumVariant {\n     type Ast = ast::EnumVariant;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::EnumVariant> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::EnumVariant> {\n         self.parent.id.child_source(db).map(|map| map[self.id].clone())\n     }\n }\n impl HasSource for Function {\n     type Ast = ast::FnDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::FnDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::FnDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Const {\n     type Ast = ast::ConstDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::ConstDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::ConstDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Static {\n     type Ast = ast::StaticDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::StaticDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::StaticDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for Trait {\n     type Ast = ast::TraitDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::TraitDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::TraitDef> {\n         self.id.source(db)\n     }\n }\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::TypeAliasDef> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::TypeAliasDef> {\n         self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::MacroCall> {\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::MacroCall> {\n         Source { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n     }\n }\n+impl HasSource for Import {\n+    type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n+\n+    /// Returns the syntax of the last path segment corresponding to this import\n+    fn source(self, db: &impl DefDatabase) -> Source<Self::Ast> {\n+        let src = self.parent.definition_source(db);\n+        let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n+        src.with_value(source_map.get(&src.value, self.id))\n+    }\n+}\n \n pub trait HasBodySource: HasBody + HasSource\n where"}, {"sha": "3ae5df8d5ee5ebc91de23e45325a8e95c121cc56", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=87903420968a958e9f420788edb181ddca7b8b31", "patch": "@@ -29,7 +29,7 @@ pub use hir_expand::db::{\n \n #[salsa::query_group(HirDatabaseStorage)]\n #[salsa::requires(salsa::Database)]\n-pub trait HirDatabase: DefDatabase + AstDatabase {\n+pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::infer_query)]\n     fn infer(&self, def: DefWithBody) -> Arc<InferenceResult>;\n "}, {"sha": "e51d4d063cb1569863804c7fa888088ef8e52b31", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=87903420968a958e9f420788edb181ddca7b8b31", "patch": "@@ -53,8 +53,8 @@ pub use crate::{\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Docs, Enum,\n         EnumVariant, FieldSource, Function, GenericDef, GenericParam, HasAttrs, HasBody, ImplBlock,\n-        Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField,\n-        Trait, TypeAlias, Union, VariantDef,\n+        Import, Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct,\n+        StructField, Trait, TypeAlias, Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n@@ -70,7 +70,6 @@ pub use crate::{\n pub use hir_def::{\n     builtin_type::BuiltinType,\n     docs::Documentation,\n-    nameres::raw::ImportId,\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };"}, {"sha": "63e25e0bf10dfa802c1f12e4514b1e1c2dd8d9cb", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87903420968a958e9f420788edb181ddca7b8b31/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=87903420968a958e9f420788edb181ddca7b8b31", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, Either, PathResolution};\n+use hir::{Adt, Either, HasSource, PathResolution};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -27,7 +27,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 }\n                 if Some(module) == ctx.module {\n                     if let Some(import) = import {\n-                        if let Either::A(use_tree) = module.import_source(ctx.db, import) {\n+                        if let Either::A(use_tree) = import.source(ctx.db).value {\n                             if use_tree.syntax().text_range().contains_inclusive(ctx.offset) {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n                                 tested_by!(dont_complete_current_use);"}]}