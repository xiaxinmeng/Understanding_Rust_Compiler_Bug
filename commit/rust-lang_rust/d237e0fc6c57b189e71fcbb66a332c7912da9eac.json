{"sha": "d237e0fc6c57b189e71fcbb66a332c7912da9eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzdlMGZjNmM1N2IxODllNzFmY2JiNjZhMzMyYzc5MTJkYTllYWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-20T19:18:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-20T19:18:50Z"}, "message": "Rollup merge of #69185 - RalfJung:const-prop-lints, r=oli-obk\n\nUnify and improve const-prop lints\n\nAdd a single helper method for all lints emitted by const-prop, and make that lint different from the CTFE `const_err` lint. Also consistently check overflow on *arithmetic*, not on the assertion, to make behavior the same for debug and release builds.\n\nSee [this summary comment](https://github.com/rust-lang/rust/pull/69185#issuecomment-587924754) for details and the latest status.\n\nIn terms of lint formatting, I went for what seems to be the better style: have a general message above the code, and then a specific message at the span:\n```\nerror: this arithmetic operation will overflow\n  --> $DIR/const-err2.rs:21:18\n   |\nLL |     let a_i128 = -std::i128::MIN;\n   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n```\nWe could also just have the specific message above and no text at the span if that is preferred.\n\nI also converted some of the existing tests to use compiletest revisions, so that the same test can check a bunch of different compile flags.\n\nFixes https://github.com/rust-lang/rust/issues/69020.\nHelps with https://github.com/rust-lang/rust/issues/69021: debug/release are now consistent, but the assoc-const test in that issue still fails (there is a FIXME in the PR for this). The reason seems to be that const-prop notices the assoc const in `T::N << 42` and does not even bother calling `const_prop` on that operation.\nHas no effect on https://github.com/rust-lang/rust/issues/61821; the duplication there has entirely different reasons.", "tree": {"sha": "4f101dcf923581344c4655a4284f63c858c187ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f101dcf923581344c4655a4284f63c858c187ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d237e0fc6c57b189e71fcbb66a332c7912da9eac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTtuaCRBK7hj4Ov3rIwAAdHIIABiHBeSBylXmf/Oft1D1irLF\neLlwEcUv1ncox1no+NTd7Y5BmI5gvCuwAtiR9bezaCqJNckzCAwbHvst0NaspVLu\nbwveTNzxaEcfFoSB/ULU+1lWxt4m2He740cfSW9NDXTAM9icP+r4tACw3kn3YzO3\nk2pRuCTJ8yU0xtHTpd3siXYRXiyMJVrdR6WVBufuzdJny+k05sqU1DRMDf+8IjCY\nWgP8OOi8PkJ1Is9IvCPpr1Ex39HWapWEcIpn4nC/ciOMcHBSip5lzJZw42pSzgfe\ndjsyuidB8vDBxrsaIKZHtmoc8gqCZymFdxMUI1yzyB9p3AdgZSwaMQ5BOIpLFAU=\n=7Mz5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f101dcf923581344c4655a4284f63c858c187ea\nparent b680a5e7c2aa9821287a699f3e60183086c42643\nparent 88d14bfbc986802601d2414ea5d6322e0056917b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1582226330 +0100\ncommitter GitHub <noreply@github.com> 1582226330 +0100\n\nRollup merge of #69185 - RalfJung:const-prop-lints, r=oli-obk\n\nUnify and improve const-prop lints\n\nAdd a single helper method for all lints emitted by const-prop, and make that lint different from the CTFE `const_err` lint. Also consistently check overflow on *arithmetic*, not on the assertion, to make behavior the same for debug and release builds.\n\nSee [this summary comment](https://github.com/rust-lang/rust/pull/69185#issuecomment-587924754) for details and the latest status.\n\nIn terms of lint formatting, I went for what seems to be the better style: have a general message above the code, and then a specific message at the span:\n```\nerror: this arithmetic operation will overflow\n  --> $DIR/const-err2.rs:21:18\n   |\nLL |     let a_i128 = -std::i128::MIN;\n   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n```\nWe could also just have the specific message above and no text at the span if that is preferred.\n\nI also converted some of the existing tests to use compiletest revisions, so that the same test can check a bunch of different compile flags.\n\nFixes https://github.com/rust-lang/rust/issues/69020.\nHelps with https://github.com/rust-lang/rust/issues/69021: debug/release are now consistent, but the assoc-const test in that issue still fails (there is a FIXME in the PR for this). The reason seems to be that const-prop notices the assoc const in `T::N << 42` and does not even bother calling `const_prop` on that operation.\nHas no effect on https://github.com/rust-lang/rust/issues/61821; the duplication there has entirely different reasons.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d237e0fc6c57b189e71fcbb66a332c7912da9eac", "html_url": "https://github.com/rust-lang/rust/commit/d237e0fc6c57b189e71fcbb66a332c7912da9eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d237e0fc6c57b189e71fcbb66a332c7912da9eac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b680a5e7c2aa9821287a699f3e60183086c42643", "url": "https://api.github.com/repos/rust-lang/rust/commits/b680a5e7c2aa9821287a699f3e60183086c42643", "html_url": "https://github.com/rust-lang/rust/commit/b680a5e7c2aa9821287a699f3e60183086c42643"}, {"sha": "88d14bfbc986802601d2414ea5d6322e0056917b", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d14bfbc986802601d2414ea5d6322e0056917b", "html_url": "https://github.com/rust-lang/rust/commit/88d14bfbc986802601d2414ea5d6322e0056917b"}], "stats": {"total": 2722, "additions": 1613, "deletions": 1109}, "files": [{"sha": "0e7625da30ad1c4e16d7a92efe53627f6d2bb97e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -305,6 +305,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     store.register_renamed(\"unstable_name_collision\", \"unstable_name_collisions\");\n     store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n     store.register_renamed(\"async_idents\", \"keyword_idents\");\n+    store.register_renamed(\"exceeding_bitshifts\", \"arithmetic_overflow\");\n     store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");"}, {"sha": "9e05133132e05508917c0a9c269491d84b09fe96", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 86, "deletions": 91, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -4,7 +4,8 @@\n use std::borrow::Cow;\n use std::cell::Cell;\n \n-use rustc::mir::interpret::{InterpError, InterpResult, Scalar};\n+use rustc::lint;\n+use rustc::mir::interpret::{InterpResult, Scalar};\n use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n@@ -292,7 +293,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine>,\n     tcx: TyCtxt<'tcx>,\n-    source: MirSource<'tcx>,\n     can_const_prop: IndexVec<Local, ConstPropMode>,\n     param_env: ParamEnv<'tcx>,\n     // FIXME(eddyb) avoid cloning these two fields more than once,\n@@ -372,7 +372,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         ConstPropagator {\n             ecx,\n             tcx,\n-            source,\n             param_env,\n             can_const_prop,\n             // FIXME(eddyb) avoid cloning these two fields more than once,\n@@ -501,19 +500,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn report_panic_as_lint(&self, source_info: SourceInfo, panic: AssertKind<u64>) -> Option<()> {\n-        // Somewhat convoluted way to re-use the CTFE error reporting code.\n+    fn report_assert_as_lint(\n+        &self,\n+        lint: &'static lint::Lint,\n+        source_info: SourceInfo,\n+        message: &'static str,\n+        panic: AssertKind<u64>,\n+    ) -> Option<()> {\n         let lint_root = self.lint_root(source_info)?;\n-        let error = InterpError::MachineStop(Box::new(format!(\"{:?}\", panic)));\n-        let mut diagnostic = error_to_const_error(&self.ecx, error.into());\n-        diagnostic.span = source_info.span; // fix the span\n-        diagnostic.report_as_lint(\n-            self.tcx.at(source_info.span),\n-            \"this expression will panic at runtime\",\n-            lint_root,\n-            None,\n-        );\n-        None\n+        self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n+            let mut err = lint.build(message);\n+            err.span_label(source_info.span, format!(\"{:?}\", panic));\n+            err.emit()\n+        });\n+        return None;\n     }\n \n     fn check_unary_op(\n@@ -530,7 +530,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // `AssertKind` only has an `OverflowNeg` variant, so make sure that is\n             // appropriate to use.\n             assert_eq!(op, UnOp::Neg, \"Neg is the only UnOp that can overflow\");\n-            self.report_panic_as_lint(source_info, AssertKind::OverflowNeg)?;\n+            self.report_assert_as_lint(\n+                lint::builtin::ARITHMETIC_OVERFLOW,\n+                source_info,\n+                \"this arithmetic operation will overflow\",\n+                AssertKind::OverflowNeg,\n+            )?;\n         }\n \n         Some(())\n@@ -542,27 +547,24 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         left: &Operand<'tcx>,\n         right: &Operand<'tcx>,\n         source_info: SourceInfo,\n-        place_layout: TyLayout<'tcx>,\n     ) -> Option<()> {\n         let r =\n             self.use_ecx(|this| this.ecx.read_immediate(this.ecx.eval_operand(right, None)?))?;\n         // Check for exceeding shifts *even if* we cannot evaluate the LHS.\n         if op == BinOp::Shr || op == BinOp::Shl {\n-            let left_bits = place_layout.size.bits();\n+            // We need the type of the LHS. We cannot use `place_layout` as that is the type\n+            // of the result, which for checked binops is not the same!\n+            let left_ty = left.ty(&self.local_decls, self.tcx);\n+            let left_size_bits = self.ecx.layout_of(left_ty).ok()?.size.bits();\n             let right_size = r.layout.size;\n             let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n-            if r_bits.map_or(false, |b| b >= left_bits as u128) {\n-                let lint_root = self.lint_root(source_info)?;\n-                self.tcx.struct_span_lint_hir(\n-                    ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n-                    lint_root,\n-                    source_info.span,\n-                    |lint| {\n-                        let dir = if op == BinOp::Shr { \"right\" } else { \"left\" };\n-                        lint.build(&format!(\"attempt to shift {} with overflow\", dir)).emit()\n-                    },\n-                );\n-                return None;\n+            if r_bits.map_or(false, |b| b >= left_size_bits as u128) {\n+                self.report_assert_as_lint(\n+                    lint::builtin::ARITHMETIC_OVERFLOW,\n+                    source_info,\n+                    \"this arithmetic operation will overflow\",\n+                    AssertKind::Overflow(op),\n+                )?;\n             }\n         }\n \n@@ -572,7 +574,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n             Ok(overflow)\n         })? {\n-            self.report_panic_as_lint(source_info, AssertKind::Overflow(op))?;\n+            self.report_assert_as_lint(\n+                lint::builtin::ARITHMETIC_OVERFLOW,\n+                source_info,\n+                \"this arithmetic operation will overflow\",\n+                AssertKind::Overflow(op),\n+            )?;\n         }\n \n         Some(())\n@@ -595,8 +602,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        let overflow_check = self.tcx.sess.overflow_checks();\n-\n         // Perform any special handling for specific Rvalue types.\n         // Generally, checks here fall into one of two categories:\n         //   1. Additional checking to provide useful lints to the user\n@@ -606,20 +611,25 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         //        - In this case, we'll return `None` from this function to stop evaluation.\n         match rvalue {\n             // Additional checking: give lints to the user if an overflow would occur.\n-            // If `overflow_check` is set, running const-prop on the `Assert` terminators\n-            // will already generate the appropriate messages.\n-            Rvalue::UnaryOp(op, arg) if !overflow_check => {\n+            // We do this here and not in the `Assert` terminator as that terminator is\n+            // only sometimes emitted (overflow checks can be disabled), but we want to always\n+            // lint.\n+            Rvalue::UnaryOp(op, arg) => {\n                 trace!(\"checking UnaryOp(op = {:?}, arg = {:?})\", op, arg);\n                 self.check_unary_op(*op, arg, source_info)?;\n             }\n-\n-            // Additional checking: check for overflows on integer binary operations and report\n-            // them to the user as lints.\n-            // If `overflow_check` is set, running const-prop on the `Assert` terminators\n-            // will already generate the appropriate messages.\n-            Rvalue::BinaryOp(op, left, right) if !overflow_check => {\n+            Rvalue::BinaryOp(op, left, right) => {\n                 trace!(\"checking BinaryOp(op = {:?}, left = {:?}, right = {:?})\", op, left, right);\n-                self.check_binary_op(*op, left, right, source_info, place_layout)?;\n+                self.check_binary_op(*op, left, right, source_info)?;\n+            }\n+            Rvalue::CheckedBinaryOp(op, left, right) => {\n+                trace!(\n+                    \"checking CheckedBinaryOp(op = {:?}, left = {:?}, right = {:?})\",\n+                    op,\n+                    left,\n+                    right\n+                );\n+                self.check_binary_op(*op, left, right, source_info)?;\n             }\n \n             // Do not try creating references (#67862)\n@@ -898,54 +908,39 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             }\n                             Operand::Constant(_) => {}\n                         }\n-                        let span = terminator.source_info.span;\n-                        let hir_id = self\n-                            .tcx\n-                            .hir()\n-                            .as_local_hir_id(self.source.def_id())\n-                            .expect(\"some part of a failing const eval must be local\");\n-                        self.tcx.struct_span_lint_hir(\n-                            ::rustc::lint::builtin::CONST_ERR,\n-                            hir_id,\n-                            span,\n-                            |lint| {\n-                                let msg = match msg {\n-                                    AssertKind::Overflow(_)\n-                                    | AssertKind::OverflowNeg\n-                                    | AssertKind::DivisionByZero\n-                                    | AssertKind::RemainderByZero => msg.description().to_owned(),\n-                                    AssertKind::BoundsCheck { ref len, ref index } => {\n-                                        let len = self\n-                                            .eval_operand(len, source_info)\n-                                            .expect(\"len must be const\");\n-                                        let len = match self.ecx.read_scalar(len) {\n-                                            Ok(ScalarMaybeUndef::Scalar(Scalar::Raw {\n-                                                data,\n-                                                ..\n-                                            })) => data,\n-                                            other => bug!(\"const len not primitive: {:?}\", other),\n-                                        };\n-                                        let index = self\n-                                            .eval_operand(index, source_info)\n-                                            .expect(\"index must be const\");\n-                                        let index = match self.ecx.read_scalar(index) {\n-                                            Ok(ScalarMaybeUndef::Scalar(Scalar::Raw {\n-                                                data,\n-                                                ..\n-                                            })) => data,\n-                                            other => bug!(\"const index not primitive: {:?}\", other),\n-                                        };\n-                                        format!(\n-                                            \"index out of bounds: \\\n-                                            the len is {} but the index is {}\",\n-                                            len, index,\n-                                        )\n-                                    }\n-                                    // Need proper const propagator for these\n-                                    _ => return,\n-                                };\n-                                lint.build(&msg).emit()\n-                            },\n+                        let msg = match msg {\n+                            AssertKind::DivisionByZero => AssertKind::DivisionByZero,\n+                            AssertKind::RemainderByZero => AssertKind::RemainderByZero,\n+                            AssertKind::BoundsCheck { ref len, ref index } => {\n+                                let len =\n+                                    self.eval_operand(len, source_info).expect(\"len must be const\");\n+                                let len = self\n+                                    .ecx\n+                                    .read_scalar(len)\n+                                    .unwrap()\n+                                    .to_machine_usize(&self.tcx)\n+                                    .unwrap();\n+                                let index = self\n+                                    .eval_operand(index, source_info)\n+                                    .expect(\"index must be const\");\n+                                let index = self\n+                                    .ecx\n+                                    .read_scalar(index)\n+                                    .unwrap()\n+                                    .to_machine_usize(&self.tcx)\n+                                    .unwrap();\n+                                AssertKind::BoundsCheck { len, index }\n+                            }\n+                            // Overflow is are already covered by checks on the binary operators.\n+                            AssertKind::Overflow(_) | AssertKind::OverflowNeg => return,\n+                            // Need proper const propagator for these.\n+                            _ => return,\n+                        };\n+                        self.report_assert_as_lint(\n+                            lint::builtin::UNCONDITIONAL_PANIC,\n+                            source_info,\n+                            \"this operation will panic at runtime\",\n+                            msg,\n                         );\n                     } else {\n                         if self.should_const_prop(value) {"}, {"sha": "603ed4640a0cffc5f78707b91922ef1dbac32cbc", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -41,9 +41,15 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub EXCEEDING_BITSHIFTS,\n+    pub ARITHMETIC_OVERFLOW,\n     Deny,\n-    \"shift exceeds the type's number of bits\"\n+    \"arithmetic operation overflows\"\n+}\n+\n+declare_lint! {\n+    pub UNCONDITIONAL_PANIC,\n+    Deny,\n+    \"operation will cause a panic at runtime\"\n }\n \n declare_lint! {\n@@ -495,7 +501,8 @@ declare_lint_pass! {\n     /// that are used by other parts of the compiler.\n     HardwiredLints => [\n         ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n-        EXCEEDING_BITSHIFTS,\n+        ARITHMETIC_OVERFLOW,\n+        UNCONDITIONAL_PANIC,\n         UNUSED_IMPORTS,\n         UNUSED_EXTERN_CRATES,\n         UNUSED_QUALIFICATIONS,"}, {"sha": "d502673e2f880d85f539f8188347c7800a68015a", "filename": "src/test/codegen/issue-56927.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fcodegen%2Fissue-56927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-56927.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -23,7 +23,7 @@ pub fn test1(s: &mut S) {\n \n // CHECK-LABEL: @test2\n // CHECK: store i32 4, i32* %{{.+}}, align 4\n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n #[no_mangle]\n pub fn test2(s: &mut S) {\n     s.arr[usize::MAX / 4 + 1] = 4;"}, {"sha": "fc10824f0c03cf3e85384b3a09d61e8667592d9b", "filename": "src/test/compile-fail/consts/const-err3.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,20 +0,0 @@\n-#![feature(rustc_attrs)]\n-#![deny(const_err)]\n-\n-fn black_box<T>(_: T) {\n-    unimplemented!()\n-}\n-\n-fn main() {\n-    let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n-    let c = 200u8 * 4;\n-    //~^ ERROR const_err\n-    let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n-    let _e = [5u8][1];\n-    //~^ ERROR const_err\n-    black_box(b);\n-    black_box(c);\n-    black_box(d);\n-}"}, {"sha": "0eac2a1d57f8f291567dff0242d1a49727e527d3", "filename": "src/test/incremental/warnings-reemitted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -2,8 +2,8 @@\n // compile-flags: -Coverflow-checks=on\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![warn(const_err)]\n+#![warn(arithmetic_overflow)]\n \n fn main() {\n-    let _ = 255u8 + 1; //~ WARNING attempt to add with overflow\n+    let _ = 255u8 + 1; //~ WARNING operation will overflow\n }"}, {"sha": "1cd53e309ebf97da02d0b65b852b0d932f3ca9cb", "filename": "src/test/run-fail/mir_indexing_oob_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -2,7 +2,7 @@\n \n const C: [u32; 5] = [0; 5];\n \n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n fn test() -> u32 {\n     C[10]\n }"}, {"sha": "64b260993c994ac01ab1a84d99fa348eb3134519", "filename": "src/test/run-fail/mir_indexing_oob_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -2,7 +2,7 @@\n \n const C: &'static [u8; 5] = b\"hello\";\n \n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n fn test() -> u8 {\n     C[10]\n }"}, {"sha": "3688088439bbfe75f2a78f1e4bb0aca2a70e93c0", "filename": "src/test/run-fail/mir_indexing_oob_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -2,7 +2,7 @@\n \n const C: &'static [u8; 5] = b\"hello\";\n \n-#[allow(const_err)]\n+#[allow(unconditional_panic)]\n fn mir() -> u8 {\n     C[10]\n }"}, {"sha": "5ca91314d95a25deac58a5676b5e9631d5fe8301", "filename": "src/test/run-fail/overflowing-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-add.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to add with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _x = 200u8 + 200u8 + 200u8;"}, {"sha": "977cfea0fe05dbd13ea851cf8057f621781c0bb2", "filename": "src/test/run-fail/overflowing-lsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-1.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "3517dacde3aa31fe51098466c56eae8cbe426c8b", "filename": "src/test/run-fail/overflowing-lsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-2.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "4a575c3fa7f6a07b8dc7cea36dea130266c03b7b", "filename": "src/test/run-fail/overflowing-lsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-3.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift left with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "0d3912ce13f8133deef886c9ec719bad315ac5f5", "filename": "src/test/run-fail/overflowing-lsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-lsh-4.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -4,7 +4,7 @@\n // This function is checking that our automatic truncation does not\n // sidestep the overflow checking.\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "2dfc9bb5ae472d7e7f0cf73bff94580b68c17464", "filename": "src/test/run-fail/overflowing-mul.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to multiply with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let x = 200u8 * 4;"}, {"sha": "f512aa35beda66e6005d31ef635d9bbba9118c2a", "filename": "src/test/run-fail/overflowing-neg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-neg.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to negate with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _x = -std::i8::MIN;"}, {"sha": "4592b2b6260bd1889809ac9854e94d071f72023b", "filename": "src/test/run-fail/overflowing-rsh-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-1.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "066267b770db23f119fb657f747aa840459eada7", "filename": "src/test/run-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-2.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "67e78482866cbbd536efdfb3b6272392cf490fb7", "filename": "src/test/run-fail/overflowing-rsh-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-3.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "1877d5c9685262bda66ac59be73bd82194e87c24", "filename": "src/test/run-fail/overflowing-rsh-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-4.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -4,7 +4,7 @@\n // This function is checking that our (type-based) automatic\n // truncation does not sidestep the overflow checking.\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "20ef324a82aeb54048586fea5918529049b77529", "filename": "src/test/run-fail/overflowing-rsh-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn main() {"}, {"sha": "589a98bab0401e535dcb91ffc04f438f58c8eef0", "filename": "src/test/run-fail/overflowing-rsh-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to shift right with overflow'\n // compile-flags: -C debug-assertions\n \n-#![warn(exceeding_bitshifts)]\n+#![warn(arithmetic_overflow)]\n #![warn(const_err)]\n #![feature(const_indexing)]\n "}, {"sha": "fb096c31957ee61ce18fbeeaee246b1712259720", "filename": "src/test/run-fail/overflowing-sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:thread 'main' panicked at 'attempt to subtract with overflow'\n // compile-flags: -C debug-assertions\n \n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _x = 42u8 - (42u8 + 1);"}, {"sha": "dc6719ce025f2c38f161ecc94c1fde0e7ab35803", "filename": "src/test/run-fail/promoted_div_by_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,4 +1,4 @@\n-#![allow(const_err)]\n+#![allow(unconditional_panic, const_err)]\n \n // error-pattern: attempt to divide by zero\n "}, {"sha": "3c42da4b1d8ed43dc787499a2592b5b2748b4e18", "filename": "src/test/run-fail/promoted_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,4 +1,4 @@\n-#![allow(const_err)]\n+#![allow(arithmetic_overflow)]\n \n // error-pattern: overflow\n // compile-flags: -C overflow-checks=yes"}, {"sha": "492afa9372c6269228e6bfe7556a2ffc74dfe109", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,11 +1,11 @@\n // build-pass\n // ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n \n-#![warn(const_err)]\n+#![warn(const_err, unconditional_panic)]\n \n fn main() {\n     &{ [1, 2, 3][4] };\n-    //~^ WARN index out of bounds\n+    //~^ WARN operation will panic\n     //~| WARN reaching this expression at runtime will panic or abort\n     //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "6e0e7fedb7b97d39d826fff98213631d9e5f7ab9", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,14 +1,14 @@\n-warning: index out of bounds: the len is 3 but the index is 4\n+warning: this operation will panic at runtime\n   --> $DIR/array-literal-index-oob.rs:7:8\n    |\n LL |     &{ [1, 2, 3][4] };\n-   |        ^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 4\n    |\n note: the lint level is defined here\n-  --> $DIR/array-literal-index-oob.rs:4:9\n+  --> $DIR/array-literal-index-oob.rs:4:20\n    |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n+LL | #![warn(const_err, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n \n warning: reaching this expression at runtime will panic or abort\n   --> $DIR/array-literal-index-oob.rs:7:8\n@@ -17,6 +17,12 @@ LL |     &{ [1, 2, 3][4] };\n    |     ---^^^^^^^^^^^^--\n    |        |\n    |        indexing out of bounds: the len is 3 but the index is 4\n+   |\n+note: the lint level is defined here\n+  --> $DIR/array-literal-index-oob.rs:4:9\n+   |\n+LL | #![warn(const_err, unconditional_panic)]\n+   |         ^^^^^^^^^\n \n warning: erroneous constant used\n   --> $DIR/array-literal-index-oob.rs:7:5"}, {"sha": "d1c5f4f3f32eec62ec0273a65aed57989ce7429e", "filename": "src/test/ui/consts/const-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // compile-flags: -Zforce-overflow-checks=on\n \n-#![allow(exceeding_bitshifts)]\n+#![allow(arithmetic_overflow)]\n #![warn(const_err)]\n \n fn black_box<T>(_: T) {"}, {"sha": "5aeeec4bd1435afce765d3fd62d97bd56a64daca", "filename": "src/test/ui/consts/const-err2.noopt.stderr", "status": "renamed", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.noopt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,50 +1,48 @@\n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:18:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n-note: the lint level is defined here\n-  --> $DIR/const-err2.rs:11:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:20:18\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n    |\n LL |     let a_i128 = -std::i128::MIN;\n    |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:22:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:24:18\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n    |\n LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:26:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:28:13\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:30:14\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n    |\n LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to 7 previous errors\n ", "previous_filename": "src/test/ui/consts/const-err2.stderr"}, {"sha": "5aeeec4bd1435afce765d3fd62d97bd56a64daca", "filename": "src/test/ui/consts/const-err2.opt.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,48 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^ attempt to multiply with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "5aeeec4bd1435afce765d3fd62d97bd56a64daca", "filename": "src/test/ui/consts/const-err2.opt_with_overflow_checks.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.opt_with_overflow_checks.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,48 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:19:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:21:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:23:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:25:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:27:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^ attempt to multiply with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/const-err2.rs:29:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/const-err2.rs:31:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "2c6a987180bb1f85c9f6204e73329bf9a6ac28e2", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -2,33 +2,34 @@\n // optimized compilation and unoptimized compilation and thus would\n // lead to different lints being emitted\n \n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n #![feature(rustc_attrs)]\n-#![allow(exceeding_bitshifts)]\n-\n-#![deny(const_err)]\n \n fn black_box<T>(_: T) {\n     unimplemented!()\n }\n \n fn main() {\n     let a = -std::i8::MIN;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let a_i128 = -std::i128::MIN;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let b_i128 = std::i128::MIN - std::i128::MAX;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let c = 200u8 * 4;\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n+    //~^ ERROR arithmetic operation will overflow\n     let _e = [5u8][1];\n-    //~^ ERROR const_err\n+    //~^ ERROR operation will panic\n     black_box(a);\n     black_box(a_i128);\n     black_box(b);"}, {"sha": "43aba4a8b012b00a6022751d586c24a74c90bb4f", "filename": "src/test/ui/consts/const-err3.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,38 +0,0 @@\n-// needed because negating int::MIN will behave differently between\n-// optimized compilation and unoptimized compilation and thus would\n-// lead to different lints being emitted\n-\n-// build-fail\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![feature(rustc_attrs)]\n-#![allow(exceeding_bitshifts)]\n-\n-#![deny(const_err)]\n-\n-fn black_box<T>(_: T) {\n-    unimplemented!()\n-}\n-\n-fn main() {\n-    let a = -std::i8::MIN;\n-    //~^ ERROR const_err\n-    let a_i128 = -std::i128::MIN;\n-    //~^ ERROR const_err\n-    let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n-    let b_i128 = std::i128::MIN - std::i128::MAX;\n-    //~^ ERROR const_err\n-    let c = 200u8 * 4;\n-    //~^ ERROR const_err\n-    let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n-    let _e = [5u8][1];\n-    //~^ ERROR const_err\n-    black_box(a);\n-    black_box(a_i128);\n-    black_box(b);\n-    black_box(b_i128);\n-    black_box(c);\n-    black_box(d);\n-}"}, {"sha": "05f64b87fcce6debabaeb621523f95f9cb275e8c", "filename": "src/test/ui/consts/const-err3.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,50 +0,0 @@\n-error: attempt to negate with overflow\n-  --> $DIR/const-err3.rs:18:13\n-   |\n-LL |     let a = -std::i8::MIN;\n-   |             ^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/const-err3.rs:11:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: attempt to negate with overflow\n-  --> $DIR/const-err3.rs:20:18\n-   |\n-LL |     let a_i128 = -std::i128::MIN;\n-   |                  ^^^^^^^^^^^^^^^\n-\n-error: attempt to add with overflow\n-  --> $DIR/const-err3.rs:22:13\n-   |\n-LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^\n-\n-error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:24:18\n-   |\n-LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: attempt to multiply with overflow\n-  --> $DIR/const-err3.rs:26:13\n-   |\n-LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^\n-\n-error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:28:13\n-   |\n-LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^\n-\n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err3.rs:30:14\n-   |\n-LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "608e6e112a10be5f4ad7657af9bd3e0958de17a6", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let array = [std::env::args().len()];\n-    array[1]; //~ ERROR index out of bounds\n+    array[1]; //~ ERROR operation will panic\n }"}, {"sha": "4188efd021d1351558a0965a93d58097b6d1fe76", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/index_out_of_bounds_propagated.rs:5:5\n    |\n LL |     array[1];\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "94c1593240bc6109f2f2bc06cad8d7756a2c3698", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,78 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:12:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:41\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "034dea06568e0899f2302141f0edabcdfe22acf0", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,72 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:41\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "94c1593240bc6109f2f2bc06cad8d7756a2c3698", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,78 @@\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:12:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^ attempt to subtract with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:20\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n+warning: this arithmetic operation will overflow\n+  --> $DIR/promoted_errors.rs:14:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ attempt to divide by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:41\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ dividing by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/promoted_errors.rs:9:9\n+   |\n+LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n+   |         ^^^^^^^^^\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1 / (1 - 1));\n+   |                    ^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:20:14\n+   |\n+LL |     let _x = 1 / (1 - 1);\n+   |              ^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n+\n+warning: erroneous constant used\n+  --> $DIR/promoted_errors.rs:22:20\n+   |\n+LL |     println!(\"{}\", 1 / (false as u32));\n+   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+warning: this operation will panic at runtime\n+  --> $DIR/promoted_errors.rs:26:14\n+   |\n+LL |     let _x = 1 / (false as u32);\n+   |              ^^^^^^^^^^^^^^^^^^ attempt to divide by zero\n+"}, {"sha": "3ab6ce28478c39ae0d72ff356c1d89fbb5d37ae1", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,23 +1,28 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-pass\n // ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n-// compile-flags: -O\n \n-#![warn(const_err)]\n+#![warn(const_err, arithmetic_overflow, unconditional_panic)]\n \n fn main() {\n     println!(\"{}\", 0u32 - 1);\n+    //[opt_with_overflow_checks,noopt]~^ WARN [arithmetic_overflow]\n     let _x = 0u32 - 1;\n-    //~^ WARN const_err\n+    //~^ WARN [arithmetic_overflow]\n     println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n+    //~^ WARN [unconditional_panic]\n+    //~| WARN panic or abort [const_err]\n     //~| WARN erroneous constant used [const_err]\n     let _x = 1 / (1 - 1);\n-    //~^ WARN const_err\n+    //~^ WARN [unconditional_panic]\n     println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n+    //~^ WARN [unconditional_panic]\n+    //~| WARN panic or abort [const_err]\n     //~| WARN erroneous constant used [const_err]\n     let _x = 1 / (false as u32);\n-    //~^ WARN const_err\n+    //~^ WARN [unconditional_panic]\n }"}, {"sha": "08ae5c7a32b65f81258193581c931d2e418688ef", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,60 +0,0 @@\n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:9:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:11:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:15:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:17:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:21:14\n-   |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "62c77f76d9064ca7325cc14369ea7dc2b59ecb03", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,24 +0,0 @@\n-// build-pass\n-// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![warn(const_err)]\n-\n-fn main() {\n-    println!(\"{}\", 0u32 - 1);\n-    //~^ WARN attempt to subtract with overflow\n-    let _x = 0u32 - 1;\n-    //~^ WARN attempt to subtract with overflow\n-    println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (1 - 1);\n-    //~^ WARN const_err\n-    println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN attempt to divide by zero [const_err]\n-    //~| WARN const_err\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (false as u32);\n-    //~^ WARN const_err\n-}"}, {"sha": "d1a9cb958e1553d9e10111552c3af5904067b935", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,66 +0,0 @@\n-warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:8:20\n-   |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors2.rs:5:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-\n-warning: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:10:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:12:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:16:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors2.rs:18:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:22:14\n-   |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "5bffe0206294d80718fdba1d52d1f8cfe11f3ec3", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n \n fn main() {\n-    [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+    [0; 3][3u64 as usize]; //~ ERROR this operation will panic at runtime\n }"}, {"sha": "7bb4acb235aa7b726434d4590ff9a1f983ace006", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 3 but the index is 3\n+error: this operation will panic at runtime\n   --> $DIR/const-prop-ice.rs:4:5\n    |\n LL |     [0; 3][3u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 3\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "d533e394c06fb5cab82cfe774d70b7c7b5d76909", "filename": "src/test/ui/consts/const-prop-ice2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     enum Enum { One=1 }\n     let xs=[0;1 as usize];\n-    println!(\"{}\", xs[Enum::One as usize]); //~ ERROR the len is 1 but the index is 1\n+    println!(\"{}\", xs[Enum::One as usize]); //~ ERROR this operation will panic at runtime\n }"}, {"sha": "73405eca3408c2c5b1441172bfbf17b50500defa", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,10 +1,10 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/const-prop-ice2.rs:6:20\n    |\n LL |     println!(\"{}\", xs[Enum::One as usize]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "38911c3dcf69298c4dc2c21a2018865d4a0a3e6d", "filename": "src/test/ui/consts/issue-64059-2.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,6 +0,0 @@\n-// compile-flags: -C overflow-checks=on -O\n-// run-pass\n-\n-fn main() {\n-    let _ = -(-0.0);\n-}"}, {"sha": "02c8b7250324df6b97b83bffdf5be1ccb67f24ed", "filename": "src/test/ui/consts/issue-64059.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,3 +1,8 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // run-pass\n \n fn main() {"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.noopt.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.noopt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,30 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:21:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:23:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:25:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:27:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.opt.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,30 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:21:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:23:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:25:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:27:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "c48a106ef4656ce0287be97b5ec7b186d9c79fbc", "filename": "src/test/ui/consts/issue-69020.opt_with_overflow_checks.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.opt_with_overflow_checks.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,30 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:21:22\n+   |\n+LL |     const NEG: i32 = -i32::MIN + T::NEG;\n+   |                      ^^^^^^^^^ attempt to negate with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-69020.rs:23:22\n+   |\n+LL |     const ADD: i32 = (i32::MAX+1) + T::ADD;\n+   |                      ^^^^^^^^^^^^ attempt to add with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:25:22\n+   |\n+LL |     const DIV: i32 = (1/0) + T::DIV;\n+   |                      ^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-69020.rs:27:22\n+   |\n+LL |     const OOB: i32 = [1][1] + T::OOB;\n+   |                      ^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e079feb04d4479e0640b54bf49b5181503ed8a0e", "filename": "src/test/ui/consts/issue-69020.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,29 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n+#![crate_type=\"lib\"]\n+\n+use std::i32;\n+\n+pub trait Foo {\n+    const NEG: i32;\n+    const ADD: i32;\n+    const DIV: i32;\n+    const OOB: i32;\n+}\n+\n+// These constants cannot be evaluated already (they depend on `T::N`), so\n+// they can just be linted like normal run-time code.  But codegen works\n+// a bit different in const context, so this test makes sure that we still catch overflow.\n+impl<T: Foo> Foo for Vec<T> {\n+    const NEG: i32 = -i32::MIN + T::NEG;\n+    //~^ ERROR arithmetic operation will overflow\n+    const ADD: i32 = (i32::MAX+1) + T::ADD;\n+    //~^ ERROR arithmetic operation will overflow\n+    const DIV: i32 = (1/0) + T::DIV;\n+    //~^ ERROR operation will panic\n+    const OOB: i32 = [1][1] + T::OOB;\n+    //~^ ERROR operation will panic\n+}"}, {"sha": "2290e3d5e76377ca1e4c8eba32a40bf42a94e6ef", "filename": "src/test/ui/huge-array-simple-32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-32.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -4,7 +4,7 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-#![allow(exceeding_bitshifts)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _fat: [u8; (1<<31)+(1<<15)] = //~ ERROR too big for the current architecture"}, {"sha": "02c961fc5fa580761a70716eb056e3a6ec0dbd72", "filename": "src/test/ui/huge-array-simple-64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -4,7 +4,7 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-#![allow(exceeding_bitshifts)]\n+#![allow(arithmetic_overflow)]\n \n fn main() {\n     let _fat: [u8; (1<<61)+(1<<31)] = //~ ERROR too big for the current architecture"}, {"sha": "5c38d7c42f6b2797b2f1cf1c2532facea982a4f7", "filename": "src/test/ui/issues/issue-54348.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     [1][0u64 as usize];\n-    [1][1.5 as usize]; //~ ERROR index out of bounds\n-    [1][1u64 as usize]; //~ ERROR index out of bounds\n+    [1][1.5 as usize]; //~ ERROR operation will panic\n+    [1][1u64 as usize]; //~ ERROR operation will panic\n }"}, {"sha": "6b67125e36cb286e96d854ab94091c5509dbeaae", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,16 +1,16 @@\n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:5:5\n    |\n LL |     [1][1.5 as usize];\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n-   = note: `#[deny(const_err)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n-error: index out of bounds: the len is 1 but the index is 1\n+error: this operation will panic at runtime\n   --> $DIR/issue-54348.rs:6:5\n    |\n LL |     [1][1u64 as usize];\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3556ec08247b5af88e540557ec093ae18119e9d7", "filename": "src/test/ui/issues/issue-8460-const.noopt.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.noopt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "3556ec08247b5af88e540557ec093ae18119e9d7", "filename": "src/test/ui/issues/issue-8460-const.opt.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "3556ec08247b5af88e540557ec093ae18119e9d7", "filename": "src/test/ui/issues/issue-8460-const.opt_with_overflow_checks.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,150 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:14:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n+   |\n+   = note: `#[deny(arithmetic_overflow)]` on by default\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:16:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:18:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:20:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:24:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:26:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+   |\n+   = note: `#[deny(unconditional_panic)]` on by default\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:30:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to divide by zero\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:46:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/issue-8460-const.rs:48:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:52:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:54:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:58:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: this operation will panic at runtime\n+  --> $DIR/issue-8460-const.rs:60:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "53005e46d2f47234372d58d1a27a02816a23f63f", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,5 +1,9 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n #![deny(const_err)]\n \n@@ -8,63 +12,51 @@ use std::thread;\n \n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n+    //~^ ERROR arithmetic operation will overflow\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ ERROR operation will panic\n }"}, {"sha": "d7373948cb9e0519b03ba75aee12fcf156ecc2ff", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "removed", "additions": 0, "deletions": 224, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,224 +0,0 @@\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-8460-const.rs:4:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:13:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:25:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:30:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:32:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:34:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:36:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:38:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:49:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:55:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:60:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:62:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:64:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:66:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:68:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: aborting due to 36 previous errors\n-"}, {"sha": "afea859bb65a905ea32ed8f151d90c4833fdc4b7", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,58 +0,0 @@\n-// build-fail\n-// compile-flags: -C overflow-checks=on -O\n-\n-#![deny(const_err)]\n-\n-use std::{isize, i8, i16, i32, i64, i128};\n-use std::thread;\n-\n-fn main() {\n-    assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n-    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n-    assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n-    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-    assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n-}"}, {"sha": "e25d560fe0ce34e03b2cb53b030343fcb7e9b48c", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "removed", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,152 +0,0 @@\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-8460-const2.rs:4:9\n-   |\n-LL | #![deny(const_err)]\n-   |         ^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:12:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:14:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:18:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:20:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:22:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:24:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:26:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:28:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:30:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:32:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:34:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:36:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:38:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:42:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:44:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:48:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-   |                                    ^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:50:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:52:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:54:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:56:36\n-   |\n-LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n-   |                                    ^^^^^^^^^\n-\n-error: aborting due to 24 previous errors\n-"}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,146 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+   |\n+LL | #![deny(arithmetic_overflow, const_err)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+   |\n+LL |       let n = 1u8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+   |\n+LL |       let n = 1u16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+   |\n+LL |       let n = 1u32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+   |\n+LL |       let n = 1u64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+   |\n+LL |       let n = 1i8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+   |\n+LL |       let n = 1i16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+   |\n+LL |       let n = 1i32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+   |\n+LL |       let n = 1i64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+   |\n+LL |       let n = 1u8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+   |\n+LL |       let n = 1u16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+   |\n+LL |       let n = 1u32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+   |\n+LL |       let n = 1u64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+   |\n+LL |       let n = 1i8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+   |\n+LL |       let n = 1i16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+   |\n+LL |       let n = 1i32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+   |\n+LL |       let n = 1i64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+   |\n+LL |       let n = n << 8;\n+   |               ^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+   |\n+LL |       let n = 1u8 << -8;\n+   |               ^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+   |\n+LL |       let n = 1u8 << (4+4);\n+   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+   |\n+LL |       let n = 1i64 >> [64][0];\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+   |\n+LL |       let n = 1_isize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+   |\n+LL |       let n = 1_usize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,146 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+   |\n+LL | #![deny(arithmetic_overflow, const_err)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+   |\n+LL |       let n = 1u8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+   |\n+LL |       let n = 1u16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+   |\n+LL |       let n = 1u32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+   |\n+LL |       let n = 1u64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+   |\n+LL |       let n = 1i8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+   |\n+LL |       let n = 1i16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+   |\n+LL |       let n = 1i32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+   |\n+LL |       let n = 1i64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+   |\n+LL |       let n = 1u8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+   |\n+LL |       let n = 1u16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+   |\n+LL |       let n = 1u32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+   |\n+LL |       let n = 1u64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+   |\n+LL |       let n = 1i8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+   |\n+LL |       let n = 1i16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+   |\n+LL |       let n = 1i32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+   |\n+LL |       let n = 1i64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+   |\n+LL |       let n = n << 8;\n+   |               ^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+   |\n+LL |       let n = 1u8 << -8;\n+   |               ^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+   |\n+LL |       let n = 1u8 << (4+4);\n+   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+   |\n+LL |       let n = 1i64 >> [64][0];\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+   |\n+LL |       let n = 1_isize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+   |\n+LL |       let n = 1_usize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -0,0 +1,146 @@\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n+   |\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-exceeding-bitshifts.rs:9:9\n+   |\n+LL | #![deny(arithmetic_overflow, const_err)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n+   |\n+LL |       let n = 1u8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n+   |\n+LL |       let n = 1u16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n+   |\n+LL |       let n = 1u32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n+   |\n+LL |       let n = 1u64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n+   |\n+LL |       let n = 1i8 << 8;\n+   |               ^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n+   |\n+LL |       let n = 1i16 << 16;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n+   |\n+LL |       let n = 1i32 << 32;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n+   |\n+LL |       let n = 1i64 << 64;\n+   |               ^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+   |\n+LL |       let n = 1u8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+   |\n+LL |       let n = 1u16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:48:15\n+   |\n+LL |       let n = 1u32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:50:15\n+   |\n+LL |       let n = 1u64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:52:15\n+   |\n+LL |       let n = 1i8 >> 8;\n+   |               ^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:54:15\n+   |\n+LL |       let n = 1i16 >> 16;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:56:15\n+   |\n+LL |       let n = 1i32 >> 32;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:58:15\n+   |\n+LL |       let n = 1i64 >> 64;\n+   |               ^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:62:15\n+   |\n+LL |       let n = n << 8;\n+   |               ^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:64:15\n+   |\n+LL |       let n = 1u8 << -8;\n+   |               ^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:69:15\n+   |\n+LL |       let n = 1u8 << (4+4);\n+   |               ^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:71:15\n+   |\n+LL |       let n = 1i64 >> [64][0];\n+   |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:77:15\n+   |\n+LL |       let n = 1_isize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:78:15\n+   |\n+LL |       let n = 1_usize << BITS;\n+   |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "7deee5320a87880e4adb01de4f649400db40f798", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d237e0fc6c57b189e71fcbb66a332c7912da9eac/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=d237e0fc6c57b189e71fcbb66a332c7912da9eac", "patch": "@@ -1,50 +1,79 @@\n+// revisions: noopt opt opt_with_overflow_checks\n+//[noopt]compile-flags: -C opt-level=0\n+//[opt]compile-flags: -O\n+//[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n+\n // build-fail\n-// compile-flags: -O\n \n-#![deny(exceeding_bitshifts, const_err)]\n+#![crate_type=\"lib\"]\n+#![deny(arithmetic_overflow, const_err)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n-fn main() {\n+pub trait Foo {\n+    const N: i32;\n+}\n+\n+impl<T: Foo> Foo for Vec<T> {\n+    const N: i32 = T::N << 42; // FIXME this should warn\n+}\n+\n+pub fn foo(x: i32) {\n+    let _ = x << 42; //~ ERROR: arithmetic operation will overflow\n+}\n+\n+pub fn main() {\n       let n = 1u8 << 7;\n-      let n = 1u8 << 8;   //~ ERROR: attempt to shift left with overflow\n+      let n = 1u8 << 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1u16 << 15;\n-      let n = 1u16 << 16; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u16 << 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1u32 << 31;\n-      let n = 1u32 << 32; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u32 << 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1u64 << 63;\n-      let n = 1u64 << 64; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u64 << 64; //~ ERROR: arithmetic operation will overflow\n       let n = 1i8 << 7;\n-      let n = 1i8 << 8;   //~ ERROR: attempt to shift left with overflow\n+      let n = 1i8 << 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1i16 << 15;\n-      let n = 1i16 << 16; //~ ERROR: attempt to shift left with overflow\n+      let n = 1i16 << 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1i32 << 31;\n-      let n = 1i32 << 32; //~ ERROR: attempt to shift left with overflow\n+      let n = 1i32 << 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1i64 << 63;\n-      let n = 1i64 << 64; //~ ERROR: attempt to shift left with overflow\n+      let n = 1i64 << 64; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1u8 >> 7;\n-      let n = 1u8 >> 8;   //~ ERROR: attempt to shift right with overflow\n+      let n = 1u8 >> 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1u16 >> 15;\n-      let n = 1u16 >> 16; //~ ERROR: attempt to shift right with overflow\n+      let n = 1u16 >> 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1u32 >> 31;\n-      let n = 1u32 >> 32; //~ ERROR: attempt to shift right with overflow\n+      let n = 1u32 >> 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1u64 >> 63;\n-      let n = 1u64 >> 64; //~ ERROR: attempt to shift right with overflow\n+      let n = 1u64 >> 64; //~ ERROR: arithmetic operation will overflow\n       let n = 1i8 >> 7;\n-      let n = 1i8 >> 8;   //~ ERROR: attempt to shift right with overflow\n+      let n = 1i8 >> 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1i16 >> 15;\n-      let n = 1i16 >> 16; //~ ERROR: attempt to shift right with overflow\n+      let n = 1i16 >> 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1i32 >> 31;\n-      let n = 1i32 >> 32; //~ ERROR: attempt to shift right with overflow\n+      let n = 1i32 >> 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1i64 >> 63;\n-      let n = 1i64 >> 64; //~ ERROR: attempt to shift right with overflow\n+      let n = 1i64 >> 64; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1u8;\n       let n = n << 7;\n-      let n = n << 8; //~ ERROR: attempt to shift left with overflow\n+      let n = n << 8; //~ ERROR: arithmetic operation will overflow\n \n-      let n = 1u8 << -8; //~ ERROR: attempt to shift left with overflow\n+      let n = 1u8 << -8; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1i8<<(1isize+-1);\n+\n+      let n = 1u8 << (4+3);\n+      let n = 1u8 << (4+4); //~ ERROR: arithmetic operation will overflow\n+      let n = 1i64 >> [63][0];\n+      let n = 1i64 >> [64][0]; //~ ERROR: arithmetic operation will overflow\n+\n+      #[cfg(target_pointer_width = \"32\")]\n+      const BITS: usize = 32;\n+      #[cfg(target_pointer_width = \"64\")]\n+      const BITS: usize = 64;\n+      let n = 1_isize << BITS; //~ ERROR: arithmetic operation will overflow\n+      let n = 1_usize << BITS; //~ ERROR: arithmetic operation will overflow\n }"}, {"sha": "658577213b3cd57c2ac23db5db6390aa90d1ee11", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.stderr", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,116 +0,0 @@\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:10:15\n-   |\n-LL |       let n = 1u8 << 8;\n-   |               ^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:4:9\n-   |\n-LL | #![deny(exceeding_bitshifts, const_err)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:12:15\n-   |\n-LL |       let n = 1u16 << 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:14:15\n-   |\n-LL |       let n = 1u32 << 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:16:15\n-   |\n-LL |       let n = 1u64 << 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:18:15\n-   |\n-LL |       let n = 1i8 << 8;\n-   |               ^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:20:15\n-   |\n-LL |       let n = 1i16 << 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:15\n-   |\n-LL |       let n = 1i32 << 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:24:15\n-   |\n-LL |       let n = 1i64 << 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n-   |\n-LL |       let n = 1u8 >> 8;\n-   |               ^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n-   |\n-LL |       let n = 1u16 >> 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n-   |\n-LL |       let n = 1u32 >> 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n-   |\n-LL |       let n = 1u64 >> 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n-   |\n-LL |       let n = 1i8 >> 8;\n-   |               ^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n-   |\n-LL |       let n = 1i16 >> 16;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n-   |\n-LL |       let n = 1i32 >> 32;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n-   |\n-LL |       let n = 1i64 >> 64;\n-   |               ^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n-   |\n-LL |       let n = n << 8;\n-   |               ^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n-   |\n-LL |       let n = 1u8 << -8;\n-   |               ^^^^^^^^^\n-\n-error: aborting due to 18 previous errors\n-"}, {"sha": "2a7cbc10f7746c6959e79c9728c51ec228cb4d7c", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,20 +0,0 @@\n-// build-fail\n-// compile-flags: -O\n-\n-#![deny(exceeding_bitshifts, const_err)]\n-#![allow(unused_variables)]\n-#![allow(dead_code)]\n-\n-fn main() {\n-      let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ ERROR: attempt to shift left with overflow\n-      let n = 1i64 >> [63][0];\n-      let n = 1i64 >> [64][0]; //~ ERROR: attempt to shift right with overflow\n-\n-      #[cfg(target_pointer_width = \"32\")]\n-      const BITS: usize = 32;\n-      #[cfg(target_pointer_width = \"64\")]\n-      const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ ERROR: attempt to shift left with overflow\n-      let n = 1_usize << BITS; //~ ERROR: attempt to shift left with overflow\n-}"}, {"sha": "ac9f3b1e56bc3953f5ed12eadd9bcd1cc66fbf4c", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,32 +0,0 @@\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:10:15\n-   |\n-LL |       let n = 1u8 << (4+4);\n-   |               ^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/lint-exceeding-bitshifts2.rs:4:9\n-   |\n-LL | #![deny(exceeding_bitshifts, const_err)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n-\n-error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:12:15\n-   |\n-LL |       let n = 1i64 >> [64][0];\n-   |               ^^^^^^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:18:15\n-   |\n-LL |       let n = 1_isize << BITS;\n-   |               ^^^^^^^^^^^^^^^\n-\n-error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:19:15\n-   |\n-LL |       let n = 1_usize << BITS;\n-   |               ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n-"}]}