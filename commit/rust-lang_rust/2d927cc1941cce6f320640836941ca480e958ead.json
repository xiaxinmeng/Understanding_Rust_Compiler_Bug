{"sha": "2d927cc1941cce6f320640836941ca480e958ead", "node_id": "C_kwDOAAsO6NoAKDJkOTI3Y2MxOTQxY2NlNmYzMjA2NDA4MzY5NDFjYTQ4MGU5NThlYWQ", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2023-01-17T03:27:18Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2023-01-17T04:58:15Z"}, "message": "Explain the \"no-error\" io::Error case\n\nFundamentally, querying the OS for error codes is a process\nthat is deeply subject to the whims of chance and fortune.\nWe can account for OS, but not for every combination of platform APIs.\nA compiled binary may not recognize new errors introduced years later.\nWe should clarify a few especially odd situations, and what they mean:\nWe can effectively promise nothing.\n\nThis allows removing mention of ErrorKind::Uncategorized.\nThat error variant is hidden quite deliberately, so we\nshould not explicitly mention it.", "tree": {"sha": "1587740e184786bab0fce85a00379f985adcca78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1587740e184786bab0fce85a00379f985adcca78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d927cc1941cce6f320640836941ca480e958ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d927cc1941cce6f320640836941ca480e958ead", "html_url": "https://github.com/rust-lang/rust/commit/2d927cc1941cce6f320640836941ca480e958ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d927cc1941cce6f320640836941ca480e958ead/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "html_url": "https://github.com/rust-lang/rust/commit/4781233a77e879e49cb5ce3c98d2abba6a6ade7a"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "27aa245851617f1e1fcbf5b27c266cb26f9bc4f6", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d927cc1941cce6f320640836941ca480e958ead/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d927cc1941cce6f320640836941ca480e958ead/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=2d927cc1941cce6f320640836941ca480e958ead", "patch": "@@ -359,7 +359,7 @@ pub enum ErrorKind {\n \n     // \"Unusual\" error kinds which do not correspond simply to (sets\n     // of) OS error codes, should be added just above this comment.\n-    // `Other` and `Uncategorised` should remain at the end:\n+    // `Other` and `Uncategorized` should remain at the end:\n     //\n     /// A custom error that does not fall under any other I/O error kind.\n     ///\n@@ -565,6 +565,12 @@ impl Error {\n     /// other standard library functions may call platform functions that may\n     /// (or may not) reset the error value even if they succeed.\n     ///\n+    /// If this is used in a case where no error has yet occurred in a program,\n+    /// e.g. right after the beginning of `fn main`,\n+    /// then in principle any possible Error may be returned.\n+    /// The error code may have been set by a previous program (e.g. `execve`)\n+    /// or the OS may have initialized it to an arbitrary, even random, value.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -871,6 +877,13 @@ impl Error {\n \n     /// Returns the corresponding [`ErrorKind`] for this error.\n     ///\n+    /// In some cases, the ErrorKind variant may not make much sense,\n+    /// either because the situation does not actually involve an error, or\n+    /// because of a new error code the standard library has not been taught.\n+    /// See [`last_os_error`] for more details.\n+    ///\n+    /// [`last_os_error`]: Error::last_os_error\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -881,7 +894,8 @@ impl Error {\n     /// }\n     ///\n     /// fn main() {\n-    ///     // Will print \"Uncategorized\".\n+    ///     // As no error has occurred, this may print anything!\n+    ///     // It likely prints a placeholder for unidentified (non-)errors.\n     ///     print_error(Error::last_os_error());\n     ///     // Will print \"AddrInUse\".\n     ///     print_error(Error::new(ErrorKind::AddrInUse, \"oh no!\"));"}]}