{"sha": "65ee418e5c2de7d84353979bbd978ca09390ccba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZWU0MThlNWMyZGU3ZDg0MzUzOTc5YmJkOTc4Y2EwOTM5MGNjYmE=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T19:05:51Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T22:29:45Z"}, "message": "Do not run const prop on the `mir_for_ctfe` of `const fn`", "tree": {"sha": "8ae584e6e2d19afbf775901375f97caffb9eaf6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ae584e6e2d19afbf775901375f97caffb9eaf6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ee418e5c2de7d84353979bbd978ca09390ccba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ee418e5c2de7d84353979bbd978ca09390ccba", "html_url": "https://github.com/rust-lang/rust/commit/65ee418e5c2de7d84353979bbd978ca09390ccba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ee418e5c2de7d84353979bbd978ca09390ccba/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409195d4e50b2c2ae0fc49602350c8a5bdd6bd28", "url": "https://api.github.com/repos/rust-lang/rust/commits/409195d4e50b2c2ae0fc49602350c8a5bdd6bd28", "html_url": "https://github.com/rust-lang/rust/commit/409195d4e50b2c2ae0fc49602350c8a5bdd6bd28"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "11f7e6922ccbc0a7f723727bfe7465379bd694f0", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/65ee418e5c2de7d84353979bbd978ca09390ccba/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ee418e5c2de7d84353979bbd978ca09390ccba/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=65ee418e5c2de7d84353979bbd978ca09390ccba", "patch": "@@ -357,28 +357,43 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n         return shim::build_adt_ctor(tcx, def.did.to_def_id());\n     }\n \n-    assert_ne!(\n-        tcx.hir().body_const_context(def.did),\n-        None,\n-        \"mir_for_ctfe should not be used for runtime functions\"\n-    );\n+    let context = tcx\n+        .hir()\n+        .body_const_context(def.did)\n+        .expect(\"mir_for_ctfe should not be used for runtime functions\");\n \n     let mut body = tcx.mir_drops_elaborated_and_const_checked(def).borrow().clone();\n \n-    #[rustfmt::skip]\n-    let optimizations: &[&dyn MirPass<'_>] = &[\n-        &const_prop::ConstProp,\n-    ];\n-\n-    #[rustfmt::skip]\n-    run_passes(\n-        tcx,\n-        &mut body,\n-        MirPhase::Optimization,\n-        &[\n-            optimizations,\n-        ],\n-    );\n+    match context {\n+        // Do not const prop functions, either they get executed at runtime or exported to metadata,\n+        // so we run const prop on them, or they don't, in which case we const evaluate some control\n+        // flow paths of the function and any errors in those paths will get emitted as const eval\n+        // errors.\n+        hir::ConstContext::ConstFn => {}\n+        // Static items always get evaluated, so we can just let const eval see if any erroneous\n+        // control flow paths get executed.\n+        hir::ConstContext::Static(_) => {}\n+        // Associated constants get const prop run so we detect common failure situations in the\n+        // crate that defined the constant.\n+        // Technically we want to not run on regular const items, but oli-obk doesn't know how to\n+        // conveniently detect that at this point without looking at the HIR.\n+        hir::ConstContext::Const => {\n+            #[rustfmt::skip]\n+            let optimizations: &[&dyn MirPass<'_>] = &[\n+                &const_prop::ConstProp,\n+            ];\n+\n+            #[rustfmt::skip]\n+            run_passes(\n+                tcx,\n+                &mut body,\n+                MirPhase::Optimization,\n+                &[\n+                    optimizations,\n+                ],\n+            );\n+        }\n+    }\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in MIR for CTFE\");\n "}, {"sha": "2afbf3432fb45a91d88b7b17b794b307e0eea4f7", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ee418e5c2de7d84353979bbd978ca09390ccba/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ee418e5c2de7d84353979bbd978ca09390ccba/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs?ref=65ee418e5c2de7d84353979bbd978ca09390ccba", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n \n-// compile-flags: --crate-type lib\n+// need to emit MIR, because const prop (which emits `unconditional_panic`) only runs if\n+// the `optimized_mir` query is run, which it isn't in check-only mode.\n+// compile-flags: --crate-type lib --emit=mir,link\n \n #![warn(unconditional_panic)]\n "}, {"sha": "865c69c3c89830bfa59d17596961544903839b55", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65ee418e5c2de7d84353979bbd978ca09390ccba/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65ee418e5c2de7d84353979bbd978ca09390ccba/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.stderr?ref=65ee418e5c2de7d84353979bbd978ca09390ccba", "patch": "@@ -1,11 +1,11 @@\n warning: this operation will panic at runtime\n-  --> $DIR/ice-assert-fail-div-by-zero.rs:11:5\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:13:5\n    |\n LL |     f.0 / 0;\n    |     ^^^^^^^ attempt to divide `_` by zero\n    |\n note: the lint level is defined here\n-  --> $DIR/ice-assert-fail-div-by-zero.rs:5:9\n+  --> $DIR/ice-assert-fail-div-by-zero.rs:7:9\n    |\n LL | #![warn(unconditional_panic)]\n    |         ^^^^^^^^^^^^^^^^^^^"}, {"sha": "9363ffbb996e468c3081c2d29ae73cddf7ad9b7a", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65ee418e5c2de7d84353979bbd978ca09390ccba/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65ee418e5c2de7d84353979bbd978ca09390ccba/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=65ee418e5c2de7d84353979bbd978ca09390ccba", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const X: u64 = *wat(42);\n    | ---------------^^^^^^^^-\n    |                |\n-   |                pointer to alloc2 was dereferenced after this allocation got freed\n+   |                pointer to alloc1 was dereferenced after this allocation got freed\n    |\n    = note: `#[deny(const_err)]` on by default\n "}]}