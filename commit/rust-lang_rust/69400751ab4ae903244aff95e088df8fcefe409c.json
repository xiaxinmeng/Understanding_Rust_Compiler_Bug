{"sha": "69400751ab4ae903244aff95e088df8fcefe409c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NDAwNzUxYWI0YWU5MDMyNDRhZmY5NWUwODhkZjhmY2VmZTQwOWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-04T21:21:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-30T18:06:45Z"}, "message": "make needs_infer specific to inference variables\n\nNotably, excluding ReSkolemized", "tree": {"sha": "db6b0c1e9557dd2ec2879ab1769824cd1ccc3d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db6b0c1e9557dd2ec2879ab1769824cd1ccc3d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69400751ab4ae903244aff95e088df8fcefe409c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69400751ab4ae903244aff95e088df8fcefe409c", "html_url": "https://github.com/rust-lang/rust/commit/69400751ab4ae903244aff95e088df8fcefe409c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69400751ab4ae903244aff95e088df8fcefe409c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e59e467a0e4dbcf6a6e7ba2e443ebc2fde88e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e59e467a0e4dbcf6a6e7ba2e443ebc2fde88e11", "html_url": "https://github.com/rust-lang/rust/commit/2e59e467a0e4dbcf6a6e7ba2e443ebc2fde88e11"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "1f1fdfafe337bb77979c85051c0355d44afe7179", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n         if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.selcx.tcx().global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n-                if substs.needs_infer() {\n+                if substs.needs_infer() || substs.has_skol() {\n                     let identity_substs = Substs::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {"}, {"sha": "f074e06165311bb12d26344fe7611457280ce010", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -196,7 +196,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n         if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n             let tcx = self.infcx.tcx.global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n-                if substs.needs_infer() {\n+                if substs.needs_infer() || substs.has_skol() {\n                     let identity_substs = Substs::identity_for_item(tcx, def_id);\n                     let instance = ty::Instance::resolve(tcx, param_env, def_id, identity_substs);\n                     if let Some(instance) = instance {"}, {"sha": "1f95bbfa9ace73fbd3c62c1c7d58673277038790", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -2119,7 +2119,7 @@ macro_rules! intern_method {\n                                             $alloc_method:ident,\n                                             $alloc_to_key:expr,\n                                             $alloc_to_ret:expr,\n-                                            $needs_infer:expr) -> $ty:ty) => {\n+                                            $keep_in_local_tcx:expr) -> $ty:ty) => {\n         impl<'a, 'gcx, $lt_tcx> TyCtxt<'a, 'gcx, $lt_tcx> {\n             pub fn $method(self, v: $alloc) -> &$lt_tcx $ty {\n                 {\n@@ -2137,7 +2137,7 @@ macro_rules! intern_method {\n                 // HACK(eddyb) Depend on flags being accurate to\n                 // determine that all contents are in the global tcx.\n                 // See comments on Lift for why we can't use that.\n-                if !($needs_infer)(&v) {\n+                if !($keep_in_local_tcx)(&v) {\n                     if !self.is_global() {\n                         let v = unsafe {\n                             mem::transmute(v)\n@@ -2165,7 +2165,7 @@ macro_rules! intern_method {\n }\n \n macro_rules! direct_interners {\n-    ($lt_tcx:tt, $($name:ident: $method:ident($needs_infer:expr) -> $ty:ty),+) => {\n+    ($lt_tcx:tt, $($name:ident: $method:ident($keep_in_local_tcx:expr) -> $ty:ty),+) => {\n         $(impl<$lt_tcx> PartialEq for Interned<$lt_tcx, $ty> {\n             fn eq(&self, other: &Self) -> bool {\n                 self.0 == other.0\n@@ -2180,7 +2180,10 @@ macro_rules! direct_interners {\n             }\n         }\n \n-        intern_method!($lt_tcx, $name: $method($ty, alloc, |x| x, |x| x, $needs_infer) -> $ty);)+\n+        intern_method!(\n+            $lt_tcx,\n+            $name: $method($ty, alloc, |x| x, |x| x, $keep_in_local_tcx) -> $ty\n+        );)+\n     }\n }\n "}, {"sha": "1793b5e1edba8e0f3ca76ee956775bd8bb82cb1e", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -91,6 +91,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn needs_infer(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_RE_INFER)\n     }\n+    fn has_skol(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_SKOL)\n+    }\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }"}, {"sha": "4fdc247686f37b8e2885145b65662259e9b082c5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -1476,7 +1476,11 @@ impl<'tcx> ParamEnv<'tcx> {\n             }\n \n             Reveal::All => {\n-                if value.needs_infer() || value.has_param_types() || value.has_self_ty() {\n+                if value.has_skol()\n+                    || value.needs_infer()\n+                    || value.has_param_types()\n+                    || value.has_self_ty()\n+                {\n                     ParamEnvAnd {\n                         param_env: self,\n                         value,"}, {"sha": "8348df38fb91314b86719d93ca06181faca9b2aa", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -1199,7 +1199,6 @@ impl RegionKind {\n             }\n             ty::ReSkolemized(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n-                flags = flags | TypeFlags::HAS_RE_INFER;\n                 flags = flags | TypeFlags::HAS_RE_SKOL;\n                 flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n             }"}, {"sha": "907c80f0daf5ef8a0c8864ef0559ad32813ab503", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -1485,7 +1485,10 @@ impl<'tcx> Candidate<'tcx> {\n                     // inference variables or other artifacts. This\n                     // means they are safe to put into the\n                     // `WhereClausePick`.\n-                    assert!(!trait_ref.skip_binder().substs.needs_infer());\n+                    assert!(\n+                        !trait_ref.skip_binder().substs.needs_infer()\n+                            && !trait_ref.skip_binder().substs.has_skol()\n+                    );\n \n                     WhereClausePick(trait_ref.clone())\n                 }"}, {"sha": "802e5375b6b2836ef295def6efa5bbf33df1fb8e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69400751ab4ae903244aff95e088df8fcefe409c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=69400751ab4ae903244aff95e088df8fcefe409c", "patch": "@@ -107,7 +107,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n     fn write_ty_to_tables(&mut self, hir_id: hir::HirId, ty: Ty<'gcx>) {\n         debug!(\"write_ty_to_tables({:?}, {:?})\", hir_id, ty);\n-        assert!(!ty.needs_infer());\n+        assert!(!ty.needs_infer() && !ty.has_skol());\n         self.tables.node_types_mut().insert(hir_id, ty);\n     }\n \n@@ -431,7 +431,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         if let Some(substs) = self.fcx.tables.borrow().node_substs_opt(hir_id) {\n             let substs = self.resolve(&substs, &span);\n             debug!(\"write_substs_to_tcx({:?}, {:?})\", hir_id, substs);\n-            assert!(!substs.needs_infer());\n+            assert!(!substs.needs_infer() && !substs.has_skol());\n             self.tables.node_substs_mut().insert(hir_id, substs);\n         }\n     }"}]}