{"sha": "8b7299dd12b06b2f41707dda8562e0182c9d5672", "node_id": "C_kwDOAAsO6NoAKDhiNzI5OWRkMTJiMDZiMmY0MTcwN2RkYTg1NjJlMDE4MmM5ZDU2NzI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-31T21:42:42Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-06-18T03:52:11Z"}, "message": "Remove `likely!` and `unlikely!` macro from compiler", "tree": {"sha": "6e0decb0010aa7d143bb068be0423fa061e333bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e0decb0010aa7d143bb068be0423fa061e333bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b7299dd12b06b2f41707dda8562e0182c9d5672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7299dd12b06b2f41707dda8562e0182c9d5672", "html_url": "https://github.com/rust-lang/rust/commit/8b7299dd12b06b2f41707dda8562e0182c9d5672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b7299dd12b06b2f41707dda8562e0182c9d5672/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf100597cc6986d5ebd005d58a9394dd6edef4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf100597cc6986d5ebd005d58a9394dd6edef4d", "html_url": "https://github.com/rust-lang/rust/commit/aaf100597cc6986d5ebd005d58a9394dd6edef4d"}], "stats": {"total": 44, "additions": 13, "deletions": 31}, "files": [{"sha": "390a44d3f337dee7549d6162f7e1d38b0339455a", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=8b7299dd12b06b2f41707dda8562e0182c9d5672", "patch": "@@ -11,7 +11,6 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(control_flow_enum)]\n-#![feature(core_intrinsics)]\n #![feature(extend_one)]\n #![feature(let_else)]\n #![feature(hash_raw_entry)]\n@@ -44,26 +43,6 @@ pub fn cold_path<F: FnOnce() -> R, R>(f: F) -> R {\n     f()\n }\n \n-#[macro_export]\n-macro_rules! likely {\n-    ($e:expr) => {\n-        match $e {\n-            #[allow(unused_unsafe)]\n-            e => unsafe { std::intrinsics::likely(e) },\n-        }\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! unlikely {\n-    ($e:expr) => {\n-        match $e {\n-            #[allow(unused_unsafe)]\n-            e => unsafe { std::intrinsics::unlikely(e) },\n-        }\n-    };\n-}\n-\n pub mod base_n;\n pub mod binary_search_util;\n pub mod captures;"}, {"sha": "88ff33b4d09a15989eeab46ab316431a238149f9", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=8b7299dd12b06b2f41707dda8562e0182c9d5672", "patch": "@@ -195,6 +195,7 @@ impl SelfProfilerRef {\n         F: for<'a> FnOnce(&'a SelfProfiler) -> TimingGuard<'a>,\n     {\n         #[inline(never)]\n+        #[cold]\n         fn cold_call<F>(profiler_ref: &SelfProfilerRef, f: F) -> TimingGuard<'_>\n         where\n             F: for<'a> FnOnce(&'a SelfProfiler) -> TimingGuard<'a>,\n@@ -203,7 +204,7 @@ impl SelfProfilerRef {\n             f(&**profiler)\n         }\n \n-        if unlikely!(self.event_filter_mask.contains(event_filter)) {\n+        if self.event_filter_mask.contains(event_filter) {\n             cold_call(self, f)\n         } else {\n             TimingGuard::none()"}, {"sha": "2a116556e82c5c916f587f5fcb8c2979842ceeee", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8b7299dd12b06b2f41707dda8562e0182c9d5672", "patch": "@@ -804,7 +804,7 @@ pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n \n impl<'tcx> TraitPredicate<'tcx> {\n     pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {\n-        if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n+        if std::intrinsics::unlikely(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {\n             // remap without changing constness of this predicate.\n             // this is because `T: ~const Drop` has a different meaning to `T: Drop`\n             // FIXME(fee1-dead): remove this logic after beta bump"}, {"sha": "341cf8f827bc9b892287edc86668562973d7971e", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=8b7299dd12b06b2f41707dda8562e0182c9d5672", "patch": "@@ -750,7 +750,7 @@ impl<K: DepKind> DepGraph<K> {\n             dep_node\n         );\n \n-        if unlikely!(!side_effects.is_empty()) {\n+        if !side_effects.is_empty() {\n             self.emit_side_effects(tcx, data, dep_node_index, side_effects);\n         }\n "}, {"sha": "3e4c7ad9f8f41a2b66a75bc924f6d9702fc9091e", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7299dd12b06b2f41707dda8562e0182c9d5672/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=8b7299dd12b06b2f41707dda8562e0182c9d5672", "patch": "@@ -316,7 +316,7 @@ where\n     OnHit: FnOnce(&C::Stored) -> R,\n {\n     cache.lookup(&key, |value, index| {\n-        if unlikely!(tcx.profiler().enabled()) {\n+        if std::intrinsics::unlikely(tcx.profiler().enabled()) {\n             tcx.profiler().query_cache_hit(index.into());\n         }\n         tcx.dep_graph().read_index(index);\n@@ -354,7 +354,7 @@ where\n                 .lookup(&key, |value, index| (value.clone(), index))\n                 .unwrap_or_else(|_| panic!(\"value must be in cache after waiting\"));\n \n-            if unlikely!(tcx.dep_context().profiler().enabled()) {\n+            if std::intrinsics::unlikely(tcx.dep_context().profiler().enabled()) {\n                 tcx.dep_context().profiler().query_cache_hit(index.into());\n             }\n             query_blocked_prof_timer.finish_with_query_invocation_id(index.into());\n@@ -422,7 +422,7 @@ where\n     let diagnostics = diagnostics.into_inner();\n     let side_effects = QuerySideEffects { diagnostics };\n \n-    if unlikely!(!side_effects.is_empty()) {\n+    if std::intrinsics::unlikely(!side_effects.is_empty()) {\n         if query.anon {\n             tcx.store_side_effects_for_anon_node(dep_node_index, side_effects);\n         } else {\n@@ -466,7 +466,9 @@ where\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n         if let Some(result) = result {\n-            if unlikely!(tcx.dep_context().sess().opts.debugging_opts.query_dep_graph) {\n+            if std::intrinsics::unlikely(\n+                tcx.dep_context().sess().opts.debugging_opts.query_dep_graph,\n+            ) {\n                 dep_graph.mark_debug_loaded_from_disk(*dep_node)\n             }\n \n@@ -483,8 +485,8 @@ where\n             // currently afford to verify every hash. This subset should still\n             // give us some coverage of potential bugs though.\n             let try_verify = prev_fingerprint.as_value().1 % 32 == 0;\n-            if unlikely!(\n-                try_verify || tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich\n+            if std::intrinsics::unlikely(\n+                try_verify || tcx.dep_context().sess().opts.debugging_opts.incremental_verify_ich,\n             ) {\n                 incremental_verify_ich(*tcx.dep_context(), &result, dep_node, query);\n             }\n@@ -723,7 +725,7 @@ where\n     // Ensure that only one of them runs the query.\n     let cache = Q::query_cache(tcx);\n     let cached = cache.lookup(&key, |_, index| {\n-        if unlikely!(tcx.dep_context().profiler().enabled()) {\n+        if std::intrinsics::unlikely(tcx.dep_context().profiler().enabled()) {\n             tcx.dep_context().profiler().query_cache_hit(index.into());\n         }\n     });"}]}