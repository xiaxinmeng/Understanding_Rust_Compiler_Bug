{"sha": "36a229b28db2d96105769afa001baeb5cd99ca15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTIyOWIyOGRiMmQ5NjEwNTc2OWFmYTAwMWJhZWI1Y2Q5OWNhMTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-09T15:36:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-09T16:19:50Z"}, "message": "Move to unstable section", "tree": {"sha": "ed03b7275a7b96a0b32fef2f35eb6dabca3866ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed03b7275a7b96a0b32fef2f35eb6dabca3866ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a229b28db2d96105769afa001baeb5cd99ca15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a229b28db2d96105769afa001baeb5cd99ca15", "html_url": "https://github.com/rust-lang/rust/commit/36a229b28db2d96105769afa001baeb5cd99ca15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a229b28db2d96105769afa001baeb5cd99ca15/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "271e2a988faa00e7cd1308641ade1f25304ef459", "url": "https://api.github.com/repos/rust-lang/rust/commits/271e2a988faa00e7cd1308641ade1f25304ef459", "html_url": "https://github.com/rust-lang/rust/commit/271e2a988faa00e7cd1308641ade1f25304ef459"}], "stats": {"total": 131, "additions": 42, "deletions": 89}, "files": [{"sha": "f982863e67b94b4e060027372809b4e9624077cc", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36a229b28db2d96105769afa001baeb5cd99ca15/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/36a229b28db2d96105769afa001baeb5cd99ca15/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=36a229b28db2d96105769afa001baeb5cd99ca15", "patch": "@@ -7,6 +7,5 @@\n - [Documentation tests](documentation-tests.md)\n - [Lints](lints.md)\n - [Passes](passes.md)\n-- [Intra-doc links](intra-doc-links.md)\n - [Advanced Features](advanced-features.md)\n - [Unstable features](unstable-features.md)"}, {"sha": "a0781e2e7690f4a979b9bc7024d38435e69bb475", "filename": "src/doc/rustdoc/src/intra-doc-links.md", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/271e2a988faa00e7cd1308641ade1f25304ef459/src%2Fdoc%2Frustdoc%2Fsrc%2Fintra-doc-links.md", "raw_url": "https://github.com/rust-lang/rust/raw/271e2a988faa00e7cd1308641ade1f25304ef459/src%2Fdoc%2Frustdoc%2Fsrc%2Fintra-doc-links.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fintra-doc-links.md?ref=271e2a988faa00e7cd1308641ade1f25304ef459", "patch": "@@ -1,58 +0,0 @@\n-# Intra-doc links\n-\n-_This feature is currently nightly-only_\n-\n-Rustdoc is capable of directly linking to other rustdoc pages in Markdown documentation using the path of item as a link.\n-\n-For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n-\n-```rust\n-/// This struct is not [Bar]\n-pub struct Foo1;\n-\n-/// This struct is also not [bar](Bar)\n-pub struct Foo2;\n-\n-/// This struct is also not [bar][b]\n-///\n-/// [b]: Bar\n-pub struct Foo3;\n-\n-/// This struct is also not [`Bar`]\n-pub struct Foo4;\n-\n-pub struct Bar;\n-```\n-\n-You can refer to anything in scope, and use paths, including `Self`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros respectively.\n-\n-```rust,edition2018\n-use std::sync::mpsc::Receiver;\n-\n-/// This is an version of [`Receiver`], with support for [`std::future`].\n-///\n-/// You can obtain a [`std::future::Future`] by calling [`Self::recv()`].\n-pub struct AsyncReceiver<T> {\n-    sender: Receiver<T>\n-}\n-\n-impl<T> AsyncReceiver<T> {\n-    pub async fn recv() -> T {\n-        unimplemented!()\n-    }\n-}\n-```\n-\n-Paths in Rust have three namespaces: type, value, and macro. Items from these namespaces are allowed to overlap. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `function@`, `mod@`, `fn@`, `module@`, `method@` , `macro@`, or `derive@`:\n-\n-```rust\n-/// See also: [`Foo`](struct@Foo)\n-struct Bar;\n-\n-/// This is different from [`Foo`](fn@Foo)\n-struct Foo {}\n-\n-fn Foo() {}\n-```\n-\n-Note: Because of how `macro_rules` macros are scoped in Rust, the intra-doc links of a `macro_rules` macro will be resolved relative to the crate root, as opposed to the module it is defined in."}, {"sha": "8abb253465e85f0288694dfd43bedb74f3bafcc3", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/36a229b28db2d96105769afa001baeb5cd99ca15/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/36a229b28db2d96105769afa001baeb5cd99ca15/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=36a229b28db2d96105769afa001baeb5cd99ca15", "patch": "@@ -38,50 +38,62 @@ future.\n Attempting to use these error numbers on stable will result in the code sample being interpreted as\n plain text.\n \n-### Linking to items by type\n+### Linking to items by name\n \n-As designed in [RFC 1946], Rustdoc can parse paths to items when you use them as links. To resolve\n-these type names, it uses the items currently in-scope, either by declaration or by `use` statement.\n-For modules, the \"active scope\" depends on whether the documentation is written outside the module\n-(as `///` comments on the `mod` statement) or inside the module (at `//!` comments inside the file\n-or block). For all other items, it uses the enclosing module's scope.\n+Rustdoc is capable of directly linking to other rustdoc pages in Markdown documentation using the path of item as a link.\n \n-[RFC 1946]: https://github.com/rust-lang/rfcs/pull/1946\n-\n-For example, in the following code:\n+For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n \n ```rust\n-/// Does the thing.\n-pub fn do_the_thing(_: SomeType) {\n-    println!(\"Let's do the thing!\");\n-}\n+/// This struct is not [Bar]\n+pub struct Foo1;\n+\n+/// This struct is also not [bar](Bar)\n+pub struct Foo2;\n+\n+/// This struct is also not [bar][b]\n+///\n+/// [b]: Bar\n+pub struct Foo3;\n+\n+/// This struct is also not [`Bar`]\n+pub struct Foo4;\n \n-/// Token you use to [`do_the_thing`].\n-pub struct SomeType;\n+pub struct Bar;\n ```\n \n-The link to ``[`do_the_thing`]`` in `SomeType`'s docs will properly link to the page for `fn\n-do_the_thing`. Note that here, rustdoc will insert the link target for you, but manually writing the\n-target out also works:\n+You can refer to anything in scope, and use paths, including `Self`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros respectively.\n \n-```rust\n-pub mod some_module {\n-    /// Token you use to do the thing.\n-    pub struct SomeStruct;\n-}\n+```rust,edition2018\n+use std::sync::mpsc::Receiver;\n \n-/// Does the thing. Requires one [`SomeStruct`] for the thing to work.\n+/// This is an version of [`Receiver`], with support for [`std::future`].\n ///\n-/// [`SomeStruct`]: some_module::SomeStruct\n-pub fn do_the_thing(_: some_module::SomeStruct) {\n-    println!(\"Let's do the thing!\");\n+/// You can obtain a [`std::future::Future`] by calling [`Self::recv()`].\n+pub struct AsyncReceiver<T> {\n+    sender: Receiver<T>\n+}\n+\n+impl<T> AsyncReceiver<T> {\n+    pub async fn recv() -> T {\n+        unimplemented!()\n+    }\n }\n ```\n \n-For more details, check out [the RFC][RFC 1946], and see [the tracking issue][43466] for more\n-information about what parts of the feature are available.\n+Paths in Rust have three namespaces: type, value, and macro. Items from these namespaces are allowed to overlap. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `function@`, `mod@`, `fn@`, `module@`, `method@` , `macro@`, or `derive@`:\n+\n+```rust\n+/// See also: [`Foo`](struct@Foo)\n+struct Bar;\n+\n+/// This is different from [`Foo`](fn@Foo)\n+struct Foo {}\n+\n+fn Foo() {}\n+```\n \n-[43466]: https://github.com/rust-lang/rust/issues/43466\n+Note: Because of how `macro_rules` macros are scoped in Rust, the intra-doc links of a `macro_rules` macro will be resolved relative to the crate root, as opposed to the module it is defined in.\n \n ## Extensions to the `#[doc]` attribute\n "}]}