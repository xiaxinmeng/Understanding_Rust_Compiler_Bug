{"sha": "5cdfd8401b7f714be22fe7d86619e438d23b3962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZGZkODQwMWI3ZjcxNGJlMjJmZTdkODY2MTllNDM4ZDIzYjM5NjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-16T18:01:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-17T22:24:22Z"}, "message": "Review fixes", "tree": {"sha": "4da95d7c8de6a318dfc4a021db196fae491ab07c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da95d7c8de6a318dfc4a021db196fae491ab07c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cdfd8401b7f714be22fe7d86619e438d23b3962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cdfd8401b7f714be22fe7d86619e438d23b3962", "html_url": "https://github.com/rust-lang/rust/commit/5cdfd8401b7f714be22fe7d86619e438d23b3962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cdfd8401b7f714be22fe7d86619e438d23b3962/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2ffc7090a70fe8c77a0e03fcec3cb1387141f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2ffc7090a70fe8c77a0e03fcec3cb1387141f2", "html_url": "https://github.com/rust-lang/rust/commit/7e2ffc7090a70fe8c77a0e03fcec3cb1387141f2"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "1450b8efb0fb28bab46869444afb6f7756ffdfd2", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cdfd8401b7f714be22fe7d86619e438d23b3962/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdfd8401b7f714be22fe7d86619e438d23b3962/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=5cdfd8401b7f714be22fe7d86619e438d23b3962", "patch": "@@ -475,8 +475,10 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[unstable(feature = \"fmt_internals\", issue = \"0\")]\n+pub use core::fmt::rt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{Formatter, Result, Write, rt};\n+pub use core::fmt::{Formatter, Result, Write};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::fmt::{Octal, Binary};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "dfd79895747f44363747313a4ce4a40c08262d38", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5cdfd8401b7f714be22fe7d86619e438d23b3962/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdfd8401b7f714be22fe7d86619e438d23b3962/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=5cdfd8401b7f714be22fe7d86619e438d23b3962", "patch": "@@ -24,13 +24,13 @@ use slice;\n use str;\n use self::rt::v1::Alignment;\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"fmt_radix\", issue = \"27728\")]\n pub use self::num::radix;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"fmt_radix\", issue = \"27728\")]\n pub use self::num::Radix;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"fmt_radix\", issue = \"27728\")]\n pub use self::num::RadixFmt;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugList, DebugMap};\n \n mod num;"}, {"sha": "02e1c7739c4e45c6cb9c6b4de380108624b4584a", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5cdfd8401b7f714be22fe7d86619e438d23b3962/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cdfd8401b7f714be22fe7d86619e438d23b3962/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=5cdfd8401b7f714be22fe7d86619e438d23b3962", "patch": "@@ -12,7 +12,6 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n pub use self::StabilityLevel::*;\n-use self::AnnotationKind::*;\n \n use session::Session;\n use lint;\n@@ -52,11 +51,11 @@ impl StabilityLevel {\n #[derive(PartialEq)]\n enum AnnotationKind {\n     // Annotation is required if not inherited from unstable parents\n-    AnnRequired,\n+    Required,\n     // Annotation is useless, reject it\n-    AnnProhibited,\n+    Prohibited,\n     // Annotation itself is useless, but it can be propagated to children\n-    AnnContainer,\n+    Container,\n }\n \n /// A stability index, giving the stability level for items and methods.\n@@ -91,8 +90,10 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n             if let Some(mut stab) = attr::find_stability(self.tcx.sess.diagnostic(),\n                                                          attrs, item_sp) {\n                 // Error if prohibited, or can't inherit anything from a container\n-                if kind == AnnProhibited ||\n-                   kind == AnnContainer && stab.level.is_stable() && stab.depr.is_none() {\n+                if kind == AnnotationKind::Prohibited ||\n+                   (kind == AnnotationKind::Container &&\n+                    stab.level.is_stable() &&\n+                    stab.depr.is_none()) {\n                     self.tcx.sess.span_err(item_sp, \"This stability annotation is useless\");\n                 }\n \n@@ -141,7 +142,7 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n                 self.parent = parent;\n             } else {\n                 debug!(\"annotate: not found, parent = {:?}\", self.parent);\n-                let mut is_error = kind == AnnRequired &&\n+                let mut is_error = kind == AnnotationKind::Required &&\n                                    self.export_map.contains(&id) &&\n                                    !self.tcx.sess.opts.test;\n                 if let Some(stab) = self.parent {\n@@ -176,23 +177,23 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     fn visit_item(&mut self, i: &Item) {\n         let orig_in_trait_impl = self.in_trait_impl;\n         let orig_in_enum = self.in_enum;\n-        let mut kind = AnnRequired;\n+        let mut kind = AnnotationKind::Required;\n         match i.node {\n             // Inherent impls and foreign modules serve only as containers for other items,\n             // they don't have their own stability. They still can be annotated as unstable\n             // and propagate this unstability to children, but this annotation is completely\n             // optional. They inherit stability from their parents when unannotated.\n             hir::ItemImpl(_, _, _, None, _, _) | hir::ItemForeignMod(..) => {\n                 self.in_trait_impl = false;\n-                kind = AnnContainer;\n+                kind = AnnotationKind::Container;\n             }\n             hir::ItemImpl(_, _, _, Some(_), _, _) => {\n                 self.in_trait_impl = true;\n             }\n             hir::ItemStruct(ref sd, _) => {\n                 self.in_enum = false;\n                 if !sd.is_struct() {\n-                    self.annotate(sd.id(), &i.attrs, i.span, AnnRequired, |_| {})\n+                    self.annotate(sd.id(), &i.attrs, i.span, AnnotationKind::Required, |_| {})\n                 }\n             }\n             hir::ItemEnum(..) => {\n@@ -209,45 +210,49 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n-        self.annotate(ti.id, &ti.attrs, ti.span, AnnRequired, |v| {\n+        self.annotate(ti.id, &ti.attrs, ti.span, AnnotationKind::Required, |v| {\n             visit::walk_trait_item(v, ti);\n         });\n     }\n \n     fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n-        let kind = if self.in_trait_impl { AnnProhibited } else { AnnRequired };\n+        let kind = if self.in_trait_impl {\n+            AnnotationKind::Prohibited\n+        } else {\n+            AnnotationKind::Required\n+        };\n         self.annotate(ii.id, &ii.attrs, ii.span, kind, |v| {\n             visit::walk_impl_item(v, ii);\n         });\n     }\n \n     fn visit_variant(&mut self, var: &Variant, g: &'v Generics, item_id: NodeId) {\n-        self.annotate(var.node.data.id(), &var.node.attrs, var.span, AnnRequired, |v| {\n+        self.annotate(var.node.data.id(), &var.node.attrs, var.span, AnnotationKind::Required, |v| {\n             visit::walk_variant(v, var, g, item_id);\n         })\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {\n         // FIXME: This is temporary, can't use attributes with tuple variant fields until snapshot\n         let kind = if self.in_enum && s.node.kind.is_unnamed() {\n-            AnnProhibited\n+            AnnotationKind::Prohibited\n         } else {\n-            AnnRequired\n+            AnnotationKind::Required\n         };\n         self.annotate(s.node.id, &s.node.attrs, s.span, kind, |v| {\n             visit::walk_struct_field(v, s);\n         });\n     }\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem) {\n-        self.annotate(i.id, &i.attrs, i.span, AnnRequired, |v| {\n+        self.annotate(i.id, &i.attrs, i.span, AnnotationKind::Required, |v| {\n             visit::walk_foreign_item(v, i);\n         });\n     }\n \n     fn visit_macro_def(&mut self, md: &'v hir::MacroDef) {\n         if md.imported_from.is_none() {\n-            self.annotate(md.id, &md.attrs, md.span, AnnRequired, |_| {});\n+            self.annotate(md.id, &md.attrs, md.span, AnnotationKind::Required, |_| {});\n         }\n     }\n }\n@@ -263,7 +268,7 @@ impl<'tcx> Index<'tcx> {\n             in_trait_impl: false,\n             in_enum: false,\n         };\n-        annotator.annotate(ast::CRATE_NODE_ID, &krate.attrs, krate.span, AnnRequired,\n+        annotator.annotate(ast::CRATE_NODE_ID, &krate.attrs, krate.span, AnnotationKind::Required,\n                            |v| visit::walk_crate(v, krate));\n     }\n "}]}