{"sha": "7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "node_id": "C_kwDOAAsO6NoAKDdiYTk0YTg5ZTliYjZlODQ4MDc3ODU5YTk2MDNhMmY5YTUwYzAzYzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T06:35:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T06:35:16Z"}, "message": "Auto merge of #12858 - fasterthanlime:proc-macro-srv-bin, r=Veykril\n\nAdd `rust-analyzer-proc-macro-srv` binary, use it if found in sysroot\n\nThis adds a `bin` crate which simply runs `proc_macro_srv::cli::run()` (it does no CLI argument parsing, nothing).\n\nThe intent is to build that crate in Rust CI as part of the `dist::Rustc` component, then ship it in the sysroot: it would probably land in something like `~/.rustup/toolchains/nightly-2022-07-23-x86_64-unknown-linux-gnu/libexec/proc-macro-srv-cli`.\n\nThis makes https://github.com/rust-lang/rustup/pull/3022 less pressing. (Instead of teaching RA about rustup components, we simply teach it to look in the sysroot via `rustc --print sysroot`. If it can't find `proc-macro-srv-cli`, it falls back to its own `proc-macro` subcommand).\n\nThis is closely related to https://github.com/rust-lang/rust-analyzer/issues/12803 (but doesn't close it yet).\n\nThings to address now:\n\n  * [ ] What should the binary be named? What should the crate be named? We can pick different names with `[bin]` in the `Cargo.toml`\n\nThings to address later:\n\n  * Disable the \"multi ABI compatibility scheme\" when building that binary in Rust CI (that'll probably happen in `rust-lang/rust`)\n  * Teaching RA to look in the sysroot\n\nThings to address much, much later:\n\n  * Is JSON a good fit here\n  * Do we want to add versioning to future-proof it?\n  * Other bikesheds\n\nWhen built with `--features sysroot` on `nightly-2022-07-23-x86_64-unknown-linux-gnu`, the binary is 7.4MB. After stripping debuginfo, it's 2.6MB. When compressed to `.tar.xz`, it's 619KB.\n\nIn a Zulip discussion, `@jyn514` and `@Mark-Simulacrum` seemed to think that those sizes weren't a stopper for including the binary in the rustc component, even before we shrink it down further.", "tree": {"sha": "a20f7e4d852d5c4c9eef3bc1551b2268cad7ce18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20f7e4d852d5c4c9eef3bc1551b2268cad7ce18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "html_url": "https://github.com/rust-lang/rust/commit/7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1ed70c121e1fefa9d32b87091fbac16a37c215", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ed70c121e1fefa9d32b87091fbac16a37c215", "html_url": "https://github.com/rust-lang/rust/commit/0b1ed70c121e1fefa9d32b87091fbac16a37c215"}, {"sha": "2c2520fbb48b977a805b46af79e4016a4394e719", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2520fbb48b977a805b46af79e4016a4394e719", "html_url": "https://github.com/rust-lang/rust/commit/2c2520fbb48b977a805b46af79e4016a4394e719"}], "stats": {"total": 139, "additions": 126, "deletions": 13}, "files": [{"sha": "703f0e5b8af9f3c33a03a678e30c887247ffe183", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -1198,6 +1198,13 @@ dependencies = [\n  \"tt\",\n ]\n \n+[[package]]\n+name = \"proc-macro-srv-cli\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"proc-macro-srv\",\n+]\n+\n [[package]]\n name = \"proc-macro-test\"\n version = \"0.0.0\""}, {"sha": "c4018d3b39e7705fabcdc36424a9de5a2d37aae3", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -86,6 +86,7 @@ fn mk_child(\n ) -> io::Result<Child> {\n     Command::new(path.as_os_str())\n         .args(args)\n+        .env(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\", \"this is unstable\")\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())\n         .stderr(Stdio::inherit())"}, {"sha": "9d0da5dee9c109e28e3f803d329a9f34b89115de", "filename": "crates/proc-macro-srv-cli/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproc-macro-srv-cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproc-macro-srv-cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2FCargo.toml?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+name = \"proc-macro-srv-cli\"\n+version = \"0.0.0\"\n+description = \"TBD\"\n+license = \"MIT OR Apache-2.0\"\n+edition = \"2021\"\n+rust-version = \"1.57\"\n+\n+[dependencies]\n+proc-macro-srv = { version = \"0.0.0\", path = \"../proc-macro-srv\" }\n+\n+[features]\n+sysroot-abi = [\"proc-macro-srv/sysroot-abi\"]\n+\n+[[bin]]\n+name = \"rust-analyzer-proc-macro-srv\"\n+path = \"src/main.rs\""}, {"sha": "ac9fa9f5a4ce5fa38668fe81ce48b87539905339", "filename": "crates/proc-macro-srv-cli/src/main.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv-cli%2Fsrc%2Fmain.rs?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -0,0 +1,19 @@\n+//! A standalone binary for `proc-macro-srv`.\n+\n+use proc_macro_srv::cli;\n+\n+fn main() -> std::io::Result<()> {\n+    let v = std::env::var(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\");\n+    match v.as_deref() {\n+        Ok(\"this is unstable\") => {\n+            // very well, if you must\n+        }\n+        _ => {\n+            eprintln!(\"If you're rust-analyzer, you can use this tool by exporting RUST_ANALYZER_INTERNALS_DO_NOT_USE='this is unstable'.\");\n+            eprintln!(\"If not, you probably shouldn't use this tool. But do what you want: I'm an error message, not a cop.\");\n+            std::process::exit(122);\n+        }\n+    }\n+\n+    cli::run()\n+}"}, {"sha": "63d1d0ace96b973bd84f22e61f83348c120f34c6", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -17,6 +17,9 @@ use crate::cfg_flag::CfgFlag;\n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n+    /// e.g. `path/to/sysroot`\n+    pub(crate) sysroot: Option<AbsPathBuf>,\n+    /// e.g. `path/to/sysroot/lib/rustlib/src/rust`\n     pub(crate) sysroot_src: Option<AbsPathBuf>,\n     project_root: AbsPathBuf,\n     crates: Vec<Crate>,\n@@ -52,6 +55,7 @@ impl ProjectJson {\n     ///            configuration.\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n+            sysroot: data.sysroot.map(|it| base.join(it)),\n             sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n             project_root: base.to_path_buf(),\n             crates: data\n@@ -122,6 +126,7 @@ impl ProjectJson {\n \n #[derive(Deserialize, Debug, Clone)]\n pub struct ProjectJsonData {\n+    sysroot: Option<PathBuf>,\n     sysroot_src: Option<PathBuf>,\n     crates: Vec<CrateData>,\n }"}, {"sha": "362bb0f5e79cdb8fea2bb68e7a0591f978c81c90", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -15,6 +15,7 @@ use crate::{utf8_stdout, ManifestPath};\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n     root: AbsPathBuf,\n+    src_root: AbsPathBuf,\n     crates: Arena<SysrootCrateData>,\n }\n \n@@ -35,10 +36,19 @@ impl ops::Index<SysrootCrate> for Sysroot {\n }\n \n impl Sysroot {\n+    /// Returns sysroot \"root\" directory, where `bin/`, `etc/`, `lib/`, `libexec/`\n+    /// subfolder live, like:\n+    /// `$HOME/.rustup/toolchains/nightly-2022-07-23-x86_64-unknown-linux-gnu`\n     pub fn root(&self) -> &AbsPath {\n         &self.root\n     }\n \n+    /// Returns the sysroot \"source\" directory, where stdlib sources are located, like:\n+    /// `$HOME/.rustup/toolchains/nightly-2022-07-23-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library`\n+    pub fn src_root(&self) -> &AbsPath {\n+        &self.src_root\n+    }\n+\n     pub fn public_deps(&self) -> impl Iterator<Item = (&'static str, SysrootCrate, bool)> + '_ {\n         // core is added as a dependency before std in order to\n         // mimic rustcs dependency order\n@@ -61,7 +71,7 @@ impl Sysroot {\n         tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n         let sysroot_dir = discover_sysroot_dir(dir)?;\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir)?;\n-        let res = Sysroot::load(sysroot_src_dir)?;\n+        let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n         Ok(res)\n     }\n \n@@ -71,14 +81,15 @@ impl Sysroot {\n         discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n \n-    pub fn load(sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n-        let mut sysroot = Sysroot { root: sysroot_src_dir, crates: Arena::default() };\n+    pub fn load(sysroot_dir: AbsPathBuf, sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n+        let mut sysroot =\n+            Sysroot { root: sysroot_dir, src_root: sysroot_src_dir, crates: Arena::default() };\n \n         for path in SYSROOT_CRATES.trim().lines() {\n             let name = path.split('/').last().unwrap();\n             let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n                 .into_iter()\n-                .map(|it| sysroot.root.join(it))\n+                .map(|it| sysroot.src_root.join(it))\n                 .filter_map(|it| ManifestPath::try_from(it).ok())\n                 .find(|it| fs::metadata(it).is_ok());\n \n@@ -119,7 +130,7 @@ impl Sysroot {\n             };\n             anyhow::bail!(\n                 \"could not find libcore in sysroot path `{}`{}\",\n-                sysroot.root.as_path().display(),\n+                sysroot.src_root.as_path().display(),\n                 var_note,\n             );\n         }"}, {"sha": "e304a59c0180bf7ef9c38e8f6269c35f4c167973", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -75,8 +75,11 @@ fn get_test_path(file: &str) -> PathBuf {\n \n fn get_fake_sysroot() -> Sysroot {\n     let sysroot_path = get_test_path(\"fake-sysroot\");\n-    let sysroot_src_dir = AbsPathBuf::assert(sysroot_path);\n-    Sysroot::load(sysroot_src_dir).unwrap()\n+    // there's no `libexec/` directory with a `proc-macro-srv` binary in that\n+    // fake sysroot, so we give them both the same path:\n+    let sysroot_dir = AbsPathBuf::assert(sysroot_path);\n+    let sysroot_src_dir = sysroot_dir.clone();\n+    Sysroot::load(sysroot_dir, sysroot_src_dir).unwrap()\n }\n \n fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {"}, {"sha": "b144006b44e037580db5354357c564ea466698ea", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -230,10 +230,26 @@ impl ProjectWorkspace {\n         project_json: ProjectJson,\n         target: Option<&str>,\n     ) -> Result<ProjectWorkspace> {\n-        let sysroot = match &project_json.sysroot_src {\n-            Some(path) => Some(Sysroot::load(path.clone())?),\n-            None => None,\n+        let sysroot = match (project_json.sysroot.clone(), project_json.sysroot_src.clone()) {\n+            (Some(sysroot), Some(sysroot_src)) => Some(Sysroot::load(sysroot, sysroot_src)?),\n+            (Some(sysroot), None) => {\n+                // assume sysroot is structured like rustup's and guess `sysroot_src`\n+                let sysroot_src =\n+                    sysroot.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\").join(\"library\");\n+\n+                Some(Sysroot::load(sysroot, sysroot_src)?)\n+            }\n+            (None, Some(sysroot_src)) => {\n+                // assume sysroot is structured like rustup's and guess `sysroot`\n+                let mut sysroot = sysroot_src.clone();\n+                for _ in 0..5 {\n+                    sysroot.pop();\n+                }\n+                Some(Sysroot::load(sysroot, sysroot_src)?)\n+            }\n+            (None, None) => None,\n         };\n+\n         let rustc_cfg = rustc_cfg::get(None, target);\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n@@ -345,7 +361,7 @@ impl ProjectWorkspace {\n                     })\n                     .chain(sysroot.iter().map(|sysroot| PackageRoot {\n                         is_local: false,\n-                        include: vec![sysroot.root().to_path_buf()],\n+                        include: vec![sysroot.src_root().to_path_buf()],\n                         exclude: Vec::new(),\n                     }))\n                     .chain(rustc.iter().flat_map(|rustc| {"}, {"sha": "9ae361b034e28959043b1fbd2a40298fb86a7146", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba94a89e9bb6e848077859a9603a2f9a50c03c7/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=7ba94a89e9bb6e848077859a9603a2f9a50c03c7", "patch": "@@ -305,8 +305,42 @@ impl GlobalState {\n \n         if self.proc_macro_clients.is_empty() {\n             if let Some((path, args)) = self.config.proc_macro_srv() {\n-                self.proc_macro_clients = (0..self.workspaces.len())\n-                    .map(|_| {\n+                self.proc_macro_clients = self\n+                    .workspaces\n+                    .iter()\n+                    .map(|ws| {\n+                        let mut args = args.clone();\n+                        let mut path = path.clone();\n+\n+                        if let ProjectWorkspace::Cargo { sysroot, .. } = ws {\n+                            tracing::info!(\"Found a cargo workspace...\");\n+                            if let Some(sysroot) = sysroot.as_ref() {\n+                                tracing::info!(\"Found a cargo workspace with a sysroot...\");\n+                                let server_path = sysroot\n+                                    .root()\n+                                    .join(\"libexec\")\n+                                    .join(\"rust-analyzer-proc-macro-srv\");\n+                                if std::fs::metadata(&server_path).is_ok() {\n+                                    tracing::info!(\n+                                        \"And the server exists at {}\",\n+                                        server_path.display()\n+                                    );\n+                                    path = server_path;\n+                                    args = vec![];\n+                                } else {\n+                                    tracing::info!(\n+                                        \"And the server does not exist at {}\",\n+                                        server_path.display()\n+                                    );\n+                                }\n+                            }\n+                        }\n+\n+                        tracing::info!(\n+                            \"Using proc-macro server at {} with args {:?}\",\n+                            path.display(),\n+                            args\n+                        );\n                         ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|err| {\n                             let error = format!(\n                                 \"Failed to run proc_macro_srv from path {}, error: {:?}\","}]}