{"sha": "7e0f7a50ab649fb70773af35e78ca73b5123f52e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMGY3YTUwYWI2NDlmYjcwNzczYWYzNWU3OGNhNzNiNTEyM2Y1MmU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-26T11:15:47Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-03-26T11:38:23Z"}, "message": "store a copy of the Issue32230 info within TypeError\n\nThe data can't be looked up from the region variable directly, because\nthe region variable might have been destroyed at the end of a snapshot.\n\nFixes #40000.\nFixes #40743.", "tree": {"sha": "fd3de4e03024db58e4a2a63f0354722041c64bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd3de4e03024db58e4a2a63f0354722041c64bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0f7a50ab649fb70773af35e78ca73b5123f52e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0f7a50ab649fb70773af35e78ca73b5123f52e", "html_url": "https://github.com/rust-lang/rust/commit/7e0f7a50ab649fb70773af35e78ca73b5123f52e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0f7a50ab649fb70773af35e78ca73b5123f52e/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c67bd632e961a57863805e5d0a400f97da9b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c67bd632e961a57863805e5d0a400f97da9b93", "html_url": "https://github.com/rust-lang/rust/commit/49c67bd632e961a57863805e5d0a400f97da9b93"}], "stats": {"total": 105, "additions": 69, "deletions": 36}, "files": [{"sha": "9fa2bc8a2a7a96f5290c4be26adaaccdc78b3918", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7e0f7a50ab649fb70773af35e78ca73b5123f52e", "patch": "@@ -426,30 +426,26 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"note_issue_32330: terr={:?}\", terr);\n         match *terr {\n-            TypeError::RegionsInsufficientlyPolymorphic(_, &Region::ReVar(vid)) |\n-            TypeError::RegionsOverlyPolymorphic(_, &Region::ReVar(vid)) => {\n-                match self.region_vars.var_origin(vid) {\n-                    RegionVariableOrigin::EarlyBoundRegion(_, _, Some(Issue32330 {\n-                        fn_def_id,\n-                        region_name\n-                    })) => {\n-                        diag.note(\n-                            &format!(\"lifetime parameter `{0}` declared on fn `{1}` \\\n-                                      appears only in the return type, \\\n-                                      but here is required to be higher-ranked, \\\n-                                      which means that `{0}` must appear in both \\\n-                                      argument and return types\",\n-                                     region_name,\n-                                     self.tcx.item_path_str(fn_def_id)));\n-                        diag.note(\n-                            &format!(\"this error is the result of a recent bug fix; \\\n-                                      for more information, see issue #33685 \\\n-                                      <https://github.com/rust-lang/rust/issues/33685>\"));\n-                    }\n-                    _ => { }\n-                }\n+            TypeError::RegionsInsufficientlyPolymorphic(_, _, Some(box Issue32330 {\n+                fn_def_id, region_name\n+            })) |\n+            TypeError::RegionsOverlyPolymorphic(_, _, Some(box Issue32330 {\n+                fn_def_id, region_name\n+            })) => {\n+                diag.note(\n+                    &format!(\"lifetime parameter `{0}` declared on fn `{1}` \\\n+                              appears only in the return type, \\\n+                              but here is required to be higher-ranked, \\\n+                              which means that `{0}` must appear in both \\\n+                              argument and return types\",\n+                             region_name,\n+                             self.tcx.item_path_str(fn_def_id)));\n+                diag.note(\n+                    &format!(\"this error is the result of a recent bug fix; \\\n+                              for more information, see issue #33685 \\\n+                              <https://github.com/rust-lang/rust/issues/33685>\"));\n             }\n-            _ => { }\n+            _ => {}\n         }\n     }\n "}, {"sha": "e3ffc99c0e9677bc667494e388492c2201369aa3", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=7e0f7a50ab649fb70773af35e78ca73b5123f52e", "patch": "@@ -15,6 +15,7 @@ use super::{CombinedSnapshot,\n             InferCtxt,\n             LateBoundRegion,\n             HigherRankedType,\n+            RegionVariableOrigin,\n             SubregionOrigin,\n             SkolemizationMap};\n use super::combine::CombineFields;\n@@ -656,14 +657,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        skol_br,\n                        tainted_region);\n \n+                let issue_32330 = if let &ty::ReVar(vid) = tainted_region {\n+                    match self.region_vars.var_origin(vid) {\n+                        RegionVariableOrigin::EarlyBoundRegion(_, _, issue_32330) => {\n+                            issue_32330.map(Box::new)\n+                        }\n+                        _ => None\n+                    }\n+                } else {\n+                    None\n+                };\n+\n                 if overly_polymorphic {\n                     debug!(\"Overly polymorphic!\");\n                     return Err(TypeError::RegionsOverlyPolymorphic(skol_br,\n-                                                                   tainted_region));\n+                                                                   tainted_region,\n+                                                                   issue_32330));\n                 } else {\n                     debug!(\"Not as polymorphic!\");\n                     return Err(TypeError::RegionsInsufficientlyPolymorphic(skol_br,\n-                                                                           tainted_region));\n+                                                                           tainted_region,\n+                                                                           issue_32330));\n                 }\n             }\n         }"}, {"sha": "73d9c8b00ae472656765a3e2dd892df1b9720903", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=7e0f7a50ab649fb70773af35e78ca73b5123f52e", "patch": "@@ -39,8 +39,8 @@ pub enum TypeError<'tcx> {\n     RegionsDoesNotOutlive(&'tcx Region, &'tcx Region),\n     RegionsNotSame(&'tcx Region, &'tcx Region),\n     RegionsNoOverlap(&'tcx Region, &'tcx Region),\n-    RegionsInsufficientlyPolymorphic(BoundRegion, &'tcx Region),\n-    RegionsOverlyPolymorphic(BoundRegion, &'tcx Region),\n+    RegionsInsufficientlyPolymorphic(BoundRegion, &'tcx Region, Option<Box<ty::Issue32330>>),\n+    RegionsOverlyPolymorphic(BoundRegion, &'tcx Region, Option<Box<ty::Issue32330>>),\n     Sorts(ExpectedFound<Ty<'tcx>>),\n     IntMismatch(ExpectedFound<ty::IntVarValue>),\n     FloatMismatch(ExpectedFound<ast::FloatTy>),\n@@ -116,11 +116,11 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             RegionsNoOverlap(..) => {\n                 write!(f, \"lifetimes do not intersect\")\n             }\n-            RegionsInsufficientlyPolymorphic(br, _) => {\n+            RegionsInsufficientlyPolymorphic(br, _, _) => {\n                 write!(f, \"expected bound lifetime parameter {}, \\\n                            found concrete lifetime\", br)\n             }\n-            RegionsOverlyPolymorphic(br, _) => {\n+            RegionsOverlyPolymorphic(br, _, _) => {\n                 write!(f, \"expected concrete lifetime, \\\n                            found bound lifetime parameter {}\", br)\n             }\n@@ -253,15 +253,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 self.note_and_explain_region(db, \"...does not overlap \",\n                                            region2, \"\");\n             }\n-            RegionsInsufficientlyPolymorphic(_, conc_region) => {\n+            RegionsInsufficientlyPolymorphic(_, conc_region, _) => {\n                 self.note_and_explain_region(db, \"concrete lifetime that was found is \",\n                                            conc_region, \"\");\n             }\n-            RegionsOverlyPolymorphic(_, &ty::ReVar(_)) => {\n+            RegionsOverlyPolymorphic(_, &ty::ReVar(_), _) => {\n                 // don't bother to print out the message below for\n                 // inference variables, it's not very illuminating.\n             }\n-            RegionsOverlyPolymorphic(_, conc_region) => {\n+            RegionsOverlyPolymorphic(_, conc_region, _) => {\n                 self.note_and_explain_region(db, \"expected concrete lifetime is \",\n                                            conc_region, \"\");\n             }"}, {"sha": "9126600e3f65393d2eff900e06bcbd077535be8d", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=7e0f7a50ab649fb70773af35e78ca73b5123f52e", "patch": "@@ -293,11 +293,13 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             RegionsNoOverlap(a, b) => {\n                 return tcx.lift(&(a, b)).map(|(a, b)| RegionsNoOverlap(a, b))\n             }\n-            RegionsInsufficientlyPolymorphic(a, b) => {\n-                return tcx.lift(&b).map(|b| RegionsInsufficientlyPolymorphic(a, b))\n+            RegionsInsufficientlyPolymorphic(a, b, ref c) => {\n+                let c = c.clone();\n+                return tcx.lift(&b).map(|b| RegionsInsufficientlyPolymorphic(a, b, c))\n             }\n-            RegionsOverlyPolymorphic(a, b) => {\n-                return tcx.lift(&b).map(|b| RegionsOverlyPolymorphic(a, b))\n+            RegionsOverlyPolymorphic(a, b, ref c) => {\n+                let c = c.clone();\n+                return tcx.lift(&b).map(|b| RegionsOverlyPolymorphic(a, b, c))\n             }\n             IntMismatch(x) => IntMismatch(x),\n             FloatMismatch(x) => FloatMismatch(x),"}, {"sha": "9be114ebcb6e0c110cd54f7039af3a1e4a4abeb5", "filename": "src/test/compile-fail/issue-40000.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0f7a50ab649fb70773af35e78ca73b5123f52e/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs?ref=7e0f7a50ab649fb70773af35e78ca73b5123f52e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(closure_to_fn_coercion)]\n+\n+fn main() {\n+    let bar: fn(&mut u32) = |_| {}; //~ ERROR mismatched types\n+    //~| expected concrete lifetime, found bound lifetime parameter\n+\n+    fn foo(x: Box<Fn(&i32)>) {}\n+    let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;\n+    foo(bar); //~ ERROR mismatched types\n+    //~| expected concrete lifetime, found bound lifetime parameter\n+}"}]}