{"sha": "f47cb0ecfbf396609eb7e0ac893aabc4c122a84c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0N2NiMGVjZmJmMzk2NjA5ZWI3ZTBhYzg5M2FhYmM0YzEyMmE4NGM=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-17T06:12:11Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-17T06:12:11Z"}, "message": "Remove error about obsolete dereferencing of newtype structs.\n\nA built-in feature enabling the dereferencing of newtype structs was removed\nin PR #11188, and this error (E0068) was added at the same time to warn of\nits removal. It seems to make sense to remove the error now, given that\nthe obsolete feature it is warning about was removed nearly a year and a\nhalf ago.", "tree": {"sha": "af9d65fd54a429cbdba334ac1bf915e8ebc41d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9d65fd54a429cbdba334ac1bf915e8ebc41d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47cb0ecfbf396609eb7e0ac893aabc4c122a84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47cb0ecfbf396609eb7e0ac893aabc4c122a84c", "html_url": "https://github.com/rust-lang/rust/commit/f47cb0ecfbf396609eb7e0ac893aabc4c122a84c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47cb0ecfbf396609eb7e0ac893aabc4c122a84c/comments", "author": null, "committer": null, "parents": [{"sha": "4f83c4b8513fe77ab27e1f8d07cf5c7d577a1fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f83c4b8513fe77ab27e1f8d07cf5c7d577a1fe2", "html_url": "https://github.com/rust-lang/rust/commit/4f83c4b8513fe77ab27e1f8d07cf5c7d577a1fe2"}], "stats": {"total": 24, "additions": 4, "deletions": 20}, "files": [{"sha": "db39d3c05ed4b3ff7ee9a7d2ba1aa2a46ce3e817", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f47cb0ecfbf396609eb7e0ac893aabc4c122a84c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47cb0ecfbf396609eb7e0ac893aabc4c122a84c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f47cb0ecfbf396609eb7e0ac893aabc4c122a84c", "patch": "@@ -3153,26 +3153,10 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                            Some(&**oprnd), oprnd_t, lvalue_pref) {\n                             Some(mt) => mt.ty,\n                             None => {\n-                                let is_newtype = match oprnd_t.sty {\n-                                    ty::ty_struct(did, substs) => {\n-                                        let fields = ty::struct_fields(fcx.tcx(), did, substs);\n-                                        fields.len() == 1\n-                                        && fields[0].name ==\n-                                        token::special_idents::unnamed_field.name\n-                                    }\n-                                    _ => false\n-                                };\n-                                if is_newtype {\n-                                    // This is an obsolete struct deref\n-                                    span_err!(tcx.sess, expr.span, E0068,\n-                                        \"single-field tuple-structs can \\\n-                                         no longer be dereferenced\");\n-                                } else {\n-                                    fcx.type_error_message(expr.span, |actual| {\n-                                        format!(\"type `{}` cannot be \\\n-                                                dereferenced\", actual)\n-                                    }, oprnd_t, None);\n-                                }\n+                                fcx.type_error_message(expr.span, |actual| {\n+                                    format!(\"type `{}` cannot be \\\n+                                            dereferenced\", actual)\n+                                }, oprnd_t, None);\n                                 tcx.types.err\n                             }\n                         }"}]}