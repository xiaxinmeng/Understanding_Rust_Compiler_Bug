{"sha": "8d1a3801faa199acb2a86580247afd672bd838f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWEzODAxZmFhMTk5YWNiMmE4NjU4MDI0N2FmZDY3MmJkODM4Zjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-17T23:29:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-17T23:29:03Z"}, "message": "review comments", "tree": {"sha": "53809373fa76d2f04aa06c8fa993ad9f203c1d40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53809373fa76d2f04aa06c8fa993ad9f203c1d40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1a3801faa199acb2a86580247afd672bd838f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1a3801faa199acb2a86580247afd672bd838f9", "html_url": "https://github.com/rust-lang/rust/commit/8d1a3801faa199acb2a86580247afd672bd838f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1a3801faa199acb2a86580247afd672bd838f9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "url": "https://api.github.com/repos/rust-lang/rust/commits/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961", "html_url": "https://github.com/rust-lang/rust/commit/af45d8a5bb4909e6908c4d7bba80eedcdcd7f961"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "ef2389fcefafcedc17646ec3afaf355e002bb5ae", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d1a3801faa199acb2a86580247afd672bd838f9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1a3801faa199acb2a86580247afd672bd838f9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8d1a3801faa199acb2a86580247afd672bd838f9", "patch": "@@ -485,7 +485,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             module_path.push(Segment {\n                                 ident: Ident { name: kw::PathRoot, span: source.ident.span },\n                                 id: Some(self.r.next_node_id()),\n-                                has_args: false,\n+                                has_generic_args: false,\n                             });\n                             source.ident.name = crate_name;\n                         }"}, {"sha": "a6e016e9e6a22f5e8237e8679b3b841966675481", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d1a3801faa199acb2a86580247afd672bd838f9/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1a3801faa199acb2a86580247afd672bd838f9/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=8d1a3801faa199acb2a86580247afd672bd838f9", "patch": "@@ -920,7 +920,9 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n         let (ident, span) = match path {\n-            [segment] if !segment.has_args => (segment.ident.to_string(), segment.ident.span),\n+            [segment] if !segment.has_generic_args => {\n+                (segment.ident.to_string(), segment.ident.span)\n+            }\n             _ => return None,\n         };\n         let mut iter = ident.chars().map(|c| c.is_uppercase());"}, {"sha": "a30e5cc1ab60172b9d18218bc48ad376d4586121", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d1a3801faa199acb2a86580247afd672bd838f9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1a3801faa199acb2a86580247afd672bd838f9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8d1a3801faa199acb2a86580247afd672bd838f9", "patch": "@@ -233,7 +233,7 @@ pub struct Segment {\n     id: Option<NodeId>,\n     /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing\n     /// nonsensical suggestions.\n-    has_args: bool,\n+    has_generic_args: bool,\n }\n \n impl Segment {\n@@ -242,7 +242,7 @@ impl Segment {\n     }\n \n     fn from_ident(ident: Ident) -> Segment {\n-        Segment { ident, id: None, has_args: false }\n+        Segment { ident, id: None, has_generic_args: false }\n     }\n \n     fn names_to_string(segments: &[Segment]) -> String {\n@@ -252,7 +252,7 @@ impl Segment {\n \n impl<'a> From<&'a ast::PathSegment> for Segment {\n     fn from(seg: &'a ast::PathSegment) -> Segment {\n-        Segment { ident: seg.ident, id: Some(seg.id), has_args: seg.args.is_some() }\n+        Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }\n     }\n }\n \n@@ -2019,7 +2019,7 @@ impl<'a> Resolver<'a> {\n             path, opt_ns, record_used, path_span, crate_lint,\n         );\n \n-        for (i, &Segment { ident, id, has_args: _ }) in path.iter().enumerate() {\n+        for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {\n             debug!(\"resolve_path ident {} {:?} {:?}\", i, ident, id);\n             let record_segment_res = |this: &mut Self, res| {\n                 if record_used {"}]}