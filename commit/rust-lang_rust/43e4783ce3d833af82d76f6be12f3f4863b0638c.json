{"sha": "43e4783ce3d833af82d76f6be12f3f4863b0638c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTQ3ODNjZTNkODMzYWY4MmQ3NmY2YmUxMmYzZjQ4NjNiMDYzOGM=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-11-09T18:19:34Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-11-09T18:19:34Z"}, "message": "address reviewer comments", "tree": {"sha": "7d88019d1687a37e43ec4d7ef5465532182534d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d88019d1687a37e43ec4d7ef5465532182534d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e4783ce3d833af82d76f6be12f3f4863b0638c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e4783ce3d833af82d76f6be12f3f4863b0638c", "html_url": "https://github.com/rust-lang/rust/commit/43e4783ce3d833af82d76f6be12f3f4863b0638c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e4783ce3d833af82d76f6be12f3f4863b0638c/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459dae94a1c5ea658e78dbe99d88108d9cacc51d", "url": "https://api.github.com/repos/rust-lang/rust/commits/459dae94a1c5ea658e78dbe99d88108d9cacc51d", "html_url": "https://github.com/rust-lang/rust/commit/459dae94a1c5ea658e78dbe99d88108d9cacc51d"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "07173f41cd6db84fbea6be47ccf3d7f9d74b7809", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43e4783ce3d833af82d76f6be12f3f4863b0638c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e4783ce3d833af82d76f6be12f3f4863b0638c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=43e4783ce3d833af82d76f6be12f3f4863b0638c", "patch": "@@ -671,12 +671,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             (&TestKind::Range { .. }, _) => None,\n \n             (&TestKind::Eq { .. } | &TestKind::Len { .. }, _) => {\n-                // We do call `test()` below to see what kind of test `match_pair` would require.\n-                // If it is the same test as `test`, then we can just use `test`.\n+                // The call to `self.test(&match_pair)` below is not actually used to generate any\n+                // MIR. Instead, we just want to compare with `test` (the parameter of the method)\n+                // to see if it is the same.\n                 //\n-                // However, `test()` assumes that there won't be any or-patterns, so we need to\n-                // specially handle that here and return `None` (since the `test` clearly doesn't\n-                // apply to an or-pattern).\n+                // However, at this point we can still encounter or-patterns that were extracted\n+                // from previous calls to `sort_candidate`, so we need to manually address that\n+                // case to avoid panicking in `self.test()`.\n                 if let PatKind::Or { .. } = &*match_pair.pattern.kind {\n                     return None;\n                 }"}, {"sha": "e6a723a6609f81d1509cc2d47303791c83615047", "filename": "src/test/ui/match/issue-72680.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/43e4783ce3d833af82d76f6be12f3f4863b0638c/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e4783ce3d833af82d76f6be12f3f4863b0638c/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs?ref=43e4783ce3d833af82d76f6be12f3f4863b0638c", "patch": "@@ -3,39 +3,39 @@\n #![feature(or_patterns)]\n \n fn main() {\n-    assert_eq!(f(\"\", 0), true);\n-    assert_eq!(f(\"a\", 1), true);\n-    assert_eq!(f(\"b\", 1), true);\n+    assert!(f(\"\", 0));\n+    assert!(f(\"a\", 1));\n+    assert!(f(\"b\", 1));\n \n-    assert_eq!(f(\"\", 1), false);\n-    assert_eq!(f(\"a\", 0), false);\n-    assert_eq!(f(\"b\", 0), false);\n+    assert!(!f(\"\", 1));\n+    assert!(!f(\"a\", 0));\n+    assert!(!f(\"b\", 0));\n \n-    assert_eq!(f(\"asdf\", 032), false);\n+    assert!(!f(\"asdf\", 032));\n \n     ////\n \n-    assert_eq!(g(true, true, true), false);\n-    assert_eq!(g(false, true, true), false);\n-    assert_eq!(g(true, false, true), false);\n-    assert_eq!(g(false, false, true), false);\n-    assert_eq!(g(true, true, false), false);\n+    assert!(!g(true, true, true));\n+    assert!(!g(false, true, true));\n+    assert!(!g(true, false, true));\n+    assert!(!g(false, false, true));\n+    assert!(!g(true, true, false));\n \n-    assert_eq!(g(false, true, false), true);\n-    assert_eq!(g(true, false, false), true);\n-    assert_eq!(g(false, false, false), true);\n+    assert!(g(false, true, false));\n+    assert!(g(true, false, false));\n+    assert!(g(false, false, false));\n \n     ////\n \n-    assert_eq!(h(true, true, true), false);\n-    assert_eq!(h(false, true, true), false);\n-    assert_eq!(h(true, false, true), false);\n-    assert_eq!(h(false, false, true), false);\n-    assert_eq!(h(true, true, false), false);\n+    assert!(!h(true, true, true));\n+    assert!(!h(false, true, true));\n+    assert!(!h(true, false, true));\n+    assert!(!h(false, false, true));\n+    assert!(!h(true, true, false));\n \n-    assert_eq!(h(false, true, false), true);\n-    assert_eq!(h(true, false, false), true);\n-    assert_eq!(h(false, false, false), true);\n+    assert!(h(false, true, false));\n+    assert!(h(true, false, false));\n+    assert!(h(false, false, false));\n }\n \n fn f(s: &str, num: usize) -> bool {"}]}