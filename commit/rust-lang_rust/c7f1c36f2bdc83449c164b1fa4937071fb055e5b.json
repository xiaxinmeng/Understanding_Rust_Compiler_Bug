{"sha": "c7f1c36f2bdc83449c164b1fa4937071fb055e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZjFjMzZmMmJkYzgzNDQ5YzE2NGIxZmE0OTM3MDcxZmIwNTVlNWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-10T22:16:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-10T22:16:45Z"}, "message": "Update docs on vector value syntax.", "tree": {"sha": "2500988342d27647b4a3487114f2c1bc83253f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2500988342d27647b4a3487114f2c1bc83253f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7f1c36f2bdc83449c164b1fa4937071fb055e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f1c36f2bdc83449c164b1fa4937071fb055e5b", "html_url": "https://github.com/rust-lang/rust/commit/c7f1c36f2bdc83449c164b1fa4937071fb055e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7f1c36f2bdc83449c164b1fa4937071fb055e5b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007af36bb38266953fd14e4136858b6e1f7aa703", "url": "https://api.github.com/repos/rust-lang/rust/commits/007af36bb38266953fd14e4136858b6e1f7aa703", "html_url": "https://github.com/rust-lang/rust/commit/007af36bb38266953fd14e4136858b6e1f7aa703"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "11c31314b1702547baaa63b6a5a9167fe851e76c", "filename": "doc/rust.texi", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7f1c36f2bdc83449c164b1fa4937071fb055e5b/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/c7f1c36f2bdc83449c164b1fa4937071fb055e5b/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=c7f1c36f2bdc83449c164b1fa4937071fb055e5b", "patch": "@@ -2296,7 +2296,7 @@ assert (p._1 == \"world\");\n @cindex Vector types\n @cindex Array types, see @i{Vector types}\n \n-The vector type-constructor @code{vec} represents a homogeneous array of\n+The vector type-constructor represents a homogeneous array of\n values of a given type. A vector has a fixed size. The layer of a vector type\n is to the layer of its member type, like any type that contains a single\n member type.\n@@ -2305,11 +2305,11 @@ Vectors can be sliced. A slice expression builds a new vector by copying a\n contiguous range -- given by a pair of indices representing a half-open\n interval -- out of the sliced vector.\n \n-An example of a @code{vec} type and its use:\n+An example of a vector type and its use:\n @example\n-let vec[int] v = vec(7, 5, 3);\n+let [int] v = [7, 5, 3];\n let int i = v.(2);\n-let vec[int] v2 = v.(0,1); // Form a slice.\n+let [int] v2 = v.(0,1); // Form a slice.\n @end example\n \n Vectors always @emph{allocate} a storage region sufficient to store the first\n@@ -2318,8 +2318,8 @@ vector. This behaviour supports idiomatic in-place ``growth'' of a mutable\n slot holding a vector:\n \n @example\n-let mutable vec[int] v = vec(1, 2, 3);\n-v += vec(4, 5, 6);\n+let mutable vec[int] v = [1, 2, 3];\n+v += [4, 5, 6];\n @end example\n \n Normal vector concatenation causes the allocation of a fresh vector to hold\n@@ -2451,7 +2451,7 @@ An example of a @code{chan} type:\n @example\n type chan[vec[str]] svc;\n let svc c = get_chan();\n-let vec[str] v = vec(\"hello\", \"world\");\n+let vec[str] v = [\"hello\", \"world\"];\n c <| v;\n @end example\n \n@@ -3346,7 +3346,7 @@ Executing a @code{cont} expression immediately terminates the current iteration\n of the innermost loop enclosing it, returning control to the loop\n @emph{head}. In the case of a @code{while} loop, the head is the conditional\n expression controlling the loop. In the case of a @code{for} or @code{for\n-each} loop, the head is the iterator or vector-slice increment controlling the\n+each} loop, the head is the iterator or vector-element increment controlling the\n loop.\n \n A @code{cont} expression is only permitted in the body of a loop.\n@@ -3368,7 +3368,7 @@ run the loop over the slice.\n \n Example of 4 for loops, all identical:\n @example\n-let vec[foo] v = vec(a, b, c);\n+let vec[foo] v = [a, b, c];\n \n for (foo e in v.(0, _vec.len(v))) @{\n     bar(e);\n@@ -3718,17 +3718,12 @@ allocating and freeing boxed values.\n @c * Ref.Run.Mem::                 Runtime built-in type services.\n @cindex Built-in types\n \n-The runtime provides C and Rust code to manage several built-in types:\n-@itemize\n-@item @code{vec}, the type of vectors.\n-@item @code{str}, the type of UTF-8 strings.\n-@item @code{big}, the type of arbitrary-precision integers.\n-@item @code{chan}, the type of communication channels.\n-@item @code{port}, the type of communication ports.\n-@item @code{task}, the type of tasks.\n-@end itemize\n-Support for other built-in types such as simple types, tuples,\n-records, and tags is open-coded by the Rust compiler.\n+The runtime provides C and Rust code to assist with various built-in types,\n+such as vectors, strings, bignums, and the low level communication system\n+(ports, channels, tasks).\n+\n+Support for other built-in types such as simple types, tuples, records, and\n+tags is open-coded by the Rust compiler.\n \n @node       Ref.Run.Comm\n @subsection Ref.Run.Comm"}]}