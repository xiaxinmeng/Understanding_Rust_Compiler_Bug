{"sha": "44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZGYwZTJhOWZlYmMzY2FlY2U4NjFmMmRkYmJjNmZmMzc3Y2NiNTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-12T14:44:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-12T14:44:34Z"}, "message": "Merge #6198\n\n6198: Skip macro matcher fragment name semantic highlighting r=matklad a=Veykril\n\nImplements a small state-machine for macro_rules! highlighting to separate out the matcher part of its rules. This skips semantically highlighting names of metavariables in the matcher and expander. This might even allow for more fun macro highlighting things in the future.\r\n\r\nFixes #4380.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "85dfcc25b89b9b3a147ccb4d32b747fd3a8d5247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85dfcc25b89b9b3a147ccb4d32b747fd3a8d5247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhGvSCRBK7hj4Ov3rIwAAdHIIAC4Wi7T8oe5bsmfQI+NSU/K4\nfpKfw5a+i2Rh/lJ+6LxC7wQNcXBxQwH6hjm6E0GouGwZ9Ux4Wdw1FFjPvx0AdjP3\np+h5gm00aagAEu5Rxm7G5vAjlm5iUL9sdx8CZA/7gpi63pXeBuc7aaS7awY9YlfH\nLNmyOVAUkFVIJ2LPStHxQTeaBQak16GL9nUcq1ZMASW30VVdDEs22Yla17biAz+p\n+8i6kwCuFUWMLQXJVmCQypcbiD52aSjF8SRC99WInI5xvsAxd8y+nJVZF/HjENKq\nafw2W1BUTgJQOnKZAGmtiTA13QEMZQWATyIsgfPoyk7MEaZcya74O8WHFymobl8=\n=PcZw\n-----END PGP SIGNATURE-----\n", "payload": "tree 85dfcc25b89b9b3a147ccb4d32b747fd3a8d5247\nparent 93de4918ea06c461b16d844434b8352cbc62704a\nparent 1416413d69bfd11d2652349a7a6b20e76924de67\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602513874 +0000\ncommitter GitHub <noreply@github.com> 1602513874 +0000\n\nMerge #6198\n\n6198: Skip macro matcher fragment name semantic highlighting r=matklad a=Veykril\n\nImplements a small state-machine for macro_rules! highlighting to separate out the matcher part of its rules. This skips semantically highlighting names of metavariables in the matcher and expander. This might even allow for more fun macro highlighting things in the future.\r\n\r\nFixes #4380.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "html_url": "https://github.com/rust-lang/rust/commit/44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93de4918ea06c461b16d844434b8352cbc62704a", "url": "https://api.github.com/repos/rust-lang/rust/commits/93de4918ea06c461b16d844434b8352cbc62704a", "html_url": "https://github.com/rust-lang/rust/commit/93de4918ea06c461b16d844434b8352cbc62704a"}, {"sha": "1416413d69bfd11d2652349a7a6b20e76924de67", "url": "https://api.github.com/repos/rust-lang/rust/commits/1416413d69bfd11d2652349a7a6b20e76924de67", "html_url": "https://github.com/rust-lang/rust/commit/1416413d69bfd11d2652349a7a6b20e76924de67"}], "stats": {"total": 128, "additions": 124, "deletions": 4}, "files": [{"sha": "6aafd6fd50c8fe74e9116198a77683ac90f19c16", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 115, "deletions": 3, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "patch": "@@ -68,7 +68,7 @@ pub(crate) fn highlight(\n     // When we leave a node, the we use it to flatten the highlighted ranges.\n     let mut stack = HighlightedRangeStack::new();\n \n-    let mut current_macro_call: Option<ast::MacroCall> = None;\n+    let mut current_macro_call: Option<(ast::MacroCall, Option<MacroMatcherParseState>)> = None;\n     let mut format_string: Option<SyntaxElement> = None;\n \n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n@@ -92,15 +92,16 @@ pub(crate) fn highlight(\n         // Track \"inside macro\" state\n         match event.clone().map(|it| it.into_node().and_then(ast::MacroCall::cast)) {\n             WalkEvent::Enter(Some(mc)) => {\n-                current_macro_call = Some(mc.clone());\n                 if let Some(range) = macro_call_range(&mc) {\n                     stack.add(HighlightedRange {\n                         range,\n                         highlight: HighlightTag::Macro.into(),\n                         binding_hash: None,\n                     });\n                 }\n+                let mut is_macro_rules = None;\n                 if let Some(name) = mc.is_macro_rules() {\n+                    is_macro_rules = Some(MacroMatcherParseState::new());\n                     if let Some((highlight, binding_hash)) = highlight_element(\n                         &sema,\n                         &mut bindings_shadow_count,\n@@ -114,10 +115,11 @@ pub(crate) fn highlight(\n                         });\n                     }\n                 }\n+                current_macro_call = Some((mc.clone(), is_macro_rules));\n                 continue;\n             }\n             WalkEvent::Leave(Some(mc)) => {\n-                assert!(current_macro_call == Some(mc));\n+                assert!(current_macro_call.map(|it| it.0) == Some(mc));\n                 current_macro_call = None;\n                 format_string = None;\n             }\n@@ -146,6 +148,20 @@ pub(crate) fn highlight(\n             WalkEvent::Leave(_) => continue,\n         };\n \n+        // check if in matcher part of a macro_rules rule\n+        if let Some((_, Some(ref mut state))) = current_macro_call {\n+            if let Some(tok) = element.as_token() {\n+                if matches!(\n+                    update_macro_rules_state(tok, state),\n+                    RuleState::Matcher | RuleState::Expander\n+                ) {\n+                    if skip_metavariables(element.clone()) {\n+                        continue;\n+                    }\n+                }\n+            }\n+        }\n+\n         let range = element.text_range();\n \n         let element_to_highlight = if current_macro_call.is_some() && element.kind() != COMMENT {\n@@ -918,3 +934,99 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabas\n         _ => default.into(),\n     }\n }\n+\n+struct MacroMatcherParseState {\n+    /// Opening and corresponding closing bracket of the matcher or expander of the current rule\n+    paren_ty: Option<(SyntaxKind, SyntaxKind)>,\n+    paren_level: usize,\n+    rule_state: RuleState,\n+    /// Whether we are inside the outer `{` `}` macro block that holds the rules\n+    in_invoc_body: bool,\n+}\n+\n+impl MacroMatcherParseState {\n+    fn new() -> Self {\n+        MacroMatcherParseState {\n+            paren_ty: None,\n+            paren_level: 0,\n+            in_invoc_body: false,\n+            rule_state: RuleState::None,\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq)]\n+enum RuleState {\n+    Matcher,\n+    Expander,\n+    Between,\n+    None,\n+}\n+\n+impl RuleState {\n+    fn transition(&mut self) {\n+        *self = match self {\n+            RuleState::Matcher => RuleState::Between,\n+            RuleState::Expander => RuleState::None,\n+            RuleState::Between => RuleState::Expander,\n+            RuleState::None => RuleState::Matcher,\n+        };\n+    }\n+}\n+\n+fn update_macro_rules_state(tok: &SyntaxToken, state: &mut MacroMatcherParseState) -> RuleState {\n+    if !state.in_invoc_body {\n+        if tok.kind() == T!['{'] {\n+            state.in_invoc_body = true;\n+        }\n+        return state.rule_state;\n+    }\n+\n+    match state.paren_ty {\n+        Some((open, close)) => {\n+            if tok.kind() == open {\n+                state.paren_level += 1;\n+            } else if tok.kind() == close {\n+                state.paren_level -= 1;\n+                if state.paren_level == 0 {\n+                    let res = state.rule_state;\n+                    state.rule_state.transition();\n+                    state.paren_ty = None;\n+                    return res;\n+                }\n+            }\n+        }\n+        None => {\n+            match tok.kind() {\n+                T!['('] => {\n+                    state.paren_ty = Some((T!['('], T![')']));\n+                }\n+                T!['{'] => {\n+                    state.paren_ty = Some((T!['{'], T!['}']));\n+                }\n+                T!['['] => {\n+                    state.paren_ty = Some((T!['['], T![']']));\n+                }\n+                _ => (),\n+            }\n+            if state.paren_ty.is_some() {\n+                state.paren_level = 1;\n+                state.rule_state.transition();\n+            }\n+        }\n+    }\n+    state.rule_state\n+}\n+\n+fn skip_metavariables(element: SyntaxElement) -> bool {\n+    let tok = match element.as_token() {\n+        Some(tok) => tok,\n+        None => return false,\n+    };\n+    let is_fragment = || tok.prev_token().map(|tok| tok.kind()) == Some(T![$]);\n+    match tok.kind() {\n+        IDENT if is_fragment() => true,\n+        kind if kind.is_keyword() && is_fragment() => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "43f1b32fd7257889faa6444cdaf3266c40a6ae30", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "patch": "@@ -37,7 +37,7 @@\n </style>\n <pre><code><span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">println</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">{</span>\n-        <span class=\"punctuation\">$</span><span class=\"keyword\">crate</span><span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>io<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>_print<span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"keyword\">crate</span><span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+        <span class=\"punctuation\">$</span>crate<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>io<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>_print<span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>crate<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span><span class=\"punctuation\">)</span>\n <span class=\"punctuation\">}</span>\n #[rustc_builtin_macro]"}, {"sha": "0bb0928e44aafdc63821b7781fed8360a47ada23", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "patch": "@@ -115,6 +115,10 @@\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n+<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"punctuation\">{</span>\n+    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>type<span class=\"punctuation\">:</span>ty<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>type<span class=\"punctuation\">)</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>"}, {"sha": "126363b8beb4600dae556c497b4c243529709f5a", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44df0e2a9febc3caece861f2ddbbc6ff377ccb54/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=44df0e2a9febc3caece861f2ddbbc6ff377ccb54", "patch": "@@ -89,6 +89,10 @@ macro_rules! noop {\n     }\n }\n \n+macro_rules! keyword_frag {\n+    ($type:ty) => ($type)\n+}\n+\n // comment\n fn main() {\n     println!(\"Hello, {}!\", 92);"}]}