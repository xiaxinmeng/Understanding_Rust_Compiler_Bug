{"sha": "e193950c3c087c1acba48e75f6ac27d3dad1586d", "node_id": "C_kwDOAAsO6NoAKGUxOTM5NTBjM2MwODdjMWFjYmE0OGU3NWY2YWMyN2QzZGFkMTU4NmQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-14T14:06:27Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-24T12:41:21Z"}, "message": "Special case `ambiguity_error` if all candidates have the same \"kind\"", "tree": {"sha": "65f37e3304777dd6f4e14e81a5efebe3db9577ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f37e3304777dd6f4e14e81a5efebe3db9577ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e193950c3c087c1acba48e75f6ac27d3dad1586d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e193950c3c087c1acba48e75f6ac27d3dad1586d", "html_url": "https://github.com/rust-lang/rust/commit/e193950c3c087c1acba48e75f6ac27d3dad1586d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e193950c3c087c1acba48e75f6ac27d3dad1586d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9817385f4798097ebe277aea103bab74f3c7ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9817385f4798097ebe277aea103bab74f3c7ed6", "html_url": "https://github.com/rust-lang/rust/commit/e9817385f4798097ebe277aea103bab74f3c7ed6"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "6df87eb01b2e191f7ac528df2b8098be01666d59", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e193950c3c087c1acba48e75f6ac27d3dad1586d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e193950c3c087c1acba48e75f6ac27d3dad1586d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e193950c3c087c1acba48e75f6ac27d3dad1586d", "patch": "@@ -1016,7 +1016,7 @@ impl LinkCollector<'_, '_> {\n                 } else {\n                     // `[char]` when a `char` module is in scope\n                     let candidates = vec![(res, res.def_id(self.cx.tcx)), (prim, None)];\n-                    ambiguity_error(self.cx, diag_info, path_str, candidates);\n+                    ambiguity_error(self.cx, &diag_info, path_str, &candidates);\n                     return None;\n                 }\n             }\n@@ -1206,6 +1206,10 @@ impl LinkCollector<'_, '_> {\n             }\n         }\n \n+        if candidates.len() > 1 && !ambiguity_error(self.cx, &diag, &key.path_str, &candidates) {\n+            candidates = vec![candidates[0]];\n+        }\n+\n         if let &[(res, def_id)] = candidates.as_slice() {\n             let fragment = match (&key.extra_fragment, def_id) {\n                 (Some(_), Some(def_id)) => {\n@@ -1221,9 +1225,6 @@ impl LinkCollector<'_, '_> {\n             return r;\n         }\n \n-        if !candidates.is_empty() {\n-            ambiguity_error(self.cx, diag, &key.path_str, candidates);\n-        }\n         if cache_errors {\n             self.visited_links.insert(key, None);\n         }\n@@ -1898,21 +1899,30 @@ fn report_malformed_generics(\n }\n \n /// Report an ambiguity error, where there were multiple possible resolutions.\n+///\n+/// If all `candidates` have the same kind, it's not possible to disambiguate so in this case,\n+/// the function returns `false`. Otherwise, it'll emit the error and return `true`.\n fn ambiguity_error(\n     cx: &DocContext<'_>,\n-    diag_info: DiagnosticInfo<'_>,\n+    diag_info: &DiagnosticInfo<'_>,\n     path_str: &str,\n-    candidates: Vec<(Res, Option<DefId>)>,\n-) {\n+    candidates: &[(Res, Option<DefId>)],\n+) -> bool {\n     let mut msg = format!(\"`{}` is \", path_str);\n     let kinds = candidates\n-        .into_iter()\n+        .iter()\n         .map(\n             |(res, def_id)| {\n-                if let Some(def_id) = def_id { Res::from_def_id(cx.tcx, def_id) } else { res }\n+                if let Some(def_id) = def_id { Res::from_def_id(cx.tcx, *def_id) } else { *res }\n             },\n         )\n         .collect::<Vec<_>>();\n+    let descrs = kinds.iter().map(|res| res.descr()).collect::<FxHashSet<&'static str>>();\n+    if descrs.len() == 1 {\n+        // There is no way for users to disambiguate at this point, so better return the first\n+        // candidate and not show a warning.\n+        return false;\n+    }\n \n     match kinds.as_slice() {\n         [res1, res2] => {\n@@ -1936,7 +1946,7 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n@@ -1947,6 +1957,7 @@ fn ambiguity_error(\n             suggest_disambiguator(res, diag, path_str, diag_info.ori_link, sp);\n         }\n     });\n+    true\n }\n \n /// In case of an ambiguity or mismatched disambiguator, suggest the correct"}]}