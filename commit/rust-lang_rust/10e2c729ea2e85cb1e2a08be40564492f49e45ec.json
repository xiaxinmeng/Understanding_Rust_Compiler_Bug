{"sha": "10e2c729ea2e85cb1e2a08be40564492f49e45ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZTJjNzI5ZWEyZTg1Y2IxZTJhMDhiZTQwNTY0NDkyZjQ5ZTQ1ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-27T12:31:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-27T12:31:45Z"}, "message": "Auto merge of #55402 - estebank:macro-eof-2, r=nikomatsakis\n\nPoint at end of macro arm when encountering EOF\n\nFix #52866.", "tree": {"sha": "20a10dec78680734dbac4325e578103c88858595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a10dec78680734dbac4325e578103c88858595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10e2c729ea2e85cb1e2a08be40564492f49e45ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10e2c729ea2e85cb1e2a08be40564492f49e45ec", "html_url": "https://github.com/rust-lang/rust/commit/10e2c729ea2e85cb1e2a08be40564492f49e45ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10e2c729ea2e85cb1e2a08be40564492f49e45ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "691a7f8e2b2de984c3e0f062cbd294763af3d09a", "url": "https://api.github.com/repos/rust-lang/rust/commits/691a7f8e2b2de984c3e0f062cbd294763af3d09a", "html_url": "https://github.com/rust-lang/rust/commit/691a7f8e2b2de984c3e0f062cbd294763af3d09a"}, {"sha": "d011313d843b3ddcf095db06907abffdd9cc5904", "url": "https://api.github.com/repos/rust-lang/rust/commits/d011313d843b3ddcf095db06907abffdd9cc5904", "html_url": "https://github.com/rust-lang/rust/commit/d011313d843b3ddcf095db06907abffdd9cc5904"}], "stats": {"total": 195, "additions": 130, "deletions": 65}, "files": [{"sha": "ea425ad4c47a2ebea226537431beccb681f18adc", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -139,6 +139,17 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn replace_span_with(&mut self, after: Span) -> &mut Self {\n+        let before = self.span.clone();\n+        self.set_span(after);\n+        for span_label in before.span_labels() {\n+            if let Some(label) = span_label.label {\n+                self.span_label(after, label);\n+            }\n+        }\n+        self\n+    }\n+\n     pub fn note_expected_found(&mut self,\n                                label: &dyn fmt::Display,\n                                expected: DiagnosticStyledString,"}, {"sha": "8fd9590a6641517efbee2febc63f504bb4b3eee6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -281,7 +281,7 @@ pub enum ParseResult<T> {\n     Success(T),\n     /// Arm failed to match. If the second parameter is `token::Eof`, it indicates an unexpected\n     /// end of macro invocation. Otherwise, it indicates that no rules expected the given token.\n-    Failure(syntax_pos::Span, Token),\n+    Failure(syntax_pos::Span, Token, String),\n     /// Fatal error (malformed macro?). Abort compilation.\n     Error(syntax_pos::Span, String),\n }\n@@ -698,7 +698,7 @@ pub fn parse(\n             parser.span,\n         ) {\n             Success(_) => {}\n-            Failure(sp, tok) => return Failure(sp, tok),\n+            Failure(sp, tok, t) => return Failure(sp, tok, t),\n             Error(sp, msg) => return Error(sp, msg),\n         }\n \n@@ -710,7 +710,7 @@ pub fn parse(\n         // Error messages here could be improved with links to original rules.\n \n         // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,\n-        // either the parse is ambiguous (which should never happen) or their is a syntax error.\n+        // either the parse is ambiguous (which should never happen) or there is a syntax error.\n         if token_name_eq(&parser.token, &token::Eof) {\n             if eof_items.len() == 1 {\n                 let matches = eof_items[0]\n@@ -724,7 +724,15 @@ pub fn parse(\n                     \"ambiguity: multiple successful parses\".to_string(),\n                 );\n             } else {\n-                return Failure(parser.span, token::Eof);\n+                return Failure(\n+                    if parser.span.is_dummy() {\n+                        parser.span\n+                    } else {\n+                        sess.source_map().next_point(parser.span)\n+                    },\n+                    token::Eof,\n+                    \"missing tokens in macro arguments\".to_string(),\n+                );\n             }\n         }\n         // Performance hack: eof_items may share matchers via Rc with other things that we want\n@@ -757,9 +765,13 @@ pub fn parse(\n             );\n         }\n         // If there are no possible next positions AND we aren't waiting for the black-box parser,\n-        // then their is a syntax error.\n+        // then there is a syntax error.\n         else if bb_items.is_empty() && next_items.is_empty() {\n-            return Failure(parser.span, parser.token);\n+            return Failure(\n+                parser.span,\n+                parser.token,\n+                \"no rules expected this token in macro call\".to_string(),\n+            );\n         }\n         // Dump all possible `next_items` into `cur_items` for the next iteration.\n         else if !next_items.is_empty() {"}, {"sha": "ff622b0c18fac18c79045e903578ea6b186b06ca", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -11,6 +11,7 @@\n use {ast, attr};\n use syntax_pos::{Span, DUMMY_SP};\n use edition::Edition;\n+use errors::FatalError;\n use ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n use ext::expand::{AstFragment, AstFragmentKind};\n@@ -44,15 +45,34 @@ pub struct ParserAnyMacro<'a> {\n     /// Span of the expansion site of the macro this parser is for\n     site_span: Span,\n     /// The ident of the macro we're parsing\n-    macro_ident: ast::Ident\n+    macro_ident: ast::Ident,\n+    arm_span: Span,\n }\n \n impl<'a> ParserAnyMacro<'a> {\n     pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n-        let ParserAnyMacro { site_span, macro_ident, ref mut parser } = *self;\n+        let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n         let fragment = panictry!(parser.parse_ast_fragment(kind, true).map_err(|mut e| {\n+            if parser.token == token::Eof && e.message().ends_with(\", found `<eof>`\") {\n+                if !e.span.is_dummy() {  // early end of macro arm (#52866)\n+                    e.replace_span_with(parser.sess.source_map().next_point(parser.span));\n+                }\n+                let msg = &e.message[0];\n+                e.message[0] = (\n+                    format!(\n+                        \"macro expansion ends with an incomplete expression: {}\",\n+                        msg.0.replace(\", found `<eof>`\", \"\"),\n+                    ),\n+                    msg.1,\n+                );\n+            }\n             if e.span.is_dummy() {  // Get around lack of span in error (#30128)\n-                e.set_span(site_span);\n+                e.replace_span_with(site_span);\n+                if parser.sess.source_map().span_to_filename(arm_span).is_real() {\n+                    e.span_label(arm_span, \"in this macro arm\");\n+                }\n+            } else if !parser.sess.source_map().span_to_filename(parser.span).is_real() {\n+                e.span_label(site_span, \"in this macro invocation\");\n             }\n             e\n         }));\n@@ -120,6 +140,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     // Which arm's failure should we report? (the one furthest along)\n     let mut best_fail_spot = DUMMY_SP;\n     let mut best_fail_tok = None;\n+    let mut best_fail_text = None;\n \n     for (i, lhs) in lhses.iter().enumerate() { // try each arm's matchers\n         let lhs_tt = match *lhs {\n@@ -134,6 +155,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                     quoted::TokenTree::Delimited(_, ref delimed) => delimed.tts.clone(),\n                     _ => cx.span_bug(sp, \"malformed macro rhs\"),\n                 };\n+                let arm_span = rhses[i].span();\n \n                 let rhs_spans = rhs.iter().map(|t| t.span()).collect::<Vec<_>>();\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n@@ -172,12 +194,14 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                     // so we can print a useful error message if the parse of the expanded\n                     // macro leaves unparsed tokens.\n                     site_span: sp,\n-                    macro_ident: name\n+                    macro_ident: name,\n+                    arm_span,\n                 })\n             }\n-            Failure(sp, tok) => if sp.lo() >= best_fail_spot.lo() {\n+            Failure(sp, tok, t) => if sp.lo() >= best_fail_spot.lo() {\n                 best_fail_spot = sp;\n                 best_fail_tok = Some(tok);\n+                best_fail_text = Some(t);\n             },\n             Error(err_sp, ref msg) => {\n                 cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..])\n@@ -188,7 +212,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n     let span = best_fail_spot.substitute_dummy(sp);\n     let mut err = cx.struct_span_err(span, &best_fail_msg);\n-    err.span_label(span, best_fail_msg);\n+    err.span_label(span, best_fail_text.unwrap_or(best_fail_msg));\n     if let Some(sp) = def_span {\n         if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n             err.span_label(cx.source_map().def_span(sp), \"when calling this macro\");\n@@ -268,9 +292,13 @@ pub fn compile(sess: &ParseSess, features: &Features, def: &ast::Item, edition:\n \n     let argument_map = match parse(sess, body.stream(), &argument_gram, None, true) {\n         Success(m) => m,\n-        Failure(sp, tok) => {\n+        Failure(sp, tok, t) => {\n             let s = parse_failure_msg(tok);\n-            sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s).raise();\n+            let sp = sp.substitute_dummy(def.span);\n+            let mut err = sess.span_diagnostic.struct_span_fatal(sp, &s);\n+            err.span_label(sp, t);\n+            err.emit();\n+            FatalError.raise();\n         }\n         Error(sp, s) => {\n             sess.span_diagnostic.span_fatal(sp.substitute_dummy(def.span), &s).raise();"}, {"sha": "9f822834dafafcc16eeee5cea97c41960d5c0584", "filename": "src/test/run-pass-fulldeps/auxiliary/procedural_mbe_matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fprocedural_mbe_matching.rs?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -46,8 +46,8 @@ fn expand_mbe_matches(cx: &mut ExtCtxt, _: Span, args: &[TokenTree])\n                                     NodeId::from_u32(0));\n     let map = match TokenTree::parse(cx, &mbe_matcher, args.iter().cloned().collect()) {\n         Success(map) => map,\n-        Failure(_, tok) => {\n-            panic!(\"expected Success, but got Failure: {}\", parse_failure_msg(tok));\n+        Failure(_, tok, msg) => {\n+            panic!(\"expected Success, but got Failure: {} - {}\", parse_failure_msg(tok), msg);\n         }\n         Error(_, s) => {\n             panic!(\"expected Success, but got Error: {}\", s);"}, {"sha": "59ebc94f6decec7bffe00059e08644df377acc72", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.rs?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -19,5 +19,6 @@ mod macro_expanded_mod_helper {\n }\n \n fn main() {\n-    mod_decl!(foo); //~ ERROR Cannot declare a non-inline module inside a block\n+    mod_decl!(foo);\n+    //~^ ERROR Cannot declare a non-inline module inside a block\n }"}, {"sha": "43bf720083d84f25eddbcfaf72f44bf7e5a93af0", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -1,7 +1,7 @@\n error: Cannot declare a non-inline module inside a block unless it has a path attribute\n   --> $DIR/macro-expanded-mod.rs:22:15\n    |\n-LL |     mod_decl!(foo); //~ ERROR Cannot declare a non-inline module inside a block\n+LL |     mod_decl!(foo);\n    |               ^^^\n \n error: aborting due to previous error"}, {"sha": "8bf8c3c356030a3fdff8d79ebb3770e756ac3003", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -2,13 +2,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^ no rules expected the token `r#async`\n+   |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^ no rules expected the token `async`\n+   |                                   ^^^^^ no rules expected this token in macro call\n \n error: aborting due to 2 previous errors\n "}, {"sha": "77622548bce93a61c0e1ba56c288fe83fdaf0d70", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -2,13 +2,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^ no rules expected the token `r#async`\n+   |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^ no rules expected the token `async`\n+   |                                   ^^^^^ no rules expected this token in macro call\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d0edc368ad5edecd165b1a8dcaa53b98e114f5ce", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -14,19 +14,24 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^ no rules expected the token `r#async`\n+   |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^ no rules expected the token `async`\n+   |                                   ^^^^^ no rules expected this token in macro call\n \n-error: expected one of `move`, `|`, or `||`, found `<eof>`\n-  --> <::edition_kw_macro_2015::passes_ident macros>:1:22\n+error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n+  --> <::edition_kw_macro_2015::passes_ident macros>:1:25\n    |\n LL | ( $ i : ident ) => ( $ i )\n-   |                      ^^^ expected one of `move`, `|`, or `||` here\n+   |                         ^ expected one of `move`, `|`, or `||` here\n+   | \n+  ::: $DIR/edition-keywords-2018-2015-parsing.rs:26:8\n+   |\n+LL |     if passes_ident!(async) == 1 {}\n+   |        -------------------- in this macro invocation\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c4e1e0257c55c5d4c341ecdf74abb20443c6894c", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -14,19 +14,24 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^ no rules expected the token `r#async`\n+   |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^ no rules expected the token `async`\n+   |                                   ^^^^^ no rules expected this token in macro call\n \n-error: expected one of `move`, `|`, or `||`, found `<eof>`\n-  --> <::edition_kw_macro_2018::passes_ident macros>:1:22\n+error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n+  --> <::edition_kw_macro_2018::passes_ident macros>:1:25\n    |\n LL | ( $ i : ident ) => ( $ i )\n-   |                      ^^^ expected one of `move`, `|`, or `||` here\n+   |                         ^ expected one of `move`, `|`, or `||` here\n+   | \n+  ::: $DIR/edition-keywords-2018-2018-parsing.rs:26:8\n+   |\n+LL |     if passes_ident!(async) == 1 {}\n+   |        -------------------- in this macro invocation\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d1b031c1f6cce67e6aa25b2db30a2b0e81d5a4ae", "filename": "src/test/ui/empty/empty-comment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! one_arg_macro {\n    | -------------------------- when calling this macro\n ...\n LL |     one_arg_macro!(/**/); //~ ERROR unexpected end\n-   |     ^^^^^^^^^^^^^^^^^^^^^ unexpected end of macro invocation\n+   |     ^^^^^^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n \n error: aborting due to previous error\n "}, {"sha": "9759249342ac6ded241dd6726aa3be12f7032e90", "filename": "src/test/ui/fail-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Ffail-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Ffail-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffail-simple.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `@`\n   --> $DIR/fail-simple.rs:12:12\n    |\n LL |     panic!(@); //~ ERROR no rules expected the token `@`\n-   |            ^ no rules expected the token `@`\n+   |            ^ no rules expected this token in macro call\n \n error: aborting due to previous error\n "}, {"sha": "2e2e869199c81b8ed13bb5c9dbc59ab9bafb992c", "filename": "src/test/ui/issues/issue-7970a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! one_arg_macro {\n    | -------------------------- when calling this macro\n ...\n LL |     one_arg_macro!();\n-   |     ^^^^^^^^^^^^^^^^^ unexpected end of macro invocation\n+   |     ^^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n \n error: aborting due to previous error\n "}, {"sha": "d49544e6c1ea507a848be3bb3ba1b39f264f3c8f", "filename": "src/test/ui/issues/issue-7970b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fissues%2Fissue-7970b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fissues%2Fissue-7970b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7970b.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -2,7 +2,7 @@ error: unexpected end of macro invocation\n   --> $DIR/issue-7970b.rs:13:1\n    |\n LL | macro_rules! test {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n \n error: aborting due to previous error\n "}, {"sha": "27dc03e1c3981f04ef3d64dd6d8ae79c70520366", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018-feature-gate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -55,7 +55,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n-   |           ^ no rules expected the token `?`\n+   |           ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:42:11\n@@ -64,7 +64,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n-   |           ^ no rules expected the token `?`\n+   |           ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:43:11\n@@ -73,7 +73,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n-   |           ^ no rules expected the token `?`\n+   |           ^ no rules expected this token in macro call\n \n error: aborting due to 10 previous errors\n "}, {"sha": "d363b672680eeb799719f31c9ec50826781e1e37", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -11,7 +11,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n-   |           ^ no rules expected the token `?`\n+   |           ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:37:11\n@@ -20,7 +20,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n-   |           ^ no rules expected the token `?`\n+   |           ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:38:11\n@@ -29,7 +29,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n-   |           ^ no rules expected the token `?`\n+   |           ^ no rules expected this token in macro call\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:40:5\n@@ -38,16 +38,16 @@ LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n ...\n LL |     barplus!(); //~ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^ unexpected end of macro invocation\n+   |     ^^^^^^^^^^^ missing tokens in macro arguments\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-2018.rs:41:14\n+  --> $DIR/macro-at-most-once-rep-2018.rs:41:15\n    |\n LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n ...\n LL |     barplus!(a); //~ERROR unexpected end of macro invocation\n-   |              ^ unexpected end of macro invocation\n+   |               ^ missing tokens in macro arguments\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:42:15\n@@ -56,7 +56,7 @@ LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n ...\n LL |     barplus!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^ no rules expected the token `?`\n+   |               ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:43:15\n@@ -65,7 +65,7 @@ LL | macro_rules! barplus {\n    | -------------------- when calling this macro\n ...\n LL |     barplus!(a?a); //~ ERROR no rules expected the token `?`\n-   |               ^ no rules expected the token `?`\n+   |               ^ no rules expected this token in macro call\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:47:5\n@@ -74,16 +74,16 @@ LL | macro_rules! barstar {\n    | -------------------- when calling this macro\n ...\n LL |     barstar!(); //~ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^ unexpected end of macro invocation\n+   |     ^^^^^^^^^^^ missing tokens in macro arguments\n \n error: unexpected end of macro invocation\n-  --> $DIR/macro-at-most-once-rep-2018.rs:48:14\n+  --> $DIR/macro-at-most-once-rep-2018.rs:48:15\n    |\n LL | macro_rules! barstar {\n    | -------------------- when calling this macro\n ...\n LL |     barstar!(a); //~ERROR unexpected end of macro invocation\n-   |              ^ unexpected end of macro invocation\n+   |               ^ missing tokens in macro arguments\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:49:15\n@@ -92,7 +92,7 @@ LL | macro_rules! barstar {\n    | -------------------- when calling this macro\n ...\n LL |     barstar!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^ no rules expected the token `?`\n+   |               ^ no rules expected this token in macro call\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:50:15\n@@ -101,7 +101,7 @@ LL | macro_rules! barstar {\n    | -------------------- when calling this macro\n ...\n LL |     barstar!(a?a); //~ ERROR no rules expected the token `?`\n-   |               ^ no rules expected the token `?`\n+   |               ^ no rules expected this token in macro call\n \n error: aborting due to 12 previous errors\n "}, {"sha": "672871c49ca5a5ea4cc0dc1d40a059997bb0c28c", "filename": "src/test/ui/macros/macro-in-expression-context-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -1,8 +1,11 @@\n-error: expected expression, found `<eof>`\n+error: macro expansion ends with an incomplete expression: expected expression\n   --> $DIR/macro-in-expression-context-2.rs:5:16\n    |\n+LL | macro_rules! empty { () => () }\n+   |                            -- in this macro arm\n+...\n LL |         _ => { empty!() }\n-   |                ^^^^^^^^\n+   |                ^^^^^^^^ expected expression\n \n error: aborting due to previous error\n "}, {"sha": "df9db06ca19a4f94ee7ca09340d79f92f86f72a1", "filename": "src/test/ui/macros/macro-non-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! m { ($x:lifetime) => { } }\n    | -------------- when calling this macro\n ...\n LL |     m!(a);\n-   |        ^ no rules expected the token `a`\n+   |        ^ no rules expected this token in macro call\n \n error: aborting due to previous error\n "}, {"sha": "886e15c4412f0f6f8d78581fc6353ee8982e8bd1", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -11,7 +11,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a b);\n-   |           -^ no rules expected the token `b`\n+   |           -^ no rules expected this token in macro call\n    |           |\n    |           help: missing comma here\n \n@@ -22,7 +22,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a, b, c, d e);\n-   |                    -^ no rules expected the token `e`\n+   |                    -^ no rules expected this token in macro call\n    |                    |\n    |                    help: missing comma here\n \n@@ -33,7 +33,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a, b, c d, e);\n-   |                 -^ no rules expected the token `d`\n+   |                 -^ no rules expected this token in macro call\n    |                 |\n    |                 help: missing comma here\n \n@@ -44,7 +44,7 @@ LL | macro_rules! foo {\n    | ---------------- when calling this macro\n ...\n LL |     foo!(a, b, c d e);\n-   |                  ^ no rules expected the token `d`\n+   |                  ^ no rules expected this token in macro call\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9dfa53dab552d33f73876ea0dd19a2645217872d", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `enum E { }`\n   --> $DIR/nonterminal-matching.rs:29:10\n    |\n LL |     n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n-   |          ^^^^^^^^ no rules expected the token `enum E { }`\n+   |          ^^^^^^^^ no rules expected this token in macro call\n ...\n LL | complex_nonterminal!(enum E {});\n    | -------------------------------- in this macro invocation"}, {"sha": "f524ebb321647243b8fdbad21bc20b4115b8133d", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! my_faulty_macro {\n    | ---------------------------- when calling this macro\n LL |     () => {\n LL |         my_faulty_macro!(bcd); //~ ERROR no rules\n-   |                          ^^^ no rules expected the token `bcd`\n+   |                          ^^^ no rules expected this token in macro call\n ...\n LL |     my_faulty_macro!();\n    |     ------------------- in this macro invocation"}, {"sha": "c40a7badaacfad49963d221f822defc400a6882d", "filename": "src/test/ui/parser/macro/macro-doc-comments-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! outer {\n    | ------------------ when calling this macro\n ...\n LL |     //! Inner\n-   |     ^^^^^^^^^ no rules expected the token `!`\n+   |     ^^^^^^^^^ no rules expected this token in macro call\n \n error: aborting due to previous error\n "}, {"sha": "7bdd432808cb530a8a8d75443815855666c1cb1e", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! inner {\n    | ------------------ when calling this macro\n ...\n LL |     /// Outer\n-   |     ^ no rules expected the token `[`\n+   |     ^ no rules expected this token in macro call\n \n error: aborting due to previous error\n "}, {"sha": "171e81e2d873c42f0ca42310c80077c2cc3866c2", "filename": "src/test/ui/underscore-ident-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! identity {\n    | --------------------- when calling this macro\n ...\n LL |     let identity!(_) = 10; //~ ERROR no rules expected the token `_`\n-   |                   ^ no rules expected the token `_`\n+   |                   ^ no rules expected this token in macro call\n \n error: aborting due to previous error\n "}, {"sha": "74f5d2326ac148dba4f17f5d0c7829eda980d69c", "filename": "src/test/ui/vec/vec-macro-with-comma-only.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10e2c729ea2e85cb1e2a08be40564492f49e45ec/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr?ref=10e2c729ea2e85cb1e2a08be40564492f49e45ec", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `,`\n   --> $DIR/vec-macro-with-comma-only.rs:12:10\n    |\n LL |     vec![,]; //~ ERROR no rules expected the token `,`\n-   |          ^ no rules expected the token `,`\n+   |          ^ no rules expected this token in macro call\n \n error: aborting due to previous error\n "}]}