{"sha": "9ff2d19c45f8e110bdcded982c6612ff825e17cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZjJkMTljNDVmOGUxMTBiZGNkZWQ5ODJjNjYxMmZmODI1ZTE3Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T13:55:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-13T13:55:29Z"}, "message": "Auto merge of #27000 - alexcrichton:semi-after-type, r=cmr\n\nThis commit expands the follow set of the `ty` and `path` macro fragments to\r\ninclude the semicolon token as well. A semicolon is already allowed after these\r\ntokens, so it's currently a little too restrictive to not have a semicolon\r\nallowed. For example:\r\n\r\n    extern {\r\n        fn foo() -> i32; // semicolon after type\r\n    }\r\n\r\n    fn main() {\r\n        struct Foo;\r\n\r\n        Foo; // semicolon after path\r\n    }", "tree": {"sha": "bd471c65791816f69f7277e7e76c7b19b690b4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd471c65791816f69f7277e7e76c7b19b690b4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff2d19c45f8e110bdcded982c6612ff825e17cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff2d19c45f8e110bdcded982c6612ff825e17cb", "html_url": "https://github.com/rust-lang/rust/commit/9ff2d19c45f8e110bdcded982c6612ff825e17cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff2d19c45f8e110bdcded982c6612ff825e17cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df39a92e22d90d21d6b8ce46d8d64bd127335cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/df39a92e22d90d21d6b8ce46d8d64bd127335cbd", "html_url": "https://github.com/rust-lang/rust/commit/df39a92e22d90d21d6b8ce46d8d64bd127335cbd"}, {"sha": "af556238ebe72d58adbcf339bd2fa0aef4e3caf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/af556238ebe72d58adbcf339bd2fa0aef4e3caf9", "html_url": "https://github.com/rust-lang/rust/commit/af556238ebe72d58adbcf339bd2fa0aef4e3caf9"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "634572d46940e11d6afdcca605ef4a19857ca6fd", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff2d19c45f8e110bdcded982c6612ff825e17cb/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff2d19c45f8e110bdcded982c6612ff825e17cb/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=9ff2d19c45f8e110bdcded982c6612ff825e17cb", "patch": "@@ -501,7 +501,7 @@ fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n             },\n             \"path\" | \"ty\" => {\n                 match *tok {\n-                    Comma | FatArrow | Colon | Eq | Gt => Ok(true),\n+                    Comma | FatArrow | Colon | Eq | Gt | Semi => Ok(true),\n                     Ident(i, _) if i.as_str() == \"as\" => Ok(true),\n                     _ => Ok(false)\n                 }"}, {"sha": "2b4304252a127408352c0600838d6fdf5ea8a120", "filename": "src/test/run-pass/semi-after-macro-ty.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ff2d19c45f8e110bdcded982c6612ff825e17cb/src%2Ftest%2Frun-pass%2Fsemi-after-macro-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff2d19c45f8e110bdcded982c6612ff825e17cb/src%2Ftest%2Frun-pass%2Fsemi-after-macro-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsemi-after-macro-ty.rs?ref=9ff2d19c45f8e110bdcded982c6612ff825e17cb", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($t:ty; $p:path;) => {}\n+}\n+\n+fn main() {\n+    foo!(i32; i32;);\n+}"}]}