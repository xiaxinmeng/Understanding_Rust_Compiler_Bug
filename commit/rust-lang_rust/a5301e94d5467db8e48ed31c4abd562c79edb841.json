{"sha": "a5301e94d5467db8e48ed31c4abd562c79edb841", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MzAxZTk0ZDU0NjdkYjhlNDhlZDMxYzRhYmQ1NjJjNzllZGI4NDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-06T18:52:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-06T18:52:00Z"}, "message": "Generalize Owned nodes", "tree": {"sha": "76be2d62caa2d02b86dffbc9068dabd4c3505c05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76be2d62caa2d02b86dffbc9068dabd4c3505c05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5301e94d5467db8e48ed31c4abd562c79edb841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5301e94d5467db8e48ed31c4abd562c79edb841", "html_url": "https://github.com/rust-lang/rust/commit/a5301e94d5467db8e48ed31c4abd562c79edb841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5301e94d5467db8e48ed31c4abd562c79edb841/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21797bf0efdeafde4148fe02ba4bd11171737872", "url": "https://api.github.com/repos/rust-lang/rust/commits/21797bf0efdeafde4148fe02ba4bd11171737872", "html_url": "https://github.com/rust-lang/rust/commit/21797bf0efdeafde4148fe02ba4bd11171737872"}], "stats": {"total": 3069, "additions": 1250, "deletions": 1819}, "files": [{"sha": "a989a04cd03421d4e1b4c9d7e14269ae571e67c9", "filename": "crates/ra_analysis/src/descriptors/function/imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs?ref=a5301e94d5467db8e48ed31c4abd562c79edb841", "patch": "@@ -11,11 +11,11 @@ use crate::descriptors::{\n /// TODO: this should return something more type-safe then `SyntaxNode`\n pub(crate) fn fn_syntax(db: &impl DescriptorDatabase, fn_id: FnId) -> FnDefNode {\n     let syntax = db.resolve_syntax_ptr(fn_id.0);\n-    FnDef::cast(syntax.borrowed()).unwrap().into()\n+    FnDef::cast(syntax.borrowed()).unwrap().owned()\n }\n \n pub(crate) fn fn_scopes(db: &impl DescriptorDatabase, fn_id: FnId) -> Arc<FnScopes> {\n     let syntax = db.fn_syntax(fn_id);\n-    let res = FnScopes::new(syntax.ast());\n+    let res = FnScopes::new(syntax.borrowed());\n     Arc::new(res)\n }"}, {"sha": "b5c232ea435317426ad27d5722c94363adba46eb", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=a5301e94d5467db8e48ed31c4abd562c79edb841", "patch": "@@ -41,9 +41,9 @@ pub(crate) fn submodules(\n     db::check_canceled(db)?;\n     let file_id = source.file_id();\n     let submodules = match source.resolve(db) {\n-        ModuleSourceNode::Root(it) => collect_submodules(file_id, it.ast()),\n+        ModuleSourceNode::Root(it) => collect_submodules(file_id, it.borrowed()),\n         ModuleSourceNode::Inline(it) => it\n-            .ast()\n+            .borrowed()\n             .item_list()\n             .map(|it| collect_submodules(file_id, it))\n             .unwrap_or_else(Vec::new),\n@@ -89,8 +89,8 @@ pub(crate) fn module_scope(\n     let tree = db.module_tree(source_root_id)?;\n     let source = module_id.source(&tree).resolve(db);\n     let res = match source {\n-        ModuleSourceNode::Root(root) => ModuleScope::new(root.ast().items()),\n-        ModuleSourceNode::Inline(inline) => match inline.ast().item_list() {\n+        ModuleSourceNode::Root(root) => ModuleScope::new(root.borrowed().items()),\n+        ModuleSourceNode::Inline(inline) => match inline.borrowed().item_list() {\n             Some(items) => ModuleScope::new(items.items()),\n             None => ModuleScope::new(std::iter::empty()),\n         },"}, {"sha": "03330240da5b51ec7da1710057037a6eceb00223", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=a5301e94d5467db8e48ed31c4abd562c79edb841", "patch": "@@ -117,7 +117,7 @@ impl ModuleId {\n             .filter_map(|&it| {\n                 let p = tree.link(it).problem.clone()?;\n                 let s = it.bind_source(tree, db);\n-                let s = s.ast().name().unwrap().syntax().owned();\n+                let s = s.borrowed().name().unwrap().syntax().owned();\n                 Some((s, p))\n             })\n             .collect()\n@@ -136,11 +136,11 @@ impl LinkId {\n         let owner = self.owner(tree);\n         match owner.source(tree).resolve(db) {\n             ModuleSourceNode::Root(root) => {\n-                let ast = imp::modules(root.ast())\n+                let ast = imp::modules(root.borrowed())\n                     .find(|(name, _)| name == &tree.link(self).name)\n                     .unwrap()\n                     .1;\n-                ast.into()\n+                ast.owned()\n             }\n             ModuleSourceNode::Inline(it) => it,\n         }\n@@ -179,13 +179,13 @@ impl ModuleSource {\n         match self {\n             ModuleSource::File(file_id) => {\n                 let syntax = db.file_syntax(file_id);\n-                ModuleSourceNode::Root(syntax.ast().into())\n+                ModuleSourceNode::Root(syntax.ast().owned())\n             }\n             ModuleSource::Inline(ptr) => {\n                 let syntax = db.resolve_syntax_ptr(ptr);\n                 let syntax = syntax.borrowed();\n                 let module = ast::Module::cast(syntax).unwrap();\n-                ModuleSourceNode::Inline(module.into())\n+                ModuleSourceNode::Inline(module.owned())\n             }\n         }\n     }"}, {"sha": "819827b95bb637732c8e77edf503c5a727a200d1", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=a5301e94d5467db8e48ed31c4abd562c79edb841", "patch": "@@ -236,7 +236,7 @@ impl AnalysisImpl {\n                 let link = module_id.parent_link(&module_tree)?;\n                 let file_id = link.owner(&module_tree).source(&module_tree).file_id();\n                 let decl = link.bind_source(&module_tree, &*self.db);\n-                let decl = decl.ast();\n+                let decl = decl.borrowed();\n \n                 let decl_name = decl.name().unwrap();\n "}, {"sha": "d473478a9100daa7df7b4bc3675180f8ad91638c", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1224, "deletions": 1789, "changes": 3013, "blob_url": "https://github.com/rust-lang/rust/blob/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=a5301e94d5467db8e48ed31c4abd562c79edb841"}, {"sha": "6e28575b2ddc912fafe28557f2bf54447c11913f", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/a5301e94d5467db8e48ed31c4abd562c79edb841/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=a5301e94d5467db8e48ed31c4abd562c79edb841", "patch": "@@ -8,27 +8,12 @@ the below applies to the result of this template\n use crate::{\n     ast,\n     SyntaxNode, SyntaxNodeRef, AstNode,\n+    yellow::{TreeRoot, RaTypes, OwnedRoot, RefRoot},\n     SyntaxKind::*,\n };\n {% for node, methods in ast %}\n // {{ node }}\n \n-#[derive(Debug, Clone)]\n-pub struct {{ node }}Node(SyntaxNode);\n-\n-impl {{ node }}Node {\n-    pub fn ast(&self) -> {{ node }} {\n-        {{ node }}::cast(self.0.borrowed()).unwrap()\n-    }\n-}\n-\n-impl<'a> From<{{ node }}<'a>> for {{ node }}Node {\n-    fn from(ast: {{ node}}<'a>) -> {{ node }}Node {\n-        let syntax = ast.syntax().owned();\n-        {{ node }}Node(syntax)\n-    }\n-}\n-\n {%- if methods.enum %}\n #[derive(Debug, Clone, Copy)]\n pub enum {{ node }}<'a> {\n@@ -56,9 +41,10 @@ impl<'a> AstNode<'a> for {{ node }}<'a> {\n }\n {% else %}\n #[derive(Debug, Clone, Copy)]\n-pub struct {{ node }}<'a> {\n-    syntax: SyntaxNodeRef<'a>,\n+pub struct {{ node }}Node<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    syntax: SyntaxNode<R>,\n }\n+pub type {{ node }}<'a> = {{ node }}Node<RefRoot<'a>>;\n \n impl<'a> AstNode<'a> for {{ node }}<'a> {\n     fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n@@ -69,6 +55,16 @@ impl<'a> AstNode<'a> for {{ node }}<'a> {\n     }\n     fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n }\n+\n+impl<R: TreeRoot<RaTypes>> {{ node }}Node<R> {\n+    pub fn borrowed(&self) -> {{ node }} {\n+        {{ node }}Node { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> {{ node }}Node {\n+        {{ node }}Node { syntax: self.syntax.owned() }\n+    }\n+}\n+\n {% endif %}\n {% if methods.traits -%}\n {%- for t in methods.traits -%}"}]}