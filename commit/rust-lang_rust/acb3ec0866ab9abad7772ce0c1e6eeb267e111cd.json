{"sha": "acb3ec0866ab9abad7772ce0c1e6eeb267e111cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYjNlYzA4NjZhYjlhYmFkNzc3MmNlMGMxZTZlZWIyNjdlMTExY2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T20:48:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T20:48:43Z"}, "message": "test and fix for rwlock unlock bug", "tree": {"sha": "03d028733c65f8a98ce54a418fb2d3f2a6f3f710", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03d028733c65f8a98ce54a418fb2d3f2a6f3f710"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd", "html_url": "https://github.com/rust-lang/rust/commit/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80821e046c75878f4b63eac35c642b48c5825c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80821e046c75878f4b63eac35c642b48c5825c3", "html_url": "https://github.com/rust-lang/rust/commit/a80821e046c75878f4b63eac35c642b48c5825c3"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "39a087dc9ac2c31160d82a9f56b0ea02fa674176", "filename": "src/shims/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=acb3ec0866ab9abad7772ce0c1e6eeb267e111cd", "patch": "@@ -1,5 +1,6 @@\n use std::convert::TryInto;\n use std::time::{Duration, SystemTime};\n+use std::ops::Not;\n \n use rustc_middle::ty::{layout::TyAndLayout, TyKind, TypeAndMut};\n use rustc_target::abi::{LayoutOf, Size};\n@@ -603,7 +604,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if this.rwlock_reader_unlock(id, active_thread) {\n             // The thread was a reader.\n-            if this.rwlock_is_locked(id) {\n+            if this.rwlock_is_locked(id).not() {\n                 // No more readers owning the lock. Give it to a writer if there\n                 // is any.\n                 this.rwlock_dequeue_and_lock_writer(id);"}, {"sha": "5ba29b5afa252e349a2e9a9d44c11655d3d47282", "filename": "src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd/src%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd/src%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsync.rs?ref=acb3ec0866ab9abad7772ce0c1e6eeb267e111cd", "patch": "@@ -282,7 +282,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Lock by setting the writer that owns the lock.\n     fn rwlock_writer_lock(&mut self, id: RwLockId, writer: ThreadId) {\n         let this = self.eval_context_mut();\n-        assert!(!this.rwlock_is_locked(id), \"the relock is already locked\");\n+        assert!(!this.rwlock_is_locked(id), \"the rwlock is already locked\");\n         this.machine.threads.sync.rwlocks[id].writer = Some(writer);\n     }\n "}, {"sha": "e36c79491f91e691806bf05a833f255e803c9edb", "filename": "tests/run-pass/concurrency/sync.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3ec0866ab9abad7772ce0c1e6eeb267e111cd/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync.rs?ref=acb3ec0866ab9abad7772ce0c1e6eeb267e111cd", "patch": "@@ -267,6 +267,51 @@ fn check_once() {\n     }\n }\n \n+fn check_rwlock_unlock_bug1() {\n+    // There was a bug where when un-read-locking an rwlock that still has other\n+    // readers waiting, we'd accidentally also let a writer in.\n+    // That caused an ICE.\n+    let l = Arc::new(RwLock::new(0));\n+\n+    let r1 = l.read().unwrap();\n+    let r2 = l.read().unwrap();\n+\n+    // Make a waiting writer.\n+    let l2 = l.clone();\n+    thread::spawn(move || {\n+        let mut w = l2.write().unwrap();\n+        *w += 1;\n+    });\n+    thread::yield_now();\n+\n+    drop(r1);\n+    assert_eq!(*r2, 0);\n+    thread::yield_now();\n+    thread::yield_now();\n+    thread::yield_now();\n+    assert_eq!(*r2, 0);\n+    drop(r2);\n+}\n+\n+fn check_rwlock_unlock_bug2() {\n+    // There was a bug where when un-read-locking an rwlock by letting the last reader leaver,\n+    // we'd forget to wake up a writer.\n+    // That meant the writer thread could never run again.\n+    let l = Arc::new(RwLock::new(0));\n+\n+    let r = l.read().unwrap();\n+\n+    // Make a waiting writer.\n+    let l2 = l.clone();\n+    let h = thread::spawn(move || {\n+        let _w = l2.write().unwrap();\n+    });\n+    thread::yield_now();\n+\n+    drop(r);\n+    h.join().unwrap();\n+}\n+\n fn main() {\n     check_barriers();\n     check_conditional_variables_notify_one();\n@@ -280,4 +325,6 @@ fn main() {\n     multiple_send();\n     send_on_sync();\n     check_once();\n+    check_rwlock_unlock_bug1();\n+    check_rwlock_unlock_bug2();\n }"}]}