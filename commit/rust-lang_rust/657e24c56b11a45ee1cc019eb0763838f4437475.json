{"sha": "657e24c56b11a45ee1cc019eb0763838f4437475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1N2UyNGM1NmIxMWE0NWVlMWNjMDE5ZWIwNzYzODM4ZjQ0Mzc0NzU=", "commit": {"author": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-06-11T18:06:34Z"}, "committer": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-09-03T20:52:58Z"}, "message": "changed target from option to plain target, populated with host triple at argument parsing time if no --target arguments", "tree": {"sha": "46fafad39308da9c54a2116dd9024b528248b353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46fafad39308da9c54a2116dd9024b528248b353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/657e24c56b11a45ee1cc019eb0763838f4437475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/657e24c56b11a45ee1cc019eb0763838f4437475", "html_url": "https://github.com/rust-lang/rust/commit/657e24c56b11a45ee1cc019eb0763838f4437475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/657e24c56b11a45ee1cc019eb0763838f4437475/comments", "author": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f7640884128c6d2acaa9aee3b582cc372044b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7640884128c6d2acaa9aee3b582cc372044b6d", "html_url": "https://github.com/rust-lang/rust/commit/3f7640884128c6d2acaa9aee3b582cc372044b6d"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "995a340143f78bf6706298d2ecba2e3a30262429", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/657e24c56b11a45ee1cc019eb0763838f4437475/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657e24c56b11a45ee1cc019eb0763838f4437475/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=657e24c56b11a45ee1cc019eb0763838f4437475", "patch": "@@ -9,7 +9,7 @@ use rustc::session;\n use rustc::session::config::{CrateType, parse_crate_types_from_list};\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n-                             get_cmd_lint_options, ExternEntry};\n+                             get_cmd_lint_options, host_triple, ExternEntry};\n use rustc::session::search_paths::SearchPath;\n use rustc_driver;\n use rustc_target::spec::TargetTriple;\n@@ -54,7 +54,7 @@ pub struct Options {\n     /// Debugging (`-Z`) options to pass to the compiler.\n     pub debugging_options: DebuggingOptions,\n     /// The target used to compile the crate against.\n-    pub target: Option<TargetTriple>,\n+    pub target: TargetTriple,\n     /// Edition used when reading the crate. Defaults to \"2015\". Also used by default when\n     /// compiling doctests from the crate.\n     pub edition: Edition,\n@@ -425,7 +425,9 @@ impl Options {\n             }\n         }\n \n-        let target = matches.opt_str(\"target\").map(|target| {\n+        let target = matches.opt_str(\"target\").map_or(\n+            TargetTriple::from_triple(host_triple()),\n+            |target| {\n             if target.ends_with(\".json\") {\n                 TargetTriple::TargetPath(PathBuf::from(target))\n             } else {"}, {"sha": "66a32c73e0f161a395a956a15bacde1b4f50c47b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/657e24c56b11a45ee1cc019eb0763838f4437475/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657e24c56b11a45ee1cc019eb0763838f4437475/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=657e24c56b11a45ee1cc019eb0763838f4437475", "patch": "@@ -13,7 +13,6 @@ use rustc_interface::interface;\n use rustc_driver::abort_on_err;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n-use rustc_target::spec::TargetTriple;\n \n use syntax::source_map;\n use syntax::attr;\n@@ -313,7 +312,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         lint_cap: Some(lint_cap.unwrap_or_else(|| lint::Forbid)),\n         cg: codegen_options,\n         externs,\n-        target_triple: target.unwrap_or(host_triple),\n+        target_triple: target,\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         actually_rustdoc: true,"}, {"sha": "daec977810682a94ef349cb9c70d7545c6eb235c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/657e24c56b11a45ee1cc019eb0763838f4437475/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/657e24c56b11a45ee1cc019eb0763838f4437475/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=657e24c56b11a45ee1cc019eb0763838f4437475", "patch": "@@ -60,7 +60,6 @@ pub fn run(options: Options) -> i32 {\n         edition: options.edition,\n         ..config::Options::default()\n     };\n-    options.target.as_ref().map(|t| { sessopts.target_triple = t.clone() });\n     let config = interface::Config {\n         opts: sessopts,\n         crate_cfg: config::parse_cfgspecs(options.cfgs.clone()),\n@@ -184,7 +183,7 @@ fn run_test(\n     as_test_harness: bool,\n     runtool: Option<String>,\n     runtool_args: Vec<String>,\n-    target: Option<TargetTriple>,\n+    target: TargetTriple,\n     compile_fail: bool,\n     mut error_codes: Vec<String>,\n     opts: &TestOptions,\n@@ -680,7 +679,7 @@ impl Tester for Collector {\n         let runtool = self.runtool.clone();\n         let runtool_args = self.runtool_args.clone();\n         let target = self.target.clone();\n-        let target_str = target.as_ref().map(|t| t.to_string());\n+        let target_str = target.to_string();\n \n         debug!(\"creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n@@ -690,8 +689,7 @@ impl Tester for Collector {\n                     Ignore::All => true,\n                     Ignore::None => false,\n                     Ignore::Some(ref ignores) => {\n-                        target_str.map_or(false,\n-                                          |s| ignores.iter().any(|t| s.contains(t)))\n+                        ignores.iter().any(|s| target_str.contains(s))\n                     },\n                 },\n                 // compiler failures are test failures"}]}