{"sha": "733ef3163c7423d8307d2df4503c08870b5a35b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczM2VmMzE2M2M3NDIzZDgzMDdkMmRmNDUwM2MwODg3MGI1YTM1Yjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-08T22:03:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-08T22:03:20Z"}, "message": "Merge #4804\n\n4804: Simplify API r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b78e0b408ab7a91660e701188fc66a5f2eadac1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b78e0b408ab7a91660e701188fc66a5f2eadac1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/733ef3163c7423d8307d2df4503c08870b5a35b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3rWoCRBK7hj4Ov3rIwAAdHIIAEvon0pYCWUgHgikAjQmyDvU\n4aRv9ZQbQUWZ/LBOcl5fvoURFJgadPyntwy5i+S1NQ7rFwdOVZapkFKEdqkk+0Oh\n6z66DMU3HQBSQHsQh8x0bhFs8ofYHeOmClMvam31jDUQEflMsHtyWLBeOxIl7kmN\nMdzwJPksfKSxn3AJkuxBBZ0RIHWkRJ6zgw90WfvFyPXeKFIhpdAiyzswUMxIXzsa\nCpz36S4ZtT08M8VY5jWx8AhgGUnq+ESZDoZwdjGz8yXgEf8UV2HRun+RF7vjGWdS\nsh8DrzQ5otizJXc+oPwcvtLaKOOh/+GbPqN7Kptju8BMrZByEC3j3y3LbfI5NMM=\n=V8XM\n-----END PGP SIGNATURE-----\n", "payload": "tree b78e0b408ab7a91660e701188fc66a5f2eadac1d\nparent 3999bbba1bba45ae9d577506c6414f741e1fe80a\nparent 38fa4d17fb9622044ee0f0bc50d6c71d5aa46dd1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591653800 +0000\ncommitter GitHub <noreply@github.com> 1591653800 +0000\n\nMerge #4804\n\n4804: Simplify API r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/733ef3163c7423d8307d2df4503c08870b5a35b7", "html_url": "https://github.com/rust-lang/rust/commit/733ef3163c7423d8307d2df4503c08870b5a35b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/733ef3163c7423d8307d2df4503c08870b5a35b7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3999bbba1bba45ae9d577506c6414f741e1fe80a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3999bbba1bba45ae9d577506c6414f741e1fe80a", "html_url": "https://github.com/rust-lang/rust/commit/3999bbba1bba45ae9d577506c6414f741e1fe80a"}, {"sha": "38fa4d17fb9622044ee0f0bc50d6c71d5aa46dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/38fa4d17fb9622044ee0f0bc50d6c71d5aa46dd1", "html_url": "https://github.com/rust-lang/rust/commit/38fa4d17fb9622044ee0f0bc50d6c71d5aa46dd1"}], "stats": {"total": 163, "additions": 56, "deletions": 107}, "files": [{"sha": "edd8255f44a1e4201769f67aa4b95c654524427a", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 27, "deletions": 72, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=733ef3163c7423d8307d2df4503c08870b5a35b7", "patch": "@@ -1,5 +1,7 @@\n //! See `AssistContext`\n \n+use std::mem;\n+\n use algo::find_covering_element;\n use hir::Semantics;\n use ra_db::{FileId, FileRange};\n@@ -19,7 +21,6 @@ use crate::{\n     assist_config::{AssistConfig, SnippetCap},\n     Assist, AssistId, GroupLabel, ResolvedAssist,\n };\n-use rustc_hash::FxHashMap;\n \n /// `AssistContext` allows to apply an assist or check if it could be applied.\n ///\n@@ -139,16 +140,6 @@ impl Assists {\n         let label = Assist::new(id, label.into(), None, target);\n         self.add_impl(label, f)\n     }\n-    pub(crate) fn add_in_multiple_files(\n-        &mut self,\n-        id: AssistId,\n-        label: impl Into<String>,\n-        target: TextRange,\n-        f: impl FnOnce(&mut AssistDirector),\n-    ) -> Option<()> {\n-        let label = Assist::new(id, label.into(), None, target);\n-        self.add_impl_multiple_files(label, f)\n-    }\n     pub(crate) fn add_group(\n         &mut self,\n         group: &GroupLabel,\n@@ -173,31 +164,6 @@ impl Assists {\n         Some(())\n     }\n \n-    fn add_impl_multiple_files(\n-        &mut self,\n-        label: Assist,\n-        f: impl FnOnce(&mut AssistDirector),\n-    ) -> Option<()> {\n-        if !self.resolve {\n-            self.buf.push((label, None));\n-            return None;\n-        }\n-        let mut director = AssistDirector::default();\n-        f(&mut director);\n-        let changes = director.finish();\n-        let file_edits: Vec<SourceFileEdit> =\n-            changes.into_iter().map(|mut change| change.source_file_edits.pop().unwrap()).collect();\n-\n-        let source_change = SourceChange {\n-            source_file_edits: file_edits,\n-            file_system_edits: vec![],\n-            is_snippet: false,\n-        };\n-\n-        self.buf.push((label, Some(source_change)));\n-        Some(())\n-    }\n-\n     fn finish(mut self) -> Vec<(Assist, Option<SourceChange>)> {\n         self.buf.sort_by_key(|(label, _edit)| label.target.len());\n         self.buf\n@@ -206,13 +172,32 @@ impl Assists {\n \n pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n-    file: FileId,\n+    file_id: FileId,\n     is_snippet: bool,\n+    edits: Vec<SourceFileEdit>,\n }\n \n impl AssistBuilder {\n-    pub(crate) fn new(file: FileId) -> AssistBuilder {\n-        AssistBuilder { edit: TextEditBuilder::default(), file, is_snippet: false }\n+    pub(crate) fn new(file_id: FileId) -> AssistBuilder {\n+        AssistBuilder {\n+            edit: TextEditBuilder::default(),\n+            file_id,\n+            is_snippet: false,\n+            edits: Vec::new(),\n+        }\n+    }\n+\n+    pub(crate) fn edit_file(&mut self, file_id: FileId) {\n+        self.file_id = file_id;\n+    }\n+\n+    fn commit(&mut self) {\n+        let edit = mem::take(&mut self.edit).finish();\n+        if !edit.is_empty() {\n+            let new_edit = SourceFileEdit { file_id: self.file_id, edit };\n+            assert!(!self.edits.iter().any(|it| it.file_id == new_edit.file_id));\n+            self.edits.push(new_edit);\n+        }\n     }\n \n     /// Remove specified `range` of text.\n@@ -270,48 +255,18 @@ impl AssistBuilder {\n         algo::diff(&node, &new).into_text_edit(&mut self.edit)\n     }\n \n-    // FIXME: better API\n-    pub(crate) fn set_file(&mut self, assist_file: FileId) {\n-        self.file = assist_file;\n-    }\n-\n     // FIXME: kill this API\n     /// Get access to the raw `TextEditBuilder`.\n     pub(crate) fn text_edit_builder(&mut self) -> &mut TextEditBuilder {\n         &mut self.edit\n     }\n \n-    fn finish(self) -> SourceChange {\n-        let edit = self.edit.finish();\n-        let source_file_edit = SourceFileEdit { file_id: self.file, edit };\n-        let mut res: SourceChange = source_file_edit.into();\n+    fn finish(mut self) -> SourceChange {\n+        self.commit();\n+        let mut res: SourceChange = mem::take(&mut self.edits).into();\n         if self.is_snippet {\n             res.is_snippet = true;\n         }\n         res\n     }\n }\n-\n-pub(crate) struct AssistDirector {\n-    builders: FxHashMap<FileId, AssistBuilder>,\n-}\n-\n-impl AssistDirector {\n-    pub(crate) fn perform(&mut self, file_id: FileId, f: impl FnOnce(&mut AssistBuilder)) {\n-        let mut builder = self.builders.entry(file_id).or_insert(AssistBuilder::new(file_id));\n-        f(&mut builder);\n-    }\n-\n-    fn finish(self) -> Vec<SourceChange> {\n-        self.builders\n-            .into_iter()\n-            .map(|(_, builder)| builder.finish())\n-            .collect::<Vec<SourceChange>>()\n-    }\n-}\n-\n-impl Default for AssistDirector {\n-    fn default() -> Self {\n-        AssistDirector { builders: FxHashMap::default() }\n-    }\n-}"}, {"sha": "1cfbd75aa11cb86a1c30a4399f5fde0f89f17b64", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=733ef3163c7423d8307d2df4503c08870b5a35b7", "patch": "@@ -64,7 +64,7 @@ pub(crate) fn add_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let target = call.syntax().text_range();\n     acc.add(AssistId(\"add_function\"), \"Add function\", target, |builder| {\n         let function_template = function_builder.render();\n-        builder.set_file(function_template.file);\n+        builder.edit_file(function_template.file);\n         let new_fn = function_template.to_string(ctx.config.snippet_cap);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),"}, {"sha": "44db7917a60e371ae761a73bbd8783aa56ec9b23", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=733ef3163c7423d8307d2df4503c08870b5a35b7", "patch": "@@ -1,20 +1,17 @@\n+use hir::{EnumVariant, Module, ModuleDef, Name};\n+use ra_db::FileId;\n+use ra_fmt::leading_indent;\n use ra_ide_db::{defs::Definition, search::Reference, RootDatabase};\n use ra_syntax::{\n     algo::find_node_at_offset,\n-    ast::{self, AstNode, NameOwner},\n+    ast::{self, ArgListOwner, AstNode, NameOwner, VisibilityOwner},\n     SourceFile, SyntaxNode, TextRange, TextSize,\n };\n+use rustc_hash::FxHashSet;\n \n use crate::{\n-    assist_context::{AssistBuilder, AssistDirector},\n-    utils::insert_use_statement,\n-    AssistContext, AssistId, Assists,\n+    assist_context::AssistBuilder, utils::insert_use_statement, AssistContext, AssistId, Assists,\n };\n-use ast::{ArgListOwner, VisibilityOwner};\n-use hir::{EnumVariant, Module, ModuleDef, Name};\n-use ra_db::FileId;\n-use ra_fmt::leading_indent;\n-use rustc_hash::FxHashSet;\n \n // Assist: extract_struct_from_enum_variant\n //\n@@ -50,11 +47,11 @@ pub(crate) fn extract_struct_from_enum_variant(\n     let enum_module_def = ModuleDef::from(enum_hir);\n     let current_module = enum_hir.module(ctx.db);\n     let target = variant.syntax().text_range();\n-    acc.add_in_multiple_files(\n+    acc.add(\n         AssistId(\"extract_struct_from_enum_variant\"),\n         \"Extract struct from enum variant\",\n         target,\n-        |edit| {\n+        |builder| {\n             let definition = Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir));\n             let res = definition.find_usages(&ctx.db, None);\n             let start_offset = variant.parent_enum().syntax().text_range().start();\n@@ -64,7 +61,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 let source_file = ctx.sema.parse(reference.file_range.file_id);\n                 update_reference(\n                     ctx,\n-                    edit,\n+                    builder,\n                     reference,\n                     &source_file,\n                     &enum_module_def,\n@@ -73,7 +70,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 );\n             }\n             extract_struct_def(\n-                edit,\n+                builder,\n                 enum_ast.syntax(),\n                 &variant_name,\n                 &field_list.to_string(),\n@@ -82,7 +79,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 &visibility,\n             );\n             let list_range = field_list.syntax().text_range();\n-            update_variant(edit, &variant_name, ctx.frange.file_id, list_range);\n+            update_variant(builder, &variant_name, ctx.frange.file_id, list_range);\n         },\n     )\n }\n@@ -115,7 +112,7 @@ fn insert_import(\n }\n \n fn extract_struct_def(\n-    edit: &mut AssistDirector,\n+    builder: &mut AssistBuilder,\n     enum_ast: &SyntaxNode,\n     variant_name: &str,\n     variant_list: &str,\n@@ -142,14 +139,13 @@ fn extract_struct_def(\n         list_with_visibility(variant_list),\n         indent\n     );\n-    edit.perform(file_id, |builder| {\n-        builder.insert(start_offset, struct_def);\n-    });\n+    builder.edit_file(file_id);\n+    builder.insert(start_offset, struct_def);\n     Some(())\n }\n \n fn update_variant(\n-    edit: &mut AssistDirector,\n+    builder: &mut AssistBuilder,\n     variant_name: &str,\n     file_id: FileId,\n     list_range: TextRange,\n@@ -158,15 +154,14 @@ fn update_variant(\n         list_range.start().checked_add(TextSize::from(1))?,\n         list_range.end().checked_sub(TextSize::from(1))?,\n     );\n-    edit.perform(file_id, |builder| {\n-        builder.replace(inside_variant_range, variant_name);\n-    });\n+    builder.edit_file(file_id);\n+    builder.replace(inside_variant_range, variant_name);\n     Some(())\n }\n \n fn update_reference(\n     ctx: &AssistContext,\n-    edit: &mut AssistDirector,\n+    builder: &mut AssistBuilder,\n     reference: Reference,\n     source_file: &SourceFile,\n     enum_module_def: &ModuleDef,\n@@ -186,16 +181,15 @@ fn update_reference(\n         list_range.start().checked_add(TextSize::from(1))?,\n         list_range.end().checked_sub(TextSize::from(1))?,\n     );\n-    edit.perform(reference.file_range.file_id, |builder| {\n-        if !visited_modules_set.contains(&module) {\n-            if insert_import(ctx, builder, &path_expr, &module, enum_module_def, variant_hir_name)\n-                .is_some()\n-            {\n-                visited_modules_set.insert(module);\n-            }\n+    builder.edit_file(reference.file_range.file_id);\n+    if !visited_modules_set.contains(&module) {\n+        if insert_import(ctx, builder, &path_expr, &module, enum_module_def, variant_hir_name)\n+            .is_some()\n+        {\n+            visited_modules_set.insert(module);\n         }\n-        builder.replace(inside_list_range, format!(\"{}{}\", segment, list));\n-    });\n+    }\n+    builder.replace(inside_list_range, format!(\"{}{}\", segment, list));\n     Some(())\n }\n "}, {"sha": "531b3560f2e4024ee7605eb5f6329da62c88bfa5", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733ef3163c7423d8307d2df4503c08870b5a35b7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=733ef3163c7423d8307d2df4503c08870b5a35b7", "patch": "@@ -63,7 +63,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n     };\n \n     acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n-        builder.set_file(target_file);\n+        builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n             None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n@@ -106,7 +106,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n         format!(\"Change visibility of {}.{} to {}\", parent_name, target_name, missing_visibility);\n \n     acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n-        builder.set_file(target_file);\n+        builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n             None => builder.insert(offset, format!(\"{} \", missing_visibility)),"}]}