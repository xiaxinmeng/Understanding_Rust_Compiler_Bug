{"sha": "26cebda208690a245a09ea939d97e0dbced0b2a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2Y2ViZGEyMDg2OTBhMjQ1YTA5ZWE5MzlkOTdlMGRiY2VkMGIyYTA=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-06T16:02:35Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-23T19:18:50Z"}, "message": "Revert \"change skolemizations to use universe index\"\n\nThis reverts commit 35e78b5cddc04c6bd13da2a1290d27cfb8ae8db8.", "tree": {"sha": "c59bb81309b6e42b25a6bf596ef672c36f760be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c59bb81309b6e42b25a6bf596ef672c36f760be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26cebda208690a245a09ea939d97e0dbced0b2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26cebda208690a245a09ea939d97e0dbced0b2a0", "html_url": "https://github.com/rust-lang/rust/commit/26cebda208690a245a09ea939d97e0dbced0b2a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26cebda208690a245a09ea939d97e0dbced0b2a0/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ecefc55c1795c0365972a6c70fa17663833bd7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ecefc55c1795c0365972a6c70fa17663833bd7f", "html_url": "https://github.com/rust-lang/rust/commit/5ecefc55c1795c0365972a6c70fa17663833bd7f"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "6f113250003432a5699d90111bfb265cc2cd718f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26cebda208690a245a09ea939d97e0dbced0b2a0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cebda208690a245a09ea939d97e0dbced0b2a0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=26cebda208690a245a09ea939d97e0dbced0b2a0", "patch": "@@ -68,7 +68,7 @@ pub use self::sty::{ExistentialTraitRef, PolyExistentialTraitRef};\n pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const};\n pub use self::sty::{BoundRegion, EarlyBoundRegion, FreeRegion, Region};\n pub use self::sty::RegionKind;\n-pub use self::sty::{TyVid, IntVid, FloatVid, RegionVid};\n+pub use self::sty::{TyVid, IntVid, FloatVid, RegionVid, SkolemizedRegionVid};\n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;\n pub use self::sty::RegionKind::*;\n@@ -1332,7 +1332,7 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// type name in a non-zero universe is a skolemized type -- an\n /// idealized representative of \"types in general\" that we use for\n /// checking generic functions.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct UniverseIndex(u32);\n \n impl UniverseIndex {\n@@ -1352,19 +1352,7 @@ impl UniverseIndex {\n     /// region `'a`, but that region was not nameable from `U` because\n     /// it was not in scope there.\n     pub fn subuniverse(self) -> UniverseIndex {\n-        UniverseIndex(self.0.checked_add(1).unwrap())\n-    }\n-\n-    pub fn from(v: u32) -> UniverseIndex {\n-        UniverseIndex(v)\n-    }\n-\n-    pub fn as_u32(&self) -> u32 {\n-        self.0\n-    }\n-\n-    pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+        UniverseIndex(self.0 + 1)\n     }\n \n     /// Gets the \"depth\" of this universe in the universe tree. This"}, {"sha": "848bade0e5484c6c24f17c537c6e81f95a7486c4", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26cebda208690a245a09ea939d97e0dbced0b2a0/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cebda208690a245a09ea939d97e0dbced0b2a0/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=26cebda208690a245a09ea939d97e0dbced0b2a0", "patch": "@@ -1028,7 +1028,7 @@ pub enum RegionKind {\n \n     /// A skolemized region - basically the higher-ranked version of ReFree.\n     /// Should not exist after typeck.\n-    ReSkolemized(ty::UniverseIndex, BoundRegion),\n+    ReSkolemized(SkolemizedRegionVid, BoundRegion),\n \n     /// Empty lifetime is for data that is never accessed.\n     /// Bottom in the region lattice. We treat ReEmpty somewhat\n@@ -1082,6 +1082,11 @@ newtype_index!(RegionVid\n         DEBUG_FORMAT = custom,\n     });\n \n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n+pub struct SkolemizedRegionVid {\n+    pub index: u32,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum InferTy {\n     TyVar(TyVid),"}, {"sha": "ab47f60402918ae4e57488c440a137a82c6e9879", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26cebda208690a245a09ea939d97e0dbced0b2a0/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cebda208690a245a09ea939d97e0dbced0b2a0/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=26cebda208690a245a09ea939d97e0dbced0b2a0", "patch": "@@ -793,7 +793,7 @@ define_print! {\n                 }\n \n                 ty::ReSkolemized(id, ref bound_region) => {\n-                    write!(f, \"ReSkolemized({:?}, {:?})\", id, bound_region)\n+                    write!(f, \"ReSkolemized({}, {:?})\", id.index, bound_region)\n                 }\n \n                 ty::ReEmpty => write!(f, \"ReEmpty\"),"}]}