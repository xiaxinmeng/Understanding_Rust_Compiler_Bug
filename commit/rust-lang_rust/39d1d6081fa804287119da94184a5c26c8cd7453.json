{"sha": "39d1d6081fa804287119da94184a5c26c8cd7453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDFkNjA4MWZhODA0Mjg3MTE5ZGE5NDE4NGE1YzI2YzhjZDc0NTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-30T12:09:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-30T12:09:23Z"}, "message": "Merge pull request #2340 from phansch/newline_after_attributes\n\nWarn on empty lines after outer attributes", "tree": {"sha": "d7ea8ddb0d0c459e13674ae32a2eb68cd881d05b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7ea8ddb0d0c459e13674ae32a2eb68cd881d05b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d1d6081fa804287119da94184a5c26c8cd7453", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJacGBzCRBK7hj4Ov3rIwAAdHIIAEtqm6Igh+W1eoNfJbS2C9ud\ntyipOS0cNvDSc07D34rwErIMHTI1xNT3jFl74o1Pzrjy2D1emXHXVTLfwKXNvjnB\nutMI34fEJ5SbjpRo23w29lJkajqROH608IUSECg3XsHwoj9gpzQmb08XH2HNDIwK\nGx13tg1pavS1hiK4UlNQ9oPRICboC92cSHMEodePkq5rDUssoDbbDqoFRCST1huG\nIUKFLZFYNM/ZP4h7kgTfsvS9pajvsP9S5+I2x+h6DwMItOsRqBpoKLipjjqTiPZ7\nbK8BgyrYGDD5vyR/79V1KaMpeiOoyuv5lntcMGD1efMXe3x2LfgFx+PvEWvbTso=\n=RY4T\n-----END PGP SIGNATURE-----\n", "payload": "tree d7ea8ddb0d0c459e13674ae32a2eb68cd881d05b\nparent dbbae5740b95a6f630867879f55e50bd6691d4c4\nparent 3d54e56ed4898c2b01dd008f12ab41cf54710f43\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1517314163 +0100\ncommitter GitHub <noreply@github.com> 1517314163 +0100\n\nMerge pull request #2340 from phansch/newline_after_attributes\n\nWarn on empty lines after outer attributes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d1d6081fa804287119da94184a5c26c8cd7453", "html_url": "https://github.com/rust-lang/rust/commit/39d1d6081fa804287119da94184a5c26c8cd7453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d1d6081fa804287119da94184a5c26c8cd7453/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbbae5740b95a6f630867879f55e50bd6691d4c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbae5740b95a6f630867879f55e50bd6691d4c4", "html_url": "https://github.com/rust-lang/rust/commit/dbbae5740b95a6f630867879f55e50bd6691d4c4"}, {"sha": "3d54e56ed4898c2b01dd008f12ab41cf54710f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d54e56ed4898c2b01dd008f12ab41cf54710f43", "html_url": "https://github.com/rust-lang/rust/commit/3d54e56ed4898c2b01dd008f12ab41cf54710f43"}], "stats": {"total": 188, "additions": 182, "deletions": 6}, "files": [{"sha": "939fdf1fae99ae23aa175f21fcc64e3cc236e399", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/39d1d6081fa804287119da94184a5c26c8cd7453/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d1d6081fa804287119da94184a5c26c8cd7453/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=39d1d6081fa804287119da94184a5c26c8cd7453", "patch": "@@ -5,7 +5,7 @@ use rustc::lint::*;\n use rustc::hir::*;\n use rustc::ty::{self, TyCtxt};\n use semver::Version;\n-use syntax::ast::{Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n+use syntax::ast::{Attribute, AttrStyle, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n use utils::{in_macro, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then};\n \n@@ -78,12 +78,44 @@ declare_lint! {\n     \"use of `#[deprecated(since = \\\"x\\\")]` where x is not semver\"\n }\n \n+/// **What it does:** Checks for empty lines after outer attributes\n+///\n+/// **Why is this bad?**\n+/// Most likely the attribute was meant to be an inner attribute using a '!'.\n+/// If it was meant to be an outer attribute, then the following item\n+/// should not be separated by empty lines.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// // Bad\n+/// #[inline(always)]\n+///\n+/// fn not_quite_good_code(..) { ... }\n+///\n+/// // Good (as inner attribute)\n+/// #![inline(always)]\n+///\n+/// fn this_is_fine_too(..) { ... }\n+///\n+/// // Good (as outer attribute)\n+/// #[inline(always)]\n+/// fn this_is_fine(..) { ... }\n+///\n+/// ```\n+declare_lint! {\n+    pub EMPTY_LINE_AFTER_OUTER_ATTR,\n+    Warn,\n+    \"empty line after outer attribute\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct AttrPass;\n \n impl LintPass for AttrPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(INLINE_ALWAYS, DEPRECATED_SEMVER, USELESS_ATTRIBUTE)\n+        lint_array!(INLINE_ALWAYS, DEPRECATED_SEMVER, USELESS_ATTRIBUTE, EMPTY_LINE_AFTER_OUTER_ATTR)\n     }\n }\n \n@@ -171,7 +203,7 @@ fn is_relevant_item(tcx: TyCtxt, item: &Item) -> bool {\n     if let ItemFn(_, _, _, _, _, eid) = item.node {\n         is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value)\n     } else {\n-        false\n+        true\n     }\n }\n \n@@ -230,6 +262,27 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n     }\n \n     for attr in attrs {\n+        if attr.style == AttrStyle::Outer {\n+            if !is_present_in_source(cx, attr.span) {\n+                return;\n+            }\n+\n+            let attr_to_item_span = Span::new(attr.span.lo(), span.lo(), span.ctxt());\n+\n+            if let Some(snippet) = snippet_opt(cx, attr_to_item_span) {\n+                let lines = snippet.split('\\n').collect::<Vec<_>>();\n+                if lines.iter().filter(|l| l.trim().is_empty()).count() > 1 {\n+                    span_lint(\n+                        cx,\n+                        EMPTY_LINE_AFTER_OUTER_ATTR,\n+                        attr_to_item_span,\n+                        &format!(\"Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\")\n+                        );\n+\n+                }\n+            }\n+        }\n+\n         if let Some(ref values) = attr.meta_item_list() {\n             if values.len() != 1 || attr.name().map_or(true, |n| n != \"inline\") {\n                 continue;\n@@ -270,3 +323,17 @@ fn is_word(nmi: &NestedMetaItem, expected: &str) -> bool {\n         false\n     }\n }\n+\n+// If the snippet is empty, it's an attribute that was inserted during macro\n+// expansion and we want to ignore those, because they could come from external\n+// sources that the user has no control over.\n+// For some reason these attributes don't have any expansion info on them, so\n+// we have to check it this way until there is a better way.\n+fn is_present_in_source(cx: &LateContext, span: Span) -> bool {\n+    if let Some(snippet) = snippet_opt(cx, span) {\n+        if snippet.is_empty() {\n+            return false;\n+        }\n+    }\n+    true\n+}"}, {"sha": "836d4531a927325fae8024512d109d6e152240cf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39d1d6081fa804287119da94184a5c26c8cd7453/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d1d6081fa804287119da94184a5c26c8cd7453/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=39d1d6081fa804287119da94184a5c26c8cd7453", "patch": "@@ -440,6 +440,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         attrs::DEPRECATED_SEMVER,\n         attrs::INLINE_ALWAYS,\n         attrs::USELESS_ATTRIBUTE,\n+        attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,\n         bit_mask::VERBOSE_BIT_MASK,"}, {"sha": "3d62a4913acf7025a701e98f5af9970c70f11140", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=39d1d6081fa804287119da94184a5c26c8cd7453", "patch": "@@ -0,0 +1,56 @@\n+\n+#![warn(empty_line_after_outer_attr)]\n+\n+// This should produce a warning\n+#[crate_type = \"lib\"]\n+\n+/// some comment\n+fn with_one_newline_and_comment() { assert!(true) }\n+\n+// This should not produce a warning\n+#[crate_type = \"lib\"]\n+/// some comment\n+fn with_no_newline_and_comment() { assert!(true) }\n+\n+\n+// This should produce a warning\n+#[crate_type = \"lib\"]\n+\n+fn with_one_newline() { assert!(true) }\n+\n+// This should produce a warning, too\n+#[crate_type = \"lib\"]\n+\n+\n+fn with_two_newlines() { assert!(true) }\n+\n+\n+// This should produce a warning\n+#[crate_type = \"lib\"]\n+\n+enum Baz {\n+    One,\n+    Two\n+}\n+\n+// This should produce a warning\n+#[crate_type = \"lib\"]\n+\n+struct Foo {\n+    one: isize,\n+    two: isize\n+}\n+\n+// This should produce a warning\n+#[crate_type = \"lib\"]\n+\n+mod foo {\n+}\n+\n+// This should not produce a warning\n+#[allow(non_camel_case_types)]\n+#[allow(missing_docs)]\n+#[allow(missing_docs)]\n+fn three_attributes() { assert!(true) }\n+\n+fn main() { }"}, {"sha": "7c9c7b8f349532ef9054c87fbc52e617b4184cfd", "filename": "tests/ui/empty_line_after_outer_attribute.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.stderr?ref=39d1d6081fa804287119da94184a5c26c8cd7453", "patch": "@@ -0,0 +1,54 @@\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+ --> $DIR/empty_line_after_outer_attribute.rs:5:1\n+  |\n+5 | / #[crate_type = \"lib\"]\n+6 | |\n+7 | | /// some comment\n+8 | | fn with_one_newline_and_comment() { assert!(true) }\n+  | |_\n+  |\n+  = note: `-D empty-line-after-outer-attr` implied by `-D warnings`\n+\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+  --> $DIR/empty_line_after_outer_attribute.rs:17:1\n+   |\n+17 | / #[crate_type = \"lib\"]\n+18 | |\n+19 | | fn with_one_newline() { assert!(true) }\n+   | |_\n+\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+  --> $DIR/empty_line_after_outer_attribute.rs:22:1\n+   |\n+22 | / #[crate_type = \"lib\"]\n+23 | |\n+24 | |\n+25 | | fn with_two_newlines() { assert!(true) }\n+   | |_\n+\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+  --> $DIR/empty_line_after_outer_attribute.rs:29:1\n+   |\n+29 | / #[crate_type = \"lib\"]\n+30 | |\n+31 | | enum Baz {\n+   | |_\n+\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+  --> $DIR/empty_line_after_outer_attribute.rs:37:1\n+   |\n+37 | / #[crate_type = \"lib\"]\n+38 | |\n+39 | | struct Foo {\n+   | |_\n+\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+  --> $DIR/empty_line_after_outer_attribute.rs:45:1\n+   |\n+45 | / #[crate_type = \"lib\"]\n+46 | |\n+47 | | mod foo {\n+   | |_\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "76e50e56780cd0b49478de40b158f8b5308e316f", "filename": "tests/ui/inline_fn_without_body.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.rs?ref=39d1d6081fa804287119da94184a5c26c8cd7453", "patch": "@@ -11,7 +11,6 @@ trait Foo {\n     #[inline(always)]fn always_inline();\n \n     #[inline(never)]\n-\n     fn never_inline();\n \n     #[inline]"}, {"sha": "2b466b6861030ade207abb0759dd52bdbc22ab5e", "filename": "tests/ui/inline_fn_without_body.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Finline_fn_without_body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39d1d6081fa804287119da94184a5c26c8cd7453/tests%2Fui%2Finline_fn_without_body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finline_fn_without_body.stderr?ref=39d1d6081fa804287119da94184a5c26c8cd7453", "patch": "@@ -19,8 +19,7 @@ error: use of `#[inline]` on trait method `never_inline` which has no body\n    |\n 13 |       #[inline(never)]\n    |  _____-^^^^^^^^^^^^^^^\n-14 | |\n-15 | |     fn never_inline();\n+14 | |     fn never_inline();\n    | |____- help: remove\n \n error: aborting due to 3 previous errors"}]}