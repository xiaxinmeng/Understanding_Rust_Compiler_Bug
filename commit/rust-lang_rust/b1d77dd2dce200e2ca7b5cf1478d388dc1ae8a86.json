{"sha": "b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86", "node_id": "C_kwDOAAsO6NoAKGIxZDc3ZGQyZGNlMjAwZTJjYTdiNWNmMTQ3OGQzODhkYzFhZThhODY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-13T21:10:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-13T21:10:10Z"}, "message": "Rollup merge of #100447 - GuillaumeGomez:rm-clean-impl, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? ``@Dylan-DPC``", "tree": {"sha": "d692d235d742627cf3c4dc0aedafff7a963853d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d692d235d742627cf3c4dc0aedafff7a963853d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+BMyCRBK7hj4Ov3rIwAAry4IACz942vhTPl4oKeEtRSuhpzC\n+D/r2o/jcFED7lJFlrhA94m2hvDZyUHGSYavsDOlSPvaPlH98XvCGWBvL+WGDCg2\nL99YQf/ieHMdtTGmKAzANAz9NKQWHHkGcBrbvf9cMI1+s/hQ4SNC2nnWuDdzFiB3\nZYlLYiZ0WgxBXXv8nGdvbRaHI9+AipWJhLG18l/i1NdQx1OnT1VleMLPjD97RD3c\ntwfhk9TSeD1MCt88uDn7MDyyMeagbmZxXfDNEOXyaa0Gr52pUkacwryJ7V8R9k2K\n3hWBv486wSYNF4RppNUxnm7+TpkzhiyXATi9c2xPcLPXyKU/unb0lThSxnD3urg=\n=w53/\n-----END PGP SIGNATURE-----\n", "payload": "tree d692d235d742627cf3c4dc0aedafff7a963853d3\nparent ef72484f081918657cb54fb4a555eedc574a9908\nparent 001cc12af78fd179622f6dbe0f7d61ceeebf4522\nauthor Michael Goulet <michael@errs.io> 1660425010 -0700\ncommitter GitHub <noreply@github.com> 1660425010 -0700\n\nRollup merge of #100447 - GuillaumeGomez:rm-clean-impl, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? ``@Dylan-DPC``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86", "html_url": "https://github.com/rust-lang/rust/commit/b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef72484f081918657cb54fb4a555eedc574a9908", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef72484f081918657cb54fb4a555eedc574a9908", "html_url": "https://github.com/rust-lang/rust/commit/ef72484f081918657cb54fb4a555eedc574a9908"}, {"sha": "001cc12af78fd179622f6dbe0f7d61ceeebf4522", "url": "https://api.github.com/repos/rust-lang/rust/commits/001cc12af78fd179622f6dbe0f7d61ceeebf4522", "html_url": "https://github.com/rust-lang/rust/commit/001cc12af78fd179622f6dbe0f7d61ceeebf4522"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "addd6ffa11e280d0ed81263c2d920bcc43a9c46a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b1d77dd2dce200e2ca7b5cf1478d388dc1ae8a86", "patch": "@@ -1322,14 +1322,17 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             let trait_def = cx.tcx.associated_item(p.res.def_id()).container_id(cx.tcx);\n             let trait_ = self::Path {\n                 res: Res::Def(DefKind::Trait, trait_def),\n-                segments: trait_segments.iter().map(|x| x.clean(cx)).collect(),\n+                segments: trait_segments.iter().map(|x| clean_path_segment(x, cx)).collect(),\n             };\n             register_res(cx, trait_.res);\n             let self_def_id = DefId::local(qself.hir_id.owner.local_def_index);\n             let self_type = clean_ty(qself, cx);\n             let should_show_cast = compute_should_show_cast(Some(self_def_id), &trait_, &self_type);\n             Type::QPath {\n-                assoc: Box::new(p.segments.last().expect(\"segments were empty\").clean(cx)),\n+                assoc: Box::new(clean_path_segment(\n+                    p.segments.last().expect(\"segments were empty\"),\n+                    cx,\n+                )),\n                 should_show_cast,\n                 self_type: Box::new(self_type),\n                 trait_,\n@@ -1349,7 +1352,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             let self_type = clean_ty(qself, cx);\n             let should_show_cast = compute_should_show_cast(self_def_id, &trait_, &self_type);\n             Type::QPath {\n-                assoc: Box::new(segment.clean(cx)),\n+                assoc: Box::new(clean_path_segment(segment, cx)),\n                 should_show_cast,\n                 self_type: Box::new(self_type),\n                 trait_,\n@@ -1507,7 +1510,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n                 if !lifetime.is_elided() { Some(clean_lifetime(*lifetime, cx)) } else { None };\n             DynTrait(bounds, lifetime)\n         }\n-        TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n+        TyKind::BareFn(barefn) => BareFunction(Box::new(clean_bare_fn_ty(barefn, cx))),\n         // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n         TyKind::Infer | TyKind::Err => Infer,\n         TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", ty.kind),\n@@ -1823,7 +1826,10 @@ fn clean_variant_data<'tcx>(\n }\n \n fn clean_path<'tcx>(path: &hir::Path<'tcx>, cx: &mut DocContext<'tcx>) -> Path {\n-    Path { res: path.res, segments: path.segments.iter().map(|x| x.clean(cx)).collect() }\n+    Path {\n+        res: path.res,\n+        segments: path.segments.iter().map(|x| clean_path_segment(x, cx)).collect(),\n+    }\n }\n \n fn clean_generic_args<'tcx>(\n@@ -1861,28 +1867,30 @@ fn clean_generic_args<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, PathSegment> for hir::PathSegment<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> PathSegment {\n-        PathSegment { name: self.ident.name, args: clean_generic_args(self.args(), cx) }\n-    }\n+fn clean_path_segment<'tcx>(\n+    path: &hir::PathSegment<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> PathSegment {\n+    PathSegment { name: path.ident.name, args: clean_generic_args(path.args(), cx) }\n }\n \n-impl<'tcx> Clean<'tcx, BareFunctionDecl> for hir::BareFnTy<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> BareFunctionDecl {\n-        let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n-            // NOTE: generics must be cleaned before args\n-            let generic_params = self\n-                .generic_params\n-                .iter()\n-                .filter(|p| !is_elided_lifetime(p))\n-                .map(|x| clean_generic_param(cx, None, x))\n-                .collect();\n-            let args = clean_args_from_types_and_names(cx, self.decl.inputs, self.param_names);\n-            let decl = clean_fn_decl_with_args(cx, self.decl, args);\n-            (generic_params, decl)\n-        });\n-        BareFunctionDecl { unsafety: self.unsafety, abi: self.abi, decl, generic_params }\n-    }\n+fn clean_bare_fn_ty<'tcx>(\n+    bare_fn: &hir::BareFnTy<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> BareFunctionDecl {\n+    let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n+        // NOTE: generics must be cleaned before args\n+        let generic_params = bare_fn\n+            .generic_params\n+            .iter()\n+            .filter(|p| !is_elided_lifetime(p))\n+            .map(|x| clean_generic_param(cx, None, x))\n+            .collect();\n+        let args = clean_args_from_types_and_names(cx, bare_fn.decl.inputs, bare_fn.param_names);\n+        let decl = clean_fn_decl_with_args(cx, bare_fn.decl, args);\n+        (generic_params, decl)\n+    });\n+    BareFunctionDecl { unsafety: bare_fn.unsafety, abi: bare_fn.abi, decl, generic_params }\n }\n \n fn clean_maybe_renamed_item<'tcx>("}]}