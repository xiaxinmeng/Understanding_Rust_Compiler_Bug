{"sha": "1392842966f1ee58bf03da26648a0483941844ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOTI4NDI5NjZmMWVlNThiZjAzZGEyNjY0OGEwNDgzOTQxODQ0YWM=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-03T16:54:15Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-03T18:29:30Z"}, "message": "bless a few trivial tests under polonius\n\nThese are all about reaching some type and recursion limits and saving\nthe full type in a file, whose folder changes in this compare-mode.", "tree": {"sha": "1eae6b382e2b38a07900f9781e121f89824f711e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eae6b382e2b38a07900f9781e121f89824f711e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1392842966f1ee58bf03da26648a0483941844ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1392842966f1ee58bf03da26648a0483941844ac", "html_url": "https://github.com/rust-lang/rust/commit/1392842966f1ee58bf03da26648a0483941844ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1392842966f1ee58bf03da26648a0483941844ac/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f252ab15651e82ab51a9173ba955d03799695247", "url": "https://api.github.com/repos/rust-lang/rust/commits/f252ab15651e82ab51a9173ba955d03799695247", "html_url": "https://github.com/rust-lang/rust/commit/f252ab15651e82ab51a9173ba955d03799695247"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "29eb8c481cdee174baedf3bf601acafbe2885406", "filename": "src/test/ui/infinite/infinite-instantiation.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/infinite-instantiation.rs:22:9\n+   |\n+LL |         function(counter - 1, t.to_option());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `function` defined here\n+  --> $DIR/infinite-instantiation.rs:20:1\n+   |\n+LL | fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/infinite/infinite-instantiation.polonius/infinite-instantiation.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "87a7c00e4107b62988685564563945a7a0fadab4", "filename": "src/test/ui/issues/issue-22638.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-22638.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-22638.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `A::matches::$CLOSURE`\n+  --> $DIR/issue-22638.rs:56:9\n+   |\n+LL |         a.matches(f)\n+   |         ^^^^^^^^^^^^\n+   |\n+note: `A::matches` defined here\n+  --> $DIR/issue-22638.rs:15:5\n+   |\n+LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-22638.polonius/issue-22638.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a1c0b82c227a92230d2a55f6bb0961280d82270", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n+  --> $DIR/issue-37311.rs:17:9\n+   |\n+LL |         (self, self).recurse();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `<T as Foo>::recurse` defined here\n+  --> $DIR/issue-37311.rs:16:5\n+   |\n+LL |     fn recurse(&self) {\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-37311-type-length-limit/issue-37311.polonius/issue-37311.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ab77d3444d002fe7341aa7bdc4457d412e72080", "filename": "src/test/ui/issues/issue-67552.polonius.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-67552.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-67552.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,17 @@\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n+  --> $DIR/issue-67552.rs:28:9\n+   |\n+LL |         rec(identity(&mut it))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `rec` defined here\n+  --> $DIR/issue-67552.rs:21:1\n+   |\n+LL | / fn rec<T>(mut it: T)\n+LL | | where\n+LL | |     T: Iterator,\n+   | |________________^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-67552.polonius/issue-67552.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "283c01b6b62a2c8872387a5d14375a8cf3909a05", "filename": "src/test/ui/issues/issue-8727.polonius.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-8727.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Fissues%2Fissue-8727.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,26 @@\n+warning: function cannot return without recursing\n+  --> $DIR/issue-8727.rs:7:1\n+   |\n+LL | fn generic<T>() {\n+   | ^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     generic::<Option<T>>();\n+   |     ---------------------- recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/issue-8727.rs:8:5\n+   |\n+LL |     generic::<Option<T>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `generic` defined here\n+  --> $DIR/issue-8727.rs:7:1\n+   |\n+LL | fn generic<T>() {\n+   | ^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-8727.polonius/issue-8727.long-type.txt'\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "4b4fc4fb7d1898166066fa40e02e02b5186e3c65", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `std::ptr::drop_in_place::<S<fn(f...)))))))))))))))))))))))))))))>))`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `std::ptr::drop_in_place` defined here\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-38591-non-regular-dropck-recursion.polonius/issue-38591-non-regular-dropck-recursion.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "c727fe551e3bc7386728c6e44f9e83c8ae328cd6", "filename": "src/test/ui/recursion/recursion.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Frecursion%2Frecursion.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Frecursion%2Frecursion.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,15 @@\n+error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+  --> $DIR/recursion.rs:18:11\n+   |\n+LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `test` defined here\n+  --> $DIR/recursion.rs:16:1\n+   |\n+LL | fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/recursion.polonius/recursion.long-type.txt'\n+\n+error: aborting due to previous error\n+"}, {"sha": "82d066b2a2fefae45ebb58e584d0d05ce6d3f5df", "filename": "src/test/ui/type_length_limit.polonius.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Ftype_length_limit.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1392842966f1ee58bf03da26648a0483941844ac/src%2Ftest%2Fui%2Ftype_length_limit.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.polonius.stderr?ref=1392842966f1ee58bf03da26648a0483941844ac", "patch": "@@ -0,0 +1,11 @@\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub fn drop<T>(_x: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit.polonius/type_length_limit.long-type.txt'\n+   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+\n+error: aborting due to previous error\n+"}]}