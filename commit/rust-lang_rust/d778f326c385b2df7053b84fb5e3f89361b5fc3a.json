{"sha": "d778f326c385b2df7053b84fb5e3f89361b5fc3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzhmMzI2YzM4NWIyZGY3MDUzYjg0ZmI1ZTNmODkzNjFiNWZjM2E=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-11T08:45:26Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T09:29:11Z"}, "message": "compiletest: Rewrite extract_gdb_version function", "tree": {"sha": "c98961f6ff1b84adbb3e7029201f962ad201941c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98961f6ff1b84adbb3e7029201f962ad201941c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d778f326c385b2df7053b84fb5e3f89361b5fc3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d778f326c385b2df7053b84fb5e3f89361b5fc3a", "html_url": "https://github.com/rust-lang/rust/commit/d778f326c385b2df7053b84fb5e3f89361b5fc3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d778f326c385b2df7053b84fb5e3f89361b5fc3a/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa3a330149b78c4d827b10d9ac4ff8d381e7342", "html_url": "https://github.com/rust-lang/rust/commit/cfa3a330149b78c4d827b10d9ac4ff8d381e7342"}], "stats": {"total": 91, "additions": 28, "deletions": 63}, "files": [{"sha": "80f611d2ad6a42a8109e855727f93f00482c4e68", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 27, "deletions": 62, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d778f326c385b2df7053b84fb5e3f89361b5fc3a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778f326c385b2df7053b84fb5e3f89361b5fc3a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d778f326c385b2df7053b84fb5e3f89361b5fc3a", "patch": "@@ -841,71 +841,36 @@ fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n     // This particular form is documented in the GNU coding standards:\n     // https://www.gnu.org/prep/standards/html_node/_002d_002dversion.html#g_t_002d_002dversion\n \n-    // don't start parsing in the middle of a number\n-    let mut prev_was_digit = false;\n-    let mut in_parens = false;\n-    for (pos, c) in full_version_line.char_indices() {\n-        if in_parens {\n-            if c == ')' {\n-                in_parens = false;\n-            }\n-            continue;\n-        } else if c == '(' {\n-            in_parens = true;\n-            continue;\n-        }\n-\n-        if prev_was_digit || !c.is_digit(10) {\n-            prev_was_digit = c.is_digit(10);\n-            continue;\n+    let mut splits = full_version_line.rsplit(' ');\n+    let version_string = splits.next().unwrap();\n+\n+    let mut splits = version_string.split('.');\n+    let major = splits.next().unwrap();\n+    let minor = splits.next().unwrap();\n+    let patch = splits.next();\n+\n+    let major: u32 = major.parse().unwrap();\n+    let (minor, patch): (u32, u32) = match minor.find(|c: char| !c.is_digit(10)) {\n+        None => {\n+            let minor = minor.parse().unwrap();\n+            let patch: u32 = match patch {\n+                Some(patch) => match patch.find(|c: char| !c.is_digit(10)) {\n+                    None => patch.parse().unwrap(),\n+                    Some(idx) if idx > 3 => 0,\n+                    Some(idx) => patch[..idx].parse().unwrap(),\n+                },\n+                None => 0,\n+            };\n+            (minor, patch)\n         }\n-\n-        prev_was_digit = true;\n-\n-        let line = &full_version_line[pos..];\n-\n-        let next_split = match line.find(|c: char| !c.is_digit(10)) {\n-            Some(idx) => idx,\n-            None => continue, // no minor version\n-        };\n-\n-        if line.as_bytes()[next_split] != b'.' {\n-            continue; // no minor version\n+        // There is no patch version after minor-date (e.g. \"4-2012\").\n+        Some(idx) => {\n+            let minor = minor[..idx].parse().unwrap();\n+            (minor, 0)\n         }\n+    };\n \n-        let major = &line[..next_split];\n-        let line = &line[next_split + 1..];\n-\n-        let (minor, patch) = match line.find(|c: char| !c.is_digit(10)) {\n-            Some(idx) => {\n-                if line.as_bytes()[idx] == b'.' {\n-                    let patch = &line[idx + 1..];\n-\n-                    let patch_len =\n-                        patch.find(|c: char| !c.is_digit(10)).unwrap_or_else(|| patch.len());\n-                    let patch = &patch[..patch_len];\n-                    let patch = if patch_len > 3 || patch_len == 0 { None } else { Some(patch) };\n-\n-                    (&line[..idx], patch)\n-                } else {\n-                    (&line[..idx], None)\n-                }\n-            }\n-            None => (line, None),\n-        };\n-\n-        if minor.is_empty() {\n-            continue;\n-        }\n-\n-        let major: u32 = major.parse().unwrap();\n-        let minor: u32 = minor.parse().unwrap();\n-        let patch: u32 = patch.unwrap_or(\"0\").parse().unwrap();\n-\n-        return Some(((major * 1000) + minor) * 1000 + patch);\n-    }\n-\n-    None\n+    Some(((major * 1000) + minor) * 1000 + patch)\n }\n \n /// Returns (LLDB version, LLDB is rust-enabled)"}, {"sha": "237bb756597a30ff08106c37bd008cfd059bd5b1", "filename": "src/tools/compiletest/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d778f326c385b2df7053b84fb5e3f89361b5fc3a/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778f326c385b2df7053b84fb5e3f89361b5fc3a/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs?ref=d778f326c385b2df7053b84fb5e3f89361b5fc3a", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n #[test]\n fn test_extract_gdb_version() {\n-    macro_rules! test { ($($expectation:tt: $input:tt,)*) => {{$(\n+    macro_rules! test { ($($expectation:literal: $input:literal,)*) => {{$(\n         assert_eq!(extract_gdb_version($input), Some($expectation));\n     )*}}}\n "}]}