{"sha": "2e43d068ced2162bc57da332094c06604bc1b191", "node_id": "C_kwDOAAsO6NoAKDJlNDNkMDY4Y2VkMjE2MmJjNTdkYTMzMjA5NGMwNjYwNGJjMWIxOTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T10:40:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-23T10:40:41Z"}, "message": "Auto merge of #99636 - matthiaskrgr:rollup-yg0xxkx, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #99580 (Don't suggest unnameable generic arguments)\n - #99617 (Update mdbook)\n - #99631 (Use span_bug in case of unexpected rib kind)\n - #99632 (Fix typo/grammar in locator.rs doc comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3105db86886fcb1aade7fabb9ea641e26118ae54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3105db86886fcb1aade7fabb9ea641e26118ae54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e43d068ced2162bc57da332094c06604bc1b191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e43d068ced2162bc57da332094c06604bc1b191", "html_url": "https://github.com/rust-lang/rust/commit/2e43d068ced2162bc57da332094c06604bc1b191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e43d068ced2162bc57da332094c06604bc1b191/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ba93596586783efd41df7b8ea84f4f1e37f923", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ba93596586783efd41df7b8ea84f4f1e37f923", "html_url": "https://github.com/rust-lang/rust/commit/47ba93596586783efd41df7b8ea84f4f1e37f923"}, {"sha": "7c5df1f425ef87c0f8c6bfc44df28ec0d6cc4fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5df1f425ef87c0f8c6bfc44df28ec0d6cc4fca", "html_url": "https://github.com/rust-lang/rust/commit/7c5df1f425ef87c0f8c6bfc44df28ec0d6cc4fca"}], "stats": {"total": 122, "additions": 95, "deletions": 27}, "files": [{"sha": "9deda378cbb18afc62c24b441b3c5b083c355d8a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -2361,9 +2361,9 @@ dependencies = [\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.4.20\"\n+version = \"0.4.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"13cdad8057b09a519c6c63e6d7c93ea854f5d7fbfe284df864d5e1140d215a2d\"\n+checksum = \"23f3e133c6d515528745ffd3b9f0c7d975ae039f0b6abb099f2168daa2afb4f9\"\n dependencies = [\n  \"ammonia\",\n  \"anyhow\","}, {"sha": "561d1354edd21bcbf393e49179de37a2ead48aae", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -1,4 +1,4 @@\n-use crate::infer::type_variable::TypeVariableOriginKind;\n+use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::InferCtxt;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -8,12 +8,12 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Body, Closure, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n use rustc_middle::hir::nested_filter;\n-use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n+use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n use rustc_middle::ty::{self, DefIdTree, InferConst};\n-use rustc_middle::ty::{Ty, TyCtxt, TypeckResults};\n+use rustc_middle::ty::{IsSuggestable, Ty, TyCtxt, TypeckResults};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{BytePos, Span};\n use std::borrow::Cow;\n@@ -407,11 +407,40 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                 err.span_label(span, cannot_infer_msg);\n \n-                let printer = fmt_printer(self, Namespace::TypeNS);\n-                let args = printer.comma_sep(generic_args.iter().copied()).unwrap().into_buffer();\n+                let args = fmt_printer(self, Namespace::TypeNS)\n+                    .comma_sep(generic_args.iter().copied().map(|arg| {\n+                        if arg.is_suggestable(self.tcx, true) {\n+                            return arg;\n+                        }\n+\n+                        match arg.unpack() {\n+                            GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),\n+                            GenericArgKind::Type(_) => self\n+                                .next_ty_var(TypeVariableOrigin {\n+                                    span: rustc_span::DUMMY_SP,\n+                                    kind: TypeVariableOriginKind::MiscVariable,\n+                                })\n+                                .into(),\n+                            GenericArgKind::Const(arg) => self\n+                                .next_const_var(\n+                                    arg.ty(),\n+                                    ConstVariableOrigin {\n+                                        span: rustc_span::DUMMY_SP,\n+                                        kind: ConstVariableOriginKind::MiscVariable,\n+                                    },\n+                                )\n+                                .into(),\n+                        }\n+                    }))\n+                    .unwrap()\n+                    .into_buffer();\n+\n                 err.span_suggestion_verbose(\n                     insert_span,\n-                    &format!(\"consider specifying the generic argument{}\", pluralize!(args.len()),),\n+                    &format!(\n+                        \"consider specifying the generic argument{}\",\n+                        pluralize!(generic_args.len()),\n+                    ),\n                     format!(\"::<{}>\", args),\n                     Applicability::HasPlaceholders,\n                 );"}, {"sha": "2c1c84b0be26a874d7d9e6657f6a05f105381460", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -67,7 +67,7 @@\n //!\n //! ## What criterion to select on?\n //!\n-//! This a pretty tricky area of loading crates. Given a file, how do we know\n+//! This is a pretty tricky area of loading crates. Given a file, how do we know\n //! whether it's the right crate? Currently, the rules look along these lines:\n //!\n //! 1. Does the filename match an rlib/dylib pattern? That is to say, does the"}, {"sha": "dd2f43210603abb6c0e13a1fe88bbd7489ed0541", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -3,7 +3,7 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    visit::TypeVisitable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferTy,\n+    visit::TypeVisitable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferConst, InferTy,\n     PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n \n@@ -82,15 +82,18 @@ pub trait IsSuggestable<'tcx> {\n     /// meaningful rendered suggestions when pretty-printed. We leave some\n     /// nonsense, such as region vars, since those render as `'_` and are\n     /// usually okay to reinterpret as elided lifetimes.\n-    fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool;\n+    ///\n+    /// Only if `infer_suggestable` is true, we consider type and const\n+    /// inference variables to be suggestable.\n+    fn is_suggestable(self, tcx: TyCtxt<'tcx>, infer_suggestable: bool) -> bool;\n }\n \n impl<'tcx, T> IsSuggestable<'tcx> for T\n where\n     T: TypeVisitable<'tcx>,\n {\n-    fn is_suggestable(self, tcx: TyCtxt<'tcx>) -> bool {\n-        self.visit_with(&mut IsSuggestableVisitor { tcx }).is_continue()\n+    fn is_suggestable(self, tcx: TyCtxt<'tcx>, infer_suggestable: bool) -> bool {\n+        self.visit_with(&mut IsSuggestableVisitor { tcx, infer_suggestable }).is_continue()\n     }\n }\n \n@@ -100,7 +103,7 @@ pub fn suggest_arbitrary_trait_bound<'tcx>(\n     err: &mut Diagnostic,\n     trait_pred: PolyTraitPredicate<'tcx>,\n ) -> bool {\n-    if !trait_pred.is_suggestable(tcx) {\n+    if !trait_pred.is_suggestable(tcx, false) {\n         return false;\n     }\n \n@@ -419,13 +422,16 @@ impl<'v> hir::intravisit::Visitor<'v> for StaticLifetimeVisitor<'v> {\n \n pub struct IsSuggestableVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+    infer_suggestable: bool,\n }\n \n impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n+            Infer(InferTy::TyVar(_)) if self.infer_suggestable => {}\n+\n             FnDef(..)\n             | Closure(..)\n             | Infer(..)\n@@ -479,6 +485,8 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n \n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match c.kind() {\n+            ConstKind::Infer(InferConst::Var(_)) if self.infer_suggestable => {}\n+\n             ConstKind::Infer(..)\n             | ConstKind::Bound(..)\n             | ConstKind::Placeholder(..)"}, {"sha": "e739ed678d8be8aa18f2256a0a3430ee22f028e5", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -2111,7 +2111,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             let res = match kind {\n                 ItemRibKind(..) | AssocItemRibKind => Res::Def(def_kind, def_id.to_def_id()),\n                 NormalRibKind => Res::Err,\n-                _ => bug!(\"Unexpected rib kind {:?}\", kind),\n+                _ => span_bug!(param.ident.span, \"Unexpected rib kind {:?}\", kind),\n             };\n             self.r.record_partial_res(param.id, PartialRes::new(res));\n             rib.bindings.insert(ident, res);"}, {"sha": "7ab85e7fa663e82eb845ba1e8104d0602f27af3b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -378,7 +378,7 @@ fn suggest_restriction<'tcx>(\n             replace_ty: ty::ParamTy::new(generics.count() as u32, Symbol::intern(&type_param_name))\n                 .to_ty(tcx),\n         });\n-        if !trait_pred.is_suggestable(tcx) {\n+        if !trait_pred.is_suggestable(tcx, false) {\n             return;\n         }\n         // We know we have an `impl Trait` that doesn't satisfy a required projection.\n@@ -417,7 +417,7 @@ fn suggest_restriction<'tcx>(\n             Applicability::MaybeIncorrect,\n         );\n     } else {\n-        if !trait_pred.is_suggestable(tcx) {\n+        if !trait_pred.is_suggestable(tcx, false) {\n             return;\n         }\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n@@ -586,7 +586,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // else in the predicate.\n                     if !trait_pred.skip_binder().trait_ref.substs[1..]\n                         .iter()\n-                        .all(|g| g.is_suggestable(self.tcx))\n+                        .all(|g| g.is_suggestable(self.tcx, false))\n                     {\n                         return;\n                     }"}, {"sha": "40aa27a29e957ce0955a64a020cce48281cd7ce0", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -86,7 +86,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let param_type = tcx.infer_ctxt().enter(|infcx| {\n                             infcx.resolve_numeric_literals_with_default(tcx.type_of(param.def_id))\n                         });\n-                        if param_type.is_suggestable(tcx) {\n+                        if param_type.is_suggestable(tcx, false) {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),\n                                 \"consider changing this type parameter to be a `const` generic\","}, {"sha": "7111812f0b090aadb68bcf303225ace290c6ec3d", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -2676,7 +2676,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     span,\n                     ty,\n                     opt_sugg: Some((span, Applicability::MachineApplicable))\n-                        .filter(|_| ty.is_suggestable(tcx)),\n+                        .filter(|_| ty.is_suggestable(tcx, false)),\n                 });\n \n                 ty"}, {"sha": "84d2878308a1016ffb948359b2e11bcaccb0dddb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -1070,7 +1070,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n                     if expected_ty.is_unit() {\n                         \"()\".to_string()\n-                    } else if expected_ty.is_suggestable(tcx) {\n+                    } else if expected_ty.is_suggestable(tcx, false) {\n                         format!(\"/* {} */\", expected_ty)\n                     } else {\n                         \"/* value */\".to_string()"}, {"sha": "097fff6418e11acc05555871a9c0244ce52b624a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -506,7 +506,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.resolve_numeric_literals_with_default(self.resolve_vars_if_possible(found));\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n-        match (&fn_decl.output, found.is_suggestable(self.tcx), can_suggest, expected.is_unit()) {\n+        match (\n+            &fn_decl.output,\n+            found.is_suggestable(self.tcx, false),\n+            can_suggest,\n+            expected.is_unit(),\n+        ) {\n             (&hir::FnRetTy::DefaultReturn(span), true, true, true) => {\n                 err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found });\n                 true"}, {"sha": "c303905652d52eb964371652f67c10a6c34b8313", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -1929,7 +1929,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n             visitor.visit_ty(ty);\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n             let ret_ty = fn_sig.skip_binder().output();\n-            if ret_ty.is_suggestable(tcx) {\n+            if ret_ty.is_suggestable(tcx, false) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with the correct return type\",\n@@ -1938,7 +1938,12 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                 );\n             } else if matches!(ret_ty.kind(), ty::FnDef(..)) {\n                 let fn_sig = ret_ty.fn_sig(tcx);\n-                if fn_sig.skip_binder().inputs_and_output.iter().all(|t| t.is_suggestable(tcx)) {\n+                if fn_sig\n+                    .skip_binder()\n+                    .inputs_and_output\n+                    .iter()\n+                    .all(|t| t.is_suggestable(tcx, false))\n+                {\n                     diag.span_suggestion(\n                         ty.span,\n                         \"replace with the correct return type\","}, {"sha": "3a30d2ee0349934f7b344f2b705048eaff5d7b96", "filename": "src/test/ui/closures/issue-99565.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fclosures%2Fissue-99565.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fclosures%2Fissue-99565.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-99565.rs?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -0,0 +1,7 @@\n+#![crate_type = \"lib\"]\n+\n+fn foo<T, U>(_: U) {}\n+\n+fn bar() {\n+    foo(|| {}); //~ ERROR type annotations needed\n+}"}, {"sha": "0d940aa9a2f5f623a6a3b03bf3fd7d079b6e525e", "filename": "src/test/ui/closures/issue-99565.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fclosures%2Fissue-99565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fclosures%2Fissue-99565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-99565.stderr?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-99565.rs:6:5\n+   |\n+LL |     foo(|| {});\n+   |     ^^^ cannot infer type of the type parameter `T` declared on the function `foo`\n+   |\n+help: consider specifying the generic arguments\n+   |\n+LL |     foo::<T, _>(|| {});\n+   |        ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "6592b76a39f7ad7c86412bb0094b052f0e786280", "filename": "src/test/ui/issues/issue-23041.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fissues%2Fissue-23041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fissues%2Fissue-23041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23041.stderr?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     b.downcast_ref::<fn(_)->_>();\n    |       ^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the associated function `downcast_ref`\n    |\n-help: consider specifying the generic arguments\n+help: consider specifying the generic argument\n    |\n LL |     b.downcast_ref::<fn(_) -> _>();\n    |                   ~~~~~~~~~~~~~~"}, {"sha": "995dce552e37fcda571db2caadf165f73a5c63fe", "filename": "src/test/ui/issues/issue-24013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n    |             ^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `swap`\n    |\n-help: consider specifying the generic arguments\n+help: consider specifying the generic argument\n    |\n LL |     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n    |                 ~~~~~~~~~~"}, {"sha": "33c051804081cfaf90ec6c66a8d7621da869fe25", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e43d068ced2162bc57da332094c06604bc1b191/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=2e43d068ced2162bc57da332094c06604bc1b191", "patch": "@@ -9,6 +9,6 @@ clap = \"3.1.1\"\n env_logger = \"0.7.1\"\n \n [dependencies.mdbook]\n-version = \"0.4.18\"\n+version = \"0.4.21\"\n default-features = false\n features = [\"search\"]"}]}