{"sha": "f383703e32dc583468a702213eff63c58c7f9ef5", "node_id": "C_kwDOAAsO6NoAKGYzODM3MDNlMzJkYzU4MzQ2OGE3MDIyMTNlZmY2M2M1OGM3ZjllZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-07T22:02:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-07T22:02:24Z"}, "message": "Auto merge of #111698 - Amanieu:force-static-lib, r=petrochenkov\n\nForce all native libraries to be statically linked when linking a static binary\n\nPreviously, `#[link]` without an explicit `kind = \"static\"` would confuse the linker and end up producing a dynamically linked library because of the `-Bdynamic` flag. However this binary would not work correctly anyways since it was linked with startup code for a static binary.\n\nThis PR solves this by forcing all native libraries to be statically linked when the output is a static binary that cannot link to dynamic libraries anyways.\n\nFixes #108878\nFixes #102993", "tree": {"sha": "5579b1c0823e68cb0cbbc027bfb3c49b83025cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5579b1c0823e68cb0cbbc027bfb3c49b83025cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f383703e32dc583468a702213eff63c58c7f9ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f383703e32dc583468a702213eff63c58c7f9ef5", "html_url": "https://github.com/rust-lang/rust/commit/f383703e32dc583468a702213eff63c58c7f9ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f383703e32dc583468a702213eff63c58c7f9ef5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97c36dd2e6f711949fc9b790476e93bd9e6d1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97c36dd2e6f711949fc9b790476e93bd9e6d1f4", "html_url": "https://github.com/rust-lang/rust/commit/a97c36dd2e6f711949fc9b790476e93bd9e6d1f4"}, {"sha": "0304e0a5b0fafa1b3be46207c4651709eec478c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0304e0a5b0fafa1b3be46207c4651709eec478c5", "html_url": "https://github.com/rust-lang/rust/commit/0304e0a5b0fafa1b3be46207c4651709eec478c5"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "d71a37862e6eb98f4dba55d97e07737220942b66", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f383703e32dc583468a702213eff63c58c7f9ef5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f383703e32dc583468a702213eff63c58c7f9ef5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=f383703e32dc583468a702213eff63c58c7f9ef5", "patch": "@@ -2097,7 +2097,14 @@ fn linker_with_args<'a>(\n     cmd.add_as_needed();\n \n     // Local native libraries of all kinds.\n-    add_local_native_libraries(cmd, sess, archive_builder_builder, codegen_results, tmpdir);\n+    add_local_native_libraries(\n+        cmd,\n+        sess,\n+        archive_builder_builder,\n+        codegen_results,\n+        tmpdir,\n+        link_output_kind,\n+    );\n \n     // Upstream rust crates and their non-dynamic native libraries.\n     add_upstream_rust_crates(\n@@ -2107,10 +2114,18 @@ fn linker_with_args<'a>(\n         codegen_results,\n         crate_type,\n         tmpdir,\n+        link_output_kind,\n     );\n \n     // Dynamic native libraries from upstream crates.\n-    add_upstream_native_libraries(cmd, sess, archive_builder_builder, codegen_results, tmpdir);\n+    add_upstream_native_libraries(\n+        cmd,\n+        sess,\n+        archive_builder_builder,\n+        codegen_results,\n+        tmpdir,\n+        link_output_kind,\n+    );\n \n     // Link with the import library generated for any raw-dylib functions.\n     for (raw_dylib_name, raw_dylib_imports) in\n@@ -2365,6 +2380,7 @@ fn add_native_libs_from_crate(\n     cnum: CrateNum,\n     link_static: bool,\n     link_dynamic: bool,\n+    link_output_kind: LinkOutputKind,\n ) {\n     if !sess.opts.unstable_opts.link_native_libraries {\n         // If `-Zlink-native-libraries=false` is set, then the assumption is that an\n@@ -2444,8 +2460,16 @@ fn add_native_libs_from_crate(\n                 }\n             }\n             NativeLibKind::Unspecified => {\n-                if link_dynamic {\n-                    cmd.link_dylib(name, verbatim, true);\n+                // If we are generating a static binary, prefer static library when the\n+                // link kind is unspecified.\n+                if !link_output_kind.can_link_dylib() && !sess.target.crt_static_allows_dylibs {\n+                    if link_static {\n+                        cmd.link_staticlib(name, verbatim)\n+                    }\n+                } else {\n+                    if link_dynamic {\n+                        cmd.link_dylib(name, verbatim, true);\n+                    }\n                 }\n             }\n             NativeLibKind::Framework { as_needed } => {\n@@ -2472,6 +2496,7 @@ fn add_local_native_libraries(\n     archive_builder_builder: &dyn ArchiveBuilderBuilder,\n     codegen_results: &CodegenResults,\n     tmpdir: &Path,\n+    link_output_kind: LinkOutputKind,\n ) {\n     if sess.opts.unstable_opts.link_native_libraries {\n         // User-supplied library search paths (-L on the command line). These are the same paths\n@@ -2501,6 +2526,7 @@ fn add_local_native_libraries(\n         LOCAL_CRATE,\n         link_static,\n         link_dynamic,\n+        link_output_kind,\n     );\n }\n \n@@ -2511,6 +2537,7 @@ fn add_upstream_rust_crates<'a>(\n     codegen_results: &CodegenResults,\n     crate_type: CrateType,\n     tmpdir: &Path,\n+    link_output_kind: LinkOutputKind,\n ) {\n     // All of the heavy lifting has previously been accomplished by the\n     // dependency_format module of the compiler. This is just crawling the\n@@ -2588,6 +2615,7 @@ fn add_upstream_rust_crates<'a>(\n             cnum,\n             link_static,\n             link_dynamic,\n+            link_output_kind,\n         );\n     }\n }\n@@ -2598,6 +2626,7 @@ fn add_upstream_native_libraries(\n     archive_builder_builder: &dyn ArchiveBuilderBuilder,\n     codegen_results: &CodegenResults,\n     tmpdir: &Path,\n+    link_output_kind: LinkOutputKind,\n ) {\n     let search_path = OnceCell::new();\n     for &cnum in &codegen_results.crate_info.used_crates {\n@@ -2626,6 +2655,7 @@ fn add_upstream_native_libraries(\n             cnum,\n             link_static,\n             link_dynamic,\n+            link_output_kind,\n         );\n     }\n }"}, {"sha": "0f26b703536a8ba7f535a3cd14ffbd0d2adc26a9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f383703e32dc583468a702213eff63c58c7f9ef5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f383703e32dc583468a702213eff63c58c7f9ef5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f383703e32dc583468a702213eff63c58c7f9ef5", "patch": "@@ -675,6 +675,17 @@ impl LinkOutputKind {\n             _ => return None,\n         })\n     }\n+\n+    pub fn can_link_dylib(self) -> bool {\n+        match self {\n+            LinkOutputKind::StaticNoPicExe | LinkOutputKind::StaticPicExe => false,\n+            LinkOutputKind::DynamicNoPicExe\n+            | LinkOutputKind::DynamicPicExe\n+            | LinkOutputKind::DynamicDylib\n+            | LinkOutputKind::StaticDylib\n+            | LinkOutputKind::WasiReactorExe => true,\n+        }\n+    }\n }\n \n impl fmt::Display for LinkOutputKind {"}, {"sha": "da3f4cba214ab4a3411bb0e44c975aaa18b38277", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f383703e32dc583468a702213eff63c58c7f9ef5/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f383703e32dc583468a702213eff63c58c7f9ef5/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=f383703e32dc583468a702213eff63c58c7f9ef5", "patch": "@@ -58,8 +58,8 @@ Example: `-l static:+whole-archive=mylib`.\n \n The kind of library and the modifiers can also be specified in a [`#[link]`\n attribute][link-attribute]. If the kind is not specified in the `link`\n-attribute or on the command-line, it will link a dynamic library if available,\n-otherwise it will use a static library. If the kind is specified on the\n+attribute or on the command-line, it will link a dynamic library by default,\n+except when building a static executable. If the kind is specified on the\n command-line, it will override the kind specified in a `link` attribute.\n \n The name used in a `link` attribute may be overridden using the form `-l"}]}