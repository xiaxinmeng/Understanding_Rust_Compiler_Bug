{"sha": "a96ba969156d257e5d5b692946fa8fe40ed6543a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NmJhOTY5MTU2ZDI1N2U1ZDViNjkyOTQ2ZmE4ZmU0MGVkNjU0M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-23T00:10:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-23T00:10:17Z"}, "message": "Auto merge of #62069 - Centril:rollup-m8n4uw7, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #62047 (Trigger `unused_attribute` lint on `#[cfg_attr($pred,)]`)\n - #62049 (Fix one missing `dyn`.)\n - #62051 (Lint empty `#[derive()]` as unused attribute.)\n - #62057 (Deny explicit_outlives_requirements in the compiler)\n - #62068 (Fix meta-variable binding errors in macros)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "6b20831f5e7fe26a17165678bc6c0ea78d492621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b20831f5e7fe26a17165678bc6c0ea78d492621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96ba969156d257e5d5b692946fa8fe40ed6543a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96ba969156d257e5d5b692946fa8fe40ed6543a", "html_url": "https://github.com/rust-lang/rust/commit/a96ba969156d257e5d5b692946fa8fe40ed6543a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96ba969156d257e5d5b692946fa8fe40ed6543a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de02101e6d949c4a9040211e9ce8c488a997497e", "url": "https://api.github.com/repos/rust-lang/rust/commits/de02101e6d949c4a9040211e9ce8c488a997497e", "html_url": "https://github.com/rust-lang/rust/commit/de02101e6d949c4a9040211e9ce8c488a997497e"}, {"sha": "74380b3336d6d93b74f65f0a1034b29b53aae268", "url": "https://api.github.com/repos/rust-lang/rust/commits/74380b3336d6d93b74f65f0a1034b29b53aae268", "html_url": "https://github.com/rust-lang/rust/commit/74380b3336d6d93b74f65f0a1034b29b53aae268"}], "stats": {"total": 208, "additions": 117, "deletions": 91}, "files": [{"sha": "17ea58438810e20f10684df14daf83d51d8abee6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -2070,19 +2070,19 @@ macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n+        impl<$($name:Debug),+> Debug for ($($name,)+) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments)]\n             fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n-                let ($(ref $name,)*) = *self;\n+                let ($(ref $name,)+) = *self;\n                 $(\n                     builder.field(&$name);\n-                )*\n+                )+\n \n                 builder.finish()\n             }\n         }\n-        peel! { $($name,)* }\n+        peel! { $($name,)+ }\n     )\n }\n "}, {"sha": "38e38642842403bf88843ca2f8a22fd1e2b94f7d", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -617,11 +617,11 @@ mod impls {\n \n         ( $($name:ident)+) => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($name: Hash),*> Hash for ($($name,)*) where last_type!($($name,)+): ?Sized {\n+            impl<$($name: Hash),+> Hash for ($($name,)+) where last_type!($($name,)+): ?Sized {\n                 #[allow(non_snake_case)]\n                 fn hash<S: Hasher>(&self, state: &mut S) {\n-                    let ($(ref $name,)*) = *self;\n-                    $($name.hash(state);)*\n+                    let ($(ref $name,)+) = *self;\n+                    $($name.hash(state);)+\n                 }\n             }\n         );"}, {"sha": "adfb639bae341ceb0aca1aea55ef4723d32333d6", "filename": "src/libcore/iter/traits/accum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -72,10 +72,10 @@ macro_rules! integer_sum_product {\n     ($($a:ty)*) => (\n         integer_sum_product!(@impls 0, 1,\n                 #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")],\n-                $($a)+);\n+                $($a)*);\n         integer_sum_product!(@impls Wrapping(0), Wrapping(1),\n                 #[stable(feature = \"wrapping_iter_arith\", since = \"1.14.0\")],\n-                $(Wrapping<$a>)+);\n+                $(Wrapping<$a>)*);\n     );\n }\n "}, {"sha": "589061b2826818107a82961647e0caf3fd7ce6a8", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -15,7 +15,7 @@ macro_rules! panic {\n         $crate::panic!($msg)\n     );\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*),\n+        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)+),\n                                      &(file!(), line!(), __rust_unstable_column!()))\n     });\n }\n@@ -558,7 +558,7 @@ macro_rules! unreachable {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n }\n \n /// Indicates unfinished code.\n@@ -617,7 +617,7 @@ macro_rules! unimplemented {\n #[unstable(feature = \"todo_macro\", issue = \"59277\")]\n macro_rules! todo {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n }\n \n /// Creates an array of [`MaybeUninit`]."}, {"sha": "3f4ff7c2f437e71197d0911e426a02668940d951", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -103,7 +103,7 @@ pub trait Sized {\n /// `Unsize` is implemented for:\n ///\n /// - `[T; N]` is `Unsize<[T]>`\n-/// - `T` is `Unsize<Trait>` when `T: Trait`\n+/// - `T` is `Unsize<dyn Trait>` when `T: Trait`\n /// - `Foo<..., T, ...>` is `Unsize<Foo<..., U, ...>>` if:\n ///   - `T: Unsize<U>`\n ///   - Foo is a struct"}, {"sha": "fccb00d768cd852f69f35135d68fedcff29c26fc", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -2725,12 +2725,12 @@ macro_rules! fnptr_impls_safety_abi {\n \n macro_rules! fnptr_impls_args {\n     ($($Arg: ident),+) => {\n-        fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),* , ...) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),* , ...) -> Ret, $($Arg),* }\n+        fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n     };\n     () => {\n         // No variadic functions with 0 parameters"}, {"sha": "5c2f9ec9848dda7d26b1b6d5b2545cd70313f5ec", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -59,7 +59,7 @@ macro_rules! rpc_encode_decode {\n         }\n     };\n     (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {\n-        impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)* {\n+        impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {\n             fn encode(self, w: &mut Writer, s: &mut S) {\n                 // HACK(eddyb): `Tag` enum duplicated between the\n                 // two impls as there's no other place to stash it.\n@@ -79,8 +79,8 @@ macro_rules! rpc_encode_decode {\n             }\n         }\n \n-        impl<S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)*> DecodeMut<'a, '_, S>\n-            for $name $(<$($T),+>)*\n+        impl<S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>\n+            for $name $(<$($T),+>)?\n         {\n             fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {\n                 // HACK(eddyb): `Tag` enum duplicated between the"}, {"sha": "35b181245837f2bf17e6454f7dea2c53cdc0533f", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -51,7 +51,7 @@ pub trait ItemLikeVisitor<'hir> {\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem);\n }\n \n-pub struct DeepVisitor<'v, V: 'v> {\n+pub struct DeepVisitor<'v, V> {\n     visitor: &'v mut V,\n }\n "}, {"sha": "a1a93eb5521387ee03fcbd30c2f1371e3a6d80ee", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -800,7 +800,7 @@ impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n /// [blog post]: https://is.gd/0hKvIr\n struct TypeGeneralizer<'me, 'tcx, D>\n where\n-    D: TypeRelatingDelegate<'tcx> + 'me,\n+    D: TypeRelatingDelegate<'tcx>,\n {\n     infcx: &'me InferCtxt<'me, 'tcx>,\n "}, {"sha": "257d5159f113195128fc4db2f3c935342bbe45df", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -31,7 +31,6 @@\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n #![deny(unused_lifetimes)]\n-#![allow(explicit_outlives_requirements)]\n \n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]"}, {"sha": "4fb88dadd1f44628ece3ec4df0707b83f071f11c", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let lang_items = self.lang_items();\n         let did = Some(item_def_id);\n \n-        $(lang_items.$name() == did)||+\n+        $(lang_items.$name() == did)||*\n     }\n }\n "}, {"sha": "28399ed5439f79de9a3bcba7bb9dde3ad7bf3fca", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -231,7 +231,7 @@ pub struct CommonConsts<'tcx> {\n     pub err: &'tcx Const<'tcx>,\n }\n \n-pub struct LocalTableInContext<'a, V: 'a> {\n+pub struct LocalTableInContext<'a, V> {\n     local_id_root: Option<DefId>,\n     data: &'a ItemLocalMap<V>\n }\n@@ -294,7 +294,7 @@ impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {\n     }\n }\n \n-pub struct LocalTableInContextMut<'a, V: 'a> {\n+pub struct LocalTableInContextMut<'a, V> {\n     local_id_root: Option<DefId>,\n     data: &'a mut ItemLocalMap<V>\n }\n@@ -2171,7 +2171,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n \n /// An entry in an interner.\n-struct Interned<'tcx, T: 'tcx+?Sized>(&'tcx T);\n+struct Interned<'tcx, T: ?Sized>(&'tcx T);\n \n impl<'tcx, T: 'tcx+?Sized> Clone for Interned<'tcx, T> {\n     fn clone(&self) -> Self {"}, {"sha": "7d5f984c1b6f24e93f2b74359bcd44819311ab91", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -89,7 +89,7 @@ macro_rules! profq_query_msg {\n \n /// A type representing the responsibility to execute the job in the `job` field.\n /// This will poison the relevant query if dropped.\n-pub(super) struct JobOwner<'a, 'tcx, Q: QueryDescription<'tcx> + 'a> {\n+pub(super) struct JobOwner<'a, 'tcx, Q: QueryDescription<'tcx>> {\n     cache: &'a Lock<QueryCache<'tcx, Q>>,\n     key: Q::Key,\n     job: Lrc<QueryJob<'tcx>>,\n@@ -230,7 +230,7 @@ pub struct CycleError<'tcx> {\n }\n \n /// The result of `try_get_lock`\n-pub(super) enum TryGetJob<'a, 'tcx, D: QueryDescription<'tcx> + 'a> {\n+pub(super) enum TryGetJob<'a, 'tcx, D: QueryDescription<'tcx>> {\n     /// The query is not yet started. Contains a guard to the cache eventually used to start it.\n     NotYetStarted(JobOwner<'a, 'tcx, D>),\n "}, {"sha": "0709368ad860ef973792a951cd7f16f180e5ab70", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -110,7 +110,7 @@ macro_rules! builder_methods_for_value_instructions {\n             unsafe {\n                 llvm::$llvm_capi(self.llbuilder, $($arg,)* UNNAMED)\n             }\n-        })*\n+        })+\n     }\n }\n "}, {"sha": "7283aa95b3027e7d9182d596bd9cd0a6bbda3331", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -24,7 +24,6 @@\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n #![deny(unused_lifetimes)]\n-#![allow(explicit_outlives_requirements)]\n \n use back::write::{create_target_machine, create_informational_target_machine};\n use syntax_pos::symbol::Symbol;"}, {"sha": "b76f098773f0b6a26b6758dca781c1f669433537", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -15,7 +15,6 @@\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n #![deny(unused_lifetimes)]\n-#![allow(explicit_outlives_requirements)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "635edbb927e5c4c1e86cdc6c02e88c057474682f", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -423,7 +423,7 @@ macro_rules! newtype_index {\n     (@derives      [$($derives:ident,)*]\n      @attrs        [$(#[$attrs:meta])*]\n      @type         [$type:ident]\n-     @max          [$_max:expr]\n+     @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*"}, {"sha": "2fb534e8228e6f8fb969fdd6577212626c51cde8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -219,7 +219,7 @@ fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n                             return Some(format!(\"{:?}\", $itypes))\n                         })*\n                         None\n-                    },)*\n+                    },)+\n                     _ => None\n                 }\n             }"}, {"sha": "7896592eea68582238a68760f310f9332c9336db", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -30,7 +30,7 @@ impl<'a, 'tcx, BD> MirWithFlowState<'tcx> for DataflowBuilder<'a, 'tcx, BD>\n     fn flow_state(&self) -> &DataflowState<'tcx, Self::BD> { &self.flow_state.flow_state }\n }\n \n-struct Graph<'a, 'tcx, MWF:'a, P> where\n+struct Graph<'a, 'tcx, MWF, P> where\n     MWF: MirWithFlowState<'tcx>\n {\n     mbcx: &'a MWF,"}, {"sha": "89b952e9f8b5aaa4031f29e62719f3bc79390e9d", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -181,7 +181,7 @@ where\n \n struct PropagationContext<'b, 'a, 'tcx, O>\n where\n-    O: 'b + BitDenotation<'tcx>,\n+    O: BitDenotation<'tcx>,\n {\n     builder: &'b mut DataflowAnalysis<'a, 'tcx, O>,\n }"}, {"sha": "416b66daa05940fc958522e9a3bac1daed7c46f1", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -21,7 +21,7 @@ use super::{\n };\n use crate::const_eval::{CompileTimeInterpreter, CompileTimeEvalContext};\n \n-struct InternVisitor<'rt, 'mir: 'rt, 'tcx: 'rt + 'mir> {\n+struct InternVisitor<'rt, 'mir, 'tcx> {\n     /// previously encountered safe references\n     ref_tracking: &'rt mut RefTracking<(MPlaceTy<'tcx>, Mutability, InternMode)>,\n     ecx: &'rt mut CompileTimeEvalContext<'mir, 'tcx>,"}, {"sha": "cb02e1a778c93af78f38da3bc6ed78d3db92564e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -30,7 +30,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n #![deny(unused_lifetimes)]\n-#![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;\n #[macro_use]"}, {"sha": "91fc19b71d8ba7407d60619ba74b387091b5681a", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -92,7 +92,7 @@ pub trait DropElaborator<'a, 'tcx>: fmt::Debug {\n #[derive(Debug)]\n struct DropCtxt<'l, 'b, 'tcx, D>\n where\n-    D: DropElaborator<'b, 'tcx> + 'l,\n+    D: DropElaborator<'b, 'tcx>,\n {\n     elaborator: &'l mut D,\n "}, {"sha": "75821aba4706e1bedc19ba12c221e01f300abfa0", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -119,19 +119,19 @@ macro_rules! flavor_mappings {\n     ($((($($flavor:tt)*), $string:expr),)*) => (\n         impl LinkerFlavor {\n             pub const fn one_of() -> &'static str {\n-                concat!(\"one of: \", $($string, \" \",)+)\n+                concat!(\"one of: \", $($string, \" \",)*)\n             }\n \n             pub fn from_str(s: &str) -> Option<Self> {\n                 Some(match s {\n-                    $($string => $($flavor)*,)+\n+                    $($string => $($flavor)*,)*\n                     _ => return None,\n                 })\n             }\n \n             pub fn desc(&self) -> &str {\n                 match *self {\n-                    $($($flavor)* => $string,)+\n+                    $($($flavor)* => $string,)*\n                 }\n             }\n         }"}, {"sha": "ec0f431d9b25e211d2dcb0059f13624547a7ffe9", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -75,7 +75,6 @@ This API is completely unstable and subject to change.\n #![deny(rust_2018_idioms)]\n #![deny(internal)]\n #![deny(unused_lifetimes)]\n-#![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "2def2a455fb6448158a844a465d29e37fa900f07", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -739,33 +739,33 @@ macro_rules! count {\n macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n-        impl<$($name:Decodable),*> Decodable for ($($name,)*) {\n+        impl<$($name:Decodable),+> Decodable for ($($name,)+) {\n             #[allow(non_snake_case)]\n-            fn decode<D: Decoder>(d: &mut D) -> Result<($($name,)*), D::Error> {\n-                let len: usize = count!($($name)*);\n+            fn decode<D: Decoder>(d: &mut D) -> Result<($($name,)+), D::Error> {\n+                let len: usize = count!($($name)+);\n                 d.read_tuple(len, |d| {\n                     let mut i = 0;\n                     let ret = ($(d.read_tuple_arg({ i+=1; i-1 }, |d| -> Result<$name, D::Error> {\n                         Decodable::decode(d)\n-                    })?,)*);\n+                    })?,)+);\n                     Ok(ret)\n                 })\n             }\n         }\n-        impl<$($name:Encodable),*> Encodable for ($($name,)*) {\n+        impl<$($name:Encodable),+> Encodable for ($($name,)+) {\n             #[allow(non_snake_case)]\n             fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-                let ($(ref $name,)*) = *self;\n+                let ($(ref $name,)+) = *self;\n                 let mut n = 0;\n-                $(let $name = $name; n += 1;)*\n+                $(let $name = $name; n += 1;)+\n                 s.emit_tuple(n, |s| {\n                     let mut i = 0;\n-                    $(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s))?;)*\n+                    $(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s))?;)+\n                     Ok(())\n                 })\n             }\n         }\n-        peel! { $($name,)* }\n+        peel! { $($name,)+ }\n     )\n }\n "}, {"sha": "1ab367f73c1b31a1da288c8a293fc999d5ee150a", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -91,10 +91,10 @@ impl<'a> StripUnconfigured<'a> {\n     /// is in the original source file. Gives a compiler error if the syntax of\n     /// the attribute is incorrect.\n     fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n-        if !attr.check_name(sym::cfg_attr) {\n+        if attr.path != sym::cfg_attr {\n             return vec![attr];\n         }\n-        if attr.tokens.len() == 0 {\n+        if attr.tokens.is_empty() {\n             self.sess.span_diagnostic\n                 .struct_span_err(\n                     attr.span,\n@@ -108,7 +108,7 @@ impl<'a> StripUnconfigured<'a> {\n                        <https://doc.rust-lang.org/reference/conditional-compilation.html\\\n                        #the-cfg_attr-attribute>\")\n                 .emit();\n-            return Vec::new();\n+            return vec![];\n         }\n \n         let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |parser| {\n@@ -133,17 +133,18 @@ impl<'a> StripUnconfigured<'a> {\n             Ok(result) => result,\n             Err(mut e) => {\n                 e.emit();\n-                return Vec::new();\n+                return vec![];\n             }\n         };\n \n-        // Check feature gate and lint on zero attributes in source. Even if the feature is gated,\n-        // we still compute as if it wasn't, since the emitted error will stop compilation further\n-        // along the compilation.\n-        if expanded_attrs.len() == 0 {\n-            // FIXME: Emit unused attribute lint here.\n+        // Lint on zero attributes in source.\n+        if expanded_attrs.is_empty() {\n+            return vec![attr];\n         }\n \n+        // At this point we know the attribute is considered used.\n+        attr::mark_used(&attr);\n+\n         if attr::cfg_matches(&cfg_predicate, self.sess, self.features) {\n             // We call `process_cfg_attr` recursively in case there's a\n             // `cfg_attr` inside of another `cfg_attr`. E.g.\n@@ -159,7 +160,7 @@ impl<'a> StripUnconfigured<'a> {\n             }))\n             .collect()\n         } else {\n-            Vec::new()\n+            vec![]\n         }\n     }\n "}, {"sha": "3b4243ed24f7c5519f4a2715fa3f344bcd84ea36", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -30,10 +30,6 @@ pub fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>) ->\n \n         match attr.parse_list(cx.parse_sess,\n                               |parser| parser.parse_path_allowing_meta(PathStyle::Mod)) {\n-            Ok(ref traits) if traits.is_empty() => {\n-                cx.span_warn(attr.span, \"empty trait list in `derive`\");\n-                false\n-            }\n             Ok(traits) => {\n                 result.extend(traits);\n                 true"}, {"sha": "945cf36af46fe42788090c0d975da0133fe84880", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -98,20 +98,20 @@ macro_rules! ast_fragments {\n                             }\n                         });\n                     }\n-                    $($(AstFragment::$Kind(ast) => vis.$mut_visit_ast(ast),)*)*\n+                    $($(AstFragment::$Kind(ast) => vis.$mut_visit_ast(ast),)?)*\n                     $($(AstFragment::$Kind(ast) =>\n-                        ast.flat_map_in_place(|ast| vis.$flat_map_ast_elt(ast)),)*)*\n+                        ast.flat_map_in_place(|ast| vis.$flat_map_ast_elt(ast)),)?)*\n                 }\n             }\n \n             pub fn visit_with<'a, V: Visitor<'a>>(&'a self, visitor: &mut V) {\n                 match *self {\n                     AstFragment::OptExpr(Some(ref expr)) => visitor.visit_expr(expr),\n                     AstFragment::OptExpr(None) => {}\n-                    $($(AstFragment::$Kind(ref ast) => visitor.$visit_ast(ast),)*)*\n+                    $($(AstFragment::$Kind(ref ast) => visitor.$visit_ast(ast),)?)*\n                     $($(AstFragment::$Kind(ref ast) => for ast_elt in &ast[..] {\n                         visitor.$visit_ast_elt(ast_elt);\n-                    })*)*\n+                    })?)*\n                 }\n             }\n         }\n@@ -122,10 +122,10 @@ macro_rules! ast_fragments {\n             }\n             $($(fn $mut_visit_ast(&mut self, ast: &mut $AstTy) {\n                 visit_clobber(ast, |ast| self.expand_fragment(AstFragment::$Kind(ast)).$make_ast());\n-            })*)*\n+            })?)*\n             $($(fn $flat_map_ast_elt(&mut self, ast_elt: <$AstTy as IntoIterator>::Item) -> $AstTy {\n                 self.expand_fragment(AstFragment::$Kind(smallvec![ast_elt])).$make_ast()\n-            })*)*\n+            })?)*\n         }\n \n         impl<'a> MacResult for crate::ext::tt::macro_rules::ParserAnyMacro<'a> {"}, {"sha": "e75eff2e85714a48e4ea71778d11ab3fccde832b", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -88,7 +88,7 @@ macro_rules! derive_traits {\n                         )\n                     }),\n                 );\n-            )*\n+            )+\n         }\n     }\n }"}, {"sha": "c9d99e5831ac47b5348abdf348042ccd8ef87a8b", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -70,7 +70,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n         macro_rules! tt {\n             ($ty:ident { $($field:ident $(: $value:expr)*),+ $(,)? }) => (\n                 TokenTree::$ty(self::$ty {\n-                    $($field $(: $value)*,)*\n+                    $($field $(: $value)*,)+\n                     span,\n                 })\n             );"}, {"sha": "4c96d6e7ca17d22e13b95a967f20d162491ff90c", "filename": "src/test/ui/conditional-compilation/cfg-attr-empty-is-unused.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -0,0 +1,13 @@\n+// Check that `#[cfg_attr($PREDICATE,)]` triggers the `unused_attribute` lint.\n+\n+// compile-flags: --cfg TRUE\n+\n+#![deny(unused)]\n+\n+#[cfg_attr(FALSE,)] //~ ERROR unused attribute\n+fn _f() {}\n+\n+#[cfg_attr(TRUE,)] //~ ERROR unused attribute\n+fn _g() {}\n+\n+fn main() {}"}, {"sha": "cd3563e66c720508412673a961a1556e283adb16", "filename": "src/test/ui/conditional-compilation/cfg-attr-empty-is-unused.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-empty-is-unused.stderr?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -0,0 +1,21 @@\n+error: unused attribute\n+  --> $DIR/cfg-attr-empty-is-unused.rs:7:1\n+   |\n+LL | #[cfg_attr(FALSE,)]\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cfg-attr-empty-is-unused.rs:5:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: #[deny(unused_attributes)] implied by #[deny(unused)]\n+\n+error: unused attribute\n+  --> $DIR/cfg-attr-empty-is-unused.rs:10:1\n+   |\n+LL | #[cfg_attr(TRUE,)]\n+   | ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4f2e31e8efb15af3bb080b542b2910d359847aeb", "filename": "src/test/ui/derives/deriving-meta-empty-trait-list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -1,6 +1,6 @@\n-// compile-pass\n+#![deny(unused)]\n \n-#[derive()] //~ WARNING empty trait list in `derive`\n-struct Bar;\n+#[derive()] //~ ERROR unused attribute\n+struct _Bar;\n \n pub fn main() {}"}, {"sha": "95c94ded3eaf1589a6444f40705ab386389a4442", "filename": "src/test/ui/derives/deriving-meta-empty-trait-list.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -1,6 +1,15 @@\n-warning: empty trait list in `derive`\n+error: unused attribute\n   --> $DIR/deriving-meta-empty-trait-list.rs:3:1\n    |\n LL | #[derive()]\n    | ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/deriving-meta-empty-trait-list.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: #[deny(unused_attributes)] implied by #[deny(unused)]\n+\n+error: aborting due to previous error\n "}, {"sha": "bcc7a8a5ae0a3255845de805d45abd2408565780", "filename": "src/test/ui/issues/issue-22814.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -3,7 +3,7 @@ trait Test {}\n \n macro_rules! test {\n ( $($name:ident)+) => (\n-    impl<$($name: Test),*> Test for ($($name,)*) {\n+    impl<$($name: Test),+> Test for ($($name,)+) {\n     }\n )\n }"}, {"sha": "a6d886318e8202b281d53217155934f2ade49805", "filename": "src/test/ui/malformed/malformed-derive-entry.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -4,9 +4,6 @@ struct Test1;\n #[derive(Copy=\"bad\")] //~ ERROR expected one of `)`, `,`, or `::`, found `=`\n struct Test2;\n \n-#[derive()] //~ WARNING empty trait list\n-struct Test3;\n-\n #[derive] //~ ERROR malformed `derive` attribute input\n struct Test4;\n "}, {"sha": "f7500febe97192db77328bcc67aa871ddc804c58", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a96ba969156d257e5d5b692946fa8fe40ed6543a/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=a96ba969156d257e5d5b692946fa8fe40ed6543a", "patch": "@@ -10,14 +10,8 @@ error: expected one of `)`, `,`, or `::`, found `=`\n LL | #[derive(Copy=\"bad\")]\n    |              ^ expected one of `)`, `,`, or `::` here\n \n-warning: empty trait list in `derive`\n-  --> $DIR/malformed-derive-entry.rs:7:1\n-   |\n-LL | #[derive()]\n-   | ^^^^^^^^^^^\n-\n error: malformed `derive` attribute input\n-  --> $DIR/malformed-derive-entry.rs:10:1\n+  --> $DIR/malformed-derive-entry.rs:7:1\n    |\n LL | #[derive]\n    | ^^^^^^^^^ help: missing traits to be derived: `#[derive(Trait1, Trait2, ...)]`"}]}