{"sha": "aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "node_id": "C_kwDOAAsO6NoAKGFhMmEwYTgzZDlhYTI0MWJiY2U2Mjc5N2IxYzIxNDBjNzkzODllZjU", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-24T20:57:38Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-02T16:46:09Z"}, "message": "Expect each lint in attribute individually (RFC-2383)", "tree": {"sha": "dc2c1b7bc4fd22babfca14c571d03a4632998460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc2c1b7bc4fd22babfca14c571d03a4632998460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmIfn1EACgkQ/Ny/Ka9k\n1gE83Q//QONpS82Eyw0AbyaNboe2I9eGr41v3UuPE+YJ2cl+1RewjChSawRzuMWu\nqJQ74bgQBavt4yI8U+/NvE7U8p+gl8fxBZ4Pr0Y53yRcIE8Jc38QUUwGKk05XWrm\nfAt7WgWRQ4XgkkiobMF95xXEX4Lb0k8i3kWHpXr8tj/hnubNm360lklEDGW9D+d/\nZPiGB63YdAxrs5hf3rz2iTuIFQa+PkFrsnJdv5dfSo0Muma183AJI9kXfeD10fcT\nVmhgnDLAXhqdJ90x2f/Is/JhhFJnZy6LMGFkOzG1OiqcmHWYddoscowt9le71AfE\ne+A7ZDnvPtVO2PIudw71xu3JtB5ZW/ARuu1m0I8BpMgk+iL6vYvebTEskRz/5SAJ\nsEdVc9LPfYDdOLbKCXxQOtqFLNCengyK0v0Kr8TD6ZQ9c9Cl1L8JGhG8OMWfRgmz\nveCepv2LHSID7Ur3qLgNdQFM8Un1bgjvAW2eNStMNZoWhJ8I1kG2cFvIjJH7f0rY\n+cCPWdS9P69ukmLpWOKmaERg+DBpALDn48p7I+zqbSSqxZQRQ/x/o+8hSRVf4Gkh\nlAUxIRafmfeRM3d5GIQ+62x4T5H5fb2cLWYk+smSUUOzcPBHLipQ0I7X7JbVnK6V\nwoyULPhtM/kQ7FI85F8aamBLKesCVBxIpoHN9c8xDw21cgy08pE=\n=P+pK\n-----END PGP SIGNATURE-----", "payload": "tree dc2c1b7bc4fd22babfca14c571d03a4632998460\nparent a9bf9eaef5165067414b33777a2c924e42aab5aa\nauthor xFrednet <xFrednet@gmail.com> 1637787458 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1646239569 +0100\n\nExpect each lint in attribute individually (RFC-2383)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "html_url": "https://github.com/rust-lang/rust/commit/aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9bf9eaef5165067414b33777a2c924e42aab5aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bf9eaef5165067414b33777a2c924e42aab5aa", "html_url": "https://github.com/rust-lang/rust/commit/a9bf9eaef5165067414b33777a2c924e42aab5aa"}], "stats": {"total": 313, "additions": 210, "deletions": 103}, "files": [{"sha": "b53208a6e5d1cb3bb1431fd14b54ea0ee9328698", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -942,10 +942,16 @@ impl Handler {\n \n         let mut inner = self.inner.borrow_mut();\n         for mut diag in diags.into_iter() {\n-            if let Some(unstable_id) = diag.level.get_expectation_id() {\n-                if let Some(stable_id) = unstable_to_stable.get(&unstable_id) {\n-                    diag.level = Level::Expect(*stable_id);\n-                    inner.fulfilled_expectations.insert(*stable_id);\n+            if let Some(mut unstable_id) = diag.level.get_expectation_id() {\n+                let lint_index = unstable_id.get_lint_index();\n+\n+                // The unstable to stable map only maps the unstable it to a stable id\n+                // the lint index is manually transferred here.\n+                unstable_id.set_lint_index(None);\n+                if let Some(mut stable_id) = unstable_to_stable.get(&unstable_id).map(|id| *id) {\n+                    stable_id.set_lint_index(lint_index);\n+                    diag.level = Level::Expect(stable_id);\n+                    inner.fulfilled_expectations.insert(stable_id);\n                 }\n             }\n \n@@ -1007,7 +1013,7 @@ impl HandlerInner {\n         // Diagnostics created before the definition of `HirId`s are unstable and can not yet\n         // be stored. Instead, they are buffered until the `LintExpectationId` is replaced by\n         // a stable one by the `LintLevelsBuilder`.\n-        if let Level::Expect(LintExpectationId::Unstable(_)) = diagnostic.level {\n+        if let Level::Expect(LintExpectationId::Unstable { .. }) = diagnostic.level {\n             self.unstable_expect_diagnostics.push(diagnostic.clone());\n             return;\n         }"}, {"sha": "01454d2fbac003254f28f3fa590e2b4c7d3ed544", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 62, "deletions": 26, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -243,9 +243,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for (attr_index, attr) in attrs.iter().enumerate() {\n-            let level = match Level::from_symbol(attr.name_or_empty(), || {\n-                LintExpectationId::Unstable(attr.id)\n-            }) {\n+            let level = match Level::from_attr(attr) {\n                 None => continue,\n                 Some(Level::Expect(unstable_id)) if source_hir_id.is_some() => {\n                     let stable_id =\n@@ -305,9 +303,23 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n             }\n \n-            for li in metas {\n+            let (unfulfilled_lint_lvl, unfulfilled_lint_src) = self.sets.get_lint_level(\n+                builtin::UNFULFILLED_LINT_EXPECTATIONS,\n+                self.cur,\n+                Some(&specs),\n+                &sess,\n+            );\n+            for (lint_index, li) in metas.iter_mut().enumerate() {\n+                let level = match level {\n+                    Level::Expect(mut id) => {\n+                        id.set_lint_index(Some(lint_index));\n+                        Level::Expect(id)\n+                    }\n+                    level => level,\n+                };\n+\n                 let sp = li.span();\n-                let mut meta_item = match li {\n+                let meta_item = match li {\n                     ast::NestedMetaItem::MetaItem(meta_item) if meta_item.is_word() => meta_item,\n                     _ => {\n                         let mut err = bad_attr(sp);\n@@ -347,6 +359,17 @@ impl<'s> LintLevelsBuilder<'s> {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n+                        if let Level::Expect(expect_id) = level {\n+                            self.lint_expectations.insert(\n+                                expect_id,\n+                                LintExpectation::new(\n+                                    reason,\n+                                    sp,\n+                                    unfulfilled_lint_lvl,\n+                                    unfulfilled_lint_src,\n+                                ),\n+                            );\n+                        }\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n@@ -362,6 +385,17 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 for id in ids {\n                                     self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n+                                if let Level::Expect(expect_id) = level {\n+                                    self.lint_expectations.insert(\n+                                        expect_id,\n+                                        LintExpectation::new(\n+                                            reason,\n+                                            sp,\n+                                            unfulfilled_lint_lvl,\n+                                            unfulfilled_lint_src,\n+                                        ),\n+                                    );\n+                                }\n                             }\n                             Err((Some(ids), ref new_lint_name)) => {\n                                 let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n@@ -398,6 +432,17 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 for id in ids {\n                                     self.insert_spec(&mut specs, *id, (level, src));\n                                 }\n+                                if let Level::Expect(expect_id) = level {\n+                                    self.lint_expectations.insert(\n+                                        expect_id,\n+                                        LintExpectation::new(\n+                                            reason,\n+                                            sp,\n+                                            unfulfilled_lint_lvl,\n+                                            unfulfilled_lint_src,\n+                                        ),\n+                                    );\n+                                }\n                             }\n                             Err((None, _)) => {\n                                 // If Tool(Err(None, _)) is returned, then either the lint does not\n@@ -491,31 +536,22 @@ impl<'s> LintLevelsBuilder<'s> {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n                         }\n+                        if let Level::Expect(expect_id) = level {\n+                            self.lint_expectations.insert(\n+                                expect_id,\n+                                LintExpectation::new(\n+                                    reason,\n+                                    sp,\n+                                    unfulfilled_lint_lvl,\n+                                    unfulfilled_lint_src,\n+                                ),\n+                            );\n+                        }\n                     } else {\n                         panic!(\"renamed lint does not exist: {}\", new_name);\n                     }\n                 }\n             }\n-\n-            if !specs.is_empty() {\n-                // Only lints that are currently registered in the lint store\n-                // have been found and added to `specs`. Creating the expectation\n-                // here ensures that it can be fulfilled during this compilation\n-                // session.\n-                if let Level::Expect(expect_id) = level {\n-                    let has_lints = specs\n-                        .values()\n-                        .any(|(lvl, _src)| matches!(lvl, Level::Expect(check_id) if check_id.eq(&expect_id)));\n-\n-                    if has_lints {\n-                        let lint = builtin::UNFULFILLED_LINT_EXPECTATIONS;\n-                        let (lvl, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n-                        let expectation = LintExpectation::new(reason, attr.span, lvl, src);\n-                        self.lint_expectations.insert(expect_id, expectation);\n-                    }\n-                }\n-            }\n         }\n \n         if !is_crate_node {\n@@ -565,7 +601,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         hir_id: HirId,\n         attr_index: usize,\n     ) -> LintExpectationId {\n-        let stable_id = LintExpectationId::Stable { hir_id, attr_index };\n+        let stable_id = LintExpectationId::Stable { hir_id, attr_index, lint_index: None };\n \n         self.expectation_id_map.insert(unstable_id, stable_id);\n "}, {"sha": "e350eeea6c850bdd4515506eb4a3d43c67c46df6", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -5,7 +5,7 @@ extern crate rustc_macros;\n \n pub use self::Level::*;\n use rustc_ast::node_id::{NodeId, NodeMap};\n-use rustc_ast::AttrId;\n+use rustc_ast::{AttrId, Attribute};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir::HirId;\n use rustc_serialize::json::Json;\n@@ -63,56 +63,72 @@ pub enum Applicability {\n /// These `LintExpectationId` will be updated to use the stable [`HirId`] once the\n /// AST has been lowered. The transformation is done by the\n /// [`LintLevelsBuilder`][`rustc_lint::levels::LintLevelsBuilder`]\n+///\n+/// Each lint inside the `expect` attribute is tracked individually, the `lint_index`\n+/// identifies the lint inside the attribute and ensures that the IDs are unique.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n pub enum LintExpectationId {\n     /// Used for lints emitted during the `EarlyLintPass`. This id is not\n     /// has stable and should not be cached.\n-    Unstable(AttrId),\n+    Unstable { attr_id: AttrId, lint_index: Option<usize> },\n     /// The [`HirId`] that the lint expectation is attached to. This id is\n     /// stable and can be cached. The additional index ensures that nodes with\n     /// several expectations can correctly match diagnostics to the individual\n     /// expectation.\n-    Stable { hir_id: HirId, attr_index: usize },\n+    Stable { hir_id: HirId, attr_index: usize, lint_index: Option<usize> },\n }\n \n impl LintExpectationId {\n     pub fn is_stable(&self) -> bool {\n         match self {\n-            LintExpectationId::Unstable(_) => false,\n+            LintExpectationId::Unstable { .. } => false,\n             LintExpectationId::Stable { .. } => true,\n         }\n     }\n+\n+    pub fn get_lint_index(&self) -> Option<usize> {\n+        let (LintExpectationId::Unstable { lint_index, .. }\n+        | LintExpectationId::Stable { lint_index, .. }) = self;\n+\n+        *lint_index\n+    }\n+\n+    pub fn set_lint_index(&mut self, new_lint_index: Option<usize>) {\n+        let (LintExpectationId::Unstable { ref mut lint_index, .. }\n+        | LintExpectationId::Stable { ref mut lint_index, .. }) = self;\n+\n+        *lint_index = new_lint_index\n+    }\n }\n \n impl<HCX: rustc_hir::HashStableContext> HashStable<HCX> for LintExpectationId {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n         match self {\n-            LintExpectationId::Unstable(_) => {\n-                unreachable!(\n-                    \"HashStable should never be called for an unstable `LintExpectationId`\"\n-                )\n-            }\n-            LintExpectationId::Stable { hir_id, attr_index } => {\n+            LintExpectationId::Stable { hir_id, attr_index, lint_index: Some(lint_index) } => {\n                 hir_id.hash_stable(hcx, hasher);\n                 attr_index.hash_stable(hcx, hasher);\n+                lint_index.hash_stable(hcx, hasher);\n+            }\n+            _ => {\n+                unreachable!(\"HashStable should only be called for a filled `LintExpectationId`\")\n             }\n         }\n     }\n }\n \n impl<HCX: rustc_hir::HashStableContext> ToStableHashKey<HCX> for LintExpectationId {\n-    type KeyType = (HirId, usize);\n+    type KeyType = (HirId, usize, usize);\n \n     #[inline]\n     fn to_stable_hash_key(&self, _: &HCX) -> Self::KeyType {\n         match self {\n-            LintExpectationId::Unstable(_) => {\n-                unreachable!(\n-                    \"HashStable should never be called for an unstable `LintExpectationId`\"\n-                )\n+            LintExpectationId::Stable { hir_id, attr_index, lint_index: Some(lint_index) } => {\n+                (*hir_id, *attr_index, *lint_index)\n+            }\n+            _ => {\n+                unreachable!(\"HashStable should only be called for a filled `LintExpectationId`\")\n             }\n-            LintExpectationId::Stable { hir_id, attr_index } => (*hir_id, *attr_index),\n         }\n     }\n }\n@@ -176,13 +192,13 @@ impl Level {\n     }\n \n     /// Converts a symbol to a level.\n-    pub fn from_symbol<F>(x: Symbol, create_expectation_id: F) -> Option<Level>\n-    where\n-        F: FnOnce() -> LintExpectationId,\n-    {\n-        match x {\n+    pub fn from_attr(attr: &Attribute) -> Option<Level> {\n+        match attr.name_or_empty() {\n             sym::allow => Some(Level::Allow),\n-            sym::expect => Some(Level::Expect(create_expectation_id())),\n+            sym::expect => Some(Level::Expect(LintExpectationId::Unstable {\n+                attr_id: attr.id,\n+                lint_index: None,\n+            })),\n             sym::warn => Some(Level::Warn),\n             sym::deny => Some(Level::Deny),\n             sym::forbid => Some(Level::Forbid),"}, {"sha": "0a1581cba5963bd8f56aa4bc0171907c609df3d5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -49,7 +49,7 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n-use rustc_session::lint::{Level, Lint, LintExpectationId};\n+use rustc_session::lint::{Level, Lint};\n use rustc_session::Limit;\n use rustc_session::Session;\n use rustc_span::def_id::{DefPathHash, StableCrateId};\n@@ -2755,13 +2755,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 return bound;\n             }\n \n-            if hir.attrs(id).iter().enumerate().any(|(attr_index, attr)| {\n-                Level::from_symbol(attr.name_or_empty(), || LintExpectationId::Stable {\n-                    hir_id: id,\n-                    attr_index,\n-                })\n-                .is_some()\n-            }) {\n+            if hir.attrs(id).iter().any(|attr| Level::from_attr(attr).is_some()) {\n                 return id;\n             }\n             let next = hir.get_parent_node(id);"}, {"sha": "7237f6fb6bba0791601c5a3a6bb68db893846e20", "filename": "src/test/ui/lint/rfc-2383-lint-reason/crate_level_expect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fcrate_level_expect.stderr?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -1,8 +1,8 @@\n warning: this lint expectation is unfulfilled\n-  --> $DIR/crate_level_expect.rs:7:1\n+  --> $DIR/crate_level_expect.rs:7:11\n    |\n LL | #![expect(unused_mut)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^\n    |\n    = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n "}, {"sha": "dc9a719a3f7e79bb8cfd51c513591e7c73ec3f31", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_multiple_lints.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.rs?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -4,28 +4,55 @@\n \n #![warn(unused)]\n \n+// The warnings are not double triggers, they identify different unfulfilled lint\n+// expectations one for each listed lint.\n+\n #[expect(unused_variables, unused_mut, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+//~| WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n fn check_multiple_lints_1() {\n     // This only trigger `unused_variables`\n     let who_am_i = 666;\n }\n \n #[expect(unused_variables, unused_mut, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n fn check_multiple_lints_2() {\n     // This only triggers `unused_mut`\n     let mut x = 0;\n     println!(\"I use x: {}\", x);\n }\n \n-\n #[expect(unused_variables, unused_mut, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+//~| WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n fn check_multiple_lints_3() {\n     // This only triggers `while_true` which is also an early lint\n     while true {}\n }\n \n+#[expect(unused, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_with_lint_group_1() {\n+    let who_am_i = 666;\n+\n+    let mut x = 0;\n+    println!(\"I use x: {}\", x);\n+}\n+\n+#[expect(unused, while_true)]\n+//~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+fn check_multiple_lints_with_lint_group_2() {\n+    while true {}\n+}\n+\n fn main() {\n     check_multiple_lints_1();\n     check_multiple_lints_2();\n     check_multiple_lints_3();\n+\n+    check_multiple_lints_with_lint_group_1();\n+    check_multiple_lints_with_lint_group_2();\n }"}, {"sha": "25299aa7ec2fc287eb40f843f0a1e37c6310ee7b", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_multiple_lints.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_multiple_lints.stderr?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -0,0 +1,52 @@\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:10:28\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                            ^^^^^^^^^^\n+   |\n+   = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:28:10\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:19:10\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:28:28\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                            ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:36:18\n+   |\n+LL | #[expect(unused, while_true)]\n+   |                  ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:19:40\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                                        ^^^^^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:45:10\n+   |\n+LL | #[expect(unused, while_true)]\n+   |          ^^^^^^\n+\n+warning: this lint expectation is unfulfilled\n+  --> $DIR/expect_multiple_lints.rs:10:40\n+   |\n+LL | #[expect(unused_variables, unused_mut, while_true)]\n+   |                                        ^^^^^^^^^^\n+\n+warning: 8 warnings emitted\n+"}, {"sha": "9c3d1fe6f0f309197f2e75c05857318615861c86", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.rs?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -6,10 +6,10 @@\n \n #[expect(\n     unused_mut,\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    //~| NOTE this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\n     reason = \"this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\"\n )]\n-//~^^^^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n-//~| NOTE this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\n mod foo {\n     fn bar() {\n         #[allow(\n@@ -22,11 +22,11 @@ mod foo {\n \n #[expect(\n     unused_mut,\n+    //~^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n+    //~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n+    //~| NOTE this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\n     reason = \"this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\"\n )]\n-//~^^^^ WARNING this lint expectation is unfulfilled [unfulfilled_lint_expectations]\n-//~| NOTE `#[warn(unfulfilled_lint_expectations)]` on by default\n-//~| NOTE this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\n mod oof {\n     #[warn(\n         unused_mut,"}, {"sha": "b3a227f0d3d8edb887ac7214b52c15cbc5f7b67a", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -14,25 +14,19 @@ LL |         unused_mut,\n    |         ^^^^^^^^^^\n \n warning: this lint expectation is unfulfilled\n-  --> $DIR/expect_nested_lint_levels.rs:23:1\n+  --> $DIR/expect_nested_lint_levels.rs:24:5\n    |\n-LL | / #[expect(\n-LL | |     unused_mut,\n-LL | |     reason = \"this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\"\n-LL | | )]\n-   | |__^\n+LL |     unused_mut,\n+   |     ^^^^^^^^^^\n    |\n    = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n    = note: this `expect` is overridden by a `warn` attribute before the `unused_mut` lint is triggered\n \n warning: this lint expectation is unfulfilled\n-  --> $DIR/expect_nested_lint_levels.rs:7:1\n+  --> $DIR/expect_nested_lint_levels.rs:8:5\n    |\n-LL | / #[expect(\n-LL | |     unused_mut,\n-LL | |     reason = \"this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\"\n-LL | | )]\n-   | |__^\n+LL |     unused_mut,\n+   |     ^^^^^^^^^^\n    |\n    = note: this `expect` is overridden by a `allow` attribute before the `unused_mut` lint is triggered\n "}, {"sha": "82c1a4c08bb39284e89c419d7a56ea4f418b8ee0", "filename": "src/test/ui/lint/rfc-2383-lint-reason/expect_with_reason.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_with_reason.stderr?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -1,8 +1,8 @@\n warning: this lint expectation is unfulfilled\n-  --> $DIR/expect_with_reason.rs:6:1\n+  --> $DIR/expect_with_reason.rs:6:11\n    |\n LL | #![expect(unused_variables, reason = \"<This should fail and display this reason>\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n    = note: <This should fail and display this reason>"}, {"sha": "5d928b3cab3fe5712d3c727a64bf8bbeda501c7a", "filename": "src/test/ui/lint/rfc-2383-lint-reason/fulfilled_expectation_late_lints.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_late_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_late_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Ffulfilled_expectation_late_lints.rs?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -21,21 +21,6 @@ fn check_multiple_lint_emissions() {\n     let t = 9;\n }\n \n-mod check_multiple_expected_lints {\n-    #[expect(unused_variables, unused_mut)]\n-    pub fn check_lint_1() {\n-        // unused_variables should fulfill the expectation\n-        let c = 17;\n-    }\n-\n-    #[expect(unused_variables, unused_mut)]\n-    pub fn check_lint_2() {\n-        // unused_mut should fulfill the expectation\n-        let mut c = 17;\n-        let _ = c;\n-    }\n-}\n-\n mod check_fulfilled_expect_in_macro {\n     macro_rules! expect_inside_macro {\n         () => {\n@@ -54,8 +39,5 @@ fn main() {\n     check_lint_group();\n     check_multiple_lint_emissions();\n \n-    check_multiple_expected_lints::check_lint_1();\n-    check_multiple_expected_lints::check_lint_2();\n-\n     check_fulfilled_expect_in_macro::check_macro();\n }"}, {"sha": "df7d6584f99dd5263af85b7c114423c533299176", "filename": "src/test/ui/lint/rfc-2383-lint-reason/multiple_expect_attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa2a0a83d9aa241bbce62797b1c2140c79389ef5/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2383-lint-reason%2Fmultiple_expect_attrs.stderr?ref=aa2a0a83d9aa241bbce62797b1c2140c79389ef5", "patch": "@@ -1,8 +1,8 @@\n warning: this lint expectation is unfulfilled\n-  --> $DIR/multiple_expect_attrs.rs:7:1\n+  --> $DIR/multiple_expect_attrs.rs:7:10\n    |\n LL | #[expect(unused_variables)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unfulfilled_lint_expectations)]` on by default\n "}]}