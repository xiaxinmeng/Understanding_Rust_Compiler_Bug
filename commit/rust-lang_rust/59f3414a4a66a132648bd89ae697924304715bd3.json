{"sha": "59f3414a4a66a132648bd89ae697924304715bd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjM0MTRhNGE2NmExMzI2NDhiZDg5YWU2OTc5MjQzMDQ3MTViZDM=", "commit": {"author": {"name": "Brandon Waskiewicz", "email": "brandon.waskiewicz@gmail.com", "date": "2014-04-18T18:12:50Z"}, "committer": {"name": "Brandon Waskiewicz", "email": "brandon.waskiewicz@gmail.com", "date": "2014-04-18T18:12:50Z"}, "message": "Add another case where cindent is correct\n\nWhen calling a function, or anything with nested parens,\ndefault to cindent's indent. The least error-prone way I\ncould think of identifying this is to look for a line\nthat ends with a ',', as well as a non-zero number of\nany character except parens before the comma, and\nthen an open paren.\n\nThis will overlap with the previous rule accounting for\nfunction definitions, but that should be fine because\nit is also using cindent.", "tree": {"sha": "dd7a9ea0d5d1f5602ff851f5c8fb401c9d635a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7a9ea0d5d1f5602ff851f5c8fb401c9d635a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f3414a4a66a132648bd89ae697924304715bd3", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f3414a4a66a132648bd89ae697924304715bd3", "html_url": "https://github.com/rust-lang/rust/commit/59f3414a4a66a132648bd89ae697924304715bd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f3414a4a66a132648bd89ae697924304715bd3/comments", "author": {"login": "brandonw", "id": 165721, "node_id": "MDQ6VXNlcjE2NTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/165721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonw", "html_url": "https://github.com/brandonw", "followers_url": "https://api.github.com/users/brandonw/followers", "following_url": "https://api.github.com/users/brandonw/following{/other_user}", "gists_url": "https://api.github.com/users/brandonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonw/subscriptions", "organizations_url": "https://api.github.com/users/brandonw/orgs", "repos_url": "https://api.github.com/users/brandonw/repos", "events_url": "https://api.github.com/users/brandonw/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandonw", "id": 165721, "node_id": "MDQ6VXNlcjE2NTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/165721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonw", "html_url": "https://github.com/brandonw", "followers_url": "https://api.github.com/users/brandonw/followers", "following_url": "https://api.github.com/users/brandonw/following{/other_user}", "gists_url": "https://api.github.com/users/brandonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonw/subscriptions", "organizations_url": "https://api.github.com/users/brandonw/orgs", "repos_url": "https://api.github.com/users/brandonw/repos", "events_url": "https://api.github.com/users/brandonw/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce2bab68d69ee04e17c0165dbdb7b583d5a7c991", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2bab68d69ee04e17c0165dbdb7b583d5a7c991", "html_url": "https://github.com/rust-lang/rust/commit/ce2bab68d69ee04e17c0165dbdb7b583d5a7c991"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "f7ac357b23a7fe53257bbc6e21eb92ac2dfc4fb7", "filename": "src/etc/vim/indent/rust.vim", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59f3414a4a66a132648bd89ae697924304715bd3/src%2Fetc%2Fvim%2Findent%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/59f3414a4a66a132648bd89ae697924304715bd3/src%2Fetc%2Fvim%2Findent%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Findent%2Frust.vim?ref=59f3414a4a66a132648bd89ae697924304715bd3", "patch": "@@ -105,6 +105,7 @@ function GetRustIndent(lnum)\n \tif prevline[len(prevline) - 1] == \",\"\n \t\t\t\t\\ && s:get_line_trimmed(a:lnum) !~ \"^\\\\s*[\\\\[\\\\]{}]\"\n \t\t\t\t\\ && prevline !~ \"^\\\\s*fn\\\\s\"\n+\t\t\t\t\\ && prevline !~ \"\\\\([^\\\\(\\\\)]\\+,$\"\n \t\t\" Oh ho! The previous line ended in a comma! I bet cindent will try to\n \t\t\" take this too far... For now, let's normally use the previous line's\n \t\t\" indent.\n@@ -119,6 +120,16 @@ function GetRustIndent(lnum)\n \t\t\" fn foo(baz: Baz,\n \t\t\"        baz: Baz) // <-- cindent gets this right by itself\n \t\t\"\n+\t\t\" Another case is similar to the previous, except calling a function\n+\t\t\" instead of defining it, or any conditional expression that leaves\n+\t\t\" an open paren:\n+\t\t\"\n+\t\t\" foo(baz,\n+\t\t\"     baz);\n+\t\t\"\n+\t\t\" if baz && (foo ||\n+\t\t\"            bar) {\n+\t\t\"\n \t\t\" There are probably other cases where we don't want to do this as\n \t\t\" well. Add them as needed.\n \t\treturn GetRustIndent(a:lnum - 1)"}]}