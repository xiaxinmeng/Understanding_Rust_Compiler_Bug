{"sha": "7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzc4MDUzZWM1ZmNhYmQ1ZjhjYTk4NjI3ZGQ0NWJmYTVmYzRjZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-16T08:16:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-16T08:16:49Z"}, "message": "auto merge of #14900 : alexcrichton/rust/snapshots, r=huonw\n\nCloses #14898\r\nCloses #14918", "tree": {"sha": "1ea55f8c25540e7339e27fe9dd79cadbc332634f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea55f8c25540e7339e27fe9dd79cadbc332634f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "html_url": "https://github.com/rust-lang/rust/commit/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ef910f71ab83761b1f5f9144621f246622e92d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef910f71ab83761b1f5f9144621f246622e92d8", "html_url": "https://github.com/rust-lang/rust/commit/2ef910f71ab83761b1f5f9144621f246622e92d8"}, {"sha": "89b0e6e12ba2fb24ec0e6655a1130c16eb8d1745", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b0e6e12ba2fb24ec0e6655a1130c16eb8d1745", "html_url": "https://github.com/rust-lang/rust/commit/89b0e6e12ba2fb24ec0e6655a1130c16eb8d1745"}], "stats": {"total": 1162, "additions": 321, "deletions": 841}, "files": [{"sha": "61c71b273cb07c275046c328f004127d09a5a4a6", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -2518,8 +2518,8 @@ valid types:\n trait Foo {}\n trait Bar<T> {}\n \n-fn sendable_foo(f: Box<Foo:Send>) { /* ... */ }\n-fn shareable_bar<T: Share>(b: &Bar<T>: Share) { /* ... */ }\n+fn sendable_foo(f: Box<Foo + Send>) { /* ... */ }\n+fn shareable_bar<T: Share>(b: &Bar<T> + Share) { /* ... */ }\n ~~~\n \n When no colon is specified (such as the type `~Foo`), it is inferred that the"}, {"sha": "fb5864745d055b9803549d9d3425096a6212d3e3", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -842,20 +842,6 @@ impl cmp::PartialEq for BitvSet {\n }\n \n impl fmt::Show for BitvSet {\n-    #[cfg(stage0)]\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(fmt, r\"\\{\"));\n-        let mut first = true;\n-        for n in self.iter() {\n-            if !first {\n-                try!(write!(fmt, \", \"));\n-            }\n-            try!(write!(fmt, \"{}\", n));\n-            first = false;\n-        }\n-        write!(fmt, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"{{\"));\n         let mut first = true;"}, {"sha": "4ae30348c3a921d8cebf8d8c8da119f062d00ab7", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -185,18 +185,6 @@ impl<V:Clone> SmallIntMap<V> {\n }\n \n impl<V: fmt::Show> fmt::Show for SmallIntMap<V> {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, r\"\\{\"));\n-\n-        for (i, (k, v)) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{}: {}\", k, *v));\n-        }\n-\n-        write!(f, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n "}, {"sha": "02246c33317f135b08475ddd5713ff4e1ca2e1a9", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -76,18 +76,6 @@ impl<K: PartialOrd + Ord, V: PartialOrd> PartialOrd for TreeMap<K, V> {\n }\n \n impl<K: Ord + Show, V: Show> Show for TreeMap<K, V> {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, r\"\\{\"));\n-\n-        for (i, (k, v)) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{}: {}\", *k, *v));\n-        }\n-\n-        write!(f, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n \n@@ -586,18 +574,6 @@ impl<T: PartialOrd + Ord> PartialOrd for TreeSet<T> {\n }\n \n impl<T: Ord + Show> Show for TreeSet<T> {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, r\"\\{\"));\n-\n-        for (i, x) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{}\", *x));\n-        }\n-\n-        write!(f, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n "}, {"sha": "d778f3b47a17017f2df926b567617ac2c4c510a6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -744,11 +744,6 @@ impl Show for () {\n }\n \n impl<T: Copy + Show> Show for Cell<T> {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        write!(f, r\"Cell \\{ value: {} \\}\", self.get())\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         write!(f, \"Cell {{ value: {} }}\", self.get())\n     }"}, {"sha": "388084b9ed8312a05aec0c4a092d3e9207f7b77f", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -15,9 +15,6 @@\n //! these can be statically allocated and are slightly optimized for the runtime\n \n \n-#[cfg(stage0)]\n-use option::Option;\n-\n #[doc(hidden)]\n pub enum Piece<'a> {\n     String(&'a str),\n@@ -28,8 +25,6 @@ pub enum Piece<'a> {\n pub struct Argument<'a> {\n     pub position: Position,\n     pub format: FormatSpec,\n-    #[cfg(stage0)]\n-    pub method: Option<uint>,\n }\n \n #[doc(hidden)]"}, {"sha": "dc43f96b55987e97346d78749fc0de671bc378f8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -100,10 +100,6 @@ pub trait TyVisitor {\n \n     fn visit_char(&mut self) -> bool;\n \n-    #[cfg(stage0)]\n-    fn visit_estr_box(&mut self) -> bool;\n-    #[cfg(stage0)]\n-    fn visit_estr_uniq(&mut self) -> bool;\n     fn visit_estr_slice(&mut self) -> bool;\n     fn visit_estr_fixed(&mut self, n: uint, sz: uint, align: uint) -> bool;\n \n@@ -112,10 +108,6 @@ pub trait TyVisitor {\n     fn visit_ptr(&mut self, mtbl: uint, inner: *TyDesc) -> bool;\n     fn visit_rptr(&mut self, mtbl: uint, inner: *TyDesc) -> bool;\n \n-    #[cfg(stage0)]\n-    fn visit_evec_box(&mut self, mtbl: uint, inner: *TyDesc) -> bool;\n-    #[cfg(stage0)]\n-    fn visit_evec_uniq(&mut self, mtbl: uint, inner: *TyDesc) -> bool;\n     fn visit_evec_slice(&mut self, mtbl: uint, inner: *TyDesc) -> bool;\n     fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,\n                         mtbl: uint, inner: *TyDesc) -> bool;"}, {"sha": "f281161113f001ae157766624d803c33666fa617", "filename": "src/libdebug/reflect.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -193,16 +193,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_estr_box(&mut self) -> bool {\n-        true\n-    }\n-\n-    #[cfg(stage0)]\n-    fn visit_estr_uniq(&mut self) -> bool {\n-        false\n-    }\n-\n     fn visit_estr_slice(&mut self) -> bool {\n         self.align_to::<&'static str>();\n         if ! self.inner.visit_estr_slice() { return false; }\n@@ -247,16 +237,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_evec_box(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool {\n-        true\n-    }\n-\n-    #[cfg(stage0)]\n-    fn visit_evec_uniq(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool {\n-        false\n-    }\n-\n     fn visit_evec_slice(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<&'static [u8]>();\n         if ! self.inner.visit_evec_slice(mtbl, inner) { return false; }"}, {"sha": "d27b0f0de7e30028745e7b789983afa8308900d9", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -269,16 +269,6 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         })\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_estr_box(&mut self) -> bool {\n-        false\n-    }\n-\n-    #[cfg(stage0)]\n-    fn visit_estr_uniq(&mut self) -> bool {\n-        false\n-    }\n-\n     fn visit_estr_slice(&mut self) -> bool {\n         self.get::<&str>(|this, s| this.write_escaped_slice(*s))\n     }\n@@ -320,16 +310,6 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n         })\n     }\n \n-    #[cfg(stage0)]\n-    fn visit_evec_box(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool {\n-        true\n-    }\n-\n-    #[cfg(stage0)]\n-    fn visit_evec_uniq(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool {\n-        true\n-    }\n-\n     fn visit_evec_slice(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n         self.get::<raw::Slice<()>>(|this, s| {\n             try!(this, this.writer.write(['&' as u8]));"}, {"sha": "2381626b7c87697d8cd0e97ebe8b12b7fc7fa9b2", "filename": "src/libgreen/basic.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibgreen%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibgreen%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fbasic.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -23,16 +23,16 @@ use std::rt::rtio::{PausableIdleCallback, Callback};\n use std::rt::exclusive::Exclusive;\n \n /// This is the only exported function from this module.\n-pub fn event_loop() -> Box<EventLoop:Send> {\n-    box BasicLoop::new() as Box<EventLoop:Send>\n+pub fn event_loop() -> Box<EventLoop + Send> {\n+    box BasicLoop::new() as Box<EventLoop + Send>\n }\n \n struct BasicLoop {\n-    work: Vec<proc():Send>,             // pending work\n-    remotes: Vec<(uint, Box<Callback:Send>)>,\n+    work: Vec<proc(): Send>,             // pending work\n+    remotes: Vec<(uint, Box<Callback + Send>)>,\n     next_remote: uint,\n     messages: Arc<Exclusive<Vec<Message>>>,\n-    idle: Option<Box<Callback:Send>>,\n+    idle: Option<Box<Callback + Send>>,\n     idle_active: Option<Arc<atomics::AtomicBool>>,\n }\n \n@@ -132,22 +132,22 @@ impl EventLoop for BasicLoop {\n     }\n \n     // FIXME: Seems like a really weird requirement to have an event loop provide.\n-    fn pausable_idle_callback(&mut self, cb: Box<Callback:Send>)\n-                              -> Box<PausableIdleCallback:Send> {\n+    fn pausable_idle_callback(&mut self, cb: Box<Callback + Send>)\n+                              -> Box<PausableIdleCallback + Send> {\n         rtassert!(self.idle.is_none());\n         self.idle = Some(cb);\n         let a = Arc::new(atomics::AtomicBool::new(true));\n         self.idle_active = Some(a.clone());\n-        box BasicPausable { active: a } as Box<PausableIdleCallback:Send>\n+        box BasicPausable { active: a } as Box<PausableIdleCallback + Send>\n     }\n \n-    fn remote_callback(&mut self, f: Box<Callback:Send>)\n-                       -> Box<RemoteCallback:Send> {\n+    fn remote_callback(&mut self, f: Box<Callback + Send>)\n+                       -> Box<RemoteCallback + Send> {\n         let id = self.next_remote;\n         self.next_remote += 1;\n         self.remotes.push((id, f));\n         box BasicRemote::new(self.messages.clone(), id) as\n-            Box<RemoteCallback:Send>\n+            Box<RemoteCallback + Send>\n     }\n \n     fn io<'a>(&'a mut self) -> Option<&'a mut IoFactory> { None }"}, {"sha": "6c3ad8a6ef9611c63ac92007512aa06ae836d29d", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -288,7 +288,7 @@ macro_rules! green_start( ($f:ident) => (\n /// The return value is used as the process return code. 0 on success, 101 on\n /// error.\n pub fn start(argc: int, argv: **u8,\n-             event_loop_factory: fn() -> Box<rtio::EventLoop:Send>,\n+             event_loop_factory: fn() -> Box<rtio::EventLoop + Send>,\n              main: proc():Send) -> int {\n     rt::init(argc, argv);\n     let mut main = Some(main);\n@@ -309,7 +309,7 @@ pub fn start(argc: int, argv: **u8,\n ///\n /// This function will not return until all schedulers in the associated pool\n /// have returned.\n-pub fn run(event_loop_factory: fn() -> Box<rtio::EventLoop:Send>,\n+pub fn run(event_loop_factory: fn() -> Box<rtio::EventLoop + Send>,\n            main: proc():Send) -> int {\n     // Create a scheduler pool and spawn the main task into this pool. We will\n     // get notified over a channel when the main task exits.\n@@ -340,7 +340,7 @@ pub struct PoolConfig {\n     pub threads: uint,\n     /// A factory function used to create new event loops. If this is not\n     /// specified then the default event loop factory is used.\n-    pub event_loop_factory: fn() -> Box<rtio::EventLoop:Send>,\n+    pub event_loop_factory: fn() -> Box<rtio::EventLoop + Send>,\n }\n \n impl PoolConfig {\n@@ -365,7 +365,7 @@ pub struct SchedPool {\n     stack_pool: StackPool,\n     deque_pool: deque::BufferPool<Box<task::GreenTask>>,\n     sleepers: SleeperList,\n-    factory: fn() -> Box<rtio::EventLoop:Send>,\n+    factory: fn() -> Box<rtio::EventLoop + Send>,\n     task_state: TaskState,\n     tasks_done: Receiver<()>,\n }"}, {"sha": "75af52ac6804c9886ae6bce3eaf1d58d2bc39bfa", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -83,7 +83,7 @@ pub struct Scheduler {\n     /// A fast XorShift rng for scheduler use\n     rng: XorShiftRng,\n     /// A toggleable idle callback\n-    idle_callback: Option<Box<PausableIdleCallback:Send>>,\n+    idle_callback: Option<Box<PausableIdleCallback + Send>>,\n     /// A countdown that starts at a random value and is decremented\n     /// every time a yield check is performed. When it hits 0 a task\n     /// will yield.\n@@ -100,7 +100,7 @@ pub struct Scheduler {\n     //      destroyed before it's actually destroyed.\n \n     /// The event loop used to drive the scheduler and perform I/O\n-    pub event_loop: Box<EventLoop:Send>,\n+    pub event_loop: Box<EventLoop + Send>,\n }\n \n /// An indication of how hard to work on a given operation, the difference\n@@ -123,7 +123,7 @@ impl Scheduler {\n     // * Initialization Functions\n \n     pub fn new(pool_id: uint,\n-               event_loop: Box<EventLoop:Send>,\n+               event_loop: Box<EventLoop + Send>,\n                work_queue: deque::Worker<Box<GreenTask>>,\n                work_queues: Vec<deque::Stealer<Box<GreenTask>>>,\n                sleeper_list: SleeperList,\n@@ -136,7 +136,7 @@ impl Scheduler {\n     }\n \n     pub fn new_special(pool_id: uint,\n-                       event_loop: Box<EventLoop:Send>,\n+                       event_loop: Box<EventLoop + Send>,\n                        work_queue: deque::Worker<Box<GreenTask>>,\n                        work_queues: Vec<deque::Stealer<Box<GreenTask>>>,\n                        sleeper_list: SleeperList,\n@@ -183,7 +183,7 @@ impl Scheduler {\n     pub fn bootstrap(mut ~self) {\n \n         // Build an Idle callback.\n-        let cb = box SchedRunner as Box<Callback:Send>;\n+        let cb = box SchedRunner as Box<Callback + Send>;\n         self.idle_callback = Some(self.event_loop.pausable_idle_callback(cb));\n \n         // Create a task for the scheduler with an empty context.\n@@ -231,7 +231,7 @@ impl Scheduler {\n         // mutable reference to the event_loop to give it the \"run\"\n         // command.\n         unsafe {\n-            let event_loop: *mut Box<EventLoop:Send> = &mut self.event_loop;\n+            let event_loop: *mut Box<EventLoop + Send> = &mut self.event_loop;\n             // Our scheduler must be in the task before the event loop\n             // is started.\n             stask.put_with_sched(self);\n@@ -904,7 +904,7 @@ pub enum SchedMessage {\n }\n \n pub struct SchedHandle {\n-    remote: Box<RemoteCallback:Send>,\n+    remote: Box<RemoteCallback + Send>,\n     queue: msgq::Producer<SchedMessage>,\n     pub sched_id: uint\n }"}, {"sha": "90a186f59d2d8b74a13cb6d938f923e08141d714", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -155,7 +155,7 @@ pub static WARN: u32 = 2;\n /// Error log level\n pub static ERROR: u32 = 1;\n \n-local_data_key!(local_logger: Box<Logger:Send>)\n+local_data_key!(local_logger: Box<Logger + Send>)\n \n /// A trait used to represent an interface to a task-local logger. Each task\n /// can have its own custom logger which can respond to logging messages\n@@ -226,7 +226,7 @@ pub fn log(level: u32, loc: &'static LogLocation, args: &fmt::Arguments) {\n     // frob the slot while we're doing the logging. This will destroy any logger\n     // set during logging.\n     let mut logger = local_logger.replace(None).unwrap_or_else(|| {\n-        box DefaultLogger { handle: io::stderr() } as Box<Logger:Send>\n+        box DefaultLogger { handle: io::stderr() } as Box<Logger + Send>\n     });\n     logger.log(&LogRecord {\n         level: LogLevel(level),\n@@ -246,7 +246,7 @@ pub fn log_level() -> u32 { unsafe { LOG_LEVEL } }\n \n /// Replaces the task-local logger with the specified logger, returning the old\n /// logger.\n-pub fn set_logger(logger: Box<Logger:Send>) -> Option<Box<Logger:Send>> {\n+pub fn set_logger(logger: Box<Logger + Send>) -> Option<Box<Logger + Send>> {\n     local_logger.replace(Some(logger))\n }\n "}, {"sha": "6472356ea164171b2453bccddf5ad98edc14dab4", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -168,8 +168,8 @@ impl rtio::RtioPipe for FileDesc {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         self.inner_write(buf)\n     }\n-    fn clone(&self) -> Box<rtio::RtioPipe:Send> {\n-        box FileDesc { inner: self.inner.clone() } as Box<rtio::RtioPipe:Send>\n+    fn clone(&self) -> Box<rtio::RtioPipe + Send> {\n+        box FileDesc { inner: self.inner.clone() } as Box<rtio::RtioPipe + Send>\n     }\n \n     // Only supported on named pipes currently. Note that this doesn't have an"}, {"sha": "41ef5e31a91f65cad24549a9bd3c649c0921083e", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -201,8 +201,8 @@ impl rtio::RtioPipe for FileDesc {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n         self.inner_write(buf)\n     }\n-    fn clone(&self) -> Box<rtio::RtioPipe:Send> {\n-        box FileDesc { inner: self.inner.clone() } as Box<rtio::RtioPipe:Send>\n+    fn clone(&self) -> Box<rtio::RtioPipe + Send> {\n+        box FileDesc { inner: self.inner.clone() } as Box<rtio::RtioPipe + Send>\n     }\n \n     // Only supported on named pipes currently. Note that this doesn't have an"}, {"sha": "32775e2cfb58cd8dc89ebee6838c0d3de3c9e6aa", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -167,34 +167,34 @@ impl rtio::IoFactory for IoFactory {\n     // networking\n     fn tcp_connect(&mut self, addr: rtio::SocketAddr,\n                    timeout: Option<u64>)\n-        -> IoResult<Box<rtio::RtioTcpStream:Send>>\n+        -> IoResult<Box<rtio::RtioTcpStream + Send>>\n     {\n         net::TcpStream::connect(addr, timeout).map(|s| {\n-            box s as Box<rtio::RtioTcpStream:Send>\n+            box s as Box<rtio::RtioTcpStream + Send>\n         })\n     }\n     fn tcp_bind(&mut self, addr: rtio::SocketAddr)\n-                -> IoResult<Box<rtio::RtioTcpListener:Send>> {\n+                -> IoResult<Box<rtio::RtioTcpListener + Send>> {\n         net::TcpListener::bind(addr).map(|s| {\n-            box s as Box<rtio::RtioTcpListener:Send>\n+            box s as Box<rtio::RtioTcpListener + Send>\n         })\n     }\n     fn udp_bind(&mut self, addr: rtio::SocketAddr)\n-                -> IoResult<Box<rtio::RtioUdpSocket:Send>> {\n+                -> IoResult<Box<rtio::RtioUdpSocket + Send>> {\n         net::UdpSocket::bind(addr).map(|u| {\n-            box u as Box<rtio::RtioUdpSocket:Send>\n+            box u as Box<rtio::RtioUdpSocket + Send>\n         })\n     }\n     fn unix_bind(&mut self, path: &CString)\n-                 -> IoResult<Box<rtio::RtioUnixListener:Send>> {\n+                 -> IoResult<Box<rtio::RtioUnixListener + Send>> {\n         pipe::UnixListener::bind(path).map(|s| {\n-            box s as Box<rtio::RtioUnixListener:Send>\n+            box s as Box<rtio::RtioUnixListener + Send>\n         })\n     }\n     fn unix_connect(&mut self, path: &CString,\n-                    timeout: Option<u64>) -> IoResult<Box<rtio::RtioPipe:Send>> {\n+                    timeout: Option<u64>) -> IoResult<Box<rtio::RtioPipe + Send>> {\n         pipe::UnixStream::connect(path, timeout).map(|s| {\n-            box s as Box<rtio::RtioPipe:Send>\n+            box s as Box<rtio::RtioPipe + Send>\n         })\n     }\n     fn get_host_addresses(&mut self, host: Option<&str>, servname: Option<&str>,\n@@ -206,18 +206,18 @@ impl rtio::IoFactory for IoFactory {\n \n     // filesystem operations\n     fn fs_from_raw_fd(&mut self, fd: c_int, close: rtio::CloseBehavior)\n-                      -> Box<rtio::RtioFileStream:Send> {\n+                      -> Box<rtio::RtioFileStream + Send> {\n         let close = match close {\n             rtio::CloseSynchronously | rtio::CloseAsynchronously => true,\n             rtio::DontClose => false\n         };\n-        box file::FileDesc::new(fd, close) as Box<rtio::RtioFileStream:Send>\n+        box file::FileDesc::new(fd, close) as Box<rtio::RtioFileStream + Send>\n     }\n     fn fs_open(&mut self, path: &CString, fm: rtio::FileMode,\n                fa: rtio::FileAccess)\n-        -> IoResult<Box<rtio::RtioFileStream:Send>>\n+        -> IoResult<Box<rtio::RtioFileStream + Send>>\n     {\n-        file::open(path, fm, fa).map(|fd| box fd as Box<rtio::RtioFileStream:Send>)\n+        file::open(path, fm, fa).map(|fd| box fd as Box<rtio::RtioFileStream + Send>)\n     }\n     fn fs_unlink(&mut self, path: &CString) -> IoResult<()> {\n         file::unlink(path)\n@@ -261,31 +261,31 @@ impl rtio::IoFactory for IoFactory {\n     }\n \n     // misc\n-    fn timer_init(&mut self) -> IoResult<Box<rtio::RtioTimer:Send>> {\n-        timer::Timer::new().map(|t| box t as Box<rtio::RtioTimer:Send>)\n+    fn timer_init(&mut self) -> IoResult<Box<rtio::RtioTimer + Send>> {\n+        timer::Timer::new().map(|t| box t as Box<rtio::RtioTimer + Send>)\n     }\n     fn spawn(&mut self, cfg: rtio::ProcessConfig)\n-            -> IoResult<(Box<rtio::RtioProcess:Send>,\n-                         Vec<Option<Box<rtio::RtioPipe:Send>>>)> {\n+            -> IoResult<(Box<rtio::RtioProcess + Send>,\n+                         Vec<Option<Box<rtio::RtioPipe + Send>>>)> {\n         process::Process::spawn(cfg).map(|(p, io)| {\n-            (box p as Box<rtio::RtioProcess:Send>,\n+            (box p as Box<rtio::RtioProcess + Send>,\n              io.move_iter().map(|p| p.map(|p| {\n-                 box p as Box<rtio::RtioPipe:Send>\n+                 box p as Box<rtio::RtioPipe + Send>\n              })).collect())\n         })\n     }\n     fn kill(&mut self, pid: libc::pid_t, signum: int) -> IoResult<()> {\n         process::Process::kill(pid, signum)\n     }\n-    fn pipe_open(&mut self, fd: c_int) -> IoResult<Box<rtio::RtioPipe:Send>> {\n-        Ok(box file::FileDesc::new(fd, true) as Box<rtio::RtioPipe:Send>)\n+    fn pipe_open(&mut self, fd: c_int) -> IoResult<Box<rtio::RtioPipe + Send>> {\n+        Ok(box file::FileDesc::new(fd, true) as Box<rtio::RtioPipe + Send>)\n     }\n     fn tty_open(&mut self, fd: c_int, _readable: bool)\n-                -> IoResult<Box<rtio::RtioTTY:Send>> {\n+                -> IoResult<Box<rtio::RtioTTY + Send>> {\n         #[cfg(unix)] use ERROR = libc::ENOTTY;\n         #[cfg(windows)] use ERROR = libc::ERROR_INVALID_HANDLE;\n         if unsafe { libc::isatty(fd) } != 0 {\n-            Ok(box file::FileDesc::new(fd, true) as Box<rtio::RtioTTY:Send>)\n+            Ok(box file::FileDesc::new(fd, true) as Box<rtio::RtioTTY + Send>)\n         } else {\n             Err(IoError {\n                 code: ERROR as uint,\n@@ -295,7 +295,7 @@ impl rtio::IoFactory for IoFactory {\n         }\n     }\n     fn signal(&mut self, _signal: int, _cb: Box<rtio::Callback>)\n-              -> IoResult<Box<rtio::RtioSignal:Send>> {\n+              -> IoResult<Box<rtio::RtioSignal + Send>> {\n         Err(unimpl())\n     }\n }"}, {"sha": "8cf0c3bf0620f82d72b7b0cb36f4847ee959424a", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -397,12 +397,12 @@ impl rtio::RtioTcpStream for TcpStream {\n         self.set_keepalive(None)\n     }\n \n-    fn clone(&self) -> Box<rtio::RtioTcpStream:Send> {\n+    fn clone(&self) -> Box<rtio::RtioTcpStream + Send> {\n         box TcpStream {\n             inner: self.inner.clone(),\n             read_deadline: 0,\n             write_deadline: 0,\n-        } as Box<rtio::RtioTcpStream:Send>\n+        } as Box<rtio::RtioTcpStream + Send>\n     }\n \n     fn close_write(&mut self) -> IoResult<()> {\n@@ -484,9 +484,9 @@ impl TcpListener {\n }\n \n impl rtio::RtioTcpListener for TcpListener {\n-    fn listen(~self) -> IoResult<Box<rtio::RtioTcpAcceptor:Send>> {\n+    fn listen(~self) -> IoResult<Box<rtio::RtioTcpAcceptor + Send>> {\n         self.native_listen(128).map(|a| {\n-            box a as Box<rtio::RtioTcpAcceptor:Send>\n+            box a as Box<rtio::RtioTcpAcceptor + Send>\n         })\n     }\n }\n@@ -533,8 +533,8 @@ impl rtio::RtioSocket for TcpAcceptor {\n }\n \n impl rtio::RtioTcpAcceptor for TcpAcceptor {\n-    fn accept(&mut self) -> IoResult<Box<rtio::RtioTcpStream:Send>> {\n-        self.native_accept().map(|s| box s as Box<rtio::RtioTcpStream:Send>)\n+    fn accept(&mut self) -> IoResult<Box<rtio::RtioTcpStream + Send>> {\n+        self.native_accept().map(|s| box s as Box<rtio::RtioTcpStream + Send>)\n     }\n \n     fn accept_simultaneously(&mut self) -> IoResult<()> { Ok(()) }\n@@ -720,12 +720,12 @@ impl rtio::RtioUdpSocket for UdpSocket {\n         self.set_broadcast(false)\n     }\n \n-    fn clone(&self) -> Box<rtio::RtioUdpSocket:Send> {\n+    fn clone(&self) -> Box<rtio::RtioUdpSocket + Send> {\n         box UdpSocket {\n             inner: self.inner.clone(),\n             read_deadline: 0,\n             write_deadline: 0,\n-        } as Box<rtio::RtioUdpSocket:Send>\n+        } as Box<rtio::RtioUdpSocket + Send>\n     }\n \n     fn set_timeout(&mut self, timeout: Option<u64>) {"}, {"sha": "db0d1743c7279c2222a4b844afbcbbb39737742f", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -179,8 +179,8 @@ impl rtio::RtioPipe for UnixStream {\n         }\n     }\n \n-    fn clone(&self) -> Box<rtio::RtioPipe:Send> {\n-        box UnixStream::new(self.inner.clone()) as Box<rtio::RtioPipe:Send>\n+    fn clone(&self) -> Box<rtio::RtioPipe + Send> {\n+        box UnixStream::new(self.inner.clone()) as Box<rtio::RtioPipe + Send>\n     }\n \n     fn close_write(&mut self) -> IoResult<()> {\n@@ -229,9 +229,9 @@ impl UnixListener {\n }\n \n impl rtio::RtioUnixListener for UnixListener {\n-    fn listen(~self) -> IoResult<Box<rtio::RtioUnixAcceptor:Send>> {\n+    fn listen(~self) -> IoResult<Box<rtio::RtioUnixAcceptor + Send>> {\n         self.native_listen(128).map(|a| {\n-            box a as Box<rtio::RtioUnixAcceptor:Send>\n+            box a as Box<rtio::RtioUnixAcceptor + Send>\n         })\n     }\n }\n@@ -264,8 +264,8 @@ impl UnixAcceptor {\n }\n \n impl rtio::RtioUnixAcceptor for UnixAcceptor {\n-    fn accept(&mut self) -> IoResult<Box<rtio::RtioPipe:Send>> {\n-        self.native_accept().map(|s| box s as Box<rtio::RtioPipe:Send>)\n+    fn accept(&mut self) -> IoResult<Box<rtio::RtioPipe + Send>> {\n+        self.native_accept().map(|s| box s as Box<rtio::RtioPipe + Send>)\n     }\n     fn set_timeout(&mut self, timeout: Option<u64>) {\n         self.deadline = timeout.map(|a| ::io::timer::now() + a).unwrap_or(0);"}, {"sha": "5d9ddb1f59c150dd389b0673c50fad7afc607ee2", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -496,14 +496,14 @@ impl rtio::RtioPipe for UnixStream {\n         Ok(())\n     }\n \n-    fn clone(&self) -> Box<rtio::RtioPipe:Send> {\n+    fn clone(&self) -> Box<rtio::RtioPipe + Send> {\n         box UnixStream {\n             inner: self.inner.clone(),\n             read: None,\n             write: None,\n             read_deadline: 0,\n             write_deadline: 0,\n-        } as Box<rtio::RtioPipe:Send>\n+        } as Box<rtio::RtioPipe + Send>\n     }\n \n     fn close_read(&mut self) -> IoResult<()> {\n@@ -588,9 +588,9 @@ impl Drop for UnixListener {\n }\n \n impl rtio::RtioUnixListener for UnixListener {\n-    fn listen(~self) -> IoResult<Box<rtio::RtioUnixAcceptor:Send>> {\n+    fn listen(~self) -> IoResult<Box<rtio::RtioUnixAcceptor + Send>> {\n         self.native_listen().map(|a| {\n-            box a as Box<rtio::RtioUnixAcceptor:Send>\n+            box a as Box<rtio::RtioUnixAcceptor + Send>\n         })\n     }\n }\n@@ -702,8 +702,8 @@ impl UnixAcceptor {\n }\n \n impl rtio::RtioUnixAcceptor for UnixAcceptor {\n-    fn accept(&mut self) -> IoResult<Box<rtio::RtioPipe:Send>> {\n-        self.native_accept().map(|s| box s as Box<rtio::RtioPipe:Send>)\n+    fn accept(&mut self) -> IoResult<Box<rtio::RtioPipe + Send>> {\n+        self.native_accept().map(|s| box s as Box<rtio::RtioPipe + Send>)\n     }\n     fn set_timeout(&mut self, timeout: Option<u64>) {\n         self.deadline = timeout.map(|i| i + ::io::timer::now()).unwrap_or(0);"}, {"sha": "304ff9738356eddccb2b1f48e713bef3dfb57379", "filename": "src/libnative/io/timer_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ftimer_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ftimer_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_unix.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -67,7 +67,7 @@ pub struct Timer {\n }\n \n struct Inner {\n-    cb: Option<Box<rtio::Callback:Send>>,\n+    cb: Option<Box<rtio::Callback + Send>>,\n     interval: u64,\n     repeat: bool,\n     target: u64,\n@@ -266,7 +266,7 @@ impl rtio::RtioTimer for Timer {\n         Timer::sleep(msecs);\n     }\n \n-    fn oneshot(&mut self, msecs: u64, cb: Box<rtio::Callback:Send>) {\n+    fn oneshot(&mut self, msecs: u64, cb: Box<rtio::Callback + Send>) {\n         let now = now();\n         let mut inner = self.inner();\n \n@@ -278,7 +278,7 @@ impl rtio::RtioTimer for Timer {\n         unsafe { HELPER.send(NewTimer(inner)); }\n     }\n \n-    fn period(&mut self, msecs: u64, cb: Box<rtio::Callback:Send>) {\n+    fn period(&mut self, msecs: u64, cb: Box<rtio::Callback + Send>) {\n         let now = now();\n         let mut inner = self.inner();\n "}, {"sha": "9be09c6de076284ba5a4233425236e1aa1c4c289", "filename": "src/libnative/io/timer_win32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ftimer_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibnative%2Fio%2Ftimer_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_win32.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -36,7 +36,7 @@ pub struct Timer {\n }\n \n pub enum Req {\n-    NewTimer(libc::HANDLE, Box<Callback:Send>, bool),\n+    NewTimer(libc::HANDLE, Box<Callback + Send>, bool),\n     RemoveTimer(libc::HANDLE, Sender<()>),\n }\n \n@@ -148,7 +148,7 @@ impl rtio::RtioTimer for Timer {\n         let _ = unsafe { imp::WaitForSingleObject(self.obj, libc::INFINITE) };\n     }\n \n-    fn oneshot(&mut self, msecs: u64, cb: Box<Callback:Send>) {\n+    fn oneshot(&mut self, msecs: u64, cb: Box<Callback + Send>) {\n         self.remove();\n \n         // see above for the calculation\n@@ -162,7 +162,7 @@ impl rtio::RtioTimer for Timer {\n         self.on_worker = true;\n     }\n \n-    fn period(&mut self, msecs: u64, cb: Box<Callback:Send>) {\n+    fn period(&mut self, msecs: u64, cb: Box<Callback + Send>) {\n         self.remove();\n \n         // see above for the calculation"}, {"sha": "2fea75746be732cd4b81620102e2610dc07b4dd2", "filename": "src/libregex/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibregex%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibregex%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse%2Fmod.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -635,11 +635,6 @@ impl<'a> Parser<'a> {\n             let closer =\n                 match self.pos('}') {\n                     Some(i) => i,\n-                    #[cfg(stage0)]\n-                    None => return self.err(format!(\n-                        \"Missing '\\\\}' for unclosed '\\\\{' at position {}\",\n-                        self.chari).as_slice()),\n-                    #[cfg(not(stage0))]\n                     None => return self.err(format!(\n                         \"Missing '}}' for unclosed '{{' at position {}\",\n                         self.chari).as_slice()),\n@@ -701,13 +696,6 @@ impl<'a> Parser<'a> {\n         let start = self.chari + 2;\n         let closer =\n             match self.pos('}') {\n-                #[cfg(stage0)]\n-                None => {\n-                    return self.err(format!(\"Missing '\\\\}' for unclosed \\\n-                                             '\\\\{' at position {}\",\n-                                            start).as_slice())\n-                }\n-                #[cfg(not(stage0))]\n                 None => {\n                     return self.err(format!(\"Missing '}}' for unclosed \\\n                                              '{{' at position {}\","}, {"sha": "30d0c6d0564f242b7624b802eb54c496126ba92a", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -108,16 +108,6 @@ struct Context<'a> {\n }\n \n impl<'a> Context<'a> {\n-    #[cfg(stage0)]\n-    fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n-        if !self.has_feature(feature) {\n-            self.sess.span_err(span, explain);\n-            self.sess.span_note(span, format!(\"add \\\\#![feature({})] to the \\\n-                                                  crate attributes to enable\",\n-                                                 feature).as_slice());\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n         if !self.has_feature(feature) {\n             self.sess.span_err(span, explain);"}, {"sha": "401d3fd9b244fa4f141d679a1108281ffd24623a", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -63,14 +63,6 @@ struct StandardLibraryInjector<'a> {\n pub fn with_version(krate: &str) -> Option<(InternedString, ast::StrStyle)> {\n     match option_env!(\"CFG_DISABLE_INJECT_STD_VERSION\") {\n         Some(\"1\") => None,\n-        #[cfg(stage0)]\n-        _ => {\n-            Some((token::intern_and_get_ident(format!(\"{}\\\\#{}\",\n-                                                      krate,\n-                                                      VERSION).as_slice()),\n-                  ast::CookedStr))\n-        }\n-        #[cfg(not(stage0))]\n         _ => {\n             Some((token::intern_and_get_ident(format!(\"{}#{}\",\n                                                       krate,"}, {"sha": "ed47649c6b22ad40a09b69f85c551c89e7c53e4a", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -154,15 +154,6 @@ impl<'a> Context<'a> {\n             }\n             match self.root {\n                 &None => {}\n-                #[cfg(stage0)]\n-                &Some(ref r) => {\n-                    for (i, path) in r.paths().iter().enumerate() {\n-                        self.sess.fileline_note(self.span,\n-                            format!(\"crate `{}` path \\\\#{}: {}\",\n-                                    r.ident, i+1, path.display()).as_slice());\n-                    }\n-                }\n-                #[cfg(not(stage0))]\n                 &Some(ref r) => {\n                     for (i, path) in r.paths().iter().enumerate() {\n                         self.sess.fileline_note(self.span,\n@@ -393,7 +384,7 @@ impl<'a> Context<'a> {\n                                            flavor,\n                                            self.crate_id.name).as_slice());\n                 self.sess.span_note(self.span,\n-                                    format!(r\"candidate \\#1: {}\",\n+                                    format!(r\"candidate #1: {}\",\n                                             ret.get_ref()\n                                                .display()).as_slice());\n                 error = 1;\n@@ -402,7 +393,7 @@ impl<'a> Context<'a> {\n             if error > 0 {\n                 error += 1;\n                 self.sess.span_note(self.span,\n-                                    format!(r\"candidate \\#{}: {}\", error,\n+                                    format!(r\"candidate #{}: {}\", error,\n                                             lib.display()).as_slice());\n                 continue\n             }"}, {"sha": "830178ee880829c2021a53902c9680d642d816f3", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -48,31 +48,6 @@ pub struct ty_abbrev {\n \n pub type abbrev_map = RefCell<HashMap<ty::t, ty_abbrev>>;\n \n-#[cfg(stage0)]\n-pub fn enc_ty(w: &mut MemWriter, cx: &ctxt, t: ty::t) {\n-    match cx.abbrevs.borrow_mut().find(&t) {\n-        Some(a) => { w.write(a.s.as_bytes()); return; }\n-        None => {}\n-    }\n-    let pos = w.tell().unwrap();\n-    enc_sty(w, cx, &ty::get(t).sty);\n-    let end = w.tell().unwrap();\n-    let len = end - pos;\n-    fn estimate_sz(u: u64) -> u64 {\n-        let mut n = u;\n-        let mut len = 0;\n-        while n != 0 { len += 1; n = n >> 4; }\n-        return len;\n-    }\n-    let abbrev_len = 3 + estimate_sz(pos) + estimate_sz(len);\n-    if abbrev_len < len {\n-        // I.e. it's actually an abbreviation.\n-        cx.abbrevs.borrow_mut().insert(t, ty_abbrev {\n-            s: format!(\"\\\\#{:x}:{:x}\\\\#\", pos, len)\n-        });\n-    }\n-}\n-#[cfg(not(stage0))]\n pub fn enc_ty(w: &mut MemWriter, cx: &ctxt, t: ty::t) {\n     match cx.abbrevs.borrow_mut().find(&t) {\n         Some(a) => { w.write(a.s.as_bytes()); return; }"}, {"sha": "392821a6ad381f04748d909579df2c1ce9bd9fca", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -484,12 +484,6 @@ pub fn emit_lint(level: Level, src: LintSource, msg: &str, span: Span,\n \n     let mut note = None;\n     let msg = match src {\n-        #[cfg(stage0)]\n-        Default => {\n-            format!(\"{}, \\\\#[{}({})] on by default\", msg,\n-                level_to_str(level), lint_str)\n-        },\n-        #[cfg(not(stage0))]\n         Default => {\n             format!(\"{}, #[{}({})] on by default\", msg,\n                 level_to_str(level), lint_str)"}, {"sha": "f2a29d14a0d4db8eefb39f3a11e91a1e9731e5b6", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -1253,15 +1253,6 @@ impl cmt_ {\n }\n \n impl Repr for cmt_ {\n-    #[cfg(stage0)]\n-    fn repr(&self, tcx: &ty::ctxt) -> String {\n-        format!(\"\\\\{{} id:{} m:{:?} ty:{}\\\\}\",\n-                self.cat.repr(tcx),\n-                self.id,\n-                self.mutbl,\n-                self.ty.repr(tcx))\n-    }\n-    #[cfg(not(stage0))]\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         format!(\"{{{} id:{} m:{:?} ty:{}}}\",\n                 self.cat.repr(tcx),\n@@ -1315,9 +1306,6 @@ impl Repr for InteriorKind {\n             InteriorField(NamedField(fld)) => {\n                 token::get_name(fld).get().to_str()\n             }\n-            #[cfg(stage0)]\n-            InteriorField(PositionalField(i)) => format!(\"\\\\#{:?}\", i),\n-            #[cfg(not(stage0))]\n             InteriorField(PositionalField(i)) => format!(\"#{:?}\", i),\n             InteriorElement(_) => \"[]\".to_string(),\n         }"}, {"sha": "40a6713fe0ca2dda9ab66e40534979f5c71677ff", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -642,10 +642,6 @@ impl<'a> PrivacyVisitor<'a> {\n         let msg = match name {\n             NamedField(name) => format!(\"field `{}` of {} is private\",\n                                         token::get_ident(name), struct_desc),\n-            #[cfg(stage0)]\n-            UnnamedField(idx) => format!(\"field \\\\#{} of {} is private\",\n-                                         idx + 1, struct_desc),\n-            #[cfg(not(stage0))]\n             UnnamedField(idx) => format!(\"field #{} of {} is private\",\n                                          idx + 1, struct_desc),\n         };"}, {"sha": "23ff1ff394acc7ed418b9f4b42a6ee6ab7f54ba2", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -4070,16 +4070,6 @@ impl<'a> Resolver<'a> {\n \n             for (&key, &binding_0) in map_0.iter() {\n                 match map_i.find(&key) {\n-                  #[cfg(stage0)]\n-                  None => {\n-                    self.resolve_error(\n-                        p.span,\n-                        format!(\"variable `{}` from pattern \\\\#1 is \\\n-                                  not bound in pattern \\\\#{}\",\n-                                token::get_name(key),\n-                                i + 1).as_slice());\n-                  }\n-                  #[cfg(not(stage0))]\n                   None => {\n                     self.resolve_error(\n                         p.span,\n@@ -4088,18 +4078,6 @@ impl<'a> Resolver<'a> {\n                                 token::get_name(key),\n                                 i + 1).as_slice());\n                   }\n-                  #[cfg(stage0)]\n-                  Some(binding_i) => {\n-                    if binding_0.binding_mode != binding_i.binding_mode {\n-                        self.resolve_error(\n-                            binding_i.span,\n-                            format!(\"variable `{}` is bound with different \\\n-                                      mode in pattern \\\\#{} than in pattern \\\\#1\",\n-                                    token::get_name(key),\n-                                    i + 1).as_slice());\n-                    }\n-                  }\n-                  #[cfg(not(stage0))]\n                   Some(binding_i) => {\n                     if binding_0.binding_mode != binding_i.binding_mode {\n                         self.resolve_error(\n@@ -5107,22 +5085,6 @@ impl<'a> Resolver<'a> {\n                         // structs, which wouldn't result in this error.)\n                         match self.with_no_errors(|this|\n                             this.resolve_path(expr.id, path, TypeNS, false)) {\n-                            #[cfg(stage0)]\n-                            Some((DefTy(struct_id), _))\n-                              if self.structs.contains_key(&struct_id) => {\n-                                self.resolve_error(expr.span,\n-                                        format!(\"`{}` is a structure name, but \\\n-                                                 this expression \\\n-                                                 uses it like a function name\",\n-                                                wrong_name).as_slice());\n-\n-                                self.session.span_note(expr.span,\n-                                    format!(\"Did you mean to write: \\\n-                                            `{} \\\\{ /* fields */ \\\\}`?\",\n-                                            wrong_name).as_slice());\n-\n-                            }\n-                            #[cfg(not(stage0))]\n                             Some((DefTy(struct_id), _))\n                               if self.structs.contains_key(&struct_id) => {\n                                 self.resolve_error(expr.span,"}, {"sha": "65bf0b8500821d820a9e87ade08fab792fd5d4f1", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -73,16 +73,6 @@ pub struct VecTypes {\n }\n \n impl VecTypes {\n-    #[cfg(stage0)]\n-    pub fn to_str(&self, ccx: &CrateContext) -> String {\n-        format!(\"VecTypes \\\\{unit_ty={}, llunit_ty={}, \\\n-                 llunit_size={}, llunit_alloc_size={}\\\\}\",\n-                ty_to_str(ccx.tcx(), self.unit_ty),\n-                ccx.tn.type_to_str(self.llunit_ty),\n-                ccx.tn.val_to_str(self.llunit_size),\n-                self.llunit_alloc_size)\n-    }\n-    #[cfg(not(stage0))]\n     pub fn to_str(&self, ccx: &CrateContext) -> String {\n         format!(\"VecTypes {{unit_ty={}, llunit_ty={}, \\\n                  llunit_size={}, llunit_alloc_size={}}}\","}, {"sha": "3ac1027221b6191b4563760296d8aa4549fe9d48", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -899,11 +899,6 @@ impl Vid for TyVid {\n }\n \n impl fmt::Show for TyVid {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result{\n-        write!(f, \"<generic \\\\#{}>\", self.to_uint())\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result{\n         write!(f, \"<generic #{}>\", self.to_uint())\n     }\n@@ -914,11 +909,6 @@ impl Vid for IntVid {\n }\n \n impl fmt::Show for IntVid {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"<generic integer \\\\#{}>\", self.to_uint())\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"<generic integer #{}>\", self.to_uint())\n     }\n@@ -929,11 +919,6 @@ impl Vid for FloatVid {\n }\n \n impl fmt::Show for FloatVid {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"<generic float \\\\#{}>\", self.to_uint())\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"<generic float #{}>\", self.to_uint())\n     }"}, {"sha": "864de344db2cdd12ccdd42ef0db2c24a6824fbcb", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -1412,40 +1412,6 @@ impl<'a> LookupContext<'a> {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    fn report_static_candidate(&self, idx: uint, did: DefId) {\n-        let span = if did.krate == ast::LOCAL_CRATE {\n-            self.tcx().map.span(did.node)\n-        } else {\n-            self.span\n-        };\n-        self.tcx().sess.span_note(\n-            span,\n-            format!(\"candidate \\\\#{} is `{}`\",\n-                    idx + 1u,\n-                    ty::item_path_str(self.tcx(), did)).as_slice());\n-    }\n-\n-    #[cfg(stage0)]\n-    fn report_param_candidate(&self, idx: uint, did: DefId) {\n-        self.tcx().sess.span_note(\n-            self.span,\n-            format!(\"candidate \\\\#{} derives from the bound `{}`\",\n-                    idx + 1u,\n-                    ty::item_path_str(self.tcx(), did)).as_slice());\n-    }\n-\n-    #[cfg(stage0)]\n-    fn report_trait_candidate(&self, idx: uint, did: DefId) {\n-        self.tcx().sess.span_note(\n-            self.span,\n-            format!(\"candidate \\\\#{} derives from the type of the receiver, \\\n-                     which is the trait `{}`\",\n-                    idx + 1u,\n-                    ty::item_path_str(self.tcx(), did)).as_slice());\n-    }\n-\n-    #[cfg(not(stage0))]\n     fn report_static_candidate(&self, idx: uint, did: DefId) {\n         let span = if did.krate == ast::LOCAL_CRATE {\n             self.tcx().map.span(did.node)\n@@ -1459,7 +1425,6 @@ impl<'a> LookupContext<'a> {\n                     ty::item_path_str(self.tcx(), did)).as_slice());\n     }\n \n-    #[cfg(not(stage0))]\n     fn report_param_candidate(&self, idx: uint, did: DefId) {\n         self.tcx().sess.span_note(\n             self.span,\n@@ -1468,7 +1433,6 @@ impl<'a> LookupContext<'a> {\n                     ty::item_path_str(self.tcx(), did)).as_slice());\n     }\n \n-    #[cfg(not(stage0))]\n     fn report_trait_candidate(&self, idx: uint, did: DefId) {\n         self.tcx().sess.span_note(\n             self.span,"}, {"sha": "097c5dcfedaa34a5cc81af93ff2e5acd41b69a1c", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -61,11 +61,6 @@ impl<V:InferStr> InferStr for Bound<V> {\n }\n \n impl<T:InferStr> InferStr for Bounds<T> {\n-    #[cfg(stage0)]\n-    fn inf_str(&self, cx: &InferCtxt) -> String {\n-        format!(\"\\\\{{} <: {}\\\\}\", self.lb.inf_str(cx), self.ub.inf_str(cx))\n-    }\n-    #[cfg(not(stage0))]\n     fn inf_str(&self, cx: &InferCtxt) -> String {\n         format!(\"{{{} <: {}}}\", self.lb.inf_str(cx), self.ub.inf_str(cx))\n     }"}, {"sha": "aac0b12e46f146cde21fdd5a464611b940f2d59b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -96,11 +96,6 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n \n       ReFree(ref fr) => {\n         let prefix = match fr.bound_region {\n-          #[cfg(stage0)]\n-          BrAnon(idx) => {\n-              format!(\"the anonymous lifetime \\\\#{} defined on\", idx + 1)\n-          }\n-          #[cfg(not(stage0))]\n           BrAnon(idx) => {\n               format!(\"the anonymous lifetime #{} defined on\", idx + 1)\n           }\n@@ -381,9 +376,6 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> String {\n               Some(def) => token::get_ident(def.ident).get().to_string(),\n               // This can only happen when a type mismatch error happens and\n               // the actual type has more type parameters than the expected one.\n-              #[cfg(stage0)]\n-              None => format!(\"<generic \\\\#{}>\", id),\n-              #[cfg(not(stage0))]\n               None => format!(\"<generic #{}>\", id),\n           };\n           if !cx.sess.verbose() {\n@@ -758,13 +750,6 @@ impl Repr for ast::DefId {\n }\n \n impl Repr for ty::ty_param_bounds_and_ty {\n-    #[cfg(stage0)]\n-    fn repr(&self, tcx: &ctxt) -> String {\n-        format!(\"ty_param_bounds_and_ty \\\\{generics: {}, ty: {}\\\\}\",\n-                self.generics.repr(tcx),\n-                self.ty.repr(tcx))\n-    }\n-    #[cfg(not(stage0))]\n     fn repr(&self, tcx: &ctxt) -> String {\n         format!(\"ty_param_bounds_and_ty {{generics: {}, ty: {}}}\",\n                 self.generics.repr(tcx),\n@@ -836,14 +821,6 @@ impl Repr for ast::Visibility {\n }\n \n impl Repr for ty::BareFnTy {\n-    #[cfg(stage0)]\n-    fn repr(&self, tcx: &ctxt) -> String {\n-        format!(\"BareFnTy \\\\{fn_style: {:?}, abi: {}, sig: {}\\\\}\",\n-                self.fn_style,\n-                self.abi.to_str(),\n-                self.sig.repr(tcx))\n-    }\n-    #[cfg(not(stage0))]\n     fn repr(&self, tcx: &ctxt) -> String {\n         format!(\"BareFnTy {{fn_style: {:?}, abi: {}, sig: {}}}\",\n                 self.fn_style,\n@@ -859,14 +836,6 @@ impl Repr for ty::FnSig {\n }\n \n impl Repr for typeck::MethodCallee {\n-    #[cfg(stage0)]\n-    fn repr(&self, tcx: &ctxt) -> String {\n-        format!(\"MethodCallee \\\\{origin: {}, ty: {}, {}\\\\}\",\n-                self.origin.repr(tcx),\n-                self.ty.repr(tcx),\n-                self.substs.repr(tcx))\n-    }\n-    #[cfg(not(stage0))]\n     fn repr(&self, tcx: &ctxt) -> String {\n         format!(\"MethodCallee {{origin: {}, ty: {}, {}}}\",\n                 self.origin.repr(tcx),"}, {"sha": "29d1be888249bb7706f1f1c9e4b907f81c3a91cc", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -91,7 +91,6 @@ impl fmt::Show for clean::Generics {\n \n impl fmt::Show for clean::Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(f.write(\"'\".as_bytes()));\n         try!(f.write(self.get_ref().as_bytes()));\n         Ok(())\n     }"}, {"sha": "f0d7b029debdc7cbc47af2252e973aca5884dceb", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -126,7 +126,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n             // span when we see the ']'.\n             t::POUND => {\n                 is_attribute = true;\n-                try!(write!(out, r\"<span class='attribute'>\\#\"));\n+                try!(write!(out, r\"<span class='attribute'>#\"));\n                 continue\n             }\n             t::RBRACKET => {"}, {"sha": "f48a93574e7e75715dacb3fd4aea5862b2936d1b", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -86,7 +86,7 @@ r##\"<!DOCTYPE html>\n                 <dd>Move up in search results</dd>\n                 <dt>&darr;</dt>\n                 <dd>Move down in search results</dd>\n-                <dt>&\\#9166;</dt>\n+                <dt>&#9166;</dt>\n                 <dd>Go to active search result</dd>\n             </dl>\n         </div>"}, {"sha": "ceb7bbbc23e7c06033e62664fe8613da32da4c56", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -259,8 +259,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         };\n \n         // Render the HTML\n-        let text = format!(r#\"<h{lvl} id=\"{id}\" class='section-header'><a\n-                           href=\"\\#{id}\">{sec}{}</a></h{lvl}>\"#,\n+        let text = format!(r##\"<h{lvl} id=\"{id}\" class='section-header'><a\n+                           href=\"#{id}\">{sec}{}</a></h{lvl}>\"##,\n                            s, lvl = level, id = id,\n                            sec = if sec.len() == 0 {\n                                sec.to_string()"}, {"sha": "45c75ccd1ab42df0bff008f5e3b04e31b3960160", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -179,7 +179,7 @@ impl fmt::Show for Toc {\n             // recursively format this table of contents (the\n             // `{children}` is the key).\n             try!(write!(fmt,\n-                        \"\\n<li><a href=\\\"\\\\#{id}\\\">{num} {name}</a>{children}</li>\",\n+                        \"\\n<li><a href=\\\"#{id}\\\">{num} {name}</a>{children}</li>\",\n                         id = entry.id,\n                         num = entry.sec_number, name = entry.name,\n                         children = entry.children))"}, {"sha": "907d9fc7561d400eae83a41c513fe31c46f0dfcf", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -136,7 +136,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     let old = io::stdio::set_stderr(box w1);\n     spawn(proc() {\n         let mut p = io::ChanReader::new(rx);\n-        let mut err = old.unwrap_or(box io::stderr() as Box<Writer:Send>);\n+        let mut err = old.unwrap_or(box io::stderr() as Box<Writer + Send>);\n         io::util::copy(&mut p, &mut err).unwrap();\n     });\n     let emitter = diagnostic::EmitterWriter::new(box w2);"}, {"sha": "2e7c3ef37b9dc60a063f56359f08d5d974e72cb8", "filename": "src/librustrt/local_data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_data.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -91,7 +91,7 @@ impl<T: 'static> LocalData for T {}\n //      a proper map.\n #[doc(hidden)]\n pub type Map = Vec<Option<(*u8, TLSValue, uint)>>;\n-type TLSValue = Box<LocalData:Send>;\n+type TLSValue = Box<LocalData + Send>;\n \n // Gets the map from the runtime. Lazily initialises if not done so already.\n unsafe fn get_local_map() -> Option<&mut Map> {\n@@ -175,7 +175,7 @@ impl<T: 'static> KeyValue<T> {\n         // anything.\n         let newval = data.map(|d| {\n             let d = box d as Box<LocalData>;\n-            let d: Box<LocalData:Send> = unsafe { mem::transmute(d) };\n+            let d: Box<LocalData + Send> = unsafe { mem::transmute(d) };\n             (keyval, d, 0)\n         });\n \n@@ -236,7 +236,7 @@ impl<T: 'static> KeyValue<T> {\n             // pointer part of the trait, (as ~T), and then use\n             // compiler coercions to achieve a '&' pointer.\n             let ptr = unsafe {\n-                let data = data as *Box<LocalData:Send> as *raw::TraitObject;\n+                let data = data as *Box<LocalData + Send> as *raw::TraitObject;\n                 &mut *((*data).data as *mut T)\n             };\n             Ref { _ptr: ptr, _index: pos, _nosend: marker::NoSend, _key: self }"}, {"sha": "a68d453b77d89e48011f826e883dfcc0e6e5abd8", "filename": "src/librustrt/rtio.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Frtio.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -25,11 +25,11 @@ use task::Task;\n \n pub trait EventLoop {\n     fn run(&mut self);\n-    fn callback(&mut self, arg: proc():Send);\n-    fn pausable_idle_callback(&mut self, Box<Callback:Send>)\n-                              -> Box<PausableIdleCallback:Send>;\n-    fn remote_callback(&mut self, Box<Callback:Send>)\n-                       -> Box<RemoteCallback:Send>;\n+    fn callback(&mut self, arg: proc(): Send);\n+    fn pausable_idle_callback(&mut self, Box<Callback + Send>)\n+                              -> Box<PausableIdleCallback + Send>;\n+    fn remote_callback(&mut self, Box<Callback + Send>)\n+                       -> Box<RemoteCallback + Send>;\n \n     /// The asynchronous I/O services. Not all event loops may provide one.\n     fn io<'a>(&'a mut self) -> Option<&'a mut IoFactory>;\n@@ -189,24 +189,24 @@ impl<'a> LocalIo<'a> {\n pub trait IoFactory {\n     // networking\n     fn tcp_connect(&mut self, addr: SocketAddr,\n-                   timeout: Option<u64>) -> IoResult<Box<RtioTcpStream:Send>>;\n+                   timeout: Option<u64>) -> IoResult<Box<RtioTcpStream + Send>>;\n     fn tcp_bind(&mut self, addr: SocketAddr)\n-                -> IoResult<Box<RtioTcpListener:Send>>;\n+                -> IoResult<Box<RtioTcpListener + Send>>;\n     fn udp_bind(&mut self, addr: SocketAddr)\n-                -> IoResult<Box<RtioUdpSocket:Send>>;\n+                -> IoResult<Box<RtioUdpSocket + Send>>;\n     fn unix_bind(&mut self, path: &CString)\n-                 -> IoResult<Box<RtioUnixListener:Send>>;\n+                 -> IoResult<Box<RtioUnixListener + Send>>;\n     fn unix_connect(&mut self, path: &CString,\n-                    timeout: Option<u64>) -> IoResult<Box<RtioPipe:Send>>;\n+                    timeout: Option<u64>) -> IoResult<Box<RtioPipe + Send>>;\n     fn get_host_addresses(&mut self, host: Option<&str>, servname: Option<&str>,\n                           hint: Option<AddrinfoHint>)\n                           -> IoResult<Vec<AddrinfoInfo>>;\n \n     // filesystem operations\n     fn fs_from_raw_fd(&mut self, fd: c_int, close: CloseBehavior)\n-                      -> Box<RtioFileStream:Send>;\n+                      -> Box<RtioFileStream + Send>;\n     fn fs_open(&mut self, path: &CString, fm: FileMode, fa: FileAccess)\n-               -> IoResult<Box<RtioFileStream:Send>>;\n+               -> IoResult<Box<RtioFileStream + Send>>;\n     fn fs_unlink(&mut self, path: &CString) -> IoResult<()>;\n     fn fs_stat(&mut self, path: &CString) -> IoResult<FileStat>;\n     fn fs_mkdir(&mut self, path: &CString, mode: uint) -> IoResult<()>;\n@@ -225,24 +225,24 @@ pub trait IoFactory {\n         IoResult<()>;\n \n     // misc\n-    fn timer_init(&mut self) -> IoResult<Box<RtioTimer:Send>>;\n+    fn timer_init(&mut self) -> IoResult<Box<RtioTimer + Send>>;\n     fn spawn(&mut self, cfg: ProcessConfig)\n-            -> IoResult<(Box<RtioProcess:Send>,\n-                         Vec<Option<Box<RtioPipe:Send>>>)>;\n+            -> IoResult<(Box<RtioProcess + Send>,\n+                         Vec<Option<Box<RtioPipe + Send>>>)>;\n     fn kill(&mut self, pid: libc::pid_t, signal: int) -> IoResult<()>;\n-    fn pipe_open(&mut self, fd: c_int) -> IoResult<Box<RtioPipe:Send>>;\n+    fn pipe_open(&mut self, fd: c_int) -> IoResult<Box<RtioPipe + Send>>;\n     fn tty_open(&mut self, fd: c_int, readable: bool)\n-            -> IoResult<Box<RtioTTY:Send>>;\n-    fn signal(&mut self, signal: int, cb: Box<Callback:Send>)\n-        -> IoResult<Box<RtioSignal:Send>>;\n+            -> IoResult<Box<RtioTTY + Send>>;\n+    fn signal(&mut self, signal: int, cb: Box<Callback + Send>)\n+        -> IoResult<Box<RtioSignal + Send>>;\n }\n \n pub trait RtioTcpListener : RtioSocket {\n-    fn listen(~self) -> IoResult<Box<RtioTcpAcceptor:Send>>;\n+    fn listen(~self) -> IoResult<Box<RtioTcpAcceptor + Send>>;\n }\n \n pub trait RtioTcpAcceptor : RtioSocket {\n-    fn accept(&mut self) -> IoResult<Box<RtioTcpStream:Send>>;\n+    fn accept(&mut self) -> IoResult<Box<RtioTcpStream + Send>>;\n     fn accept_simultaneously(&mut self) -> IoResult<()>;\n     fn dont_accept_simultaneously(&mut self) -> IoResult<()>;\n     fn set_timeout(&mut self, timeout: Option<u64>);\n@@ -256,7 +256,7 @@ pub trait RtioTcpStream : RtioSocket {\n     fn nodelay(&mut self) -> IoResult<()>;\n     fn keepalive(&mut self, delay_in_seconds: uint) -> IoResult<()>;\n     fn letdie(&mut self) -> IoResult<()>;\n-    fn clone(&self) -> Box<RtioTcpStream:Send>;\n+    fn clone(&self) -> Box<RtioTcpStream + Send>;\n     fn close_write(&mut self) -> IoResult<()>;\n     fn close_read(&mut self) -> IoResult<()>;\n     fn set_timeout(&mut self, timeout_ms: Option<u64>);\n@@ -284,16 +284,16 @@ pub trait RtioUdpSocket : RtioSocket {\n     fn hear_broadcasts(&mut self) -> IoResult<()>;\n     fn ignore_broadcasts(&mut self) -> IoResult<()>;\n \n-    fn clone(&self) -> Box<RtioUdpSocket:Send>;\n+    fn clone(&self) -> Box<RtioUdpSocket + Send>;\n     fn set_timeout(&mut self, timeout_ms: Option<u64>);\n     fn set_read_timeout(&mut self, timeout_ms: Option<u64>);\n     fn set_write_timeout(&mut self, timeout_ms: Option<u64>);\n }\n \n pub trait RtioTimer {\n     fn sleep(&mut self, msecs: u64);\n-    fn oneshot(&mut self, msecs: u64, cb: Box<Callback:Send>);\n-    fn period(&mut self, msecs: u64, cb: Box<Callback:Send>);\n+    fn oneshot(&mut self, msecs: u64, cb: Box<Callback + Send>);\n+    fn period(&mut self, msecs: u64, cb: Box<Callback + Send>);\n }\n \n pub trait RtioFileStream {\n@@ -319,7 +319,7 @@ pub trait RtioProcess {\n pub trait RtioPipe {\n     fn read(&mut self, buf: &mut [u8]) -> IoResult<uint>;\n     fn write(&mut self, buf: &[u8]) -> IoResult<()>;\n-    fn clone(&self) -> Box<RtioPipe:Send>;\n+    fn clone(&self) -> Box<RtioPipe + Send>;\n \n     fn close_write(&mut self) -> IoResult<()>;\n     fn close_read(&mut self) -> IoResult<()>;\n@@ -329,11 +329,11 @@ pub trait RtioPipe {\n }\n \n pub trait RtioUnixListener {\n-    fn listen(~self) -> IoResult<Box<RtioUnixAcceptor:Send>>;\n+    fn listen(~self) -> IoResult<Box<RtioUnixAcceptor + Send>>;\n }\n \n pub trait RtioUnixAcceptor {\n-    fn accept(&mut self) -> IoResult<Box<RtioPipe:Send>>;\n+    fn accept(&mut self) -> IoResult<Box<RtioPipe + Send>>;\n     fn set_timeout(&mut self, timeout: Option<u64>);\n }\n "}, {"sha": "ce43f7858b64a19ad7a8fa239991f88240af9b9b", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -46,12 +46,12 @@ pub struct Task {\n     pub destroyed: bool,\n     pub name: Option<SendStr>,\n \n-    imp: Option<Box<Runtime:Send>>,\n+    imp: Option<Box<Runtime + Send>>,\n }\n \n pub struct TaskOpts {\n     /// Invoke this procedure with the result of the task when it finishes.\n-    pub on_exit: Option<proc(Result):Send>,\n+    pub on_exit: Option<proc(Result): Send>,\n     /// A name for the task-to-be, for identification in failure messages\n     pub name: Option<SendStr>,\n     /// The size of the stack for the spawned task\n@@ -64,7 +64,7 @@ pub struct TaskOpts {\n ///\n /// If you wish for this result's delivery to block until all\n /// children tasks complete, recommend using a result future.\n-pub type Result = ::core::result::Result<(), Box<Any:Send>>;\n+pub type Result = ::core::result::Result<(), Box<Any + Send>>;\n \n pub struct GarbageCollector;\n pub struct LocalStorage(pub Option<local_data::Map>);\n@@ -79,7 +79,7 @@ pub enum BlockedTask {\n \n /// Per-task state related to task death, killing, failure, etc.\n pub struct Death {\n-    pub on_exit: Option<proc(Result):Send>,\n+    pub on_exit: Option<proc(Result): Send>,\n }\n \n pub struct BlockedTasks {\n@@ -177,7 +177,7 @@ impl Task {\n     /// Inserts a runtime object into this task, transferring ownership to the\n     /// task. It is illegal to replace a previous runtime object in this task\n     /// with this argument.\n-    pub fn put_runtime(&mut self, ops: Box<Runtime:Send>) {\n+    pub fn put_runtime(&mut self, ops: Box<Runtime + Send>) {\n         assert!(self.imp.is_none());\n         self.imp = Some(ops);\n     }\n@@ -207,7 +207,7 @@ impl Task {\n                 Ok(t) => Some(t),\n                 Err(t) => {\n                     let data = mem::transmute::<_, raw::TraitObject>(t).data;\n-                    let obj: Box<Runtime:Send> =\n+                    let obj: Box<Runtime + Send> =\n                         mem::transmute(raw::TraitObject {\n                             vtable: vtable,\n                             data: data,\n@@ -221,7 +221,7 @@ impl Task {\n \n     /// Spawns a sibling to this task. The newly spawned task is configured with\n     /// the `opts` structure and will run `f` as the body of its code.\n-    pub fn spawn_sibling(mut ~self, opts: TaskOpts, f: proc():Send) {\n+    pub fn spawn_sibling(mut ~self, opts: TaskOpts, f: proc(): Send) {\n         let ops = self.imp.take_unwrap();\n         ops.spawn_sibling(self, opts, f)\n     }"}, {"sha": "1e9e63c211be87e3c5e30d94c62a1a66f47c6b66", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -78,15 +78,15 @@ use uw = libunwind;\n \n pub struct Unwinder {\n     unwinding: bool,\n-    cause: Option<Box<Any:Send>>\n+    cause: Option<Box<Any + Send>>\n }\n \n struct Exception {\n     uwe: uw::_Unwind_Exception,\n-    cause: Option<Box<Any:Send>>,\n+    cause: Option<Box<Any + Send>>,\n }\n \n-pub type Callback = fn(msg: &Any:Send, file: &'static str, line: uint);\n+pub type Callback = fn(msg: &Any + Send, file: &'static str, line: uint);\n \n // Variables used for invoking callbacks when a task starts to unwind.\n //\n@@ -148,7 +148,7 @@ impl Unwinder {\n ///   guaranteed that a rust task is in place when invoking this function.\n ///   Unwinding twice can lead to resource leaks where some destructors are not\n ///   run.\n-pub unsafe fn try(f: ||) -> ::core::result::Result<(), Box<Any:Send>> {\n+pub unsafe fn try(f: ||) -> ::core::result::Result<(), Box<Any + Send>> {\n     let closure: Closure = mem::transmute(f);\n     let ep = rust_try(try_fn, closure.code as *c_void,\n                       closure.env as *c_void);\n@@ -187,7 +187,7 @@ pub unsafe fn try(f: ||) -> ::core::result::Result<(), Box<Any:Send>> {\n // An uninlined, unmangled function upon which to slap yer breakpoints\n #[inline(never)]\n #[no_mangle]\n-fn rust_fail(cause: Box<Any:Send>) -> ! {\n+fn rust_fail(cause: Box<Any + Send>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n     unsafe {\n@@ -457,7 +457,7 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> !\n /// Do this split took the LLVM IR line counts of `fn main() { fail!()\n /// }` from ~1900/3700 (-O/no opts) to 180/590.\n #[inline(never)] #[cold] // this is the slow path, please never inline this\n-fn begin_unwind_inner(msg: Box<Any:Send>,\n+fn begin_unwind_inner(msg: Box<Any + Send>,\n                       file: &'static str,\n                       line: uint) -> ! {\n     // First, invoke call the user-defined callbacks triggered on task failure."}, {"sha": "323bd0fbce2f5f7c3068e93c1e40bc8c4275fc07", "filename": "src/librustuv/async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fasync.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -27,12 +27,12 @@ pub struct AsyncWatcher {\n }\n \n struct Payload {\n-    callback: Box<Callback:Send>,\n+    callback: Box<Callback + Send>,\n     exit_flag: Arc<Exclusive<bool>>,\n }\n \n impl AsyncWatcher {\n-    pub fn new(loop_: &mut Loop, cb: Box<Callback:Send>) -> AsyncWatcher {\n+    pub fn new(loop_: &mut Loop, cb: Box<Callback + Send>) -> AsyncWatcher {\n         let handle = UvHandle::alloc(None::<AsyncWatcher>, uvll::UV_ASYNC);\n         assert_eq!(unsafe {\n             uvll::uv_async_init(loop_.handle, handle, async_cb)"}, {"sha": "43ddd2681b3e30b51ffbd869ae8e672aa2cb69f1", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -18,11 +18,11 @@ use std::rt::rtio::{Callback, PausableIdleCallback};\n pub struct IdleWatcher {\n     handle: *uvll::uv_idle_t,\n     idle_flag: bool,\n-    callback: Box<Callback:Send>,\n+    callback: Box<Callback + Send>,\n }\n \n impl IdleWatcher {\n-    pub fn new(loop_: &mut Loop, cb: Box<Callback:Send>) -> Box<IdleWatcher> {\n+    pub fn new(loop_: &mut Loop, cb: Box<Callback + Send>) -> Box<IdleWatcher> {\n         let handle = UvHandle::alloc(None::<IdleWatcher>, uvll::UV_IDLE);\n         assert_eq!(unsafe {\n             uvll::uv_idle_init(loop_.handle, handle)\n@@ -127,7 +127,7 @@ mod test {\n     fn mk(v: uint) -> (Box<IdleWatcher>, Chan) {\n         let rc = Rc::new(RefCell::new((None, 0)));\n         let cb = box MyCallback(rc.clone(), v);\n-        let cb = cb as Box<Callback:>;\n+        let cb = cb as Box<Callback>;\n         let cb = unsafe { mem::transmute(cb) };\n         (IdleWatcher::new(&mut local_loop().loop_, cb), rc)\n     }"}, {"sha": "78c2c5ff630576d46c46a8b9b6d32497e069dc18", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -125,8 +125,8 @@ pub mod stream;\n ///     // this code is running inside of a green task powered by libuv\n /// }\n /// ```\n-pub fn event_loop() -> Box<rtio::EventLoop:Send> {\n-    box uvio::UvEventLoop::new() as Box<rtio::EventLoop:Send>\n+pub fn event_loop() -> Box<rtio::EventLoop + Send> {\n+    box uvio::UvEventLoop::new() as Box<rtio::EventLoop + Send>\n }\n \n /// A type that wraps a uv handle"}, {"sha": "c8fb0f496dcb72182d931114d5a8e81aef9b1c22", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -165,8 +165,8 @@ pub struct TcpWatcher {\n pub struct TcpListener {\n     home: HomeHandle,\n     handle: *uvll::uv_pipe_t,\n-    outgoing: Sender<Result<Box<rtio::RtioTcpStream:Send>, IoError>>,\n-    incoming: Receiver<Result<Box<rtio::RtioTcpStream:Send>, IoError>>,\n+    outgoing: Sender<Result<Box<rtio::RtioTcpStream + Send>, IoError>>,\n+    incoming: Receiver<Result<Box<rtio::RtioTcpStream + Send>, IoError>>,\n }\n \n pub struct TcpAcceptor {\n@@ -274,15 +274,15 @@ impl rtio::RtioTcpStream for TcpWatcher {\n         })\n     }\n \n-    fn clone(&self) -> Box<rtio::RtioTcpStream:Send> {\n+    fn clone(&self) -> Box<rtio::RtioTcpStream + Send> {\n         box TcpWatcher {\n             handle: self.handle,\n             stream: StreamWatcher::new(self.handle),\n             home: self.home.clone(),\n             refcount: self.refcount.clone(),\n             read_access: self.read_access.clone(),\n             write_access: self.write_access.clone(),\n-        } as Box<rtio::RtioTcpStream:Send>\n+        } as Box<rtio::RtioTcpStream + Send>\n     }\n \n     fn close_read(&mut self) -> Result<(), IoError> {\n@@ -388,7 +388,7 @@ impl rtio::RtioSocket for TcpListener {\n }\n \n impl rtio::RtioTcpListener for TcpListener {\n-    fn listen(~self) -> Result<Box<rtio::RtioTcpAcceptor:Send>, IoError> {\n+    fn listen(~self) -> Result<Box<rtio::RtioTcpAcceptor + Send>, IoError> {\n         // create the acceptor object from ourselves\n         let mut acceptor = box TcpAcceptor {\n             listener: self,\n@@ -398,7 +398,7 @@ impl rtio::RtioTcpListener for TcpListener {\n         let _m = acceptor.fire_homing_missile();\n         // FIXME: the 128 backlog should be configurable\n         match unsafe { uvll::uv_listen(acceptor.listener.handle, 128, listen_cb) } {\n-            0 => Ok(acceptor as Box<rtio::RtioTcpAcceptor:Send>),\n+            0 => Ok(acceptor as Box<rtio::RtioTcpAcceptor + Send>),\n             n => Err(uv_error_to_io_error(UvError(n))),\n         }\n     }\n@@ -414,7 +414,7 @@ extern fn listen_cb(server: *uvll::uv_stream_t, status: c_int) {\n             });\n             let client = TcpWatcher::new_home(&loop_, tcp.home().clone());\n             assert_eq!(unsafe { uvll::uv_accept(server, client.handle) }, 0);\n-            Ok(box client as Box<rtio::RtioTcpStream:Send>)\n+            Ok(box client as Box<rtio::RtioTcpStream + Send>)\n         }\n         n => Err(uv_error_to_io_error(UvError(n)))\n     };\n@@ -442,7 +442,7 @@ impl rtio::RtioSocket for TcpAcceptor {\n }\n \n impl rtio::RtioTcpAcceptor for TcpAcceptor {\n-    fn accept(&mut self) -> Result<Box<rtio::RtioTcpStream:Send>, IoError> {\n+    fn accept(&mut self) -> Result<Box<rtio::RtioTcpStream + Send>, IoError> {\n         self.timeout.accept(&self.listener.incoming)\n     }\n \n@@ -740,15 +740,15 @@ impl rtio::RtioUdpSocket for UdpWatcher {\n         })\n     }\n \n-    fn clone(&self) -> Box<rtio::RtioUdpSocket:Send> {\n+    fn clone(&self) -> Box<rtio::RtioUdpSocket + Send> {\n         box UdpWatcher {\n             handle: self.handle,\n             home: self.home.clone(),\n             refcount: self.refcount.clone(),\n             write_access: self.write_access.clone(),\n             read_access: self.read_access.clone(),\n             blocked_sender: None,\n-        } as Box<rtio::RtioUdpSocket:Send>\n+        } as Box<rtio::RtioUdpSocket + Send>\n     }\n \n     fn set_timeout(&mut self, timeout: Option<u64>) {"}, {"sha": "2ac9bfd202b8e8bcd011af3b1c896a41befbeb38", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -38,8 +38,8 @@ pub struct PipeWatcher {\n pub struct PipeListener {\n     home: HomeHandle,\n     pipe: *uvll::uv_pipe_t,\n-    outgoing: Sender<IoResult<Box<rtio::RtioPipe:Send>>>,\n-    incoming: Receiver<IoResult<Box<rtio::RtioPipe:Send>>>,\n+    outgoing: Sender<IoResult<Box<rtio::RtioPipe + Send>>>,\n+    incoming: Receiver<IoResult<Box<rtio::RtioPipe + Send>>>,\n }\n \n pub struct PipeAcceptor {\n@@ -129,15 +129,15 @@ impl rtio::RtioPipe for PipeWatcher {\n         self.stream.write(buf, guard.can_timeout).map_err(uv_error_to_io_error)\n     }\n \n-    fn clone(&self) -> Box<rtio::RtioPipe:Send> {\n+    fn clone(&self) -> Box<rtio::RtioPipe + Send> {\n         box PipeWatcher {\n             stream: StreamWatcher::new(self.stream.handle),\n             defused: false,\n             home: self.home.clone(),\n             refcount: self.refcount.clone(),\n             read_access: self.read_access.clone(),\n             write_access: self.write_access.clone(),\n-        } as Box<rtio::RtioPipe:Send>\n+        } as Box<rtio::RtioPipe + Send>\n     }\n \n     fn close_read(&mut self) -> IoResult<()> {\n@@ -248,7 +248,7 @@ impl PipeListener {\n }\n \n impl rtio::RtioUnixListener for PipeListener {\n-    fn listen(~self) -> IoResult<Box<rtio::RtioUnixAcceptor:Send>> {\n+    fn listen(~self) -> IoResult<Box<rtio::RtioUnixAcceptor + Send>> {\n         // create the acceptor object from ourselves\n         let mut acceptor = box PipeAcceptor {\n             listener: self,\n@@ -258,7 +258,7 @@ impl rtio::RtioUnixListener for PipeListener {\n         let _m = acceptor.fire_homing_missile();\n         // FIXME: the 128 backlog should be configurable\n         match unsafe { uvll::uv_listen(acceptor.listener.pipe, 128, listen_cb) } {\n-            0 => Ok(acceptor as Box<rtio::RtioUnixAcceptor:Send>),\n+            0 => Ok(acceptor as Box<rtio::RtioUnixAcceptor + Send>),\n             n => Err(uv_error_to_io_error(UvError(n))),\n         }\n     }\n@@ -283,7 +283,7 @@ extern fn listen_cb(server: *uvll::uv_stream_t, status: libc::c_int) {\n             });\n             let client = PipeWatcher::new_home(&loop_, pipe.home().clone(), false);\n             assert_eq!(unsafe { uvll::uv_accept(server, client.handle()) }, 0);\n-            Ok(box client as Box<rtio::RtioPipe:Send>)\n+            Ok(box client as Box<rtio::RtioPipe + Send>)\n         }\n         n => Err(uv_error_to_io_error(UvError(n)))\n     };\n@@ -300,7 +300,7 @@ impl Drop for PipeListener {\n // PipeAcceptor implementation and traits\n \n impl rtio::RtioUnixAcceptor for PipeAcceptor {\n-    fn accept(&mut self) -> IoResult<Box<rtio::RtioPipe:Send>> {\n+    fn accept(&mut self) -> IoResult<Box<rtio::RtioPipe + Send>> {\n         self.timeout.accept(&self.listener.incoming)\n     }\n "}, {"sha": "b478738ec8e722849b9263d89f2de7feb8e2a546", "filename": "src/librustuv/signal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fsignal.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -20,11 +20,11 @@ pub struct SignalWatcher {\n     handle: *uvll::uv_signal_t,\n     home: HomeHandle,\n \n-    cb: Box<Callback:Send>,\n+    cb: Box<Callback + Send>,\n }\n \n impl SignalWatcher {\n-    pub fn new(io: &mut UvIoFactory, signum: int, cb: Box<Callback:Send>)\n+    pub fn new(io: &mut UvIoFactory, signum: int, cb: Box<Callback + Send>)\n                -> Result<Box<SignalWatcher>, UvError> {\n         let s = box SignalWatcher {\n             handle: UvHandle::alloc(None::<SignalWatcher>, uvll::UV_SIGNAL),"}, {"sha": "34cd2e489a00cb27e7aa9c844a67da8c15a37b15", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -27,8 +27,8 @@ pub struct TimerWatcher {\n \n pub enum NextAction {\n     WakeTask,\n-    CallOnce(Box<Callback:Send>),\n-    CallMany(Box<Callback:Send>, uint),\n+    CallOnce(Box<Callback + Send>),\n+    CallMany(Box<Callback + Send>, uint),\n }\n \n impl TimerWatcher {\n@@ -103,7 +103,7 @@ impl RtioTimer for TimerWatcher {\n         self.stop();\n     }\n \n-    fn oneshot(&mut self, msecs: u64, cb: Box<Callback:Send>) {\n+    fn oneshot(&mut self, msecs: u64, cb: Box<Callback + Send>) {\n         // similarly to the destructor, we must drop the previous action outside\n         // of the homing missile\n         let _prev_action = {\n@@ -115,7 +115,7 @@ impl RtioTimer for TimerWatcher {\n         };\n     }\n \n-    fn period(&mut self, msecs: u64, cb: Box<Callback:Send>) {\n+    fn period(&mut self, msecs: u64, cb: Box<Callback + Send>) {\n         // similarly to the destructor, we must drop the previous action outside\n         // of the homing missile\n         let _prev_action = {"}, {"sha": "8c9d29ee9147b69ec6859640f0cead77aecbde05", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -84,16 +84,16 @@ impl EventLoop for UvEventLoop {\n         IdleWatcher::onetime(&mut self.uvio.loop_, f);\n     }\n \n-    fn pausable_idle_callback(&mut self, cb: Box<rtio::Callback:Send>)\n-                              -> Box<rtio::PausableIdleCallback:Send> {\n+    fn pausable_idle_callback(&mut self, cb: Box<rtio::Callback + Send>)\n+                              -> Box<rtio::PausableIdleCallback + Send> {\n         IdleWatcher::new(&mut self.uvio.loop_, cb)\n-                         as Box<rtio::PausableIdleCallback:Send>\n+                         as Box<rtio::PausableIdleCallback + Send>\n     }\n \n-    fn remote_callback(&mut self, f: Box<rtio::Callback:Send>)\n-                       -> Box<rtio::RemoteCallback:Send> {\n+    fn remote_callback(&mut self, f: Box<rtio::Callback + Send>)\n+                       -> Box<rtio::RemoteCallback + Send> {\n         box AsyncWatcher::new(&mut self.uvio.loop_, f) as\n-            Box<rtio::RemoteCallback:Send>\n+            Box<rtio::RemoteCallback + Send>\n     }\n \n     fn io<'a>(&'a mut self) -> Option<&'a mut rtio::IoFactory> {\n@@ -141,31 +141,31 @@ impl IoFactory for UvIoFactory {\n     // NB: This blocks the task waiting on the connection.\n     // It would probably be better to return a future\n     fn tcp_connect(&mut self, addr: rtio::SocketAddr, timeout: Option<u64>)\n-                   -> IoResult<Box<rtio::RtioTcpStream:Send>> {\n+                   -> IoResult<Box<rtio::RtioTcpStream + Send>> {\n         match TcpWatcher::connect(self, addr, timeout) {\n-            Ok(t) => Ok(box t as Box<rtio::RtioTcpStream:Send>),\n+            Ok(t) => Ok(box t as Box<rtio::RtioTcpStream + Send>),\n             Err(e) => Err(uv_error_to_io_error(e)),\n         }\n     }\n \n     fn tcp_bind(&mut self, addr: rtio::SocketAddr)\n-                -> IoResult<Box<rtio::RtioTcpListener:Send>> {\n+                -> IoResult<Box<rtio::RtioTcpListener + Send>> {\n         match TcpListener::bind(self, addr) {\n-            Ok(t) => Ok(t as Box<rtio::RtioTcpListener:Send>),\n+            Ok(t) => Ok(t as Box<rtio::RtioTcpListener + Send>),\n             Err(e) => Err(uv_error_to_io_error(e)),\n         }\n     }\n \n     fn udp_bind(&mut self, addr: rtio::SocketAddr)\n-                -> IoResult<Box<rtio::RtioUdpSocket:Send>> {\n+                -> IoResult<Box<rtio::RtioUdpSocket + Send>> {\n         match UdpWatcher::bind(self, addr) {\n-            Ok(u) => Ok(box u as Box<rtio::RtioUdpSocket:Send>),\n+            Ok(u) => Ok(box u as Box<rtio::RtioUdpSocket + Send>),\n             Err(e) => Err(uv_error_to_io_error(e)),\n         }\n     }\n \n-    fn timer_init(&mut self) -> IoResult<Box<rtio::RtioTimer:Send>> {\n-        Ok(TimerWatcher::new(self) as Box<rtio::RtioTimer:Send>)\n+    fn timer_init(&mut self) -> IoResult<Box<rtio::RtioTimer + Send>> {\n+        Ok(TimerWatcher::new(self) as Box<rtio::RtioTimer + Send>)\n     }\n \n     fn get_host_addresses(&mut self, host: Option<&str>, servname: Option<&str>,\n@@ -177,14 +177,14 @@ impl IoFactory for UvIoFactory {\n     }\n \n     fn fs_from_raw_fd(&mut self, fd: c_int, close: rtio::CloseBehavior)\n-                      -> Box<rtio::RtioFileStream:Send> {\n+                      -> Box<rtio::RtioFileStream + Send> {\n         box FileWatcher::new(self, fd, close) as\n-            Box<rtio::RtioFileStream:Send>\n+            Box<rtio::RtioFileStream + Send>\n     }\n \n     fn fs_open(&mut self, path: &CString, fm: rtio::FileMode,\n                fa: rtio::FileAccess)\n-        -> IoResult<Box<rtio::RtioFileStream:Send>>\n+        -> IoResult<Box<rtio::RtioFileStream + Send>>\n     {\n         let flags = match fm {\n             rtio::Open => 0,\n@@ -201,7 +201,7 @@ impl IoFactory for UvIoFactory {\n         };\n \n         match FsRequest::open(self, path, flags as int, mode as int) {\n-            Ok(fs) => Ok(box fs as Box<rtio::RtioFileStream:Send>),\n+            Ok(fs) => Ok(box fs as Box<rtio::RtioFileStream + Send>),\n             Err(e) => Err(uv_error_to_io_error(e))\n         }\n     }\n@@ -264,14 +264,14 @@ impl IoFactory for UvIoFactory {\n     }\n \n     fn spawn(&mut self, cfg: ProcessConfig)\n-            -> IoResult<(Box<rtio::RtioProcess:Send>,\n-                         Vec<Option<Box<rtio::RtioPipe:Send>>>)>\n+            -> IoResult<(Box<rtio::RtioProcess + Send>,\n+                         Vec<Option<Box<rtio::RtioPipe + Send>>>)>\n     {\n         match Process::spawn(self, cfg) {\n             Ok((p, io)) => {\n-                Ok((p as Box<rtio::RtioProcess:Send>,\n+                Ok((p as Box<rtio::RtioProcess + Send>,\n                     io.move_iter().map(|i| i.map(|p| {\n-                        box p as Box<rtio::RtioPipe:Send>\n+                        box p as Box<rtio::RtioPipe + Send>\n                     })).collect()))\n             }\n             Err(e) => Err(uv_error_to_io_error(e)),\n@@ -283,43 +283,43 @@ impl IoFactory for UvIoFactory {\n     }\n \n     fn unix_bind(&mut self, path: &CString)\n-                 -> IoResult<Box<rtio::RtioUnixListener:Send>> {\n+                 -> IoResult<Box<rtio::RtioUnixListener + Send>> {\n         match PipeListener::bind(self, path) {\n-            Ok(p) => Ok(p as Box<rtio::RtioUnixListener:Send>),\n+            Ok(p) => Ok(p as Box<rtio::RtioUnixListener + Send>),\n             Err(e) => Err(uv_error_to_io_error(e)),\n         }\n     }\n \n     fn unix_connect(&mut self, path: &CString, timeout: Option<u64>)\n-                    -> IoResult<Box<rtio::RtioPipe:Send>> {\n+                    -> IoResult<Box<rtio::RtioPipe + Send>> {\n         match PipeWatcher::connect(self, path, timeout) {\n-            Ok(p) => Ok(box p as Box<rtio::RtioPipe:Send>),\n+            Ok(p) => Ok(box p as Box<rtio::RtioPipe + Send>),\n             Err(e) => Err(uv_error_to_io_error(e)),\n         }\n     }\n \n     fn tty_open(&mut self, fd: c_int, readable: bool)\n-            -> IoResult<Box<rtio::RtioTTY:Send>> {\n+            -> IoResult<Box<rtio::RtioTTY + Send>> {\n         match TtyWatcher::new(self, fd, readable) {\n-            Ok(tty) => Ok(box tty as Box<rtio::RtioTTY:Send>),\n+            Ok(tty) => Ok(box tty as Box<rtio::RtioTTY + Send>),\n             Err(e) => Err(uv_error_to_io_error(e))\n         }\n     }\n \n     fn pipe_open(&mut self, fd: c_int)\n-        -> IoResult<Box<rtio::RtioPipe:Send>>\n+        -> IoResult<Box<rtio::RtioPipe + Send>>\n     {\n         match PipeWatcher::open(self, fd) {\n-            Ok(s) => Ok(box s as Box<rtio::RtioPipe:Send>),\n+            Ok(s) => Ok(box s as Box<rtio::RtioPipe + Send>),\n             Err(e) => Err(uv_error_to_io_error(e))\n         }\n     }\n \n-    fn signal(&mut self, signum: int, cb: Box<rtio::Callback:Send>)\n-        -> IoResult<Box<rtio::RtioSignal:Send>>\n+    fn signal(&mut self, signum: int, cb: Box<rtio::Callback + Send>)\n+        -> IoResult<Box<rtio::RtioSignal + Send>>\n     {\n         match SignalWatcher::new(self, signum, cb) {\n-            Ok(s) => Ok(s as Box<rtio::RtioSignal:Send>),\n+            Ok(s) => Ok(s as Box<rtio::RtioSignal + Send>),\n             Err(e) => Err(uv_error_to_io_error(e)),\n         }\n     }"}, {"sha": "436e969c48c92d04b938346b896d36d3bea5e5c3", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -430,26 +430,6 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n                  _name: &str,\n                  f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult { f(self) }\n \n-    #[cfg(stage0)]\n-    fn emit_enum_variant(&mut self,\n-                         name: &str,\n-                         _id: uint,\n-                         cnt: uint,\n-                         f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult {\n-        // enums are encoded as strings or objects\n-        // Bunny => \"Bunny\"\n-        // Kangaroo(34,\"William\") => {\"variant\": \"Kangaroo\", \"fields\": [34,\"William\"]}\n-        if cnt == 0 {\n-            write!(self.wr, \"{}\", escape_str(name))\n-        } else {\n-            try!(write!(self.wr, \"\\\\{\\\"variant\\\":\"));\n-            try!(write!(self.wr, \"{}\", escape_str(name)));\n-            try!(write!(self.wr, \",\\\"fields\\\":[\"));\n-            try!(f(self));\n-            write!(self.wr, \"]\\\\}\")\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     fn emit_enum_variant(&mut self,\n                          name: &str,\n                          _id: uint,\n@@ -493,16 +473,6 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n         self.emit_enum_variant_arg(idx, f)\n     }\n \n-    #[cfg(stage0)]\n-    fn emit_struct(&mut self,\n-                   _: &str,\n-                   _: uint,\n-                   f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult {\n-        try!(write!(self.wr, r\"\\{\"));\n-        try!(f(self));\n-        write!(self.wr, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn emit_struct(&mut self,\n                    _: &str,\n                    _: uint,\n@@ -563,13 +533,6 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n         f(self)\n     }\n \n-    #[cfg(stage0)]\n-    fn emit_map(&mut self, _len: uint, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult {\n-        try!(write!(self.wr, r\"\\{\"));\n-        try!(f(self));\n-        write!(self.wr, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn emit_map(&mut self, _len: uint, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult {\n         try!(write!(self.wr, \"{{\"));\n         try!(f(self));\n@@ -707,22 +670,6 @@ impl<'a> ::Encoder<io::IoError> for PrettyEncoder<'a> {\n     }\n \n \n-    #[cfg(stage0)]\n-    fn emit_struct(&mut self,\n-                   _: &str,\n-                   len: uint,\n-                   f: |&mut PrettyEncoder<'a>| -> EncodeResult) -> EncodeResult {\n-        if len == 0 {\n-            write!(self.wr, \"\\\\{\\\\}\")\n-        } else {\n-            try!(write!(self.wr, \"\\\\{\"));\n-            self.indent += 2;\n-            try!(f(self));\n-            self.indent -= 2;\n-            write!(self.wr, \"\\n{}\\\\}\", spaces(self.indent))\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     fn emit_struct(&mut self,\n                    _: &str,\n                    len: uint,\n@@ -808,21 +755,6 @@ impl<'a> ::Encoder<io::IoError> for PrettyEncoder<'a> {\n         f(self)\n     }\n \n-    #[cfg(stage0)]\n-    fn emit_map(&mut self,\n-                len: uint,\n-                f: |&mut PrettyEncoder<'a>| -> EncodeResult) -> EncodeResult {\n-        if len == 0 {\n-            write!(self.wr, \"\\\\{\\\\}\")\n-        } else {\n-            try!(write!(self.wr, \"\\\\{\"));\n-            self.indent += 2;\n-            try!(f(self));\n-            self.indent -= 2;\n-            write!(self.wr, \"\\n{}\\\\}\", spaces(self.indent))\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     fn emit_map(&mut self,\n                 len: uint,\n                 f: |&mut PrettyEncoder<'a>| -> EncodeResult) -> EncodeResult {"}, {"sha": "8feb0e0b7eef0f95a61d455bc3e7811e231af64f", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -1424,18 +1424,6 @@ impl<K: Eq + Hash<S>, V: PartialEq, S, H: Hasher<S>> PartialEq for HashMap<K, V,\n impl<K: Eq + Hash<S>, V: Eq, S, H: Hasher<S>> Eq for HashMap<K, V, H> {}\n \n impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H> {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, r\"\\{\"));\n-\n-        for (i, (k, v)) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{}: {}\", *k, *v));\n-        }\n-\n-        write!(f, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n \n@@ -1629,18 +1617,6 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n }\n \n impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, r\"\\{\"));\n-\n-        for (i, x) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{}\", *x));\n-        }\n-\n-        write!(f, r\"\\}\")\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n "}, {"sha": "8ec5146c7b20fd35b39c92c0efc326ecbf5d5383", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -208,26 +208,6 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for LruCache<A, B> {\n     /// Return a string that lists the key-value pairs from most-recently\n     /// used to least-recently used.\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, r\"\\{\"));\n-        let mut cur = self.head;\n-        for i in range(0, self.len()) {\n-            if i > 0 { try!(write!(f, \", \")) }\n-            unsafe {\n-                cur = (*cur).next;\n-                try!(write!(f, \"{}\", (*cur).key));\n-            }\n-            try!(write!(f, \": \"));\n-            unsafe {\n-                try!(write!(f, \"{}\", (*cur).value));\n-            }\n-        }\n-        write!(f, r\"\\}\")\n-    }\n-    /// Return a string that lists the key-value pairs from most-recently\n-    /// used to least-recently used.\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n         let mut cur = self.head;"}, {"sha": "d1552f0bd10122e3d10c455e1099c298aae51dbc", "filename": "src/libstd/failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffailure.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -23,7 +23,7 @@ use str::Str;\n use string::String;\n \n // Defined in this module instead of io::stdio so that the unwinding\n-local_data_key!(pub local_stderr: Box<Writer:Send>)\n+local_data_key!(pub local_stderr: Box<Writer + Send>)\n \n impl Writer for Stdio {\n     fn write(&mut self, bytes: &[u8]) -> IoResult<()> {\n@@ -35,7 +35,7 @@ impl Writer for Stdio {\n     }\n }\n \n-pub fn on_fail(obj: &Any:Send, file: &'static str, line: uint) {\n+pub fn on_fail(obj: &Any + Send, file: &'static str, line: uint) {\n     let msg = match obj.as_ref::<&'static str>() {\n         Some(s) => *s,\n         None => match obj.as_ref::<String>() {"}, {"sha": "20187a6dcde6b53479178e356ea2fb03c5a0f8eb", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -84,7 +84,7 @@ use vec::Vec;\n /// configured at creation time, via the `FileAccess` parameter to\n /// `File::open_mode()`.\n pub struct File {\n-    fd: Box<rtio::RtioFileStream:Send>,\n+    fd: Box<rtio::RtioFileStream + Send>,\n     path: Path,\n     last_nread: int,\n }"}, {"sha": "8ffb057c934588bf242d516bb684ec9b71e45398", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -51,11 +51,11 @@ use rt::rtio;\n /// drop(stream); // close the connection\n /// ```\n pub struct TcpStream {\n-    obj: Box<RtioTcpStream:Send>,\n+    obj: Box<RtioTcpStream + Send>,\n }\n \n impl TcpStream {\n-    fn new(s: Box<RtioTcpStream:Send>) -> TcpStream {\n+    fn new(s: Box<RtioTcpStream + Send>) -> TcpStream {\n         TcpStream { obj: s }\n     }\n \n@@ -326,7 +326,7 @@ impl Writer for TcpStream {\n /// # }\n /// ```\n pub struct TcpListener {\n-    obj: Box<RtioTcpListener:Send>,\n+    obj: Box<RtioTcpListener + Send>,\n }\n \n impl TcpListener {\n@@ -382,7 +382,7 @@ impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n /// a `TcpListener`'s `listen` method, and this object can be used to accept new\n /// `TcpStream` instances.\n pub struct TcpAcceptor {\n-    obj: Box<RtioTcpAcceptor:Send>,\n+    obj: Box<RtioTcpAcceptor + Send>,\n }\n \n impl TcpAcceptor {"}, {"sha": "e1f9cb3889f8ce3d378819549d742a02860b7e33", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -57,7 +57,7 @@ use rt::rtio;\n /// drop(socket); // close the socket\n /// ```\n pub struct UdpSocket {\n-    obj: Box<RtioUdpSocket:Send>,\n+    obj: Box<RtioUdpSocket + Send>,\n }\n \n impl UdpSocket {"}, {"sha": "8f4f66836ad3d16923f7b0051d9b1ff4b3202410", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -36,7 +36,7 @@ use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n \n /// A stream which communicates over a named pipe.\n pub struct UnixStream {\n-    obj: Box<RtioPipe:Send>,\n+    obj: Box<RtioPipe + Send>,\n }\n \n impl UnixStream {\n@@ -144,7 +144,7 @@ impl Writer for UnixStream {\n /// A value that can listen for incoming named pipe connection requests.\n pub struct UnixListener {\n     /// The internal, opaque runtime Unix listener.\n-    obj: Box<RtioUnixListener:Send>,\n+    obj: Box<RtioUnixListener + Send>,\n }\n \n impl UnixListener {\n@@ -188,7 +188,7 @@ impl Listener<UnixStream, UnixAcceptor> for UnixListener {\n /// A value that can accept named pipe connections, returned from `listen()`.\n pub struct UnixAcceptor {\n     /// The internal, opaque runtime Unix acceptor.\n-    obj: Box<RtioUnixAcceptor:Send>,\n+    obj: Box<RtioUnixAcceptor + Send>,\n }\n \n impl UnixAcceptor {"}, {"sha": "6e2009545aad51f490e3ac5dcea14c883017e19b", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -24,7 +24,7 @@ use rt::rtio::{RtioPipe, LocalIo};\n /// A synchronous, in-memory pipe.\n pub struct PipeStream {\n     /// The internal, opaque runtime pipe object.\n-    obj: Box<RtioPipe:Send>,\n+    obj: Box<RtioPipe + Send>,\n }\n \n impl PipeStream {\n@@ -55,7 +55,7 @@ impl PipeStream {\n     }\n \n     #[doc(hidden)]\n-    pub fn new(inner: Box<RtioPipe:Send>) -> PipeStream {\n+    pub fn new(inner: Box<RtioPipe + Send>) -> PipeStream {\n         PipeStream { obj: inner }\n     }\n }"}, {"sha": "38d8475ddf7a3550ab058f1775f428cb671ac749", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -58,7 +58,7 @@ use c_str::CString;\n /// assert!(child.wait().unwrap().success());\n /// ```\n pub struct Process {\n-    handle: Box<RtioProcess:Send>,\n+    handle: Box<RtioProcess + Send>,\n \n     /// Handle to the child's stdin, if the `stdin` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`."}, {"sha": "4a7655a63ce8c257a27f6a482173de26bc3bc82b", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -82,7 +82,7 @@ pub enum Signum {\n /// ```\n pub struct Listener {\n     /// A map from signums to handles to keep the handles in memory\n-    handles: Vec<(Signum, Box<RtioSignal:Send>)>,\n+    handles: Vec<(Signum, Box<RtioSignal + Send>)>,\n     /// This is where all the handles send signums, which are received by\n     /// the clients from the receiver.\n     tx: Sender<Signum>,"}, {"sha": "071480fb5ee7cdbb6d54a73246ae706dab4770e4", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -71,8 +71,8 @@ use str::StrSlice;\n // tl;dr; TTY works on everything but when windows stdout is redirected, in that\n //        case pipe also doesn't work, but magically file does!\n enum StdSource {\n-    TTY(Box<RtioTTY:Send>),\n-    File(Box<RtioFileStream:Send>),\n+    TTY(Box<RtioTTY + Send>),\n+    File(Box<RtioFileStream + Send>),\n }\n \n fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n@@ -84,7 +84,7 @@ fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n     }).map_err(IoError::from_rtio_error).unwrap()\n }\n \n-local_data_key!(local_stdout: Box<Writer:Send>)\n+local_data_key!(local_stdout: Box<Writer + Send>)\n \n /// Creates a new non-blocking handle to the stdin of the current process.\n ///\n@@ -163,7 +163,7 @@ pub fn stderr_raw() -> StdWriter {\n ///\n /// Note that this does not need to be called for all new tasks; the default\n /// output handle is to the process's stdout stream.\n-pub fn set_stdout(stdout: Box<Writer:Send>) -> Option<Box<Writer:Send>> {\n+pub fn set_stdout(stdout: Box<Writer + Send>) -> Option<Box<Writer + Send>> {\n     local_stdout.replace(Some(stdout)).and_then(|mut s| {\n         let _ = s.flush();\n         Some(s)\n@@ -178,7 +178,7 @@ pub fn set_stdout(stdout: Box<Writer:Send>) -> Option<Box<Writer:Send>> {\n ///\n /// Note that this does not need to be called for all new tasks; the default\n /// output handle is to the process's stderr stream.\n-pub fn set_stderr(stderr: Box<Writer:Send>) -> Option<Box<Writer:Send>> {\n+pub fn set_stderr(stderr: Box<Writer + Send>) -> Option<Box<Writer + Send>> {\n     local_stderr.replace(Some(stderr)).and_then(|mut s| {\n         let _ = s.flush();\n         Some(s)\n@@ -198,7 +198,7 @@ pub fn set_stderr(stderr: Box<Writer:Send>) -> Option<Box<Writer:Send>> {\n fn with_task_stdout(f: |&mut Writer| -> IoResult<()>) {\n     let result = if Local::exists(None::<Task>) {\n         let mut my_stdout = local_stdout.replace(None).unwrap_or_else(|| {\n-            box stdout() as Box<Writer:Send>\n+            box stdout() as Box<Writer + Send>\n         });\n         let result = f(my_stdout);\n         local_stdout.replace(Some(my_stdout));"}, {"sha": "da099953a49281c0c17d0173d4acefed93127418", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -64,7 +64,7 @@ use rt::rtio::{IoFactory, LocalIo, RtioTimer, Callback};\n /// # }\n /// ```\n pub struct Timer {\n-    obj: Box<RtioTimer:Send>,\n+    obj: Box<RtioTimer + Send>,\n }\n \n struct TimerCallback { tx: Sender<()> }"}, {"sha": "553c7af18cb26cb1f4d17ffca6c97b3642225d91", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -899,12 +899,6 @@ pub fn make_non_verbatim(path: &Path) -> Option<Path> {\n             // \\\\?\\D:\\\n             Path::new(repr.slice_from(4))\n         }\n-        #[cfg(stage0)]\n-        Some(VerbatimUNCPrefix(_,_)) => {\n-            // \\\\?\\UNC\\server\\share\n-            Path::new(format!(r\"\\\\{}\", repr.slice_from(7)))\n-        }\n-        #[cfg(not(stage0))]\n         Some(VerbatimUNCPrefix(_,_)) => {\n             // \\\\?\\UNC\\server\\share\n             Path::new(format!(r\"\\{}\", repr.slice_from(7)))"}, {"sha": "f543188af4295a628f946fbf89baa870fe86b11a", "filename": "src/libstd/task.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -63,9 +63,9 @@ pub struct TaskOpts {\n     /// The size of the stack for the spawned task\n     pub stack_size: Option<uint>,\n     /// Task-local stdout\n-    pub stdout: Option<Box<Writer:Send>>,\n+    pub stdout: Option<Box<Writer + Send>>,\n     /// Task-local stderr\n-    pub stderr: Option<Box<Writer:Send>>,\n+    pub stderr: Option<Box<Writer + Send>>,\n }\n \n /**\n@@ -83,7 +83,7 @@ pub struct TaskOpts {\n pub struct TaskBuilder {\n     /// Options to spawn the new task with\n     pub opts: TaskOpts,\n-    gen_body: Option<proc(v: proc():Send):Send -> proc():Send>,\n+    gen_body: Option<proc(v: proc(): Send): Send -> proc(): Send>,\n     nocopy: marker::NoCopy,\n }\n \n@@ -146,7 +146,7 @@ impl TaskBuilder {\n      * existing body generator to the new body generator.\n      */\n     pub fn with_wrapper(mut self,\n-                        wrapper: proc(v: proc():Send):Send -> proc():Send)\n+                        wrapper: proc(v: proc(): Send): Send -> proc(): Send)\n         -> TaskBuilder\n     {\n         self.gen_body = match self.gen_body.take() {\n@@ -163,7 +163,7 @@ impl TaskBuilder {\n      * the provided unique closure. The task has the properties and behavior\n      * specified by the task_builder.\n      */\n-    pub fn spawn(mut self, f: proc():Send) {\n+    pub fn spawn(mut self, f: proc(): Send) {\n         let gen_body = self.gen_body.take();\n         let f = match gen_body {\n             Some(gen) => gen(f),\n@@ -204,8 +204,8 @@ impl TaskBuilder {\n      * # Failure\n      * Fails if a future_result was already set for this task.\n      */\n-    pub fn try<T:Send>(mut self, f: proc():Send -> T)\n-               -> Result<T, Box<Any:Send>> {\n+    pub fn try<T: Send>(mut self, f: proc(): Send -> T)\n+               -> Result<T, Box<Any + Send>> {\n         let (tx, rx) = channel();\n \n         let result = self.future_result();\n@@ -247,15 +247,15 @@ impl TaskOpts {\n /// the provided unique closure.\n ///\n /// This function is equivalent to `TaskBuilder::new().spawn(f)`.\n-pub fn spawn(f: proc():Send) {\n+pub fn spawn(f: proc(): Send) {\n     TaskBuilder::new().spawn(f)\n }\n \n /// Execute a function in another task and return either the return value of\n /// the function or an error if the task failed\n ///\n /// This is equivalent to TaskBuilder::new().try\n-pub fn try<T:Send>(f: proc():Send -> T) -> Result<T, Box<Any:Send>> {\n+pub fn try<T: Send>(f: proc(): Send -> T) -> Result<T, Box<Any + Send>> {\n     TaskBuilder::new().try(f)\n }\n \n@@ -344,7 +344,7 @@ fn test_run_basic() {\n fn test_with_wrapper() {\n     let (tx, rx) = channel();\n     TaskBuilder::new().with_wrapper(proc(body) {\n-        let result: proc():Send = proc() {\n+        let result: proc(): Send = proc() {\n             body();\n             tx.send(());\n         };\n@@ -430,7 +430,7 @@ fn test_spawn_sched_childs_on_default_sched() {\n }\n \n #[cfg(test)]\n-fn avoid_copying_the_body(spawnfn: |v: proc():Send|) {\n+fn avoid_copying_the_body(spawnfn: |v: proc(): Send|) {\n     let (tx, rx) = channel::<uint>();\n \n     let x = box 1;\n@@ -476,7 +476,7 @@ fn test_child_doesnt_ref_parent() {\n     // (well, it would if the constant were 8000+ - I lowered it to be more\n     // valgrind-friendly. try this at home, instead..!)\n     static generations: uint = 16;\n-    fn child_no(x: uint) -> proc():Send {\n+    fn child_no(x: uint) -> proc(): Send {\n         return proc() {\n             if x < generations {\n                 TaskBuilder::new().spawn(child_no(x+1));\n@@ -522,10 +522,10 @@ fn test_try_fail_message_owned_str() {\n #[test]\n fn test_try_fail_message_any() {\n     match try(proc() {\n-        fail!(box 413u16 as Box<Any:Send>);\n+        fail!(box 413u16 as Box<Any + Send>);\n     }) {\n         Err(e) => {\n-            type T = Box<Any:Send>;\n+            type T = Box<Any + Send>;\n             assert!(e.is::<T>());\n             let any = e.move::<T>().unwrap();\n             assert!(any.is::<u16>());"}, {"sha": "c5f452d3e58e2322ba329a58e8780428d1925ac7", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -828,7 +828,7 @@ mod tests {\n         let m = Arc::new(Mutex::new());\n         let m2 = m.clone();\n \n-        let result: result::Result<(), Box<Any:Send>> = task::try(proc() {\n+        let result: result::Result<(), Box<Any + Send>> = task::try(proc() {\n             let _lock = m2.lock();\n             fail!();\n         });\n@@ -1068,7 +1068,7 @@ mod tests {\n         let x = Arc::new(RWLock::new());\n         let x2 = x.clone();\n \n-        let result: result::Result<(), Box<Any:Send>> = task::try(proc() {\n+        let result: result::Result<(), Box<Any + Send>> = task::try(proc() {\n             lock_rwlock_in_mode(&x2, mode1, || {\n                 fail!();\n             })"}, {"sha": "8ac54a191f295031c44bbf920054a0902872a7ec", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -32,23 +32,6 @@ pub struct CrateId {\n }\n \n impl fmt::Show for CrateId {\n-    #[cfg(stage0)]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{}\", self.path));\n-        let version = match self.version {\n-            None => \"0.0\",\n-            Some(ref version) => version.as_slice(),\n-        };\n-        if self.path == self.name ||\n-                self.path\n-                    .as_slice()\n-                    .ends_with(format!(\"/{}\", self.name).as_slice()) {\n-            write!(f, \"\\\\#{}\", version)\n-        } else {\n-            write!(f, \"\\\\#{}:{}\", self.name, version)\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{}\", self.path));\n         let version = match self.version {"}, {"sha": "16c463f0c96fffd1a050edd39e3ace962218cbc9", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -118,7 +118,7 @@ impl SpanHandler {\n // others log errors for later reporting.\n pub struct Handler {\n     err_count: Cell<uint>,\n-    emit: RefCell<Box<Emitter:Send>>,\n+    emit: RefCell<Box<Emitter + Send>>,\n }\n \n impl Handler {\n@@ -187,7 +187,7 @@ pub fn default_handler(color_config: ColorConfig) -> Handler {\n     mk_handler(box EmitterWriter::stderr(color_config))\n }\n \n-pub fn mk_handler(e: Box<Emitter:Send>) -> Handler {\n+pub fn mk_handler(e: Box<Emitter + Send>) -> Handler {\n     Handler {\n         err_count: Cell::new(0),\n         emit: RefCell::new(e),\n@@ -281,8 +281,8 @@ pub struct EmitterWriter {\n }\n \n enum Destination {\n-    Terminal(Box<term::Terminal<Box<Writer:Send>>:Send>),\n-    Raw(Box<Writer:Send>),\n+    Terminal(Box<term::Terminal<Box<Writer + Send>> + Send>),\n+    Raw(Box<Writer + Send>),\n }\n \n impl EmitterWriter {\n@@ -306,7 +306,7 @@ impl EmitterWriter {\n         }\n     }\n \n-    pub fn new(dst: Box<Writer:Send>) -> EmitterWriter {\n+    pub fn new(dst: Box<Writer + Send>) -> EmitterWriter {\n         EmitterWriter { dst: Raw(dst) }\n     }\n }"}, {"sha": "50b1639484d9415385357240cc69d669db1a3179", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -145,29 +145,6 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     inputs.push((constraint, input));\n                 }\n             }\n-            #[cfg(stage0)]\n-            Clobbers => {\n-                let mut clobs = Vec::new();\n-                while p.token != token::EOF &&\n-                      p.token != token::COLON &&\n-                      p.token != token::MOD_SEP {\n-\n-                    if clobs.len() != 0 {\n-                        p.eat(&token::COMMA);\n-                    }\n-\n-                    let (s, _str_style) = p.parse_str();\n-                    let clob = format!(\"~\\\\{{}\\\\}\", s);\n-                    clobs.push(clob);\n-\n-                    if OPTIONS.iter().any(|opt| s.equiv(opt)) {\n-                        cx.span_warn(p.last_span, \"expected a clobber, but found an option\");\n-                    }\n-                }\n-\n-                cons = clobs.connect(\",\");\n-            }\n-            #[cfg(not(stage0))]\n             Clobbers => {\n                 let mut clobs = Vec::new();\n                 while p.token != token::EOF &&"}, {"sha": "960894e69636aa637a39e9ef4c5674bd537a0612", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -257,13 +257,13 @@ pub enum SyntaxExtension {\n     /// A normal, function-like syntax extension.\n     ///\n     /// `bytes!` is a `NormalTT`.\n-    NormalTT(Box<MacroExpander:'static>, Option<Span>),\n+    NormalTT(Box<MacroExpander + 'static>, Option<Span>),\n \n     /// A function-like syntax extension that has an extra ident before\n     /// the block.\n     ///\n     /// `macro_rules!` is an `IdentTT`.\n-    IdentTT(Box<IdentMacroExpander:'static>, Option<Span>),\n+    IdentTT(Box<IdentMacroExpander + 'static>, Option<Span>),\n }\n \n pub type NamedSyntaxExtension = (Name, SyntaxExtension);"}, {"sha": "e47080dadfd72361dd5eb1cfc94b62e5b5b13736", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -90,13 +90,6 @@ impl<'a> ParserAttr for Parser<'a> {\n                 let hi = self.span.hi;\n                 (mk_sp(lo, hi), meta_item, style)\n             }\n-            #[cfg(stage0)]\n-            _ => {\n-                let token_str = self.this_token_to_str();\n-                self.fatal(format!(\"expected `\\\\#` but found `{}`\",\n-                                   token_str).as_slice());\n-            }\n-            #[cfg(not(stage0))]\n             _ => {\n                 let token_str = self.this_token_to_str();\n                 self.fatal(format!(\"expected `#` but found `{}`\","}, {"sha": "8b50a6270bca56077c32330e5666c7cb6cd9f07b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 37, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -302,7 +302,7 @@ pub struct Parser<'a> {\n     pub tokens_consumed: uint,\n     pub restriction: restriction,\n     pub quote_depth: uint, // not (yet) related to the quasiquoter\n-    pub reader: Box<Reader:>,\n+    pub reader: Box<Reader>,\n     pub interner: Rc<token::IdentInterner>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice\n@@ -325,7 +325,8 @@ fn is_plain_ident_or_underscore(t: &token::Token) -> bool {\n }\n \n impl<'a> Parser<'a> {\n-    pub fn new(sess: &'a ParseSess, cfg: ast::CrateConfig, mut rdr: Box<Reader:>) -> Parser<'a> {\n+    pub fn new(sess: &'a ParseSess, cfg: ast::CrateConfig,\n+               mut rdr: Box<Reader>) -> Parser<'a> {\n         let tok0 = rdr.next_token();\n         let span = tok0.sp;\n         let placeholder = TokenAndSpan {\n@@ -1232,13 +1233,6 @@ impl<'a> Parser<'a> {\n                 })\n               }\n \n-              #[cfg(stage0)]\n-              _ => {\n-                  let token_str = p.this_token_to_str();\n-                  p.fatal((format!(\"expected `;` or `\\\\{` but found `{}`\",\n-                                   token_str)).as_slice())\n-              }\n-              #[cfg(not(stage0))]\n               _ => {\n                   let token_str = p.this_token_to_str();\n                   p.fatal((format!(\"expected `;` or `{{` but found `{}`\",\n@@ -1645,12 +1639,9 @@ impl<'a> Parser<'a> {\n         }\n \n         // Next, parse a plus and bounded type parameters, if applicable.\n-        //\n-        // NOTE(stage0, pcwalton): Remove `token::COLON` after a snapshot.\n         let bounds = if mode == LifetimeAndTypesAndBounds {\n             let bounds = {\n-                if self.eat(&token::BINOP(token::PLUS)) ||\n-                        self.eat(&token::COLON) {\n+                if self.eat(&token::BINOP(token::PLUS)) {\n                     let (_, bounds) = self.parse_ty_param_bounds(false);\n                     Some(bounds)\n                 } else {\n@@ -3208,21 +3199,6 @@ impl<'a> Parser<'a> {\n             // consuming more tokens).\n             let (bra, ket) = match token::close_delimiter_for(&self.token) {\n                 Some(ket) => (self.token.clone(), ket),\n-                #[cfg(stage0)]\n-                None      => {\n-                    // we only expect an ident if we didn't parse one\n-                    // above.\n-                    let ident_str = if id == token::special_idents::invalid {\n-                        \"identifier, \"\n-                    } else {\n-                        \"\"\n-                    };\n-                    let tok_str = self.this_token_to_str();\n-                    self.fatal(format!(\"expected {}`(` or `\\\\{`, but found `{}`\",\n-                                       ident_str,\n-                                       tok_str).as_slice())\n-                }\n-                #[cfg(not(stage0))]\n                 None      => {\n                     // we only expect an ident if we didn't parse one\n                     // above.\n@@ -4153,15 +4129,6 @@ impl<'a> Parser<'a> {\n                 self.bump();\n             }\n             token::RBRACE => {}\n-            #[cfg(stage0)]\n-            _ => {\n-                let span = self.span;\n-                let token_str = self.this_token_to_str();\n-                self.span_fatal(span,\n-                                format!(\"expected `,`, or `\\\\}` but found `{}`\",\n-                                        token_str).as_slice())\n-            }\n-            #[cfg(not(stage0))]\n             _ => {\n                 let span = self.span;\n                 let token_str = self.this_token_to_str();"}, {"sha": "472501754859892ed2b859ad85676def460d9a74", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -68,51 +68,51 @@ mod win;\n #[cfg(not(windows))]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be\n /// opened.\n-pub fn stdout() -> Option<Box<Terminal<Box<Writer:Send>>:Send>> {\n-    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n-        = Terminal::new(box std::io::stdout() as Box<Writer:Send>);\n-    ti.map(|t| box t as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n+pub fn stdout() -> Option<Box<Terminal<Box<Writer + Send>> + Send>> {\n+    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n+        = Terminal::new(box std::io::stdout() as Box<Writer + Send>);\n+    ti.map(|t| box t as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n }\n \n #[cfg(windows)]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be\n /// opened.\n-pub fn stdout() -> Option<Box<Terminal<Box<Writer:Send>:Send>:Send>> {\n-    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n-        = Terminal::new(box std::io::stdout() as Box<Writer:Send>);\n+pub fn stdout() -> Option<Box<Terminal<Box<Writer + Send> + Send> + Send>> {\n+    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n+        = Terminal::new(box std::io::stdout() as Box<Writer + Send>);\n \n     match ti {\n-        Some(t) => Some(box t as Box<Terminal<Box<Writer:Send>:Send>:Send>),\n+        Some(t) => Some(box t as Box<Terminal<Box<Writer + Send> + Send> + Send>),\n         None => {\n-            let wc: Option<WinConsole<Box<Writer:Send>>>\n-                = Terminal::new(box std::io::stdout() as Box<Writer:Send>);\n-            wc.map(|w| box w as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n+            let wc: Option<WinConsole<Box<Writer + Send>>>\n+                = Terminal::new(box std::io::stdout() as Box<Writer + Send>);\n+            wc.map(|w| box w as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n         }\n     }\n }\n \n #[cfg(not(windows))]\n /// Return a Terminal wrapping stderr, or None if a terminal couldn't be\n /// opened.\n-pub fn stderr() -> Option<Box<Terminal<Box<Writer:Send>:Send>:Send>:Send> {\n-    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n-        = Terminal::new(box std::io::stderr() as Box<Writer:Send>);\n-    ti.map(|t| box t as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n+pub fn stderr() -> Option<Box<Terminal<Box<Writer + Send> + Send> + Send> + Send> {\n+    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n+        = Terminal::new(box std::io::stderr() as Box<Writer + Send>);\n+    ti.map(|t| box t as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n }\n \n #[cfg(windows)]\n /// Return a Terminal wrapping stderr, or None if a terminal couldn't be\n /// opened.\n-pub fn stderr() -> Option<Box<Terminal<Box<Writer:Send>:Send>:Send>> {\n-    let ti: Option<TerminfoTerminal<Box<Writer:Send>>>\n-        = Terminal::new(box std::io::stderr() as Box<Writer:Send>);\n+pub fn stderr() -> Option<Box<Terminal<Box<Writer + Send> + Send> + Send>> {\n+    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n+        = Terminal::new(box std::io::stderr() as Box<Writer + Send>);\n \n     match ti {\n-        Some(t) => Some(box t as Box<Terminal<Box<Writer:Send>:Send>:Send>),\n+        Some(t) => Some(box t as Box<Terminal<Box<Writer + Send> + Send> + Send>),\n         None => {\n-            let wc: Option<WinConsole<Box<Writer:Send>>>\n-                = Terminal::new(box std::io::stderr() as Box<Writer:Send>);\n-            wc.map(|w| box w as Box<Terminal<Box<Writer:Send>:Send>:Send>)\n+            let wc: Option<WinConsole<Box<Writer + Send>>>\n+                = Terminal::new(box std::io::stderr() as Box<Writer + Send>);\n+            wc.map(|w| box w as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n         }\n     }\n }"}, {"sha": "e7c35fb59eee560e219a5c6d551f2848b19a57ba", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -346,16 +346,16 @@ environment variable. Logging is not captured by default.\n \n Test Attributes:\n \n-    \\#[test]        - Indicates a function is a test to be run. This function\n+    #[test]        - Indicates a function is a test to be run. This function\n                      takes no arguments.\n-    \\#[bench]       - Indicates a function is a benchmark to be run. This\n+    #[bench]       - Indicates a function is a benchmark to be run. This\n                      function takes one argument (test::Bencher).\n-    \\#[should_fail] - This function (also labeled with \\#[test]) will only pass if\n+    #[should_fail] - This function (also labeled with #[test]) will only pass if\n                      the code causes a failure (an assertion failure or fail!)\n-    \\#[ignore]      - When applied to a function which is already attributed as a\n+    #[ignore]      - When applied to a function which is already attributed as a\n                      test, then the test runner will ignore these tests during\n                      normal test runs. Running with --ignored will run these\n-                     tests. This may also be written as \\#[ignore(cfg(...))] to\n+                     tests. This may also be written as #[ignore(cfg(...))] to\n                      ignore the test on certain configurations.\",\n              usage = getopts::usage(message.as_slice(),\n                                     optgroups().as_slice()));\n@@ -473,7 +473,7 @@ pub enum TestResult {\n }\n \n enum OutputLocation<T> {\n-    Pretty(Box<term::Terminal<Box<Writer:Send>>:Send>),\n+    Pretty(Box<term::Terminal<Box<Writer + Send>> + Send>),\n     Raw(T),\n }\n \n@@ -1049,8 +1049,8 @@ pub fn run_test(opts: &TestOpts,\n             if nocapture {\n                 drop((stdout, stderr));\n             } else {\n-                task.opts.stdout = Some(box stdout as Box<Writer:Send>);\n-                task.opts.stderr = Some(box stderr as Box<Writer:Send>);\n+                task.opts.stdout = Some(box stdout as Box<Writer + Send>);\n+                task.opts.stderr = Some(box stderr as Box<Writer + Send>);\n             }\n             let result_future = task.future_result();\n             task.spawn(testfn);"}, {"sha": "d528cb16e72dc73c2057a0cde7f61157d1dcb3a7", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -1,3 +1,11 @@\n+S 2014-06-14 2c6caad\n+  freebsd-x86_64 0152ba43f238014f0aede7c29f1c684c21077b0b\n+  linux-i386 2eb1897c25abe0d5978ff03171ca943e92666046\n+  linux-x86_64 c974465b482334461bf9771864eee3873e3cb3f9\n+  macos-i386 5b138c0ea9028ec56ed215ad86ec3e69e5a9ffd3\n+  macos-x86_64 294afb78328d63c7774f07303ef7138219ee02e7\n+  winnt-i386 303afde8b5ca002c151f42df727d6ae701d086cd\n+\n S 2014-06-11 f9260d4\n   freebsd-x86_64 57f155da12e561a277506f999a616ff689a55dcc\n   linux-i386 df46b5dab3620375d6175c284ea0aeb3f9c6a11e"}, {"sha": "bff8ba629aa1416e1241f49c878b00584ba149a5", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -27,7 +27,7 @@ impl Foo for B {\n }\n \n struct A {\n-    v: Box<Foo:Send>,\n+    v: Box<Foo + Send>,\n }\n \n fn main() {"}, {"sha": "6921acde45e252bb03764838d7a8b796c59bda55", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -15,8 +15,8 @@ impl<A:Clone> Repeat<A> for A {\n     fn get(&self) -> A { self.clone() }\n }\n \n-fn repeater<A:Clone>(v: A) -> Box<Repeat<A>:> {\n-    box v as Box<Repeat<A>:> // No\n+fn repeater<A:Clone>(v: A) -> Box<Repeat<A>> {\n+    box v as Box<Repeat<A>> // No\n }\n \n fn main() {"}, {"sha": "dc6e8b1d6be5f73ea1994e5524beac0f637996f9", "filename": "src/test/compile-fail/owned-ptr-static-bound.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fowned-ptr-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fowned-ptr-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fowned-ptr-static-bound.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -15,16 +15,16 @@ struct B<'a, T>(&'a A<T>);\n trait X {}\n impl<'a, T> X for B<'a, T> {}\n \n-fn f<'a, T, U>(v: Box<A<T>>) -> Box<X:> {\n-    box B(v) as Box<X:> //~ ERROR value may contain references; add `'static` bound to `T`\n+fn f<'a, T, U>(v: Box<A<T>>) -> Box<X> {\n+    box B(v) as Box<X> //~ ERROR value may contain references; add `'static` bound to `T`\n }\n \n-fn g<'a, T, U>(v: Box<A<U>>) -> Box<X:> {\n-    box B(v) as Box<X:> //~ ERROR value may contain references; add `'static` bound to `U`\n+fn g<'a, T, U>(v: Box<A<U>>) -> Box<X> {\n+    box B(v) as Box<X> //~ ERROR value may contain references; add `'static` bound to `U`\n }\n \n-fn h<'a, T: 'static>(v: Box<A<T>>) -> Box<X:> {\n-    box B(v) as Box<X:> // ok\n+fn h<'a, T: 'static>(v: Box<A<T>>) -> Box<X> {\n+    box B(v) as Box<X> // ok\n }\n \n fn main() {}"}, {"sha": "de3b2faef861f4826fc2552be58ebc7f2749f0a6", "filename": "src/test/compile-fail/regions-bound-lists-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bound-lists-feature-gate.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -11,7 +11,7 @@\n \n trait Foo { }\n \n-fn foo<'a>(x: Box<Foo:'a>) { //~ ERROR only the 'static lifetime is accepted here\n+fn foo<'a>(x: Box<Foo + 'a>) { //~ ERROR only the 'static lifetime is accepted here\n }\n \n fn bar<'a, T:'a>() { //~ ERROR only the 'static lifetime is accepted here"}, {"sha": "f0f388a5a078e4ce698666352d5ee51c9bb6a4d0", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -13,7 +13,7 @@ trait Foo {\n \n // This should emit the less confusing error, not the more confusing one.\n \n-fn foo(_x: Foo:Send) {\n+fn foo(_x: Foo + Send) {\n     //~^ERROR reference to trait `Foo` where a type is expected; try `Box<Foo>` or `&Foo`\n }\n "}, {"sha": "38c7814460147c0cfb975e50e24d8d6f080ebe8b", "filename": "src/test/compile-fail/trait-bounds-not-on-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-impl.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -13,7 +13,7 @@ trait Foo {\n \n struct Bar;\n \n-impl Foo:Owned for Bar { //~ ERROR bounded traits are only valid in type position\n+impl Foo + Owned for Bar { //~ ERROR bounded traits are only valid in type position\n }\n \n fn main() { }"}, {"sha": "0a5909ff2efbebdaf4b69b790edb4e28c1c2dcad", "filename": "src/test/compile-fail/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -11,6 +11,6 @@\n \n struct Foo;\n \n-fn foo(_x: Box<Foo:Send>) { } //~ ERROR kind bounds can only be used on trait types\n+fn foo(_x: Box<Foo + Send>) { } //~ ERROR kind bounds can only be used on trait types\n \n fn main() { }"}, {"sha": "dec53672d87f28841d12df25c758a273f8ad9116", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -29,11 +29,11 @@ impl<A:Clone> Invokable<A> for Invoker<A> {\n     }\n }\n \n-fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>:> {\n+fn f<A:Clone + 'static>(a: A, b: u16) -> Box<Invokable<A>> {\n     box Invoker {\n         a: a,\n         b: b,\n-    } as (Box<Invokable<A>>+)\n+    } as (Box<Invokable<A>>)\n }\n \n pub fn main() {"}, {"sha": "e331173a1589d871066e35347af35facc4a1890d", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -12,8 +12,8 @@\n trait hax { }\n impl<A> hax for A { }\n \n-fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax:> {\n-    box x as Box<hax:>\n+fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax> {\n+    box x as Box<hax>\n }\n \n fn deadcode() {"}, {"sha": "622b35b93aeadcf5ad19cecadc11b79f7c34558a", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -12,8 +12,8 @@\n trait hax { }\n impl<A> hax for A { }\n \n-fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax:> {\n-    box x as Box<hax:>\n+fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax> {\n+    box x as Box<hax>\n }\n \n fn deadcode() {"}, {"sha": "47a09d55438e40ec9dc301c3fd15af26e3154205", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -20,6 +20,6 @@ pub fn main() {}\n trait A {}\n impl<T: 'static> A for T {}\n \n-fn owned1<T: 'static>(a: T) { box a as Box<A:>; } /* note `:` */\n-fn owned2<T: 'static>(a: Box<T>) { a as Box<A:>; }\n-fn owned3<T: 'static>(a: Box<T>) { box a as Box<A:>; }\n+fn owned1<T: 'static>(a: T) { box a as Box<A+>; } /* note `:` */\n+fn owned2<T: 'static>(a: Box<T>) { a as Box<A>; }\n+fn owned3<T: 'static>(a: Box<T>) { box a as Box<A>; }"}, {"sha": "ed8115cd6cad0c41d42d605966c15bad11fcf313", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -17,9 +17,9 @@ impl<A:Clone + 'static> repeat<A> for Box<A> {\n     }\n }\n \n-fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<repeat<A>:> {\n+fn repeater<A:Clone + 'static>(v: Box<A>) -> Box<repeat<A>> {\n     // Note: owned kind is not necessary as A appears in the trait type\n-    box v as Box<repeat<A>:> // No\n+    box v as Box<repeat<A>> // No\n }\n \n pub fn main() {"}, {"sha": "815488b8c66e0e792cb8860bd362c9e85ca53aae", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -31,10 +31,10 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foos: Vec<Box<FooTrait:>> = vec!(\n-        box BarStruct{ x: box(GC) 0 } as Box<FooTrait:>,\n-        box BarStruct{ x: box(GC) 1 } as Box<FooTrait:>,\n-        box BarStruct{ x: box(GC) 2 } as Box<FooTrait:>\n+    let foos: Vec<Box<FooTrait>> = vec!(\n+        box BarStruct{ x: box(GC) 0 } as Box<FooTrait>,\n+        box BarStruct{ x: box(GC) 1 } as Box<FooTrait>,\n+        box BarStruct{ x: box(GC) 2 } as Box<FooTrait>\n     );\n \n     for i in range(0u, foos.len()) {"}, {"sha": "540593c43fbfd6b84f59381b6f4158cf28c6c81f", "filename": "src/test/run-pass/objects-owned-object-owned-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-owned-method.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -28,6 +28,6 @@ impl FooTrait for BarStruct {\n }\n \n pub fn main() {\n-    let foo = box BarStruct{ x: 22 } as Box<FooTrait:>;\n+    let foo = box BarStruct{ x: 22 } as Box<FooTrait>;\n     assert_eq!(22, foo.foo());\n }"}, {"sha": "fbc2829816567b9e50f00e1bd83a1409eff7ae00", "filename": "src/test/run-pass/parameterized-trait-with-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparameterized-trait-with-bounds.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -19,10 +19,10 @@ mod foo {\n     pub trait D<'a, T> {}\n }\n \n-fn foo1<T>(_: &A<T>: Send) {}\n-fn foo2<T>(_: Box<A<T>: Send + Share>) {}\n-fn foo3<T>(_: Box<B<int, uint>: 'static>) {}\n-fn foo4<'a, T>(_: Box<C<'a, T>: 'static + Send>) {}\n-fn foo5<'a, T>(_: Box<foo::D<'a, T>: 'static + Send>) {}\n+fn foo1<T>(_: &A<T> + Send) {}\n+fn foo2<T>(_: Box<A<T> + Send + Share>) {}\n+fn foo3<T>(_: Box<B<int, uint> + 'static>) {}\n+fn foo4<'a, T>(_: Box<C<'a, T> + 'static + Send>) {}\n+fn foo5<'a, T>(_: Box<foo::D<'a, T> + 'static + Send>) {}\n \n pub fn main() {}"}, {"sha": "c5baecf7272fae1311fb9abc3918998897c709ed", "filename": "src/test/run-pass/regions-bound-lists-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-bound-lists-feature-gate.rs?ref=7ec78053ec5fcabd5f8ca98627dd45bfa5fc4cd4", "patch": "@@ -15,10 +15,10 @@\n \n trait Foo { }\n \n-fn foo<'a>(x: Box<Foo:'a>) {\n+fn foo<'a>(x: Box<Foo + 'a>) {\n }\n \n-fn bar<'a, T:'a>() {\n+fn bar<'a, T: 'a>() {\n }\n \n pub fn main() { }"}]}