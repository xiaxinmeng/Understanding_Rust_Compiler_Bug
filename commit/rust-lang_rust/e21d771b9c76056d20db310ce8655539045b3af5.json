{"sha": "e21d771b9c76056d20db310ce8655539045b3af5", "node_id": "C_kwDOAAsO6NoAKGUyMWQ3NzFiOWM3NjA1NmQyMGRiMzEwY2U4NjU1NTM5MDQ1YjNhZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T08:28:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T08:28:08Z"}, "message": "Auto merge of #100943 - jyn514:query-system-2, r=cjgillot\n\nSimplify the `define_query` macro\n\nThis moves a bunch of control flow out of the macro into generic functions, leaving the macro just to call the function with a new generic parameter for each query.\n\nIt may be possible to improve compile-times / icache by instantiating the generic functions only with the query key, not the query type itself, but I'm going to leave that for a follow-up PR.\n\nHelps with https://github.com/rust-lang/rust/issues/96524.\n\nr? `@cjgillot`", "tree": {"sha": "b53949a69122e0da6b9cd449db95e6f877e48a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b53949a69122e0da6b9cd449db95e6f877e48a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e21d771b9c76056d20db310ce8655539045b3af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e21d771b9c76056d20db310ce8655539045b3af5", "html_url": "https://github.com/rust-lang/rust/commit/e21d771b9c76056d20db310ce8655539045b3af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e21d771b9c76056d20db310ce8655539045b3af5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b10aed0084e3fb32b365dba06a1b644c3b0f438b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b10aed0084e3fb32b365dba06a1b644c3b0f438b", "html_url": "https://github.com/rust-lang/rust/commit/b10aed0084e3fb32b365dba06a1b644c3b0f438b"}, {"sha": "4e09a13bb848a64acf6bb20359f582e813e74764", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e09a13bb848a64acf6bb20359f582e813e74764", "html_url": "https://github.com/rust-lang/rust/commit/4e09a13bb848a64acf6bb20359f582e813e74764"}], "stats": {"total": 179, "additions": 97, "deletions": 82}, "files": [{"sha": "65d5f755f72482173aafada909ce89241ff9ebaf", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -100,7 +100,7 @@ macro_rules! arena_types {\n             [decode] is_late_bound_map: rustc_data_structures::fx::FxIndexSet<rustc_hir::def_id::LocalDefId>,\n             [decode] impl_source: rustc_middle::traits::ImplSource<'tcx, ()>,\n \n-            [] dep_kind: rustc_middle::dep_graph::DepKindStruct,\n+            [] dep_kind: rustc_middle::dep_graph::DepKindStruct<'tcx>,\n         ]);\n     )\n }"}, {"sha": "7718906ac4ee7976aad733815b6d6637e66ce014", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -74,7 +74,7 @@ pub use rustc_query_system::dep_graph::{DepContext, DepNodeParams};\n /// Information is retrieved by indexing the `DEP_KINDS` array using the integer value\n /// of the `DepKind`. Overall, this allows to implement `DepContext` using this manual\n /// jump table instead of large matches.\n-pub struct DepKindStruct {\n+pub struct DepKindStruct<'tcx> {\n     /// Anonymous queries cannot be replayed from one compiler invocation to the next.\n     /// When their result is needed, it is recomputed. They are useful for fine-grained\n     /// dependency tracking, and caching within one compiler invocation.\n@@ -124,10 +124,10 @@ pub struct DepKindStruct {\n     /// with kind `MirValidated`, we know that the GUID/fingerprint of the `DepNode`\n     /// is actually a `DefPathHash`, and can therefore just look up the corresponding\n     /// `DefId` in `tcx.def_path_hash_to_def_id`.\n-    pub force_from_dep_node: Option<fn(tcx: TyCtxt<'_>, dep_node: DepNode) -> bool>,\n+    pub force_from_dep_node: Option<fn(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool>,\n \n     /// Invoke a query to put the on-disk cached value in memory.\n-    pub try_load_from_on_disk_cache: Option<fn(TyCtxt<'_>, DepNode)>,\n+    pub try_load_from_on_disk_cache: Option<fn(TyCtxt<'tcx>, DepNode)>,\n }\n \n impl DepKind {"}, {"sha": "7a990773ab87577e375a0c9d79f8c13dee3cc320", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1089,7 +1089,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub queries: &'tcx dyn query::QueryEngine<'tcx>,\n     pub query_caches: query::QueryCaches<'tcx>,\n-    query_kinds: &'tcx [DepKindStruct],\n+    query_kinds: &'tcx [DepKindStruct<'tcx>],\n \n     // Internal caches for metadata decoding. No need to track deps on this.\n     pub ty_rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n@@ -1246,7 +1246,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n-        query_kinds: &'tcx [DepKindStruct],\n+        query_kinds: &'tcx [DepKindStruct<'tcx>],\n         crate_name: &str,\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n@@ -1296,7 +1296,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub(crate) fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {\n+    pub(crate) fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct<'tcx> {\n         &self.query_kinds[k as usize]\n     }\n "}, {"sha": "274df5b5e5e9415679ffd389b9ab3ee5626c9e18", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 87, "deletions": 75, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -7,13 +7,16 @@ use crate::{on_disk_cache, Queries};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lock;\n use rustc_errors::{Diagnostic, Handler};\n-use rustc_middle::dep_graph::{self, DepKind, DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_middle::dep_graph::{\n+    self, DepKind, DepKindStruct, DepNode, DepNodeIndex, SerializedDepNodeIndex,\n+};\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_query_system::dep_graph::HasDepContext;\n+use rustc_query_system::dep_graph::{DepNodeParams, HasDepContext};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_query_system::query::{\n-    QueryContext, QueryJobId, QueryMap, QuerySideEffects, QueryStackFrame,\n+    force_query, QueryConfig, QueryContext, QueryDescription, QueryJobId, QueryMap,\n+    QuerySideEffects, QueryStackFrame,\n };\n use std::any::Any;\n use std::num::NonZeroU64;\n@@ -298,6 +301,66 @@ pub(crate) fn create_query_frame<\n     QueryStackFrame::new(name, description, span, def_kind, hash)\n }\n \n+fn try_load_from_on_disk_cache<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode)\n+where\n+    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+{\n+    debug_assert!(tcx.dep_graph.is_green(&dep_node));\n+\n+    let key = Q::Key::recover(tcx, &dep_node).unwrap_or_else(|| {\n+        panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash)\n+    });\n+    if Q::cache_on_disk(tcx, &key) {\n+        let _ = Q::execute_query(tcx, key);\n+    }\n+}\n+\n+fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n+where\n+    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+{\n+    if let Some(key) = Q::Key::recover(tcx, &dep_node) {\n+        #[cfg(debug_assertions)]\n+        let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();\n+        let tcx = QueryCtxt::from_tcx(tcx);\n+        force_query::<Q, _>(tcx, key, dep_node);\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+pub(crate) fn query_callback<'tcx, Q: QueryConfig>(\n+    is_anon: bool,\n+    is_eval_always: bool,\n+) -> DepKindStruct<'tcx>\n+where\n+    Q: QueryDescription<QueryCtxt<'tcx>>,\n+    Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n+{\n+    let fingerprint_style = Q::Key::fingerprint_style();\n+\n+    if is_anon || !fingerprint_style.reconstructible() {\n+        return DepKindStruct {\n+            is_anon,\n+            is_eval_always,\n+            fingerprint_style,\n+            force_from_dep_node: None,\n+            try_load_from_on_disk_cache: None,\n+        };\n+    }\n+\n+    DepKindStruct {\n+        is_anon,\n+        is_eval_always,\n+        fingerprint_style,\n+        force_from_dep_node: Some(force_from_dep_node::<Q>),\n+        try_load_from_on_disk_cache: Some(try_load_from_on_disk_cache::<Q>),\n+    }\n+}\n+\n // NOTE: `$V` isn't used here, but we still need to match on it so it can be passed to other macros\n // invoked by `rustc_query_append`.\n macro_rules! define_queries {\n@@ -308,18 +371,6 @@ macro_rules! define_queries {\n             input: ($(([$($modifiers)*] [$($attr)*] [$name]))*)\n         }\n \n-        mod make_query {\n-            use super::*;\n-\n-            // Create an eponymous constructor for each query.\n-            $(#[allow(nonstandard_style)] $(#[$attr])*\n-            pub fn $name<'tcx>(tcx: QueryCtxt<'tcx>, key: <queries::$name<'tcx> as QueryConfig>::Key) -> QueryStackFrame {\n-                let kind = dep_graph::DepKind::$name;\n-                let name = stringify!($name);\n-                $crate::plumbing::create_query_frame(tcx, queries::$name::describe, key, kind, name)\n-            })*\n-        }\n-\n         #[allow(nonstandard_style)]\n         mod queries {\n             use std::marker::PhantomData;\n@@ -373,18 +424,19 @@ macro_rules! define_queries {\n                     try_load_from_disk: Self::TRY_LOAD_FROM_DISK,\n                 }\n             }\n+\n+            fn execute_query(tcx: TyCtxt<'tcx>, k: Self::Key) -> Self::Stored {\n+                tcx.$name(k)\n+            }\n         })*\n \n         #[allow(nonstandard_style)]\n         mod query_callbacks {\n             use super::*;\n-            use rustc_middle::dep_graph::DepNode;\n-            use rustc_query_system::dep_graph::DepNodeParams;\n-            use rustc_query_system::query::{force_query, QueryDescription};\n             use rustc_query_system::dep_graph::FingerprintStyle;\n \n             // We use this for most things when incr. comp. is turned off.\n-            pub fn Null() -> DepKindStruct {\n+            pub fn Null<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -395,7 +447,7 @@ macro_rules! define_queries {\n             }\n \n             // We use this for the forever-red node.\n-            pub fn Red() -> DepKindStruct {\n+            pub fn Red<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -405,7 +457,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            pub fn TraitSelect() -> DepKindStruct {\n+            pub fn TraitSelect<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: true,\n                     is_eval_always: false,\n@@ -415,7 +467,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            pub fn CompileCodegenUnit() -> DepKindStruct {\n+            pub fn CompileCodegenUnit<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -425,7 +477,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            pub fn CompileMonoItem() -> DepKindStruct {\n+            pub fn CompileMonoItem<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -435,60 +487,15 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            $(pub(crate) fn $name()-> DepKindStruct {\n-                let is_anon = is_anon!([$($modifiers)*]);\n-                let is_eval_always = is_eval_always!([$($modifiers)*]);\n-\n-                let fingerprint_style =\n-                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::fingerprint_style();\n-\n-                if is_anon || !fingerprint_style.reconstructible() {\n-                    return DepKindStruct {\n-                        is_anon,\n-                        is_eval_always,\n-                        fingerprint_style,\n-                        force_from_dep_node: None,\n-                        try_load_from_on_disk_cache: None,\n-                    }\n-                }\n-\n-                #[inline(always)]\n-                fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> Option<<queries::$name<'tcx> as QueryConfig>::Key> {\n-                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::recover(tcx, &dep_node)\n-                }\n-\n-                fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: DepNode) -> bool {\n-                    if let Some(key) = recover(tcx, dep_node) {\n-                        #[cfg(debug_assertions)]\n-                        let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();\n-                        let tcx = QueryCtxt::from_tcx(tcx);\n-                        force_query::<queries::$name<'_>, _>(tcx, key, dep_node);\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                }\n-\n-                fn try_load_from_on_disk_cache(tcx: TyCtxt<'_>, dep_node: DepNode) {\n-                    debug_assert!(tcx.dep_graph.is_green(&dep_node));\n-\n-                    let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n-                    if queries::$name::cache_on_disk(tcx, &key) {\n-                        let _ = tcx.$name(key);\n-                    }\n-                }\n-\n-                DepKindStruct {\n-                    is_anon,\n-                    is_eval_always,\n-                    fingerprint_style,\n-                    force_from_dep_node: Some(force_from_dep_node),\n-                    try_load_from_on_disk_cache: Some(try_load_from_on_disk_cache),\n-                }\n+            $(pub(crate) fn $name<'tcx>()-> DepKindStruct<'tcx> {\n+                $crate::plumbing::query_callback::<queries::$name<'tcx>>(\n+                    is_anon!([$($modifiers)*]),\n+                    is_eval_always!([$($modifiers)*]),\n+                )\n             })*\n         }\n \n-        pub fn query_callbacks<'tcx>(arena: &'tcx Arena<'tcx>) -> &'tcx [DepKindStruct] {\n+        pub fn query_callbacks<'tcx>(arena: &'tcx Arena<'tcx>) -> &'tcx [DepKindStruct<'tcx>] {\n             arena.alloc_from_iter(make_dep_kind_array!(query_callbacks))\n         }\n     }\n@@ -531,9 +538,14 @@ macro_rules! define_queries_struct {\n                 let mut jobs = QueryMap::default();\n \n                 $(\n+                    let make_query = |tcx, key| {\n+                        let kind = dep_graph::DepKind::$name;\n+                        let name = stringify!($name);\n+                        $crate::plumbing::create_query_frame(tcx, queries::$name::describe, key, kind, name)\n+                    };\n                     self.$name.try_collect_active_jobs(\n                         tcx,\n-                        make_query::$name,\n+                        make_query,\n                         &mut jobs,\n                     )?;\n                 )*"}, {"sha": "ea38df836cbf1e4a0f9b98b8cad319644a4ad8b6", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -73,4 +73,7 @@ pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n     fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVTable<CTX, Self::Key, Self::Value>;\n \n     fn cache_on_disk(tcx: CTX::DepContext, key: &Self::Key) -> bool;\n+\n+    // Don't use this method to compute query results, instead use the methods on TyCtxt\n+    fn execute_query(tcx: CTX::DepContext, k: Self::Key) -> Self::Stored;\n }"}]}