{"sha": "e0f6840bb663e68064cd4737e6dded2cc91f8fce", "node_id": "C_kwDOAAsO6NoAKGUwZjY4NDBiYjY2M2U2ODA2NGNkNDczN2U2ZGRlZDJjYzkxZjhmY2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-13T18:16:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-13T18:16:44Z"}, "message": "Rollup merge of #106793 - Mark-Simulacrum:normalize-test, r=compiler-errors\n\nNormalize test output more thoroughly\n\nThis prevents differences in local environments, which may (for example) end up with a longer backtrace with more digits in the backtrace prefix, as happened to me. While we're at it, clean more of the output up, including the exact location of the error in the compiler.\n\ncc https://github.com/rust-lang/rust/pull/106521 which introduced this test", "tree": {"sha": "53f9879615070950232535b004b65402cf29ed3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53f9879615070950232535b004b65402cf29ed3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f6840bb663e68064cd4737e6dded2cc91f8fce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwaAMCRBK7hj4Ov3rIwAAQo8IAETaPpjakkVxyiWc0fdYZdgl\n3gQRLIa2mJYAG1an2y1KNm9doQ6iDdeXuQF/ISapxGblOeGKwivrY1dZSFKC4nA/\nXnJuatVG83UaDxc1SViaMoagTDesmPQWcHlprxfdmNBip/+8/P1FH6N/0PknYPdb\n88+9DMzElwtnBbuCX+F1wb9qYvb30DGfWJX8p/TdcnylsTRNBxtMpfmhMLraTLqM\nAtiR1hm6KHgv+lux5PfDXyL3D1ubITru36dPrQ6AhfurLGL6X7kzyiHScPbwEB2p\njZ/QAURs9DY6ASKzoWsoA7/XGxrfdTQ7e6hiaULQrioMwsseaKX/+R0SttUnark=\n=3p+T\n-----END PGP SIGNATURE-----\n", "payload": "tree 53f9879615070950232535b004b65402cf29ed3e\nparent 720137b5da252d1948fb776827ea49b1842d1fdf\nparent 95ef76b8aa0563192d549314a375913ce68b4902\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673633804 +0100\ncommitter GitHub <noreply@github.com> 1673633804 +0100\n\nRollup merge of #106793 - Mark-Simulacrum:normalize-test, r=compiler-errors\n\nNormalize test output more thoroughly\n\nThis prevents differences in local environments, which may (for example) end up with a longer backtrace with more digits in the backtrace prefix, as happened to me. While we're at it, clean more of the output up, including the exact location of the error in the compiler.\n\ncc https://github.com/rust-lang/rust/pull/106521 which introduced this test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f6840bb663e68064cd4737e6dded2cc91f8fce", "html_url": "https://github.com/rust-lang/rust/commit/e0f6840bb663e68064cd4737e6dded2cc91f8fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f6840bb663e68064cd4737e6dded2cc91f8fce/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "720137b5da252d1948fb776827ea49b1842d1fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/720137b5da252d1948fb776827ea49b1842d1fdf", "html_url": "https://github.com/rust-lang/rust/commit/720137b5da252d1948fb776827ea49b1842d1fdf"}, {"sha": "95ef76b8aa0563192d549314a375913ce68b4902", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ef76b8aa0563192d549314a375913ce68b4902", "html_url": "https://github.com/rust-lang/rust/commit/95ef76b8aa0563192d549314a375913ce68b4902"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "1c69b07e3d4af0859656946d6094f3c2bb07e173", "filename": "tests/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e0f6840bb663e68064cd4737e6dded2cc91f8fce/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f6840bb663e68064cd4737e6dded2cc91f8fce/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=e0f6840bb663e68064cd4737e6dded2cc91f8fce", "patch": "@@ -2,12 +2,21 @@\n // known-bug\n // unset-rustc-env:RUST_BACKTRACE\n // compile-flags:-Z trait-solver=chalk --edition=2021\n-// error-pattern:stack backtrace:\n+// error-pattern:internal compiler error\n // failure-status:101\n-// normalize-stderr-test \"note: .*\" -> \"\"\n-// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n-// normalize-stderr-test \"  .*\\n\" -> \"\"\n // normalize-stderr-test \"DefId([^)]*)\" -> \"...\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread.*panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"stack backtrace:\\n\" -> \"\"\n+// normalize-stderr-test \"\\s\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// normalize-stderr-test \".*note: Some details.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\n\\n[ ]*\\n\" -> \"\"\n+// normalize-stderr-test \"compiler/.*: projection\" -> \"projection\"\n \n fn main() -> () {}\n "}, {"sha": "d1508cb17001b4cf807bc3dcb3a0449f2854dd98", "filename": "tests/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e0f6840bb663e68064cd4737e6dded2cc91f8fce/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0f6840bb663e68064cd4737e6dded2cc91f8fce/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=e0f6840bb663e68064cd4737e6dded2cc91f8fce", "patch": "@@ -1,29 +1,47 @@\n-error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n-LL |LL | |LL | | }\n-\n-\n-error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:14:29: 16:2] as Future>::Output` cannot be known at compilation time\n-LL |LL | |LL | | }\n-\n-\n-error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n+error[E0277]: `[async fn body@$DIR/async.rs:23:29: 25:2]` is not a future\n+  --> $DIR/async.rs:23:29\n+   |\n+LL |   async fn foo(x: u32) -> u32 {\n+   |  _____________________________-\n+LL | |     x\n+LL | | }\n+   | | ^\n+   | | |\n+   | |_`[async fn body@$DIR/async.rs:23:29: 25:2]` is not a future\n+   |   required by a bound introduced by this call\n+   |\n+   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:23:29: 25:2]`\n+   = note: [async fn body@$DIR/async.rs:23:29: 25:2] must be a future or must implement `IntoFuture` to be awaited\n+note: required by a bound in `identity_future`\n+  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+\n+error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:23:29: 25:2] as Future>::Output` cannot be known at compilation time\n+  --> $DIR/async.rs:23:29\n+   |\n+LL |   async fn foo(x: u32) -> u32 {\n+   |  _____________________________^\n+LL | |     x\n+LL | | }\n+   | |_^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:23:29: 25:2] as Future>::Output`\n+note: required by a bound in `identity_future`\n+  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n+\n+error[E0277]: `[async fn body@$DIR/async.rs:23:29: 25:2]` is not a future\n+  --> $DIR/async.rs:23:25\n+   |\n LL | async fn foo(x: u32) -> u32 {\n-\n-error: internal compiler error: compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:1114:25: projection clauses should be implied from elsewhere. obligation: `Obligation(predicate=Binder(ProjectionPredicate(AliasTy { substs: [[async fn body@$DIR/async.rs:14:29: 16:2]], def_id: ...), _use_mk_alias_ty_instead: () }, Term::Ty(u32)), []), depth=0)`\n+   |                         ^^^ `[async fn body@$DIR/async.rs:23:29: 25:2]` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:23:29: 25:2]`\n+   = note: [async fn body@$DIR/async.rs:23:29: 25:2] must be a future or must implement `IntoFuture` to be awaited\n+\n+error: internal compiler error: projection clauses should be implied from elsewhere. obligation: `Obligation(predicate=Binder(ProjectionPredicate(AliasTy { substs: [[async fn body@$DIR/async.rs:23:29: 25:2]], def_id: ...), _use_mk_alias_ty_instead: () }, Term::Ty(u32)), []), depth=0)`\n+  --> $DIR/async.rs:23:25\n+   |\n LL | async fn foo(x: u32) -> u32 {\n-\n-\n-stack backtrace:\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-query stack during panic:\n+   |                         ^^^query stack during panic:\n #0 [typeck] type-checking `foo`\n #1 [thir_body] building THIR for `foo`\n #2 [mir_built] building MIR for `foo`"}]}