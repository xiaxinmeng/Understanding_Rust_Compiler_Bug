{"sha": "d798e228eacfae98f54f15accea21ee7a3eaefcd", "node_id": "C_kwDOAAsO6NoAKGQ3OThlMjI4ZWFjZmFlOThmNTRmMTVhY2NlYTIxZWU3YTNlYWVmY2Q", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T05:26:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-31T05:26:36Z"}, "message": "Rollup merge of #106317 - compiler-errors:restore-the-backtraces, r=jyn514\n\nOnly deduplicate stack traces for good path bugs\n\nFixes #106267\n\nRestores backtraces for `bug!` and `delay_span_bug` after #106056. Only `delay_good_path_bug` needed its backtraces to be deduplicated, since it spits out the backtrace where it was created when it's being emitted.\n\nBefore:\n\n```\nerror: internal compiler error: /home/ubuntu/rust2/compiler/rustc_middle/src/ty/relate.rs:638:13: var types encountered in super_relate_consts: Const { ty: usize, kind: Infer(Var(_#0c)) } Const { ty: usize, kind: Param(N/#1) }\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.68.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [typeck] type-checking `<impl at /home/ubuntu/test.rs:7:1: 7:34>::trigger`\n#1 [typeck_item_bodies] type-checking all item bodies\n#2 [analysis] running analysis passes on this crate\nend of query stack\nerror: aborting due to 2 previous errors\n```\n\nHmm... that's a little bare.\n\nAfter:\n\n```\nerror: internal compiler error: /home/ubuntu/rust2/compiler/rustc_middle/src/ty/relate.rs:638:13: var types encountered in super_relate_consts: Const { ty: usize, kind: Infer(Var(_#0c)) } Const { ty: usize, kind: Param(N/#1) }\n\nthread 'rustc' panicked at 'Box<dyn Any>', /home/ubuntu/rust2/compiler/rustc_errors/src/lib.rs:1599:9\nstack backtrace:\n   0:     0x7ffb5b41bdd1 - std::backtrace_rs::backtrace::libunwind::trace::h26056f81198c6594\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7ffb5b41bdd1 - std::backtrace_rs::backtrace::trace_unsynchronized::hacfb345a0c6d5bb1\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7ffb5b41bdd1 - std::sys_common::backtrace::_print_fmt::h18ea6016ac8030f3\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7ffb5b41bdd1 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::he35dde201d0c2d09\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7ffb5b4a0308 - core::fmt::write::h094ad263467a053c\n                               at /home/ubuntu/rust2/library/core/src/fmt/mod.rs:1208:17\n   5:     0x7ffb5b43caf1 - std::io::Write::write_fmt::hd47b4e2324b4d9b7\n                               at /home/ubuntu/rust2/library/std/src/io/mod.rs:1682:15\n   6:     0x7ffb5b41bbfa - std::sys_common::backtrace::_print::h43044162653a17fc\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7ffb5b41bbfa - std::sys_common::backtrace::print::hc8605da258fa5aeb\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7ffb5b3ffb87 - std::panicking::default_hook::{{closure}}::h9e37f23f75122a15\n   9:     0x7ffb5b3ff97b - std::panicking::default_hook::h602873a063f84da2\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:286:9\n  10:     0x7ffb5be192b2 - <alloc[48d7b30605060536]::boxed::Box<dyn for<'a, 'b> core[672e3947e150d6c6]::ops::function::Fn<(&'a core[672e3947e150d6c6]::panic::panic_info::PanicInfo<'b>,), Output = ()> + core[672e3947e150d6c6]::marker::Send + core[672e3947e150d6c6]::marker::Sync> as core[672e3947e150d6c6]::ops::function::Fn<(&core[672e3947e150d6c6]::panic::panic_info::PanicInfo,)>>::call\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  11:     0x7ffb5be192b2 - rustc_driver[f5b6d32d8905ecdd]::DEFAULT_HOOK::{closure#0}::{closure#0}\n                               at /home/ubuntu/rust2/compiler/rustc_driver/src/lib.rs:1204:17\n  12:     0x7ffb5b4000d3 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::hfd13333ca953ae8e\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  13:     0x7ffb5b4000d3 - std::panicking::rust_panic_with_hook::h45753e10264ebe7e\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:692:13\n  14:     0x7ffb5e8b3a63 - std[3330b4673efabfce]::panicking::begin_panic::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>::{closure#0}\n\n[... FRAMES INTENTIONALLY OMITTED BECAUSE GITHUB GOT ANGRY ...]\n\n 186:     0x7ffb5bea5554 - <std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_::<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1}\n                               at /home/ubuntu/rust2/library/std/src/thread/mod.rs:549:30\n 187:     0x7ffb5bea5554 - <<std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1} as core[672e3947e150d6c6]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n                               at /home/ubuntu/rust2/library/core/src/ops/function.rs:250:5\n 188:     0x7ffb5b433968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::he8b26fc22c6f51ec\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n 189:     0x7ffb5b433968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h5cf9cbe75a8c3ddc\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n 190:     0x7ffb5b41199c - std::sys::unix::thread::Thread::new::thread_start::h2d6dd4455e97d031\n                               at /home/ubuntu/rust2/library/std/src/sys/unix/thread.rs:108:17\n 191:     0x7ffb5441b609 - start_thread\n 192:     0x7ffb5b282133 - clone\n 193:                0x0 - <unknown>\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.68.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [typeck] type-checking `<impl at /home/ubuntu/test.rs:7:1: 7:34>::trigger`\n#1 [typeck_item_bodies] type-checking all item bodies\n#2 [analysis] running analysis passes on this crate\nend of query stack\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0601`.\n```", "tree": {"sha": "e0f648a4cd8ac657596da6df01a38feba82530da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f648a4cd8ac657596da6df01a38feba82530da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d798e228eacfae98f54f15accea21ee7a3eaefcd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjr8gMCRBK7hj4Ov3rIwAAjb4IAJ0U+Nvo/rU/fJInsa4Ida75\nmZqqtzYAA6ZH5Cvl1lVcRhnyCrnYqNb6fCQfuQykUGQPJ9+K+77eUfbBL9x9VTk8\nKyupqvkqs76EVDZMSs+3Vvym9Hrq6OQ5e72e0X7NJi6HDfpI+cJBg/QjACmdtrH3\nBQOtZyLTNRk6zU14fUztN3oe2DvXPu1hv7GVzo5u90CA7IkMFSBaaEUDfadiBS98\ntI7Fg75ixYGn3WIc4cWcvbA5tUfiO7Elb/A3wQzJHcFJ62WI6/7dhl0P0mupPda9\ntLHQl/uHdjcMp79wo3PSQQyZ3W11UoP49N0jlu7WDjvkMM/WGcV009dPN0p+HOE=\n=nL1X\n-----END PGP SIGNATURE-----\n", "payload": "tree e0f648a4cd8ac657596da6df01a38feba82530da\nparent 7f930b4a54fe976b68311391efce4c807205573c\nparent 5d62a737d7e7899461f18c3ec105f7f024aeee74\nauthor Michael Goulet <michael@errs.io> 1672464396 -0800\ncommitter GitHub <noreply@github.com> 1672464396 -0800\n\nRollup merge of #106317 - compiler-errors:restore-the-backtraces, r=jyn514\n\nOnly deduplicate stack traces for good path bugs\n\nFixes #106267\n\nRestores backtraces for `bug!` and `delay_span_bug` after #106056. Only `delay_good_path_bug` needed its backtraces to be deduplicated, since it spits out the backtrace where it was created when it's being emitted.\n\nBefore:\n\n```\nerror: internal compiler error: /home/ubuntu/rust2/compiler/rustc_middle/src/ty/relate.rs:638:13: var types encountered in super_relate_consts: Const { ty: usize, kind: Infer(Var(_#0c)) } Const { ty: usize, kind: Param(N/#1) }\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.68.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [typeck] type-checking `<impl at /home/ubuntu/test.rs:7:1: 7:34>::trigger`\n#1 [typeck_item_bodies] type-checking all item bodies\n#2 [analysis] running analysis passes on this crate\nend of query stack\nerror: aborting due to 2 previous errors\n```\n\nHmm... that's a little bare.\n\nAfter:\n\n```\nerror: internal compiler error: /home/ubuntu/rust2/compiler/rustc_middle/src/ty/relate.rs:638:13: var types encountered in super_relate_consts: Const { ty: usize, kind: Infer(Var(_#0c)) } Const { ty: usize, kind: Param(N/#1) }\n\nthread 'rustc' panicked at 'Box<dyn Any>', /home/ubuntu/rust2/compiler/rustc_errors/src/lib.rs:1599:9\nstack backtrace:\n   0:     0x7ffb5b41bdd1 - std::backtrace_rs::backtrace::libunwind::trace::h26056f81198c6594\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7ffb5b41bdd1 - std::backtrace_rs::backtrace::trace_unsynchronized::hacfb345a0c6d5bb1\n                               at /home/ubuntu/rust2/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7ffb5b41bdd1 - std::sys_common::backtrace::_print_fmt::h18ea6016ac8030f3\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7ffb5b41bdd1 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::he35dde201d0c2d09\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7ffb5b4a0308 - core::fmt::write::h094ad263467a053c\n                               at /home/ubuntu/rust2/library/core/src/fmt/mod.rs:1208:17\n   5:     0x7ffb5b43caf1 - std::io::Write::write_fmt::hd47b4e2324b4d9b7\n                               at /home/ubuntu/rust2/library/std/src/io/mod.rs:1682:15\n   6:     0x7ffb5b41bbfa - std::sys_common::backtrace::_print::h43044162653a17fc\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7ffb5b41bbfa - std::sys_common::backtrace::print::hc8605da258fa5aeb\n                               at /home/ubuntu/rust2/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7ffb5b3ffb87 - std::panicking::default_hook::{{closure}}::h9e37f23f75122a15\n   9:     0x7ffb5b3ff97b - std::panicking::default_hook::h602873a063f84da2\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:286:9\n  10:     0x7ffb5be192b2 - <alloc[48d7b30605060536]::boxed::Box<dyn for<'a, 'b> core[672e3947e150d6c6]::ops::function::Fn<(&'a core[672e3947e150d6c6]::panic::panic_info::PanicInfo<'b>,), Output = ()> + core[672e3947e150d6c6]::marker::Send + core[672e3947e150d6c6]::marker::Sync> as core[672e3947e150d6c6]::ops::function::Fn<(&core[672e3947e150d6c6]::panic::panic_info::PanicInfo,)>>::call\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  11:     0x7ffb5be192b2 - rustc_driver[f5b6d32d8905ecdd]::DEFAULT_HOOK::{closure#0}::{closure#0}\n                               at /home/ubuntu/rust2/compiler/rustc_driver/src/lib.rs:1204:17\n  12:     0x7ffb5b4000d3 - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::hfd13333ca953ae8e\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:2002:9\n  13:     0x7ffb5b4000d3 - std::panicking::rust_panic_with_hook::h45753e10264ebe7e\n                               at /home/ubuntu/rust2/library/std/src/panicking.rs:692:13\n  14:     0x7ffb5e8b3a63 - std[3330b4673efabfce]::panicking::begin_panic::<rustc_errors[1b15f4e7e49d1fd5]::ExplicitBug>::{closure#0}\n\n[... FRAMES INTENTIONALLY OMITTED BECAUSE GITHUB GOT ANGRY ...]\n\n 186:     0x7ffb5bea5554 - <std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_::<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1}\n                               at /home/ubuntu/rust2/library/std/src/thread/mod.rs:549:30\n 187:     0x7ffb5bea5554 - <<std[3330b4673efabfce]::thread::Builder>::spawn_unchecked_<rustc_interface[947706ead88047d0]::util::run_in_thread_pool_with_globals<rustc_interface[947706ead88047d0]::interface::run_compiler<core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>, rustc_driver[f5b6d32d8905ecdd]::run_compiler::{closure#1}>::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[672e3947e150d6c6]::result::Result<(), rustc_errors[1b15f4e7e49d1fd5]::ErrorGuaranteed>>::{closure#1} as core[672e3947e150d6c6]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n                               at /home/ubuntu/rust2/library/core/src/ops/function.rs:250:5\n 188:     0x7ffb5b433968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::he8b26fc22c6f51ec\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n 189:     0x7ffb5b433968 - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h5cf9cbe75a8c3ddc\n                               at /home/ubuntu/rust2/library/alloc/src/boxed.rs:1988:9\n 190:     0x7ffb5b41199c - std::sys::unix::thread::Thread::new::thread_start::h2d6dd4455e97d031\n                               at /home/ubuntu/rust2/library/std/src/sys/unix/thread.rs:108:17\n 191:     0x7ffb5441b609 - start_thread\n 192:     0x7ffb5b282133 - clone\n 193:                0x0 - <unknown>\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.68.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [typeck] type-checking `<impl at /home/ubuntu/test.rs:7:1: 7:34>::trigger`\n#1 [typeck_item_bodies] type-checking all item bodies\n#2 [analysis] running analysis passes on this crate\nend of query stack\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0601`.\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d798e228eacfae98f54f15accea21ee7a3eaefcd", "html_url": "https://github.com/rust-lang/rust/commit/d798e228eacfae98f54f15accea21ee7a3eaefcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d798e228eacfae98f54f15accea21ee7a3eaefcd/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f930b4a54fe976b68311391efce4c807205573c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f930b4a54fe976b68311391efce4c807205573c", "html_url": "https://github.com/rust-lang/rust/commit/7f930b4a54fe976b68311391efce4c807205573c"}, {"sha": "5d62a737d7e7899461f18c3ec105f7f024aeee74", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d62a737d7e7899461f18c3ec105f7f024aeee74", "html_url": "https://github.com/rust-lang/rust/commit/5d62a737d7e7899461f18c3ec105f7f024aeee74"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "30179e978725c2ba38f9157f8744accad2194882", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d798e228eacfae98f54f15accea21ee7a3eaefcd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d798e228eacfae98f54f15accea21ee7a3eaefcd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=d798e228eacfae98f54f15accea21ee7a3eaefcd", "patch": "@@ -1199,8 +1199,8 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n             };\n \n             // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n-            // Don't do this for `ExplicitBug`, which has an unhelpful message and backtrace.\n-            if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+            // Don't do this for `GoodPathBug`, which already emits its own more useful backtrace.\n+            if !info.payload().is::<rustc_errors::GoodPathBug>() {\n                 (*DEFAULT_HOOK)(info);\n \n                 // Separate the output with an empty line\n@@ -1237,7 +1237,9 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n-    if !info.payload().is::<rustc_errors::ExplicitBug>() {\n+    if !info.payload().is::<rustc_errors::ExplicitBug>()\n+        && !info.payload().is::<rustc_errors::GoodPathBug>()\n+    {\n         let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&mut d);\n     }"}, {"sha": "0455f0d7383ae67e9d50b7058b7853498c33b9bb", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d798e228eacfae98f54f15accea21ee7a3eaefcd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d798e228eacfae98f54f15accea21ee7a3eaefcd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d798e228eacfae98f54f15accea21ee7a3eaefcd", "patch": "@@ -40,12 +40,13 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::HashStableContext;\n use rustc_span::{Loc, Span};\n \n+use std::any::Any;\n use std::borrow::Cow;\n+use std::fmt;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::panic;\n use std::path::Path;\n-use std::{error, fmt};\n \n use termcolor::{Color, ColorSpec};\n \n@@ -361,16 +362,11 @@ pub use rustc_span::fatal_error::{FatalError, FatalErrorMarker};\n \n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n-#[derive(Copy, Clone, Debug)]\n pub struct ExplicitBug;\n \n-impl fmt::Display for ExplicitBug {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"parser internal bug\")\n-    }\n-}\n-\n-impl error::Error for ExplicitBug {}\n+/// Signifies that the compiler died with an explicit call to `.delay_good_path_bug`\n+/// rather than a failed assertion, etc.\n+pub struct GoodPathBug;\n \n pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n@@ -507,7 +503,11 @@ impl Drop for HandlerInner {\n \n         if !self.has_errors() {\n             let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n-            self.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n+            self.flush_delayed(\n+                bugs,\n+                \"no errors encountered even though `delay_span_bug` issued\",\n+                ExplicitBug,\n+            );\n         }\n \n         // FIXME(eddyb) this explains what `delayed_good_path_bugs` are!\n@@ -520,6 +520,7 @@ impl Drop for HandlerInner {\n             self.flush_delayed(\n                 bugs.into_iter().map(DelayedDiagnostic::decorate),\n                 \"no warnings or errors encountered even though `delayed_good_path_bugs` issued\",\n+                GoodPathBug,\n             );\n         }\n \n@@ -1203,7 +1204,11 @@ impl Handler {\n     pub fn flush_delayed(&self) {\n         let mut inner = self.inner.lock();\n         let bugs = std::mem::replace(&mut inner.delayed_span_bugs, Vec::new());\n-        inner.flush_delayed(bugs, \"no errors encountered even though `delay_span_bug` issued\");\n+        inner.flush_delayed(\n+            bugs,\n+            \"no errors encountered even though `delay_span_bug` issued\",\n+            ExplicitBug,\n+        );\n     }\n }\n \n@@ -1580,6 +1585,7 @@ impl HandlerInner {\n         &mut self,\n         bugs: impl IntoIterator<Item = Diagnostic>,\n         explanation: impl Into<DiagnosticMessage> + Copy,\n+        panic_with: impl Any + Send + 'static,\n     ) {\n         let mut no_bugs = true;\n         for mut bug in bugs {\n@@ -1607,7 +1613,7 @@ impl HandlerInner {\n \n         // Panic with `ExplicitBug` to avoid \"unexpected panic\" messages.\n         if !no_bugs {\n-            panic::panic_any(ExplicitBug);\n+            panic::panic_any(panic_with);\n         }\n     }\n "}]}