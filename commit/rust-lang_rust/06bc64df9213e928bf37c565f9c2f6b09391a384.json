{"sha": "06bc64df9213e928bf37c565f9c2f6b09391a384", "node_id": "C_kwDOAAsO6NoAKDA2YmM2NGRmOTIxM2U5MjhiZjM3YzU2NWY5YzJmNmIwOTM5MWEzODQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-02T03:24:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:19:59Z"}, "message": "Overhaul `Const`.\n\nSpecifically, rename the `Const` struct as `ConstS` and re-introduce `Const` as\nthis:\n```\npub struct Const<'tcx>(&'tcx Interned<ConstS>);\n```\nThis now matches `Ty` and `Predicate` more closely, including using\npointer-based `eq` and `hash`.\n\nNotable changes:\n- `mk_const` now takes a `ConstS`.\n- `Const` was copy, despite being 48 bytes. Now `ConstS` is not, so need a\n  we need separate arena for it, because we can't use the `Dropless` one any\n  more.\n- Many `&'tcx Const<'tcx>`/`&Const<'tcx>` to `Const<'tcx>` changes\n- Many `ct.ty` to `ct.ty()` and `ct.val` to `ct.val()` changes.\n- Lots of tedious sigil fiddling.", "tree": {"sha": "a8154c62fd804f8b3b93058b6d001aa1b725c99b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8154c62fd804f8b3b93058b6d001aa1b725c99b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06bc64df9213e928bf37c565f9c2f6b09391a384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06bc64df9213e928bf37c565f9c2f6b09391a384", "html_url": "https://github.com/rust-lang/rust/commit/06bc64df9213e928bf37c565f9c2f6b09391a384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06bc64df9213e928bf37c565f9c2f6b09391a384/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18e7b7ece129d0393bb739cb4f9557689e184080", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e7b7ece129d0393bb739cb4f9557689e184080", "html_url": "https://github.com/rust-lang/rust/commit/18e7b7ece129d0393bb739cb4f9557689e184080"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "917afa4eae06cbb91fe44f4fca3f7958c765abde", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06bc64df9213e928bf37c565f9c2f6b09391a384/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bc64df9213e928bf37c565f9c2f6b09391a384/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=06bc64df9213e928bf37c565f9c2f6b09391a384", "patch": "@@ -668,7 +668,7 @@ fn codegen_stmt<'tcx>(\n                     let times = fx\n                         .monomorphize(times)\n                         .eval(fx.tcx, ParamEnv::reveal_all())\n-                        .val\n+                        .val()\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n                     if operand.layout().size.bytes() == 0 {"}, {"sha": "274fb211b7bbb5cd2ee8dff0b37267aec5fae605", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06bc64df9213e928bf37c565f9c2f6b09391a384/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06bc64df9213e928bf37c565f9c2f6b09391a384/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=06bc64df9213e928bf37c565f9c2f6b09391a384", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n             ConstantKind::Ty(ct) => ct,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.val {\n+        match const_.val() {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n@@ -127,15 +127,15 @@ pub(crate) fn codegen_constant<'tcx>(\n         ConstantKind::Ty(ct) => ct,\n         ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n     };\n-    let const_val = match const_.val {\n+    let const_val = match const_.val() {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n@@ -152,7 +152,7 @@ pub(crate) fn codegen_constant<'tcx>(\n         | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n     };\n \n-    codegen_const_value(fx, const_val, const_.ty)\n+    codegen_const_value(fx, const_val, const_.ty())\n }\n \n pub(crate) fn codegen_const_value<'tcx>(\n@@ -465,7 +465,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     match operand {\n         Operand::Constant(const_) => match const_.literal {\n             ConstantKind::Ty(const_) => {\n-                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val.try_to_value()\n+                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val().try_to_value()\n             }\n             ConstantKind::Val(val, _) => Some(val),\n         },"}]}