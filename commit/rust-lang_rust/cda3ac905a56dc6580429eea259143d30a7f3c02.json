{"sha": "cda3ac905a56dc6580429eea259143d30a7f3c02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYTNhYzkwNWE1NmRjNjU4MDQyOWVlYTI1OTE0M2QzMGE3ZjNjMDI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-15T06:23:12Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-15T08:34:31Z"}, "message": "rc: fix tests", "tree": {"sha": "b71277c4f5f656e7ecd3d8496465c96aa28b89d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b71277c4f5f656e7ecd3d8496465c96aa28b89d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cda3ac905a56dc6580429eea259143d30a7f3c02", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cda3ac905a56dc6580429eea259143d30a7f3c02", "html_url": "https://github.com/rust-lang/rust/commit/cda3ac905a56dc6580429eea259143d30a7f3c02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cda3ac905a56dc6580429eea259143d30a7f3c02/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75822f2894498025d6a86bcaf30fa56118c7d3ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/75822f2894498025d6a86bcaf30fa56118c7d3ab", "html_url": "https://github.com/rust-lang/rust/commit/75822f2894498025d6a86bcaf30fa56118c7d3ab"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "87e8d0525e5b0db842aeab58873187d57ac925be", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cda3ac905a56dc6580429eea259143d30a7f3c02/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda3ac905a56dc6580429eea259143d30a7f3c02/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=cda3ac905a56dc6580429eea259143d30a7f3c02", "patch": "@@ -21,10 +21,17 @@ Similar to a mutable option type, but friendlier.\n */\n \n #[mutable]\n+#[deriving(Clone)]\n pub struct Cell<T> {\n     priv value: Option<T>\n }\n \n+impl<T: DeepClone> DeepClone for Cell<T> {\n+    fn deep_clone(&self) -> Cell<T> {\n+        Cell{value: self.value.deep_clone()}\n+    }\n+}\n+\n impl<T:cmp::Eq> cmp::Eq for Cell<T> {\n     fn eq(&self, other: &Cell<T>) -> bool {\n         (self.value) == (other.value)"}, {"sha": "5aee3077e486636cf86dc6da8eacb20a5ca9f7b4", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cda3ac905a56dc6580429eea259143d30a7f3c02/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda3ac905a56dc6580429eea259143d30a7f3c02/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=cda3ac905a56dc6580429eea259143d30a7f3c02", "patch": "@@ -49,6 +49,7 @@ use num::Zero;\n use old_iter::{BaseIter, MutableIter, ExtendedIter};\n use old_iter;\n use str::StrSlice;\n+use clone::DeepClone;\n \n #[cfg(test)] use str;\n \n@@ -59,6 +60,15 @@ pub enum Option<T> {\n     Some(T),\n }\n \n+impl<T: DeepClone> DeepClone for Option<T> {\n+    fn deep_clone(&self) -> Option<T> {\n+        match *self {\n+            Some(ref x) => Some(x.deep_clone()),\n+            None => None\n+        }\n+    }\n+}\n+\n impl<T:Ord> Ord for Option<T> {\n     fn lt(&self, other: &Option<T>) -> bool {\n         match (self, other) {"}, {"sha": "cb0798f2a398f8717bc5614594b137129c7a936e", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cda3ac905a56dc6580429eea259143d30a7f3c02/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda3ac905a56dc6580429eea259143d30a7f3c02/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=cda3ac905a56dc6580429eea259143d30a7f3c02", "patch": "@@ -103,28 +103,20 @@ mod test_rc {\n     fn test_clone() {\n         let x = Rc::new(Cell(5));\n         let y = x.clone();\n-        do x.with_borrow |cell| {\n-            do value.with_mut_ref |inner| {\n-                *inner = 20;\n-            }\n-        }\n-        do y.with_borrow |value| {\n-            assert_eq!(value.take(), 20);\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n         }\n+        assert_eq!(y.borrow().take(), 20);\n     }\n \n     #[test]\n     fn test_deep_clone() {\n         let x = Rc::new(Cell(5));\n         let y = x.deep_clone();\n-        do x.with_borrow |cell| {\n-            do value.with_mut_ref |inner| {\n-                *inner = 20;\n-            }\n-        }\n-        do y.with_borrow |value| {\n-            assert_eq!(value.take(), 5);\n+        do x.borrow().with_mut_ref |inner| {\n+            *inner = 20;\n         }\n+        assert_eq!(y.borrow().take(), 5);\n     }\n \n     #[test]\n@@ -134,7 +126,7 @@ mod test_rc {\n     }\n \n     #[test]\n-    fn test_clone() {\n+    fn test_simple_clone() {\n         let x = Rc::new(5);\n         let y = x.clone();\n         assert_eq!(*x.borrow(), 5);"}]}