{"sha": "e574c77aa2292ac2a776754a60b1320058bdb071", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NzRjNzdhYTIyOTJhYzJhNzc2NzU0YTYwYjEzMjAwNThiZGIwNzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-19T10:28:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-19T10:39:02Z"}, "message": "audit our bounds checks", "tree": {"sha": "861070a7a4fdac7ee0a3e426f9bfab4554b19b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861070a7a4fdac7ee0a3e426f9bfab4554b19b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e574c77aa2292ac2a776754a60b1320058bdb071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e574c77aa2292ac2a776754a60b1320058bdb071", "html_url": "https://github.com/rust-lang/rust/commit/e574c77aa2292ac2a776754a60b1320058bdb071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e574c77aa2292ac2a776754a60b1320058bdb071/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad6af7a523bc51169858fdaa41f85becf3da3a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6af7a523bc51169858fdaa41f85becf3da3a4d", "html_url": "https://github.com/rust-lang/rust/commit/ad6af7a523bc51169858fdaa41f85becf3da3a4d"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "21a7dd35212c971d1078272cecac329c2c2116fc", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=e574c77aa2292ac2a776754a60b1320058bdb071", "patch": "@@ -162,7 +162,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             MiriMemoryKind::Env.into(),\n         );\n         ecx.machine.cmd_line = Some(cmd_ptr);\n-        // Store the UTF-16 string.\n+        // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n         let char_size = Size::from_bytes(2);\n         let cmd_alloc = ecx.memory.get_mut(cmd_ptr.alloc_id)?;\n         let mut cur_ptr = cmd_ptr;"}, {"sha": "0c22a0f2e06534d35ec030fd6f733b9340a38f27", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=e574c77aa2292ac2a776754a60b1320058bdb071", "patch": "@@ -94,6 +94,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         let this = self.eval_context_mut();\n \n+        // Don't forget the bounds check.\n         let ptr = this.memory.check_ptr_access(\n             ptr,\n             Size::from_bytes(len as u64),"}, {"sha": "cfd3743089e7d001ea6ec797550ef6c5417f082e", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=e574c77aa2292ac2a776754a60b1320058bdb071", "patch": "@@ -50,7 +50,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 .memory\n                 .allocate(Size::from_bytes(size), align, kind.into());\n             if zero_init {\n-                // We just allocated this, the access cannot fail\n+                // We just allocated this, the access is definitely in-bounds.\n                 this.memory\n                     .get_mut(ptr.alloc_id)\n                     .unwrap()\n@@ -227,7 +227,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Align::from_bytes(align).unwrap(),\n                     MiriMemoryKind::Rust.into(),\n                 );\n-                // We just allocated this, the access cannot fail\n+                // We just allocated this, the access is definitely in-bounds.\n                 this.memory\n                     .get_mut(ptr.alloc_id)\n                     .unwrap()\n@@ -643,7 +643,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Hook pthread calls that go to the thread-local storage memory subsystem.\n             \"pthread_key_create\" => {\n-                let key_ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let key_place = this.deref_operand(args[0])?;\n \n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n                 let dtor = match this.test_null(this.read_scalar(args[1])?.not_undef()?)? {\n@@ -668,16 +668,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     throw_unsup!(OutOfTls);\n                 }\n \n-                let key_ptr = this\n-                    .memory\n-                    .check_ptr_access(key_ptr, key_layout.size, key_layout.align.abi)?\n-                    .expect(\"cannot be a ZST\");\n-                this.memory.get_mut(key_ptr.alloc_id)?.write_scalar(\n-                    tcx,\n-                    key_ptr,\n-                    Scalar::from_uint(key, key_layout.size).into(),\n-                    key_layout.size,\n-                )?;\n+                this.write_scalar(Scalar::from_uint(key, key_layout.size), key_place.into())?;\n \n                 // Return success (`0`).\n                 this.write_null(dest)?;\n@@ -856,6 +847,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let system_info_ptr = this\n                     .check_mplace_access(system_info, None)?\n                     .expect(\"cannot be a ZST\");\n+                // We rely on `deref_operand` doing bounds checks for us.\n                 // Initialize with `0`.\n                 this.memory\n                     .get_mut(system_info_ptr.alloc_id)?\n@@ -992,6 +984,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let errno_ptr = this.machine.last_error.unwrap();\n+        // We allocated this during machine initialziation so the bounds are fine.\n         this.memory.get_mut(errno_ptr.alloc_id)?.write_scalar(\n             &*this.tcx,\n             errno_ptr,"}, {"sha": "cd7db09736664050ff58d52d046fc5ee26b247ed", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e574c77aa2292ac2a776754a60b1320058bdb071/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=e574c77aa2292ac2a776754a60b1320058bdb071", "patch": "@@ -359,6 +359,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             assert!(mplace.meta.is_none());\n                             // not a zst, must be valid pointer\n                             let ptr = mplace.ptr.to_ptr()?;\n+                            // we know the return place is in-bounds\n                             this.memory.get_mut(ptr.alloc_id)?.write_repeat(tcx, ptr, 0, dest.layout.size)?;\n                         }\n                     }\n@@ -548,6 +549,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             let mplace = this.force_allocation(dest)?;\n                             assert!(mplace.meta.is_none());\n                             let ptr = mplace.ptr.to_ptr()?;\n+                            // We know the return place is in-bounds\n                             this.memory\n                                 .get_mut(ptr.alloc_id)?\n                                 .mark_definedness(ptr, dest.layout.size, false);"}]}