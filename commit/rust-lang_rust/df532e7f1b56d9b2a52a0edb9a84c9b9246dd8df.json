{"sha": "df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNTMyZTdmMWI1NmQ5YjJhNTJhMGVkYjlhODRjOWI5MjQ2ZGQ4ZGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T05:57:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-22T06:22:06Z"}, "message": "rustc: Remove ast_map's session dependency", "tree": {"sha": "0156edd6b16171072599897416342b00ffe9c934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0156edd6b16171072599897416342b00ffe9c934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "html_url": "https://github.com/rust-lang/rust/commit/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611890013f9589b2ed7b062c56d25cd337e8150d", "url": "https://api.github.com/repos/rust-lang/rust/commits/611890013f9589b2ed7b062c56d25cd337e8150d", "html_url": "https://github.com/rust-lang/rust/commit/611890013f9589b2ed7b062c56d25cd337e8150d"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "680a9327d4f58cb7301de95f7c1b8672f569bcc6", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "patch": "@@ -160,7 +160,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     let ast_map =\n         time(time_passes, \"ast indexing\",\n-             bind middle::ast_map::map_crate(sess, *crate));\n+             bind middle::ast_map::map_crate(sess.diagnostic(), *crate));\n     time(time_passes, \"external crate/lib resolution\",\n          bind creader::read_crates(sess, *crate));\n     let {def_map, exp_map, impl_map} ="}, {"sha": "20d75e493e599be0fe85e783837c1f1f8947b6b9", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "patch": "@@ -6,8 +6,8 @@ import syntax::ast_util;\n import syntax::ast_util::path_to_ident;\n import syntax::ast_util::inlined_item_methods;\n import syntax::{visit, codemap};\n-import driver::session::session;\n import syntax::attr;\n+import syntax::diagnostic::span_handler;\n \n enum path_elt { path_mod(str), path_name(str) }\n type path = [path_elt];\n@@ -59,7 +59,7 @@ enum a_ctor {\n \n type map = std::map::hashmap<node_id, ast_node>;\n type ctx = {map: map, mut path: path,\n-            mut local_id: uint, sess: session};\n+            mut local_id: uint, diag: span_handler};\n type vt = visit::vt<ctx>;\n \n fn extend(cx: ctx, elt: str) -> @path {\n@@ -79,19 +79,20 @@ fn mk_ast_map_visitor() -> vt {\n     });\n }\n \n-fn map_crate(sess: session, c: crate) -> map {\n+fn map_crate(diag: span_handler, c: crate) -> map {\n     let cx = {map: std::map::int_hash(),\n               mut path: [],\n               mut local_id: 0u,\n-              sess: sess};\n+              diag: diag};\n     visit::visit_crate(c, cx, mk_ast_map_visitor());\n     ret cx.map;\n }\n \n // Used for items loaded from external crate that are being inlined into this\n // crate.  The `path` should be the path to the item but should not include\n // the item itself.\n-fn map_decoded_item(sess: session, map: map, path: path, ii: inlined_item) {\n+fn map_decoded_item(diag: span_handler,\n+                    map: map, path: path, ii: inlined_item) {\n     // I believe it is ok for the local IDs of inlined items from other crates\n     // to overlap with the local ids from this crate, so just generate the ids\n     // starting from 0.  (In particular, I think these ids are only used in\n@@ -101,7 +102,7 @@ fn map_decoded_item(sess: session, map: map, path: path, ii: inlined_item) {\n     let cx = {map: map,\n               mut path: path,\n               mut local_id: 0u,\n-              sess: sess};\n+              diag: diag};\n     let v = mk_ast_map_visitor();\n \n     // methods get added to the AST map when their impl is visited.  Since we\n@@ -205,7 +206,7 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n       }\n       item_native_mod(nm) {\n         let abi = alt attr::native_abi(i.attrs) {\n-          either::left(msg) { cx.sess.span_fatal(i.span, msg); }\n+          either::left(msg) { cx.diag.span_fatal(i.span, msg); }\n           either::right(abi) { abi }\n         };\n         for nm.items.each {|nitem|"}, {"sha": "9c2213e3aff8e12ecdca90324f598c46cbf8af05", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "patch": "@@ -115,7 +115,8 @@ fn decode_inlined_item(cdata: cstore::crate_metadata,\n                     to_id_range: to_id_range};\n         let raw_ii = decode_ast(ast_doc);\n         let ii = renumber_ast(xcx, raw_ii);\n-        ast_map::map_decoded_item(tcx.sess, dcx.tcx.items, path, ii);\n+        ast_map::map_decoded_item(tcx.sess.diagnostic(),\n+                                  dcx.tcx.items, path, ii);\n         #debug[\"Fn named: %s\", ii.ident()];\n         decode_side_tables(xcx, ast_doc);\n         #debug[\"< Decoded inlined fn: %s::%s\","}, {"sha": "8dbd2e60f21f59c6607372b14c1d896f6559f4cc", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=df532e7f1b56d9b2a52a0edb9a84c9b9246dd8df", "patch": "@@ -9,6 +9,7 @@\n \n import std::map::hashmap;\n import rustc::driver::session;\n+import session::session;\n import rustc::driver::driver;\n import syntax::diagnostic;\n import syntax::diagnostic::handler;\n@@ -110,7 +111,7 @@ fn build_ctxt(sess: session::session, ast: @ast::crate,\n \n     let ast = config::strip_unconfigured_items(ast);\n     let ast = front::test::modify_for_testing(sess, ast);\n-    let ast_map = ast_map::map_crate(sess, *ast);\n+    let ast_map = ast_map::map_crate(sess.diagnostic(), *ast);\n     *ignore_errors = true;\n     let {exp_map, impl_map, _} = resolve::resolve_crate(sess, ast_map, ast);\n     *ignore_errors = false;"}]}