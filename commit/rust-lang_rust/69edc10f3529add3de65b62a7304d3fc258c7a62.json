{"sha": "69edc10f3529add3de65b62a7304d3fc258c7a62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZWRjMTBmMzUyOWFkZDNkZTY1YjYyYTczMDRkM2ZjMjU4YzdhNjI=", "commit": {"author": {"name": "funkill2", "email": "funkill2@gmail.com", "date": "2019-03-18T19:18:54Z"}, "committer": {"name": "funkill2", "email": "funkill2@gmail.com", "date": "2019-03-18T19:18:54Z"}, "message": "set code less generic", "tree": {"sha": "fc171e22b9698f7f238740cf2e2d3bdbf6f7d962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc171e22b9698f7f238740cf2e2d3bdbf6f7d962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69edc10f3529add3de65b62a7304d3fc258c7a62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEncutfLmVortz0Rb+kgKyQy+G5IcFAlyP7x4ACgkQkgKyQy+G\n5IcdFg/8DmkPO6CPk/BXaFn7nlJe5B+skLV8b7iiK99p3x+cc2w5jMBQQBF+8/Cn\nc/+LV637I6xhAHPoPGvX5kIj01lUqlg8AJGXZrfXuk27qr/MTDDxzDZR1FMLNz87\ngRRhYmtD5koh60tf/IT7d0+DaOS9xgp3P9PSK+ruGeXP348l/4sAGBgMW0wOQWQT\n434a4mdqM5+0DGOUQlwlm/M7xglzTLCRX4YzZwVCn338RMqjg393CT8lJs3lyyzl\nwVsmlKdgh8arPvxUikFhNOBn7vfkX7elnoVZIbxKfknxD6PYR6PizmZEMGRxorc7\n637OnuuSJt819YuvqGP8ygiXsIdMPFKzz+KoiEVNhluq4gbZBkkFi2NIz3BlCi0c\nsPlxh0s7bYVntmPIkrED6leXKwRMVv+eouZwnES+1aRxcSe/1yueelgaLe1jn4Ze\nbwpsvsjtvuRwEII6C5bGzwruOqOZoyDY1pAac9KPzRlmZyNQ/JO1y9uZFLcUrAik\nj5pcVsW8xl9UjdfUUil7KEgWkiSFKkiFfMq+BV6H+RdTxDe78/at7wcsLYMEIbZM\nwdWi360FkKL9dMAUBzOINrQsVB4ixhHucLUm4XWDCOFIZi1zkrT336XeMkFtYC2W\nsAvGh3NnwOP5W6hQUTBLy25ZqXPYl2NHmvFk3sav+YrPMEnPwDo=\n=/zeO\n-----END PGP SIGNATURE-----", "payload": "tree fc171e22b9698f7f238740cf2e2d3bdbf6f7d962\nparent 9c2177026f5fac8464a610a426a974cf691b2a89\nauthor funkill2 <funkill2@gmail.com> 1552936734 +0300\ncommitter funkill2 <funkill2@gmail.com> 1552936734 +0300\n\nset code less generic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69edc10f3529add3de65b62a7304d3fc258c7a62", "html_url": "https://github.com/rust-lang/rust/commit/69edc10f3529add3de65b62a7304d3fc258c7a62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69edc10f3529add3de65b62a7304d3fc258c7a62/comments", "author": {"login": "funkill", "id": 4323287, "node_id": "MDQ6VXNlcjQzMjMyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4323287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkill", "html_url": "https://github.com/funkill", "followers_url": "https://api.github.com/users/funkill/followers", "following_url": "https://api.github.com/users/funkill/following{/other_user}", "gists_url": "https://api.github.com/users/funkill/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkill/subscriptions", "organizations_url": "https://api.github.com/users/funkill/orgs", "repos_url": "https://api.github.com/users/funkill/repos", "events_url": "https://api.github.com/users/funkill/events{/privacy}", "received_events_url": "https://api.github.com/users/funkill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "funkill", "id": 4323287, "node_id": "MDQ6VXNlcjQzMjMyODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4323287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/funkill", "html_url": "https://github.com/funkill", "followers_url": "https://api.github.com/users/funkill/followers", "following_url": "https://api.github.com/users/funkill/following{/other_user}", "gists_url": "https://api.github.com/users/funkill/gists{/gist_id}", "starred_url": "https://api.github.com/users/funkill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/funkill/subscriptions", "organizations_url": "https://api.github.com/users/funkill/orgs", "repos_url": "https://api.github.com/users/funkill/repos", "events_url": "https://api.github.com/users/funkill/events{/privacy}", "received_events_url": "https://api.github.com/users/funkill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c2177026f5fac8464a610a426a974cf691b2a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c2177026f5fac8464a610a426a974cf691b2a89", "html_url": "https://github.com/rust-lang/rust/commit/9c2177026f5fac8464a610a426a974cf691b2a89"}], "stats": {"total": 74, "additions": 24, "deletions": 50}, "files": [{"sha": "0c33396857df021d1784a159a57707851d723f92", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 24, "deletions": 50, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/69edc10f3529add3de65b62a7304d3fc258c7a62/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69edc10f3529add3de65b62a7304d3fc258c7a62/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=69edc10f3529add3de65b62a7304d3fc258c7a62", "patch": "@@ -5,6 +5,7 @@ use tools::{\n     generate, gen_tests, install_format_hook, run, run_with_output, run_rustfmt,\n     Overwrite, Result, run_fuzzer,\n };\n+use std::{path::{PathBuf}, env};\n \n fn main() -> Result<()> {\n     let matches = App::new(\"tasks\")\n@@ -18,7 +19,9 @@ fn main() -> Result<()> {\n         .get_matches();\n     match matches.subcommand_name().expect(\"Subcommand must be specified\") {\n         \"install-code\" => {\n-            setup_environment()?;\n+            if cfg!(target_os = \"macos\") {\n+                fix_path_for_mac()?;\n+            }\n             install_code_extension()?;\n         }\n         \"gen-tests\" => gen_tests(Overwrite)?,\n@@ -31,14 +34,6 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n-fn setup_environment() -> Result<()> {\n-    if cfg!(target_os = \"macos\") {\n-        vscode_path_helpers::append_vscode_path()?;\n-    }\n-\n-    Ok(())\n-}\n-\n fn install_code_extension() -> Result<()> {\n     run(\"cargo install --path crates/ra_lsp_server --force\", \".\")?;\n     if cfg!(windows) {\n@@ -75,28 +70,8 @@ fn verify_installed_extensions() -> Result<()> {\n     Ok(())\n }\n \n-#[cfg(target_os = \"macos\")]\n-mod vscode_path_helpers {\n-    use super::Result;\n-    use std::{path::{PathBuf}, env};\n-    use failure::bail;\n-\n-    pub(crate) fn append_vscode_path() -> Result<()> {\n-        let vars = match env::var_os(\"PATH\") {\n-            Some(path) => path,\n-            None => bail!(\"Could not get PATH variable from env.\"),\n-        };\n-\n-        let vscode_path = get_vscode_path()?;\n-        let mut paths = env::split_paths(&vars).collect::<Vec<_>>();\n-        paths.push(vscode_path);\n-        let new_paths = env::join_paths(paths)?;\n-        env::set_var(\"PATH\", &new_paths);\n-\n-        Ok(())\n-    }\n-\n-    fn get_vscode_path() -> Result<PathBuf> {\n+fn fix_path_for_mac() -> Result<()> {\n+    let mut vscode_path: Vec<PathBuf> = {\n         const COMMON_APP_PATH: &str =\n             r\"/Applications/Visual Studio Code.app/Contents/Resources/app/bin\";\n         const ROOT_DIR: &str = \"\";\n@@ -105,26 +80,25 @@ mod vscode_path_helpers {\n             Err(e) => bail!(\"Failed getting HOME from environment with error: {}.\", e),\n         };\n \n-        for dir in [ROOT_DIR, &home_dir].iter() {\n-            let path = String::from(dir.clone()) + COMMON_APP_PATH;\n-            let path = PathBuf::from(path);\n-            if path.exists() {\n-                return Ok(path);\n-            }\n-        }\n+        [ROOT_DIR, &home_dir]\n+            .iter()\n+            .map(|dir| String::from(dir.clone()) + COMMON_APP_PATH)\n+            .map(PathBuf::from)\n+            .filter(|path| path.exists())\n+            .collect()\n+    };\n \n-        bail!(\n-            \"Could not find Visual Studio Code application. Please make sure you \\\n-             have Visual Studio Code installed and try again or install extension \\\n-             manually.\"\n-        )\n-    }\n-}\n+    if !vscode_path.is_empty() {\n+        let vars = match env::var_os(\"PATH\") {\n+            Some(path) => path,\n+            None => bail!(\"Could not get PATH variable from env.\"),\n+        };\n \n-#[cfg(not(target_os = \"macos\"))]\n-mod vscode_path_helpers {\n-    use super::Result;\n-    pub(crate) fn append_vscode_path() -> Result<()> {\n-        Ok(())\n+        let mut paths = env::split_paths(&vars).collect::<Vec<_>>();\n+        paths.append(&mut vscode_path);\n+        let new_paths = env::join_paths(paths)?;\n+        env::set_var(\"PATH\", &new_paths);\n     }\n+\n+    Ok(())\n }"}]}