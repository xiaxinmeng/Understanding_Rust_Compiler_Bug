{"sha": "b75b1655895e69f074936b73394a72e98aa067b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NWIxNjU1ODk1ZTY5ZjA3NDkzNmI3MzM5NGE3MmU5OGFhMDY3Yjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-28T12:35:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T12:35:41Z"}, "message": "Rollup merge of #59398 - phansch:rustfix_coverage, r=oli-obk\n\nAdd a way to track Rustfix UI test coverage\n\nThis came out of the first Rustfix WG meeting.\n\nOne of the goals is to enable Rustfix tests for all UI tests that\ntrigger lints with `MachineApplicable` suggestions. In order to do that\nwe first want to create a tracking issue that lists all files with\nmissing `// run-rustfix` headers.\n\nThis PR adds a `--rustfix-coverage` flag to `./x.py` and compiletest to\nlist the files with the missing headers in `/tmp/rustfix_missing_coverage.txt`.\n\nFrom that file we can create the tracking issue and at some point also\nenforce the `// run-rustfix` flag on UI tests with `MachineApplicable`\nlints.", "tree": {"sha": "bad4d198cebc6b611e9a97d9b5830532ae9d918d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad4d198cebc6b611e9a97d9b5830532ae9d918d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75b1655895e69f074936b73394a72e98aa067b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnL+eCRBK7hj4Ov3rIwAAdHIIABp08PzHkd5BSwnSXd67Uv/F\npptNuzVN1xyzXA7QMFVVM4Fethv+SVskY1TEESVzYUmUFVnXMj3/1MMrNDYplYGA\n7njS1/CL1U+6Zxaj7UoBCXdN6K7i43Oqou8RVLmYxCb4JJ2Ya/ykuFZslk1VxTWZ\nnrMX2G4pbW39X4c6yOM0MNVoGe7l0Hdaaa0k5+41BkhZ143jYEe/5HEhR2LKXYIy\npH0MyS2J16pDm03vypQ8ukH0O8XSM5Amu3QgUMoQfK3lZf56mzsKuTtwej+bqAnq\nmrM624CkEa2OcK8DzfbeZ5QuvWIKQ2KloeC4GhueOHTd1KN/mATMLhI/zD2k81A=\n=ojCe\n-----END PGP SIGNATURE-----\n", "payload": "tree bad4d198cebc6b611e9a97d9b5830532ae9d918d\nparent a92d689b122f725e0942564bc3c7af95c6792800\nparent d808bd46515e4de5d21a62b2c1557ac9d2751846\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553776541 +0100\ncommitter GitHub <noreply@github.com> 1553776541 +0100\n\nRollup merge of #59398 - phansch:rustfix_coverage, r=oli-obk\n\nAdd a way to track Rustfix UI test coverage\n\nThis came out of the first Rustfix WG meeting.\n\nOne of the goals is to enable Rustfix tests for all UI tests that\ntrigger lints with `MachineApplicable` suggestions. In order to do that\nwe first want to create a tracking issue that lists all files with\nmissing `// run-rustfix` headers.\n\nThis PR adds a `--rustfix-coverage` flag to `./x.py` and compiletest to\nlist the files with the missing headers in `/tmp/rustfix_missing_coverage.txt`.\n\nFrom that file we can create the tracking issue and at some point also\nenforce the `// run-rustfix` flag on UI tests with `MachineApplicable`\nlints.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b1655895e69f074936b73394a72e98aa067b9", "html_url": "https://github.com/rust-lang/rust/commit/b75b1655895e69f074936b73394a72e98aa067b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75b1655895e69f074936b73394a72e98aa067b9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92d689b122f725e0942564bc3c7af95c6792800", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92d689b122f725e0942564bc3c7af95c6792800", "html_url": "https://github.com/rust-lang/rust/commit/a92d689b122f725e0942564bc3c7af95c6792800"}, {"sha": "d808bd46515e4de5d21a62b2c1557ac9d2751846", "url": "https://api.github.com/repos/rust-lang/rust/commits/d808bd46515e4de5d21a62b2c1557ac9d2751846", "html_url": "https://github.com/rust-lang/rust/commit/d808bd46515e4de5d21a62b2c1557ac9d2751846"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "7851ea3e363a491cc78d0dba11c9a08a1ba71032", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75b1655895e69f074936b73394a72e98aa067b9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b1655895e69f074936b73394a72e98aa067b9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b75b1655895e69f074936b73394a72e98aa067b9", "patch": "@@ -1856,6 +1856,7 @@ mod __test {\n             doc_tests: DocTests::No,\n             bless: false,\n             compare_mode: None,\n+            rustfix_coverage: false,\n         };\n \n         let build = Build::new(config);\n@@ -1897,6 +1898,7 @@ mod __test {\n             doc_tests: DocTests::No,\n             bless: false,\n             compare_mode: None,\n+            rustfix_coverage: false,\n         };\n \n         let build = Build::new(config);"}, {"sha": "a1f89d6c86f1d8a345b405307050cb2e2fcb5573", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b75b1655895e69f074936b73394a72e98aa067b9/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b1655895e69f074936b73394a72e98aa067b9/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=b75b1655895e69f074936b73394a72e98aa067b9", "patch": "@@ -56,6 +56,7 @@ pub enum Subcommand {\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n         doc_tests: DocTests,\n+        rustfix_coverage: bool,\n     },\n     Bench {\n         paths: Vec<PathBuf>,\n@@ -188,6 +189,12 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n                     \"mode describing what file the actual ui output will be compared to\",\n                     \"COMPARE MODE\",\n                 );\n+                opts.optflag(\n+                    \"\",\n+                    \"rustfix-coverage\",\n+                    \"enable this to generate a Rustfix coverage file, which is saved in \\\n+                        `/<build_base>/rustfix_missing_coverage.txt`\",\n+                );\n             }\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n@@ -363,6 +370,7 @@ Arguments:\n                 test_args: matches.opt_strs(\"test-args\"),\n                 rustc_args: matches.opt_strs(\"rustc-args\"),\n                 fail_fast: !matches.opt_present(\"no-fail-fast\"),\n+                rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n                 doc_tests: if matches.opt_present(\"doc\") {\n                     DocTests::Only\n                 } else if matches.opt_present(\"no-doc\") {\n@@ -467,6 +475,13 @@ impl Subcommand {\n         }\n     }\n \n+    pub fn rustfix_coverage(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { rustfix_coverage, .. } => rustfix_coverage,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn compare_mode(&self) -> Option<&str> {\n         match *self {\n             Subcommand::Test {"}, {"sha": "41c73f307b6d0586c51add86c2bed48c9eacb585", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b75b1655895e69f074936b73394a72e98aa067b9/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b1655895e69f074936b73394a72e98aa067b9/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b75b1655895e69f074936b73394a72e98aa067b9", "patch": "@@ -1284,6 +1284,10 @@ impl Step for Compiletest {\n             cmd.arg(\"--android-cross-path\").arg(\"\");\n         }\n \n+        if builder.config.cmd.rustfix_coverage() {\n+            cmd.arg(\"--rustfix-coverage\");\n+        }\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         let _folder = builder.fold_output(|| format!(\"test_{}\", suite));"}, {"sha": "089cbc7b78a3c59a328c0ed5f04b297d9e466cac", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b75b1655895e69f074936b73394a72e98aa067b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b1655895e69f074936b73394a72e98aa067b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=b75b1655895e69f074936b73394a72e98aa067b9", "patch": "@@ -246,6 +246,11 @@ pub struct Config {\n     /// mode describing what file the actual ui output will be compared to\n     pub compare_mode: Option<CompareMode>,\n \n+    /// If true, this will generate a coverage file with UI test files that run `MachineApplicable`\n+    /// diagnostics but are missing `run-rustfix` annotations. The generated coverage file is\n+    /// created in `/<build_base>/rustfix_missing_coverage.txt`\n+    pub rustfix_coverage: bool,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,"}, {"sha": "dfc023da9736bab422f44557759163008291af9d", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b75b1655895e69f074936b73394a72e98aa067b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b1655895e69f074936b73394a72e98aa067b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=b75b1655895e69f074936b73394a72e98aa067b9", "patch": "@@ -233,6 +233,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"mode describing what file the actual ui output will be compared to\",\n             \"COMPARE MODE\",\n         )\n+        .optflag(\n+            \"\",\n+            \"rustfix-coverage\",\n+            \"enable this to generate a Rustfix coverage file, which is saved in \\\n+                `./<build_base>/rustfix_missing_coverage.txt`\",\n+        )\n         .optflag(\"h\", \"help\", \"show this message\");\n \n     let (argv0, args_) = args.split_first().unwrap();\n@@ -336,6 +342,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         color,\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n         compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n+        rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),\n@@ -475,6 +482,19 @@ pub fn run_tests(config: &Config) {\n         let _ = fs::remove_dir_all(\"tmp/partitioning-tests\");\n     }\n \n+    // If we want to collect rustfix coverage information,\n+    // we first make sure that the coverage file does not exist.\n+    // It will be created later on.\n+    if config.rustfix_coverage {\n+        let mut coverage_file_path = config.build_base.clone();\n+        coverage_file_path.push(\"rustfix_missing_coverage.txt\");\n+        if coverage_file_path.exists() {\n+            if let Err(e) = fs::remove_file(&coverage_file_path) {\n+                panic!(\"Could not delete {} due to {}\", coverage_file_path.display(), e)\n+            }\n+        }\n+    }\n+\n     let opts = test_opts(config);\n     let tests = make_tests(config);\n     // sadly osx needs some file descriptor limits raised for running tests in"}, {"sha": "c18b6db9a010fc9b6ca2e1c4ae6c3887fb0ff32f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b75b1655895e69f074936b73394a72e98aa067b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b1655895e69f074936b73394a72e98aa067b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b75b1655895e69f074936b73394a72e98aa067b9", "patch": "@@ -19,7 +19,7 @@ use std::collections::{HashMap, HashSet, VecDeque};\n use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fmt;\n-use std::fs::{self, create_dir_all, File};\n+use std::fs::{self, create_dir_all, File, OpenOptions};\n use std::hash::{Hash, Hasher};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n@@ -2818,6 +2818,31 @@ impl<'test> TestCx<'test> {\n \n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n+        } else if self.config.rustfix_coverage {\n+            // Find out which tests have `MachineApplicable` suggestions but are missing\n+            // `run-rustfix` or `run-rustfix-only-machine-applicable` headers\n+            let suggestions = get_suggestions_from_json(\n+                &proc_res.stderr,\n+                &HashSet::new(),\n+                Filter::MachineApplicableOnly\n+            ).unwrap();\n+            if suggestions.len() > 0\n+                && !self.props.run_rustfix\n+                && !self.props.rustfix_only_machine_applicable {\n+                    let mut coverage_file_path = self.config.build_base.clone();\n+                    coverage_file_path.push(\"rustfix_missing_coverage.txt\");\n+                    debug!(\"coverage_file_path: {}\", coverage_file_path.display());\n+\n+                    let mut file = OpenOptions::new()\n+                        .create(true)\n+                        .append(true)\n+                        .open(coverage_file_path.as_path())\n+                        .expect(\"could not create or open file\");\n+\n+                    if let Err(_) = writeln!(file, \"{}\", self.testpaths.file.display()) {\n+                        panic!(\"couldn't write to {}\", coverage_file_path.display());\n+                    }\n+            }\n         } else if self.props.run_rustfix {\n             // Apply suggestions from rustc to the code itself\n             let unfixed_code = self"}]}