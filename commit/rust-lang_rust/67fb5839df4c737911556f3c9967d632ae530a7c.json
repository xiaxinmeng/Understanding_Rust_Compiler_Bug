{"sha": "67fb5839df4c737911556f3c9967d632ae530a7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZmI1ODM5ZGY0YzczNzkxMTU1NmYzYzk5NjdkNjMyYWU1MzBhN2M=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-13T19:45:08Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-20T18:29:42Z"}, "message": "Don't immediately error for cycles during normalization", "tree": {"sha": "d651aed68759ac7929559c433e0bb9d298b018c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d651aed68759ac7929559c433e0bb9d298b018c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67fb5839df4c737911556f3c9967d632ae530a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67fb5839df4c737911556f3c9967d632ae530a7c", "html_url": "https://github.com/rust-lang/rust/commit/67fb5839df4c737911556f3c9967d632ae530a7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67fb5839df4c737911556f3c9967d632ae530a7c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fff3824bc77cd7052e2515f82259e32f8ad1486", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fff3824bc77cd7052e2515f82259e32f8ad1486", "html_url": "https://github.com/rust-lang/rust/commit/5fff3824bc77cd7052e2515f82259e32f8ad1486"}], "stats": {"total": 257, "additions": 171, "deletions": 86}, "files": [{"sha": "fa3d024199849401abb4439d84b14fdb2a331a18", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -738,7 +738,7 @@ impl AutoTraitFinder<'tcx> {\n                     // and turn them into an explicit negative impl for our type.\n                     debug!(\"Projecting and unifying projection predicate {:?}\", predicate);\n \n-                    match poly_project_and_unify_type(select, &obligation.with(p)) {\n+                    match project::poly_project_and_unify_type(select, &obligation.with(p)) {\n                         Err(e) => {\n                             debug!(\n                                 \"evaluate_nested_obligations: Unable to unify predicate \\\n@@ -747,7 +747,11 @@ impl AutoTraitFinder<'tcx> {\n                             );\n                             return false;\n                         }\n-                        Ok(Some(v)) => {\n+                        Ok(Err(project::InProgress)) => {\n+                            debug!(\"evaluate_nested_obligations: recursive projection predicate\");\n+                            return false;\n+                        }\n+                        Ok(Ok(Some(v))) => {\n                             // We only care about sub-obligations\n                             // when we started out trying to unify\n                             // some inference variables. See the comment above\n@@ -766,7 +770,7 @@ impl AutoTraitFinder<'tcx> {\n                                 }\n                             }\n                         }\n-                        Ok(None) => {\n+                        Ok(Ok(None)) => {\n                             // It's ok not to make progress when have no inference variables -\n                             // in that case, we were only performing unifcation to check if an\n                             // error occurred (which would indicate that it's impossible for our"}, {"sha": "a5c6dc042abc38eea92235a890ae06a4d76fc71b", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -622,15 +622,20 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         project_obligation: PolyProjectionObligation<'tcx>,\n         stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,\n     ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {\n+        let tcx = self.selcx.tcx();\n         match project::poly_project_and_unify_type(self.selcx, &project_obligation) {\n-            Ok(None) => {\n+            Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),\n+            Ok(Ok(None)) => {\n                 *stalled_on = trait_ref_infer_vars(\n                     self.selcx,\n                     project_obligation.predicate.to_poly_trait_ref(self.selcx.tcx()),\n                 );\n                 ProcessResult::Unchanged\n             }\n-            Ok(Some(os)) => ProcessResult::Changed(mk_pending(os)),\n+            // Let the caller handle the recursion\n+            Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![\n+                project_obligation.with(project_obligation.predicate.to_predicate(tcx)),\n+            ])),\n             Err(e) => ProcessResult::Error(CodeProjectionError(e)),\n         }\n     }"}, {"sha": "fe406e88c52604cbb0b2616c11b0ca7f747f5715", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -51,9 +51,7 @@ pub use self::object_safety::is_vtable_safe_method;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::on_unimplemented::{OnUnimplementedDirective, OnUnimplementedNote};\n-pub use self::project::{\n-    normalize, normalize_projection_type, normalize_to, poly_project_and_unify_type,\n-};\n+pub use self::project::{normalize, normalize_projection_type, normalize_to};\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;"}, {"sha": "a505d1b594c6310a633d1a032c3171f64fc6fd2f", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 45, "deletions": 29, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -41,6 +41,8 @@ pub type ProjectionObligation<'tcx> = Obligation<'tcx, ty::ProjectionPredicate<'\n \n pub type ProjectionTyObligation<'tcx> = Obligation<'tcx, ty::ProjectionTy<'tcx>>;\n \n+pub(super) struct InProgress;\n+\n /// When attempting to resolve `<T as TraitRef>::Name` ...\n #[derive(Debug)]\n pub enum ProjectionTyError<'tcx> {\n@@ -143,10 +145,26 @@ impl<'tcx> ProjectionTyCandidateSet<'tcx> {\n ///\n /// If successful, this may result in additional obligations. Also returns\n /// the projection cache key used to track these additional obligations.\n-pub fn poly_project_and_unify_type<'cx, 'tcx>(\n+///\n+/// ## Returns\n+///\n+/// - `Err(_)`: the projection can be normalized, but is not equal to the\n+///   expected type.\n+/// - `Ok(Err(InProgress))`: this is called recursively while normalizing\n+///   the same projection.\n+/// - `Ok(Ok(None))`: The projection cannot be normalized due to ambiguity\n+///   (resolving some inference variables in the projection may fix this).\n+/// - `Ok(Ok(Some(obligations)))`: The projection bound holds subject to\n+///    the given obligations. If the projection cannot be normalized because\n+///    the required trait bound doesn't hold this returned with `obligations`\n+///    being a predicate that cannot be proven.\n+pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &PolyProjectionObligation<'tcx>,\n-) -> Result<Option<Vec<PredicateObligation<'tcx>>>, MismatchedProjectionTypes<'tcx>> {\n+) -> Result<\n+    Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n+    MismatchedProjectionTypes<'tcx>,\n+> {\n     debug!(\"poly_project_and_unify_type(obligation={:?})\", obligation);\n \n     let infcx = selcx.infcx();\n@@ -165,10 +183,15 @@ pub fn poly_project_and_unify_type<'cx, 'tcx>(\n ///     <T as Trait>::U == V\n ///\n /// If successful, this may result in additional obligations.\n+///\n+/// See [poly_project_and_unify_type] for an explanation of the return value.\n fn project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionObligation<'tcx>,\n-) -> Result<Option<Vec<PredicateObligation<'tcx>>>, MismatchedProjectionTypes<'tcx>> {\n+) -> Result<\n+    Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n+    MismatchedProjectionTypes<'tcx>,\n+> {\n     debug!(\"project_and_unify_type(obligation={:?})\", obligation);\n \n     let mut obligations = vec![];\n@@ -180,8 +203,9 @@ fn project_and_unify_type<'cx, 'tcx>(\n         obligation.recursion_depth,\n         &mut obligations,\n     ) {\n-        Some(n) => n,\n-        None => return Ok(None),\n+        Ok(Some(n)) => n,\n+        Ok(None) => return Ok(Ok(None)),\n+        Err(InProgress) => return Ok(Err(InProgress)),\n     };\n \n     debug!(\n@@ -196,7 +220,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n     {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n-            Ok(Some(obligations))\n+            Ok(Ok(Some(obligations)))\n         }\n         Err(err) => {\n             debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n@@ -419,6 +443,8 @@ pub fn normalize_projection_type<'a, 'b, 'tcx>(\n         depth,\n         obligations,\n     )\n+    .ok()\n+    .flatten()\n     .unwrap_or_else(move || {\n         // if we bottom out in ambiguity, create a type variable\n         // and a deferred predicate to resolve this when more type\n@@ -455,7 +481,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n     cause: ObligationCause<'tcx>,\n     depth: usize,\n     obligations: &mut Vec<PredicateObligation<'tcx>>,\n-) -> Option<Ty<'tcx>> {\n+) -> Result<Option<Ty<'tcx>>, InProgress> {\n     let infcx = selcx.infcx();\n \n     let projection_ty = infcx.resolve_vars_if_possible(&projection_ty);\n@@ -487,7 +513,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n                 \"opt_normalize_projection_type: \\\n                  found cache entry: ambiguous\"\n             );\n-            return None;\n+            return Ok(None);\n         }\n         Err(ProjectionCacheEntry::InProgress) => {\n             // If while normalized A::B, we are asked to normalize\n@@ -502,24 +528,14 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             // to normalize `A::B`, we will want to check the\n             // where-clauses in scope. So we will try to unify `A::B`\n             // with `A::B`, which can trigger a recursive\n-            // normalization. In that case, I think we will want this code:\n-            //\n-            // ```\n-            // let ty = selcx.tcx().mk_projection(projection_ty.item_def_id,\n-            //                                    projection_ty.substs;\n-            // return Some(NormalizedTy { value: v, obligations: vec![] });\n-            // ```\n+            // normalization.\n \n             debug!(\n                 \"opt_normalize_projection_type: \\\n                  found cache entry: in-progress\"\n             );\n \n-            // But for now, let's classify this as an overflow:\n-            let recursion_limit = selcx.tcx().sess.recursion_limit();\n-            let obligation =\n-                Obligation::with_depth(cause, recursion_limit.0, param_env, projection_ty);\n-            selcx.infcx().report_overflow_error(&obligation, false);\n+            return Err(InProgress);\n         }\n         Err(ProjectionCacheEntry::NormalizedTy(ty)) => {\n             // This is the hottest path in this function.\n@@ -555,7 +571,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n                 cause,\n                 depth,\n             ));\n-            return Some(ty.value);\n+            return Ok(Some(ty.value));\n         }\n         Err(ProjectionCacheEntry::Error) => {\n             debug!(\n@@ -564,7 +580,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             );\n             let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);\n             obligations.extend(result.obligations);\n-            return Some(result.value);\n+            return Ok(Some(result.value));\n         }\n     }\n \n@@ -611,7 +627,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             let cache_value = prune_cache_value_obligations(infcx, &result);\n             infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, cache_value);\n             obligations.extend(result.obligations);\n-            Some(result.value)\n+            Ok(Some(result.value))\n         }\n         Ok(ProjectedTy::NoProgress(projected_ty)) => {\n             debug!(\n@@ -622,15 +638,15 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             let result = Normalized { value: projected_ty, obligations: vec![] };\n             infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());\n             // No need to extend `obligations`.\n-            Some(result.value)\n+            Ok(Some(result.value))\n         }\n         Err(ProjectionTyError::TooManyCandidates) => {\n             debug!(\n                 \"opt_normalize_projection_type: \\\n                  too many candidates\"\n             );\n             infcx.inner.borrow_mut().projection_cache().ambiguous(cache_key);\n-            None\n+            Ok(None)\n         }\n         Err(ProjectionTyError::TraitSelectionError(_)) => {\n             debug!(\"opt_normalize_projection_type: ERROR\");\n@@ -642,7 +658,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             infcx.inner.borrow_mut().projection_cache().error(cache_key);\n             let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);\n             obligations.extend(result.obligations);\n-            Some(result.value)\n+            Ok(Some(result.value))\n         }\n     }\n }\n@@ -1116,11 +1132,11 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n             }\n             super::ImplSourceAutoImpl(..) | super::ImplSourceBuiltin(..) => {\n                 // These traits have no associated types.\n-                span_bug!(\n+                selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n-                    \"Cannot project an associated type from `{:?}`\",\n-                    impl_source\n+                    &format!(\"Cannot project an associated type from `{:?}`\", impl_source),\n                 );\n+                return Err(());\n             }\n         };\n "}, {"sha": "82f476b463d63031e107d558aea7e5767371aa44", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -503,7 +503,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let data = ty::Binder::bind(data);\n                 let project_obligation = obligation.with(data);\n                 match project::poly_project_and_unify_type(self, &project_obligation) {\n-                    Ok(Some(mut subobligations)) => {\n+                    Ok(Ok(Some(mut subobligations))) => {\n                         self.add_depth(subobligations.iter_mut(), obligation.recursion_depth);\n                         let result = self.evaluate_predicates_recursively(\n                             previous_stack,\n@@ -516,7 +516,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         }\n                         result\n                     }\n-                    Ok(None) => Ok(EvaluatedToAmbig),\n+                    Ok(Ok(None)) => Ok(EvaluatedToAmbig),\n+                    // EvaluatedToRecur might also be acceptable here, but use\n+                    // Unknown for now because it means that we won't dismiss a\n+                    // selection candidate solely because it has a projection\n+                    // cycle. This is closest to the previous behavior of\n+                    // immediately erroring.\n+                    Ok(Err(project::InProgress)) => Ok(EvaluatedToUnknown),\n                     Err(_) => Ok(EvaluatedToErr),\n                 }\n             }"}, {"sha": "fa75f6bc152284e73230c2761f7f24cffd3cb47f", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -26,16 +26,16 @@ impl Tr for u32 {\n \n // ...but only if this actually breaks the cycle\n impl Tr for bool {\n-//~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n     type A = Box<Self::B>;\n-    //~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n }\n // (the error is shown twice for some reason)\n \n impl Tr for usize {\n-//~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<usize as Tr>::B == _`\n     type B = &'static Self::A;\n-    //~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<usize as Tr>::A == _`\n }\n \n fn main() {"}, {"sha": "0aea30b11126b944f0896ed89e78a00f81f0756f", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -1,33 +1,34 @@\n-error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n+error[E0275]: overflow evaluating the requirement `<() as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-1.rs:10:6\n    |\n LL | impl Tr for () {}\n    |      ^^\n \n-error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-1.rs:28:6\n    |\n LL | impl Tr for bool {\n-   |      ^^\n+   |      ^^ cyclic type of infinite size\n \n-error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n+error[E0271]: type mismatch resolving `<usize as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-1.rs:35:6\n    |\n LL | impl Tr for usize {\n-   |      ^^\n+   |      ^^ cyclic type of infinite size\n \n-error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-1.rs:30:5\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n-error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+error[E0271]: type mismatch resolving `<usize as Tr>::A == _`\n   --> $DIR/defaults-cyclic-fail-1.rs:37:5\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0275`.\n+Some errors have detailed explanations: E0271, E0275.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "edcd310908aa4b2fd28c9e7b5dde2e1688b8f331", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -10,7 +10,7 @@ trait Tr {\n \n // ...but is an error in any impl that doesn't override at least one of the defaults\n impl Tr for () {}\n-//~^ ERROR overflow evaluating the requirement\n+//~^ ERROR type mismatch resolving `<() as Tr>::B == _`\n \n // As soon as at least one is redefined, it works:\n impl Tr for u8 {\n@@ -28,16 +28,16 @@ impl Tr for u32 {\n \n // ...but only if this actually breaks the cycle\n impl Tr for bool {\n-//~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n     type A = Box<Self::B>;\n-    //~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n }\n // (the error is shown twice for some reason)\n \n impl Tr for usize {\n-//~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<usize as Tr>::B == _`\n     type B = &'static Self::A;\n-    //~^ ERROR overflow evaluating the requirement\n+    //~^ ERROR type mismatch resolving `<usize as Tr>::A == _`\n }\n \n fn main() {"}, {"sha": "f39021c30edc1d4fd6ac5fc9432e07bb4c47811c", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -1,33 +1,33 @@\n-error[E0275]: overflow evaluating the requirement `<() as Tr>::B`\n+error[E0271]: type mismatch resolving `<() as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-2.rs:12:6\n    |\n LL | impl Tr for () {}\n-   |      ^^\n+   |      ^^ cyclic type of infinite size\n \n-error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-2.rs:30:6\n    |\n LL | impl Tr for bool {\n-   |      ^^\n+   |      ^^ cyclic type of infinite size\n \n-error[E0275]: overflow evaluating the requirement `<usize as Tr>::B`\n+error[E0271]: type mismatch resolving `<usize as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-2.rs:37:6\n    |\n LL | impl Tr for usize {\n-   |      ^^\n+   |      ^^ cyclic type of infinite size\n \n-error[E0275]: overflow evaluating the requirement `<bool as Tr>::B`\n+error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-2.rs:32:5\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n-error[E0275]: overflow evaluating the requirement `<usize as Tr>::A`\n+error[E0271]: type mismatch resolving `<usize as Tr>::A == _`\n   --> $DIR/defaults-cyclic-fail-2.rs:39:5\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0275`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "0fd2c707938c68cb7e5ce254d991147fb214cfe8", "filename": "src/test/ui/associated-types/normalize-cycle-in-eval-no-region.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fnormalize-cycle-in-eval-no-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fnormalize-cycle-in-eval-no-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fnormalize-cycle-in-eval-no-region.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -0,0 +1,20 @@\n+// Case that the fix for #74868 also allowed to compile\n+\n+// check-pass\n+\n+trait BoxedDsl {\n+    type Output;\n+}\n+\n+impl<T> BoxedDsl for T\n+where\n+    T: BoxedDsl,\n+{\n+    type Output = <T as BoxedDsl>::Output;\n+}\n+\n+trait HandleUpdate {}\n+\n+impl<T> HandleUpdate for T where T: BoxedDsl<Output = ()> {}\n+\n+fn main() {}"}, {"sha": "dff4c9051f47ad1515100e6cdb232ea5f0319bbd", "filename": "src/test/ui/associated-types/normalize-cycle-in-eval.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fnormalize-cycle-in-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fassociated-types%2Fnormalize-cycle-in-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fnormalize-cycle-in-eval.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -0,0 +1,43 @@\n+// regression test for #74868\n+\n+// check-pass\n+\n+trait BoxedDsl<'a> {\n+    type Output;\n+}\n+\n+impl<'a, T> BoxedDsl<'a> for T\n+where\n+    T: BoxedDsl<'a>,\n+{\n+    type Output = <T as BoxedDsl<'a>>::Output;\n+}\n+\n+// Showing this trait is wf requires proving\n+// Self: HandleUpdate\n+//\n+// The impl below is a candidate for this projection, as well as the `Self:\n+// HandleUpdate` bound in the environment.\n+// We evaluate both candidates to see if we need to consider both applicable.\n+// Evaluating the impl candidate requires evaluating\n+// <T as BoxedDsl<'static>>::Output == ()\n+// The above impl cause normalizing the above type normalize to itself.\n+//\n+// This previously compiled because we would generate a new region\n+// variable each time around the cycle, and evaluation would eventually return\n+// `EvaluatedToErr` from the `Self: Sized` in the impl, which would in turn\n+// leave the bound as the only candidate.\n+//\n+// #73452 changed this so that region variables are canonicalized when we\n+// normalize, which means that the projection cycle is detected before\n+// evaluation returns EvaluatedToErr. The cycle resulted in an error being\n+// emitted immediately, causing this to fail to compile.\n+//\n+// To fix this, normalization doesn't directly emit errors when it finds a\n+// cycle, instead letting the caller handle it. This restores the original\n+// behavior.\n+trait HandleUpdate {}\n+\n+impl<T> HandleUpdate for T where T: BoxedDsl<'static, Output = ()> {}\n+\n+fn main() {}"}, {"sha": "867f24f8cb45e6088a34a4e0154c199ad1bec208", "filename": "src/test/ui/auto-traits/issue-23080-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -1,5 +1,3 @@\n-//~ ERROR\n-\n #![feature(optin_builtin_traits)]\n #![feature(negative_impls)]\n "}, {"sha": "efeceafdd2a7db1609a82af962bd968f6253ec4a", "filename": "src/test/ui/auto-traits/issue-23080-2.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -1,17 +1,11 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:7:10\n+  --> $DIR/issue-23080-2.rs:5:10\n    |\n LL | unsafe auto trait Trait {\n    |                   ----- auto trait cannot have items\n LL |     type Output;\n    |          ^^^^^^\n \n-error[E0275]: overflow evaluating the requirement `<() as Trait>::Output`\n-   |\n-   = note: required because of the requirements on the impl of `Trait` for `()`\n-   = note: required because of the requirements on the impl of `Trait` for `()`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0275, E0380.\n-For more information about an error, try `rustc --explain E0275`.\n+For more information about this error, try `rustc --explain E0380`."}, {"sha": "0a9f8f50bdcbea8b8f545c26c19735b89d41c822", "filename": "src/test/ui/issues/issue-21946.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.rs?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -5,9 +5,9 @@ trait Foo {\n struct FooStruct;\n \n impl Foo for FooStruct {\n-//~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A`\n+    //~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n     type A = <FooStruct as Foo>::A;\n-    //~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A`\n+    //~^ ERROR overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n }\n \n fn main() {}"}, {"sha": "582ce393d7f5473a0aca178308d2f2ecfb072df6", "filename": "src/test/ui/issues/issue-21946.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -1,10 +1,10 @@\n-error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A`\n+error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n   --> $DIR/issue-21946.rs:7:6\n    |\n LL | impl Foo for FooStruct {\n    |      ^^^\n \n-error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A`\n+error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n   --> $DIR/issue-21946.rs:9:5\n    |\n LL |     type A = <FooStruct as Foo>::A;"}, {"sha": "4e2e837c07c6ba5dd9c78363215ef7c32a0d8ef7", "filename": "src/test/ui/issues/issue-23122-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67fb5839df4c737911556f3c9967d632ae530a7c/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr?ref=67fb5839df4c737911556f3c9967d632ae530a7c", "patch": "@@ -1,10 +1,10 @@\n-error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next`\n+error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n   --> $DIR/issue-23122-1.rs:7:15\n    |\n LL | impl<T: Next> Next for GetNext<T> {\n    |               ^^^^\n \n-error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next`\n+error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n   --> $DIR/issue-23122-1.rs:9:5\n    |\n LL |     type Next = <GetNext<T> as Next>::Next;"}]}