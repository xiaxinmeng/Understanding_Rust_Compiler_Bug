{"sha": "082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MmNmMmY5ZDEzNjE2NmNkMWQ1NTJkM2ZiNWFiYjFjNDZjOTlhMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-14T20:49:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-14T20:49:07Z"}, "message": "Auto merge of #63534 - Mark-Simulacrum:stage0-bump, r=Centril\n\nBump to 1.39\n\nr? @Centril", "tree": {"sha": "6ef4da1d58e6bd5dde9b627629ab4e837d079469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef4da1d58e6bd5dde9b627629ab4e837d079469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "html_url": "https://github.com/rust-lang/rust/commit/082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43d03a19f326f4a323569328cc501e86eb6d22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43d03a19f326f4a323569328cc501e86eb6d22e", "html_url": "https://github.com/rust-lang/rust/commit/c43d03a19f326f4a323569328cc501e86eb6d22e"}, {"sha": "f7ff36dcb27b48329e9b1c12f5b78d469fafc067", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ff36dcb27b48329e9b1c12f5b78d469fafc067", "html_url": "https://github.com/rust-lang/rust/commit/f7ff36dcb27b48329e9b1c12f5b78d469fafc067"}], "stats": {"total": 290, "additions": 78, "deletions": 212}, "files": [{"sha": "9c01de8aa825172842a38914b8c48c7209ca1153", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -45,18 +45,6 @@ fn main() {\n         }\n     }\n \n-    // Drop `--error-format json` because despite our desire for json messages\n-    // from Cargo we don't want any from rustc itself.\n-    if let Some(n) = args.iter().position(|n| n == \"--error-format\") {\n-        args.remove(n);\n-        args.remove(n);\n-    }\n-\n-    if let Some(s) = env::var_os(\"RUSTC_ERROR_FORMAT\") {\n-        args.push(\"--error-format\".into());\n-        args.push(s);\n-    }\n-\n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n     let target = args.windows(2)\n@@ -110,7 +98,11 @@ fn main() {\n \n     // Non-zero stages must all be treated uniformly to avoid problems when attempting to uplift\n     // compiler libraries and such from stage 1 to 2.\n-    if stage == \"0\" {\n+    //\n+    // FIXME: the fact that core here is excluded is due to core_arch from our stdarch submodule\n+    // being broken on the beta compiler with bootstrap passed, so this is a temporary workaround\n+    // (we've just snapped, so there are no cfg(bootstrap) related annotations in core).\n+    if stage == \"0\" && crate_name != Some(\"core\") {\n         cmd.arg(\"--cfg\").arg(\"bootstrap\");\n     }\n \n@@ -132,10 +124,7 @@ fn main() {\n         cmd.arg(\"-Dwarnings\");\n         cmd.arg(\"-Drust_2018_idioms\");\n         cmd.arg(\"-Dunused_lifetimes\");\n-        // cfg(not(bootstrap)): Remove this during the next stage 0 compiler update.\n-        // `-Drustc::internal` is a new feature and `rustc_version` mis-reports the `stage`.\n-        let cfg_not_bootstrap = stage != \"0\" && crate_name != Some(\"rustc_version\");\n-        if cfg_not_bootstrap && use_internal_lints(crate_name) {\n+        if use_internal_lints(crate_name) {\n             cmd.arg(\"-Zunstable-options\");\n             cmd.arg(\"-Drustc::internal\");\n         }"}, {"sha": "8dad5f2ef46320c2221b3b3173375189ebe69b37", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -145,7 +145,7 @@ impl StepDescription {\n             only_hosts: S::ONLY_HOSTS,\n             should_run: S::should_run,\n             make_run: S::make_run,\n-            name: unsafe { ::std::intrinsics::type_name::<S>() },\n+            name: std::any::type_name::<S>(),\n         }\n     }\n \n@@ -980,9 +980,6 @@ impl<'a> Builder<'a> {\n         if let Some(target_linker) = self.linker(target) {\n             cargo.env(\"RUSTC_TARGET_LINKER\", target_linker);\n         }\n-        if let Some(ref error_format) = self.config.rustc_error_format {\n-            cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n-        }\n         if !([\"build\", \"check\", \"clippy\", \"fix\", \"rustc\"].contains(&cmd)) && want_rustdoc {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler));\n         }"}, {"sha": "caa4843da4d369a1230c5be822be02329a889475", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.38.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.39.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "4b4b072cc1c9629f79fc33a663e8d5399b3dfd0a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -1116,10 +1116,6 @@ pub fn run_cargo(builder: &Builder<'_>,\n                 },\n                 ..\n             } => (filenames, crate_types),\n-            CargoMessage::CompilerMessage { message } => {\n-                eprintln!(\"{}\", message.rendered);\n-                return;\n-            }\n             _ => return,\n         };\n         for filename in filenames {\n@@ -1256,8 +1252,12 @@ pub fn stream_cargo(\n     }\n     // Instruct Cargo to give us json messages on stdout, critically leaving\n     // stderr as piped so we can get those pretty colors.\n-    cargo.arg(\"--message-format\").arg(\"json\")\n-         .stdout(Stdio::piped());\n+    let mut message_format = String::from(\"json-render-diagnostics\");\n+    if let Some(s) = &builder.config.rustc_error_format  {\n+        message_format.push_str(\",json-diagnostic-\");\n+        message_format.push_str(s);\n+    }\n+    cargo.arg(\"--message-format\").arg(message_format).stdout(Stdio::piped());\n \n     for arg in tail_args {\n         cargo.arg(arg);\n@@ -1310,12 +1310,4 @@ pub enum CargoMessage<'a> {\n     BuildScriptExecuted {\n         package_id: Cow<'a, str>,\n     },\n-    CompilerMessage {\n-        message: ClippyMessage<'a>\n-    }\n-}\n-\n-#[derive(Deserialize)]\n-pub struct ClippyMessage<'a> {\n-    rendered: Cow<'a, str>,\n }"}, {"sha": "0b5a271dbea956ef032d21c2aed12802b957faf0", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -106,8 +106,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: uninit_array![_; CAPACITY],\n-            vals: uninit_array![_; CAPACITY],\n+            keys: [MaybeUninit::UNINIT; CAPACITY],\n+            vals: [MaybeUninit::UNINIT; CAPACITY],\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninit(),\n             len: 0\n@@ -159,7 +159,7 @@ impl<K, V> InternalNode<K, V> {\n     unsafe fn new() -> Self {\n         InternalNode {\n             data: LeafNode::new(),\n-            edges: uninit_array![_; 2*B],\n+            edges: [MaybeUninit::UNINIT; 2*B]\n         }\n     }\n }"}, {"sha": "7421beddd9574e520f5cfd33c990be7d4ae18b2e", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -69,7 +69,7 @@\n #![warn(missing_debug_implementations)]\n #![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n #![allow(explicit_outlives_requirements)]\n-#![cfg_attr(not(bootstrap), allow(incomplete_features))]\n+#![allow(incomplete_features)]\n \n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]\n@@ -84,7 +84,7 @@\n #![feature(coerce_unsized)]\n #![feature(const_generic_impls_guard)]\n #![feature(const_generics)]\n-#![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n+#![feature(const_in_array_repeat_expressions)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n@@ -118,7 +118,7 @@\n #![feature(rustc_const_unstable)]\n #![feature(const_vec_new)]\n #![feature(slice_partition_dedup)]\n-#![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_array)]\n+#![feature(maybe_uninit_extra, maybe_uninit_slice)]\n #![feature(alloc_layout_extra)]\n #![feature(try_trait)]\n #![feature(mem_take)]"}, {"sha": "e8a0a88f12a7e30604ff92702c2d9f0476ad9985", "filename": "src/libcore/any.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -470,10 +470,5 @@ impl TypeId {\n #[stable(feature = \"type_name\", since = \"1.38.0\")]\n #[rustc_const_unstable(feature = \"const_type_name\")]\n pub const fn type_name<T: ?Sized>() -> &'static str {\n-    #[cfg(bootstrap)]\n-    unsafe {\n-        intrinsics::type_name::<T>()\n-    }\n-    #[cfg(not(bootstrap))]\n     intrinsics::type_name::<T>()\n }"}, {"sha": "e91bf53c5b418c40a2237350581b3db16966477b", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -553,12 +553,7 @@ impl char {\n     /// `XID_Start` is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to `ID_Start` but modified for closure under `NFKx`.\n-    #[cfg_attr(bootstrap,\n-               unstable(feature = \"rustc_private\",\n-                        reason = \"mainly needed for compiler internals\",\n-                        issue = \"27812\"))]\n-    #[cfg_attr(not(bootstrap),\n-               unstable(feature = \"unicode_internals\", issue = \"0\"))]\n+    #[unstable(feature = \"unicode_internals\", issue = \"0\")]\n     pub fn is_xid_start(self) -> bool {\n         derived_property::XID_Start(self)\n     }\n@@ -569,12 +564,7 @@ impl char {\n     /// `XID_Continue` is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to `ID_Continue` but modified for closure under NFKx.\n-    #[cfg_attr(bootstrap,\n-               unstable(feature = \"rustc_private\",\n-                        reason = \"mainly needed for compiler internals\",\n-                        issue = \"27812\"))]\n-    #[cfg_attr(not(bootstrap),\n-               unstable(feature = \"unicode_internals\", issue = \"0\"))]\n+    #[unstable(feature = \"unicode_internals\", issue = \"0\")]\n     #[inline]\n     pub fn is_xid_continue(self) -> bool {\n         derived_property::XID_Continue(self)"}, {"sha": "ec22a7ccfe4c34c9ecc470a798cb3f6f12056cd0", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -134,7 +134,6 @@ pub trait Clone : Sized {\n }\n \n /// Derive macro generating an impl of the trait `Clone`.\n-#[cfg(not(bootstrap))]\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "b802216036b9336c5ee803ece9b8c1b7ec0e8b8d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -201,7 +201,6 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n }\n \n /// Derive macro generating an impl of the trait `PartialEq`.\n-#[cfg(not(bootstrap))]\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n@@ -265,7 +264,6 @@ pub trait Eq: PartialEq<Self> {\n }\n \n /// Derive macro generating an impl of the trait `Eq`.\n-#[cfg(not(bootstrap))]\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n@@ -617,7 +615,6 @@ pub trait Ord: Eq + PartialOrd<Self> {\n }\n \n /// Derive macro generating an impl of the trait `Ord`.\n-#[cfg(not(bootstrap))]\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n@@ -867,7 +864,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n }\n \n /// Derive macro generating an impl of the trait `PartialOrd`.\n-#[cfg(not(bootstrap))]\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "9b1616ccce448885720571e065d51a7da149d769", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -116,7 +116,6 @@ pub trait Default: Sized {\n }\n \n /// Derive macro generating an impl of the trait `Default`.\n-#[cfg(not(bootstrap))]\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "d5fae9e74013663ca079cf203ca857b81f57c481", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -546,7 +546,6 @@ pub trait Debug {\n }\n \n // Separate module to reexport the macro `Debug` from prelude without the trait `Debug`.\n-#[cfg(not(bootstrap))]\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Debug`.\n     #[rustc_builtin_macro]\n@@ -555,7 +554,6 @@ pub(crate) mod macros {\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Debug($item:item) { /* compiler built-in */ }\n }\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(inline)]\n pub use macros::Debug;"}, {"sha": "b3971191123901307a98c12bfca26b595b1f1437", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -199,7 +199,6 @@ pub trait Hash {\n }\n \n // Separate module to reexport the macro `Hash` from prelude without the trait `Hash`.\n-#[cfg(not(bootstrap))]\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Hash`.\n     #[rustc_builtin_macro]\n@@ -208,7 +207,6 @@ pub(crate) mod macros {\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Hash($item:item) { /* compiler built-in */ }\n }\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(inline)]\n pub use macros::Hash;"}, {"sha": "c168d5c8a2eac9e58752c2cb6d4ddedd08bc2ec6", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -63,7 +63,7 @@\n #![warn(missing_debug_implementations)]\n #![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n #![allow(explicit_outlives_requirements)]\n-#![cfg_attr(not(bootstrap), allow(incomplete_features))]\n+#![allow(incomplete_features)]\n \n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n@@ -129,7 +129,7 @@\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n-#![feature(maybe_uninit_slice, maybe_uninit_array)]\n+#![feature(maybe_uninit_slice)]\n #![feature(external_doc)]\n #![feature(mem_take)]\n #![feature(associated_type_bounds)]"}, {"sha": "bbed95167161dacecd079e8767ab4f5acf23febb", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -635,46 +635,11 @@ macro_rules! todo {\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n }\n \n-/// Creates an array of [`MaybeUninit`].\n-///\n-/// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`.\n-/// It exists solely because bootstrap does not yet support const array-init expressions.\n-///\n-/// [`MaybeUninit`]: mem/union.MaybeUninit.html\n-// FIXME: Remove both versions of this macro once bootstrap is 1.38.\n-#[macro_export]\n-#[unstable(feature = \"maybe_uninit_array\", issue = \"53491\")]\n-#[cfg(bootstrap)]\n-macro_rules! uninit_array {\n-    // This `assume_init` is safe because an array of `MaybeUninit` does not\n-    // require initialization.\n-    ($t:ty; $size:expr) => (unsafe {\n-        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninit().assume_init()\n-    });\n-}\n-\n-/// Creates an array of [`MaybeUninit`].\n-///\n-/// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`.\n-/// It exists solely because bootstrap does not yet support const array-init expressions.\n-///\n-/// [`MaybeUninit`]: mem/union.MaybeUninit.html\n-// FIXME: Just inline this version of the macro once bootstrap is 1.38.\n-#[macro_export]\n-#[unstable(feature = \"maybe_uninit_array\", issue = \"53491\")]\n-#[cfg(not(bootstrap))]\n-macro_rules! uninit_array {\n-    ($t:ty; $size:expr) => (\n-        [MaybeUninit::<$t>::UNINIT; $size]\n-    );\n-}\n-\n /// Definitions of built-in macros.\n ///\n /// Most of the macro properties (stability, visibility, etc.) are taken from the source code here,\n /// with exception of expansion functions transforming macro inputs into outputs,\n /// those functions are provided by the compiler.\n-#[cfg(not(bootstrap))]\n pub(crate) mod builtin {\n \n     /// Causes compilation to fail with the given error message when encountered."}, {"sha": "3befd421b0125e54995c2d882b2f03e3116e483b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -289,7 +289,6 @@ pub trait Copy : Clone {\n }\n \n /// Derive macro generating an impl of the trait `Copy`.\n-#[cfg(not(bootstrap))]\n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]"}, {"sha": "49711607262df0a5902258fcbbe2f39b75b3d6c8", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -213,7 +213,7 @@ use crate::mem::ManuallyDrop;\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n // Lang item so we can wrap other types in it. This is useful for generators.\n-#[cfg_attr(not(bootstrap), lang = \"maybe_uninit\")]\n+#[lang = \"maybe_uninit\"]\n #[derive(Copy)]\n #[repr(transparent)]\n pub union MaybeUninit<T> {"}, {"sha": "87ec05a243d3619c468ae2615772eb00f3f1d07d", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -453,7 +453,7 @@ pub const fn needs_drop<T>() -> bool {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(bootstrap, allow(deprecated_in_future))]\n+#[allow(deprecated_in_future)]\n #[allow(deprecated)]\n pub unsafe fn zeroed<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();\n@@ -481,7 +481,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[inline]\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(bootstrap, allow(deprecated_in_future))]\n+#[allow(deprecated_in_future)]\n #[allow(deprecated)]\n pub unsafe fn uninitialized<T>() -> T {\n     intrinsics::panic_if_uninhabited::<T>();"}, {"sha": "762403790403dea699538e5c1f827cc1b7a298dd", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -46,16 +46,13 @@ pub use crate::option::Option::{self, Some, None};\n pub use crate::result::Result::{self, Ok, Err};\n \n // Re-exported built-in macros\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use crate::fmt::macros::Debug;\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use crate::hash::macros::Hash;\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use crate::{\n@@ -83,7 +80,6 @@ pub use crate::{\n     trace_macros,\n };\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n #[doc(no_inline)]"}, {"sha": "3584a1282901865e50719a1f9ace5995ea400729", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -1355,7 +1355,7 @@ struct LateLintPassObjects<'a> {\n     lints: &'a mut [LateLintPassObject],\n }\n \n-#[cfg_attr(not(bootstrap), allow(rustc::lint_pass_impl_without_macro))]\n+#[allow(rustc::lint_pass_impl_without_macro)]\n impl LintPass for LateLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()\n@@ -1525,7 +1525,7 @@ struct EarlyLintPassObjects<'a> {\n     lints: &'a mut [EarlyLintPassObject],\n }\n \n-#[cfg_attr(not(bootstrap), allow(rustc::lint_pass_impl_without_macro))]\n+#[allow(rustc::lint_pass_impl_without_macro)]\n impl LintPass for EarlyLintPassObjects<'_> {\n     fn name(&self) -> &'static str {\n         panic!()"}, {"sha": "dea1cc6601b045c35cdbdf166d430347eb478268", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -23,7 +23,7 @@ pub struct DefaultHashTypes {\n \n impl DefaultHashTypes {\n     // we are allowed to use `HashMap` and `HashSet` as identifiers for implementing the lint itself\n-    #[cfg_attr(not(bootstrap), allow(rustc::default_hash_types))]\n+    #[allow(rustc::default_hash_types)]\n     pub fn new() -> Self {\n         let mut map = FxHashMap::default();\n         map.insert(sym::HashMap, sym::FxHashMap);"}, {"sha": "1ddc6780aca890dadf3a07c0b77620aa1c663f84", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -27,7 +27,7 @@ pub trait EncodableWithShorthand: Clone + Eq + Hash {\n     fn variant(&self) -> &Self::Variant;\n }\n \n-#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+#[allow(rustc::usage_of_ty_tykind)]\n impl<'tcx> EncodableWithShorthand for Ty<'tcx> {\n     type Variant = ty::TyKind<'tcx>;\n     fn variant(&self) -> &Self::Variant {\n@@ -160,7 +160,7 @@ where\n     Ok(decoder.map_encoded_cnum_to_current(cnum))\n }\n \n-#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+#[allow(rustc::usage_of_ty_tykind)]\n #[inline]\n pub fn decode_ty<D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n where"}, {"sha": "d504ba4dfe086d490820686758623f539ff1b239", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     /// Intern a type\n-    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+    #[allow(rustc::usage_of_ty_tykind)]\n     #[inline(never)]\n     fn intern_ty(&self,\n         st: TyKind<'tcx>\n@@ -2076,7 +2076,7 @@ impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {\n     }\n }\n \n-#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+#[allow(rustc::usage_of_ty_tykind)]\n impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n         &self.0.sty\n@@ -2291,7 +2291,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_fn_ptr(converted_sig)\n     }\n \n-    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+    #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n     pub fn mk_ty(&self, st: TyKind<'tcx>) -> Ty<'tcx> {\n         self.interners.intern_ty(st)"}, {"sha": "9119505acd1743d9a7cc9bd353e2680649f6f8ba", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -18,7 +18,7 @@ impl FlagComputation {\n         }\n     }\n \n-    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+    #[allow(rustc::usage_of_ty_tykind)]\n     pub fn for_sty(st: &ty::TyKind<'_>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_sty(st);\n@@ -62,7 +62,7 @@ impl FlagComputation {\n         } // otherwise, this binder captures nothing\n     }\n \n-    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+    #[allow(rustc::usage_of_ty_tykind)]\n     fn add_sty(&mut self, st: &ty::TyKind<'_>) {\n         match st {\n             &ty::Bool |"}, {"sha": "a8ff36a3946573c4b6c5f3b18b687d6408be5e3a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -483,7 +483,7 @@ bitflags! {\n     }\n }\n \n-#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+#[allow(rustc::usage_of_ty_tykind)]\n pub struct TyS<'tcx> {\n     pub sty: TyKind<'tcx>,\n     pub flags: TypeFlags,"}, {"sha": "42e367b85182521de97b85c9feb73e1d303fece1", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -1,6 +1,6 @@\n //! This module contains `TyKind` and its major components.\n \n-#![cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+#![allow(rustc::usage_of_ty_tykind)]\n \n use crate::hir;\n use crate::hir::def_id::DefId;"}, {"sha": "f7593501959c78c4b8e2bd132fe52b58dda8ab25", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -27,7 +27,7 @@\n \n #![cfg_attr(unix, feature(libc))]\n \n-#![cfg_attr(not(bootstrap), allow(rustc::default_hash_types))]\n+#![allow(rustc::default_hash_types)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "3d3a020ef0c8e71b60ea893c07bcf0819e09af6d", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -1,5 +1,5 @@\n #![feature(proc_macro_hygiene)]\n-#![cfg_attr(not(bootstrap), allow(rustc::default_hash_types))]\n+#![allow(rustc::default_hash_types)]\n \n #![recursion_limit=\"128\"]\n "}, {"sha": "dafa866117681df8c2d2016a27a8b7587bad0355", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -114,26 +114,20 @@ impl TargetDataLayout {\n                 [p] if p.starts_with(\"P\") => {\n                     dl.instruction_address_space = parse_address_space(&p[1..], \"P\")?\n                 }\n-                // FIXME: Ping cfg(bootstrap) -- Use `ref a @ ..` with new bootstrap compiler.\n-                [\"a\", ..] => {\n-                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                [\"a\", ref a @ ..] => {\n                     dl.aggregate_align = align(a, \"a\")?\n                 }\n-                [\"f32\", ..] => {\n-                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                [\"f32\", ref a @ ..] => {\n                     dl.f32_align = align(a, \"f32\")?\n                 }\n-                [\"f64\", ..] => {\n-                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                [\"f64\", ref a @ ..] => {\n                     dl.f64_align = align(a, \"f64\")?\n                 }\n-                [p @ \"p\", s, ..] | [p @ \"p0\", s, ..] => {\n-                    let a = &spec_parts[2..]; // FIXME inline into pattern.\n+                [p @ \"p\", s, ref a @ ..] | [p @ \"p0\", s, ref a @ ..] => {\n                     dl.pointer_size = size(s, p)?;\n                     dl.pointer_align = align(a, p)?;\n                 }\n-                [s, ..] if s.starts_with(\"i\") => {\n-                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                [s, ref a @ ..] if s.starts_with(\"i\") => {\n                     let bits = match s[1..].parse::<u64>() {\n                         Ok(bits) => bits,\n                         Err(_) => {\n@@ -157,8 +151,7 @@ impl TargetDataLayout {\n                         dl.i128_align = a;\n                     }\n                 }\n-                [s, ..] if s.starts_with(\"v\") => {\n-                    let a = &spec_parts[1..]; // FIXME inline into pattern.\n+                [s, ref a @ ..] if s.starts_with(\"v\") => {\n                     let v_size = size(&s[1..], \"v\")?;\n                     let a = align(a, s)?;\n                     if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {"}, {"sha": "52659b6902d31076a48dc46509acecb5539c88f0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -1916,9 +1916,7 @@ fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: &'tcx ty::AdtDef, sp: Span, d\n     );\n     let mut err = struct_span_err!(tcx.sess, sp, E0731, \"transparent enum {}\", msg);\n     err.span_label(sp, &msg);\n-    if let &[.., ref end] = &variant_spans[..] {\n-        // FIXME: Ping cfg(bootstrap) -- Use `ref start @ ..` with new bootstrap compiler.\n-        let start = &variant_spans[..variant_spans.len() - 1];\n+    if let &[ref start @ .., ref end] = &variant_spans[..] {\n         for variant_span in start {\n             err.span_label(*variant_span, \"\");\n         }"}, {"sha": "1f48315d3f8dba07e4d353db03c0e4a385d08443", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -228,7 +228,7 @@\n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable\n // NB: the following list is sorted to minimize merge conflicts.\n-#![cfg_attr(not(bootstrap), feature(__rust_unstable_column))]\n+#![feature(__rust_unstable_column)]\n #![feature(alloc_error_handler)]\n #![feature(alloc_layout_extra)]\n #![feature(allocator_api)]\n@@ -513,7 +513,7 @@ pub use std_detect::detect;\n \n // Re-export macros defined in libcore.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(deprecated_in_future)]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::{\n     // Stable\n     assert_eq,\n@@ -531,7 +531,6 @@ pub use core::{\n };\n \n // Re-export built-in macros defined through libcore.\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n pub use core::{\n     // Stable"}, {"sha": "611a1709c8d91c688fc5014ecad786eec9c5baea", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -8,8 +8,7 @@\n \n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n-#[cfg_attr(bootstrap, doc(include = \"os/raw/char.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"char.md\"))]\n+#[doc(include = \"char.md\")]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"hexagon\",\n@@ -33,8 +32,7 @@\n                                          target_arch = \"powerpc\")),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/char.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"char.md\"))]\n+#[doc(include = \"char.md\")]\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"hexagon\",\n@@ -58,51 +56,37 @@\n                                              target_arch = \"powerpc\")),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/schar.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"schar.md\"))]\n+#[doc(include = \"schar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/uchar.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"uchar.md\"))]\n+#[doc(include = \"uchar.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/short.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"short.md\"))]\n+#[doc(include = \"short.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_short = i16;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/ushort.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"ushort.md\"))]\n+#[doc(include = \"ushort.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ushort = u16;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/int.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"int.md\"))]\n+#[doc(include = \"int.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_int = i32;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/uint.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"uint.md\"))]\n+#[doc(include = \"uint.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uint = u32;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/long.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"long.md\"))]\n+#[doc(include = \"long.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i32;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/ulong.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"ulong.md\"))]\n+#[doc(include = \"ulong.md\")]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u32;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/long.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"long.md\"))]\n+#[doc(include = \"long.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i64;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/ulong.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"ulong.md\"))]\n+#[doc(include = \"ulong.md\")]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u64;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/longlong.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"longlong.md\"))]\n+#[doc(include = \"longlong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_longlong = i64;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/ulonglong.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"ulonglong.md\"))]\n+#[doc(include = \"ulonglong.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulonglong = u64;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/float.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"float.md\"))]\n+#[doc(include = \"float.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_float = f32;\n-#[cfg_attr(bootstrap, doc(include = \"os/raw/double.md\"))]\n-#[cfg_attr(not(bootstrap), doc(include = \"double.md\"))]\n+#[doc(include = \"double.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n \n #[stable(feature = \"raw_os\", since = \"1.1.0\")]"}, {"sha": "752c6202ee489233d7f3066e838b185cbb6b51a0", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -7,10 +7,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n // Re-exported core operators\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)]\n-pub use crate::marker::Copy;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n pub use crate::marker::{Send, Sized, Sync, Unpin};\n@@ -24,21 +20,9 @@ pub use crate::ops::{Drop, Fn, FnMut, FnOnce};\n pub use crate::mem::drop;\n \n // Re-exported types and traits\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)]\n-pub use crate::clone::Clone;\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)]\n-pub use crate::cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n pub use crate::convert::{AsRef, AsMut, Into, From};\n-#[cfg(bootstrap)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)]\n-pub use crate::default::Default;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)]\n pub use crate::iter::{Iterator, Extend, IntoIterator};\n@@ -53,7 +37,6 @@ pub use crate::option::Option::{self, Some, None};\n pub use crate::result::Result::{self, Ok, Err};\n \n // Re-exported built-in macros\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[doc(no_inline)]\n pub use core::prelude::v1::{\n@@ -83,7 +66,6 @@ pub use core::prelude::v1::{\n \n // FIXME: Attribute and derive macros are not documented because for them rustdoc generates\n // dead links which fail link checker testing.\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n #[doc(hidden)]"}, {"sha": "fd6e46fd61dc581d7c331de0aecba4c16a6ece5f", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -163,7 +163,6 @@ pub use self::condvar::{Condvar, WaitTimeoutResult};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::mutex::{Mutex, MutexGuard};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(bootstrap, allow(deprecated_in_future))]\n #[allow(deprecated)]\n pub use self::once::{Once, OnceState, ONCE_INIT};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "518aef4ed5e81c23d129433e8262f7a3761398f6", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -1,4 +1,4 @@\n-#![allow(deprecated_in_future)] // mem::uninitialized; becomes `deprecated` when nightly is 1.39\n+#![allow(deprecated)] // mem::uninitialized\n \n use crate::io::ErrorKind;\n use crate::mem;"}, {"sha": "c1b0dbc0881d355d65381f52907d85bb227505b2", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -4,13 +4,11 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n-    // FIXME: the not(bootstrap) part is needed because of the issue addressed by #62286,\n-    // and could be removed once that change is in beta.\n-    if cfg!(all(not(bootstrap), feature = \"llvm-libunwind\")) &&\n+    if cfg!(feature = \"llvm-libunwind\") &&\n         (target.contains(\"linux\") ||\n          target.contains(\"fuchsia\")) {\n         // Build the unwinding from libunwind C/C++ source code.\n-        #[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n+        #[cfg(feature = \"llvm-libunwind\")]\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n@@ -46,7 +44,7 @@ fn main() {\n     }\n }\n \n-#[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n+#[cfg(feature = \"llvm-libunwind\")]\n mod llvm_libunwind {\n     use std::env;\n     use std::path::Path;"}, {"sha": "7c9eaa51fd94e8d5a84621a224eccfa9e8711abb", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -70,7 +70,7 @@ pub enum _Unwind_Context {}\n \n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n-#[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+#[cfg_attr(all(feature = \"llvm-libunwind\",\n                any(target_os = \"fuchsia\", target_os = \"linux\")),\n            link(name = \"unwind\", kind = \"static\"))]\n extern \"C\" {\n@@ -97,7 +97,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     }\n     pub use _Unwind_Action::*;\n \n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(feature = \"llvm-libunwind\",\n                    any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n@@ -153,7 +153,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     pub const UNWIND_POINTER_REG: c_int = 12;\n     pub const UNWIND_IP_REG: c_int = 15;\n \n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(feature = \"llvm-libunwind\",\n                    any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n@@ -218,7 +218,7 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n cfg_if::cfg_if! {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(feature = \"llvm-libunwind\",\n                    any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n@@ -230,7 +230,7 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n-    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(feature = \"llvm-libunwind\",\n                    any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {"}, {"sha": "1a9e64a1862c9fa120bebf6bf6cd9f1110ef7cbb", "filename": "src/stage0.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-07-04\n+date: 2019-08-13\n rustc: beta\n cargo: beta\n \n@@ -25,7 +25,7 @@ cargo: beta\n #\n # This means that there's a small window of time (a few days) where artifacts\n # are downloaded from dev-static.rust-lang.org instead of static.rust-lang.org.\n-# In order to ease this transition we have an extra key which is in the \n+# In order to ease this transition we have an extra key which is in the\n # configuration file below. When uncommented this will instruct the bootstrap.py\n # script to download from dev-static.rust-lang.org.\n #"}, {"sha": "0cace0ca0355aefc5985b10a24fa12efc3b05258", "filename": "src/test/ui/lint/lint-qualification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Ftest%2Fui%2Flint%2Flint-qualification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082cf2f9d136166cd1d552d3fb5abb1c46c99a14/src%2Ftest%2Fui%2Flint%2Flint-qualification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-qualification.rs?ref=082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "patch": "@@ -1,5 +1,5 @@\n #![deny(unused_qualifications)]\n-#[allow(deprecated)]\n+#![allow(deprecated)]\n \n mod foo {\n     pub fn bar() {}"}]}