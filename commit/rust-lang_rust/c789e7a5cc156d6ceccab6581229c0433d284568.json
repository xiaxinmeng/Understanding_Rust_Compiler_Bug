{"sha": "c789e7a5cc156d6ceccab6581229c0433d284568", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ODllN2E1Y2MxNTZkNmNlY2NhYjY1ODEyMjljMDQzM2QyODQ1Njg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T12:34:54Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:42Z"}, "message": "lowering: extract lower_expr_range", "tree": {"sha": "c494736bd5433a6c2ea6881ffeb830949e417138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c494736bd5433a6c2ea6881ffeb830949e417138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c789e7a5cc156d6ceccab6581229c0433d284568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c789e7a5cc156d6ceccab6581229c0433d284568", "html_url": "https://github.com/rust-lang/rust/commit/c789e7a5cc156d6ceccab6581229c0433d284568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c789e7a5cc156d6ceccab6581229c0433d284568/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119499230c912b62772623dfc5d70d70fa10f70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/119499230c912b62772623dfc5d70d70fa10f70f", "html_url": "https://github.com/rust-lang/rust/commit/119499230c912b62772623dfc5d70d70fa10f70f"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "acd0036ff66b37f993e24dfdb56d4d6af8cf8f58", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c789e7a5cc156d6ceccab6581229c0433d284568/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c789e7a5cc156d6ceccab6581229c0433d284568/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=c789e7a5cc156d6ceccab6581229c0433d284568", "patch": "@@ -376,45 +376,7 @@ impl LoweringContext<'_> {\n                 )\n             }\n             ExprKind::Range(ref e1, ref e2, lims) => {\n-                use syntax::ast::RangeLimits::*;\n-\n-                let path = match (e1, e2, lims) {\n-                    (&None, &None, HalfOpen) => sym::RangeFull,\n-                    (&Some(..), &None, HalfOpen) => sym::RangeFrom,\n-                    (&None, &Some(..), HalfOpen) => sym::RangeTo,\n-                    (&Some(..), &Some(..), HalfOpen) => sym::Range,\n-                    (&None, &Some(..), Closed) => sym::RangeToInclusive,\n-                    (&Some(..), &Some(..), Closed) => unreachable!(),\n-                    (_, &None, Closed) => self.diagnostic()\n-                        .span_fatal(e.span, \"inclusive range with no end\")\n-                        .raise(),\n-                };\n-\n-                let fields = e1.iter()\n-                    .map(|e| (\"start\", e))\n-                    .chain(e2.iter().map(|e| (\"end\", e)))\n-                    .map(|(s, e)| {\n-                        let expr = P(self.lower_expr(&e));\n-                        let ident = Ident::new(Symbol::intern(s), e.span);\n-                        self.field(ident, expr, e.span)\n-                    })\n-                    .collect::<P<[hir::Field]>>();\n-\n-                let is_unit = fields.is_empty();\n-                let struct_path = [sym::ops, path];\n-                let struct_path = self.std_path(e.span, &struct_path, None, is_unit);\n-                let struct_path = hir::QPath::Resolved(None, P(struct_path));\n-\n-                return hir::Expr {\n-                    hir_id: self.lower_node_id(e.id),\n-                    node: if is_unit {\n-                        hir::ExprKind::Path(struct_path)\n-                    } else {\n-                        hir::ExprKind::Struct(P(struct_path), fields, None)\n-                    },\n-                    span: e.span,\n-                    attrs: e.attrs.clone(),\n-                };\n+                self.lower_expr_range(e.span, e1.as_deref(), e2.as_deref(), lims)\n             }\n             ExprKind::Path(ref qself, ref path) => {\n                 let qpath = self.lower_qpath(\n@@ -497,6 +459,49 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    fn lower_expr_range(\n+        &mut self,\n+        span: Span,\n+        e1: Option<&Expr>,\n+        e2: Option<&Expr>,\n+        lims: RangeLimits,\n+    ) -> hir::ExprKind {\n+        use syntax::ast::RangeLimits::*;\n+\n+        let path = match (e1, e2, lims) {\n+            (None, None, HalfOpen) => sym::RangeFull,\n+            (Some(..), None, HalfOpen) => sym::RangeFrom,\n+            (None, Some(..), HalfOpen) => sym::RangeTo,\n+            (Some(..), Some(..), HalfOpen) => sym::Range,\n+            (None, Some(..), Closed) => sym::RangeToInclusive,\n+            (Some(..), Some(..), Closed) => unreachable!(),\n+            (_, None, Closed) => self.diagnostic()\n+                .span_fatal(span, \"inclusive range with no end\")\n+                .raise(),\n+        };\n+\n+        let fields = e1.iter()\n+            .map(|e| (\"start\", e))\n+            .chain(e2.iter().map(|e| (\"end\", e)))\n+            .map(|(s, e)| {\n+                let expr = P(self.lower_expr(&e));\n+                let ident = Ident::new(Symbol::intern(s), e.span);\n+                self.field(ident, expr, e.span)\n+            })\n+            .collect::<P<[hir::Field]>>();\n+\n+        let is_unit = fields.is_empty();\n+        let struct_path = [sym::ops, path];\n+        let struct_path = self.std_path(span, &struct_path, None, is_unit);\n+        let struct_path = hir::QPath::Resolved(None, P(struct_path));\n+\n+        if is_unit {\n+            hir::ExprKind::Path(struct_path)\n+        } else {\n+            hir::ExprKind::Struct(P(struct_path), fields, None)\n+        }\n+    }\n+\n     fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind {\n         let hir_asm = hir::InlineAsm {\n             inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),"}]}