{"sha": "d13fe01f824f9a58f94058948e57f4d8c6365866", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxM2ZlMDFmODI0ZjlhNThmOTQwNTg5NDhlNTdmNGQ4YzYzNjU4NjY=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-03-04T17:15:14Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-03-06T13:19:56Z"}, "message": "add working shim for environ", "tree": {"sha": "4f3aa68aa7ddab2753a10367f9c631e635dd16d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3aa68aa7ddab2753a10367f9c631e635dd16d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d13fe01f824f9a58f94058948e57f4d8c6365866", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXmJN/QAKCRAnUl7150IK\nUBJ/AQCmJngmiTySUfPvxuj8D+qTCEk3EIPPJoTNcnm0ESpApQD8CXrqy0mIM5Gn\nSRMk9lo6Rfeg2ZRdwoKNi+xAoVub1wg=\n=b7ak\n-----END PGP SIGNATURE-----", "payload": "tree 4f3aa68aa7ddab2753a10367f9c631e635dd16d8\nparent c72af45b1cb0fd54ffc840bf8211e955c2b906fb\nauthor Christian Poveda <git@christianpoveda.xyz> 1583342114 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1583500796 -0500\n\nadd working shim for environ\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d13fe01f824f9a58f94058948e57f4d8c6365866", "html_url": "https://github.com/rust-lang/rust/commit/d13fe01f824f9a58f94058948e57f4d8c6365866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d13fe01f824f9a58f94058948e57f4d8c6365866/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c72af45b1cb0fd54ffc840bf8211e955c2b906fb", "html_url": "https://github.com/rust-lang/rust/commit/c72af45b1cb0fd54ffc840bf8211e955c2b906fb"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "dacd996c4a6e098080bd84278388bcb387f6a1b5", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d13fe01f824f9a58f94058948e57f4d8c6365866/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13fe01f824f9a58f94058948e57f4d8c6365866/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d13fe01f824f9a58f94058948e57f4d8c6365866", "patch": "@@ -77,8 +77,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         ),\n     );\n     // Complete initialization.\n-    MemoryExtra::init_extern_statics(&mut ecx)?;\n     EnvVars::init(&mut ecx, config.excluded_env_vars);\n+    MemoryExtra::init_extern_statics(&mut ecx)?;\n \n     // Setup first stack-frame\n     let main_instance = ty::Instance::mono(tcx, main_id);"}, {"sha": "0e3cc58df736aa72c9d18b60c34356bc66289a53", "filename": "src/machine.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d13fe01f824f9a58f94058948e57f4d8c6365866/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13fe01f824f9a58f94058948e57f4d8c6365866/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d13fe01f824f9a58f94058948e57f4d8c6365866", "patch": "@@ -84,6 +84,9 @@ pub struct MemoryExtra {\n     /// An allocation ID to report when it is being allocated\n     /// (helps for debugging memory leaks).\n     tracked_alloc_id: Option<AllocId>,\n+\n+    /// The `AllocId` for the `environ` static.\n+    pub(crate) environ: Option<Scalar<Tag>>,\n }\n \n impl MemoryExtra {\n@@ -99,6 +102,7 @@ impl MemoryExtra {\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n             tracked_alloc_id,\n+            environ: None,\n         }\n     }\n \n@@ -118,6 +122,16 @@ impl MemoryExtra {\n                     .extern_statics\n                     .insert(Symbol::intern(\"__cxa_thread_atexit_impl\"), place.ptr.assert_ptr().alloc_id)\n                     .unwrap_none();\n+\n+                // \"environ\"\n+                let layout = this.layout_of(this.tcx.types.usize)?;\n+                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                this.write_scalar(this.memory.extra.environ.unwrap(), place.into())?;\n+                this.memory\n+                    .extra\n+                    .extern_statics\n+                    .insert(Symbol::intern(\"environ\"), place.ptr.assert_ptr().alloc_id)\n+                    .unwrap_none();\n             }\n             _ => {} // No \"extern statics\" supported on this platform\n         }"}, {"sha": "833fef69f28f19a7b0c4a8f68b5b4a9f2cb0144d", "filename": "src/shims/env.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d13fe01f824f9a58f94058948e57f4d8c6365866/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13fe01f824f9a58f94058948e57f4d8c6365866/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=d13fe01f824f9a58f94058948e57f4d8c6365866", "patch": "@@ -2,6 +2,7 @@ use std::ffi::{OsString, OsStr};\n use std::env;\n \n use crate::stacked_borrows::Tag;\n+use crate::rustc_target::abi::LayoutOf;\n use crate::*;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -20,15 +21,29 @@ impl EnvVars {\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n         excluded_env_vars: Vec<String>,\n     ) {\n+        let mut vars = Vec::new();\n         if ecx.machine.communicate {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n                     let var_ptr =\n                         alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx);\n                     ecx.machine.env_vars.map.insert(OsString::from(name), var_ptr);\n+                    vars.push(var_ptr.into());\n                 }\n             }\n         }\n+        // Add the trailing null pointer\n+        vars.push(Scalar::from_int(0, ecx.pointer_size()));\n+        // Make an array with all these pointers inside Miri.\n+        let tcx = ecx.tcx;\n+        let environ_layout =\n+            ecx.layout_of(tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), vars.len() as u64)).unwrap();\n+        let environ_place = ecx.allocate(environ_layout, MiriMemoryKind::Machine.into());\n+        for (idx, var) in vars.into_iter().enumerate() {\n+            let place = ecx.mplace_field(environ_place, idx as u64).unwrap();\n+            ecx.write_scalar(var, place.into()).unwrap();\n+        }\n+        ecx.memory.extra.environ = Some(environ_place.ptr.into());\n     }\n }\n "}]}