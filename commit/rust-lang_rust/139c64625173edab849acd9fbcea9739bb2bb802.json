{"sha": "139c64625173edab849acd9fbcea9739bb2bb802", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOWM2NDYyNTE3M2VkYWI4NDlhY2Q5ZmJjZWE5NzM5YmIyYmI4MDI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-04-15T13:15:31Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-04-15T21:38:48Z"}, "message": "Fix clippy warnings\n\nclippy::{filter_next,single_char_pattern,unit_arg,identity_conversion,nonminimal_bool}", "tree": {"sha": "0c7e08f692321138c8cb0c7c12151255ea13b3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7e08f692321138c8cb0c7c12151255ea13b3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/139c64625173edab849acd9fbcea9739bb2bb802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/139c64625173edab849acd9fbcea9739bb2bb802", "html_url": "https://github.com/rust-lang/rust/commit/139c64625173edab849acd9fbcea9739bb2bb802", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/139c64625173edab849acd9fbcea9739bb2bb802/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "835428c35d785733e72bfbf32fc2f8fff3e50e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/835428c35d785733e72bfbf32fc2f8fff3e50e63", "html_url": "https://github.com/rust-lang/rust/commit/835428c35d785733e72bfbf32fc2f8fff3e50e63"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "b4a9da847876d493b375d656cf9b806036280b56", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/139c64625173edab849acd9fbcea9739bb2bb802/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139c64625173edab849acd9fbcea9739bb2bb802/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=139c64625173edab849acd9fbcea9739bb2bb802", "patch": "@@ -971,7 +971,7 @@ impl<T> Vec<T> {\n         }\n \n         let len = self.len();\n-        if !(index < len) {\n+        if index >= len {\n             assert_failed(index, len);\n         }\n         unsafe {\n@@ -1010,7 +1010,7 @@ impl<T> Vec<T> {\n         }\n \n         let len = self.len();\n-        if !(index <= len) {\n+        if index > len {\n             assert_failed(index, len);\n         }\n \n@@ -1058,7 +1058,7 @@ impl<T> Vec<T> {\n         }\n \n         let len = self.len();\n-        if !(index < len) {\n+        if index >= len {\n             assert_failed(index, len);\n         }\n         unsafe {\n@@ -1331,10 +1331,10 @@ impl<T> Vec<T> {\n             panic!(\"end drain index (is {}) should be <= len (is {})\", end, len);\n         }\n \n-        if !(start <= end) {\n+        if start > end {\n             start_assert_failed(start, end);\n         }\n-        if !(end <= len) {\n+        if end > len {\n             end_assert_failed(end, len);\n         }\n \n@@ -1432,7 +1432,7 @@ impl<T> Vec<T> {\n             panic!(\"`at` split index (is {}) should be <= len (is {})\", at, len);\n         }\n \n-        if !(at <= self.len()) {\n+        if at > self.len() {\n             assert_failed(at, self.len());\n         }\n "}, {"sha": "4adf314c3d46a763f56c8ae54047d09a8c517a4b", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=139c64625173edab849acd9fbcea9739bb2bb802", "patch": "@@ -297,7 +297,6 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         self.collect_outlives_from_predicate_list(\n             move |ty| ty == identity_proj,\n             traits::elaborate_predicates(tcx, trait_predicates)\n-                .into_iter()\n                 .map(|o| o.predicate)\n                 .collect::<Vec<_>>(),\n         )"}, {"sha": "7987b77997d71ba58331ece521c75d063d7cc298", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=139c64625173edab849acd9fbcea9739bb2bb802", "patch": "@@ -495,7 +495,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // to store those. Otherwise, we'll pass in `None` to the\n         // functions below, which will trigger them to report errors\n         // eagerly.\n-        let mut outlives_requirements = infcx.tcx.is_closure(mir_def_id).then(|| vec![]);\n+        let mut outlives_requirements = infcx.tcx.is_closure(mir_def_id).then(Vec::new);\n \n         self.check_type_tests(infcx, body, outlives_requirements.as_mut(), &mut errors_buffer);\n "}, {"sha": "0fd930090d56a07250cc66efbb8d5d2e11421d27", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=139c64625173edab849acd9fbcea9739bb2bb802", "patch": "@@ -549,7 +549,7 @@ where\n                 let n = base.len(self)?;\n                 if n < u64::from(min_length) {\n                     // This can only be reached in ConstProp and non-rustc-MIR.\n-                    throw_ub!(BoundsCheckFailed { len: min_length.into(), index: n.into() });\n+                    throw_ub!(BoundsCheckFailed { len: min_length.into(), index: n });\n                 }\n \n                 let index = if from_end {"}, {"sha": "0f527419d03174b694782e36433aa8a3ce0ca161", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=139c64625173edab849acd9fbcea9739bb2bb802", "patch": "@@ -1388,7 +1388,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     (self.tcx.sess.source_map().span_to_snippet(span), &obligation.cause.code)\n                 {\n                     let generics = self.tcx.generics_of(*def_id);\n-                    if generics.params.iter().filter(|p| p.name.as_str() != \"Self\").next().is_some()\n+                    if generics.params.iter().any(|p| p.name.as_str() != \"Self\")\n                         && !snippet.ends_with('>')\n                     {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n@@ -1817,7 +1817,7 @@ pub fn suggest_constraining_type_param(\n         // Account for `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n         let mut trailing_comma = false;\n         if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(where_clause_span) {\n-            trailing_comma = snippet.ends_with(\",\");\n+            trailing_comma = snippet.ends_with(',');\n         }\n         let where_clause_span = if trailing_comma {\n             let hi = where_clause_span.hi();"}, {"sha": "7ebb200abfe81ab3b905ae1f50b12813cc2f645f", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139c64625173edab849acd9fbcea9739bb2bb802/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=139c64625173edab849acd9fbcea9739bb2bb802", "patch": "@@ -16,12 +16,12 @@ use std::sync::mpsc::{channel, Receiver, Sender};\n use std::sync::Arc;\n \n macro_rules! try_err {\n-    ($e:expr, $file:expr) => {{\n+    ($e:expr, $file:expr) => {\n         match $e {\n             Ok(e) => e,\n             Err(e) => return Err(E::new(e, $file)),\n         }\n-    }};\n+    };\n }\n \n pub trait PathError {"}]}