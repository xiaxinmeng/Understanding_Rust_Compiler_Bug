{"sha": "fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZjJiMzVhNmUxZmE0MmI4NTllYmZlMWEzZmJkZDIyNTM1ODBjMzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-03T23:29:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-03T23:29:13Z"}, "message": "rollup merge of #18355 : chastell/guide_iterators_macros_unsafe_fixes", "tree": {"sha": "f75ab297f5d37e476e2d600a0f57a21ea5735c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f75ab297f5d37e476e2d600a0f57a21ea5735c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32", "html_url": "https://github.com/rust-lang/rust/commit/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aaee490d3e7e6d242aa0c43e4034ad63739e092", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aaee490d3e7e6d242aa0c43e4034ad63739e092", "html_url": "https://github.com/rust-lang/rust/commit/3aaee490d3e7e6d242aa0c43e4034ad63739e092"}, {"sha": "1bfe6a2a54e47679b4aed2a745dbd70bb393121a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfe6a2a54e47679b4aed2a745dbd70bb393121a", "html_url": "https://github.com/rust-lang/rust/commit/1bfe6a2a54e47679b4aed2a745dbd70bb393121a"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "d98f7c393f03882f9df10ca4daacf5df4008450d", "filename": "src/doc/guide.md", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=fff2b35a6e1fa42b859ebfe1a3fbdd2253580c32", "patch": "@@ -4467,18 +4467,19 @@ see why consumers matter.\n \n ## Iterators\n \n-As we've said before, an iterator is something that we can call the `.next()`\n-method on repeatedly, and it gives us a sequence of things. Because you need\n-to call the method, this means that iterators are **lazy**. This code, for\n-example, does not actually generate the numbers `1-100`, and just creates a\n-value that represents the sequence:\n+As we've said before, an iterator is something that we can call the\n+`.next()` method on repeatedly, and it gives us a sequence of things.\n+Because you need to call the method, this means that iterators\n+are **lazy** and don't need to generate all of the values upfront.\n+This code, for example, does not actually generate the numbers\n+`1-100`, and just creates a value that represents the sequence:\n \n ```{rust}\n let nums = range(1i, 100i);\n ```\n \n Since we didn't do anything with the range, it didn't generate the sequence.\n-Once we add the consumer:\n+Let's add the consumer:\n \n ```{rust}\n let nums = range(1i, 100i).collect::<Vec<int>>();\n@@ -4507,8 +4508,8 @@ std::iter::count(1i, 5i);\n ```\n \n This iterator counts up from one, adding five each time. It will give\n-you a new integer every time, forever. Well, technically, until the\n-maximum number that an `int` can represent. But since iterators are lazy,\n+you a new integer every time, forever (well, technically, until it reaches the\n+maximum number representable by an `int`). But since iterators are lazy,\n that's okay! You probably don't want to use `collect()` on it, though...\n \n That's enough about iterators. Iterator adapters are the last concept\n@@ -5251,8 +5252,8 @@ to do something that it can't currently do? You may be able to write a macro\n to extend Rust's capabilities.\n \n You've already used one macro extensively: `println!`. When we invoke\n-a Rust macro, we need to use the exclamation mark (`!`). There's two reasons\n-that this is true: the first is that it makes it clear when you're using a\n+a Rust macro, we need to use the exclamation mark (`!`). There are two reasons\n+why this is so: the first is that it makes it clear when you're using a\n macro. The second is that macros allow for flexible syntax, and so Rust must\n be able to tell where a macro starts and ends. The `!(...)` helps with this.\n \n@@ -5267,7 +5268,7 @@ println!(\"x is: {}\", x);\n \n The `println!` macro does a few things:\n \n-1. It parses the string to find any `{}`s\n+1. It parses the string to find any `{}`s.\n 2. It checks that the number of `{}`s matches the number of other arguments.\n 3. It generates a bunch of Rust code, taking this in mind.\n \n@@ -5276,8 +5277,8 @@ Rust will generate code that takes all of the types into account. If\n `println!` was a function, it could still do this type checking, but it\n would happen at run time rather than compile time.\n \n-We can check this out using a special flag to `rustc`. This code, in a file\n-`print.rs`:\n+We can check this out using a special flag to `rustc`. Put this code in a file\n+called `print.rs`:\n \n ```{rust}\n fn main() {\n@@ -5286,7 +5287,7 @@ fn main() {\n }\n ```\n \n-Can have its macros expanded like this: `rustc print.rs --pretty=expanded`, will\n+You can have the macros expanded like this: `rustc print.rs --pretty=expanded` \u2013 which will\n give us this huge result:\n \n ```{rust,ignore}\n@@ -5325,12 +5326,12 @@ invoke the `println_args` function with the generated arguments.\n This is the code that Rust actually compiles. You can see all of the extra\n information that's here. We get all of the type safety and options that it\n provides, but at compile time, and without needing to type all of this out.\n-This is how macros are powerful. Without them, you would need to type all of\n-this by hand to get a type checked `println`.\n+This is how macros are powerful: without them you would need to type all of\n+this by hand to get a type-checked `println`.\n \n For more on macros, please consult [the Macros Guide](guide-macros.html).\n-Macros are a very advanced and still slightly experimental feature, but don't\n-require a deep understanding to call, since they look just like functions. The\n+Macros are a very advanced and still slightly experimental feature, but they don't\n+require a deep understanding to be called, since they look just like functions. The\n Guide can help you if you want to write your own.\n \n # Unsafe\n@@ -5347,8 +5348,8 @@ keyword, which indicates that the function may not behave properly.\n \n Second, if you'd like to create some sort of shared-memory data structure, Rust\n won't allow it, because memory must be owned by a single owner. However, if\n-you're planning on making access to that shared memory safe, such as with a\n-mutex, _you_ know that it's safe, but Rust can't know. Writing an `unsafe`\n+you're planning on making access to that shared memory safe \u2013 such as with a\n+mutex \u2013 _you_ know that it's safe, but Rust can't know. Writing an `unsafe`\n block allows you to ask the compiler to trust you. In this case, the _internal_\n implementation of the mutex is considered unsafe, but the _external_ interface\n we present is safe. This allows it to be effectively used in normal Rust, while"}]}