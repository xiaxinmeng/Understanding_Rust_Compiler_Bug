{"sha": "97ac2591480cd66e8b40b34420dd275235a80bd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YWMyNTkxNDgwY2Q2NmU4YjQwYjM0NDIwZGQyNzUyMzVhODBiZDQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-01-23T00:02:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-23T00:02:16Z"}, "message": "Rollup merge of #68410 - tmiasko:msan-lto, r=varkor\n\nExport weak symbols used by MemorySanitizer\n\nExport weak symbols defined by MemorySanitizer instrumentation, which are used\nto implement `-Zsanitizer-memory-track-origins` and `-Zsanitizer-recover=memory`.\nPreviously, when using fat LTO, they would internalized and eliminated.\n\nFixes #68367.", "tree": {"sha": "48585a6098177e87706ee31334a729727b38a001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48585a6098177e87706ee31334a729727b38a001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ac2591480cd66e8b40b34420dd275235a80bd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKOKICRBK7hj4Ov3rIwAAdHIIADOtbmvbeoIVOQSuXV1J0Gwt\nalz6tpiMW1LKqFpzlB9fieBo46P02NeiClQ56bjpREYzwvgPYq48o64z44skbcWl\n/7JTuxihwEIyZy6yZ4mA+8QViJWypJpmtMpnRshKNE1Vd78l4dKW/MmlG/drBCAL\nbFTEs3Uvcz8UqsihVIRBYTaTZy36MtcOudjUt8hIhKPDashVz/AeYga8lOOy/LnI\nlnZSGVqtukLIA6mpy+EZVt3D19lRvhMwJjbtskPtOEbv9KaI/xKFm46jDILybZbs\nr8ZnwYGivuJuZrr6ko4Odo+lCw1XkUgWfQ6ryjgGzSDBGGMOiG7EKyzgEq08vQw=\n=3Ukj\n-----END PGP SIGNATURE-----\n", "payload": "tree 48585a6098177e87706ee31334a729727b38a001\nparent f9b0561031b5ddeca0985c1551c4076243efced1\nparent d8c661a88644ad710e309d3a8f0f27c5f74d705f\nauthor Tyler Mandry <tmandry@gmail.com> 1579737736 -0800\ncommitter GitHub <noreply@github.com> 1579737736 -0800\n\nRollup merge of #68410 - tmiasko:msan-lto, r=varkor\n\nExport weak symbols used by MemorySanitizer\n\nExport weak symbols defined by MemorySanitizer instrumentation, which are used\nto implement `-Zsanitizer-memory-track-origins` and `-Zsanitizer-recover=memory`.\nPreviously, when using fat LTO, they would internalized and eliminated.\n\nFixes #68367.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ac2591480cd66e8b40b34420dd275235a80bd4", "html_url": "https://github.com/rust-lang/rust/commit/97ac2591480cd66e8b40b34420dd275235a80bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ac2591480cd66e8b40b34420dd275235a80bd4/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9b0561031b5ddeca0985c1551c4076243efced1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b0561031b5ddeca0985c1551c4076243efced1", "html_url": "https://github.com/rust-lang/rust/commit/f9b0561031b5ddeca0985c1551c4076243efced1"}, {"sha": "d8c661a88644ad710e309d3a8f0f27c5f74d705f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c661a88644ad710e309d3a8f0f27c5f74d705f", "html_url": "https://github.com/rust-lang/rust/commit/d8c661a88644ad710e309d3a8f0f27c5f74d705f"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "d680e14bbbd5b9d884d7aa4bf6df547b8bb7d6f3", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97ac2591480cd66e8b40b34420dd275235a80bd4/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ac2591480cd66e8b40b34420dd275235a80bd4/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=97ac2591480cd66e8b40b34420dd275235a80bd4", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n-use rustc::session::config;\n+use rustc::session::config::{self, Sanitizer};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::Instance;\n@@ -206,6 +206,16 @@ fn exported_symbols_provider_local(\n         }));\n     }\n \n+    if let Some(Sanitizer::Memory) = tcx.sess.opts.debugging_opts.sanitizer {\n+        // Similar to profiling, preserve weak msan symbol during LTO.\n+        const MSAN_WEAK_SYMBOLS: [&str; 2] = [\"__msan_track_origins\", \"__msan_keep_going\"];\n+\n+        symbols.extend(MSAN_WEAK_SYMBOLS.iter().map(|sym| {\n+            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(sym));\n+            (exported_symbol, SymbolExportLevel::C)\n+        }));\n+    }\n+\n     if tcx.sess.crate_types.borrow().contains(&config::CrateType::Dylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));"}, {"sha": "1fd496b35dfcce3d651e6a01ec3c6ab3472ae0a2", "filename": "src/test/codegen/sanitizer-memory-track-orgins.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97ac2591480cd66e8b40b34420dd275235a80bd4/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ac2591480cd66e8b40b34420dd275235a80bd4/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs?ref=97ac2591480cd66e8b40b34420dd275235a80bd4", "patch": "@@ -4,17 +4,21 @@\n // needs-sanitizer-support\n // only-linux\n // only-x86_64\n-// revisions:MSAN-0 MSAN-1 MSAN-2\n+// revisions:MSAN-0 MSAN-1 MSAN-2 MSAN-1-LTO MSAN-2-LTO\n //\n //[MSAN-0] compile-flags: -Zsanitizer=memory\n //[MSAN-1] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins=1\n //[MSAN-2] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins\n+//[MSAN-1-LTO] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins=1 -C lto=fat\n+//[MSAN-2-LTO] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins -C lto=fat\n \n #![crate_type=\"lib\"]\n \n // MSAN-0-NOT: @__msan_track_origins\n // MSAN-1:     @__msan_track_origins = weak_odr local_unnamed_addr constant i32 1\n // MSAN-2:     @__msan_track_origins = weak_odr local_unnamed_addr constant i32 2\n+// MSAN-1-LTO: @__msan_track_origins = weak_odr local_unnamed_addr constant i32 1\n+// MSAN-2-LTO: @__msan_track_origins = weak_odr local_unnamed_addr constant i32 2\n //\n // MSAN-0-LABEL: define void @copy(\n // MSAN-1-LABEL: define void @copy("}, {"sha": "9a583725b0bf0c42d81e353341a964cacfbcd101", "filename": "src/test/codegen/sanitizer-recover.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/97ac2591480cd66e8b40b34420dd275235a80bd4/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ac2591480cd66e8b40b34420dd275235a80bd4/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-recover.rs?ref=97ac2591480cd66e8b40b34420dd275235a80bd4", "patch": "@@ -4,31 +4,47 @@\n // needs-sanitizer-support\n // only-linux\n // only-x86_64\n-// revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER\n+// revisions:ASAN ASAN-RECOVER MSAN MSAN-RECOVER MSAN-RECOVER-LTO\n+// no-prefer-dynamic\n //\n-//[ASAN]         compile-flags: -Zsanitizer=address\n-//[ASAN-RECOVER] compile-flags: -Zsanitizer=address -Zsanitizer-recover=address\n-//[MSAN]         compile-flags: -Zsanitizer=memory\n-//[MSAN-RECOVER] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory\n-\n-#![crate_type=\"lib\"]\n+//[ASAN]             compile-flags: -Zsanitizer=address\n+//[ASAN-RECOVER]     compile-flags: -Zsanitizer=address -Zsanitizer-recover=address\n+//[MSAN]             compile-flags: -Zsanitizer=memory\n+//[MSAN-RECOVER]     compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory\n+//[MSAN-RECOVER-LTO] compile-flags: -Zsanitizer=memory  -Zsanitizer-recover=memory -C lto=fat\n+//\n+// MSAN-NOT:         @__msan_keep_going\n+// MSAN-RECOVER:     @__msan_keep_going = weak_odr {{.*}} constant i32 1\n+// MSAN-RECOVER-LTO: @__msan_keep_going = weak_odr {{.*}} constant i32 1\n \n-// ASAN-LABEL:         define i32 @penguin(\n+// ASAN-LABEL: define i32 @penguin(\n+// ASAN:         call void @__asan_report_load4(i64 %0)\n+// ASAN:         unreachable\n+// ASAN:       }\n+//\n // ASAN-RECOVER-LABEL: define i32 @penguin(\n-// MSAN-LABEL:         define i32 @penguin(\n+// ASAN-RECOVER:         call void @__asan_report_load4_noabort(\n+// ASAN-RECOVER-NOT:     unreachable\n+// ASAN:               }\n+//\n+// MSAN-LABEL: define i32 @penguin(\n+// MSAN:         call void @__msan_warning_noreturn()\n+// MSAN:         unreachable\n+// MSAN:       }\n+//\n // MSAN-RECOVER-LABEL: define i32 @penguin(\n+// MSAN-RECOVER:         call void @__msan_warning()\n+// MSAN-RECOVER-NOT:     unreachable\n+// MSAN-RECOVER:       }\n+//\n+// MSAN-RECOVER-LTO-LABEL: define i32 @penguin(\n+// MSAN-RECOVER-LTO:          call void @__msan_warning()\n+// MSAN-RECOVER-LTO-NOT:      unreachable\n+// MSAN-RECOVER-LTO:       }\n+//\n #[no_mangle]\n pub fn penguin(p: &mut i32) -> i32 {\n-    // ASAN:             call void @__asan_report_load4(i64 %0)\n-    // ASAN:             unreachable\n-    //\n-    // ASAN-RECOVER:     call void @__asan_report_load4_noabort(\n-    // ASAN-RECOVER-NOT: unreachable\n-    //\n-    // MSAN:             call void @__msan_warning_noreturn()\n-    // MSAN:             unreachable\n-    //\n-    // MSAN-RECOVER:     call void @__msan_warning()\n-    // MSAN-RECOVER-NOT: unreachable\n     *p\n }\n+\n+fn main() {}"}]}