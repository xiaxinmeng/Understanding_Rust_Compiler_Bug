{"sha": "0c6c69f2e2106c7717275260e5bfc4712c640cc3", "node_id": "C_kwDOAAsO6NoAKDBjNmM2OWYyZTIxMDZjNzcxNzI3NTI2MGU1YmZjNDcxMmM2NDBjYzM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-25T11:11:07Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-25T11:11:07Z"}, "message": "`Inherited` always has `TypeckResults` available", "tree": {"sha": "7cee825975e789340987949e9004ba5c42d55391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cee825975e789340987949e9004ba5c42d55391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6c69f2e2106c7717275260e5bfc4712c640cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6c69f2e2106c7717275260e5bfc4712c640cc3", "html_url": "https://github.com/rust-lang/rust/commit/0c6c69f2e2106c7717275260e5bfc4712c640cc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6c69f2e2106c7717275260e5bfc4712c640cc3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f320a224e827b400be25966755a621779f797cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f320a224e827b400be25966755a621779f797cc", "html_url": "https://github.com/rust-lang/rust/commit/2f320a224e827b400be25966755a621779f797cc"}], "stats": {"total": 38, "additions": 5, "deletions": 33}, "files": [{"sha": "a499179b95f107c70be5c30e40743ee5fcb2fa29", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c6c69f2e2106c7717275260e5bfc4712c640cc3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6c69f2e2106c7717275260e5bfc4712c640cc3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=0c6c69f2e2106c7717275260e5bfc4712c640cc3", "patch": "@@ -1,5 +1,4 @@\n use super::callee::DeferredCallResolution;\n-use super::MaybeInProgressTables;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -29,7 +28,7 @@ use std::ops::Deref;\n pub struct Inherited<'a, 'tcx> {\n     pub(super) infcx: InferCtxt<'a, 'tcx>,\n \n-    pub(super) typeck_results: super::MaybeInProgressTables<'a, 'tcx>,\n+    pub(super) typeck_results: &'a RefCell<ty::TypeckResults<'tcx>>,\n \n     pub(super) locals: RefCell<HirIdMap<super::LocalTy<'tcx>>>,\n \n@@ -110,11 +109,11 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let body_id = tcx.hir().maybe_body_owned_by(item_id);\n+        let typeck_results =\n+            infcx.in_progress_typeck_results.expect(\"building `FnCtxt` without typeck results\");\n \n         Inherited {\n-            typeck_results: MaybeInProgressTables {\n-                maybe_typeck_results: infcx.in_progress_typeck_results,\n-            },\n+            typeck_results,\n             infcx,\n             fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(tcx)),\n             locals: RefCell::new(Default::default()),"}, {"sha": "17c2e4868aac70e3e03eacd37fae0dc9d74b5a2d", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c6c69f2e2106c7717275260e5bfc4712c640cc3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6c69f2e2106c7717275260e5bfc4712c640cc3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=0c6c69f2e2106c7717275260e5bfc4712c640cc3", "patch": "@@ -128,8 +128,7 @@ use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::recursive_type_with_infinite_size_error;\n use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n-\n-use std::cell::{Ref, RefCell, RefMut};\n+use std::cell::RefCell;\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n@@ -900,32 +899,6 @@ enum TupleArgumentsFlag {\n     TupleArguments,\n }\n \n-/// A wrapper for `InferCtxt`'s `in_progress_typeck_results` field.\n-#[derive(Copy, Clone)]\n-struct MaybeInProgressTables<'a, 'tcx> {\n-    maybe_typeck_results: Option<&'a RefCell<ty::TypeckResults<'tcx>>>,\n-}\n-\n-impl<'a, 'tcx> MaybeInProgressTables<'a, 'tcx> {\n-    fn borrow(self) -> Ref<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow() with no typeck results\"\n-            ),\n-        }\n-    }\n-\n-    fn borrow_mut(self) -> RefMut<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow_mut(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow_mut() with no typeck results\"\n-            ),\n-        }\n-    }\n-}\n-\n fn typeck_item_bodies(tcx: TyCtxt<'_>, (): ()) {\n     tcx.hir().par_body_owners(|body_owner_def_id| tcx.ensure().typeck(body_owner_def_id));\n }"}]}