{"sha": "b3866a5c9315d2f882ab9f306df82c5fa66989bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzODY2YTVjOTMxNWQyZjg4MmFiOWYzMDZkZjgyYzVmYTY2OTg5YmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T19:59:19Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:25:03Z"}, "message": "move rustc_hir::print -> rustc_hir_pretty", "tree": {"sha": "1225a578eb0550e0cd7cbb1cc7c1da0b1e2fc049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1225a578eb0550e0cd7cbb1cc7c1da0b1e2fc049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3866a5c9315d2f882ab9f306df82c5fa66989bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3866a5c9315d2f882ab9f306df82c5fa66989bf", "html_url": "https://github.com/rust-lang/rust/commit/b3866a5c9315d2f882ab9f306df82c5fa66989bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3866a5c9315d2f882ab9f306df82c5fa66989bf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b60d732efe924931f377e1f552ce6290b2ba8393", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60d732efe924931f377e1f552ce6290b2ba8393", "html_url": "https://github.com/rust-lang/rust/commit/b60d732efe924931f377e1f552ce6290b2ba8393"}], "stats": {"total": 91, "additions": 64, "deletions": 27}, "files": [{"sha": "02427ecb4b9adbac34e8a3b13a173cd7418bc05a", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -3114,6 +3114,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n+ \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_query_system\",\n@@ -3654,6 +3655,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n+ \"rustc_hir_pretty\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n@@ -3728,7 +3730,6 @@ dependencies = [\n  \"lazy_static 1.4.0\",\n  \"log\",\n  \"rustc_ast\",\n- \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -3738,6 +3739,18 @@ dependencies = [\n  \"smallvec 1.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_hir_pretty\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_ast\",\n+ \"rustc_ast_pretty\",\n+ \"rustc_data_structures\",\n+ \"rustc_hir\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+]\n+\n [[package]]\n name = \"rustc_incremental\"\n version = \"0.0.0\"\n@@ -3888,6 +3901,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_expand\",\n  \"rustc_hir\",\n+ \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4215,6 +4229,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n+ \"rustc_hir_pretty\",\n  \"rustc_index\",\n  \"rustc_infer\",\n  \"rustc_session\","}, {"sha": "d4464becb68627e000ad087b2f02350d78a400e8", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -22,6 +22,7 @@ rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "7154eb44e01e2c0028397b6a2b9cf5e205303eb0", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -12,8 +12,8 @@ pub use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n pub use rustc_hir::definitions::{Definitions, DisambiguatedDefPathData};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::print::Nested;\n use rustc_hir::*;\n+use rustc_hir_pretty::Nested;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n@@ -963,7 +963,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn hir_to_pretty_string(&self, id: HirId) -> String {\n-        print::to_string(self, |s| s.print_node(self.get(id)))\n+        rustc_hir_pretty::to_string(self, |s| s.print_node(self.get(id)))\n     }\n }\n \n@@ -1048,8 +1048,8 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n \n /// Identical to the `PpAnn` implementation for `hir::Crate`,\n /// except it avoids creating a dependency on the whole crate.\n-impl<'hir> print::PpAnn for Map<'hir> {\n-    fn nested(&self, state: &mut print::State<'_>, nested: print::Nested) {\n+impl<'hir> rustc_hir_pretty::PpAnn for Map<'hir> {\n+    fn nested(&self, state: &mut rustc_hir_pretty::State<'_>, nested: rustc_hir_pretty::Nested) {\n         match nested {\n             Nested::Item(id) => state.print_item(self.expect_item(id.id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),"}, {"sha": "3ca39b24c5276784a7eae26d7b7fdb719c0b9898", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -21,6 +21,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_parse = { path = \"../librustc_parse\" }"}, {"sha": "fe006f0e06c1a6ea2150b91cf5590ad064819f2b", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::ast;\n use rustc_ast_pretty::pprust;\n use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::print as pprust_hir;\n+use rustc_hir_pretty as pprust_hir;\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n use rustc_session::config::{Input, PpMode, PpSourceMode};\n use rustc_session::Session;"}, {"sha": "811440fdeb987f7430e715b5d0bb5b3bfbceba42", "filename": "src/librustc_hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -10,7 +10,6 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "49692c73fad80fb3b9fac8a3eeb71710144d56e4", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -24,7 +24,6 @@ pub mod intravisit;\n pub mod itemlikevisit;\n pub mod lang_items;\n pub mod pat_util;\n-pub mod print;\n mod stable_hash_impls;\n mod target;\n pub mod weak_lang_items;"}, {"sha": "6a9339b4b9cee874ce67c7e617be30b42adddc5f", "filename": "src/librustc_hir_pretty/Cargo.toml", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir_pretty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir_pretty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2FCargo.toml?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -0,0 +1,18 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_hir_pretty\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_hir_pretty\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n+rustc_hir = { path = \"../librustc_hir\" }\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_span = { path = \"../librustc_span\" }\n+rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "dc82fb03433487095ad89e559643c4e6a4150592", "filename": "src/librustc_hir_pretty/lib.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -3,15 +3,14 @@ use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast_pretty::pp::Breaks::{Consistent, Inconsistent};\n use rustc_ast_pretty::pp::{self, Breaks};\n use rustc_ast_pretty::pprust::{Comments, PrintState};\n+use rustc_hir as hir;\n+use rustc_hir::{GenericArg, GenericParam, GenericParamKind, Node};\n+use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, IdentPrinter};\n use rustc_span::{self, BytePos, FileName};\n use rustc_target::spec::abi::Abi;\n \n-use crate::hir;\n-use crate::hir::{GenericArg, GenericParam, GenericParamKind, Node};\n-use crate::hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n-\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::vec;\n@@ -47,7 +46,7 @@ pub struct NoAnn;\n impl PpAnn for NoAnn {}\n pub const NO_ANN: &dyn PpAnn = &NoAnn;\n \n-impl PpAnn for hir::Crate<'a> {\n+impl PpAnn for hir::Crate<'_> {\n     fn try_fetch_item(&self, item: hir::HirId) -> Option<&hir::Item<'_>> {\n         Some(self.item(item))\n     }\n@@ -1092,7 +1091,7 @@ impl<'a> State<'a> {\n         &mut self,\n         qpath: &hir::QPath<'_>,\n         fields: &[hir::Field<'_>],\n-        wth: &Option<&'hir hir::Expr<'_>>,\n+        wth: &Option<&hir::Expr<'_>>,\n     ) {\n         self.print_qpath(qpath, true);\n         self.s.word(\"{\");", "previous_filename": "src/librustc_hir/print.rs"}, {"sha": "ea439b1f41d4252cfc757544e39c8418bdb3a98f", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -19,6 +19,7 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }"}, {"sha": "841655014278537cc7eb97a424866b613922a90c", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -830,7 +830,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.kind[def_id] <- match trait_item.kind {\n             ty::AssocKind::Const => {\n                 let rendered =\n-                    hir::print::to_string(&self.tcx.hir(), |s| s.print_trait_item(ast_item));\n+                    rustc_hir_pretty::to_string(&self.tcx.hir(), |s| s.print_trait_item(ast_item));\n                 let rendered_const = self.lazy(RenderedConst(rendered));\n \n                 EntryKind::AssocConst(\n@@ -1048,7 +1048,7 @@ impl EncodeContext<'tcx> {\n \n     fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {\n         let body = self.tcx.hir().body(body_id);\n-        let rendered = hir::print::to_string(&self.tcx.hir(), |s| s.print_expr(&body.value));\n+        let rendered = rustc_hir_pretty::to_string(&self.tcx.hir(), |s| s.print_expr(&body.value));\n         let rendered_const = &RenderedConst(rendered);\n         self.lazy(rendered_const)\n     }"}, {"sha": "a76f920ce9b51e3d6a1fdeb5e42181b196d17c94", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -18,6 +18,7 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n+rustc_hir_pretty = { path = \"../librustc_hir_pretty\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "be515d763cc230cf73da9c86eada7b5853a42d78", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -21,8 +21,8 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_generics, Visitor};\n-use rustc_hir::print;\n use rustc_hir::{Constness, GenericArg, GenericArgs};\n+use rustc_hir_pretty::{to_string, NO_ANN};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, LATE_BOUND_LIFETIME_ARGUMENTS};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -1132,7 +1132,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             .and_then(|args| args.args.get(0))\n                             .and_then(|arg| match arg {\n                                 hir::GenericArg::Type(ty) => {\n-                                    Some(print::to_string(print::NO_ANN, |s| s.print_type(ty)))\n+                                    Some(to_string(NO_ANN, |s| s.print_type(ty)))\n                                 }\n                                 _ => None,\n                             })\n@@ -1143,7 +1143,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             .iter()\n                             .filter_map(|b| match (b.ident.as_str() == \"Output\", &b.kind) {\n                                 (true, hir::TypeBindingKind::Equality { ty }) => {\n-                                    Some(print::to_string(print::NO_ANN, |s| s.print_type(ty)))\n+                                    Some(to_string(NO_ANN, |s| s.print_type(ty)))\n                                 }\n                                 _ => None,\n                             })"}, {"sha": "40c056a7641efaec69d8da1fdc6bc217d4fa8a89", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -9,7 +9,8 @@ use rustc::ty::{self, AssocItem, Ty};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::{is_range_literal, print, Node};\n+use rustc_hir::{is_range_literal, Node};\n+use rustc_hir_pretty::{to_string, NO_ANN};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -198,10 +199,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .peekable();\n \n             if compatible_variants.peek().is_some() {\n-                let expr_text =\n-                    self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap_or_else(|_| {\n-                        print::to_string(print::NO_ANN, |s| s.print_expr(expr))\n-                    });\n+                let expr_text = self\n+                    .tcx\n+                    .sess\n+                    .source_map()\n+                    .span_to_snippet(expr.span)\n+                    .unwrap_or_else(|_| to_string(NO_ANN, |s| s.print_expr(expr)));\n                 let suggestions = compatible_variants.map(|v| format!(\"{}({})\", v, expr_text));\n                 let msg = \"try using a variant of the expected enum\";\n                 err.span_suggestions(expr.span, msg, suggestions, Applicability::MaybeIncorrect);"}, {"sha": "7855b4b761d56858069adf7f3675458690056c27", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -2663,7 +2663,7 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &\n         E0533,\n         \"expected unit struct, unit variant or constant, found {} `{}`\",\n         res.descr(),\n-        hir::print::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false))\n+        rustc_hir_pretty::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false))\n     )\n     .emit();\n }"}, {"sha": "d2290d4a583d99201a2492d974fa7548c9829d8d", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -794,7 +794,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let msg = format!(\n                 \"expected tuple struct or tuple variant, found {} `{}`\",\n                 res.descr(),\n-                hir::print::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false)),\n+                rustc_hir_pretty::to_string(&tcx.hir(), |s| s.print_qpath(qpath, false)),\n             );\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n             match (res, &pat.kind) {"}, {"sha": "fbc8c3327bf83e9bff6cfa5897e5ca3cfb583937", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3866a5c9315d2f882ab9f306df82c5fa66989bf/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=b3866a5c9315d2f882ab9f306df82c5fa66989bf", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::print::visibility_qualified;\n+use rustc_hir_pretty::visibility_qualified;\n use rustc_session::lint;\n use rustc_span::Span;\n "}]}