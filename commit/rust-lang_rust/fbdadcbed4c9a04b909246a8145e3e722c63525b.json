{"sha": "fbdadcbed4c9a04b909246a8145e3e722c63525b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZGFkY2JlZDRjOWEwNGI5MDkyNDZhODE0NWUzZTcyMmM2MzUyNWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-03T19:48:17Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-03T19:48:17Z"}, "message": "Properly ban the negation of unsigned integers in type-checking.", "tree": {"sha": "aa9c948cb47d2e534021a9f491365283c463608d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9c948cb47d2e534021a9f491365283c463608d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbdadcbed4c9a04b909246a8145e3e722c63525b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdadcbed4c9a04b909246a8145e3e722c63525b", "html_url": "https://github.com/rust-lang/rust/commit/fbdadcbed4c9a04b909246a8145e3e722c63525b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbdadcbed4c9a04b909246a8145e3e722c63525b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df61658c8afc8b24800f5437e0000a99d04ea2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/df61658c8afc8b24800f5437e0000a99d04ea2b0", "html_url": "https://github.com/rust-lang/rust/commit/df61658c8afc8b24800f5437e0000a99d04ea2b0"}], "stats": {"total": 231, "additions": 28, "deletions": 203}, "files": [{"sha": "7d57bdcdbb56540f37afe5a934ce12d33a6ca7fc", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=fbdadcbed4c9a04b909246a8145e3e722c63525b", "patch": "@@ -1 +1 @@\n-Subproject commit 98589876259e19f13eab81b033ced95bbb6deca0\n+Subproject commit 7d57bdcdbb56540f37afe5a934ce12d33a6ca7fc"}, {"sha": "570365c407f48b55b0e5f9ea6c7fd8d2dfb89c44", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=fbdadcbed4c9a04b909246a8145e3e722c63525b", "patch": "@@ -35,32 +35,6 @@ use rustc::hir;\n \n use rustc_i128::{i128, u128};\n \n-register_long_diagnostics! {\n-E0519: r##\"\n-It is not allowed to negate an unsigned integer.\n-You can negate a signed integer and cast it to an\n-unsigned integer or use the `!` operator.\n-\n-```\n-let x: usize = -1isize as usize;\n-let y: usize = !0;\n-assert_eq!(x, y);\n-```\n-\n-Alternatively you can use the `Wrapping` newtype\n-or the `wrapping_neg` operation that all\n-integral types support:\n-\n-```\n-use std::num::Wrapping;\n-let x: Wrapping<usize> = -Wrapping(1);\n-let Wrapping(x) = x;\n-let y: usize = 1.wrapping_neg();\n-assert_eq!(x, y);\n-```\n-\"##\n-}\n-\n declare_lint! {\n     UNUSED_COMPARISONS,\n     Warn,\n@@ -109,24 +83,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         match e.node {\n             hir::ExprUnary(hir::UnNeg, ref expr) => {\n-                if let hir::ExprLit(ref lit) = expr.node {\n-                    match lit.node {\n-                        ast::LitKind::Int(_, ast::LitIntType::Unsigned(_)) => {\n-                            forbid_unsigned_negation(cx, e.span);\n-                        }\n-                        ast::LitKind::Int(_, ast::LitIntType::Unsuffixed) => {\n-                            if let ty::TyUint(_) = cx.tcx.tables().node_id_to_type(e.id).sty {\n-                                forbid_unsigned_negation(cx, e.span);\n-                            }\n-                        }\n-                        _ => (),\n-                    }\n-                } else {\n-                    let t = cx.tcx.tables().node_id_to_type(expr.id);\n-                    if let ty::TyUint(_) = t.sty {\n-                        forbid_unsigned_negation(cx, e.span);\n-                    }\n-                }\n                 // propagate negation, if the negation itself isn't negated\n                 if self.negated_expr_id != e.id {\n                     self.negated_expr_id = expr.id;\n@@ -369,13 +325,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 _ => false,\n             }\n         }\n-\n-        fn forbid_unsigned_negation(cx: &LateContext, span: Span) {\n-            cx.sess()\n-                .struct_span_err_with_code(span, \"unary negation of unsigned integer\", \"E0519\")\n-                .span_help(span, \"use a cast or the `!` operator\")\n-                .emit();\n-        }\n     }\n }\n "}, {"sha": "ec1ca99c7687f3af9c00aae4053c5e483643b5d2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fbdadcbed4c9a04b909246a8145e3e722c63525b", "patch": "@@ -3552,19 +3552,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     hir::UnNot => {\n                         oprnd_t = self.structurally_resolved_type(oprnd.span,\n                                                                   oprnd_t);\n+                        let result = self.check_user_unop(\"!\", \"not\",\n+                                                          tcx.lang_items.not_trait(),\n+                                                          expr, &oprnd, oprnd_t, unop);\n+                        // If it's builtin, we can reuse the type, this helps inference.\n                         if !(oprnd_t.is_integral() || oprnd_t.sty == ty::TyBool) {\n-                            oprnd_t = self.check_user_unop(\"!\", \"not\",\n-                                                           tcx.lang_items.not_trait(),\n-                                                           expr, &oprnd, oprnd_t, unop);\n+                            oprnd_t = result;\n                         }\n                     }\n                     hir::UnNeg => {\n                         oprnd_t = self.structurally_resolved_type(oprnd.span,\n                                                                   oprnd_t);\n+                        let result = self.check_user_unop(\"-\", \"neg\",\n+                                                          tcx.lang_items.neg_trait(),\n+                                                          expr, &oprnd, oprnd_t, unop);\n+                        // If it's builtin, we can reuse the type, this helps inference.\n                         if !(oprnd_t.is_integral() || oprnd_t.is_fp()) {\n-                            oprnd_t = self.check_user_unop(\"-\", \"neg\",\n-                                                           tcx.lang_items.neg_trait(),\n-                                                           expr, &oprnd, oprnd_t, unop);\n+                            oprnd_t = result;\n                         }\n                     }\n                 }"}, {"sha": "6d32b7364f8ea36aff3b3fb2b366cb756e1b6d05", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=fbdadcbed4c9a04b909246a8145e3e722c63525b", "patch": "@@ -123,8 +123,17 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     // as potentially overloaded. But then, during writeback, if\n     // we observe that something like `a+b` is (known to be)\n     // operating on scalars, we clear the overload.\n-    fn fix_scalar_binary_expr(&mut self, e: &hir::Expr) {\n+    fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr) {\n         match e.node {\n+            hir::ExprUnary(hir::UnNeg, ref inner) |\n+            hir::ExprUnary(hir::UnNot, ref inner)  => {\n+                let inner_ty = self.fcx.node_ty(inner.id);\n+                let inner_ty = self.fcx.resolve_type_vars_if_possible(&inner_ty);\n+\n+                if inner_ty.is_scalar() {\n+                    self.fcx.tables.borrow_mut().method_map.remove(&MethodCall::expr(e.id));\n+                }\n+            }\n             hir::ExprBinary(ref op, ref lhs, ref rhs) |\n             hir::ExprAssignOp(ref op, ref lhs, ref rhs) => {\n                 let lhs_ty = self.fcx.node_ty(lhs.id);\n@@ -185,7 +194,7 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n             return;\n         }\n \n-        self.fix_scalar_binary_expr(e);\n+        self.fix_scalar_builtin_expr(e);\n \n         self.visit_node_id(ResolvingExpr(e.span), e.id);\n         self.visit_method_map_entry(ResolvingExpr(e.span),"}, {"sha": "7db7de9cee30cb70d13bdc39ec07c6e7c08eee28", "filename": "src/test/compile-fail/const-eval-overflow0.rs", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/df61658c8afc8b24800f5437e0000a99d04ea2b0/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61658c8afc8b24800f5437e0000a99d04ea2b0/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow0.rs?ref=df61658c8afc8b24800f5437e0000a99d04ea2b0", "patch": "@@ -1,100 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(unused_imports)]\n-\n-// Note: the relevant lint pass here runs before some of the constant\n-// evaluation below (e.g. that performed by trans and llvm), so if you\n-// change this warn to a deny, then the compiler will exit before\n-// those errors are detected.\n-\n-use std::fmt;\n-use std::{i8, i16, i32, i64, isize};\n-use std::{u8, u16, u32, u64, usize};\n-\n-const VALS_I8: (i8, i8, i8, i8) =\n-    (-i8::MIN,\n-     i8::MIN - 1,\n-     i8::MAX + 1,\n-     i8::MIN * 2,\n-     );\n-\n-const VALS_I16: (i16, i16, i16, i16) =\n-    (-i16::MIN,\n-     i16::MIN - 1,\n-     i16::MAX + 1,\n-     i16::MIN * 2,\n-     );\n-\n-const VALS_I32: (i32, i32, i32, i32) =\n-    (-i32::MIN,\n-     i32::MIN - 1,\n-     i32::MAX + 1,\n-     i32::MIN * 2,\n-     );\n-\n-const VALS_I64: (i64, i64, i64, i64) =\n-    (-i64::MIN,\n-     i64::MIN - 1,\n-     i64::MAX + 1,\n-     i64::MAX * 2,\n-     );\n-\n-const VALS_U8: (u8, u8, u8, u8) =\n-    (-u8::MIN,\n-     //~^ ERROR unary negation of unsigned integer\n-     //~| HELP use a cast or the `!` operator\n-     u8::MIN - 1,\n-     u8::MAX + 1,\n-     u8::MAX * 2,\n-     );\n-\n-const VALS_U16: (u16, u16, u16, u16) =\n-    (-u16::MIN,\n-     //~^ ERROR unary negation of unsigned integer\n-     //~| HELP use a cast or the `!` operator\n-     u16::MIN - 1,\n-     u16::MAX + 1,\n-     u16::MAX * 2,\n-     );\n-\n-const VALS_U32: (u32, u32, u32, u32) =\n-    (-u32::MIN,\n-     //~^ ERROR unary negation of unsigned integer\n-     //~| HELP use a cast or the `!` operator\n-     u32::MIN - 1,\n-     u32::MAX + 1,\n-     u32::MAX * 2,\n-     );\n-\n-const VALS_U64: (u64, u64, u64, u64) =\n-    (-u64::MIN,\n-     //~^ ERROR unary negation of unsigned integer\n-     //~| HELP use a cast or the `!` operator\n-     u64::MIN - 1,\n-     u64::MAX + 1,\n-     u64::MAX * 2,\n-     );\n-\n-fn main() {\n-    foo(VALS_I8);\n-    foo(VALS_I16);\n-    foo(VALS_I32);\n-    foo(VALS_I64);\n-\n-    foo(VALS_U8);\n-    foo(VALS_U16);\n-    foo(VALS_U32);\n-    foo(VALS_U64);\n-}\n-\n-fn foo<T:fmt::Debug>(x: T) {\n-    println!(\"{:?}\", x);\n-}"}, {"sha": "599e31341f2332a69a6c84c31c804698df838120", "filename": "src/test/compile-fail/feature-gate-negate-unsigned.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbdadcbed4c9a04b909246a8145e3e722c63525b/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs?ref=fbdadcbed4c9a04b909246a8145e3e722c63525b", "patch": "@@ -16,16 +16,13 @@ impl std::ops::Neg for S {\n     fn neg(self) -> u32 { 0 }\n }\n \n-// FIXME(eddyb) move this back to a `-1` literal when\n-// MIR building stops eagerly erroring in that case.\n-const _MAX: usize = -(2 - 1);\n-//~^ WARN unary negation of unsigned integer\n-//~| ERROR unary negation of unsigned integer\n-//~| HELP use a cast or the `!` operator\n-\n fn main() {\n+    let _max: usize = -1;\n+    //~^ ERROR cannot apply unary operator `-` to type `usize`\n+\n     let x = 5u8;\n-    let _y = -x; //~ ERROR unary negation of unsigned integer\n-    //~^ HELP use a cast or the `!` operator\n+    let _y = -x;\n+    //~^ ERROR cannot apply unary operator `-` to type `u8`\n+\n     -S; // should not trigger the gate; issue 26840\n }"}, {"sha": "89ae1a09bd3e47b2eca8b28e006031c79d1b5f72", "filename": "src/test/compile-fail/feature-gate-negate-unsigned0.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/df61658c8afc8b24800f5437e0000a99d04ea2b0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df61658c8afc8b24800f5437e0000a99d04ea2b0/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned0.rs?ref=df61658c8afc8b24800f5437e0000a99d04ea2b0", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that negating unsigned integers doesn't compile\n-\n-struct S;\n-impl std::ops::Neg for S {\n-    type Output = u32;\n-    fn neg(self) -> u32 { 0 }\n-}\n-\n-fn main() {\n-    let a = -1;\n-    //~^ ERROR E0080\n-    //~| unary negation of unsigned integer\n-    let _b : u8 = a; // for infering variable a to u8.\n-\n-    let _d = -1u8;\n-    //~^ ERROR E0080\n-    //~| unary negation of unsigned integer\n-\n-    for _ in -10..10u8 {}\n-    //~^ ERROR E0080\n-    //~| unary negation of unsigned integer\n-\n-    -S; // should not trigger the gate; issue 26840\n-}"}]}