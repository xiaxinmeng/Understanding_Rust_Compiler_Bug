{"sha": "7353afdfd9b992a0254b8c23592e91cde792d514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNTNhZmRmZDliOTkyYTAyNTRiOGMyMzU5MmU5MWNkZTc5MmQ1MTQ=", "commit": {"author": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-12-22T21:48:45Z"}, "committer": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-12-23T10:57:09Z"}, "message": "Extend suggestion span to whole method call", "tree": {"sha": "e6e188f5785d85b7170ba5ad1c1d354cf8c6d2e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e188f5785d85b7170ba5ad1c1d354cf8c6d2e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7353afdfd9b992a0254b8c23592e91cde792d514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7353afdfd9b992a0254b8c23592e91cde792d514", "html_url": "https://github.com/rust-lang/rust/commit/7353afdfd9b992a0254b8c23592e91cde792d514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7353afdfd9b992a0254b8c23592e91cde792d514/comments", "author": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "091853946bc0f3e9138875bfe1952e857e601896", "url": "https://api.github.com/repos/rust-lang/rust/commits/091853946bc0f3e9138875bfe1952e857e601896", "html_url": "https://github.com/rust-lang/rust/commit/091853946bc0f3e9138875bfe1952e857e601896"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "a1cbcac1a9a76950f489805f92726e98be0d0709", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7353afdfd9b992a0254b8c23592e91cde792d514/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7353afdfd9b992a0254b8c23592e91cde792d514/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=7353afdfd9b992a0254b8c23592e91cde792d514", "patch": "@@ -261,22 +261,26 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             }\n \n             // Check if the first argument is `self` and suggest calling a method.\n-            let mut has_self_arg = false;\n-            let mut args_span = None;\n+            let mut has_self_arg = None;\n             if let PathSource::Expr(parent) = source {\n                 match &parent.map(|p| &p.kind) {\n                     Some(ExprKind::Call(_, args)) if args.len() > 0 => {\n                         let mut expr_kind = &args[0].kind;\n                         loop {\n                             match expr_kind {\n                                 ExprKind::Path(_, arg_name) if arg_name.segments.len() == 1 => {\n-                                    has_self_arg = arg_name.segments[0].ident.name == kw::SelfLower;\n-                                    if args.len() > 1 {\n-                                        args_span = Some(Span::new(\n-                                            args[1].span.lo(),\n-                                            args.last().unwrap().span.hi(),\n-                                            parent.unwrap().span.ctxt(),\n-                                        ));\n+                                    if arg_name.segments[0].ident.name == kw::SelfLower {\n+                                        let call_span = parent.unwrap().span;\n+                                        let args_span = if args.len() > 1 {\n+                                            Some(Span::new(\n+                                                args[1].span.lo(),\n+                                                args.last().unwrap().span.hi(),\n+                                                call_span.ctxt(),\n+                                            ))\n+                                        } else {\n+                                            None\n+                                        };\n+                                        has_self_arg = Some((call_span, args_span));\n                                     }\n                                     break;\n                                 },\n@@ -289,7 +293,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                 }\n             };\n \n-            if has_self_arg {\n+            if let Some((call_span, args_span)) = has_self_arg {\n                 let mut args_snippet: String = String::from(\"\");\n                 if let Some(args_span) = args_span {\n                     if let Ok(snippet) = self.r.session.source_map().span_to_snippet(args_span) {\n@@ -298,7 +302,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                 }\n \n                 err.span_suggestion(\n-                    span,\n+                    call_span,\n                     &format!(\"try calling `{}` as a method\", ident),\n                     format!(\"self.{}({})\", path_str, args_snippet),\n                     Applicability::MachineApplicable,"}, {"sha": "452c31275153a88a4fe6a62bc0a0c4f005fb0ea7", "filename": "src/test/ui/self/suggest-self-2.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7353afdfd9b992a0254b8c23592e91cde792d514/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7353afdfd9b992a0254b8c23592e91cde792d514/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fsuggest-self-2.stderr?ref=7353afdfd9b992a0254b8c23592e91cde792d514", "patch": "@@ -2,19 +2,25 @@ error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:5:9\n    |\n LL |         bar(self);\n-   |         ^^^ help: try calling `bar` as a method: `self.bar()`\n+   |         ^^^------\n+   |         |\n+   |         help: try calling `bar` as a method: `self.bar()`\n \n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:9:9\n    |\n LL |         bar(&&self, 102);\n-   |         ^^^ help: try calling `bar` as a method: `self.bar(102)`\n+   |         ^^^-------------\n+   |         |\n+   |         help: try calling `bar` as a method: `self.bar(102)`\n \n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:13:9\n    |\n LL |         bar(&mut self, 102, &\"str\");\n-   |         ^^^ help: try calling `bar` as a method: `self.bar(102, &\"str\")`\n+   |         ^^^------------------------\n+   |         |\n+   |         help: try calling `bar` as a method: `self.bar(102, &\"str\")`\n \n error[E0425]: cannot find function `bar` in this scope\n   --> $DIR/suggest-self-2.rs:17:9"}]}