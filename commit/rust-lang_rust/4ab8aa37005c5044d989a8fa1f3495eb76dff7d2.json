{"sha": "4ab8aa37005c5044d989a8fa1f3495eb76dff7d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYjhhYTM3MDA1YzUwNDRkOTg5YThmYTFmMzQ5NWViNzZkZmY3ZDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-24T15:27:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-11-27T12:13:16Z"}, "message": "Add support for intra-doc link fields of enum variant", "tree": {"sha": "31523c8d8b5800f445f1575b3abd7c917c57ec4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31523c8d8b5800f445f1575b3abd7c917c57ec4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2", "html_url": "https://github.com/rust-lang/rust/commit/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4993807dd9416ed65b9cac0e507af34bfe04a4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4993807dd9416ed65b9cac0e507af34bfe04a4ad", "html_url": "https://github.com/rust-lang/rust/commit/4993807dd9416ed65b9cac0e507af34bfe04a4ad"}], "stats": {"total": 81, "additions": 74, "deletions": 7}, "files": [{"sha": "3c9b2f2154b2eadad8675dd4021fe789733a525c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4ab8aa37005c5044d989a8fa1f3495eb76dff7d2", "patch": "@@ -56,6 +56,59 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         }\n     }\n \n+    fn variant_field(\n+        &self,\n+        path_str: &str,\n+        current_item: &Option<String>,\n+        module_id: syntax::ast::NodeId,\n+    ) -> Result<(Res, Option<String>), ()> {\n+        let cx = self.cx;\n+\n+        let mut split = path_str.rsplitn(3, \"::\");\n+        let variant_field_name = split.next().map(|f| Symbol::intern(f)).ok_or(())?;\n+        let variant_name = split.next().map(|f| Symbol::intern(f)).ok_or(())?;\n+        let path = split.next().map(|f| {\n+            if f == \"self\" || f == \"Self\" {\n+                if let Some(name) = current_item.as_ref() {\n+                    return name.clone();\n+                }\n+            }\n+            f.to_owned()\n+        }).ok_or(())?;\n+        let (_, ty_res) = cx.enter_resolver(|resolver| {\n+            resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n+        })?;\n+        if let Res::Err = ty_res {\n+            return Err(());\n+        }\n+        let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n+        match ty_res {\n+            Res::Def(DefKind::Enum, did) => {\n+                let item = cx.tcx.inherent_impls(did)\n+                                 .iter()\n+                                 .flat_map(|imp| cx.tcx.associated_items(*imp))\n+                                 .find(|item| item.ident.name == variant_name);\n+                if item.is_some() {\n+                    return Err(());\n+                }\n+                match cx.tcx.type_of(did).kind {\n+                    ty::Adt(def, _) if def.is_enum() => {\n+                        if def.all_fields()\n+                              .find(|item| item.ident.name == variant_field_name).is_some() {\n+                            Ok((ty_res,\n+                                Some(format!(\"variant.{}.field.{}\",\n+                                             variant_name, variant_field_name))))\n+                        } else {\n+                            Err(())\n+                        }\n+                    }\n+                    _ => Err(()),\n+                }\n+            }\n+            _ => Err(())\n+        }\n+    }\n+\n     /// Resolves a string as a path within a particular namespace. Also returns an optional\n     /// URL fragment in the case of variants and methods.\n     fn resolve(\n@@ -149,7 +202,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path, TypeNS, module_id)\n             }).map_err(|_| ErrorKind::ResolutionFailure)?;\n             if let Res::Err = ty_res {\n-                return Err(ErrorKind::ResolutionFailure);\n+                return self.variant_field(path_str, current_item, module_id);\n             }\n             let ty_res = ty_res.map_id(|_| panic!(\"unexpected node_id\"));\n             match ty_res {\n@@ -165,7 +218,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         let out = match item.kind {\n                             ty::AssocKind::Method if ns == ValueNS => \"method\",\n                             ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n-                            _ => return Err(ErrorKind::ResolutionFailure)\n+                            _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(\n@@ -206,10 +259,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                                          item.ident))))\n                                     }\n                                 } else {\n-                                    Err(ErrorKind::ResolutionFailure)\n+                                    self.variant_field(path_str, current_item, module_id)\n                                 }\n                             }\n-                            _ => Err(ErrorKind::ResolutionFailure),\n+                            _ => self.variant_field(path_str, current_item, module_id),\n                         }\n                     }\n                 }\n@@ -228,7 +281,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                                     \"tymethod\"\n                                 }\n                             }\n-                            _ => return Err(ErrorKind::ResolutionFailure)\n+                            _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n \n                         if extra_fragment.is_some() {\n@@ -244,10 +297,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                             Ok((ty_res, Some(format!(\"{}.{}\", kind, item_name))))\n                         }\n                     } else {\n-                        Err(ErrorKind::ResolutionFailure)\n+                        self.variant_field(path_str, current_item, module_id)\n                     }\n                 }\n-                _ => Err(ErrorKind::ResolutionFailure)\n+                _ => self.variant_field(path_str, current_item, module_id),\n             }\n         } else {\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);"}, {"sha": "70bf343a9a5e5a144950de51f51e3767bce088ff", "filename": "src/test/rustdoc/intra-doc-link-enum-struct-field.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab8aa37005c5044d989a8fa1f3495eb76dff7d2/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-enum-struct-field.rs?ref=4ab8aa37005c5044d989a8fa1f3495eb76dff7d2", "patch": "@@ -0,0 +1,14 @@\n+#![crate_name = \"foo\"]\n+\n+pub enum Foo {\n+    X {\n+        y: u8,\n+    }\n+}\n+\n+/// Hello\n+///\n+/// I want [Foo::X::y].\n+pub fn foo() {}\n+\n+// @has foo/fn.foo.html '//a/@href' '../foo/enum.Foo.html#variant.X.field.y'"}]}