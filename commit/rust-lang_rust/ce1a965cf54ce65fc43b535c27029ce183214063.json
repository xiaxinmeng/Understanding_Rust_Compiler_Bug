{"sha": "ce1a965cf54ce65fc43b535c27029ce183214063", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMWE5NjVjZjU0Y2U2NWZjNDNiNTM1YzI3MDI5Y2UxODMyMTQwNjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-10T20:33:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-17T16:07:16Z"}, "message": "Fallout in tests and docs from feature renamings", "tree": {"sha": "6fc6809fa8152fd85d52707d4591fd329aff5880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc6809fa8152fd85d52707d4591fd329aff5880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1a965cf54ce65fc43b535c27029ce183214063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1a965cf54ce65fc43b535c27029ce183214063", "html_url": "https://github.com/rust-lang/rust/commit/ce1a965cf54ce65fc43b535c27029ce183214063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1a965cf54ce65fc43b535c27029ce183214063/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6895311e859e1859f9b3f0adc9f1fbb4d2891534", "url": "https://api.github.com/repos/rust-lang/rust/commits/6895311e859e1859f9b3f0adc9f1fbb4d2891534", "html_url": "https://github.com/rust-lang/rust/commit/6895311e859e1859f9b3f0adc9f1fbb4d2891534"}], "stats": {"total": 702, "additions": 364, "deletions": 338}, "files": [{"sha": "92a94d23f0842afe1412f48626b7f3f4da18e642", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,13 +11,14 @@\n #![crate_type = \"bin\"]\n \n #![feature(box_syntax)]\n-#![feature(collections)]\n-#![feature(rustc_private)]\n-#![feature(std_misc)]\n-#![feature(test)]\n+#![feature(dynamic_lib)]\n+#![feature(libc)]\n #![feature(path_ext)]\n+#![feature(rustc_private)]\n+#![feature(slice_extras)]\n #![feature(str_char)]\n-#![feature(libc)]\n+#![feature(test)]\n+#![feature(vec_push_all)]\n \n #![deny(warnings)]\n "}, {"sha": "c1ad367c234b31f59cab8f16ab07fed9ee296df8", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -191,7 +191,7 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -236,12 +236,12 @@ impl<T: ?Sized> Arc<T> {\n \n /// Get the number of weak references to this value.\n #[inline]\n-#[unstable(feature = \"arc_extras\")]\n+#[unstable(feature = \"arc_counts\")]\n pub fn weak_count<T: ?Sized>(this: &Arc<T>) -> usize { this.inner().weak.load(SeqCst) - 1 }\n \n /// Get the number of strong references to this value.\n #[inline]\n-#[unstable(feature = \"arc_extras\")]\n+#[unstable(feature = \"arc_counts\")]\n pub fn strong_count<T: ?Sized>(this: &Arc<T>) -> usize { this.inner().strong.load(SeqCst) }\n \n \n@@ -255,7 +255,7 @@ pub fn strong_count<T: ?Sized>(this: &Arc<T>) -> usize { this.inner().strong.loa\n /// # Examples\n ///\n /// ```\n-/// # #![feature(alloc)]\n+/// # #![feature(arc_unique, alloc)]\n /// extern crate alloc;\n /// # fn main() {\n /// use alloc::arc::{Arc, get_mut};\n@@ -271,7 +271,7 @@ pub fn strong_count<T: ?Sized>(this: &Arc<T>) -> usize { this.inner().strong.loa\n /// # }\n /// ```\n #[inline]\n-#[unstable(feature = \"arc_extras\")]\n+#[unstable(feature = \"arc_unique\")]\n pub unsafe fn get_mut<T: ?Sized>(this: &mut Arc<T>) -> Option<&mut T> {\n     // FIXME(#24880) potential race with upgraded weak pointers here\n     if strong_count(this) == 1 && weak_count(this) == 0 {\n@@ -342,7 +342,7 @@ impl<T: Clone> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(arc_unique)]\n     /// use std::sync::Arc;\n     ///\n     /// # unsafe {\n@@ -352,7 +352,7 @@ impl<T: Clone> Arc<T> {\n     /// # }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_extras\")]\n+    #[unstable(feature = \"arc_unique\")]\n     pub unsafe fn make_unique(&mut self) -> &mut T {\n         // FIXME(#24880) potential race with upgraded weak pointers here\n         //\n@@ -451,7 +451,7 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -489,7 +489,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// let weak_five = Arc::new(5).downgrade();\n@@ -513,7 +513,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(arc_weak)]\n     /// use std::sync::Arc;\n     ///\n     /// {"}, {"sha": "b59a5685f0d8f9739d68fc80da0a65445ba8dc72", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -71,7 +71,7 @@ use core::raw::{TraitObject};\n /// The following two examples are equivalent:\n ///\n /// ```\n-/// # #![feature(alloc)]\n+/// # #![feature(box_heap)]\n /// #![feature(box_syntax)]\n /// use std::boxed::HEAP;\n ///\n@@ -139,7 +139,7 @@ impl<T : ?Sized> Box<T> {\n ///\n /// # Examples\n /// ```\n-/// # #![feature(alloc)]\n+/// # #![feature(box_raw)]\n /// use std::boxed;\n ///\n /// let seventeen = Box::new(17u32);\n@@ -183,7 +183,7 @@ impl<T: Clone> Clone for Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc, core)]\n+    /// # #![feature(box_raw)]\n     /// let x = Box::new(5);\n     /// let mut y = Box::new(10);\n     ///\n@@ -336,7 +336,7 @@ impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n /// -> i32>`.\n ///\n /// ```\n-/// #![feature(core)]\n+/// #![feature(fnbox)]\n ///\n /// use std::boxed::FnBox;\n /// use std::collections::HashMap;"}, {"sha": "7dcf7a76da083ba3dc5143a78200add26ebaae10", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -89,7 +89,7 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(unsize)]\n \n-#![cfg_attr(test, feature(test, alloc, rustc_private))]\n+#![cfg_attr(test, feature(test, alloc, rustc_private, box_raw))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]\n "}, {"sha": "802591a6171d56a097ba5f6ac833085c4e861b53", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -32,7 +32,6 @@\n //! and have the `Owner` remain allocated as long as any `Gadget` points at it.\n //!\n //! ```rust\n-//! # #![feature(alloc)]\n //! use std::rc::Rc;\n //!\n //! struct Owner {\n@@ -92,7 +91,7 @@\n //! documentation for more details on interior mutability.\n //!\n //! ```rust\n-//! # #![feature(alloc)]\n+//! # #![feature(rc_weak)]\n //! use std::rc::Rc;\n //! use std::rc::Weak;\n //! use std::cell::RefCell;\n@@ -229,7 +228,7 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(rc_weak)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -246,12 +245,12 @@ impl<T: ?Sized> Rc<T> {\n \n /// Get the number of weak references to this value.\n #[inline]\n-#[unstable(feature = \"rc_extras\")]\n+#[unstable(feature = \"rc_counts\")]\n pub fn weak_count<T: ?Sized>(this: &Rc<T>) -> usize { this.weak() - 1 }\n \n /// Get the number of strong references to this value.\n #[inline]\n-#[unstable(feature = \"rc_extras\")]\n+#[unstable(feature = \"rc_counts\")]\n pub fn strong_count<T: ?Sized>(this: &Rc<T>) -> usize { this.strong() }\n \n /// Returns true if there are no other `Rc` or `Weak<T>` values that share the\n@@ -260,7 +259,7 @@ pub fn strong_count<T: ?Sized>(this: &Rc<T>) -> usize { this.strong() }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(alloc)]\n+/// # #![feature(rc_unique)]\n /// use std::rc;\n /// use std::rc::Rc;\n ///\n@@ -269,7 +268,7 @@ pub fn strong_count<T: ?Sized>(this: &Rc<T>) -> usize { this.strong() }\n /// rc::is_unique(&five);\n /// ```\n #[inline]\n-#[unstable(feature = \"rc_extras\")]\n+#[unstable(feature = \"rc_unique\")]\n pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n     weak_count(rc) == 0 && strong_count(rc) == 1\n }\n@@ -281,7 +280,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(alloc)]\n+/// # #![feature(rc_unique)]\n /// use std::rc::{self, Rc};\n ///\n /// let x = Rc::new(3);\n@@ -292,7 +291,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n /// assert_eq!(rc::try_unwrap(x), Err(Rc::new(4)));\n /// ```\n #[inline]\n-#[unstable(feature = \"rc_extras\")]\n+#[unstable(feature = \"rc_unique\")]\n pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n     if is_unique(&rc) {\n         unsafe {\n@@ -316,7 +315,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(alloc)]\n+/// # #![feature(rc_unique)]\n /// use std::rc::{self, Rc};\n ///\n /// let mut x = Rc::new(3);\n@@ -327,7 +326,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// assert!(rc::get_mut(&mut x).is_none());\n /// ```\n #[inline]\n-#[unstable(feature = \"rc_extras\")]\n+#[unstable(feature = \"rc_unique\")]\n pub fn get_mut<T>(rc: &mut Rc<T>) -> Option<&mut T> {\n     if is_unique(rc) {\n         let inner = unsafe { &mut **rc._ptr };\n@@ -346,15 +345,15 @@ impl<T: Clone> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(rc_unique)]\n     /// use std::rc::Rc;\n     ///\n     /// let mut five = Rc::new(5);\n     ///\n     /// let mut_five = five.make_unique();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_extras\")]\n+    #[unstable(feature = \"rc_unique\")]\n     pub fn make_unique(&mut self) -> &mut T {\n         if !is_unique(self) {\n             *self = Rc::new((**self).clone())\n@@ -390,7 +389,6 @@ impl<T: ?Sized> Drop for Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -443,7 +441,6 @@ impl<T: ?Sized> Clone for Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -677,7 +674,7 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(rc_weak)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -705,7 +702,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(rc_weak)]\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -752,7 +749,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(alloc)]\n+    /// # #![feature(rc_weak)]\n     /// use std::rc::Rc;\n     ///\n     /// let weak_five = Rc::new(5).downgrade();"}, {"sha": "6a07c2c47eb24d77ed3d81f22a3d2246c2931047", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 64, "deletions": 61, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -38,7 +38,7 @@\n //! [sieve]: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n //!\n //! ```\n-//! # #![feature(collections, core, step_by)]\n+//! # #![feature(bitset, bitvec, range_inclusive, step_by)]\n //! use std::collections::{BitSet, BitVec};\n //! use std::iter;\n //!\n@@ -133,7 +133,7 @@ const FALSE: &'static bool = &false;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(collections)]\n+/// # #![feature(bitvec)]\n /// use std::collections::BitVec;\n ///\n /// let mut bv = BitVec::from_elem(10, false);\n@@ -250,7 +250,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     /// let mut bv = BitVec::new();\n     /// ```\n@@ -265,7 +265,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_elem(10, false);\n@@ -306,7 +306,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000, 0b00010010]);\n@@ -349,7 +349,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_fn(5, |i| { i % 2 == 0 });\n@@ -368,7 +368,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -401,7 +401,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, false);\n@@ -424,7 +424,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -445,7 +445,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -474,7 +474,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -505,7 +505,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -536,7 +536,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -566,7 +566,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, true);\n@@ -591,7 +591,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01110100, 0b10010010]);\n@@ -712,7 +712,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -730,7 +730,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -752,7 +752,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, true);\n@@ -800,7 +800,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000]);\n@@ -821,7 +821,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -848,7 +848,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -879,7 +879,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -902,7 +902,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -924,7 +924,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -975,7 +975,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001001]);\n@@ -1006,7 +1006,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitvec)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -1224,7 +1224,7 @@ impl<'a> IntoIterator for &'a BitVec {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(collections)]\n+/// # #![feature(bitvec, bitset)]\n /// use std::collections::{BitSet, BitVec};\n ///\n /// // It's a regular set\n@@ -1328,7 +1328,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1345,7 +1345,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1363,7 +1363,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -1385,7 +1385,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1397,17 +1397,17 @@ impl BitSet {\n         self.bit_vec.capacity()\n     }\n \n-    /// Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\n-    /// of `BitSet` this means reallocations will not occur as long as all inserted elements\n-    /// are less than `len`.\n+    /// Reserves capacity for the given `BitSet` to contain `len` distinct\n+    /// elements. In the case of `BitSet` this means reallocations will not\n+    /// occur as long as all inserted elements are less than `len`.\n     ///\n     /// The collection may reserve more space to avoid frequent reallocations.\n     ///\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1422,19 +1422,19 @@ impl BitSet {\n         }\n     }\n \n-    /// Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\n-    /// In the case of `BitSet` this means reallocations will not occur as long as all inserted\n-    /// elements are less than `len`.\n+    /// Reserves the minimum capacity for the given `BitSet` to contain `len`\n+    /// distinct elements.  In the case of `BitSet` this means reallocations\n+    /// will not occur as long as all inserted elements are less than `len`.\n     ///\n-    /// Note that the allocator may give the collection more space than it requests. Therefore\n-    /// capacity can not be relied upon to be precisely minimal. Prefer `reserve_len` if future\n-    /// insertions are expected.\n+    /// Note that the allocator may give the collection more space than it\n+    /// requests. Therefore capacity can not be relied upon to be precisely\n+    /// minimal. Prefer `reserve_len` if future insertions are expected.\n     ///\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1455,7 +1455,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1476,7 +1476,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1523,7 +1523,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1556,7 +1556,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let s = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01001010]));\n@@ -1578,7 +1578,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1602,12 +1602,13 @@ impl BitSet {\n     }\n \n     /// Iterator over each usize stored in `self` intersect `other`.\n-    /// See [intersect_with](#method.intersect_with) for an efficient in-place version.\n+    /// See [intersect_with](#method.intersect_with) for an efficient in-place\n+    /// version.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1632,12 +1633,13 @@ impl BitSet {\n     }\n \n     /// Iterator over each usize stored in the `self` setminus `other`.\n-    /// See [difference_with](#method.difference_with) for an efficient in-place version.\n+    /// See [difference_with](#method.difference_with) for an efficient in-place\n+    /// version.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1667,14 +1669,15 @@ impl BitSet {\n         }))\n     }\n \n-    /// Iterator over each usize stored in the symmetric difference of `self` and `other`.\n-    /// See [symmetric_difference_with](#method.symmetric_difference_with) for\n-    /// an efficient in-place version.\n+    /// Iterator over each usize stored in the symmetric difference of `self`\n+    /// and `other`.  See\n+    /// [symmetric_difference_with](#method.symmetric_difference_with) for an\n+    /// efficient in-place version.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1702,7 +1705,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1726,7 +1729,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1751,7 +1754,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1784,7 +1787,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(bitset, bitvec)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1808,7 +1811,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections, append)]\n+    /// # #![feature(bitset, bitvec, append)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let mut a = BitSet::new();\n@@ -1839,7 +1842,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, split_off)]\n+    /// # #![feature(bitset, bitvec, split_off)]\n     /// use std::collections::{BitSet, BitVec};\n     /// let mut a = BitSet::new();\n     /// a.insert(2);"}, {"sha": "d27d04c3a6cec1874241268037eb1c5ac8c6de79", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -1507,7 +1507,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(btree_range, collections_bound)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///\n@@ -1534,7 +1534,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(btree_range, collections_bound)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Excluded};\n     ///"}, {"sha": "7c4cda305adf2f50281c49f71f0a752363eb1116", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -141,7 +141,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(btree_range, collections_bound)]\n     /// use std::collections::BTreeSet;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///"}, {"sha": "72d0ca85357a4274ab9bda81b8823ae41fcae20f", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -172,9 +172,8 @@\n //! like:\n //!\n //! ```\n-//! # #![feature(core, std_misc)]\n+//! # #![feature(fmt_flags)]\n //! use std::fmt;\n-//! use std::f64;\n //!\n //! #[derive(Debug)]\n //! struct Vector2D {"}, {"sha": "b08a3b85e4cbf85c1f8738815bda276eea095da5", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -44,8 +44,8 @@\n #![feature(iter_cmp)]\n #![feature(iter_idx)]\n #![feature(iter_order)]\n-#![feature(iter_product)]\n-#![feature(iter_sum)]\n+#![feature(iter_arith)]\n+#![feature(iter_arith)]\n #![feature(lang_items)]\n #![feature(num_bits_bytes)]\n #![feature(oom)]"}, {"sha": "a02cb44896ad3d6406334b60d2c204d144200960", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -784,7 +784,7 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(linked_list_extras)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();\n@@ -812,7 +812,7 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(linked_list_extras)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();"}, {"sha": "be678d4a55c86ca1a9be74518c8d6b8d8e23095e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -851,7 +851,7 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(collections)]\n+    /// # #![feature(permutations)]\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -863,7 +863,7 @@ impl<T> [T] {\n     /// Iterating through permutations one by one.\n     ///\n     /// ```rust\n-    /// # #![feature(collections)]\n+    /// # #![feature(permutations)]\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -886,7 +886,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(collections)]\n+    /// # #![feature(permutations)]\n     /// let v: &mut [_] = &mut [0, 1, 2];\n     /// v.next_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -909,7 +909,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(collections)]\n+    /// # #![feature(permutations)]\n     /// let v: &mut [_] = &mut [1, 0, 2];\n     /// v.prev_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -931,7 +931,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(collections)]\n+    /// # #![feature(clone_from_slice)]\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2];\n     ///\n@@ -962,7 +962,7 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(collections)]\n+    /// # #![feature(move_from)]\n     /// let mut a = [1, 2, 3, 4, 5];\n     /// let b = vec![6, 7, 8];\n     /// let num_moved = a.move_from(b, 0, 3);"}, {"sha": "d41e062cac3d833aa2909800e1ae52efd73f2709", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -585,7 +585,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(slice_chars)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.slice_chars(0, 4), \"L\u00f6we\");\n@@ -1520,7 +1520,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(str_matches)]\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\n     /// assert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n     ///\n@@ -1553,7 +1553,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(str_matches)]\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\n     /// assert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n     ///\n@@ -1595,7 +1595,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(str_matches)]\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, [(0, 3), (6, 9), (12, 15)]);\n     ///\n@@ -1639,7 +1639,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(str_matches)]\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\n     /// assert_eq!(v, [(12, 15), (6, 9), (0, 3)]);\n     ///\n@@ -1669,7 +1669,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(subslice_offset)]\n     /// let string = \"a\\nb\\nc\";\n     /// let lines: Vec<&str> = string.lines().collect();\n     ///\n@@ -1863,7 +1863,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(str_casing)]\n     ///\n     /// let s = \"HELLO\";\n     /// assert_eq!(s.to_lowercase(), \"hello\");\n@@ -1909,7 +1909,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(str_casing)]\n     ///\n     /// let s = \"hello\";\n     /// assert_eq!(s.to_uppercase(), \"HELLO\");"}, {"sha": "3d7c82c9a94a687e02b137fe3a2111db24dd9bab", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -696,7 +696,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(append)]\n     /// let mut vec = vec![1, 2, 3];\n     /// let mut vec2 = vec![4, 5, 6];\n     /// vec.append(&mut vec2);\n@@ -840,7 +840,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(map_in_place)]\n     /// let v = vec![0, 1, 2];\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(&w[..], &[3, 4, 5]);\n@@ -1082,7 +1082,7 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vec_resize)]\n     /// let mut vec = vec![\"hello\"];\n     /// vec.resize(3, \"world\");\n     /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n@@ -1111,7 +1111,7 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vec_push_all)]\n     /// let mut vec = vec![1];\n     /// vec.push_all(&[2, 3, 4]);\n     /// assert_eq!(vec, [1, 2, 3, 4]);"}, {"sha": "c80fcfc5fedccd143fbc839ddd39a523042552c4", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -480,7 +480,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(deque_extras)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -629,7 +629,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(drain)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut v = VecDeque::new();\n@@ -868,7 +868,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(deque_extras)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -892,8 +892,8 @@ impl<T> VecDeque<T> {\n         self.pop_back()\n     }\n \n-    /// Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\n-    /// element.\n+    /// Removes an element from anywhere in the ringbuf and returns it,\n+    /// replacing it with the first element.\n     ///\n     /// This does not preserve ordering, but is O(1).\n     ///\n@@ -902,7 +902,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(deque_extras)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1310,7 +1310,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(split_off)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\n@@ -1373,7 +1373,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(append)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n@@ -1434,7 +1434,7 @@ impl<T: Clone> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(deque_extras)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}, {"sha": "98ecd045b9ace39a3817d4813d57e3ccaeffffe4", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -35,7 +35,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(collections)]\n+/// # #![feature(vecmap)]\n /// use std::collections::VecMap;\n ///\n /// let mut months = VecMap::new();\n@@ -135,7 +135,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// ```\n@@ -148,7 +148,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::with_capacity(10);\n     /// ```\n@@ -163,7 +163,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     /// let map: VecMap<String> = VecMap::with_capacity(10);\n     /// assert!(map.capacity() >= 10);\n@@ -183,7 +183,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len(10);\n@@ -208,7 +208,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len_exact(10);\n@@ -248,7 +248,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -277,7 +277,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -307,7 +307,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap, append)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -343,7 +343,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap, split_off)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -400,7 +400,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap, drain)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -428,7 +428,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -446,7 +446,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -464,7 +464,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -480,7 +480,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -505,7 +505,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -524,7 +524,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -552,7 +552,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -578,7 +578,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -600,7 +600,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap, entry)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut count: VecMap<u32> = VecMap::new();\n@@ -779,7 +779,7 @@ impl<T> IntoIterator for VecMap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// # #![feature(vecmap)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();"}, {"sha": "437657cec165856bb341093e881a046e10330c7a", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,23 +8,52 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(bit_set_append_split_off)]\n+#![feature(append)]\n #![feature(bit_vec_append_split_off)]\n+#![feature(bitset)]\n+#![feature(bitvec)]\n #![feature(box_syntax)]\n+#![feature(btree_range)]\n #![feature(collections)]\n-#![feature(collections_drain)]\n-#![feature(core)]\n+#![feature(collections_bound)]\n #![feature(const_fn)]\n-#![feature(hash)]\n+#![feature(core)]\n+#![feature(deque_extras)]\n+#![feature(drain)]\n+#![feature(enumset)]\n+#![feature(hash_default)]\n+#![feature(into_cow)]\n+#![feature(iter_idx)]\n+#![feature(iter_order)]\n+#![feature(iter_arith)]\n+#![feature(iter_to_vec)]\n+#![feature(map_in_place)]\n+#![feature(move_from)]\n+#![feature(num_bits_bytes)]\n+#![feature(pattern)]\n+#![feature(permutations)]\n #![feature(rand)]\n+#![feature(range_inclusive)]\n #![feature(rustc_private)]\n+#![feature(slice_bytes)]\n+#![feature(slice_chars)]\n+#![feature(slice_extras)]\n+#![feature(slice_position_elem)]\n+#![feature(split_off)]\n+#![feature(step_by)]\n+#![feature(str_char)]\n+#![feature(str_escape)]\n+#![feature(str_matches)]\n+#![feature(str_utf16)]\n+#![feature(subslice_offset)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(into_cow)]\n-#![feature(step_by)]\n-#![cfg_attr(test, feature(str_char))]\n-#![cfg_attr(test, feature(vec_deque_retain))]\n+#![feature(vec_deque_retain)]\n+#![feature(vec_from_raw_buf)]\n+#![feature(vec_push_all)]\n+#![feature(vec_split_off)]\n+#![feature(vecmap)]\n \n #[macro_use] extern crate log;\n "}, {"sha": "3f32136bc263974c62a1dfd6dea73f9879d88183", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::str::{Utf8Error, from_utf8};\n+use std::str::from_utf8;\n \n #[test]\n fn test_le() {\n@@ -1753,6 +1753,7 @@ mod pattern {\n \n     macro_rules! make_test {\n         ($name:ident, $p:expr, $h:expr, [$($e:expr,)*]) => {\n+            #[allow(unused_imports)]\n             mod $name {\n                 use std::str::pattern::SearchStep::{Match, Reject};\n                 use super::{cmp_search_to_vec};"}, {"sha": "257caca4016df28e8cef0f826544a4d16649bceb", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,12 +10,13 @@\n \n use std::borrow::{IntoCow, Cow};\n use std::iter::repeat;\n-use std::str::Utf8Error;\n+#[allow(deprecated)]\n use std::string::as_string;\n \n use test::Bencher;\n \n #[test]\n+#[allow(deprecated)]\n fn test_as_string() {\n     let x = \"foo\";\n     assert_eq!(x, &**as_string(x));"}, {"sha": "df63fbc62fcf4f04169e054e823f7f6bc5e69a20", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,6 +10,7 @@\n \n use std::iter::{FromIterator, repeat};\n use std::mem::size_of;\n+#[allow(deprecated)]\n use std::vec::as_vec;\n \n use test::Bencher;\n@@ -25,12 +26,14 @@ impl<'a> Drop for DropCounter<'a> {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_as_vec() {\n     let xs = [1u8, 2u8, 3u8];\n     assert_eq!(&**as_vec(&xs), xs);\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_as_vec_dtor() {\n     let (mut count_x, mut count_y) = (0, 0);\n     {"}, {"sha": "95368de3bf3d91bf2630c433204f69a6d08d0896", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -537,8 +537,6 @@ fn test_drain() {\n \n #[test]\n fn test_from_iter() {\n-    use std::iter;\n-\n     let v = vec!(1,2,3,4,5,6,7);\n     let deq: VecDeque<_> = v.iter().cloned().collect();\n     let u: Vec<_> = deq.iter().cloned().collect();"}, {"sha": "37f37654c1fee8f903598fc8a5a410167c8b432c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -221,7 +221,7 @@ impl<T:Copy> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(as_unsafe_cell)]\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);"}, {"sha": "0269499ad5414ffd681b673d21dc1c515f1e004d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -381,7 +381,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(core)]\n+/// # #![feature(cmp_partial)]\n /// use std::cmp;\n ///\n /// assert_eq!(Some(1), cmp::partial_min(1, 2));\n@@ -391,7 +391,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// When comparison is impossible:\n ///\n /// ```\n-/// # #![feature(core)]\n+/// # #![feature(cmp_partial)]\n /// use std::cmp;\n ///\n /// let result = cmp::partial_min(std::f64::NAN, 1.0);\n@@ -414,7 +414,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(core)]\n+/// # #![feature(cmp_partial)]\n /// use std::cmp;\n ///\n /// assert_eq!(Some(2), cmp::partial_max(1, 2));\n@@ -424,7 +424,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// When comparison is impossible:\n ///\n /// ```\n-/// # #![feature(core)]\n+/// # #![feature(cmp_partial)]\n /// use std::cmp;\n ///\n /// let result = cmp::partial_max(std::f64::NAN, 1.0);"}, {"sha": "fc49f87d107699c2defce051f06df1100f6c37ce", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -162,7 +162,7 @@ pub struct RadixFmt<T, R>(T, R);\n /// # Examples\n ///\n /// ```\n-/// # #![feature(core)]\n+/// # #![feature(fmt_radix)]\n /// use std::fmt::radix;\n /// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```"}, {"sha": "abf9e55a1f2fbaa1e10a18cbde5fcbd5151b3a40", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -16,7 +16,7 @@\n //! # Examples\n //!\n //! ```rust\n-//! # #![feature(hash)]\n+//! # #![feature(hash_default)]\n //! use std::hash::{hash, Hash, SipHasher};\n //!\n //! #[derive(Hash)]\n@@ -36,7 +36,7 @@\n //! the trait `Hash`:\n //!\n //! ```rust\n-//! # #![feature(hash)]\n+//! # #![feature(hash_default)]\n //! use std::hash::{hash, Hash, Hasher, SipHasher};\n //!\n //! struct Person {"}, {"sha": "30c2d3fcb6d5d8174a31db01c2e56b99ac678bdc", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -822,7 +822,7 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(iter_min_max)]\n     /// use std::iter::MinMaxResult::{NoElements, OneElement, MinMax};\n     ///\n     /// let a: [i32; 0] = [];\n@@ -894,7 +894,7 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(iter_cmp)]\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n@@ -922,7 +922,7 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(iter_cmp)]\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```\n@@ -1061,12 +1061,12 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(iter_arith)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let it = a.iter();\n     /// assert_eq!(it.sum::<i32>(), 15);\n     /// ```\n-    #[unstable(feature=\"iter_sum\", reason = \"bounds recently changed\")]\n+    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\")]\n     fn sum<S=<Self as Iterator>::Item>(self) -> S where\n         S: Add<Self::Item, Output=S> + Zero,\n         Self: Sized,\n@@ -1079,15 +1079,15 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(iter_arith)]\n     /// fn factorial(n: u32) -> u32 {\n     ///     (1..).take_while(|&i| i <= n).product()\n     /// }\n     /// assert_eq!(factorial(0), 1);\n     /// assert_eq!(factorial(1), 1);\n     /// assert_eq!(factorial(5), 120);\n     /// ```\n-    #[unstable(feature=\"iter_product\", reason = \"bounds recently changed\")]\n+    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\")]\n     fn product<P=<Self as Iterator>::Item>(self) -> P where\n         P: Mul<Self::Item, Output=P> + One,\n         Self: Sized,\n@@ -1353,7 +1353,7 @@ impl<T: Clone> MinMaxResult<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(iter_min_max)]\n     /// use std::iter::MinMaxResult::{self, NoElements, OneElement, MinMax};\n     ///\n     /// let r: MinMaxResult<i32> = NoElements;\n@@ -2509,7 +2509,7 @@ impl<I: RandomAccessIterator, F> RandomAccessIterator for Inspect<I, F>\n /// An iterator that yields sequential Fibonacci numbers, and stops on overflow.\n ///\n /// ```\n-/// #![feature(core)]\n+/// #![feature(iter_unfold)]\n /// use std::iter::Unfold;\n ///\n /// // This iterator will yield up to the last Fibonacci number before the max"}, {"sha": "dd60164a114db0f547ff61718a22f2d5222ad738", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -388,7 +388,7 @@ mod impls {\n /// that function. Here is an example:\n ///\n /// ```\n-/// #![feature(core)]\n+/// #![feature(reflect_marker)]\n /// use std::marker::Reflect;\n /// use std::any::Any;\n /// fn foo<T:Reflect+'static>(x: &T) {"}, {"sha": "c5203c5111b64ab5e3ab7fa306eca86b12062ccd", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -274,7 +274,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(as_slice)]\n     /// let mut x = Some(\"Diamonds\");\n     /// {\n     ///     let v = x.as_mut_slice();"}, {"sha": "31cdb6093c8d917a5c5a55739706d3b11153f91b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -49,7 +49,7 @@\n //! the raw pointer. It doesn't destroy `T` or deallocate any memory.\n //!\n //! ```\n-//! # #![feature(alloc)]\n+//! # #![feature(box_raw)]\n //! use std::boxed;\n //!\n //! unsafe {"}, {"sha": "43535ddd1d5c5f7ff9b27d7bb8d91919e805e4b5", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -49,7 +49,7 @@ use mem;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(core)]\n+/// # #![feature(raw)]\n /// use std::raw::{self, Repr};\n ///\n /// let slice: &[u16] = &[1, 2, 3, 4];\n@@ -98,7 +98,7 @@ impl<T> Clone for Slice<T> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(core)]\n+/// # #![feature(raw)]\n /// use std::mem;\n /// use std::raw;\n ///"}, {"sha": "7fd845edc3f84c4bc4645e850d03731fa188e3bd", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -420,7 +420,7 @@ impl<T, E> Result<T, E> {\n     /// Converts from `Result<T, E>` to `&mut [T]` (without copying)\n     ///\n     /// ```\n-    /// # #![feature(core)]\n+    /// # #![feature(as_slice)]\n     /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {\n     ///     let v = x.as_mut_slice();"}, {"sha": "7ecd08bea3574fc192b3d9d2811b39e2922d264a", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -19,7 +19,7 @@\n //! provided beyond this module.\n //!\n //! ```rust\n-//! # #![feature(core)]\n+//! # #![feature(core_simd)]\n //! fn main() {\n //!     use std::simd::f32x4;\n //!     let a = f32x4(40.0, 41.0, 42.0, 43.0);"}, {"sha": "08536e63204753e4e90372b0223afece3987d12b", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,27 +8,45 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n-\n+#![feature(as_unsafe_cell)]\n+#![feature(borrow_state)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n-#![feature(core)]\n+#![feature(cell_extras)]\n+#![feature(cmp_partial)]\n #![feature(const_fn)]\n-#![feature(test)]\n-#![feature(rand)]\n-#![feature(unicode)]\n-#![feature(std_misc)]\n-#![feature(libc)]\n-#![feature(hash)]\n-#![feature(unique)]\n-#![feature(step_by)]\n-#![feature(slice_patterns)]\n+#![feature(core)]\n+#![feature(core_float)]\n+#![feature(float_extras)]\n #![feature(float_from_str_radix)]\n-#![feature(cell_extras)]\n+#![feature(flt2dec)]\n+#![feature(fmt_radix)]\n+#![feature(hash_default)]\n+#![feature(hasher_write)]\n+#![feature(iter_arith)]\n+#![feature(iter_arith)]\n+#![feature(iter_cmp)]\n #![feature(iter_empty)]\n+#![feature(iter_idx)]\n+#![feature(iter_iterate)]\n+#![feature(iter_min_max)]\n #![feature(iter_once)]\n+#![feature(iter_order)]\n+#![feature(iter_unfold)]\n+#![feature(libc)]\n+#![feature(nonzero)]\n+#![feature(num_bits_bytes)]\n+#![feature(ptr_as_ref)]\n+#![feature(rand)]\n+#![feature(range_inclusive)]\n+#![feature(raw)]\n #![feature(result_expect)]\n+#![feature(slice_bytes)]\n+#![feature(slice_patterns)]\n+#![feature(step_by)]\n+#![feature(test)]\n+#![feature(unboxed_closures)]\n+#![feature(unicode)]\n+#![feature(unique)]\n \n extern crate core;\n extern crate test;"}, {"sha": "04271ed5dd1a174de5c2e3770c6e85b44e07f1bd", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use core::option::*;\n-use core::marker;\n use core::mem;\n use core::clone::Clone;\n \n@@ -81,7 +80,8 @@ fn test_option_dance() {\n \n #[test] #[should_panic]\n fn test_option_too_much_dance() {\n-    let mut y = Some(marker::NoCopy);\n+    struct A;\n+    let mut y = Some(A);\n     let _y2 = y.take().unwrap();\n     let _y3 = y.take().unwrap();\n }"}, {"sha": "58cdf1133ec6a83b5ff11b1faf82274e39e4115b", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -28,7 +28,7 @@\n #![feature(libc)]\n #![feature(staged_api)]\n #![feature(unique)]\n-#![cfg_attr(test, feature(rustc_private, rand, collections))]\n+#![cfg_attr(test, feature(rustc_private, rand, vec_push_all))]\n \n #[cfg(test)] #[macro_use] extern crate log;\n "}, {"sha": "ec510b4a5bdfb4367792dc6194e7b1884af558ef", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -37,7 +37,7 @@\n #![feature(staged_api)]\n #![feature(step_by)]\n \n-#![cfg_attr(test, feature(test, rand, rustc_private))]\n+#![cfg_attr(test, feature(test, rand, rustc_private, iter_order))]\n \n #![allow(deprecated)]\n "}, {"sha": "377b60570e5fa41da998c870fa99a12aab173072", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -40,7 +40,8 @@\n #![feature(hash_default)]\n #![feature(hashmap_hasher)]\n #![feature(into_cow)]\n-#![feature(iter_sum)]\n+#![feature(iter_cmp)]\n+#![feature(iter_arith)]\n #![feature(libc)]\n #![feature(map_in_place)]\n #![feature(num_bits_bytes)]"}, {"sha": "b59c24cf12bdb5e4e717443c0b55b8737cb84f8a", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -19,7 +19,7 @@\n #![feature(no_std)]\n #![no_std]\n #![unstable(feature = \"rustc_private\")]\n-#![cfg_attr(test, feature(hash))]\n+#![cfg_attr(test, feature(hash_default))]\n \n //! A typesafe bitmask flag generator.\n "}, {"sha": "052ec4897d131c74b86b75b0a4ed59527a2ae208", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -33,7 +33,6 @@\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n-#![feature(str_casing)]\n #![feature(vec_push_all)]\n \n extern crate arena;"}, {"sha": "c680906dd135bc741703dd7f4a7392cf03864417", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -39,7 +39,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(str_casing)]\n #![feature(str_char)]\n \n extern crate syntax;"}, {"sha": "a1e1b395d987df362857a566d5cb934751bb592e", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -30,7 +30,7 @@\n #![feature(const_fn)]\n #![feature(fs)]\n #![feature(iter_cmp)]\n-#![feature(iter_sum)]\n+#![feature(iter_arith)]\n #![feature(iter_unfold)]\n #![feature(libc)]\n #![feature(once_new)]"}, {"sha": "764910100360a62464c69f442b95aaf7347c604e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -79,7 +79,7 @@ This API is completely unstable and subject to change.\n #![feature(box_syntax)]\n #![feature(drain)]\n #![feature(iter_cmp)]\n-#![feature(iter_sum)]\n+#![feature(iter_arith)]\n #![feature(quote)]\n #![feature(ref_slice)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "b420444d1f5c813b440e6ebcfbaa0ba624a7d3d4", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -38,7 +38,7 @@\n #![feature(core_prelude)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n-#![feature(iter_sum)]\n+#![feature(iter_arith)]\n #![feature(lang_items)]\n #![feature(no_std)]\n #![feature(staged_api)]"}, {"sha": "9db9af32baa15d444af2682c45e9b2633f321882", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -22,18 +22,21 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(collections)]\n+#![feature(dynamic_lib)]\n #![feature(exit_status)]\n-#![feature(set_stdio)]\n #![feature(libc)]\n+#![feature(owned_ascii_ext)]\n+#![feature(path_ext)]\n+#![feature(path_relative_from)]\n #![feature(rustc_private)]\n+#![feature(set_stdio)]\n+#![feature(slice_extras)]\n+#![feature(slice_patterns)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n+#![feature(subslice_offset)]\n #![feature(test)]\n #![feature(unicode)]\n-#![feature(path_ext)]\n-#![feature(path_relative_from)]\n-#![feature(slice_patterns)]\n+#![feature(vec_push_all)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "9f9435f4123395e250c7dfd695462c2d689f707b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -149,8 +149,8 @@\n #![feature(vec_push_all)]\n #![feature(wrapping)]\n #![feature(zero_one)]\n-#![cfg_attr(test, feature(float_from_str_radix))]\n-#![cfg_attr(test, feature(test, rustc_private))]\n+#![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras))]\n+#![cfg_attr(test, feature(test, rustc_private, float_consts))]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "f5b6650a49833adbd34f5b95bf25aa9f22b3a12b", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -14,7 +14,7 @@\n //! # Examples\n //!\n //! ```\n-//! # #![feature(std_misc)]\n+//! # #![feature(future)]\n //! use std::sync::Future;\n //!\n //! // a fake, for now"}, {"sha": "1d6301429592258023d10509bf8032e58e45c384", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -85,6 +85,8 @@ use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n /// To recover from a poisoned mutex:\n ///\n /// ```\n+/// #![feature(sync_poison)]\n+///\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///"}, {"sha": "dc9e467a8b1352524e06dac7fc3bb2589e5d55bf", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -25,7 +25,7 @@ use sync::{Mutex, Condvar};\n /// # Examples\n ///\n /// ```\n-/// # #![feature(std_misc)]\n+/// # #![feature(semaphore)]\n /// use std::sync::Semaphore;\n ///\n /// // Create a semaphore that represents 5 resources"}, {"sha": "1507226c3a133fc5732c92fae9fb329640c620f6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -41,11 +41,12 @@\n #![feature(fnbox)]\n #![feature(iter_cmp)]\n #![feature(libc)]\n+#![feature(rt)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(slice_extras)]\n #![feature(staged_api)]\n-#![feature(std_misc)]\n+#![feature(thunk)]\n \n extern crate getopts;\n extern crate serialize;"}, {"sha": "707493e85189c10569f77b52d9fbc3c448954a44", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,7 +11,7 @@\n #![deny(warnings)]\n \n #![feature(exit_status)]\n-#![feature(iter_sum)]\n+#![feature(iter_arith)]\n #![feature(path_relative_from)]\n #![feature(rustc_private)]\n #![feature(rustdoc)]"}, {"sha": "ce3360787136a099ed5a38adcb0544323bf8ffc8", "filename": "src/test/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flinkage-visibility.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(std_misc)]\n+#![feature(dynamic_lib)]\n \n // We're testing linkage visibility; the compiler warns us, but we want to\n // do the runtime check that these functions aren't exported."}, {"sha": "d2537e09901cb90c876b7bef9610435a30f4c566", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,6 +11,7 @@\n // ignore-pretty very bad with line comments\n \n #![feature(unboxed_closures, rand, std_misc, collections, duration, duration_span)]\n+#![feature(bitset)]\n \n extern crate collections;\n extern crate rand;"}, {"sha": "3cc03f5218cebeaf237ff92b4fc18de2bdb07ce1", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // Microbenchmarks for various functions in std and extra\n \n-#![feature(rand, collections, std_misc, duration, duration_span)]\n+#![feature(rand, vec_push_all, duration, duration_span)]\n \n use std::iter::repeat;\n use std::mem::swap;"}, {"sha": "24ecaf4b0247145e121df407af89471fb685e543", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -17,7 +17,7 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#![feature(duration, duration_span, std_misc)]\n+#![feature(duration, duration_span, future)]\n \n use std::env;\n use std::sync::{Arc, Future, Mutex, Condvar};"}, {"sha": "8ae07558c168fb34aa172d1d92a2418b72c42cf3", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android: FIXME(#10393) hangs without output\n \n-#![feature(box_syntax, std_misc, collections)]\n+#![feature(box_syntax, owned_ascii_ext, vec_push_all)]\n \n use std::ascii::OwnedAsciiExt;\n use std::env;"}, {"sha": "232d6b414f580cb4b973388793e13a5551ee94da", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -38,7 +38,7 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-#![feature(simd, core)]\n+#![feature(core_simd, core)]\n \n // ignore-pretty very bad with line comments\n "}, {"sha": "aa40f6f868c305b37f2b96e94dd58b78e7129449", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -40,7 +40,7 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#![feature(core)]\n+#![feature(iter_cmp)]\n \n use std::iter::repeat;\n use std::sync::Arc;"}, {"sha": "1598b20922338bb07a0f36da9c1e0e6ea319101b", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -41,14 +41,11 @@\n // no-pretty-expanded FIXME #15189\n \n #![allow(non_snake_case)]\n-#![feature(unboxed_closures, core, os, scoped)]\n+#![feature(unboxed_closures, iter_arith, core_simd, scoped)]\n \n use std::iter::repeat;\n use std::thread;\n-use std::mem;\n-use std::os;\n use std::env;\n-use std::raw::Repr;\n use std::simd::f64x2;\n \n fn main() {"}, {"sha": "6a39a6db0c7284769937e2e07c19db7d8600d916", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // Microbenchmark for the smallintmap library\n \n-#![feature(collections, duration, duration_span)]\n+#![feature(vecmap, duration, duration_span)]\n \n use std::collections::VecMap;\n use std::env;"}, {"sha": "3bd7b7812511200a53275609ea23cdfe92ada2bb", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax, duration, duration_span, collections)]\n+#![feature(box_syntax, duration, duration_span, vec_push_all)]\n \n use std::env;\n use std::thread;"}, {"sha": "32c50b1b8c159b732b56ef4c5472d2785c5686e2", "filename": "src/test/compile-fail/feature-gate-simd-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(simd, core)]\n+#![feature(simd, core_simd)]\n #![allow(dead_code)]\n \n use std::simd::f32x4;"}, {"sha": "529113ace4ef9f7933b882c45a5b155843a2541d", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,15 +11,10 @@\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n #![deny(dead_code)]\n-#![feature(libc)]\n-#![feature(core)]\n-\n-extern crate libc;\n \n struct Foo {\n     x: usize,\n     b: bool, //~ ERROR: struct field is never used\n-    marker: std::marker::NoCopy\n }\n \n fn field_read(f: Foo) -> usize {\n@@ -50,7 +45,7 @@ struct Bar {\n \n #[repr(C)]\n struct Baz {\n-    x: libc::c_uint\n+    x: u32,\n }\n \n fn field_match_in_let(f: Bar) -> bool {\n@@ -59,7 +54,7 @@ fn field_match_in_let(f: Bar) -> bool {\n }\n \n fn main() {\n-    field_read(Foo { x: 1, b: false, marker: std::marker::NoCopy });\n+    field_read(Foo { x: 1, b: false });\n     field_match_in_patterns(XYZ::Z);\n     field_match_in_let(Bar { x: 42, b: true, _guard: () });\n     let _ = Baz { x: 0 };"}, {"sha": "5867bc2f09deb273967b0c986178d108acfb0bf2", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -12,7 +12,7 @@\n #![deny(exceeding_bitshifts)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n-#![feature(core, negate_unsigned)]\n+#![feature(num_bits_bytes, negate_unsigned)]\n \n fn main() {\n       let n = 1u8 << 7;"}, {"sha": "ec5a6fa3d3f16e0dc0e6e9d04ac84e14faa5fb0f", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -14,8 +14,8 @@\n \n #![allow(dead_code, unused_variables)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(std_misc, core)]\n #![feature(const_fn)]\n+#![feature(static_mutex)]\n \n // This test makes sure that the compiler doesn't crash when trying to assign\n // debug locations to const-expressions."}, {"sha": "6bc8892a83a6939cc497505522f720a978106f3b", "filename": "src/test/debuginfo/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Fdebuginfo%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimd.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -42,7 +42,7 @@\n \n #![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(core)]\n+#![feature(core_simd)]\n \n use std::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n "}, {"sha": "b53a870e2001cb0129151fa59b4c6a07209fd608", "filename": "src/test/run-make/extern-fn-reachable/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-reachable%2Fmain.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(std_misc)]\n+#![feature(dynamic_lib)]\n \n use std::dynamic_lib::DynamicLibrary;\n use std::path::Path;"}, {"sha": "f58d2cd8f91d8d84d2d0ab95f65c87caa6380835", "filename": "src/test/run-make/intrinsic-unreachable/exit-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(asm, core)]\n+#![feature(asm, core_intrinsics)]\n #![crate_type=\"lib\"]\n \n use std::intrinsics;"}, {"sha": "6c6afdc13030ca19dfe596927992ae3cac2d7975", "filename": "src/test/run-make/volatile-intrinsics/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fvolatile-intrinsics%2Fmain.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::{volatile_load, volatile_store};\n "}, {"sha": "61a7fab130928493054a016d8c3414206ed8fa14", "filename": "src/test/run-pass/binary-heap-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(std_misc, collections, catch_panic, rand)]\n+#![feature(std_misc, collections, catch_panic, rand, sync_poison)]\n \n use std::__rand::{thread_rng, Rng};\n use std::thread;"}, {"sha": "3ab154356c4b6c23e5c6b52f3ca2a4b2120cb8e4", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,16 +10,14 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax, collections)]\n+#![feature(bitvec)]\n \n-extern crate collections;\n use std::collections::BitVec;\n \n fn bitv_test() {\n-    let mut v1: Box<_> = box BitVec::from_elem(31, false);\n-    let v2: Box<_> = box BitVec::from_elem(31, true);\n-    v1.union(&*v2);\n+    let mut v1 = BitVec::from_elem(31, false);\n+    let v2 = BitVec::from_elem(31, true);\n+    v1.union(&v2);\n }\n \n pub fn main() {"}, {"sha": "ba1d8228863ad6562a682ad5efbb902b1184622a", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(hash)]\n+#![feature(hash_default)]\n \n use std::hash::{Hash, SipHasher};\n "}, {"sha": "13257529ed9f860eaaae4d975ef1b7f552f492f2", "filename": "src/test/run-pass/discriminant_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiscriminant_value.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(core, core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "6eb01e879df5735ec133e763a04e7b0c3c20f3af", "filename": "src/test/run-pass/dst-coerce-custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fdst-coerce-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fdst-coerce-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-coerce-custom.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // Test a very simple custom DST coercion.\n \n-#![feature(core)]\n+#![feature(unsize, coerce_unsized)]\n \n use std::ops::CoerceUnsized;\n use std::marker::Unsize;"}, {"sha": "dd88dc11ea70e47a11dd25b8c11970f4716cac23", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n+#![feature(nonzero, core)]\n \n extern crate core;\n "}, {"sha": "58296c3f95ef923be7397c58f13bdc35b91e4172", "filename": "src/test/run-pass/fat-ptr-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(raw)]\n \n use std::mem;\n use std::raw;"}, {"sha": "a1bd77a74f725593f790465714c52d9f81765341", "filename": "src/test/run-pass/for-loop-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-no-std.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(lang_items, start, no_std, core, collections)]\n+#![feature(lang_items, start, no_std, core_slice_ext, core, collections)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "1452cefbd5c2ba18e70435025232ac4417504df5", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n #![feature(lang_items, start, no_std, core, collections)]\n #![no_std]\n "}, {"sha": "7ec18ef127690645382d8983f062ec8a6bf6c171", "filename": "src/test/run-pass/into-iterator-type-inference-shift.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finto-iterator-type-inference-shift.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -15,10 +15,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::u8;\n-\n trait IntoIterator {\n     type Iter: Iterator;\n \n@@ -35,7 +31,7 @@ impl<I> IntoIterator for I where I: Iterator {\n \n fn desugared_for_loop_bad(byte: u8) -> u8 {\n     let mut result = 0;\n-    let mut x = IntoIterator::into_iter(0..u8::BITS);\n+    let mut x = IntoIterator::into_iter(0..8);\n     let mut y = Iterator::next(&mut x);\n     let mut z = y.unwrap();\n     byte >> z;"}, {"sha": "41ef62b0ced3d7e24285e50513ca44ce0bf06b26", "filename": "src/test/run-pass/intrinsic-assume.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::assume;\n "}, {"sha": "9fd4f2133b70d36287f9b7cd02010fbb2ad0beca", "filename": "src/test/run-pass/intrinsic-move-val-cleanups.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fintrinsic-move-val-cleanups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fintrinsic-move-val-cleanups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val-cleanups.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -18,7 +18,7 @@\n // introduce temporaries that require cleanup, and SOURCE panics, then\n // make sure the cleanups still occur.\n \n-#![feature(core, std_misc)]\n+#![feature(core_intrinsics, sync_poison)]\n \n use std::cell::RefCell;\n use std::intrinsics;"}, {"sha": "0ce446e445c73d9565c000f90a6013739e3630ea", "filename": "src/test/run-pass/intrinsic-unreachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-unreachable.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics;\n "}, {"sha": "3eaa5632395b72ea8c32ef59d89c153ba94433f6", "filename": "src/test/run-pass/issue-11709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11709.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -15,7 +15,7 @@\n // when this bug was opened. The cases where the compiler\n // panics before the fix have a comment.\n \n-#![feature(std_misc)]\n+#![feature(thunk)]\n \n use std::thunk::Thunk;\n "}, {"sha": "9b30305a1969de924c287b97475e94bdbb32f616", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(collections)]\n+#![feature(bitvec)]\n \n use std::collections::BitVec;\n "}, {"sha": "e0c43422c28236c53e4e8a72ffd709074fd3294b", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n #![forbid(warnings)]\n-#![feature(std_misc)]\n+#![feature(thunk)]\n \n // Pretty printing tests complain about `use std::predule::*`\n #![allow(unused_imports)]"}, {"sha": "e94368925abee2b261c0d6d0ac9cc104e59cb54b", "filename": "src/test/run-pass/issue-13494.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,9 +11,7 @@\n // This test may not always fail, but it can be flaky if the race it used to\n // expose is still present.\n \n-// pretty-expanded FIXME #23616\n-\n-#![feature(std_misc)]\n+#![feature(mpsc_select)]\n \n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::thread;"}, {"sha": "0ea38596335d8c8f0deb9e85011a23ea4a1b2d52", "filename": "src/test/run-pass/issue-13763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-13763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13763.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n+#![feature(num_bits_bytes)]\n \n use std::u8;\n "}, {"sha": "ff9a17323e43322aa2e2875e5d07fb8a1979d227", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n+#![feature(iter_arith)]\n \n fn main() {\n     let x: [u64; 3] = [1, 2, 3];"}, {"sha": "1f96f071e9d111ea3ce2389296503ddd1ea18c6a", "filename": "src/test/run-pass/issue-16530.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-16530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-16530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16530.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(hash)]\n+#![feature(hash_default)]\n \n use std::hash::{SipHasher, hash};\n "}, {"sha": "227c81e2766fdccc6e3347a591c2a387c90ef444", "filename": "src/test/run-pass/issue-17897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17897.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, std_misc)]\n+#![feature(thunk)]\n \n use std::thunk::Thunk;\n "}, {"sha": "5bcb052282c19b8257ea47fc37adccd387a589e4", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, std_misc)]\n+#![feature(thunk)]\n \n use std::thunk::Thunk;\n "}, {"sha": "9e8bfc884c984ecd9582eb92b3338e318c2ff8c5", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n+#![feature(core_intrinsics)]\n \n struct NT(str);\n struct DST { a: u32, b: str }"}, {"sha": "eeca4498328d36bbba7c6df54eec275dc999afa8", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(std_misc)]\n+#![feature(thunk)]\n \n use std::thread::Builder;\n use std::thunk::Thunk;"}, {"sha": "a8abbda32bdfc23a24915783aa2088c6212a04c7", "filename": "src/test/run-pass/issue-23037.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-23037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-23037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23037.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(core_simd)]\n \n use std::simd::i32x4;\n fn main() {"}, {"sha": "4b6d593f592d970b812bc0ca043e17ebd50849f4", "filename": "src/test/run-pass/issue-23550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23550.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(core_intrinsics)]\n #![allow(warnings)]\n \n use std::intrinsics;"}, {"sha": "8ea0804af18bf5499cf3bb4c11df8dbddb3c8c65", "filename": "src/test/run-pass/issue-6898.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6898.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,9 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::intrinsics;\n+use std::mem;\n \n /// Returns the size of a type\n pub fn size_of<T>() -> usize {\n@@ -32,7 +30,7 @@ pub trait TypeInfo {\n impl<T> TypeInfo for T {\n     /// The size of the type in bytes.\n     fn size_of(_lame_type_hint: Option<T>) -> usize {\n-        unsafe { intrinsics::size_of::<T>() }\n+        mem::size_of::<T>()\n     }\n \n     /// Returns the size of the type of `self` in bytes."}, {"sha": "e3351bda3354d93bc124bb2d423d20d920adccc8", "filename": "src/test/run-pass/iter-cloned-type-inference.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-cloned-type-inference.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,8 +11,7 @@\n // Test to see that the element type of .cloned() can be inferred\n // properly. Previously this would fail to deduce the type of `sum`.\n \n-\n-#![feature(core)]\n+#![feature(iter_arith)]\n \n fn square_sum(v: &[i64]) -> i64 {\n     let sum: i64 = v.iter().cloned().sum();"}, {"sha": "e6eaefb0490806e7c4c653cc5472c8f5ac10ef8d", "filename": "src/test/run-pass/linkage-visibility.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage-visibility.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -13,8 +13,6 @@\n // ignore-windows: std::dynamic_lib does not work on Windows well\n // ignore-musl\n \n-#![feature(std_misc)]\n-\n extern crate linkage_visibility as foo;\n \n pub fn main() {"}, {"sha": "405a3549cf18c762522cc1638a1f188888f61fbd", "filename": "src/test/run-pass/method-mut-self-modifies-mut-slice-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-mut-self-modifies-mut-slice-lvalue.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -13,7 +13,7 @@\n // temporary. Issue #19147.\n \n \n-#![feature(core)]\n+#![feature(slice_bytes)]\n \n use std::slice;\n "}, {"sha": "62bde45cd3dc0c8675c6577d7c23d24ab8110970", "filename": "src/test/run-pass/minmax-stability-issue-23687.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fminmax-stability-issue-23687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fminmax-stability-issue-23687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fminmax-stability-issue-23687.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(iter_min_max, cmp_partial, iter_cmp)]\n+\n use std::fmt::Debug;\n use std::cmp::{self, PartialOrd, Ordering};\n use std::iter::MinMaxResult::MinMax;"}, {"sha": "b5a54a90ae758ef778d7ebbbdb372b45819f21b5", "filename": "src/test/run-pass/new-box-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box-syntax.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -13,8 +13,8 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-#![allow(unknown_features)]\n-#![feature(box_syntax, alloc)]\n+#![allow(warnings)]\n+#![feature(box_syntax, box_heap)]\n \n // Tests that the new `box` syntax works with unique pointers.\n "}, {"sha": "a9bd967ca765a61a335c012f26d223432cb7af1d", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -13,7 +13,7 @@\n // Ideally this would be revised to use no_std, but for now it serves\n // well enough to reproduce (and illustrate) the bug from #16687.\n \n-#![feature(alloc)]\n+#![feature(heap_api, alloc, oom)]\n \n extern crate alloc;\n "}, {"sha": "2b2dcb6efb5d46af99a7c659d87b69e2e2085f56", "filename": "src/test/run-pass/running-with-no-runtime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frunning-with-no-runtime.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(start, std_misc)]\n+#![feature(catch_panic, start)]\n \n use std::ffi::CStr;\n use std::process::{Command, Output};\n-use std::rt::unwind::try;\n+use std::thread;\n use std::str;\n \n #[start]\n@@ -22,8 +22,8 @@ fn start(argc: isize, argv: *const *const u8) -> isize {\n             match **argv.offset(1) as char {\n                 '1' => {}\n                 '2' => println!(\"foo\"),\n-                '3' => assert!(try(|| {}).is_ok()),\n-                '4' => assert!(try(|| panic!()).is_err()),\n+                '3' => assert!(thread::catch_panic(|| {}).is_ok()),\n+                '4' => assert!(thread::catch_panic(|| panic!()).is_err()),\n                 '5' => assert!(Command::new(\"test\").spawn().is_err()),\n                 _ => panic!()\n             }"}, {"sha": "e40f4d30eb9785e080894856ba48670a10059e86", "filename": "src/test/run-pass/send-is-not-static-par-for.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n #![feature(core, std_misc, scoped)]\n use std::thread;\n use std::sync::Mutex;"}, {"sha": "4f5119f6a84e928e9a4b4a43aa2f95e3a1fbb0e3", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(core)]\n+#![feature(core_simd)]\n \n use std::simd::{i32x4, f32x4, u32x4};\n "}, {"sha": "c3eef0f9c3217a0e01fee6f2d7b921560a69eca4", "filename": "src/test/run-pass/simd-issue-10604.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,8 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-#![feature(simd)]\n+#![feature(core_simd)]\n \n pub fn main() {\n     let _o = None::<std::simd::i32x4>;"}, {"sha": "ab22b820503af156b603fd5d619dc43ab4d6d717", "filename": "src/test/run-pass/slice-of-zero-size-elements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fslice-of-zero-size-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fslice-of-zero-size-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice-of-zero-size-elements.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: -C debug-assertions\n \n-#![feature(core)]\n+#![feature(iter_to_slice)]\n \n use std::slice;\n "}, {"sha": "b8e05c06c83b77387d4dfab97822ff6a2fff9f4d", "filename": "src/test/run-pass/std-sync-right-kind-impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstd-sync-right-kind-impls.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,7 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(std_misc, alloc, static_condvar)]\n+#![feature(static_mutex, static_rwlock, static_condvar)]\n+#![feature(arc_weak, semaphore)]\n \n use std::sync;\n "}, {"sha": "0ee04c4463b0fec858c485aaf82392b1a60d6b9a", "filename": "src/test/run-pass/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -10,9 +10,9 @@\n \n // pretty-expanded FIXME #23616\n \n-#![allow(unused_mut)]\n+#![allow(warnings)]\n #![feature(collections)]\n-#![feature(collections_drain)]\n+#![feature(drain, enumset, collections_bound, btree_range, vecmap)]\n \n extern crate collections;\n "}, {"sha": "8dda2365ac704ce41ab9f698d60a938770748d1a", "filename": "src/test/run-pass/sync-send-iterators-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcore.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -18,6 +18,7 @@\n #![feature(iter_once)]\n \n use std::iter::{empty, once, range_inclusive, repeat, Unfold};\n+>>>>>>> Fallout in tests and docs from feature renamings\n \n fn is_sync<T>(_: T) where T: Sync {}\n fn is_send<T>(_: T) where T: Send {}"}, {"sha": "4a169c0a384aa2bcf8bebe4f476447ef956544c4", "filename": "src/test/run-pass/tydesc-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ftydesc-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftydesc-name.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(core)]\n+#![feature(core_intrinsics)]\n \n use std::intrinsics::type_name;\n "}, {"sha": "feb43dfb9ade22891fba2771945bf4692915672d", "filename": "src/test/run-pass/typeid-intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -12,7 +12,7 @@\n // aux-build:typeid-intrinsic2.rs\n \n \n-#![feature(hash, core)]\n+#![feature(hash_default, core_intrinsics)]\n \n extern crate typeid_intrinsic as other1;\n extern crate typeid_intrinsic2 as other2;"}, {"sha": "27f11d0411c47f11f194b4a1d765d13a196318ba", "filename": "src/test/run-pass/ufcs-polymorphic-paths.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n \n-#![feature(collections, rand, into_cow)]\n+#![feature(collections, rand, into_cow, map_in_place, bitvec)]\n+#![allow(warnings)]\n \n use std::borrow::{Cow, IntoCow};\n use std::collections::BitVec;"}, {"sha": "9d5383fe0603fd70d59ee842f4f2640ac7a3233d", "filename": "src/test/run-pass/unfold-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(iter_unfold)]\n \n use std::iter::Unfold;\n "}, {"sha": "6d378cb294e328d46ff684fd865012207c838d76", "filename": "src/test/run-pass/unsized3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized3.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -11,8 +11,8 @@\n // Test structs with always-unsized fields.\n \n \n-#![allow(unknown_features)]\n-#![feature(box_syntax, core)]\n+#![allow(warnings)]\n+#![feature(box_syntax, unsize, raw)]\n \n use std::mem;\n use std::raw;"}, {"sha": "25c1cfe1f4d427678fd2595e6dac9f8e5e87496f", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(collections)]\n+#![feature(vec_push_all)]\n \n use std::vec;\n "}, {"sha": "cf3a8796d32c96e4480259c1fb08cb1bf5dd7037", "filename": "src/test/run-pass/vec-macro-no-std.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-macro-no-std.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n-\n-#![feature(lang_items, start, no_std, core, libc, collections)]\n+#![feature(lang_items, start, no_std, core, core_slice_ext, libc, collections)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "42b05aeea2910a73de32b8872c3a9c0cd2b0120b", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(rand, core)]\n+#![feature(rand, num_bits_bytes)]\n #![feature(const_fn)]\n \n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "48eea1206230ec5349a3254655de3a705034ec29", "filename": "src/test/run-pass/wrapping-int-api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fwrapping-int-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1a965cf54ce65fc43b535c27029ce183214063/src%2Ftest%2Frun-pass%2Fwrapping-int-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwrapping-int-api.rs?ref=ce1a965cf54ce65fc43b535c27029ce183214063", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n+#![feature(num_wrapping)]\n \n // Test inherent wrapping_* methods for {i,u}{size,8,16,32,64}.\n "}]}