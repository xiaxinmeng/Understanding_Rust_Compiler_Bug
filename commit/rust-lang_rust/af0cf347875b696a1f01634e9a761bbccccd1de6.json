{"sha": "af0cf347875b696a1f01634e9a761bbccccd1de6", "node_id": "C_kwDOAAsO6NoAKGFmMGNmMzQ3ODc1YjY5NmExZjAxNjM0ZTlhNzYxYmJjY2NjZDFkZTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-28T09:42:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-28T09:42:38Z"}, "message": "Rollup merge of #90896 - jhpratt:stabilize_const_maybe_uninit, r=oli-obk\n\nStabilize some `MaybeUninit` behavior as const\n\nThis stabilizes the `MaybeUninit::as_ptr`, `MaybeUninit::assume_init`, and `MaybeUninit::assume_init_ref` as `const fn`. `MaybeUninit::as_mut_ptr` has been moved to a new flag: `const_maybe_uninit_as_mut_ptr`, which is blocked on #57349. `MaybeUninit::slice_assume_init_ref` can be `const fn` when the method is stabilized in general.\n\nThe relevant intrinsic has been stabilized as `const` as well, though this isn't user-visible. Due to the seemingly unrelated feature name I performed `rg const_assert_type` and found no other instances of it being used.\n\nr? `@oli-obk`\n\n`@rustbot` label: +A-const-fn +S-waiting-on-review +T-libs-api", "tree": {"sha": "fe55be6c1bc0f9750f271b703106e5546deaa030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe55be6c1bc0f9750f271b703106e5546deaa030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0cf347875b696a1f01634e9a761bbccccd1de6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJho08PCRBK7hj4Ov3rIwAAEugIAELGLTNvP6I3rDZWn3U/JKne\nkUUVnezIT4NlZOeSnQgRJ77JlcGyiDvjRyXnZe3a3v6jsWKveSxRhz4ovRwFN/NC\nJVPdA+q6ScjrJK8k8htkn6VxxTj+nFyyUvLidlEKDJTF0NNlsXQW8dLjLlSPuI1b\nNHmaSDtphxZwa3uf7maP9jz6t3RgbyNFO/dSI4NcpYuFcYdezv3w6ylhBScDBdxk\n6umFbmBGuieBj5IMJKNJQgvVp7e4hRMyVADRpxFTBuR4KPT42/PEyFR+APoj6hgS\nzknNStg/NKigUD5Z75DOl5RxMIaMu5EudHZOya5iARtwNHKSaL6fewSr5C7j08c=\n=QTGm\n-----END PGP SIGNATURE-----\n", "payload": "tree fe55be6c1bc0f9750f271b703106e5546deaa030\nparent 27d5935df18d7035c9bd8dc5c1dfbbad6ac59793\nparent 44b5b838d2a58fb683324e2336a6766d450b0626\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638092558 +0100\ncommitter GitHub <noreply@github.com> 1638092558 +0100\n\nRollup merge of #90896 - jhpratt:stabilize_const_maybe_uninit, r=oli-obk\n\nStabilize some `MaybeUninit` behavior as const\n\nThis stabilizes the `MaybeUninit::as_ptr`, `MaybeUninit::assume_init`, and `MaybeUninit::assume_init_ref` as `const fn`. `MaybeUninit::as_mut_ptr` has been moved to a new flag: `const_maybe_uninit_as_mut_ptr`, which is blocked on #57349. `MaybeUninit::slice_assume_init_ref` can be `const fn` when the method is stabilized in general.\n\nThe relevant intrinsic has been stabilized as `const` as well, though this isn't user-visible. Due to the seemingly unrelated feature name I performed `rg const_assert_type` and found no other instances of it being used.\n\nr? `@oli-obk`\n\n`@rustbot` label: +A-const-fn +S-waiting-on-review +T-libs-api\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0cf347875b696a1f01634e9a761bbccccd1de6", "html_url": "https://github.com/rust-lang/rust/commit/af0cf347875b696a1f01634e9a761bbccccd1de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0cf347875b696a1f01634e9a761bbccccd1de6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d5935df18d7035c9bd8dc5c1dfbbad6ac59793", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d5935df18d7035c9bd8dc5c1dfbbad6ac59793", "html_url": "https://github.com/rust-lang/rust/commit/27d5935df18d7035c9bd8dc5c1dfbbad6ac59793"}, {"sha": "44b5b838d2a58fb683324e2336a6766d450b0626", "url": "https://api.github.com/repos/rust-lang/rust/commits/44b5b838d2a58fb683324e2336a6766d450b0626", "html_url": "https://github.com/rust-lang/rust/commit/44b5b838d2a58fb683324e2336a6766d450b0626"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "23b28766d70ea78cae57724116f9f61de749f3c2", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=af0cf347875b696a1f01634e9a761bbccccd1de6", "patch": "@@ -853,7 +853,7 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[rustc_const_unstable(feature = \"const_assert_type\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_assert_type\", since = \"1.59.0\")]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit"}, {"sha": "102e6f89eb82a52db3d87322e1754db978433c61", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=af0cf347875b696a1f01634e9a761bbccccd1de6", "patch": "@@ -101,7 +101,6 @@\n #![feature(const_align_of_val)]\n #![feature(const_alloc_layout)]\n #![feature(const_arguments_as_str)]\n-#![feature(const_assert_type)]\n #![feature(const_bigint_helper_methods)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n@@ -117,7 +116,7 @@\n #![feature(const_intrinsic_copy)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_likely)]\n-#![feature(const_maybe_uninit_as_ptr)]\n+#![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_num_from_num)]\n #![feature(const_ops)]"}, {"sha": "a6e31452edcfcc04840919f325bb18cf1b33bce9", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=af0cf347875b696a1f01634e9a761bbccccd1de6", "patch": "@@ -528,7 +528,7 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_as_ptr\", since = \"1.59.0\")]\n     #[inline(always)]\n     pub const fn as_ptr(&self) -> *const T {\n         // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n@@ -567,7 +567,7 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_mut_ptr\", issue = \"75251\")]\n     #[inline(always)]\n     pub const fn as_mut_ptr(&mut self) -> *mut T {\n         // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n@@ -620,7 +620,7 @@ impl<T> MaybeUninit<T> {\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     #[track_caller]\n@@ -788,7 +788,8 @@ impl<T> MaybeUninit<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_raw_ptr_deref))]\n     #[inline(always)]\n     pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n@@ -968,7 +969,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_ref`]: MaybeUninit::assume_init_ref\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub const unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n         // SAFETY: casting slice to a `*const [T]` is safe since the caller guarantees that"}, {"sha": "00d0259321d13da0b5158bec8f8de17600235ced", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=af0cf347875b696a1f01634e9a761bbccccd1de6", "patch": "@@ -10,6 +10,7 @@\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n+#![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]"}, {"sha": "3b13dc0832fa4963905bc842c8518376c4744ed6", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0cf347875b696a1f01634e9a761bbccccd1de6/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=af0cf347875b696a1f01634e9a761bbccccd1de6", "patch": "@@ -269,3 +269,35 @@ fn uninit_const_assume_init_read() {\n     const FOO: u32 = unsafe { MaybeUninit::new(42).assume_init_read() };\n     assert_eq!(FOO, 42);\n }\n+\n+#[test]\n+fn const_maybe_uninit() {\n+    use std::ptr;\n+\n+    #[derive(Debug, PartialEq)]\n+    struct Foo {\n+        x: u8,\n+        y: u8,\n+    }\n+\n+    const FIELD_BY_FIELD: Foo = unsafe {\n+        let mut val = MaybeUninit::uninit();\n+        init_y(&mut val); // order shouldn't matter\n+        init_x(&mut val);\n+        val.assume_init()\n+    };\n+\n+    const fn init_x(foo: &mut MaybeUninit<Foo>) {\n+        unsafe {\n+            *ptr::addr_of_mut!((*foo.as_mut_ptr()).x) = 1;\n+        }\n+    }\n+\n+    const fn init_y(foo: &mut MaybeUninit<Foo>) {\n+        unsafe {\n+            *ptr::addr_of_mut!((*foo.as_mut_ptr()).y) = 2;\n+        }\n+    }\n+\n+    assert_eq!(FIELD_BY_FIELD, Foo { x: 1, y: 2 });\n+}"}]}