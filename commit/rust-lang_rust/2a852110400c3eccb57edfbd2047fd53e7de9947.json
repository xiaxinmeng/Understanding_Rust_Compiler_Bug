{"sha": "2a852110400c3eccb57edfbd2047fd53e7de9947", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODUyMTEwNDAwYzNlY2NiNTdlZGZiZDIwNDdmZDUzZTdkZTk5NDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-27T09:06:03Z"}, "message": "Make sufficiently old or low-impact compatibility lints deny-by-default", "tree": {"sha": "05ebaccbf083dd6149f7b4093af339dd015e4cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ebaccbf083dd6149f7b4093af339dd015e4cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a852110400c3eccb57edfbd2047fd53e7de9947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a852110400c3eccb57edfbd2047fd53e7de9947", "html_url": "https://github.com/rust-lang/rust/commit/2a852110400c3eccb57edfbd2047fd53e7de9947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a852110400c3eccb57edfbd2047fd53e7de9947/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc283c9487b4607d0a97635dca8c8812b886047b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc283c9487b4607d0a97635dca8c8812b886047b", "html_url": "https://github.com/rust-lang/rust/commit/bc283c9487b4607d0a97635dca8c8812b886047b"}], "stats": {"total": 78, "additions": 32, "deletions": 46}, "files": [{"sha": "4ef42bb68eb6afab1c36c9ff75671d609268b0da", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -120,25 +120,25 @@ declare_lint! {\n \n declare_lint! {\n     pub INACCESSIBLE_EXTERN_CRATE,\n-    Warn,\n+    Deny,\n     \"use of inaccessible extern crate erroneously allowed\"\n }\n \n declare_lint! {\n     pub INVALID_TYPE_PARAM_DEFAULT,\n-    Warn,\n+    Deny,\n     \"type parameter default erroneously allowed in invalid location\"\n }\n \n declare_lint! {\n     pub ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n-    Warn,\n+    Deny,\n     \"floating-point constants cannot be used in patterns\"\n }\n \n declare_lint! {\n     pub ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n-    Warn,\n+    Deny,\n     \"constants of struct or enum type can only be used in a pattern if \\\n      the struct or enum has `#[derive(PartialEq, Eq)]`\"\n }\n@@ -164,7 +164,7 @@ declare_lint! {\n \n declare_lint! {\n     pub OVERLAPPING_INHERENT_IMPLS,\n-    Warn,\n+    Deny,\n     \"two overlapping inherent impls define an item with the same name were erroneously allowed\"\n }\n \n@@ -176,13 +176,13 @@ declare_lint! {\n \n declare_lint! {\n     pub SUPER_OR_SELF_IN_GLOBAL_PATH,\n-    Warn,\n+    Deny,\n     \"detects super or self keywords at the beginning of global path\"\n }\n \n declare_lint! {\n     pub LIFETIME_UNDERSCORE,\n-    Warn,\n+    Deny,\n     \"lifetimes or labels named `'_` were erroneously allowed\"\n }\n "}, {"sha": "092638cdee260c72e4924a434eaf31e637e69e5e", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -76,8 +76,6 @@ Not-a-Number (NaN) values cannot be compared for equality and hence can never\n match the input to a match expression. So, the following will not compile:\n \n ```compile_fail\n-#![deny(illegal_floating_point_constant_pattern)]\n-\n const NAN: f32 = 0.0 / 0.0;\n \n let number = 0.1f32;"}, {"sha": "061f6318c2a2ee1a634e0f4ea876bf0edd509eeb", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -174,43 +174,43 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INACCESSIBLE_EXTERN_CRATE),\n-            reference: \"PR 31362 <https://github.com/rust-lang/rust/pull/31362>\",\n+            reference: \"issue #36886 <https://github.com/rust-lang/rust/issues/36886>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n-            reference: \"PR 30724 <https://github.com/rust-lang/rust/pull/30724>\",\n+            reference: \"issue #36887 <https://github.com/rust-lang/rust/issues/36887>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SUPER_OR_SELF_IN_GLOBAL_PATH),\n-            reference: \"PR #32403 <https://github.com/rust-lang/rust/pull/32403>\",\n+            reference: \"issue #36888 <https://github.com/rust-lang/rust/issues/36888>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(TRANSMUTE_FROM_FN_ITEM_TYPES),\n             reference: \"issue #19925 <https://github.com/rust-lang/rust/issues/19925>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(OVERLAPPING_INHERENT_IMPLS),\n-            reference: \"issue #22889 <https://github.com/rust-lang/rust/issues/22889>\",\n+            reference: \"issue #36889 <https://github.com/rust-lang/rust/issues/36889>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN),\n-            reference: \"RFC 1445 <https://github.com/rust-lang/rfcs/pull/1445>\",\n+            reference: \"issue #36890 <https://github.com/rust-lang/rust/issues/36890>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n-            reference: \"RFC 1445 <https://github.com/rust-lang/rfcs/pull/1445>\",\n+            reference: \"issue #36891 <https://github.com/rust-lang/rust/issues/36891>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(HR_LIFETIME_IN_ASSOC_TYPE),\n             reference: \"issue #33685 <https://github.com/rust-lang/rust/issues/33685>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(LIFETIME_UNDERSCORE),\n-            reference: \"RFC 1177 <https://github.com/rust-lang/rfcs/pull/1177>\",\n+            reference: \"issue #36892 <https://github.com/rust-lang/rust/issues/36892>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n-            reference: \"issue 36247 <https://github.com/rust-lang/rust/issues/35112>\",\n+            reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/35112>\",\n         },\n         ]);\n "}, {"sha": "81e0cb249f382f91250f451ec60444d5dcc29637", "filename": "src/test/compile-fail/extern-crate-visibility.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-crate-visibility.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-#![allow(unused_imports)]\n+#![allow(unused)]\n \n mod foo {\n     extern crate core;\n@@ -19,11 +17,11 @@ mod foo {\n // Check that private crates can be used from outside their modules, albeit with warnings\n use foo::core; //~ WARN extern crate `core` is private\n //~^ WARN this was previously accepted by the compiler but is being phased out\n-use foo::core::cell; //~ WARN extern crate `core` is private\n+use foo::core::cell; //~ ERROR extern crate `core` is private\n //~^ WARN this was previously accepted by the compiler but is being phased out\n \n fn f() {\n-    foo::core::cell::Cell::new(0); //~ WARN extern crate `core` is private\n+    foo::core::cell::Cell::new(0); //~ ERROR extern crate `core` is private\n     //~^ WARN this was previously accepted by the compiler but is being phased out\n \n     use foo::*;\n@@ -39,5 +37,4 @@ mod baz {\n     use self::core::cell; // Check that public extern crates are glob imported\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() {}"}, {"sha": "00d41244639f55f0b42ae92e6d4cc1f3dd5f623c", "filename": "src/test/compile-fail/inherent-overlap.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Finherent-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Finherent-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finherent-overlap.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -11,13 +11,12 @@\n // Test that you cannot define items with the same name in overlapping inherent\n // impl blocks.\n \n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n+#![allow(unused)]\n \n struct Foo;\n \n impl Foo {\n-    fn id() {} //~ WARN duplicate definitions\n+    fn id() {} //~ ERROR duplicate definitions\n     //~^ WARN previously accepted\n }\n \n@@ -28,7 +27,7 @@ impl Foo {\n struct Bar<T>(T);\n \n impl<T> Bar<T> {\n-    fn bar(&self) {} //~ WARN duplicate definitions\n+    fn bar(&self) {} //~ ERROR duplicate definitions\n     //~^ WARN previously accepted\n }\n \n@@ -39,13 +38,12 @@ impl Bar<u32> {\n struct Baz<T>(T);\n \n impl<T: Copy> Baz<T> {\n-    fn baz(&self) {} //~ WARN duplicate definitions\n+    fn baz(&self) {} //~ ERROR duplicate definitions\n     //~^ WARN previously accepted\n }\n \n impl<T> Baz<Vec<T>> {\n     fn baz(&self) {}\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() {}"}, {"sha": "f7d3ce60c66ccf3573ccfc73323c325decfb8fa6", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -8,16 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-#![feature(slice_patterns)]\n-#![allow(dead_code)]\n-#![deny(illegal_floating_point_constant_pattern)]\n-\n // Matching against NaN should result in a warning\n \n+#![feature(slice_patterns)]\n+#![allow(unused)]\n+\n use std::f64::NAN;\n \n-#[rustc_error]\n fn main() {\n     let x = NAN;\n     match x {"}, {"sha": "b768009132ca919f3a046a6c1fb32b8c8ae58f05", "filename": "src/test/compile-fail/lifetime-underscore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-underscore.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(lifetime_underscore)]\n-\n fn _f<'_>() //~ ERROR invalid lifetime name `'_`\n //~^ WARN this was previously accepted\n     -> &'_ u8 //~ ERROR invalid lifetime name `'_`"}, {"sha": "3fa0712fb4ca394a7565914e2bec63a7927d57da", "filename": "src/test/compile-fail/use-super-global-path.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-super-global-path.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -8,22 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-#![allow(unused_imports, dead_code)]\n+#![allow(unused)]\n \n struct S;\n struct Z;\n \n mod foo {\n-    use ::super::{S, Z}; //~ WARN global paths cannot start with `super`\n+    use ::super::{S, Z}; //~ ERROR global paths cannot start with `super`\n     //~^ WARN this was previously accepted by the compiler but is being phased out\n \n     pub fn g() {\n-        use ::super::main; //~ WARN global paths cannot start with `super`\n+        use ::super::main; //~ ERROR global paths cannot start with `super`\n         //~^ WARN this was previously accepted by the compiler but is being phased out\n         main();\n     }\n }\n \n-#[rustc_error]\n-fn main() { foo::g(); } //~ ERROR compilation successful\n+fn main() { foo::g(); }"}, {"sha": "c61133f795b345c36676868fb8815d9d86a0b5ef", "filename": "src/test/run-pass/type-macros-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a852110400c3eccb57edfbd2047fd53e7de9947/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs?ref=2a852110400c3eccb57edfbd2047fd53e7de9947", "patch": "@@ -23,7 +23,7 @@ fn issue_36540() {\n \n     let x: m!() = m!();\n     std::cell::Cell::<m!()>::new(m!());\n-    impl<T = m!()> std::ops::Index<m!()> for Trait<(m!(), T)>\n+    impl<T> std::ops::Index<m!()> for Trait<(m!(), T)>\n         where T: Trait<m!()>\n     {\n         type Output = m!();"}]}