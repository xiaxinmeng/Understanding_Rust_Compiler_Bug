{"sha": "70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYTY1ZTlkMWZmYTZjM2UzOWJiMGVmZjNjNjUzZjYzMjllMmYxNmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-15T14:05:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Handle in resolve.", "tree": {"sha": "558df17bed9e94f6fa7b8ac16c07c45877f5370b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/558df17bed9e94f6fa7b8ac16c07c45877f5370b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b", "html_url": "https://github.com/rust-lang/rust/commit/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dff1e379fc55429ea9a4794634e02c17cebee603", "url": "https://api.github.com/repos/rust-lang/rust/commits/dff1e379fc55429ea9a4794634e02c17cebee603", "html_url": "https://github.com/rust-lang/rust/commit/dff1e379fc55429ea9a4794634e02c17cebee603"}], "stats": {"total": 62, "additions": 24, "deletions": 38}, "files": [{"sha": "fdef707e347caca77a4de0c39811a3c5f809cc69", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b", "patch": "@@ -485,8 +485,8 @@ type BindingMap = FxHashMap<Ident, BindingInfo>;\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum PatternSource {\n     Match,\n-    IfLet,\n-    WhileLet,\n+    // FIXME(54883): Consider fusing with `Let` below once let-statements support or-patterns.\n+    LetExpr,\n     Let,\n     For,\n     FnParam,\n@@ -496,9 +496,7 @@ impl PatternSource {\n     fn descr(self) -> &'static str {\n         match self {\n             PatternSource::Match => \"match binding\",\n-            PatternSource::IfLet => \"if let binding\",\n-            PatternSource::WhileLet => \"while let binding\",\n-            PatternSource::Let => \"let binding\",\n+            PatternSource::Let | PatternSource::LetExpr => \"let binding\",\n             PatternSource::For => \"for binding\",\n             PatternSource::FnParam => \"function parameter\",\n         }\n@@ -3057,13 +3055,7 @@ impl<'a> Resolver<'a> {\n     fn resolve_arm(&mut self, arm: &Arm) {\n         self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n \n-        let mut bindings_list = FxHashMap::default();\n-        for pattern in &arm.pats {\n-            self.resolve_pattern(&pattern, PatternSource::Match, &mut bindings_list);\n-        }\n-\n-        // This has to happen *after* we determine which pat_idents are variants.\n-        self.check_consistent_bindings(&arm.pats);\n+        self.resolve_pats(&arm.pats, PatternSource::Match);\n \n         if let Some(ast::Guard::If(ref expr)) = arm.guard {\n             self.visit_expr(expr)\n@@ -3073,6 +3065,16 @@ impl<'a> Resolver<'a> {\n         self.ribs[ValueNS].pop();\n     }\n \n+    /// Arising from `source`, resolve a sequence of patterns (top level or-patterns).\n+    fn resolve_pats(&mut self, pats: &[P<Pat>], source: PatternSource) {\n+        let mut bindings_list = FxHashMap::default();\n+        for pat in pats {\n+            self.resolve_pattern(pat, source, &mut bindings_list);\n+        }\n+        // This has to happen *after* we determine which pat_idents are variants\n+        self.check_consistent_bindings(pats);\n+    }\n+\n     fn resolve_block(&mut self, block: &Block) {\n         debug!(\"(resolving block) entering block\");\n         // Move down in the graph, if there's an anonymous module rooted here.\n@@ -3151,8 +3153,7 @@ impl<'a> Resolver<'a> {\n                 );\n             }\n             Some(..) if pat_src == PatternSource::Match ||\n-                        pat_src == PatternSource::IfLet ||\n-                        pat_src == PatternSource::WhileLet => {\n+                        pat_src == PatternSource::LetExpr => {\n                 // `Variant1(a) | Variant2(a)`, ok\n                 // Reuse definition from the first `a`.\n                 res = self.ribs[ValueNS].last_mut().unwrap().bindings[&ident];\n@@ -4345,41 +4346,26 @@ impl<'a> Resolver<'a> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprKind::IfLet(ref pats, ref subexpression, ref if_block, ref optional_else) => {\n-                self.visit_expr(subexpression);\n+            ExprKind::Let(ref pats, ref scrutinee) => {\n+                self.visit_expr(scrutinee);\n+                self.resolve_pats(pats, PatternSource::LetExpr);\n+            }\n \n+            ExprKind::If(ref cond, ref then, ref opt_else) => {\n                 self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n-                let mut bindings_list = FxHashMap::default();\n-                for pat in pats {\n-                    self.resolve_pattern(pat, PatternSource::IfLet, &mut bindings_list);\n-                }\n-                // This has to happen *after* we determine which pat_idents are variants\n-                self.check_consistent_bindings(pats);\n-                self.visit_block(if_block);\n+                self.visit_expr(cond);\n+                self.visit_block(then);\n                 self.ribs[ValueNS].pop();\n \n-                optional_else.as_ref().map(|expr| self.visit_expr(expr));\n+                opt_else.as_ref().map(|expr| self.visit_expr(expr));\n             }\n \n             ExprKind::Loop(ref block, label) => self.resolve_labeled_block(label, expr.id, &block),\n \n             ExprKind::While(ref subexpression, ref block, label) => {\n                 self.with_resolved_label(label, expr.id, |this| {\n-                    this.visit_expr(subexpression);\n-                    this.visit_block(block);\n-                });\n-            }\n-\n-            ExprKind::WhileLet(ref pats, ref subexpression, ref block, label) => {\n-                self.with_resolved_label(label, expr.id, |this| {\n-                    this.visit_expr(subexpression);\n                     this.ribs[ValueNS].push(Rib::new(NormalRibKind));\n-                    let mut bindings_list = FxHashMap::default();\n-                    for pat in pats {\n-                        this.resolve_pattern(pat, PatternSource::WhileLet, &mut bindings_list);\n-                    }\n-                    // This has to happen *after* we determine which pat_idents are variants.\n-                    this.check_consistent_bindings(pats);\n+                    this.visit_expr(subexpression);\n                     this.visit_block(block);\n                     this.ribs[ValueNS].pop();\n                 });"}]}