{"sha": "f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDBkNTExMDExYjcwNzFjNjIxYWMzZjdjNjRjNGFhZWM3ZjJkZmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-24T20:55:08Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-24T20:55:08Z"}, "message": "hir_expand::db: reduce fn visibility", "tree": {"sha": "7953f600686d62785e08fe8dfa2753572770e213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7953f600686d62785e08fe8dfa2753572770e213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb", "html_url": "https://github.com/rust-lang/rust/commit/f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a3bb19d3274824d6648117ab32ac59358ff1f14", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3bb19d3274824d6648117ab32ac59358ff1f14", "html_url": "https://github.com/rust-lang/rust/commit/9a3bb19d3274824d6648117ab32ac59358ff1f14"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "36d3307a1fee09316796e337bd8e89b1d030126a", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=f9d0d511011b7071c621ac3f7c64c4aaec7f2dfb", "patch": "@@ -138,16 +138,13 @@ pub fn expand_hypothetical(\n     Some((node.syntax_node(), token))\n }\n \n-pub(crate) fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n+fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n     let map =\n         db.parse_or_expand(file_id).map_or_else(AstIdMap::default, |it| AstIdMap::from_source(&it));\n     Arc::new(map)\n }\n \n-pub(crate) fn macro_def(\n-    db: &dyn AstDatabase,\n-    id: MacroDefId,\n-) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n+fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n     match id.kind {\n         MacroDefKind::Declarative => {\n             let macro_call = id.ast_id?.to_node(db);\n@@ -178,7 +175,7 @@ pub(crate) fn macro_def(\n     }\n }\n \n-pub(crate) fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n+fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     let id = match id {\n         MacroCallId::LazyMacro(id) => id,\n         MacroCallId::EagerMacro(_id) => {\n@@ -191,16 +188,13 @@ pub(crate) fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<Gr\n     Some(arg.green().clone())\n }\n \n-pub(crate) fn macro_arg(\n-    db: &dyn AstDatabase,\n-    id: MacroCallId,\n-) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {\n+fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {\n     let arg = db.macro_arg_text(id)?;\n     let (tt, tmap) = mbe::syntax_node_to_token_tree(&SyntaxNode::new_root(arg))?;\n     Some(Arc::new((tt, tmap)))\n }\n \n-pub(crate) fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> MacroResult<Arc<tt::Subtree>> {\n+fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> MacroResult<Arc<tt::Subtree>> {\n     macro_expand_with_arg(db, id, None)\n }\n \n@@ -258,7 +252,7 @@ fn macro_expand_with_arg(\n     MacroResult { value: Some(Arc::new(tt)), error: err.map(|e| format!(\"{:?}\", e)) }\n }\n \n-pub(crate) fn expand_proc_macro(\n+fn expand_proc_macro(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n@@ -285,7 +279,7 @@ pub(crate) fn expand_proc_macro(\n     expander.expand(db, lazy_id, &macro_arg.0)\n }\n \n-pub(crate) fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n+fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n     match file_id.0 {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n@@ -294,14 +288,14 @@ pub(crate) fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Optio\n     }\n }\n \n-pub(crate) fn parse_macro(\n+fn parse_macro(\n     db: &dyn AstDatabase,\n     macro_file: MacroFile,\n ) -> MacroResult<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)> {\n     parse_macro_with_arg(db, macro_file, None)\n }\n \n-pub fn parse_macro_with_arg(\n+fn parse_macro_with_arg(\n     db: &dyn AstDatabase,\n     macro_file: MacroFile,\n     arg: Option<Arc<(tt::Subtree, mbe::TokenMap)>>,"}]}