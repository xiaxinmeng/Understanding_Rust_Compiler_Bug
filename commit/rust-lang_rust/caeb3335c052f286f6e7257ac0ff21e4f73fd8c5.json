{"sha": "caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZWIzMzM1YzA1MmYyODZmNmU3MjU3YWMwZmYyMWU0ZjczZmQ4YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-17T12:02:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-17T12:02:29Z"}, "message": "Auto merge of #80114 - GuillaumeGomez:rollup-gszr5kn, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #80006 (BTreeMap: more expressive local variables in merge)\n - #80022 (BTreeSet: simplify implementation of pop_first/pop_last)\n - #80035 (Optimization for bool's PartialOrd impl)\n - #80040 (Always run intrinsics lowering pass)\n - #80047 (Use more symbols in rustdoc)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "af7f9872e26d1eea88ea3703e7efad183cc9d4c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7f9872e26d1eea88ea3703e7efad183cc9d4c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "html_url": "https://github.com/rust-lang/rust/commit/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001bd7762c9fc0d032b502b6a50ad67694c30b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/001bd7762c9fc0d032b502b6a50ad67694c30b2c", "html_url": "https://github.com/rust-lang/rust/commit/001bd7762c9fc0d032b502b6a50ad67694c30b2c"}, {"sha": "5873fe8851ef9815344ddb665c60e48a71413109", "url": "https://api.github.com/repos/rust-lang/rust/commits/5873fe8851ef9815344ddb665c60e48a71413109", "html_url": "https://github.com/rust-lang/rust/commit/5873fe8851ef9815344ddb665c60e48a71413109"}], "stats": {"total": 197, "additions": 97, "deletions": 100}, "files": [{"sha": "34022643101b64911231bcfa5f82f13ab3d7fae6", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -83,9 +83,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 return;\n             }\n \n-            sym::unreachable => {\n-                return;\n-            }\n             sym::va_start => bx.va_start(args[0].immediate()),\n             sym::va_end => bx.va_end(args[0].immediate()),\n             sym::size_of_val => {\n@@ -106,8 +103,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     bx.const_usize(bx.layout_of(tp_ty).align.abi.bytes())\n                 }\n             }\n-            sym::size_of\n-            | sym::pref_align_of\n+            sym::pref_align_of\n             | sym::min_align_of\n             | sym::needs_drop\n             | sym::type_id\n@@ -119,10 +115,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .unwrap();\n                 OperandRef::from_const(bx, value, ret_ty).immediate_or_packed_pair(bx)\n             }\n-            // Effectively no-op\n-            sym::forget => {\n-                return;\n-            }\n             sym::offset => {\n                 let ptr = args[0].immediate();\n                 let offset = args[1].immediate();\n@@ -218,9 +210,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             sym::add_with_overflow\n             | sym::sub_with_overflow\n             | sym::mul_with_overflow\n-            | sym::wrapping_add\n-            | sym::wrapping_sub\n-            | sym::wrapping_mul\n             | sym::unchecked_div\n             | sym::unchecked_rem\n             | sym::unchecked_shl\n@@ -254,9 +243,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                             return;\n                         }\n-                        sym::wrapping_add => bx.add(args[0].immediate(), args[1].immediate()),\n-                        sym::wrapping_sub => bx.sub(args[0].immediate(), args[1].immediate()),\n-                        sym::wrapping_mul => bx.mul(args[0].immediate(), args[1].immediate()),\n                         sym::exact_div => {\n                             if signed {\n                                 bx.exactsdiv(args[0].immediate(), args[1].immediate())"}, {"sha": "474e1f8e577f8b647be644be217823779244fd31", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -61,12 +61,11 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             ConstValue::Slice { data: alloc, start: 0, end: alloc.len() }\n         }\n         sym::needs_drop => ConstValue::from_bool(tp_ty.needs_drop(tcx, param_env)),\n-        sym::size_of | sym::min_align_of | sym::pref_align_of => {\n+        sym::min_align_of | sym::pref_align_of => {\n             let layout = tcx.layout_of(param_env.and(tp_ty)).map_err(|e| err_inval!(Layout(e)))?;\n             let n = match name {\n                 sym::pref_align_of => layout.align.pref.bytes(),\n                 sym::min_align_of => layout.align.abi.bytes(),\n-                sym::size_of => layout.size.bytes(),\n                 _ => bug!(),\n             };\n             ConstValue::from_machine_usize(n, &tcx)\n@@ -125,7 +124,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let (dest, ret) = match ret {\n             None => match intrinsic_name {\n                 sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n-                sym::unreachable => throw_ub!(Unreachable),\n                 sym::abort => M::abort(self, \"the program aborted execution\".to_owned())?,\n                 // Unsupported diverging intrinsic.\n                 _ => return Ok(false),\n@@ -160,13 +158,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::min_align_of\n             | sym::pref_align_of\n             | sym::needs_drop\n-            | sym::size_of\n             | sym::type_id\n             | sym::type_name\n             | sym::variant_count => {\n                 let gid = GlobalId { instance, promoted: None };\n                 let ty = match intrinsic_name {\n-                    sym::min_align_of | sym::pref_align_of | sym::size_of | sym::variant_count => {\n+                    sym::min_align_of | sym::pref_align_of | sym::variant_count => {\n                         self.tcx.types.usize\n                     }\n                     sym::needs_drop => self.tcx.types.bool,\n@@ -212,28 +209,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let out_val = numeric_intrinsic(intrinsic_name, bits, kind)?;\n                 self.write_scalar(out_val, dest)?;\n             }\n-            sym::wrapping_add\n-            | sym::wrapping_sub\n-            | sym::wrapping_mul\n-            | sym::add_with_overflow\n-            | sym::sub_with_overflow\n-            | sym::mul_with_overflow => {\n+            sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n                 let lhs = self.read_immediate(args[0])?;\n                 let rhs = self.read_immediate(args[1])?;\n-                let (bin_op, ignore_overflow) = match intrinsic_name {\n-                    sym::wrapping_add => (BinOp::Add, true),\n-                    sym::wrapping_sub => (BinOp::Sub, true),\n-                    sym::wrapping_mul => (BinOp::Mul, true),\n-                    sym::add_with_overflow => (BinOp::Add, false),\n-                    sym::sub_with_overflow => (BinOp::Sub, false),\n-                    sym::mul_with_overflow => (BinOp::Mul, false),\n+                let bin_op = match intrinsic_name {\n+                    sym::add_with_overflow => BinOp::Add,\n+                    sym::sub_with_overflow => BinOp::Sub,\n+                    sym::mul_with_overflow => BinOp::Mul,\n                     _ => bug!(\"Already checked for int ops\"),\n                 };\n-                if ignore_overflow {\n-                    self.binop_ignore_overflow(bin_op, lhs, rhs, dest)?;\n-                } else {\n-                    self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n-                }\n+                self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n             }\n             sym::saturating_add | sym::saturating_sub => {\n                 let l = self.read_immediate(args[0])?;"}, {"sha": "7f3b421cf76f62c3cf02d930caa3bb2f58018771", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -364,6 +364,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n         // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n         // but before optimizations begin.\n         &add_retag::AddRetag,\n+        &lower_intrinsics::LowerIntrinsics,\n         &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n         // `Deaggregator` is conceptually part of MIR building, some backends rely on it happening\n         // and it can help optimizations.\n@@ -392,7 +393,6 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n     // The main optimizations that we do on MIR.\n     let optimizations: &[&dyn MirPass<'tcx>] = &[\n-        &lower_intrinsics::LowerIntrinsics,\n         &remove_unneeded_drops::RemoveUnneededDrops,\n         &match_branches::MatchBranchSimplification,\n         // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)"}, {"sha": "22e179af4a93289f7537c243d63e9fa195f0e1e3", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -1355,66 +1355,65 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n     ///\n     /// Panics unless we `.can_merge()`.\n     pub fn merge(\n-        mut self,\n+        self,\n         track_edge_idx: Option<LeftOrRight<usize>>,\n     ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n+        let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;\n+        let old_parent_len = parent_node.len();\n         let mut left_node = self.left_child;\n-        let left_len = left_node.len();\n+        let old_left_len = left_node.len();\n         let right_node = self.right_child;\n         let right_len = right_node.len();\n+        let new_left_len = old_left_len + 1 + right_len;\n \n-        assert!(left_len + right_len < CAPACITY);\n+        assert!(new_left_len <= CAPACITY);\n         assert!(match track_edge_idx {\n             None => true,\n-            Some(LeftOrRight::Left(idx)) => idx <= left_len,\n+            Some(LeftOrRight::Left(idx)) => idx <= old_left_len,\n             Some(LeftOrRight::Right(idx)) => idx <= right_len,\n         });\n \n         unsafe {\n-            *left_node.reborrow_mut().into_len_mut() += right_len as u16 + 1;\n+            *left_node.reborrow_mut().into_len_mut() = new_left_len as u16;\n \n-            let parent_key = slice_remove(\n-                self.parent.node.reborrow_mut().into_key_area_slice(),\n-                self.parent.idx,\n-            );\n-            left_node.reborrow_mut().into_key_area_mut_at(left_len).write(parent_key);\n+            let parent_key =\n+                slice_remove(parent_node.reborrow_mut().into_key_area_slice(), parent_idx);\n+            left_node.reborrow_mut().into_key_area_mut_at(old_left_len).write(parent_key);\n             ptr::copy_nonoverlapping(\n                 right_node.reborrow().key_area().as_ptr(),\n-                left_node.reborrow_mut().into_key_area_slice().as_mut_ptr().add(left_len + 1),\n+                left_node.reborrow_mut().into_key_area_slice().as_mut_ptr().add(old_left_len + 1),\n                 right_len,\n             );\n \n-            let parent_val = slice_remove(\n-                self.parent.node.reborrow_mut().into_val_area_slice(),\n-                self.parent.idx,\n-            );\n-            left_node.reborrow_mut().into_val_area_mut_at(left_len).write(parent_val);\n+            let parent_val =\n+                slice_remove(parent_node.reborrow_mut().into_val_area_slice(), parent_idx);\n+            left_node.reborrow_mut().into_val_area_mut_at(old_left_len).write(parent_val);\n             ptr::copy_nonoverlapping(\n                 right_node.reborrow().val_area().as_ptr(),\n-                left_node.reborrow_mut().into_val_area_slice().as_mut_ptr().add(left_len + 1),\n+                left_node.reborrow_mut().into_val_area_slice().as_mut_ptr().add(old_left_len + 1),\n                 right_len,\n             );\n \n-            slice_remove(\n-                &mut self.parent.node.reborrow_mut().into_edge_area_slice(),\n-                self.parent.idx + 1,\n-            );\n-            let parent_old_len = self.parent.node.len();\n-            self.parent.node.correct_childrens_parent_links(self.parent.idx + 1..parent_old_len);\n-            *self.parent.node.reborrow_mut().into_len_mut() -= 1;\n+            slice_remove(&mut parent_node.reborrow_mut().into_edge_area_slice(), parent_idx + 1);\n+            parent_node.correct_childrens_parent_links(parent_idx + 1..old_parent_len);\n+            *parent_node.reborrow_mut().into_len_mut() -= 1;\n \n-            if self.parent.node.height > 1 {\n+            if parent_node.height > 1 {\n                 // SAFETY: the height of the nodes being merged is one below the height\n                 // of the node of this edge, thus above zero, so they are internal.\n                 let mut left_node = left_node.reborrow_mut().cast_to_internal_unchecked();\n                 let right_node = right_node.cast_to_internal_unchecked();\n                 ptr::copy_nonoverlapping(\n                     right_node.reborrow().edge_area().as_ptr(),\n-                    left_node.reborrow_mut().into_edge_area_slice().as_mut_ptr().add(left_len + 1),\n+                    left_node\n+                        .reborrow_mut()\n+                        .into_edge_area_slice()\n+                        .as_mut_ptr()\n+                        .add(old_left_len + 1),\n                     right_len + 1,\n                 );\n \n-                left_node.correct_childrens_parent_links(left_len + 1..=left_len + 1 + right_len);\n+                left_node.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);\n \n                 Global.deallocate(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());\n             } else {\n@@ -1424,7 +1423,7 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n             let new_idx = match track_edge_idx {\n                 None => 0,\n                 Some(LeftOrRight::Left(idx)) => idx,\n-                Some(LeftOrRight::Right(idx)) => left_len + 1 + idx,\n+                Some(LeftOrRight::Right(idx)) => old_left_len + 1 + idx,\n             };\n             Handle::new_edge(left_node, new_idx)\n         }"}, {"sha": "f63c3dd58040866339c66f66ad4914a2c03899be", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -679,7 +679,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n     pub fn pop_first(&mut self) -> Option<T> {\n-        self.map.first_entry().map(|entry| entry.remove_entry().0)\n+        self.map.pop_first().map(|kv| kv.0)\n     }\n \n     /// Removes the last value from the set and returns it, if any.\n@@ -701,7 +701,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// ```\n     #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n     pub fn pop_last(&mut self) -> Option<T> {\n-        self.map.last_entry().map(|entry| entry.remove_entry().0)\n+        self.map.pop_last().map(|kv| kv.0)\n     }\n \n     /// Adds a value to the set."}, {"sha": "0c459a820c6ea96af11baa721c26dde9cd179d63", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -1236,7 +1236,7 @@ mod impls {\n     impl PartialOrd for bool {\n         #[inline]\n         fn partial_cmp(&self, other: &bool) -> Option<Ordering> {\n-            (*self as u8).partial_cmp(&(*other as u8))\n+            Some(self.cmp(other))\n         }\n     }\n "}, {"sha": "1f3482d6200cb27a0b91bb9095b28be74df9959b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -207,7 +207,7 @@ impl Clean<ExternalCrate> for CrateNum {\n         };\n \n         ExternalCrate {\n-            name: cx.tcx.crate_name(*self).to_string(),\n+            name: cx.tcx.crate_name(*self),\n             src: krate_src,\n             attrs: cx.tcx.get_attrs(root).clean(cx),\n             primitives,"}, {"sha": "8c216598723cddff20d97bd2133c7ad68ae2828c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -51,7 +51,7 @@ thread_local!(crate static MAX_DEF_ID: RefCell<FxHashMap<CrateNum, DefId>> = Def\n \n #[derive(Clone, Debug)]\n crate struct Crate {\n-    crate name: String,\n+    crate name: Symbol,\n     crate version: Option<String>,\n     crate src: FileName,\n     crate module: Option<Item>,\n@@ -66,7 +66,7 @@ crate struct Crate {\n \n #[derive(Clone, Debug)]\n crate struct ExternalCrate {\n-    crate name: String,\n+    crate name: Symbol,\n     crate src: FileName,\n     crate attrs: Attributes,\n     crate primitives: Vec<(DefId, PrimitiveType)>,"}, {"sha": "77a3e9fa9549b4780de2dcc898c0fadd18579a34", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_span::source_map::FileName;\n+use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n use crate::config::RenderInfo;\n@@ -74,7 +75,7 @@ crate struct Cache {\n     crate implementors: FxHashMap<DefId, Vec<Impl>>,\n \n     /// Cache of where external crate documentation can be found.\n-    crate extern_locations: FxHashMap<CrateNum, (String, PathBuf, ExternalLocation)>,\n+    crate extern_locations: FxHashMap<CrateNum, (Symbol, PathBuf, ExternalLocation)>,\n \n     /// Cache of where documentation for primitives can be found.\n     crate primitive_locations: FxHashMap<clean::PrimitiveType, DefId>,\n@@ -173,10 +174,10 @@ impl Cache {\n                 },\n                 _ => PathBuf::new(),\n             };\n-            let extern_url = extern_html_root_urls.get(&e.name).map(|u| &**u);\n+            let extern_url = extern_html_root_urls.get(&*e.name.as_str()).map(|u| &**u);\n             cache\n                 .extern_locations\n-                .insert(n, (e.name.clone(), src_root, extern_location(e, extern_url, &dst)));\n+                .insert(n, (e.name, src_root, extern_location(e, extern_url, &dst)));\n \n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n             cache.external_paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n@@ -195,7 +196,7 @@ impl Cache {\n             cache.primitive_locations.insert(prim, def_id);\n         }\n \n-        cache.stack.push(krate.name.clone());\n+        cache.stack.push(krate.name.to_string());\n         krate = cache.fold_crate(krate);\n \n         for (trait_did, dids, impl_) in cache.orphan_trait_impls.drain(..) {\n@@ -340,7 +341,7 @@ impl DocFolder for Cache {\n \n         // Keep track of the fully qualified path for this item.\n         let pushed = match item.name {\n-            Some(ref n) if !n.is_empty() => {\n+            Some(n) if !n.is_empty() => {\n                 self.stack.push(n.to_string());\n                 true\n             }"}, {"sha": "f61919d78a0922bb4457a54d4c84f25a6d823ec1", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n use rustc_data_structures::sync::Lrc;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n-use rustc_span::Symbol;\n \n use crate::clean;\n use crate::config::{RenderInfo, RenderOptions};\n@@ -76,7 +75,7 @@ crate fn run_format<T: FormatRenderer>(\n         None => return Ok(()),\n     };\n \n-    item.name = Some(Symbol::intern(&krate.name));\n+    item.name = Some(krate.name);\n \n     // Render the crate documentation\n     let mut work = vec![(format_renderer.clone(), item)];"}, {"sha": "9d3e31104cede75b57d6291c22a775fac3dd0290", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -31,7 +31,7 @@ crate fn extern_location(\n ) -> ExternalLocation {\n     use ExternalLocation::*;\n     // See if there's documentation generated into the local directory\n-    let local_location = dst.join(&e.name);\n+    let local_location = dst.join(&*e.name.as_str());\n     if local_location.is_dir() {\n         return Local;\n     }"}, {"sha": "a775c85435cb8dedb71effb838055ca623955446", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -418,14 +418,15 @@ impl FormatRenderer for Context {\n         // If user passed in `--playground-url` arg, we fill in crate name here\n         let mut playground = None;\n         if let Some(url) = playground_url {\n-            playground = Some(markdown::Playground { crate_name: Some(krate.name.clone()), url });\n+            playground =\n+                Some(markdown::Playground { crate_name: Some(krate.name.to_string()), url });\n         }\n         let mut layout = layout::Layout {\n             logo: String::new(),\n             favicon: String::new(),\n             external_html,\n             default_settings,\n-            krate: krate.name.clone(),\n+            krate: krate.name.to_string(),\n             css_file_extension: extension_css,\n             generate_search_filter,\n         };\n@@ -445,7 +446,7 @@ impl FormatRenderer for Context {\n                     }\n                     (sym::html_playground_url, Some(s)) => {\n                         playground = Some(markdown::Playground {\n-                            crate_name: Some(krate.name.clone()),\n+                            crate_name: Some(krate.name.to_string()),\n                             url: s.to_string(),\n                         });\n                     }\n@@ -530,7 +531,7 @@ impl FormatRenderer for Context {\n     }\n \n     fn after_krate(&mut self, krate: &clean::Crate, cache: &Cache) -> Result<(), Error> {\n-        let final_file = self.dst.join(&krate.name).join(\"all.html\");\n+        let final_file = self.dst.join(&*krate.name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n         let crate_name = krate.name.clone();\n \n@@ -1019,7 +1020,8 @@ themePicker.onblur = handleThemeButtonsBlur;\n         }\n \n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n-        let (mut all_sources, _krates) = try_err!(collect(&dst, &krate.name, \"sourcesIndex\"), &dst);\n+        let (mut all_sources, _krates) =\n+            try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n         all_sources.push(format!(\n             \"sourcesIndex[\\\"{}\\\"] = {};\",\n             &krate.name,\n@@ -1035,7 +1037,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     // Update the search index\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n-    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name), &dst);\n+    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name.as_str()), &dst);\n     all_indexes.push(search_index);\n \n     // Sort the indexes by crate so the file will be generated identically even\n@@ -1070,7 +1072,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 extra_scripts: &[],\n                 static_extra_scripts: &[],\n             };\n-            krates.push(krate.name.clone());\n+            krates.push(krate.name.to_string());\n             krates.sort();\n             krates.dedup();\n \n@@ -1162,7 +1164,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n         mydst.push(&format!(\"{}.{}.js\", remote_item_type, remote_path[remote_path.len() - 1]));\n \n         let (mut all_implementors, _) =\n-            try_err!(collect(&mydst, &krate.name, \"implementors\"), &mydst);\n+            try_err!(collect(&mydst, &krate.name.as_str(), \"implementors\"), &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel.\n@@ -1648,16 +1650,17 @@ impl Context {\n         };\n         let file = &file;\n \n+        let symbol;\n         let (krate, path) = if cnum == LOCAL_CRATE {\n             if let Some(path) = self.shared.local_sources.get(file) {\n-                (&self.shared.layout.krate, path)\n+                (self.shared.layout.krate.as_str(), path)\n             } else {\n                 return None;\n             }\n         } else {\n             let (krate, src_root) = match *cache.extern_locations.get(&cnum)? {\n-                (ref name, ref src, ExternalLocation::Local) => (name, src),\n-                (ref name, ref src, ExternalLocation::Remote(ref s)) => {\n+                (name, ref src, ExternalLocation::Local) => (name, src),\n+                (name, ref src, ExternalLocation::Remote(ref s)) => {\n                     root = s.to_string();\n                     (name, src)\n                 }\n@@ -1671,7 +1674,8 @@ impl Context {\n             let mut fname = file.file_name().expect(\"source has no filename\").to_os_string();\n             fname.push(\".html\");\n             path.push_str(&fname.to_string_lossy());\n-            (krate, &path)\n+            symbol = krate.as_str();\n+            (&*symbol, &path)\n         };\n \n         let loline = item.source.lo(self.sess()).line;"}, {"sha": "b6c3300906bfd569cf0d1aa5f86198b0332528a7", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -19,7 +19,7 @@ crate fn render(\n     krate: clean::Crate,\n ) -> Result<clean::Crate, Error> {\n     info!(\"emitting source files\");\n-    let dst = dst.join(\"src\").join(&krate.name);\n+    let dst = dst.join(\"src\").join(&*krate.name.as_str());\n     scx.ensure_dir(&dst)?;\n     let mut folder = SourceCollector { dst, scx };\n     Ok(folder.fold_crate(krate))"}, {"sha": "7af26558b76ecb3fbdce9523eb1b825df021e247", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -223,7 +223,7 @@ impl FormatRenderer for JsonRenderer {\n                     (\n                         k.as_u32(),\n                         types::ExternalCrate {\n-                            name: v.0.clone(),\n+                            name: v.0.to_string(),\n                             html_root_url: match &v.2 {\n                                 ExternalLocation::Remote(s) => Some(s.clone()),\n                                 _ => None,"}, {"sha": "24045b4e29dc93c03da3f1661d97ef4695bd51fc", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -519,17 +519,12 @@ fn main_options(options: config::Options) -> MainResult {\n     // compiler all the way through the analysis passes. The rustdoc output is\n     // then generated from the cleaned AST of the crate. This runs all the\n     // plug/cleaning passes.\n-    let crate_name = options.crate_name.clone();\n     let crate_version = options.crate_version.clone();\n     let output_format = options.output_format;\n     let (mut krate, renderinfo, renderopts, sess) = core::run_core(options);\n \n     info!(\"finished with rustc\");\n \n-    if let Some(name) = crate_name {\n-        krate.name = name\n-    }\n-\n     krate.version = crate_version;\n \n     if show_coverage {"}, {"sha": "7da2ff02006bf8f4055ba5ff956d036ecafb8ef5", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -120,5 +120,9 @@\n       bb5: {\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:73:2: 73:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:68:1: 73:2\n+      }\n   }\n   "}, {"sha": "e9cc72f2138891640f29e3553a92db65be8b9e8e", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -25,7 +25,15 @@\n           StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:19:40: 19:41\n           StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:43: 19:44\n           _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:18:24: 20:2\n+          goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:20:1: 20:2\n+      }\n+  \n+      bb2: {\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:20:2: 20:2\n       }\n+  \n+      bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:18:1: 20:2\n+      }\n   }\n   "}, {"sha": "218b1c964334525ac622f6d12fe1ddee158ac905", "filename": "src/test/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -27,5 +27,9 @@\n           StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:59:1: 59:2\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:59:2: 59:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:55:1: 59:2\n+      }\n   }\n   "}, {"sha": "b5a77702a8ef0a0345846c8a2a407574fd927ced", "filename": "src/test/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -16,5 +16,9 @@\n       bb1: {\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:15:2: 15:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:13:1: 15:2\n+      }\n   }\n   "}, {"sha": "a04b79d47d4ce59fe62deaeef8676b98c9b3cae4", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -18,5 +18,9 @@\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(Scalar(<ZST>)) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n       }\n+  \n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:23:1: 25:2\n+      }\n   }\n   "}, {"sha": "badfef30e6fc5b88cc7aeb7c9f113b42174ae41e", "filename": "src/test/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "patch": "@@ -79,5 +79,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:10:1: 10:2\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:10:2: 10:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:6:1: 10:2\n+      }\n   }\n   "}]}