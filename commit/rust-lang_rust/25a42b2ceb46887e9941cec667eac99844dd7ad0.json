{"sha": "25a42b2ceb46887e9941cec667eac99844dd7ad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YTQyYjJjZWI0Njg4N2U5OTQxY2VjNjY3ZWFjOTk4NDRkZDdhZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-07T17:14:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-07T17:14:34Z"}, "message": "Auto merge of #55746 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #55377 (Slight copy-editing for `std::cell::Cell` docs)\n - #55441 (Remove unused re import in gdb_rust_pretty_printing)\n - #55453 (Choose predicates without inference variables over those with them)\n - #55495 (Don't print opt fuel messages to stdout because it breaks Rustbuild)\n - #55501 (Make `process_obligations`' computation of `completed` optional.)\n - #55510 (Fix feature gate only being checked on first repr attr.)\n - #55609 (Run name-anon-globals after LTO passes as well)\n - #55645 (do not print wrapping ranges like normal ranges in validity diagnostics)\n - #55688 (Standardised names and location of ui issue tests)\n - #55692 (-C remark: fix incorrect warning about requiring \"--debuginfo\" instead of \"-C debuginfo=n\")\n - #55702 (Add `aarch64-pc-windows-msvc` to deployed targets)\n - #55728 (Update lldb)\n - #55730 (Use trait impl method span when type param mismatch is due to impl Trait)\n - #55734 (refactor: use shorthand fields)", "tree": {"sha": "5f2559aa5141631a0652f0df336c5a9e797f0cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f2559aa5141631a0652f0df336c5a9e797f0cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a42b2ceb46887e9941cec667eac99844dd7ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a42b2ceb46887e9941cec667eac99844dd7ad0", "html_url": "https://github.com/rust-lang/rust/commit/25a42b2ceb46887e9941cec667eac99844dd7ad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a42b2ceb46887e9941cec667eac99844dd7ad0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8315b11b6352cbd91ee096571c31ae7d3ac9613d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8315b11b6352cbd91ee096571c31ae7d3ac9613d", "html_url": "https://github.com/rust-lang/rust/commit/8315b11b6352cbd91ee096571c31ae7d3ac9613d"}, {"sha": "4e86576277abda043a24dd763bf0802e33d55259", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e86576277abda043a24dd763bf0802e33d55259", "html_url": "https://github.com/rust-lang/rust/commit/4e86576277abda043a24dd763bf0802e33d55259"}], "stats": {"total": 773, "additions": 505, "deletions": 268}, "files": [{"sha": "e6d5ef1a23ff786890e14b28c81029ff1ce20ea6", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -9,7 +9,6 @@\n # except according to those terms.\n \n import gdb\n-import re\n import sys\n import debugger_pretty_printers_common as rustpp\n "}, {"sha": "5c776292f53d7a86a49f0c1dcedf80d4dd261097", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -502,7 +502,7 @@ impl String {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {\n         match str::from_utf8(&vec) {\n-            Ok(..) => Ok(String { vec: vec }),\n+            Ok(..) => Ok(String { vec }),\n             Err(e) => {\n                 Err(FromUtf8Error {\n                     bytes: vec,"}, {"sha": "689cf319bd750bd1c710e135c4ee0bd2f54d157d", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -207,8 +207,8 @@ use ptr;\n ///\n /// # Examples\n ///\n-/// Here you can see how using `Cell<T>` allows to use mutable field inside\n-/// immutable struct (which is also called 'interior mutability').\n+/// In this example, you can see that `Cell<T>` enables mutation inside an\n+/// immutable struct. In other words, it enables \"interior mutability\".\n ///\n /// ```\n /// use std::cell::Cell;\n@@ -225,10 +225,11 @@ use ptr;\n ///\n /// let new_value = 100;\n ///\n-/// // ERROR, because my_struct is immutable\n+/// // ERROR: `my_struct` is immutable\n /// // my_struct.regular_field = new_value;\n ///\n-/// // WORKS, although `my_struct` is immutable, field `special_field` is mutable because it is Cell\n+/// // WORKS: although `my_struct` is immutable, `special_field` is a `Cell`,\n+/// // which can always be mutated\n /// my_struct.special_field.set(new_value);\n /// assert_eq!(my_struct.special_field.get(), new_value);\n /// ```"}, {"sha": "3ff250ff6592bdbb717ab98c273b7b20d94e1a48", "filename": "src/libpanic_unwind/dwarf/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -29,7 +29,7 @@ struct Unaligned<T>(T);\n \n impl DwarfReader {\n     pub fn new(ptr: *const u8) -> DwarfReader {\n-        DwarfReader { ptr: ptr }\n+        DwarfReader { ptr }\n     }\n \n     // DWARF streams are packed, so e.g. a u32 would not necessarily be aligned"}, {"sha": "60e9829ef9eaffdef851e06fe30ebace8353b5a5", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -41,7 +41,7 @@ struct PanicData {\n }\n \n pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n-    let panic_ctx = Box::new(PanicData { data: data });\n+    let panic_ctx = Box::new(PanicData { data });\n     let params = [Box::into_raw(panic_ctx) as c::ULONG_PTR];\n     c::RaiseException(RUST_PANIC,\n                       c::EXCEPTION_NONCONTINUABLE,"}, {"sha": "a0c310ac2761e1fbf869fc57bb29764d8a2915ff", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -26,7 +26,7 @@ pub struct OpportunisticTypeResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> OpportunisticTypeResolver<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n-        OpportunisticTypeResolver { infcx: infcx }\n+        OpportunisticTypeResolver { infcx }\n     }\n }\n \n@@ -54,7 +54,7 @@ pub struct OpportunisticTypeAndRegionResolver<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'gcx, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n-        OpportunisticTypeAndRegionResolver { infcx: infcx }\n+        OpportunisticTypeAndRegionResolver { infcx }\n     }\n }\n "}, {"sha": "39bf59a7a4ec5d31e5240fd12a4f9eb0c554f403", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -169,7 +169,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         // Hack: we only need this so that `types_escaping_snapshot`\n         // can see what has been unified; see the Delegate impl for\n         // more details.\n-        self.values.record(Instantiate { vid: vid });\n+        self.values.record(Instantiate { vid });\n     }\n \n     /// Creates a new type variable."}, {"sha": "f8001e085c469e4c3b74f62655f434584177e381", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -43,7 +43,7 @@ impl UnifyValue for RegionVidKey {\n             value2.min_vid\n         };\n \n-        Ok(RegionVidKey { min_vid: min_vid })\n+        Ok(RegionVidKey { min_vid })\n     }\n }\n "}, {"sha": "5d456481896b6bdc8596ad624b653c634ab39372", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -469,7 +469,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut checker = Checker { tcx: tcx };\n+    let mut checker = Checker { tcx };\n     tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n "}, {"sha": "c2014a5fdd23a088abb4d599a2df9244c2c7b714", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -2986,7 +2986,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         use mir::TerminatorKind::*;\n \n         let kind = match self.kind {\n-            Goto { target } => Goto { target: target },\n+            Goto { target } => Goto { target },\n             SwitchInt {\n                 ref discr,\n                 switch_ty,"}, {"sha": "4b53235eab4af2aa2f1a420e29b80d5ffc77f6cc", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -32,7 +32,7 @@ pub enum PlaceTy<'tcx> {\n \n impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn from_ty(ty: Ty<'tcx>) -> PlaceTy<'tcx> {\n-        PlaceTy::Ty { ty: ty }\n+        PlaceTy::Ty { ty }\n     }\n \n     pub fn to_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {"}, {"sha": "5306f2c9689b10844f3796f1534b8f0b528b421a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -2202,8 +2202,7 @@ pub fn build_session_options_and_crate_config(\n     if !cg.remark.is_empty() && debuginfo == DebugInfo::None {\n         early_warn(\n             error_format,\n-            \"-C remark will not show source locations without \\\n-             --debuginfo\",\n+            \"-C remark requires \\\"-C debuginfo=n\\\" to show source locations\",\n         );\n     }\n "}, {"sha": "fe94b62ef19e266c6e0989daba86a1992fd46d45", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -868,7 +868,7 @@ impl Session {\n                 let fuel = self.optimization_fuel_limit.get();\n                 ret = fuel != 0;\n                 if fuel == 0 && !self.out_of_fuel.get() {\n-                    println!(\"optimization-fuel-exhausted: {}\", msg());\n+                    eprintln!(\"optimization-fuel-exhausted: {}\", msg());\n                     self.out_of_fuel.set(true);\n                 } else if fuel > 0 {\n                     self.optimization_fuel_limit.set(fuel - 1);"}, {"sha": "8239e5ac56e44c4a5d5eab84ce07ff0cac543755", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -447,27 +447,51 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                     ty::RegionKind::ReLateBound(_, _),\n                                 ) => {}\n \n-                                (ty::RegionKind::ReLateBound(_, _), _) => {\n+                                (ty::RegionKind::ReLateBound(_, _), _) |\n+                                (_, ty::RegionKind::ReVar(_)) => {\n+                                    // One of these is true:\n                                     // The new predicate has a HRTB in a spot where the old\n                                     // predicate does not (if they both had a HRTB, the previous\n-                                    // match arm would have executed).\n+                                    // match arm would have executed). A HRBT is a 'stricter'\n+                                    // bound than anything else, so we want to keep the newer\n+                                    // predicate (with the HRBT) in place of the old predicate.\n                                     //\n-                                    // The means we want to remove the older predicate from\n-                                    // user_computed_preds, since having both it and the new\n+                                    // OR\n+                                    //\n+                                    // The old predicate has a region variable where the new\n+                                    // predicate has some other kind of region. An region\n+                                    // variable isn't something we can actually display to a user,\n+                                    // so we choose ther new predicate (which doesn't have a region\n+                                    // varaible).\n+                                    //\n+                                    // In both cases, we want to remove the old predicate,\n+                                    // from user_computed_preds, and replace it with the new\n+                                    // one. Having both the old and the new\n                                     // predicate in a ParamEnv would confuse SelectionContext\n+                                    //\n                                     // We're currently in the predicate passed to 'retain',\n                                     // so we return 'false' to remove the old predicate from\n                                     // user_computed_preds\n                                     return false;\n                                 }\n-                                (_, ty::RegionKind::ReLateBound(_, _)) => {\n-                                    // This is the opposite situation as the previous arm - the\n-                                    // old predicate has a HRTB lifetime in a place where the\n-                                    // new predicate does not. We want to leave the old\n+                                (_, ty::RegionKind::ReLateBound(_, _)) |\n+                                (ty::RegionKind::ReVar(_), _) => {\n+                                    // This is the opposite situation as the previous arm.\n+                                    // One of these is true:\n+                                    //\n+                                    // The old predicate has a HRTB lifetime in a place where the\n+                                    // new predicate does not.\n+                                    //\n+                                    // OR\n+                                    //\n+                                    // The new predicate has a region variable where the old\n+                                    // predicate has some other type of region.\n+                                    //\n+                                    // We want to leave the old\n                                     // predicate in user_computed_preds, and skip adding\n                                     // new_pred to user_computed_params.\n                                     should_add_new = false\n-                                }\n+                                },\n                                 _ => {}\n                             }\n                         }"}, {"sha": "bc091a4e7e0848e0ebd81fd2f0e3dde53ab44ec7", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -12,8 +12,9 @@ use infer::InferCtxt;\n use mir::interpret::{GlobalId, ErrorHandled};\n use ty::{self, Ty, TypeFoldable, ToPolyTraitRef, ToPredicate};\n use ty::error::ExpectedFound;\n-use rustc_data_structures::obligation_forest::{Error, ForestObligation, ObligationForest};\n-use rustc_data_structures::obligation_forest::{ObligationProcessor, ProcessResult};\n+use rustc_data_structures::obligation_forest::{DoCompleted, Error, ForestObligation};\n+use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n+use rustc_data_structures::obligation_forest::{ProcessResult};\n use std::marker::PhantomData;\n use hir::def_id::DefId;\n \n@@ -98,7 +99,7 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n             let outcome = self.predicates.process_obligations(&mut FulfillProcessor {\n                 selcx,\n                 register_region_obligations: self.register_region_obligations\n-            });\n+            }, DoCompleted::No);\n             debug!(\"select: outcome={:#?}\", outcome);\n \n             // FIXME: if we kept the original cache key, we could mark projection"}, {"sha": "6b5eb4293e0285311a0316bdf017530058d665e8", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -266,7 +266,7 @@ fn project_and_unify_type<'cx, 'gcx, 'tcx>(\n         },\n         Err(err) => {\n             debug!(\"project_and_unify_type: equating types encountered error {:?}\", err);\n-            Err(MismatchedProjectionTypes { err: err })\n+            Err(MismatchedProjectionTypes { err })\n         }\n     }\n }"}, {"sha": "550c27ca0ab8bc669b4c95396443de56c90e8f0a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -3526,7 +3526,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             _ => bug!(),\n         };\n \n-        Ok(VtableBuiltinData { nested: nested })\n+        Ok(VtableBuiltinData { nested })\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "d20b6d361991b6804630e997bc0cb5c2d3efe72c", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -34,7 +34,7 @@ pub struct Match<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> Match<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Match<'a, 'gcx, 'tcx> {\n-        Match { tcx: tcx }\n+        Match { tcx }\n     }\n }\n "}, {"sha": "ffa4380a5d63c48fcb59687dfdb7af2df841de6f", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -82,7 +82,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags: flags })\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags })\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)"}, {"sha": "3d96fef7c0d6f09e9e47f93c52e475fd0d700627", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -605,6 +605,13 @@ fn run_pass_manager(cgcx: &CodegenContext,\n             }\n         });\n \n+        // We always generate bitcode through ThinLTOBuffers,\n+        // which do not support anonymous globals\n+        if config.bitcode_needed() {\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr() as *const _);\n+            llvm::LLVMRustAddPass(pm, pass.unwrap());\n+        }\n+\n         if config.verify_llvm_ir {\n             let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n             llvm::LLVMRustAddPass(pm, pass.unwrap());"}, {"sha": "184be4b9eab39d76841af69ce451f065c2ee9757", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -337,6 +337,11 @@ impl ModuleConfig {\n         self.merge_functions = sess.opts.optimize == config::OptLevel::Default ||\n                                sess.opts.optimize == config::OptLevel::Aggressive;\n     }\n+\n+    pub fn bitcode_needed(&self) -> bool {\n+        self.emit_bc || self.obj_is_bitcode\n+            || self.emit_bc_compressed || self.embed_bitcode\n+    }\n }\n \n /// Assembler name and command used by codegen when no_integrated_as is enabled\n@@ -564,8 +569,7 @@ unsafe fn optimize(cgcx: &CodegenContext,\n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n             // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n             // we'll get errors in LLVM.\n-            let using_thin_buffers = config.emit_bc || config.obj_is_bitcode\n-                || config.emit_bc_compressed || config.embed_bitcode;\n+            let using_thin_buffers = config.bitcode_needed();\n             let mut have_name_anon_globals_pass = false;\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);"}, {"sha": "fbd5192a63f8e42c1ccc93eec222af882e97c96b", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -190,7 +190,7 @@ impl ObjectFile {\n     pub fn new(llmb: &'static mut MemoryBuffer) -> Option<ObjectFile> {\n         unsafe {\n             let llof = LLVMCreateObjectFile(llmb)?;\n-            Some(ObjectFile { llof: llof })\n+            Some(ObjectFile { llof })\n         }\n     }\n }"}, {"sha": "2af772bd7ce22abaf9f3229c97c56c674324588d", "filename": "src/librustc_codegen_llvm/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fanalyze.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -346,7 +346,7 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                        funclet, succ, kind);\n                 match kind {\n                     CleanupKind::NotCleanup => {\n-                        result[succ] = CleanupKind::Internal { funclet: funclet };\n+                        result[succ] = CleanupKind::Internal { funclet };\n                     }\n                     CleanupKind::Funclet => {\n                         if funclet != succ {"}, {"sha": "6eaf0c1c08da126778ef2170931229d764ec5c1c", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -32,7 +32,7 @@ pub fn report_symbol_names<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n \n     tcx.dep_graph.with_ignore(|| {\n-        let mut visitor = SymbolNamesTest { tcx: tcx };\n+        let mut visitor = SymbolNamesTest { tcx };\n         tcx.hir.krate().visit_all_item_likes(&mut visitor);\n     })\n }"}, {"sha": "86e48e21626abd39b4a9546c237de189595464f9", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -214,7 +214,7 @@ cfg_if! {\n                     unsafe { libc::close(fd); }\n                     Err(err)\n                 } else {\n-                    Ok(Lock { fd: fd })\n+                    Ok(Lock { fd })\n                 }\n             }\n         }"}, {"sha": "c211d888df131b5b62f29fde6d1b98a5cc4496d5", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -162,8 +162,8 @@ enum NodeState {\n #[derive(Debug)]\n pub struct Outcome<O, E> {\n     /// Obligations that were completely evaluated, including all\n-    /// (transitive) subobligations.\n-    pub completed: Vec<O>,\n+    /// (transitive) subobligations. Only computed if requested.\n+    pub completed: Option<Vec<O>>,\n \n     /// Backtrace of obligations that were found to be in error.\n     pub errors: Vec<Error<O, E>>,\n@@ -177,6 +177,14 @@ pub struct Outcome<O, E> {\n     pub stalled: bool,\n }\n \n+/// Should `process_obligations` compute the `Outcome::completed` field of its\n+/// result?\n+#[derive(PartialEq)]\n+pub enum DoCompleted {\n+    No,\n+    Yes,\n+}\n+\n #[derive(Debug, PartialEq, Eq)]\n pub struct Error<O, E> {\n     pub error: E,\n@@ -282,8 +290,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 });\n             }\n         }\n-        let successful_obligations = self.compress();\n-        assert!(successful_obligations.is_empty());\n+        let successful_obligations = self.compress(DoCompleted::Yes);\n+        assert!(successful_obligations.unwrap().is_empty());\n         errors\n     }\n \n@@ -311,7 +319,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n     /// be called in a loop until `outcome.stalled` is false.\n     ///\n     /// This CANNOT be unrolled (presently, at least).\n-    pub fn process_obligations<P>(&mut self, processor: &mut P) -> Outcome<O, P::Error>\n+    pub fn process_obligations<P>(&mut self, processor: &mut P, do_completed: DoCompleted)\n+                                  -> Outcome<O, P::Error>\n         where P: ObligationProcessor<Obligation=O>\n     {\n         debug!(\"process_obligations(len={})\", self.nodes.len());\n@@ -366,7 +375,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             // There's no need to perform marking, cycle processing and compression when nothing\n             // changed.\n             return Outcome {\n-                completed: vec![],\n+                completed: if do_completed == DoCompleted::Yes { Some(vec![]) } else { None },\n                 errors,\n                 stalled,\n             };\n@@ -376,12 +385,12 @@ impl<O: ForestObligation> ObligationForest<O> {\n         self.process_cycles(processor);\n \n         // Now we have to compress the result\n-        let completed_obligations = self.compress();\n+        let completed = self.compress(do_completed);\n \n         debug!(\"process_obligations: complete\");\n \n         Outcome {\n-            completed: completed_obligations,\n+            completed,\n             errors,\n             stalled,\n         }\n@@ -524,7 +533,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n     /// Beforehand, all nodes must be marked as `Done` and no cycles\n     /// on these nodes may be present. This is done by e.g. `process_cycles`.\n     #[inline(never)]\n-    fn compress(&mut self) -> Vec<O> {\n+    fn compress(&mut self, do_completed: DoCompleted) -> Option<Vec<O>> {\n         let nodes_len = self.nodes.len();\n         let mut node_rewrites: Vec<_> = self.scratch.take().unwrap();\n         node_rewrites.extend(0..nodes_len);\n@@ -573,21 +582,26 @@ impl<O: ForestObligation> ObligationForest<O> {\n         if dead_nodes == 0 {\n             node_rewrites.truncate(0);\n             self.scratch = Some(node_rewrites);\n-            return vec![];\n+            return if do_completed == DoCompleted::Yes { Some(vec![]) } else { None };\n         }\n \n         // Pop off all the nodes we killed and extract the success\n         // stories.\n-        let successful = (0..dead_nodes)\n-                             .map(|_| self.nodes.pop().unwrap())\n-                             .flat_map(|node| {\n-                                 match node.state.get() {\n-                                     NodeState::Error => None,\n-                                     NodeState::Done => Some(node.obligation),\n-                                     _ => unreachable!()\n-                                 }\n-                             })\n-            .collect();\n+        let successful = if do_completed == DoCompleted::Yes {\n+            Some((0..dead_nodes)\n+                .map(|_| self.nodes.pop().unwrap())\n+                .flat_map(|node| {\n+                    match node.state.get() {\n+                        NodeState::Error => None,\n+                        NodeState::Done => Some(node.obligation),\n+                        _ => unreachable!()\n+                    }\n+                })\n+                .collect())\n+        } else {\n+            self.nodes.truncate(self.nodes.len() - dead_nodes);\n+            None\n+        };\n         self.apply_rewrites(&node_rewrites);\n \n         node_rewrites.truncate(0);"}, {"sha": "2a418973fbda2010d37613bd78458123470bff5f", "filename": "src/librustc_data_structures/obligation_forest/test.rs", "status": "modified", "additions": 50, "deletions": 49, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Ftest.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -10,7 +10,7 @@\n \n #![cfg(test)]\n \n-use super::{Error, ObligationForest, ObligationProcessor, Outcome, ProcessResult};\n+use super::{Error, DoCompleted, ObligationForest, ObligationProcessor, Outcome, ProcessResult};\n \n use std::fmt;\n use std::marker::PhantomData;\n@@ -84,8 +84,8 @@ fn push_pop() {\n                 \"C\" => ProcessResult::Changed(vec![]),\n                 _ => unreachable!(),\n             }\n-        }, |_| {}));\n-    assert_eq!(ok, vec![\"C\"]);\n+        }, |_| {}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"C\"]);\n     assert_eq!(err,\n                vec![Error {\n                         error: \"B is for broken\",\n@@ -108,8 +108,8 @@ fn push_pop() {\n                 \"D\" => ProcessResult::Changed(vec![\"D.1\", \"D.2\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_| {}));\n-    assert_eq!(ok, Vec::<&'static str>::new());\n+        }, |_| {}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), Vec::<&'static str>::new());\n     assert_eq!(err, Vec::new());\n \n \n@@ -127,8 +127,8 @@ fn push_pop() {\n                 \"D.2\" => ProcessResult::Changed(vec![\"D.2.i\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_| {}));\n-    assert_eq!(ok, vec![\"A.3\", \"A.1\", \"A.3.i\"]);\n+        }, |_| {}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"A.3\", \"A.1\", \"A.3.i\"]);\n     assert_eq!(err,\n                vec![Error {\n                         error: \"A is for apple\",\n@@ -143,8 +143,8 @@ fn push_pop() {\n                 \"D.2.i\" => ProcessResult::Changed(vec![]),\n                 _ => panic!(\"unexpected obligation {:?}\", obligation),\n             }\n-        }, |_| {}));\n-    assert_eq!(ok, vec![\"D.2.i\", \"D.2\"]);\n+        }, |_| {}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"D.2.i\", \"D.2\"]);\n     assert_eq!(err,\n                vec![Error {\n                         error: \"D is for dumb\",\n@@ -171,8 +171,8 @@ fn success_in_grandchildren() {\n                 \"A\" => ProcessResult::Changed(vec![\"A.1\", \"A.2\", \"A.3\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_| {}));\n-    assert!(ok.is_empty());\n+        }, |_| {}), DoCompleted::Yes);\n+    assert!(ok.unwrap().is_empty());\n     assert!(err.is_empty());\n \n     let Outcome { completed: ok, errors: err, .. } =\n@@ -183,8 +183,8 @@ fn success_in_grandchildren() {\n                 \"A.3\" => ProcessResult::Changed(vec![]),\n                 _ => unreachable!(),\n             }\n-        }, |_| {}));\n-    assert_eq!(ok, vec![\"A.3\", \"A.1\"]);\n+        }, |_| {}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"A.3\", \"A.1\"]);\n     assert!(err.is_empty());\n \n     let Outcome { completed: ok, errors: err, .. } =\n@@ -194,8 +194,8 @@ fn success_in_grandchildren() {\n                 \"A.2.ii\" => ProcessResult::Changed(vec![]),\n                 _ => unreachable!(),\n             }\n-        }, |_| {}));\n-    assert_eq!(ok, vec![\"A.2.ii\"]);\n+        }, |_| {}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"A.2.ii\"]);\n     assert!(err.is_empty());\n \n     let Outcome { completed: ok, errors: err, .. } =\n@@ -204,14 +204,15 @@ fn success_in_grandchildren() {\n                 \"A.2.i.a\" => ProcessResult::Changed(vec![]),\n                 _ => unreachable!(),\n             }\n-        }, |_| {}));\n-    assert_eq!(ok, vec![\"A.2.i.a\", \"A.2.i\", \"A.2\", \"A\"]);\n+        }, |_| {}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"A.2.i.a\", \"A.2.i\", \"A.2\", \"A\"]);\n     assert!(err.is_empty());\n \n     let Outcome { completed: ok, errors: err, .. } =\n-        forest.process_obligations(&mut C(|_| unreachable!(), |_| {}));\n+        forest.process_obligations(&mut C(|_| unreachable!(), |_| {}),\n+        DoCompleted::Yes);\n \n-    assert!(ok.is_empty());\n+    assert!(ok.unwrap().is_empty());\n     assert!(err.is_empty());\n }\n \n@@ -227,8 +228,8 @@ fn to_errors_no_throw() {\n                 \"A\" => ProcessResult::Changed(vec![\"A.1\", \"A.2\", \"A.3\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err.len(), 0);\n     let errors = forest.to_errors(());\n     assert_eq!(errors[0].backtrace, vec![\"A.1\", \"A\"]);\n@@ -248,8 +249,8 @@ fn diamond() {\n                 \"A\" => ProcessResult::Changed(vec![\"A.1\", \"A.2\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err.len(), 0);\n \n     let Outcome { completed: ok, errors: err, .. } =\n@@ -259,8 +260,8 @@ fn diamond() {\n                 \"A.2\" => ProcessResult::Changed(vec![\"D\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err.len(), 0);\n \n     let mut d_count = 0;\n@@ -270,9 +271,9 @@ fn diamond() {\n                 \"D\" => { d_count += 1; ProcessResult::Changed(vec![]) },\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n+        }, |_|{}), DoCompleted::Yes);\n     assert_eq!(d_count, 1);\n-    assert_eq!(ok, vec![\"D\", \"A.2\", \"A.1\", \"A\"]);\n+    assert_eq!(ok.unwrap(), vec![\"D\", \"A.2\", \"A.1\", \"A\"]);\n     assert_eq!(err.len(), 0);\n \n     let errors = forest.to_errors(());\n@@ -285,8 +286,8 @@ fn diamond() {\n                 \"A'\" => ProcessResult::Changed(vec![\"A'.1\", \"A'.2\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err.len(), 0);\n \n     let Outcome { completed: ok, errors: err, .. } =\n@@ -296,8 +297,8 @@ fn diamond() {\n                 \"A'.2\" => ProcessResult::Changed(vec![\"D'\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err.len(), 0);\n \n     let mut d_count = 0;\n@@ -307,9 +308,9 @@ fn diamond() {\n                 \"D'\" => { d_count += 1; ProcessResult::Error(\"operation failed\") },\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n+        }, |_|{}), DoCompleted::Yes);\n     assert_eq!(d_count, 1);\n-    assert_eq!(ok.len(), 0);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err, vec![super::Error {\n         error: \"operation failed\",\n         backtrace: vec![\"D'\", \"A'.1\", \"A'\"]\n@@ -333,8 +334,8 @@ fn done_dependency() {\n                 \"A: Sized\" | \"B: Sized\" | \"C: Sized\" => ProcessResult::Changed(vec![]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok, vec![\"C: Sized\", \"B: Sized\", \"A: Sized\"]);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"C: Sized\", \"B: Sized\", \"A: Sized\"]);\n     assert_eq!(err.len(), 0);\n \n     forest.register_obligation(\"(A,B,C): Sized\");\n@@ -348,8 +349,8 @@ fn done_dependency() {\n                         ]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok, vec![\"(A,B,C): Sized\"]);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"(A,B,C): Sized\"]);\n     assert_eq!(err.len(), 0);\n }\n \n@@ -371,8 +372,8 @@ fn orphan() {\n                 \"C2\" => ProcessResult::Changed(vec![]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok, vec![\"C2\", \"C1\"]);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap(), vec![\"C2\", \"C1\"]);\n     assert_eq!(err.len(), 0);\n \n     let Outcome { completed: ok, errors: err, .. } =\n@@ -382,8 +383,8 @@ fn orphan() {\n                 \"B\" => ProcessResult::Changed(vec![\"D\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err.len(), 0);\n \n     let Outcome { completed: ok, errors: err, .. } =\n@@ -393,8 +394,8 @@ fn orphan() {\n                 \"E\" => ProcessResult::Error(\"E is for error\"),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err, vec![super::Error {\n         error: \"E is for error\",\n         backtrace: vec![\"E\", \"A\"]\n@@ -406,8 +407,8 @@ fn orphan() {\n                 \"D\" => ProcessResult::Error(\"D is dead\"),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err, vec![super::Error {\n         error: \"D is dead\",\n         backtrace: vec![\"D\"]\n@@ -431,8 +432,8 @@ fn simultaneous_register_and_error() {\n                 \"B\" => ProcessResult::Changed(vec![\"A\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err, vec![super::Error {\n         error: \"An error\",\n         backtrace: vec![\"A\"]\n@@ -449,8 +450,8 @@ fn simultaneous_register_and_error() {\n                 \"B\" => ProcessResult::Changed(vec![\"A\"]),\n                 _ => unreachable!(),\n             }\n-        }, |_|{}));\n-    assert_eq!(ok.len(), 0);\n+        }, |_|{}), DoCompleted::Yes);\n+    assert_eq!(ok.unwrap().len(), 0);\n     assert_eq!(err, vec![super::Error {\n         error: \"An error\",\n         backtrace: vec![\"A\"]"}, {"sha": "3d17824608cc81b485a35440e272387b0b7884e3", "filename": "src/librustc_data_structures/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_data_structures%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsvh.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -31,7 +31,7 @@ impl Svh {\n     /// compute the SVH from some HIR, you want the `calculate_svh`\n     /// function found in `librustc_incremental`.\n     pub fn new(hash: u64) -> Svh {\n-        Svh { hash: hash }\n+        Svh { hash }\n     }\n \n     pub fn as_u64(&self) -> u64 {"}, {"sha": "6c7982242bfada275219bc82d01eac49235190b6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -952,7 +952,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.compilation_done.callback = box move |state| {\n                 old_callback(state);\n                 let sess = state.session;\n-                println!(\"Fuel used by {}: {}\",\n+                eprintln!(\"Fuel used by {}: {}\",\n                     sess.print_fuel_crate.as_ref().unwrap(),\n                     sess.print_fuel.get());\n             }"}, {"sha": "4ce87a9675a80d4f8f76740fc6eb58fc11170ed7", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -795,7 +795,7 @@ impl LintPass for ImproperCTypes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext, it: &hir::ForeignItem) {\n-        let mut vis = ImproperCTypesVisitor { cx: cx };\n+        let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir.get_foreign_abi(it.id);\n         if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n             match it.node {"}, {"sha": "c9df36c5e236aa1dce3d83cc7c7c248d088f5696", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         index.record(DefId::local(CRATE_DEF_INDEX),\n                      IsolatedEncoder::encode_info_for_mod,\n                      FromId(CRATE_NODE_ID, (&krate.module, &krate.attrs, &vis)));\n-        let mut visitor = EncodeVisitor { index: index };\n+        let mut visitor = EncodeVisitor { index };\n         krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n         for macro_def in &krate.exported_macros {\n             visitor.visit_macro_def(macro_def);"}, {"sha": "99badd5a03fe6ee9840bf0f0e9d985b100ed1035", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -453,7 +453,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n         let scope = &self.scopes[len - scope_count];\n         self.cfg.terminate(block, scope.source_info(span),\n-                           TerminatorKind::Goto { target: target });\n+                           TerminatorKind::Goto { target });\n     }\n \n     /// Creates a path that performs all required cleanup for dropping a generator.\n@@ -1019,7 +1019,7 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         } else {\n             let block = cfg.start_new_cleanup_block();\n             cfg.push_end_region(tcx, block, source_info(span), scope.region_scope);\n-            cfg.terminate(block, source_info(span), TerminatorKind::Goto { target: target });\n+            cfg.terminate(block, source_info(span), TerminatorKind::Goto { target });\n             *cached_block = Some(block);\n             block\n         }"}, {"sha": "1e279d8dd97083295f2d74e9cf94545bd6aad010", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -28,7 +28,7 @@ pub struct HaveBeenBorrowedLocals<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> HaveBeenBorrowedLocals<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>)\n                -> Self {\n-        HaveBeenBorrowedLocals { mir: mir }\n+        HaveBeenBorrowedLocals { mir }\n     }\n \n     pub fn mir(&self) -> &Mir<'tcx> {"}, {"sha": "c8faa34df8a2bcda20bbf9320f4709834807b373", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -21,7 +21,7 @@ pub struct MaybeStorageLive<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> MaybeStorageLive<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>)\n                -> Self {\n-        MaybeStorageLive { mir: mir }\n+        MaybeStorageLive { mir }\n     }\n \n     pub fn mir(&self) -> &Mir<'tcx> {"}, {"sha": "32f8752c31be7dfe92a27c3328912181fe8bcd28", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "0acb4052fd73e04d2852d66cffbe7042560fc064", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -571,7 +571,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                        })\n                                        .collect();\n \n-                        PatternKind::Leaf { subpatterns: subpatterns }\n+                        PatternKind::Leaf { subpatterns }\n                     }\n                     ty::Error => { // Avoid ICE (#50577)\n                         return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n@@ -778,13 +778,13 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         subpatterns,\n                     }\n                 } else {\n-                    PatternKind::Leaf { subpatterns: subpatterns }\n+                    PatternKind::Leaf { subpatterns }\n                 }\n             }\n \n             Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) => {\n-                PatternKind::Leaf { subpatterns: subpatterns }\n+                PatternKind::Leaf { subpatterns }\n             }\n \n             _ => {"}, {"sha": "8fde0c9b8afd93e78d25ff9f03468be8ac4edfce", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -10,6 +10,7 @@\n \n use std::fmt::Write;\n use std::hash::Hash;\n+use std::ops::RangeInclusive;\n \n use syntax_pos::symbol::Symbol;\n use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf};\n@@ -122,6 +123,37 @@ fn path_format(path: &Vec<PathElem>) -> String {\n     out\n }\n \n+// Test if a range that wraps at overflow contains `test`\n+fn wrapping_range_contains(r: &RangeInclusive<u128>, test: u128) -> bool {\n+    let (lo, hi) = r.clone().into_inner();\n+    if lo > hi {\n+        // Wrapped\n+        (..=hi).contains(&test) || (lo..).contains(&test)\n+    } else {\n+        // Normal\n+        r.contains(&test)\n+    }\n+}\n+\n+// Formats such that a sentence like \"expected something {}\" to mean\n+// \"expected something <in the given range>\" makes sense.\n+fn wrapping_range_format(r: &RangeInclusive<u128>, max_hi: u128) -> String {\n+    let (lo, hi) = r.clone().into_inner();\n+    debug_assert!(hi <= max_hi);\n+    if lo > hi {\n+        format!(\"less or equal to {}, or greater or equal to {}\", hi, lo)\n+    } else {\n+        if lo == 0 {\n+            debug_assert!(hi < max_hi, \"should not be printing if the range covers everything\");\n+            format!(\"less or equal to {}\", hi)\n+        } else if hi == max_hi {\n+            format!(\"greater or equal to {}\", lo)\n+        } else {\n+            format!(\"in the range {:?}\", r)\n+        }\n+    }\n+}\n+\n struct ValidityVisitor<'rt, 'a: 'rt, 'mir: 'rt, 'tcx: 'a+'rt+'mir, M: Machine<'a, 'mir, 'tcx>+'rt> {\n     /// The `path` may be pushed to, but the part that is present when a function\n     /// starts must not be changed!  `visit_fields` and `visit_array` rely on\n@@ -428,8 +460,8 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                         \"a pointer\",\n                         self.path,\n                         format!(\n-                            \"something that cannot possibly be outside the (wrapping) range {:?}\",\n-                            layout.valid_range\n+                            \"something that cannot possibly fail to be {}\",\n+                            wrapping_range_format(&layout.valid_range, max_hi)\n                         )\n                     );\n                 }\n@@ -440,33 +472,14 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n             }\n         };\n         // Now compare. This is slightly subtle because this is a special \"wrap-around\" range.\n-        use std::ops::RangeInclusive;\n-        let in_range = |bound: RangeInclusive<u128>| bound.contains(&bits);\n-        if lo > hi {\n-            // wrapping around\n-            if in_range(0..=hi) || in_range(lo..=max_hi) {\n-                Ok(())\n-            } else {\n-                validation_failure!(\n-                    bits,\n-                    self.path,\n-                    format!(\"something in the range {:?} or {:?}\", 0..=hi, lo..=max_hi)\n-                )\n-            }\n+        if wrapping_range_contains(&layout.valid_range, bits) {\n+            Ok(())\n         } else {\n-            if in_range(layout.valid_range.clone()) {\n-                Ok(())\n-            } else {\n-                validation_failure!(\n-                    bits,\n-                    self.path,\n-                    if hi == max_hi {\n-                        format!(\"something greater or equal to {}\", lo)\n-                    } else {\n-                        format!(\"something in the range {:?}\", layout.valid_range)\n-                    }\n-                )\n-            }\n+            validation_failure!(\n+                bits,\n+                self.path,\n+                format!(\"something {}\", wrapping_range_format(&layout.valid_range, max_hi))\n+            )\n         }\n     }\n "}, {"sha": "5de289068b25509db5fd4e49de7e217b763fdde2", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -495,7 +495,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let target = self.patch.new_block(BasicBlockData {\n             statements: vec![assign],\n             terminator: Some(Terminator {\n-                kind: TerminatorKind::Goto { target: target },\n+                kind: TerminatorKind::Goto { target },\n                 ..*terminator\n             }),\n             is_cleanup: false,"}, {"sha": "f643870dec207c6e28bf08ea42460bbf6b735212", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -302,7 +302,7 @@ impl MirPass for SimplifyLocals {\n \n         let map = make_local_map(&mut mir.local_decls, marker.locals);\n         // Update references to all vars and tmps now\n-        LocalUpdater { map: map }.visit_mir(mir);\n+        LocalUpdater { map }.visit_mir(mir);\n         mir.local_decls.shrink_to_fit();\n     }\n }"}, {"sha": "b24898095435b4dc227b3cadd09428c6f8c2c2a2", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -57,7 +57,7 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::Assert {\n                     target, cond: Operand::Constant(ref c), expected, ..\n                 } if (c.literal.assert_bool(tcx) == Some(true)) == expected => {\n-                    TerminatorKind::Goto { target: target }\n+                    TerminatorKind::Goto { target }\n                 },\n                 TerminatorKind::FalseEdges { real_target, .. } => {\n                     TerminatorKind::Goto { target: real_target }"}, {"sha": "b878a330ab6490b562e54d0eeae0d97c731176dd", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -672,5 +672,5 @@ pub fn check_crate(session: &Session, krate: &Crate) {\n             is_banned: false,\n         }, krate);\n \n-    visit::walk_crate(&mut AstValidator { session: session }, krate)\n+    visit::walk_crate(&mut AstValidator { session }, krate)\n }"}, {"sha": "241db271177b7e543ee00c5492eeeb6657ee9e21", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -4422,7 +4422,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         // declared as public (due to pruning, we don't explore\n                         // outside crate private modules => no need to check this)\n                         if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n-                            candidates.push(ImportSuggestion { path: path });\n+                            candidates.push(ImportSuggestion { path });\n                         }\n                     }\n                 }\n@@ -4519,7 +4519,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                             span: name_binding.span,\n                             segments: path_segments,\n                         };\n-                        result = Some((module, ImportSuggestion { path: path }));\n+                        result = Some((module, ImportSuggestion { path }));\n                     } else {\n                         // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {"}, {"sha": "ca336ceb381c5f5f61ee474c014b09da25e39970", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -71,7 +71,7 @@ impl<'b> JsonDumper<CallbackOutput<'b>> {\n         config: Config,\n     ) -> JsonDumper<CallbackOutput<'b>> {\n         JsonDumper {\n-            output: CallbackOutput { callback: callback },\n+            output: CallbackOutput { callback },\n             config: config.clone(),\n             result: Analysis::new(config),\n         }"}, {"sha": "45c5457c9e14016a62a39ed72c7842313481e646", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -595,7 +595,9 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if num_impl_m_type_params != num_trait_m_type_params {\n         let impl_m_node_id = tcx.hir.as_local_node_id(impl_m.def_id).unwrap();\n         let impl_m_item = tcx.hir.expect_impl_item(impl_m_node_id);\n-        let span = if impl_m_item.generics.params.is_empty() {\n+        let span = if impl_m_item.generics.params.is_empty()\n+            || impl_m_item.generics.span.is_dummy()  // impl Trait in argument position (#55374)\n+        {\n             impl_m_span\n         } else {\n             impl_m_item.generics.span"}, {"sha": "266b9e3c0abad33bf63ff5b9f455e98907d1c2dc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -993,7 +993,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             AdtField { ty: field_ty, span: field.span }\n         })\n         .collect();\n-        AdtVariant { fields: fields }\n+        AdtVariant { fields }\n     }\n \n     fn enum_variants(&self, enum_def: &hir::EnumDef) -> Vec<AdtVariant<'tcx>> {"}, {"sha": "14c6864434fcfcbf5cd15c7c59d6c3da64226544", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut orphan = OrphanChecker { tcx: tcx };\n+    let mut orphan = OrphanChecker { tcx };\n     tcx.hir.krate().visit_all_item_likes(&mut orphan);\n }\n "}, {"sha": "0894c1d49e80e7e7e0ae97770063d8af35ba2d90", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut unsafety = UnsafetyChecker { tcx: tcx };\n+    let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir.krate().visit_all_item_likes(&mut unsafety);\n }\n "}, {"sha": "be09cfce8cae6424ad9dc1fbde3ba554e211f3db", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -64,7 +64,7 @@ struct OnlySelfBounds(bool);\n // Main entry point\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let mut visitor = CollectItemTypesVisitor { tcx: tcx };\n+    let mut visitor = CollectItemTypesVisitor { tcx };\n     tcx.hir\n        .krate()\n        .visit_all_item_likes(&mut visitor.as_deep_visitor());"}, {"sha": "74a53f7fca273fa81146fa2a677fdd6d72f26f3a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -62,7 +62,7 @@ pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    tcx.hir.krate().visit_all_item_likes(&mut ImplWfCheck { tcx: tcx });\n+    tcx.hir.krate().visit_all_item_likes(&mut ImplWfCheck { tcx });\n }\n \n struct ImplWfCheck<'a, 'tcx: 'a> {"}, {"sha": "c39b71e33ca0cecfe1491bcead121dd6e4c5f472", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -2966,7 +2966,7 @@ impl<'tcx> Clean<Item> for ty::VariantDef {\n             source: cx.tcx.def_span(self.did).clean(cx),\n             visibility: Some(Inherited),\n             def_id: self.did,\n-            inner: VariantItem(Variant { kind: kind }),\n+            inner: VariantItem(Variant { kind }),\n             stability: get_stability(cx, self.did),\n             deprecation: get_deprecation(cx, self.did),\n         }"}, {"sha": "8de415e8aed5cc25ec6577e59f8a461034076098", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -3418,7 +3418,7 @@ mod test_map {\n                 slot.borrow_mut()[k] += 1;\n             });\n \n-            Droppable { k: k }\n+            Droppable { k }\n         }\n     }\n "}, {"sha": "f4703dec187b8cf0843f973e2c80bbf0c4b973f1", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -877,7 +877,7 @@ impl OpenOptions {\n \n     fn _open(&self, path: &Path) -> io::Result<File> {\n         let inner = fs_imp::File::open(path, &self.0)?;\n-        Ok(File { inner: inner })\n+        Ok(File { inner })\n     }\n }\n "}, {"sha": "12995d08683450175af2c3fe2b5b1377c70ab320", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -150,7 +150,7 @@ pub struct Repeat { byte: u8 }\n /// assert_eq!(buffer, [0b101, 0b101, 0b101]);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn repeat(byte: u8) -> Repeat { Repeat { byte: byte } }\n+pub fn repeat(byte: u8) -> Repeat { Repeat { byte } }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Repeat {"}, {"sha": "81f98a55c117149bd5bfe8aa0e9f3d907853eb81", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -931,7 +931,7 @@ impl<T> fmt::Debug for Sender<T> {\n \n impl<T> SyncSender<T> {\n     fn new(inner: Arc<sync::Packet<T>>) -> SyncSender<T> {\n-        SyncSender { inner: inner }\n+        SyncSender { inner }\n     }\n \n     /// Sends a value on this synchronous channel."}, {"sha": "3d66998b9f549e91108e3dfdd8b7e7b77fcfd5b5", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -32,7 +32,7 @@ impl Instant {\n             let mut t = mem::uninitialized();\n             let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, &mut t);\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            Instant { t: t }\n+            Instant { t }\n         }\n     }\n \n@@ -71,7 +71,7 @@ impl SystemTime {\n             let mut t = mem::uninitialized();\n             let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, &mut t);\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            SystemTime { t: t }\n+            SystemTime { t }\n         }\n     }\n "}, {"sha": "d61103a872f9e6781d2f890cba298ae09ae56622", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -21,7 +21,7 @@ pub struct FileDesc {\n \n impl FileDesc {\n     pub fn new(fd: usize) -> FileDesc {\n-        FileDesc { fd: fd }\n+        FileDesc { fd }\n     }\n \n     pub fn raw(&self) -> usize { self.fd }"}, {"sha": "6059406997dff100f458c1e4c64f180d81f2754c", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -264,7 +264,7 @@ impl File {\n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n         let mut stat = syscall::Stat::default();\n         cvt(syscall::fstat(self.0.raw(), &mut stat))?;\n-        Ok(FileAttr { stat: stat })\n+        Ok(FileAttr { stat })\n     }\n \n     pub fn fsync(&self) -> io::Result<()> {"}, {"sha": "1e3783705537ab274b651a115a723dea7a53f5b3", "filename": "src/libstd/sys/redox/syscall/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -19,7 +19,7 @@ pub type Result<T> = result::Result<T, Error>;\n \n impl Error {\n     pub fn new(errno: i32) -> Error {\n-        Error { errno: errno }\n+        Error { errno }\n     }\n \n     pub fn mux(result: Result<usize>) -> usize {"}, {"sha": "bab91b16e6c0a4f3bdec59a71c14a8570c7a87d8", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -38,7 +38,7 @@ impl Thread {\n             panic!(\"thread failed to exit\");\n         } else {\n             mem::forget(p);\n-            Ok(Thread { id: id })\n+            Ok(Thread { id })\n         }\n     }\n "}, {"sha": "aac6d2704e790cd0519d77e44a27a5c46e4c8ea4", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -187,7 +187,7 @@ impl SystemTime {\n \n impl From<syscall::TimeSpec> for SystemTime {\n     fn from(t: syscall::TimeSpec) -> SystemTime {\n-        SystemTime { t: Timespec { t: t } }\n+        SystemTime { t: Timespec { t } }\n     }\n }\n "}, {"sha": "af33d2636fb1fef1bd8ce5facaade975585e514c", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -41,7 +41,7 @@ fn max_len() -> usize {\n \n impl FileDesc {\n     pub fn new(fd: c_int) -> FileDesc {\n-        FileDesc { fd: fd }\n+        FileDesc { fd }\n     }\n \n     pub fn raw(&self) -> c_int { self.fd }"}, {"sha": "add06aec11b64a294d558f57b9f84383bea0f454", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -317,7 +317,7 @@ impl DirEntry {\n         cvt(unsafe {\n             fstatat64(fd, self.entry.d_name.as_ptr(), &mut stat, libc::AT_SYMLINK_NOFOLLOW)\n         })?;\n-        Ok(FileAttr { stat: stat })\n+        Ok(FileAttr { stat })\n     }\n \n     #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\")))]\n@@ -526,7 +526,7 @@ impl File {\n         cvt(unsafe {\n             fstat64(self.0.raw(), &mut stat)\n         })?;\n-        Ok(FileAttr { stat: stat })\n+        Ok(FileAttr { stat })\n     }\n \n     pub fn fsync(&self) -> io::Result<()> {\n@@ -807,7 +807,7 @@ pub fn stat(p: &Path) -> io::Result<FileAttr> {\n     cvt(unsafe {\n         stat64(p.as_ptr(), &mut stat)\n     })?;\n-    Ok(FileAttr { stat: stat })\n+    Ok(FileAttr { stat })\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n@@ -816,7 +816,7 @@ pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n     cvt(unsafe {\n         lstat64(p.as_ptr(), &mut stat)\n     })?;\n-    Ok(FileAttr { stat: stat })\n+    Ok(FileAttr { stat })\n }\n \n pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {"}, {"sha": "af51f8a8e257a0875f8154ebb298040b6fdf7b88", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -217,7 +217,7 @@ mod inner {\n \n     impl From<libc::timespec> for SystemTime {\n         fn from(t: libc::timespec) -> SystemTime {\n-            SystemTime { t: Timespec { t: t } }\n+            SystemTime { t: Timespec { t } }\n         }\n     }\n \n@@ -332,7 +332,7 @@ mod inner {\n \n     impl From<libc::timespec> for SystemTime {\n         fn from(t: libc::timespec) -> SystemTime {\n-            SystemTime { t: Timespec { t: t } }\n+            SystemTime { t: Timespec { t } }\n         }\n     }\n "}, {"sha": "ff1ee0d26fe5412a944a55a733426e857fed7c73", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -241,7 +241,7 @@ impl<'a> DropGuard<'a> {\n     fn new(lock: &'a Mutex) -> DropGuard<'a> {\n         unsafe {\n             lock.lock();\n-            DropGuard { lock: lock }\n+            DropGuard { lock }\n         }\n     }\n }"}, {"sha": "54bcbc76b1a3c347ba64b23fa03087f61e3ae92d", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -170,7 +170,7 @@ impl fmt::Debug for SystemTime {\n \n impl From<c::FILETIME> for SystemTime {\n     fn from(t: c::FILETIME) -> SystemTime {\n-        SystemTime { t: t }\n+        SystemTime { t }\n     }\n }\n "}, {"sha": "af93571a604828508c7245610601f95b5544f946", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -174,7 +174,7 @@ impl<T> PoisonError<T> {\n     /// [`RwLock::read`]: ../../std/sync/struct.RwLock.html#method.read\n     #[stable(feature = \"sync_poison\", since = \"1.2.0\")]\n     pub fn new(guard: T) -> PoisonError<T> {\n-        PoisonError { guard: guard }\n+        PoisonError { guard }\n     }\n \n     /// Consumes this error indicating that a lock is poisoned, returning the"}, {"sha": "19ce932aa1233f6985158b03ef75fa05d5d641eb", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -67,7 +67,7 @@ impl CodePoint {\n     /// Only use when `value` is known to be less than or equal to 0x10FFFF.\n     #[inline]\n     pub unsafe fn from_u32_unchecked(value: u32) -> CodePoint {\n-        CodePoint { value: value }\n+        CodePoint { value }\n     }\n \n     /// Creates a new `CodePoint` if the value is a valid code point.\n@@ -76,7 +76,7 @@ impl CodePoint {\n     #[inline]\n     pub fn from_u32(value: u32) -> Option<CodePoint> {\n         match value {\n-            0 ..= 0x10FFFF => Some(CodePoint { value: value }),\n+            0 ..= 0x10FFFF => Some(CodePoint { value }),\n             _ => None\n         }\n     }"}, {"sha": "6487665947729e21f277a768503a8cb8cbeb9d40", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -455,6 +455,11 @@ pub fn find_by_name<'a>(attrs: &'a [Attribute], name: &str) -> Option<&'a Attrib\n     attrs.iter().find(|attr| attr.check_name(name))\n }\n \n+pub fn filter_by_name<'a>(attrs: &'a [Attribute], name: &'a str)\n+    -> impl Iterator<Item = &'a Attribute> {\n+    attrs.iter().filter(move |attr| attr.check_name(name))\n+}\n+\n pub fn first_attr_value_str_by_name(attrs: &[Attribute], name: &str) -> Option<Symbol> {\n     attrs.iter()\n         .find(|at| at.check_name(name))"}, {"sha": "e1ba8897a47f4d76d6df8cc457167bcddc5d9d3a", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -126,7 +126,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::T\n         }\n     }\n \n-    Box::new(ExpandResult { p: p })\n+    Box::new(ExpandResult { p })\n }\n \n // include_str! : read the given file, insert it as a literal string expr"}, {"sha": "55652c481bd3f07478d90588229b6c3ae755825a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1614,7 +1614,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n \n             ast::ItemKind::Struct(..) => {\n-                if let Some(attr) = attr::find_by_name(&i.attrs[..], \"repr\") {\n+                for attr in attr::filter_by_name(&i.attrs[..], \"repr\") {\n                     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n                         if item.check_name(\"simd\") {\n                             gate_feature_post!(&self, repr_simd, attr.span,"}, {"sha": "0e6e2f90693cf54861abc1ada9fd6d50a84670d5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -945,7 +945,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         ItemKind::Enum(enum_definition, generics) => {\n             let generics = folder.fold_generics(generics);\n             let variants = enum_definition.variants.move_map(|x| folder.fold_variant(x));\n-            ItemKind::Enum(ast::EnumDef { variants: variants }, generics)\n+            ItemKind::Enum(ast::EnumDef { variants }, generics)\n         }\n         ItemKind::Struct(struct_def, generics) => {\n             let generics = folder.fold_generics(generics);"}, {"sha": "c8a686da179fbbcba51d828313dcced3743ee9fc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -6929,7 +6929,7 @@ impl<'a> Parser<'a> {\n             _ => ()\n         }\n \n-        Ok(ast::EnumDef { variants: variants })\n+        Ok(ast::EnumDef { variants })\n     }\n \n     /// Parse an \"enum\" declaration"}, {"sha": "dba3972a3df99bac98bdd55de9acd59b8228f9a8", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -99,7 +99,7 @@\n \n // lldb-command:print padded_tuple\n // lldbg-check:[...]$4 = &[(6, 7), (8, 9)]\n-// lldbr-check:(&[(i32, i16)]) padded_tuple = { data_ptr = *0x555555555030 length = 2 }\n+// lldbr-check:(&[(i32, i16)]) padded_tuple = { data_ptr = *[...] length = 2 }\n \n // lldb-command:print padded_struct\n // lldbg-check:[...]$5 = &[AStruct { x: 10, y: 11, z: 12 }, AStruct { x: 13, y: 14, z: 15 }]"}, {"sha": "a12dad4489df92384837f0709350b449c40fc73e", "filename": "src/test/run-pass/optimization-fuel-0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -12,7 +12,8 @@\n \n use std::mem::size_of;\n \n-// compile-flags: -Z fuel=foo=0\n+// (#55495: The --error-format is to sidestep an issue in our test harness)\n+// compile-flags: --error-format human -Z fuel=foo=0\n \n struct S1(u8, u16, u8);\n struct S2(u8, u16, u8);"}, {"sha": "3ad405b2b50ff4db108c3e39f337a28379579f12", "filename": "src/test/run-pass/optimization-fuel-0.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/run-pass/optimization-fuel-0.stdout"}, {"sha": "1e76aaa48b761065cfb20c24e0ef6a5bfb7ffeb2", "filename": "src/test/run-pass/optimization-fuel-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -12,7 +12,8 @@\n \n use std::mem::size_of;\n \n-// compile-flags: -Z fuel=foo=1\n+// (#55495: The --error-format is to sidestep an issue in our test harness)\n+// compile-flags: --error-format human -Z fuel=foo=1\n \n struct S1(u8, u16, u8);\n struct S2(u8, u16, u8);"}, {"sha": "197e45219c3f8726fd710f5e8b0bcdce2379cffd", "filename": "src/test/run-pass/optimization-fuel-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/run-pass/optimization-fuel-1.stdout"}, {"sha": "ccc939657a146dadb74f584b6d06b68ab3e1b207", "filename": "src/test/rustdoc/issue-54705.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+pub trait ScopeHandle<'scope> {}\n+\n+\n+\n+// @has issue_54705/struct.ScopeFutureContents.html\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'scope, S> \\\n+// Send for ScopeFutureContents<'scope, S> where S: Sync\"\n+//\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'scope, S> \\\n+// Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n+pub struct ScopeFutureContents<'scope, S>\n+    where S: ScopeHandle<'scope>,\n+{\n+    dummy: &'scope S,\n+    this: Box<ScopeFuture<'scope, S>>,\n+}\n+\n+struct ScopeFuture<'scope, S>\n+    where S: ScopeHandle<'scope>,\n+{\n+    contents: ScopeFutureContents<'scope, S>,\n+}\n+\n+unsafe impl<'scope, S> Send for ScopeFuture<'scope, S>\n+    where S: ScopeHandle<'scope>,\n+{}\n+unsafe impl<'scope, S> Sync for ScopeFuture<'scope, S>\n+    where S: ScopeHandle<'scope>,\n+{}"}, {"sha": "cf87170a89d89d3ec3e6973626b3034a783aacfb", "filename": "src/test/ui/consts/const-eval/transmute-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/transmute-const.rs:15:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "0aa15c839387952f70474057d56d400c02cf0577", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -17,39 +17,48 @@ enum Enum {\n }\n union TransmuteEnum {\n     a: &'static u8,\n-    b: Enum,\n+    out: Enum,\n }\n \n // A pointer is guaranteed non-null\n-const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.b };\n+const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.out };\n //~^ ERROR is undefined behavior\n \n-// Invalid enum discriminant\n+// (Potentially) invalid enum discriminant\n #[repr(usize)]\n #[derive(Copy, Clone)]\n enum Enum2 {\n     A = 2,\n }\n+#[repr(transparent)]\n+#[derive(Copy, Clone)]\n+struct Wrap<T>(T);\n union TransmuteEnum2 {\n-    a: usize,\n-    b: Enum2,\n-    c: (),\n+    in1: usize,\n+    in2: &'static u8,\n+    in3: (),\n+    out1: Enum2,\n+    out2: Wrap<Enum2>, // something wrapping the enum so that we test layout first, not enum\n }\n-const BAD_ENUM2 : Enum2 = unsafe { TransmuteEnum2 { a: 0 }.b };\n+const BAD_ENUM2: Enum2 = unsafe { TransmuteEnum2 { in1: 0 }.out1 };\n+//~^ ERROR is undefined behavior\n+const BAD_ENUM3: Enum2 = unsafe { TransmuteEnum2 { in2: &0 }.out1 };\n+//~^ ERROR is undefined behavior\n+const BAD_ENUM4: Wrap<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out2 };\n //~^ ERROR is undefined behavior\n \n // Undef enum discriminant. In an arry to avoid `Scalar` layout.\n-const BAD_ENUM3 : [Enum2; 2] = [unsafe { TransmuteEnum2 { c: () }.b }; 2];\n+const BAD_ENUM_UNDEF: [Enum2; 2] = [unsafe { TransmuteEnum2 { in3: () }.out1 }; 2];\n //~^ ERROR is undefined behavior\n \n-// Invalid enum field content (mostly to test printing of apths for enum tuple\n+// Invalid enum field content (mostly to test printing of paths for enum tuple\n // variants and tuples).\n union TransmuteChar {\n     a: u32,\n     b: char,\n }\n // Need to create something which does not clash with enum layout optimizations.\n-const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n+const BAD_ENUM_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n //~^ ERROR is undefined behavior\n \n fn main() {"}, {"sha": "804c9643d8ae30f93dc42fae1187258f12a57bda", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1,35 +1,51 @@\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:24:1\n    |\n-LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.b };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n+LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.out };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:38:1\n+  --> $DIR/ub-enum.rs:43:1\n    |\n-LL | const BAD_ENUM2 : Enum2 = unsafe { TransmuteEnum2 { a: 0 }.b };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n+LL | const BAD_ENUM2: Enum2 = unsafe { TransmuteEnum2 { in1: 0 }.out1 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:42:1\n+  --> $DIR/ub-enum.rs:45:1\n    |\n-LL | const BAD_ENUM3 : [Enum2; 2] = [unsafe { TransmuteEnum2 { c: () }.b }; 2];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n+LL | const BAD_ENUM3: Enum2 = unsafe { TransmuteEnum2 { in2: &0 }.out1 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected a valid enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:52:1\n+  --> $DIR/ub-enum.rs:47:1\n    |\n-LL | const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .Some.0.1, but expected something in the range 0..=1114111\n+LL | const BAD_ENUM4: Wrap<Enum2> = unsafe { TransmuteEnum2 { in2: &0 }.out2 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected something that cannot possibly fail to be in the range 2..=2\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: aborting due to 4 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-enum.rs:51:1\n+   |\n+LL | const BAD_ENUM_UNDEF: [Enum2; 2] = [unsafe { TransmuteEnum2 { in3: () }.out1 }; 2];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-enum.rs:61:1\n+   |\n+LL | const BAD_ENUM_CHAR: Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .Some.0.1, but expected something less or equal to 1114111\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "113221959fb9c3e033fe99551f1c6304cc4ac349", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_transmute)]\n+#![feature(rustc_attrs, const_transmute)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;\n@@ -23,4 +23,18 @@ const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+// Also test other uses of rustc_layout_scalar_valid_range_start\n+\n+#[rustc_layout_scalar_valid_range_start(10)]\n+#[rustc_layout_scalar_valid_range_end(30)]\n+struct RestrictedRange1(u32);\n+const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n+//~^ ERROR it is undefined behavior to use this value\n+\n+#[rustc_layout_scalar_valid_range_start(30)]\n+#[rustc_layout_scalar_valid_range_end(10)]\n+struct RestrictedRange2(u32);\n+const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n+//~^ ERROR it is undefined behavior to use this value\n+\n fn main() {}"}, {"sha": "c50b0208f15ef947afed5cd384ba7ae6c0f8abcf", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -22,6 +22,22 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: aborting due to 3 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-nonnull.rs:31:1\n+   |\n+LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-nonnull.rs:37:1\n+   |\n+LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "c21690754f62cc5b0366b751f90ebab6fcd97847", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -66,31 +66,31 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:117:1\n    |\n LL | const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.<dyn-downcast>, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:121:1\n    |\n LL | const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:127:1\n    |\n LL | const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:130:1\n    |\n LL | const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "db78ead370b873769293c25c2d655b2a83a191aa", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub.rs:38:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something less or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "a70f2758abb5972bccadefc877be6432b6a5a540", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -11,4 +11,8 @@\n #[repr(simd)] //~ error: SIMD types are experimental\n struct Foo(u64, u64);\n \n+#[repr(C)]\n+#[repr(simd)] //~ error: SIMD types are experimental\n+struct Bar(u64, u64);\n+\n fn main() {}"}, {"sha": "2f98bd24d4f7994644f74d2f7b10767dfd1fb2cb", "filename": "src/test/ui/feature-gates/feature-gate-repr-simd.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr-simd.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -6,6 +6,14 @@ LL | #[repr(simd)] //~ error: SIMD types are experimental\n    |\n    = help: add #![feature(repr_simd)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/feature-gate-repr-simd.rs:15:1\n+   |\n+LL | #[repr(simd)] //~ error: SIMD types are experimental\n+   | ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_simd)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "65e3be288fdf72447a0a038a32a819775c655158", "filename": "src/test/ui/feature-gates/feature-gate-repr_packed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -11,4 +11,8 @@\n #[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experimental\n struct Foo(u64);\n \n+#[repr(C)]\n+#[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experimental\n+struct Bar(u64);\n+\n fn main() {}"}, {"sha": "ed89a3f6b3169373f6290c0ecf2eda56ffee56f9", "filename": "src/test/ui/feature-gates/feature-gate-repr_packed.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -6,6 +6,14 @@ LL | #[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experim\n    |\n    = help: add #![feature(repr_packed)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: the `#[repr(packed(n))]` attribute is experimental (see issue #33158)\n+  --> $DIR/feature-gate-repr_packed.rs:15:1\n+   |\n+LL | #[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experimental\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_packed)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "7b79807e4d7ff5df6ffa42a3e4a12a3ec698367d", "filename": "src/test/ui/issue-51947.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissue-51947.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissue-51947.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51947.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+#![crate_type = \"lib\"]\n+#![feature(linkage)]\n+\n+// MergeFunctions will merge these via an anonymous internal\n+// backing function, which must be named if ThinLTO buffers are used\n+\n+#[linkage = \"weak\"]\n+pub fn fn1(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}\n+\n+#[linkage = \"weak\"]\n+pub fn fn2(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}"}, {"sha": "18f78750b15fc4df1b1050f8a6235d7021e7f82e", "filename": "src/test/ui/issues/auxiliary/issue-11680.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-11680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-11680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-11680.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_11680.rs"}, {"sha": "b3b04b4a5ac13534824b834bff6100ab2d5c2193", "filename": "src/test/ui/issues/auxiliary/issue-16725.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-16725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-16725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-16725.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_16725.rs"}, {"sha": "3901d73382fcfa2df3c5fcf5e6367d0d29b5e678", "filename": "src/test/ui/issues/auxiliary/issue-17718-const-privacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-17718-const-privacy.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_17718_const_privacy.rs"}, {"sha": "55065174ca7596c9727ebabbe3f5245fc8230cd6", "filename": "src/test/ui/issues/auxiliary/issue-1920.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-1920.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-1920.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-1920.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_1920.rs"}, {"sha": "afdbf78aa8292ccf956343c257260e8b43ef9f12", "filename": "src/test/ui/issues/auxiliary/issue-21202.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-21202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-21202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-21202.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_21202.rs"}, {"sha": "f60311a9400b3d0acbfc22d2026a4e4ad478b0da", "filename": "src/test/ui/issues/auxiliary/issue-30123-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-30123-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-30123-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-30123-aux.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_30123_aux.rs"}, {"sha": "5a6db789282733319c8dbe7f1835bdf5bd4f2c98", "filename": "src/test/ui/issues/auxiliary/issue-41549.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-41549.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-41549.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-41549.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_41549.rs"}, {"sha": "7fa937e93b34b7a16bfe2346e3289d4872834d99", "filename": "src/test/ui/issues/auxiliary/issue-5844-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-5844-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-5844-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-5844-aux.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/issue_5844_aux.rs"}, {"sha": "5547458abbef8e1a8fd281adc66f9751af639e02", "filename": "src/test/ui/issues/auxiliary/lint-stability.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Flint-stability.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/lint_stability.rs"}, {"sha": "37ee10c8d37333ec6e64793919ab8a1f504e14ca", "filename": "src/test/ui/issues/auxiliary/private-trait-xc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fprivate-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fprivate-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fprivate-trait-xc.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/private_trait_xc.rs"}, {"sha": "95b2d62e42625a31cd0538d78ab9ac548094950b", "filename": "src/test/ui/issues/auxiliary/xcrate-issue-43189-a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-43189-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-43189-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-43189-a.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/xcrate_issue_43189_a.rs"}, {"sha": "a396c31e21d5a6214a86e3693813b54c842f3325", "filename": "src/test/ui/issues/auxiliary/xcrate-issue-43189-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-43189-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-43189-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-43189-b.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/xcrate_issue_43189_b.rs"}, {"sha": "80f877f834d8babc4a30a158b007a658bfad2939", "filename": "src/test/ui/issues/auxiliary/xcrate-issue-46112-rexport-core.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-46112-rexport-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-46112-rexport-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fxcrate-issue-46112-rexport-core.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/auxiliary/xcrate_issue_46112_rexport_core.rs"}, {"sha": "f962704dc75a5755d00bc004275f1e92b67fe230", "filename": "src/test/ui/issues/issue-11593.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-11593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-11593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11593.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:private_trait_xc.rs\n+// aux-build:private-trait-xc.rs\n \n extern crate private_trait_xc;\n "}, {"sha": "209b63104fa02876154b05c34f8a46bf5a156335", "filename": "src/test/ui/issues/issue-11680.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-11680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-11680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11680.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_11680.rs\n+// aux-build:issue-11680.rs\n \n extern crate issue_11680 as other;\n "}, {"sha": "659ffb2c98408a9c950a6030c0117f6a59b7bc60", "filename": "src/test/ui/issues/issue-16725.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-16725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-16725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16725.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_16725.rs\n+// aux-build:issue-16725.rs\n \n extern crate issue_16725 as foo;\n "}, {"sha": "60eb4b7126dae753768edfb9361b9bc5c6fcd35e", "filename": "src/test/ui/issues/issue-17718-const-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_17718_const_privacy.rs\n+// aux-build:issue-17718-const-privacy.rs\n \n extern crate issue_17718_const_privacy as other;\n "}, {"sha": "7ba655805829aa59857066c5e0b727ac98689eef", "filename": "src/test/ui/issues/issue-1920-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -10,7 +10,7 @@\n \n //! Test that absolute path names are correct when a crate is not linked into the root namespace\n \n-// aux-build:issue_1920.rs\n+// aux-build:issue-1920.rs\n \n mod foo {\n     pub extern crate issue_1920;"}, {"sha": "bf4817aaf34dc067c22ffac27172e3757a1b6a12", "filename": "src/test/ui/issues/issue-1920-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -10,7 +10,7 @@\n \n //! Test that when a crate is linked under another name that name is used in global paths\n \n-// aux-build:issue_1920.rs\n+// aux-build:issue-1920.rs\n \n extern crate issue_1920 as bar;\n "}, {"sha": "a70e958630f28e1bcfe7d69363049efe5f4e2ae0", "filename": "src/test/ui/issues/issue-1920-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -10,7 +10,7 @@\n \n //! Test that when a crate is linked multiple times that the shortest absolute path name is used\n \n-// aux-build:issue_1920.rs\n+// aux-build:issue-1920.rs\n \n mod foo {\n     pub extern crate issue_1920;"}, {"sha": "fa4b515c81c00c5f3e89c5a0e1fa45c6d7abbb00", "filename": "src/test/ui/issues/issue-21202.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-21202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-21202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21202.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_21202.rs\n+// aux-build:issue-21202.rs\n \n extern crate issue_21202 as crate1;\n "}, {"sha": "494b446dd3ff2cb4a97188b1c4bb31a66dae3fd1", "filename": "src/test/ui/issues/issue-28075.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-28075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-28075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28075.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -10,7 +10,7 @@\n \n // Unstable entities should be caught in import lists\n \n-// aux-build:lint_stability.rs\n+// aux-build:lint-stability.rs\n \n #![allow(warnings)]\n "}, {"sha": "7593bb35add097969de0bbe89e6996be611b9df7", "filename": "src/test/ui/issues/issue-28388-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-28388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-28388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28388-3.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -10,7 +10,7 @@\n \n // Prefix in imports with empty braces should be resolved and checked privacy, stability, etc.\n \n-// aux-build:lint_stability.rs\n+// aux-build:lint-stability.rs\n \n extern crate lint_stability;\n "}, {"sha": "39278cffa122a431e962273afa2ba091be29ad2a", "filename": "src/test/ui/issues/issue-30123.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-30123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-30123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_30123_aux.rs\n+// aux-build:issue-30123-aux.rs\n \n extern crate issue_30123_aux;\n use issue_30123_aux::*;"}, {"sha": "2b223bac8e67b7d849f19e6387a916c404878107", "filename": "src/test/ui/issues/issue-32829-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue32829.rs"}, {"sha": "6d6b94ca4bc6d2c36db553142a8b13e176ca42c2", "filename": "src/test/ui/issues/issue-32829-2.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829-2.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1,87 +1,87 @@\n error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:17:9\n+  --> $DIR/issue-32829-2.rs:17:9\n    |\n LL |         5;\n    |         ^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue32829.rs:25:9\n+  --> $DIR/issue-32829-2.rs:25:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:25:9\n+  --> $DIR/issue-32829-2.rs:25:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0658]: statements in constants are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:34:9\n+  --> $DIR/issue-32829-2.rs:34:9\n    |\n LL |         valid();\n    |         ^^^^^^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:42:9\n+  --> $DIR/issue-32829-2.rs:42:9\n    |\n LL |         5;\n    |         ^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue32829.rs:50:9\n+  --> $DIR/issue-32829-2.rs:50:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:50:9\n+  --> $DIR/issue-32829-2.rs:50:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:59:9\n+  --> $DIR/issue-32829-2.rs:59:9\n    |\n LL |         valid();\n    |         ^^^^^^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:67:9\n+  --> $DIR/issue-32829-2.rs:67:9\n    |\n LL |         5;\n    |         ^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue32829.rs:75:9\n+  --> $DIR/issue-32829-2.rs:75:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n \n error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:75:9\n+  --> $DIR/issue-32829-2.rs:75:9\n    |\n LL |         invalid();\n    |         ^^^^^^^^^\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/issue32829.rs:84:9\n+  --> $DIR/issue-32829-2.rs:84:9\n    |\n LL |         valid();\n    |         ^^^^^^^", "previous_filename": "src/test/ui/issues/issue32829.stderr"}, {"sha": "dd58735209b8f2e3dff27a5cd79f13a3ac88ae44", "filename": "src/test/ui/issues/issue-38875/auxiliary/issue-38875-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-38875%2Fauxiliary%2Fissue-38875-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-38875%2Fauxiliary%2Fissue-38875-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38875%2Fauxiliary%2Fissue-38875-b.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-38875/auxiliary/issue_38875_b.rs"}, {"sha": "74db92cb8280217e8577a831b6b8812050333cb9", "filename": "src/test/ui/issues/issue-38875/issue-38875.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-38875%2Fissue-38875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-38875%2Fissue-38875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38875%2Fissue-38875.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_38875_b.rs\n+// aux-build:issue-38875-b.rs\n // compile-pass\n \n extern crate issue_38875_b;", "previous_filename": "src/test/ui/issues/issue-38875/issue_38875.rs"}, {"sha": "4b079ace3ca328258fc5e13cd77c033cfa871a13", "filename": "src/test/ui/issues/issue-40827.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-40827.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-40827.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-40827.rs"}, {"sha": "dd0ebf96d19e4cfd5b23e5fb67de87b8345c7161", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-40827.stderr"}, {"sha": "de52fcfe327227b82a6a0bb8ee71e4b6f0192b84", "filename": "src/test/ui/issues/issue-41549.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41549.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41549.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41549.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_41549.rs\n+// aux-build:issue-41549.rs\n \n \n extern crate issue_41549;"}, {"sha": "0b714432f161578a823ccfdb17113c31321679d3", "filename": "src/test/ui/issues/issue-41652/auxiliary/issue-41652-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fauxiliary%2Fissue-41652-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fauxiliary%2Fissue-41652-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fauxiliary%2Fissue-41652-b.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-41652/auxiliary/issue_41652_b.rs"}, {"sha": "4b42c0475eb6744eb5638b3a19477e038be9d75d", "filename": "src/test/ui/issues/issue-41652/issue-41652.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_41652_b.rs\n+// aux-build:issue-41652-b.rs\n \n extern crate issue_41652_b;\n ", "previous_filename": "src/test/ui/issues/issue-41652/issue_41652.rs"}, {"sha": "ed5eb360298b7819f225cceb9dfccb78d07f5612", "filename": "src/test/ui/issues/issue-41652/issue-41652.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41652%2Fissue-41652.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1,5 +1,5 @@\n error[E0689]: can't call method `f` on ambiguous numeric type `{integer}`\n-  --> $DIR/issue_41652.rs:19:11\n+  --> $DIR/issue-41652.rs:19:11\n    |\n LL |         3.f()\n    |           ^", "previous_filename": "src/test/ui/issues/issue-41652/issue_41652.stderr"}, {"sha": "7018198aff55b270173a37d8f6a6baa8f203deb5", "filename": "src/test/ui/issues/issue-43189.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-43189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-43189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -12,8 +12,8 @@\n // paths rooted from `std` to be misrendered in the diagnostic output.\n \n // ignore-windows\n-// aux-build:xcrate_issue_43189_a.rs\n-// aux-build:xcrate_issue_43189_b.rs\n+// aux-build:xcrate-issue-43189-a.rs\n+// aux-build:xcrate-issue-43189-b.rs\n \n extern crate xcrate_issue_43189_b;\n fn main() {"}, {"sha": "56eb1541e1f6878fe29ed21b618cfe7236715975", "filename": "src/test/ui/issues/issue-45829/auxiliary/issue-45829-a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fauxiliary%2Fissue-45829-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fauxiliary%2Fissue-45829-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fauxiliary%2Fissue-45829-a.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-45829/auxiliary/issue_45829_a.rs"}, {"sha": "56eb1541e1f6878fe29ed21b618cfe7236715975", "filename": "src/test/ui/issues/issue-45829/auxiliary/issue-45829-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fauxiliary%2Fissue-45829-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fauxiliary%2Fissue-45829-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Fauxiliary%2Fissue-45829-b.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-45829/auxiliary/issue_45829_b.rs"}, {"sha": "6befee331d5ae4da33d7c160195e6f6de565e470", "filename": "src/test/ui/issues/issue-45829/rename-extern-vs-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-vs-use.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_45829_b.rs\n+// aux-build:issue-45829-b.rs\n \n mod foo {\n     pub mod bar {}"}, {"sha": "61c7e915fe88c6495d337a37de8814bb7dcee66c", "filename": "src/test/ui/issues/issue-45829/rename-extern-with-tab.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern-with-tab.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_45829_a.rs\n-// aux-build:issue_45829_b.rs\n+// aux-build:issue-45829-a.rs\n+// aux-build:issue-45829-b.rs\n \n extern crate issue_45829_a;\n extern  crate    issue_45829_b  as  issue_45829_a;"}, {"sha": "41e3e8bbe1452ca915bcfb4507138dd0933b8344", "filename": "src/test/ui/issues/issue-45829/rename-extern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-extern.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_45829_a.rs\n-// aux-build:issue_45829_b.rs\n+// aux-build:issue-45829-a.rs\n+// aux-build:issue-45829-b.rs\n \n extern crate issue_45829_a;\n extern crate issue_45829_b as issue_45829_a;"}, {"sha": "9a2ec7a527326e02489790f3857ce8d41d5ac20e", "filename": "src/test/ui/issues/issue-45829/rename-use-vs-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45829%2Frename-use-vs-extern.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue_45829_b.rs\n+// aux-build:issue-45829-b.rs\n \n extern crate issue_45829_b;\n use std as issue_45829_b;"}, {"sha": "202c67e584c5dfa5000c286e8e374fb78b685737", "filename": "src/test/ui/issues/issue-46112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-46112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-46112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46112.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -12,7 +12,7 @@\n // paths rooted from `std` to be misrendered in the diagnostic output.\n \n // ignore-windows\n-// aux-build:xcrate_issue_46112_rexport_core.rs\n+// aux-build:xcrate-issue-46112-rexport-core.rs\n \n extern crate xcrate_issue_46112_rexport_core;\n fn test(r: Result<Option<()>, &'static str>) { }"}, {"sha": "7f7b349c3a0bf034e03648fc74120719c8c4c332", "filename": "src/test/ui/issues/issue-49556.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-49556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-49556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49556.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-49556.rs"}, {"sha": "4c67fb3bef10395e305cb1f4364746f7ae5e13be", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-deref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option_deref.rs"}, {"sha": "3e255ca6539b9702250b25332b24093ab9e9a4f6", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-deref.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-deref.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `deref` found for type `std::option::Option<{integer}>` in the current scope\n-  --> $DIR/option_deref.rs:14:29\n+  --> $DIR/option-deref.rs:14:29\n    |\n LL |     let _result = &Some(42).deref();\n    |                             ^^^^^", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option_deref.stderr"}, {"sha": "5d1e7472d8f18f6c3b1b9f7c217a788e63a913b0", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-err.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result_deref_err.rs"}, {"sha": "57b5d07afb4abfbbe5f9ea5b91e46d30283f5146", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-err.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-err.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `deref_err` found for type `std::result::Result<_, {integer}>` in the current scope\n-  --> $DIR/result_deref_err.rs:14:28\n+  --> $DIR/result-deref-err.rs:14:28\n    |\n LL |     let _result = &Err(41).deref_err();\n    |                            ^^^^^^^^^", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result_deref_err.stderr"}, {"sha": "bee8e0c062bae169856b63b8be120380d558ccd5", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result_deref_ok.rs"}, {"sha": "ee0c439715bd952ee9b74ff942945b1e3e0b218d", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref-ok.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref-ok.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `deref_ok` found for type `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result_deref_ok.rs:14:27\n+  --> $DIR/result-deref-ok.rs:14:27\n    |\n LL |     let _result = &Ok(42).deref_ok();\n    |                           ^^^^^^^^", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result_deref_ok.stderr"}, {"sha": "73bdf0b9209077781e11b12cc72de68192b69499", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result_deref.rs"}, {"sha": "46fee660f664008002f942f1016526fcdb088088", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-deref.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-deref.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `deref` found for type `std::result::Result<{integer}, _>` in the current scope\n-  --> $DIR/result_deref.rs:14:27\n+  --> $DIR/result-deref.rs:14:27\n    |\n LL |     let _result = &Ok(42).deref();\n    |                           ^^^^^", "previous_filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result_deref.stderr"}, {"sha": "a3edecb94f7c5d107f082bac1a16decf92004caa", "filename": "src/test/ui/issues/issue-51602.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-51602.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-51602.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51602.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-51602.rs"}, {"sha": "d50ee64cf52904b77522e592021e59d73e758044", "filename": "src/test/ui/issues/issue-51602.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-51602.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-51602.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51602.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-51602.stderr"}, {"sha": "d40e2bd3d530cb27460b2b52f877fd4f4d3fd65c", "filename": "src/test/ui/issues/issue-52717.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-52717.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-52717.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52717.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-52717.rs"}, {"sha": "0ef5a84671d8de20277659c321200082c8ba81ae", "filename": "src/test/ui/issues/issue-52717.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-52717.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-52717.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52717.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-52717.stderr"}, {"sha": "2ece0ee9feeaf942b926b10dfeb0480db8f5c818", "filename": "src/test/ui/issues/issue-52992.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52992.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-52992.rs"}, {"sha": "8c75ea45a617089037f40b0bd304936809a88001", "filename": "src/test/ui/issues/issue-53251.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53251.rs"}, {"sha": "51ea745bedb57c1e6f7c7bcfd36dca1078f30a95", "filename": "src/test/ui/issues/issue-53251.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53251.stderr"}, {"sha": "d055a6f12c17ffbf184bff0b63eda15c852801ed", "filename": "src/test/ui/issues/issue-53300.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53300.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53300.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53300.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53300.rs"}, {"sha": "920287a32d69d1955d9bbdc7bfe0e99c2a1fcbb0", "filename": "src/test/ui/issues/issue-53300.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53300.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53300.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53300.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53300.stderr"}, {"sha": "0dd5a8512852a53033649ebb2e800ccb3e52542b", "filename": "src/test/ui/issues/issue-53419.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53419.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53419.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53419.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53419.rs"}, {"sha": "2bf38296f2687c4ccf8c50ee529e78482c977688", "filename": "src/test/ui/issues/issue-53565.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53565.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53565.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53565.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53565.rs"}, {"sha": "945f5efe4a878103996f73487039d17be9a2a38a", "filename": "src/test/ui/issues/issue-53565.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53565.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53565.stderr"}, {"sha": "6b479f7517244d7de62da6b28e86cc79220e4962", "filename": "src/test/ui/issues/issue-53568.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53568.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53568.rs"}, {"sha": "0b6cc36fa52ef77025931c738f181a7ccb3cba5a", "filename": "src/test/ui/issues/issue-53692.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53692.rs"}, {"sha": "9cd8a53615529b2fb358f57d4b60f61ca4773f07", "filename": "src/test/ui/issues/issue-53692.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53692.stderr"}, {"sha": "ece3caf78e21845dbd89f16139d60d3abc07407c", "filename": "src/test/ui/issues/issue-53840.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53840.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53840.rs"}, {"sha": "961e4c0ff6286ab907d0b02d901b7e76105ff757", "filename": "src/test/ui/issues/issue-53840.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53840.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-53840.stderr"}, {"sha": "6d1c61c80f06e983d4224e20fb375f4bce55c4eb", "filename": "src/test/ui/issues/issue-54302-cases.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-54302-cases.rs"}, {"sha": "9603f7a973c139e3422f833730f00204ca7e28bc", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-54302-cases.stderr"}, {"sha": "969d19cac2d76d57d86271784f2867a600cd85b9", "filename": "src/test/ui/issues/issue-54302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-54302.rs"}, {"sha": "f122daeecf63a7cd4f2e4b58c715cf9b9ea904ea", "filename": "src/test/ui/issues/issue-54302.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/issue-54302.stderr"}, {"sha": "329bfd1dde0f963676680b57d7c94c8eae953f2a", "filename": "src/test/ui/issues/issue-5844.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//aux-build:issue_5844_aux.rs\n+//aux-build:issue-5844-aux.rs\n \n extern crate issue_5844_aux;\n "}, {"sha": "4a71932d1df182555c1221a9ceb8ce4b304092ad", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -0,0 +1,15 @@\n+trait Foo {\n+    type T;\n+    fn foo(&self, t: Self::T);\n+//~^ NOTE expected 0 type parameters\n+}\n+\n+impl Foo for u32 {\n+    type T = ();\n+\n+    fn foo(&self, t: impl Clone) {}\n+//~^ ERROR method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n+//~| NOTE found 1 type parameter\n+}\n+\n+fn main() {}"}, {"sha": "af7fdde9a8ed1d5a83487d5244e21100901ecd7a", "filename": "src/test/ui/issues/type-arg-mismatch-due-to-impl-trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Ftype-arg-mismatch-due-to-impl-trait.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: method `foo` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/type-arg-mismatch-due-to-impl-trait.rs:10:5\n+   |\n+LL |     fn foo(&self, t: Self::T);\n+   |     -------------------------- expected 0 type parameters\n+...\n+LL |     fn foo(&self, t: impl Clone) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "31123410481c33d2f65809c92b57dc42c146dca2", "filename": "src/test/ui/print-fuel/print-fuel.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -11,7 +11,8 @@\n #![crate_name=\"foo\"]\n #![allow(dead_code)]\n \n-// compile-flags: -Z print-fuel=foo\n+// (#55495: The --error-format is to sidestep an issue in our test harness)\n+// compile-flags: --error-format human -Z print-fuel=foo\n // compile-pass\n \n struct S1(u8, u16, u8);"}, {"sha": "cc88cc077bb219a372491432f57bdb0f76b8ba62", "filename": "src/test/ui/print-fuel/print-fuel.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stderr?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "previous_filename": "src/test/ui/print-fuel/print-fuel.stdout"}, {"sha": "15fd855d935aeb0a54943cf1f8d191007abf992e", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a42b2ceb46887e9941cec667eac99844dd7ad0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -48,6 +48,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"aarch64-apple-ios\",\n     \"aarch64-fuchsia\",\n     \"aarch64-linux-android\",\n+    \"aarch64-pc-windows-msvc\",\n     \"aarch64-unknown-cloudabi\",\n     \"aarch64-unknown-linux-gnu\",\n     \"aarch64-unknown-linux-musl\","}, {"sha": "fdea743be550ed8d7b61b2c908944cdd1290a6ad", "filename": "src/tools/lldb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flldb?ref=25a42b2ceb46887e9941cec667eac99844dd7ad0", "patch": "@@ -1 +1 @@\n-Subproject commit 29bf48582812212450f4caf7da1af3f18c52bfef\n+Subproject commit fdea743be550ed8d7b61b2c908944cdd1290a6ad"}]}