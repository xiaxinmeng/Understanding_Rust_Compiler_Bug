{"sha": "d3d537b9728697da09b974fd9ac76a14197de514", "node_id": "C_kwDOAAsO6NoAKGQzZDUzN2I5NzI4Njk3ZGEwOWI5NzRmZDlhYzc2YTE0MTk3ZGU1MTQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-07T10:21:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-15T12:00:25Z"}, "message": "Exhaustively match over all alias kinds", "tree": {"sha": "e2c6c1638b00ede43a14dd2166935c9dbdfaee88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2c6c1638b00ede43a14dd2166935c9dbdfaee88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d537b9728697da09b974fd9ac76a14197de514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d537b9728697da09b974fd9ac76a14197de514", "html_url": "https://github.com/rust-lang/rust/commit/d3d537b9728697da09b974fd9ac76a14197de514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d537b9728697da09b974fd9ac76a14197de514/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669e75163957f8f2408d515ce2da3516cb31f747", "url": "https://api.github.com/repos/rust-lang/rust/commits/669e75163957f8f2408d515ce2da3516cb31f747", "html_url": "https://github.com/rust-lang/rust/commit/669e75163957f8f2408d515ce2da3516cb31f747"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "7385c74389eb8aa2ec1ca4b7156177f3b71d6b14", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3d537b9728697da09b974fd9ac76a14197de514/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d537b9728697da09b974fd9ac76a14197de514/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d3d537b9728697da09b974fd9ac76a14197de514", "patch": "@@ -467,6 +467,11 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n             return ty;\n         }\n \n+        let (kind, data) = match *ty.kind() {\n+            ty::Alias(kind, alias_ty) => (kind, alias_ty),\n+            _ => return ty.super_fold_with(self),\n+        };\n+\n         // We try to be a little clever here as a performance optimization in\n         // cases where there are nested projections under binders.\n         // For example:\n@@ -490,13 +495,11 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n         // replace bound vars if the current type is a `Projection` and we need\n         // to make sure we don't forget to fold the substs regardless.\n \n-        match *ty.kind() {\n+        match kind {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. })\n-                if !substs.has_escaping_bound_vars() =>\n-            {\n+            ty::Opaque if !data.substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),\n@@ -512,8 +515,8 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n                             );\n                         }\n \n-                        let substs = substs.fold_with(self);\n-                        let generic_ty = self.interner().type_of(def_id);\n+                        let substs = data.substs.fold_with(self);\n+                        let generic_ty = self.interner().type_of(data.def_id);\n                         let concrete_ty = generic_ty.subst(self.interner(), substs);\n                         self.depth += 1;\n                         let folded_ty = self.fold_ty(concrete_ty);\n@@ -522,8 +525,9 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n                     }\n                 }\n             }\n+            ty::Opaque => ty.super_fold_with(self),\n \n-            ty::Alias(ty::Projection, data) if !data.has_escaping_bound_vars() => {\n+            ty::Projection if !data.has_escaping_bound_vars() => {\n                 // This branch is *mostly* just an optimization: when we don't\n                 // have escaping bound vars, we don't need to replace them with\n                 // placeholders (see branch below). *Also*, we know that we can\n@@ -562,7 +566,7 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n                 normalized_ty.ty().unwrap()\n             }\n \n-            ty::Alias(ty::Projection, data) => {\n+            ty::Projection => {\n                 // If there are escaping bound vars, we temporarily replace the\n                 // bound vars with placeholders. Note though, that in the case\n                 // that we still can't project for whatever reason (e.g. self\n@@ -611,8 +615,6 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n                 );\n                 normalized_ty\n             }\n-\n-            _ => ty.super_fold_with(self),\n         }\n     }\n "}, {"sha": "45307a85a31c990d792b3e2c3c34e81aa682a5bc", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3d537b9728697da09b974fd9ac76a14197de514/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d537b9728697da09b974fd9ac76a14197de514/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=d3d537b9728697da09b974fd9ac76a14197de514", "patch": "@@ -197,23 +197,30 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n             return Ok(*ty);\n         }\n \n+        let (kind, data) = match *ty.kind() {\n+            ty::Alias(kind, data) => (kind, data),\n+            _ => {\n+                let res = ty.try_super_fold_with(self)?;\n+                self.cache.insert(ty, res);\n+                return Ok(res);\n+            }\n+        };\n+\n         // See note in `rustc_trait_selection::traits::project` about why we\n         // wait to fold the substs.\n \n         // Wrap this in a closure so we don't accidentally return from the outer function\n-        let res = match *ty.kind() {\n+        let res = match kind {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. })\n-                if !substs.has_escaping_bound_vars() =>\n-            {\n+            ty::Opaque if !data.substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self)?,\n \n                     Reveal::All => {\n-                        let substs = substs.try_fold_with(self)?;\n+                        let substs = data.substs.try_fold_with(self)?;\n                         let recursion_limit = self.interner().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n                             // A closure or generator may have itself as in its upvars.\n@@ -228,7 +235,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n                             return ty.try_super_fold_with(self);\n                         }\n \n-                        let generic_ty = self.interner().type_of(def_id);\n+                        let generic_ty = self.interner().type_of(data.def_id);\n                         let concrete_ty = generic_ty.subst(self.interner(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n@@ -248,7 +255,9 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n                 }\n             }\n \n-            ty::Alias(ty::Projection, data) if !data.has_escaping_bound_vars() => {\n+            ty::Opaque => ty.try_super_fold_with(self)?,\n+\n+            ty::Projection if !data.has_escaping_bound_vars() => {\n                 // This branch is just an optimization: when we don't have escaping bound vars,\n                 // we don't need to replace them with placeholders (see branch below).\n \n@@ -297,7 +306,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n                 }\n             }\n \n-            ty::Alias(ty::Projection, data) => {\n+            ty::Projection => {\n                 // See note in `rustc_trait_selection::traits::project`\n \n                 let tcx = self.infcx.tcx;\n@@ -353,8 +362,6 @@ impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx>\n                     res\n                 }\n             }\n-\n-            _ => ty.try_super_fold_with(self)?,\n         };\n \n         self.cache.insert(ty, res);"}]}