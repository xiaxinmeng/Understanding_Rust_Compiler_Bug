{"sha": "1719d4501351eff05299a124dc13846afa2994a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MTlkNDUwMTM1MWVmZjA1Mjk5YTEyNGRjMTM4NDZhZmEyOTk0YTA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-05T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-08T21:30:53Z"}, "message": "Inline implementation of lookup_line\n\nto simplify the implementation and avoid unnecessary\nconversions from `Option<usize>` to `isize` and back.", "tree": {"sha": "59af1e469a5daa4914a6ce709a76a69804c56c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59af1e469a5daa4914a6ce709a76a69804c56c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1719d4501351eff05299a124dc13846afa2994a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1719d4501351eff05299a124dc13846afa2994a0", "html_url": "https://github.com/rust-lang/rust/commit/1719d4501351eff05299a124dc13846afa2994a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1719d4501351eff05299a124dc13846afa2994a0/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd", "html_url": "https://github.com/rust-lang/rust/commit/aa65b08b1dbaf4b637847646801ebc8c01d7ecbd"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "6265470e625947ea482ff789bb9df2bb55395421", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1719d4501351eff05299a124dc13846afa2994a0/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1719d4501351eff05299a124dc13846afa2994a0/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=1719d4501351eff05299a124dc13846afa2994a0", "patch": "@@ -1552,13 +1552,11 @@ impl SourceFile {\n     /// number. If the source_file is empty or the position is located before the\n     /// first line, `None` is returned.\n     pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {\n-        if self.lines.is_empty() {\n-            return None;\n+        match self.lines.binary_search(&pos) {\n+            Ok(idx) => Some(idx),\n+            Err(0) => None,\n+            Err(idx) => Some(idx - 1),\n         }\n-\n-        let line_index = lookup_line(&self.lines[..], pos);\n-        assert!(line_index < self.lines.len() as isize);\n-        if line_index >= 0 { Some(line_index as usize) } else { None }\n     }\n \n     pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {\n@@ -1957,16 +1955,6 @@ impl InnerSpan {\n     }\n }\n \n-// Given a slice of line start positions and a position, returns the index of\n-// the line the position is on. Returns -1 if the position is located before\n-// the first line.\n-fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n-    match lines.binary_search(&pos) {\n-        Ok(line) => line as isize,\n-        Err(line) => line as isize - 1,\n-    }\n-}\n-\n /// Requirements for a `StableHashingContext` to be used in this crate.\n ///\n /// This is a hack to allow using the [`HashStable_Generic`] derive macro"}, {"sha": "11edcacc0d43ba95917ffadae0dc14d44b3cfebd", "filename": "compiler/rustc_span/src/tests.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1719d4501351eff05299a124dc13846afa2994a0/compiler%2Frustc_span%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1719d4501351eff05299a124dc13846afa2994a0/compiler%2Frustc_span%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Ftests.rs?ref=1719d4501351eff05299a124dc13846afa2994a0", "patch": "@@ -2,18 +2,21 @@ use super::*;\n \n #[test]\n fn test_lookup_line() {\n-    let lines = &[BytePos(3), BytePos(17), BytePos(28)];\n+    let source = \"abcdefghijklm\\nabcdefghij\\n...\".to_owned();\n+    let sf =\n+        SourceFile::new(FileName::Anon(0), source, BytePos(3), SourceFileHashAlgorithm::Sha256);\n+    assert_eq!(sf.lines.as_slice(), &[BytePos(3), BytePos(17), BytePos(28)]);\n \n-    assert_eq!(lookup_line(lines, BytePos(0)), -1);\n-    assert_eq!(lookup_line(lines, BytePos(3)), 0);\n-    assert_eq!(lookup_line(lines, BytePos(4)), 0);\n+    assert_eq!(sf.lookup_line(BytePos(0)), None);\n+    assert_eq!(sf.lookup_line(BytePos(3)), Some(0));\n+    assert_eq!(sf.lookup_line(BytePos(4)), Some(0));\n \n-    assert_eq!(lookup_line(lines, BytePos(16)), 0);\n-    assert_eq!(lookup_line(lines, BytePos(17)), 1);\n-    assert_eq!(lookup_line(lines, BytePos(18)), 1);\n+    assert_eq!(sf.lookup_line(BytePos(16)), Some(0));\n+    assert_eq!(sf.lookup_line(BytePos(17)), Some(1));\n+    assert_eq!(sf.lookup_line(BytePos(18)), Some(1));\n \n-    assert_eq!(lookup_line(lines, BytePos(28)), 2);\n-    assert_eq!(lookup_line(lines, BytePos(29)), 2);\n+    assert_eq!(sf.lookup_line(BytePos(28)), Some(2));\n+    assert_eq!(sf.lookup_line(BytePos(29)), Some(2));\n }\n \n #[test]"}]}