{"sha": "34067a1c4c7dd2751270bba13712bdef36295643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDY3YTFjNGM3ZGQyNzUxMjcwYmJhMTM3MTJiZGVmMzYyOTU2NDM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-06-07T20:50:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-07T20:50:35Z"}, "message": "Merge pull request #2775 from topecongiro/macro-def-with-complex-macro\n\nChange format_snippet to return None when it has failed to format macro call", "tree": {"sha": "a06fde9788eccf9896920b412ade77e20607b805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06fde9788eccf9896920b412ade77e20607b805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34067a1c4c7dd2751270bba13712bdef36295643", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbGZqbCRBK7hj4Ov3rIwAAdHIIAJq3711diHXuEsyvlecvbh7G\ndn/6EBJc4COOFvyQfa9kgXVh7OBmLe5zgA6uL2PDYwh6bwgSrYnja/0o6oTVQ8/W\nr0icSauL3AB2XTGg+gmikaTQZokyAXzEJQ4xaF55CJQmvgZ/br0qGmX5M5ctvjZA\nff820+B9BoMJ80dUCH8mI/iRYcmajMfft4nNGNF/PbLNX5xucOpc3R55RMXg1WsU\nMwUs9DMY1eeHk2CrkUO8EPQMhJXeIXs7ZoghqaIfkX3ac5ZD5ySojZsitOe7i2xk\n6Z6sdR2cz5uzkmEY5gEscNi8D92BSMOCWjpmGFFGLBYEIqaP2RoZlDyxa/XUKmE=\n=wNcm\n-----END PGP SIGNATURE-----\n", "payload": "tree a06fde9788eccf9896920b412ade77e20607b805\nparent 8956b91a93e3c524870cf44b6fc6fafe1fc9898b\nparent 19054347cad5b0edc006957efd92188671eb0735\nauthor Nick Cameron <nrc@ncameron.org> 1528404635 +1200\ncommitter GitHub <noreply@github.com> 1528404635 +1200\n\nMerge pull request #2775 from topecongiro/macro-def-with-complex-macro\n\nChange format_snippet to return None when it has failed to format macro call"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34067a1c4c7dd2751270bba13712bdef36295643", "html_url": "https://github.com/rust-lang/rust/commit/34067a1c4c7dd2751270bba13712bdef36295643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34067a1c4c7dd2751270bba13712bdef36295643/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8956b91a93e3c524870cf44b6fc6fafe1fc9898b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8956b91a93e3c524870cf44b6fc6fafe1fc9898b", "html_url": "https://github.com/rust-lang/rust/commit/8956b91a93e3c524870cf44b6fc6fafe1fc9898b"}, {"sha": "19054347cad5b0edc006957efd92188671eb0735", "url": "https://api.github.com/repos/rust-lang/rust/commits/19054347cad5b0edc006957efd92188671eb0735", "html_url": "https://github.com/rust-lang/rust/commit/19054347cad5b0edc006957efd92188671eb0735"}], "stats": {"total": 126, "additions": 117, "deletions": 9}, "files": [{"sha": "1ef6d18a5402f0b6fb2d4e32795d339b548fc9ab", "filename": "src/config/summary.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -23,6 +23,9 @@ pub struct Summary {\n     // Code is valid, but it is impossible to format it properly.\n     has_formatting_errors: bool,\n \n+    // Code contains macro call that was unable to format.\n+    pub(crate) has_macro_format_failure: bool,\n+\n     // Failed a check, such as the license check or other opt-in checking.\n     has_check_errors: bool,\n \n@@ -80,6 +83,10 @@ impl Summary {\n         self.has_check_errors\n     }\n \n+    pub(crate) fn has_macro_formatting_failure(&self) -> bool {\n+        self.has_macro_format_failure\n+    }\n+\n     pub fn add_operational_error(&mut self) {\n         self.has_operational_errors = true;\n     }\n@@ -100,6 +107,10 @@ impl Summary {\n         self.has_diff = true;\n     }\n \n+    pub(crate) fn add_macro_foramt_failure(&mut self) {\n+        self.has_macro_format_failure = true;\n+    }\n+\n     pub fn has_no_errors(&self) -> bool {\n         !(self.has_operational_errors\n             || self.has_parsing_errors"}, {"sha": "8d4cbb51b5a43be338822bcda0e1672ccaee2cea", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -422,13 +422,14 @@ fn format_ast<F>(\n     config: &Config,\n     report: FormatReport,\n     mut after_file: F,\n-) -> Result<(FileMap, bool), io::Error>\n+) -> Result<(FileMap, bool, bool), io::Error>\n where\n     F: FnMut(&FileName, &mut String, &[(usize, usize)], &FormatReport) -> Result<bool, io::Error>,\n {\n     let mut result = FileMap::new();\n     // diff mode: check if any files are differing\n     let mut has_diff = false;\n+    let mut has_macro_rewrite_failure = false;\n \n     let skip_children = config.skip_children();\n     for (path, module) in modules::list_files(krate, parse_session.codemap())? {\n@@ -472,10 +473,12 @@ where\n             }\n         };\n \n+        has_macro_rewrite_failure |= visitor.macro_rewrite_failure;\n+\n         result.push((path.clone(), visitor.buffer));\n     }\n \n-    Ok((result, has_diff))\n+    Ok((result, has_diff, has_macro_rewrite_failure))\n }\n \n /// Returns true if the line with the given line number was skipped by `#[rustfmt::skip]`.\n@@ -686,6 +689,7 @@ fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     config.set().hide_parse_errors(true);\n     match format_input(input, &config, Some(&mut out)) {\n         // `format_input()` returns an empty string on parsing error.\n+        Ok((summary, _)) if summary.has_macro_formatting_failure() => None,\n         Ok(..) if out.is_empty() && !snippet.is_empty() => None,\n         Ok(..) => String::from_utf8(out).ok(),\n         Err(..) => None,\n@@ -902,7 +906,7 @@ fn format_input_inner<T: Write>(\n     }\n \n     match format_result {\n-        Ok((file_map, has_diff)) => {\n+        Ok((file_map, has_diff, has_macro_rewrite_failure)) => {\n             if report.has_warnings() {\n                 summary.add_formatting_error();\n             }\n@@ -911,6 +915,10 @@ fn format_input_inner<T: Write>(\n                 summary.add_diff();\n             }\n \n+            if has_macro_rewrite_failure {\n+                summary.add_macro_foramt_failure();\n+            }\n+\n             Ok((summary, file_map, report))\n         }\n         Err(e) => Err((From::from(e), summary)),"}, {"sha": "9053aaebd90ad9cd32d02aa77932fba613e1cd95", "filename": "src/macros.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -129,6 +129,15 @@ fn rewrite_macro_name(path: &ast::Path, extra_ident: Option<ast::Ident>) -> Stri\n     }\n }\n \n+// Use this on failing to format the macro call.\n+fn return_original_snippet_with_failure_marked(\n+    context: &RewriteContext,\n+    span: Span,\n+) -> Option<String> {\n+    context.macro_rewrite_failure.replace(true);\n+    Some(context.snippet(span).to_owned())\n+}\n+\n pub fn rewrite_macro(\n     mac: &ast::Mac,\n     extra_ident: Option<ast::Ident>,\n@@ -138,6 +147,9 @@ pub fn rewrite_macro(\n ) -> Option<String> {\n     context.inside_macro.replace(true);\n     let result = rewrite_macro_inner(mac, extra_ident, context, shape, position);\n+    if result.is_none() {\n+        context.macro_rewrite_failure.replace(true);\n+    }\n     context.inside_macro.replace(false);\n     result\n }\n@@ -196,7 +208,7 @@ pub fn rewrite_macro_inner(\n         loop {\n             match parse_macro_arg(&mut parser) {\n                 Some(arg) => arg_vec.push(arg),\n-                None => return Some(context.snippet(mac.span).to_owned()),\n+                None => return return_original_snippet_with_failure_marked(context, mac.span),\n             }\n \n             match parser.token {\n@@ -216,13 +228,17 @@ pub fn rewrite_macro_inner(\n                                         break;\n                                     }\n                                 }\n-                                None => return Some(context.snippet(mac.span).to_owned()),\n+                                None => {\n+                                    return return_original_snippet_with_failure_marked(\n+                                        context, mac.span,\n+                                    )\n+                                }\n                             }\n                         }\n                     }\n-                    return Some(context.snippet(mac.span).to_owned());\n+                    return return_original_snippet_with_failure_marked(context, mac.span);\n                 }\n-                _ => return Some(context.snippet(mac.span).to_owned()),\n+                _ => return return_original_snippet_with_failure_marked(context, mac.span),\n             }\n \n             parser.bump();"}, {"sha": "90b613df6c4026bdb7d20698124bf870f58b269b", "filename": "src/rewrite.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -39,6 +39,8 @@ pub struct RewriteContext<'a> {\n     // When rewriting chain, veto going multi line except the last element\n     pub force_one_line_chain: RefCell<bool>,\n     pub snippet_provider: &'a SnippetProvider<'a>,\n+    // Used for `format_snippet`\n+    pub(crate) macro_rewrite_failure: RefCell<bool>,\n     pub(crate) report: FormatReport,\n }\n "}, {"sha": "7d676770421b07146a90912dc8728662cfb9a0fd", "filename": "src/visitor.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -70,6 +70,7 @@ pub struct FmtVisitor<'a> {\n     pub snippet_provider: &'a SnippetProvider<'a>,\n     pub line_number: usize,\n     pub skipped_range: Vec<(usize, usize)>,\n+    pub macro_rewrite_failure: bool,\n     pub(crate) report: FormatReport,\n }\n \n@@ -519,7 +520,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         // 1 = ;\n         let shape = self.shape().sub_width(1).unwrap();\n-        let rewrite = rewrite_macro(mac, ident, &self.get_context(), shape, pos);\n+        let rewrite = self.with_context(|ctx| rewrite_macro(mac, ident, ctx, shape, pos));\n         self.push_rewrite(mac.span, rewrite);\n     }\n \n@@ -578,6 +579,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             snippet_provider,\n             line_number: 0,\n             skipped_range: vec![],\n+            macro_rewrite_failure: false,\n             report,\n         }\n     }\n@@ -736,6 +738,20 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n     }\n \n+    pub fn with_context<F>(&mut self, f: F) -> Option<String>\n+    where\n+        F: Fn(&RewriteContext) -> Option<String>,\n+    {\n+        let result;\n+        let macro_rewrite_failure = {\n+            let context = self.get_context();\n+            result = f(&context);\n+            unsafe { *context.macro_rewrite_failure.as_ptr() }\n+        };\n+        self.macro_rewrite_failure |= macro_rewrite_failure;\n+        result\n+    }\n+\n     pub fn get_context(&self) -> RewriteContext {\n         RewriteContext {\n             parse_session: self.parse_session,\n@@ -746,6 +762,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             is_if_else_block: RefCell::new(false),\n             force_one_line_chain: RefCell::new(false),\n             snippet_provider: self.snippet_provider,\n+            macro_rewrite_failure: RefCell::new(false),\n             report: self.report.clone(),\n         }\n     }"}, {"sha": "fdcde7f6f5900e58defb360831be6a5203e5d5f0", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -204,3 +204,30 @@ macro_rules! foo {\n macro_rules! __wundergraph_expand_sqlite_mutation {\n     ( $mutation_name:ident $((context = $($context:tt)*))*{ $( $entity_name:ident( $(insert = $insert:ident,)* $(update = $update:ident,)* $(delete = $($delete:tt)+)* ), )* } ) => {};\n }\n+\n+// #2607\n+macro_rules! bench {\n+    ($ty:ident) => {\n+        criterion_group!(\n+            name = benches;\n+            config = ::common_bench::reduced_samples();\n+            targets = call, map;\n+        );\n+    };\n+}\n+\n+// #2770\n+macro_rules! save_regs {\n+    () => {\n+        asm!(\"push rax\n+              push rcx\n+              push rdx\n+              push rsi\n+              push rdi\n+              push r8\n+              push r9\n+              push r10\n+              push r11\"\n+             :::: \"intel\", \"volatile\");\n+    };\n+}"}, {"sha": "d908831c21ca0b79d2550a3ed2ff15bc323f0555", "filename": "tests/target/issue-2523.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/tests%2Ftarget%2Fissue-2523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/tests%2Ftarget%2Fissue-2523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2523.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -2,7 +2,7 @@\n \n // Do not unindent macro calls in comment with unformattable syntax.\n //! ```rust\n-//! let x = 3;\n+//! let x = 3  ;\n //! some_macro!(pub fn fn foo() (\n //!     println!(\"Don't unindent me!\");\n //! ));"}, {"sha": "66790091f866246d1d93609c3a3b492699a0d421", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34067a1c4c7dd2751270bba13712bdef36295643/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067a1c4c7dd2751270bba13712bdef36295643/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=34067a1c4c7dd2751270bba13712bdef36295643", "patch": "@@ -246,3 +246,30 @@ macro_rules! __wundergraph_expand_sqlite_mutation {\n         }\n     ) => {};\n }\n+\n+// #2607\n+macro_rules! bench {\n+    ($ty:ident) => {\n+        criterion_group!(\n+            name = benches;\n+            config = ::common_bench::reduced_samples();\n+            targets = call, map;\n+        );\n+    };\n+}\n+\n+// #2770\n+macro_rules! save_regs {\n+    () => {\n+        asm!(\"push rax\n+              push rcx\n+              push rdx\n+              push rsi\n+              push rdi\n+              push r8\n+              push r9\n+              push r10\n+              push r11\"\n+             :::: \"intel\", \"volatile\");\n+    };\n+}"}]}