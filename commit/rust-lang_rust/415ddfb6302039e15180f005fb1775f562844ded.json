{"sha": "415ddfb6302039e15180f005fb1775f562844ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNWRkZmI2MzAyMDM5ZTE1MTgwZjAwNWZiMTc3NWY1NjI4NDRkZWQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T12:41:16Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-21T12:41:16Z"}, "message": "lint message nits", "tree": {"sha": "d43c0eb2bca59746800b712a99905c6579141ed5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d43c0eb2bca59746800b712a99905c6579141ed5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415ddfb6302039e15180f005fb1775f562844ded", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXaTXsAAoJEFbW7qD8Z6xG7/UQAK8IX9OotjTV3KzNRujLkzjj\nE7Qapb5LeuMLSO8r428F9Zj5ojA7G78FcAfloj3nWskrj9lBpI+iLB9CLiUkZzzq\nLNC266rNPldteqPlvDxYSjIWFkcmMWRLXnDQYLV3iWlAG1Ca+vCekF1Nz1w7982c\nNP6RVaOPdoAR9HBm6YBJIWwLltMnTx1xPJ+WFEsnpnTch8QgJSu6Kwi6J+TMKMH0\nTwRrBIahc/E+YrQp3KWQFBMuCOWKvkvFDz6u52WahahZZoEHfIOaQOKe89H1fDvv\nbAppxQwNtSFjSx2U9qQ6UHNPvwv6tX8mdLBaPV8s2hes7uSly2rhdfmKMtTdzAzg\nbi6KtBWZno4BZBN84D33DA2t1VXwr7/sXTpkwiJODSDL6zPjEazY98qY8NIknVnU\noRmds7NYMilee96IZzwqlArXARS+yUB/QuppI+/0pavVQHzk8QR3Hck8rSxFiEUM\nNDLgmirAfhuF1wUPoOn4ueZDSF15pHNlyyqOEoiySOEn8qDpEaCGihJA+PhJOjZP\nVlx7FlhzclpsmGHh5zgjuHbTQs7S6rWx9WZvphZ4sd7VNIzzngCnEOcc/VISF99o\nf/5CTpQkfctSvdF+uddypOJEZ3Aga7C2Pkbs20hOaKzPtmuaQcdDNPM1LlCm73/r\nXy7qBEl3BMBZN1v8MFRW\n=hUHV\n-----END PGP SIGNATURE-----", "payload": "tree d43c0eb2bca59746800b712a99905c6579141ed5\nparent 8bfb31ee9725c58f5dd2f2b3e3ce9592db49974f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466512876 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466512876 +0200\n\nlint message nits"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415ddfb6302039e15180f005fb1775f562844ded", "html_url": "https://github.com/rust-lang/rust/commit/415ddfb6302039e15180f005fb1775f562844ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415ddfb6302039e15180f005fb1775f562844ded/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfb31ee9725c58f5dd2f2b3e3ce9592db49974f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfb31ee9725c58f5dd2f2b3e3ce9592db49974f", "html_url": "https://github.com/rust-lang/rust/commit/8bfb31ee9725c58f5dd2f2b3e3ce9592db49974f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3b7122cb4108cf2344722ae80dfc90c29a54d73c", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415ddfb6302039e15180f005fb1775f562844ded/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415ddfb6302039e15180f005fb1775f562844ded/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=415ddfb6302039e15180f005fb1775f562844ded", "patch": "@@ -862,7 +862,7 @@ fn lint_map_unwrap_or_else(cx: &LateContext, expr: &hir::Expr, map_args: &Method\n fn lint_filter_next(cx: &LateContext, expr: &hir::Expr, filter_args: &MethodArgs) {\n     // lint if caller of `.filter().next()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).next()` on an Iterator. This is more succinctly expressed by calling `.find(p)` \\\n+        let msg = \"called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` \\\n                    instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n@@ -884,7 +884,7 @@ fn lint_filter_next(cx: &LateContext, expr: &hir::Expr, filter_args: &MethodArgs\n fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n     // lint if caller of `.filter().map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).map(q)` on an Iterator. This is more succinctly expressed by calling `.filter_map(..)` \\\n+        let msg = \"called `filter(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.filter_map(..)` \\\n                    instead.\";\n         span_lint(cx, FILTER_MAP, expr.span, msg);\n     }\n@@ -895,7 +895,7 @@ fn lint_filter_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs\n fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(p).flat_map(q)` on an Iterator. This is more succinctly expressed by calling `.flat_map(..)` \\\n+        let msg = \"called `filter(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` \\\n                    and filtering by returning an empty Iterator.\";\n         span_lint(cx, FILTER_FLAT_MAP, expr.span, msg);\n     }\n@@ -906,7 +906,7 @@ fn lint_filter_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &Metho\n fn lint_filter_map_flat_map(cx: &LateContext, expr: &hir::Expr, _filter_args: &MethodArgs, _map_args: &MethodArgs) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter_map(p).flat_map(q)` on an Iterator. This is more succinctly expressed by calling `.flat_map(..)` \\\n+        let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` \\\n                    and filtering by returning an empty Iterator.\";\n         span_lint(cx, FILTER_MAP_FLAT_MAP, expr.span, msg);\n     }\n@@ -919,7 +919,7 @@ fn lint_search_is_some(cx: &LateContext, expr: &hir::Expr, search_method: &str,\n                        is_some_args: &MethodArgs) {\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &*is_some_args[0], &paths::ITERATOR) {\n-        let msg = format!(\"called `is_some()` after searching an iterator with {}. This is more succinctly expressed \\\n+        let msg = format!(\"called `is_some()` after searching an `Iterator` with {}. This is more succinctly expressed \\\n                            by calling `any()`.\",\n                           search_method);\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");"}]}