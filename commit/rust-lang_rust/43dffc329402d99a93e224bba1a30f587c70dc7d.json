{"sha": "43dffc329402d99a93e224bba1a30f587c70dc7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZGZmYzMyOTQwMmQ5OWE5M2UyMjRiYmExYTMwZjU4N2M3MGRjN2Q=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-13T02:53:22Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-26T18:23:52Z"}, "message": "Avoid passing around the current module as an argument in `resolve_imports`", "tree": {"sha": "f50116738a6f9eff0badf704efa4650d819271e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f50116738a6f9eff0badf704efa4650d819271e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43dffc329402d99a93e224bba1a30f587c70dc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43dffc329402d99a93e224bba1a30f587c70dc7d", "html_url": "https://github.com/rust-lang/rust/commit/43dffc329402d99a93e224bba1a30f587c70dc7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43dffc329402d99a93e224bba1a30f587c70dc7d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb09ae28c03d7357f22dd1683e9c78393b5c1e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb09ae28c03d7357f22dd1683e9c78393b5c1e43", "html_url": "https://github.com/rust-lang/rust/commit/bb09ae28c03d7357f22dd1683e9c78393b5c1e43"}], "stats": {"total": 48, "additions": 17, "deletions": 31}, "files": [{"sha": "769033e11cc4821204d8b6d442432f02f00a2408", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/43dffc329402d99a93e224bba1a30f587c70dc7d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43dffc329402d99a93e224bba1a30f587c70dc7d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=43dffc329402d99a93e224bba1a30f587c70dc7d", "patch": "@@ -17,7 +17,7 @@ use {NameBinding, NameBindingKind, PrivacyError};\n use ResolveResult;\n use ResolveResult::*;\n use Resolver;\n-use UseLexicalScopeFlag;\n+use UseLexicalScopeFlag::DontUseLexicalScope;\n use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n@@ -382,7 +382,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         debug!(\"(resolving imports for module subtree) resolving {}\",\n                module_to_string(&module_));\n         let orig_module = replace(&mut self.resolver.current_module, module_);\n-        self.resolve_imports_for_module(module_, errors);\n+        self.resolve_imports_in_current_module(errors);\n         self.resolver.current_module = orig_module;\n \n         for (_, child_module) in module_.module_children.borrow().iter() {\n@@ -391,22 +391,20 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     }\n \n     /// Attempts to resolve imports for the given module only.\n-    fn resolve_imports_for_module(&mut self,\n-                                  module: Module<'b>,\n-                                  errors: &mut Vec<ImportResolvingError<'b>>) {\n+    fn resolve_imports_in_current_module(&mut self, errors: &mut Vec<ImportResolvingError<'b>>) {\n         let mut imports = Vec::new();\n-        let mut unresolved_imports = module.unresolved_imports.borrow_mut();\n+        let mut unresolved_imports = self.resolver.current_module.unresolved_imports.borrow_mut();\n         ::std::mem::swap(&mut imports, &mut unresolved_imports);\n \n         for import_directive in imports {\n-            match self.resolve_import_for_module(module, &import_directive) {\n+            match self.resolve_import_for_module(&import_directive) {\n                 Failed(err) => {\n                     let (span, help) = match err {\n                         Some((span, msg)) => (span, format!(\". {}\", msg)),\n                         None => (import_directive.span, String::new()),\n                     };\n                     errors.push(ImportResolvingError {\n-                        source_module: module,\n+                        source_module: self.resolver.current_module,\n                         import_directive: import_directive,\n                         span: span,\n                         help: help,\n@@ -423,23 +421,15 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     /// don't know whether the name exists at the moment due to other\n     /// currently-unresolved imports, or success if we know the name exists.\n     /// If successful, the resolved bindings are written into the module.\n-    fn resolve_import_for_module(&mut self,\n-                                 module_: Module<'b>,\n-                                 import_directive: &'b ImportDirective)\n-                                 -> ResolveResult<()> {\n+    fn resolve_import_for_module(&mut self, directive: &'b ImportDirective) -> ResolveResult<()> {\n         debug!(\"(resolving import for module) resolving import `{}::...` in `{}`\",\n-               names_to_string(&import_directive.module_path),\n-               module_to_string(&module_));\n+               names_to_string(&directive.module_path),\n+               module_to_string(self.resolver.current_module));\n \n         self.resolver\n-            .resolve_module_path(&import_directive.module_path,\n-                                 UseLexicalScopeFlag::DontUseLexicalScope,\n-                                 import_directive.span)\n-            .and_then(|containing_module| {\n-                // We found the module that the target is contained\n-                // within. Attempt to resolve the import within it.\n-                self.resolve_import(module_, containing_module, import_directive)\n-            })\n+            .resolve_module_path(&directive.module_path, DontUseLexicalScope, directive.span)\n+            // Once we have the module that contains the target, we can resolve the import.\n+            .and_then(|containing_module| self.resolve_import(containing_module, directive))\n             .and_then(|()| {\n                 // Decrement the count of unresolved imports.\n                 assert!(self.resolver.unresolved_imports >= 1);\n@@ -448,18 +438,16 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             })\n     }\n \n-    fn resolve_import(&mut self,\n-                      module_: Module<'b>,\n-                      target_module: Module<'b>,\n-                      directive: &'b ImportDirective)\n+    fn resolve_import(&mut self, target_module: Module<'b>, directive: &'b ImportDirective)\n                       -> ResolveResult<()> {\n         let (source, target, value_determined, type_determined) = match directive.subclass {\n             SingleImport { source, target, ref value_determined, ref type_determined } =>\n                 (source, target, value_determined, type_determined),\n-            GlobImport => return self.resolve_glob_import(module_, target_module, directive),\n+            GlobImport => return self.resolve_glob_import(target_module, directive),\n         };\n \n         // We need to resolve both namespaces for this to succeed.\n+        let module_ = self.resolver.current_module;\n         let (value_result, type_result) = {\n             let mut resolve_in_ns = |ns, determined: bool| {\n                 // Temporarily count the directive as determined so that the resolution fails\n@@ -594,15 +582,13 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     // succeeds or bails out (as importing * from an empty module or a module\n     // that exports nothing is valid). target_module is the module we are\n     // actually importing, i.e., `foo` in `use foo::*`.\n-    fn resolve_glob_import(&mut self,\n-                           module_: Module<'b>,\n-                           target_module: Module<'b>,\n-                           directive: &'b ImportDirective)\n+    fn resolve_glob_import(&mut self, target_module: Module<'b>, directive: &'b ImportDirective)\n                            -> ResolveResult<()> {\n         if let Some(Def::Trait(_)) = target_module.def {\n             self.resolver.session.span_err(directive.span, \"items in traits are not importable.\");\n         }\n \n+        let module_ = self.resolver.current_module;\n         if module_.def_id() == target_module.def_id() {\n             // This means we are trying to glob import a module into itself, and it is a no-go\n             let msg = \"Cannot glob-import a module into itself.\".into();"}]}