{"sha": "c5ff28cd14bf90b45f97d370538d792693036b27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZmYyOGNkMTRiZjkwYjQ1Zjk3ZDM3MDUzOGQ3OTI2OTMwMzZiMjc=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-27T12:06:47Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:26:41Z"}, "message": "Factor write_ty out of pattern-matching functions", "tree": {"sha": "65cc0b766297fb0b0b0450f8207b0996a4bad73b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65cc0b766297fb0b0b0450f8207b0996a4bad73b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5ff28cd14bf90b45f97d370538d792693036b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ff28cd14bf90b45f97d370538d792693036b27", "html_url": "https://github.com/rust-lang/rust/commit/c5ff28cd14bf90b45f97d370538d792693036b27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5ff28cd14bf90b45f97d370538d792693036b27/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6086a0a3f0de3cd31b01eb223d36cd15314d6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f", "html_url": "https://github.com/rust-lang/rust/commit/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "35d77e8c2adebe87f3e52de4bec5af398e4be8ff", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5ff28cd14bf90b45f97d370538d792693036b27/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ff28cd14bf90b45f97d370538d792693036b27/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=c5ff28cd14bf90b45f97d370538d792693036b27", "patch": "@@ -54,8 +54,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                self.write_ty(pat.id, pat_ty);\n-\n                 // somewhat surprising: in this case, the subtyping\n                 // relation goes the opposite way as the other\n                 // cases. Actually what we really want is not a subtyping\n@@ -69,6 +67,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 //\n                 // that's equivalent to there existing a LUB.\n                 self.demand_suptype(pat.span, expected, pat_ty);\n+                self.write_ty(pat.id, pat_ty);\n             }\n             PatKind::Range(ref begin, ref end) => {\n                 let lhs_ty = self.check_expr(begin);\n@@ -101,11 +100,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // it to type the entire expression.\n                 let common_type = self.resolve_type_vars_if_possible(&lhs_ty);\n \n-                self.write_ty(pat.id, common_type);\n-\n                 // subtyping doesn't matter here, as the value is some kind of scalar\n                 self.demand_eqtype(pat.span, expected, lhs_ty);\n                 self.demand_eqtype(pat.span, expected, rhs_ty);\n+                self.write_ty(pat.id, common_type);\n             }\n             PatKind::Binding(bm, _, ref sub) => {\n                 let typ = self.local_ty(pat.span, pat.id);\n@@ -132,8 +130,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                self.write_ty(pat.id, typ);\n-\n                 // if there are multiple arms, make sure they all agree on\n                 // what the type of the binding `x` ought to be\n                 match tcx.expect_def(pat.id) {\n@@ -150,6 +146,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if let Some(ref p) = *sub {\n                     self.check_pat(&p, expected);\n                 }\n+\n+                self.write_ty(pat.id, typ);\n             }\n             PatKind::TupleStruct(ref path, ref subpats, ddpos) => {\n                 self.check_pat_tuple_struct(pat, path, &subpats, ddpos, expected);\n@@ -174,11 +172,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 let element_tys: Vec<_> = (0 .. max_len).map(|_| self.next_ty_var()).collect();\n                 let pat_ty = tcx.mk_tup(element_tys.clone());\n-                self.write_ty(pat.id, pat_ty);\n                 self.demand_eqtype(pat.span, expected, pat_ty);\n                 for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                     self.check_pat(elem, &element_tys[i]);\n                 }\n+                self.write_ty(pat.id, pat_ty);\n             }\n             PatKind::Box(ref inner) => {\n                 let inner_ty = self.next_ty_var();\n@@ -189,11 +187,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // think any errors can be introduced by using\n                     // `demand::eqtype`.\n                     self.demand_eqtype(pat.span, expected, uniq_ty);\n-                    self.write_ty(pat.id, uniq_ty);\n                     self.check_pat(&inner, inner_ty);\n+                    self.write_ty(pat.id, uniq_ty);\n                 } else {\n-                    self.write_error(pat.id);\n                     self.check_pat(&inner, tcx.types.err);\n+                    self.write_error(pat.id);\n                 }\n             }\n             PatKind::Ref(ref inner, mutbl) => {\n@@ -221,11 +219,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     };\n \n-                    self.write_ty(pat.id, rptr_ty);\n                     self.check_pat(&inner, inner_ty);\n+                    self.write_ty(pat.id, rptr_ty);\n                 } else {\n-                    self.write_error(pat.id);\n                     self.check_pat(&inner, tcx.types.err);\n+                    self.write_error(pat.id);\n                 }\n             }\n             PatKind::Vec(ref before, ref slice, ref after) => {\n@@ -277,8 +275,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 };\n \n-                self.write_ty(pat.id, expected_ty);\n-\n                 for elt in before {\n                     self.check_pat(&elt, inner_ty);\n                 }\n@@ -288,6 +284,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 for elt in after {\n                     self.check_pat(&elt, inner_ty);\n                 }\n+                self.write_ty(pat.id, expected_ty);\n             }\n         }\n "}]}