{"sha": "6c9ffe4aec905bef7ef77278e736851a660940e1", "node_id": "C_kwDOAAsO6NoAKDZjOWZmZTRhZWM5MDViZWY3ZWY3NzI3OGU3MzY4NTFhNjYwOTQwZTE", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-12-28T08:29:08Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-12-28T08:29:08Z"}, "message": "Do not use LEB128 for encoding u16 and i16", "tree": {"sha": "18d12852be9731278b834623c477d21d2e7b47ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d12852be9731278b834623c477d21d2e7b47ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9ffe4aec905bef7ef77278e736851a660940e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmHKytQACgkQ28VT5UDC\n9hkySQv/cMEjwspjYJJTx+9YkkuSO0y7Nz0gtG7iuccI3ceHrlaqHPftokK1Qfbr\ngxpII06U7zz16xJieKivos2G+rWgf8IwX5wMtgfvewScqm85NxrcmJpdWEp22Ior\nmipkPpbB7B4IqWXnWafVtCsEMeCF2niKiAjGlA5I/w5d7OmB0PuPmwaHsGbtiNpZ\nhKylDEvOhUn/bGtwAkX7iffDFdrGiv3QkDITXMAc3sB5AA5AED3UoWpAGbfFnUBX\nuoFeam7eV1/3Ghr7Pru94ydv4HzHqXCzRe2QwvbsUbxVYfAzYLfNgdhx1ZM+T16c\nCIel7g4fxQI3S4FlDcwR3czRf/mHN/C68H2LqnRRP5J2VOtw7zAFwwmtWDgQlRbT\n6a+E68rfXtOPGXGgOEaMwCqHqjw6le+/59QZXe2mAR5icKA2WB0CjHAmKIwluKTH\nXZWNMdY85KOJPmlayOi2Bk4aFmcsLk+y+alIwDzjwCUUcrJCW/fD5JJ+nNXAlrfX\nNLtefSUz\n=CzKM\n-----END PGP SIGNATURE-----", "payload": "tree 18d12852be9731278b834623c477d21d2e7b47ae\nparent f8abed9ed48bace6be0087bcd44ed534e239b8d8\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1640680148 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1640680148 +0100\n\nDo not use LEB128 for encoding u16 and i16\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9ffe4aec905bef7ef77278e736851a660940e1", "html_url": "https://github.com/rust-lang/rust/commit/6c9ffe4aec905bef7ef77278e736851a660940e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9ffe4aec905bef7ef77278e736851a660940e1/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8abed9ed48bace6be0087bcd44ed534e239b8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "html_url": "https://github.com/rust-lang/rust/commit/f8abed9ed48bace6be0087bcd44ed534e239b8d8"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "f2ef14816813ffcc8f97f94bace4b99c149ae28b", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c9ffe4aec905bef7ef77278e736851a660940e1/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9ffe4aec905bef7ef77278e736851a660940e1/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=6c9ffe4aec905bef7ef77278e736851a660940e1", "patch": "@@ -92,7 +92,8 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_u16(&mut self, v: u16) -> EncodeResult {\n-        write_leb128!(self, v, u16, write_u16_leb128)\n+        self.data.extend_from_slice(&v.to_le_bytes());\n+        Ok(())\n     }\n \n     #[inline]\n@@ -123,7 +124,8 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_i16(&mut self, v: i16) -> EncodeResult {\n-        write_leb128!(self, v, i16, write_i16_leb128)\n+        self.data.extend_from_slice(&v.to_le_bytes());\n+        Ok(())\n     }\n \n     #[inline]\n@@ -446,7 +448,7 @@ impl serialize::Encoder for FileEncoder {\n \n     #[inline]\n     fn emit_u16(&mut self, v: u16) -> FileEncodeResult {\n-        file_encoder_write_leb128!(self, v, u16, write_u16_leb128)\n+        self.write_all(&v.to_le_bytes())\n     }\n \n     #[inline]\n@@ -476,13 +478,12 @@ impl serialize::Encoder for FileEncoder {\n \n     #[inline]\n     fn emit_i16(&mut self, v: i16) -> FileEncodeResult {\n-        file_encoder_write_leb128!(self, v, i16, write_i16_leb128)\n+        self.write_all(&v.to_le_bytes())\n     }\n \n     #[inline]\n     fn emit_i8(&mut self, v: i8) -> FileEncodeResult {\n-        let as_u8: u8 = unsafe { std::mem::transmute(v) };\n-        self.emit_u8(as_u8)\n+        self.emit_u8(v as u8)\n     }\n \n     #[inline]\n@@ -591,7 +592,10 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n \n     #[inline]\n     fn read_u16(&mut self) -> Result<u16, Self::Error> {\n-        read_leb128!(self, read_u16_leb128)\n+        let bytes = [self.data[self.position], self.data[self.position + 1]];\n+        let value = u16::from_le_bytes(bytes);\n+        self.position += 2;\n+        Ok(value)\n     }\n \n     #[inline]\n@@ -623,7 +627,10 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n \n     #[inline]\n     fn read_i16(&mut self) -> Result<i16, Self::Error> {\n-        read_leb128!(self, read_i16_leb128)\n+        let bytes = [self.data[self.position], self.data[self.position + 1]];\n+        let value = i16::from_le_bytes(bytes);\n+        self.position += 2;\n+        Ok(value)\n     }\n \n     #[inline]"}]}