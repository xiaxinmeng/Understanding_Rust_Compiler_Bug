{"sha": "9bdf054dc8c6ef9069a42791915e7f230246b4cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGYwNTRkYzhjNmVmOTA2OWE0Mjc5MTkxNWU3ZjIzMDI0NmI0Y2I=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-26T14:58:39Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-29T20:10:36Z"}, "message": "Only store the result of mir_borrowck for closures", "tree": {"sha": "20941f9c862d8e4d0efac379ac779556dc798ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20941f9c862d8e4d0efac379ac779556dc798ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bdf054dc8c6ef9069a42791915e7f230246b4cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdf054dc8c6ef9069a42791915e7f230246b4cb", "html_url": "https://github.com/rust-lang/rust/commit/9bdf054dc8c6ef9069a42791915e7f230246b4cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bdf054dc8c6ef9069a42791915e7f230246b4cb/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219f818c1be77801f8c1f2e0c9fc74d4ab64be0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/219f818c1be77801f8c1f2e0c9fc74d4ab64be0b", "html_url": "https://github.com/rust-lang/rust/commit/219f818c1be77801f8c1f2e0c9fc74d4ab64be0b"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "495cce4d2feac560f3417898f5370f00f46805a6", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=9bdf054dc8c6ef9069a42791915e7f230246b4cb", "patch": "@@ -51,7 +51,7 @@ pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         false\n     }\n \n@@ -387,7 +387,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n     }\n \n     #[inline]\n-    fn cache_on_disk(_key: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _key: Self::Key) -> bool {\n         true\n     }\n \n@@ -407,7 +407,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval_raw<'tcx> {\n     }\n \n     #[inline]\n-    fn cache_on_disk(_key: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _key: Self::Key) -> bool {\n         true\n     }\n \n@@ -431,7 +431,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n     }\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         true\n     }\n \n@@ -505,7 +505,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_sta\n     }\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         true\n     }\n \n@@ -539,7 +539,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::codegen_fulfill_obligation<'tcx>\n     }\n \n     #[inline]\n-    fn cache_on_disk(_: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, _: Self::Key) -> bool {\n         true\n     }\n \n@@ -877,7 +877,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::features_query<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n     #[inline]\n-    fn cache_on_disk(def_id: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n         def_id.is_local()\n     }\n \n@@ -894,7 +894,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n \n impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n     #[inline]\n-    fn cache_on_disk(def_id: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n         def_id.is_local()\n     }\n \n@@ -933,7 +933,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n \n impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n     #[inline]\n-    fn cache_on_disk(def_id: Self::Key) -> bool {\n+    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n         def_id.is_local()\n     }\n \n@@ -983,10 +983,10 @@ impl<'tcx> QueryDescription<'tcx> for queries::backend_optimization_level<'tcx>\n }\n \n macro_rules! impl_disk_cacheable_query(\n-    ($query_name:ident, |$key:tt| $cond:expr) => {\n+    ($query_name:ident, |$tcx:tt, $key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {\n             #[inline]\n-            fn cache_on_disk($key: Self::Key) -> bool {\n+            fn cache_on_disk($tcx: TyCtxt<'_, 'tcx, 'tcx>, $key: Self::Key) -> bool {\n                 $cond\n             }\n \n@@ -1000,14 +1000,17 @@ macro_rules! impl_disk_cacheable_query(\n     }\n );\n \n-impl_disk_cacheable_query!(unsafety_check_result, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(borrowck, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(mir_borrowck, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(mir_const_qualif, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(check_match, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(def_symbol_name, |_| true);\n-impl_disk_cacheable_query!(type_of, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(predicates_of, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(used_trait_imports, |def_id| def_id.is_local());\n-impl_disk_cacheable_query!(codegen_fn_attrs, |_| true);\n-impl_disk_cacheable_query!(specialization_graph_of, |_| true);\n+impl_disk_cacheable_query!(mir_borrowck, |tcx, def_id| {\n+    def_id.is_local() && tcx.is_closure(def_id)\n+});\n+\n+impl_disk_cacheable_query!(unsafety_check_result, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(borrowck, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(mir_const_qualif, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(check_match, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(def_symbol_name, |_, _| true);\n+impl_disk_cacheable_query!(type_of, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(predicates_of, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(used_trait_imports, |_, def_id| def_id.is_local());\n+impl_disk_cacheable_query!(codegen_fn_attrs, |_, _| true);\n+impl_disk_cacheable_query!(specialization_graph_of, |_, _| true);"}, {"sha": "a3f49de0d078b4ca4ae6694ca22f5240dcd0239a", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=9bdf054dc8c6ef9069a42791915e7f230246b4cb", "patch": "@@ -230,7 +230,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 assert!(cache.active.is_empty());\n                 for (key, entry) in cache.results.iter() {\n                     use ty::query::config::QueryDescription;\n-                    if const_eval::cache_on_disk(key.clone()) {\n+                    if const_eval::cache_on_disk(tcx, key.clone()) {\n                         if let Ok(ref value) = entry.value {\n                             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n \n@@ -1086,7 +1086,7 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let map = Q::query_cache(tcx).borrow();\n     assert!(map.active.is_empty());\n     for (key, entry) in map.results.iter() {\n-        if Q::cache_on_disk(key.clone()) {\n+        if Q::cache_on_disk(tcx, key.clone()) {\n             let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n \n             // Record position of the cache entry"}, {"sha": "69bff8d25b0243cdeeef3dee8bd8659b2c699a52", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=9bdf054dc8c6ef9069a42791915e7f230246b4cb", "patch": "@@ -434,7 +434,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         debug_assert!(self.dep_graph.is_green(dep_node));\n \n         // First we try to load the result from the on-disk cache\n-        let result = if Q::cache_on_disk(key.clone()) &&\n+        let result = if Q::cache_on_disk(self.global_tcx(), key.clone()) &&\n                         self.sess.opts.debugging_opts.incremental_queries {\n             let result = Q::try_load_from_disk(self.global_tcx(), prev_dep_node_index);\n \n@@ -1443,7 +1443,7 @@ macro_rules! impl_load_from_cache {\n                 match self.kind {\n                     $(DepKind::$dep_kind => {\n                         let def_id = self.extract_def_id(tcx).unwrap();\n-                        queries::$query_name::cache_on_disk(def_id)\n+                        queries::$query_name::cache_on_disk(tcx.global_tcx(), def_id)\n                     })*\n                     _ => false\n                 }"}, {"sha": "6ba35052c8aad7cebba75e8997e60af331826fa4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdf054dc8c6ef9069a42791915e7f230246b4cb/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=9bdf054dc8c6ef9069a42791915e7f230246b4cb", "patch": "@@ -228,10 +228,10 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Mir<'tcx> {\n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    let _ = tcx.mir_borrowck(def_id);\n+    tcx.ensure().mir_borrowck(def_id);\n \n     if tcx.use_ast_borrowck() {\n-        let _ = tcx.borrowck(def_id);\n+        tcx.ensure().borrowck(def_id);\n     }\n \n     let mut mir = tcx.mir_validated(def_id).steal();"}]}