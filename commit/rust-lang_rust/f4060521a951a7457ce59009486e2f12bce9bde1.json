{"sha": "f4060521a951a7457ce59009486e2f12bce9bde1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDYwNTIxYTk1MWE3NDU3Y2U1OTAwOTQ4NmUyZjEyYmNlOWJkZTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-04T02:30:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-04T02:30:19Z"}, "message": "Rollup merge of #79541 - GuillaumeGomez:doc-keyword-lint-pass, r=lcnr\n\nDoc keyword lint pass\n\n`x.py test` doesn't seem to work locally for multiple reasons so simpler to just run CI...", "tree": {"sha": "1da08ceb45db9dd567a1fb80ef12e708d5556b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1da08ceb45db9dd567a1fb80ef12e708d5556b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4060521a951a7457ce59009486e2f12bce9bde1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfyZ87CRBK7hj4Ov3rIwAAdHIIACLs3XJjQQm9RpaDJviS9byB\noNi1o8lWJtDeuMHF1H6Wjk4C2Eaao3mgkO1/FDma45wODBK1WJi8QoIa/wK5N45P\n6M6VPMmPvZzMqKIOpJhMaC5LWJRW9MC3v3/T9doH3I/5w0Dtb5lI5WQ2gueUnJJp\nFTr45+m6IfK29dBfkJvGJMD31I7O0Fy2SwmyRARq4s4M0kyBIg1SGpxwIAnnXZ68\nG0LurzEDxTzyJ0noS+0juIz7JkjiwEVqjKId2zLSGFa3mIqDmuwp1PMzfAQ/Pq5B\nwJnmwf/o1I9YR/D9/ukdbRbOgdDrs1+yjAlxqW9HZFAjF8ZSPnjfypyHF0Fqsbs=\n=cLJw\n-----END PGP SIGNATURE-----\n", "payload": "tree 1da08ceb45db9dd567a1fb80ef12e708d5556b4b\nparent 6f2fbc1613489e300cf22e18219651dbcada140e\nparent 50eb3a89f8e2a4c1d809d2b0170b0063b9338d6d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1607049019 +0100\ncommitter GitHub <noreply@github.com> 1607049019 +0100\n\nRollup merge of #79541 - GuillaumeGomez:doc-keyword-lint-pass, r=lcnr\n\nDoc keyword lint pass\n\n`x.py test` doesn't seem to work locally for multiple reasons so simpler to just run CI...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4060521a951a7457ce59009486e2f12bce9bde1", "html_url": "https://github.com/rust-lang/rust/commit/f4060521a951a7457ce59009486e2f12bce9bde1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4060521a951a7457ce59009486e2f12bce9bde1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f2fbc1613489e300cf22e18219651dbcada140e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2fbc1613489e300cf22e18219651dbcada140e", "html_url": "https://github.com/rust-lang/rust/commit/6f2fbc1613489e300cf22e18219651dbcada140e"}, {"sha": "50eb3a89f8e2a4c1d809d2b0170b0063b9338d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/50eb3a89f8e2a4c1d809d2b0170b0063b9338d6d", "html_url": "https://github.com/rust-lang/rust/commit/50eb3a89f8e2a4c1d809d2b0170b0063b9338d6d"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "af5972c6c81c7ff608ef2079b8b4c049634bdd09", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f4060521a951a7457ce59009486e2f12bce9bde1/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4060521a951a7457ce59009486e2f12bce9bde1/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=f4060521a951a7457ce59009486e2f12bce9bde1", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath,\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,\n@@ -267,3 +267,47 @@ impl EarlyLintPass for LintPassImpl {\n         }\n     }\n }\n+\n+declare_tool_lint! {\n+    pub rustc::EXISTING_DOC_KEYWORD,\n+    Allow,\n+    \"Check that documented keywords in std and core actually exist\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(ExistingDocKeyword => [EXISTING_DOC_KEYWORD]);\n+\n+fn is_doc_keyword(s: Symbol) -> bool {\n+    s <= kw::Union\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::Item<'_>) {\n+        for attr in item.attrs {\n+            if !attr.has_name(sym::doc) {\n+                continue;\n+            }\n+            if let Some(list) = attr.meta_item_list() {\n+                for nested in list {\n+                    if nested.has_name(sym::keyword) {\n+                        let v = nested\n+                            .value_str()\n+                            .expect(\"#[doc(keyword = \\\"...\\\")] expected a value!\");\n+                        if is_doc_keyword(v) {\n+                            return;\n+                        }\n+                        cx.struct_span_lint(EXISTING_DOC_KEYWORD, attr.span, |lint| {\n+                            lint.build(&format!(\n+                                \"Found non-existing keyword `{}` used in \\\n+                                     `#[doc(keyword = \\\"...\\\")]`\",\n+                                v,\n+                            ))\n+                            .help(\"only existing keywords are allowed in core/std\")\n+                            .emit();\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "80ef855c3859e14f650a46a7d061467719bb2675", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4060521a951a7457ce59009486e2f12bce9bde1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4060521a951a7457ce59009486e2f12bce9bde1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=f4060521a951a7457ce59009486e2f12bce9bde1", "patch": "@@ -463,6 +463,8 @@ fn register_internals(store: &mut LintStore) {\n     store.register_early_pass(|| box DefaultHashTypes::new());\n     store.register_lints(&LintPassImpl::get_lints());\n     store.register_early_pass(|| box LintPassImpl);\n+    store.register_lints(&ExistingDocKeyword::get_lints());\n+    store.register_late_pass(|| box ExistingDocKeyword);\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|| box TyTyKind);\n     store.register_group(\n@@ -475,6 +477,7 @@ fn register_internals(store: &mut LintStore) {\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n             LintId::of(TY_PASS_BY_REFERENCE),\n             LintId::of(USAGE_OF_QUALIFIED_TY),\n+            LintId::of(EXISTING_DOC_KEYWORD),\n         ],\n     );\n }"}, {"sha": "6c240cb4c3ed9bf0fa9b0b0daffb8b63397feafe", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4060521a951a7457ce59009486e2f12bce9bde1/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4060521a951a7457ce59009486e2f12bce9bde1/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f4060521a951a7457ce59009486e2f12bce9bde1", "patch": "@@ -212,6 +212,7 @@\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform)\n )]\n+#![deny(rustc::existing_doc_keyword)]\n #![cfg_attr(all(test, target_vendor = \"fortanix\", target_env = \"sgx\"), feature(fixed_size_array))]\n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable"}, {"sha": "053712a4b4ee647d8d152bce6edc8483d2efa368", "filename": "src/test/ui-fulldeps/internal-lints/existing_doc_keyword.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4060521a951a7457ce59009486e2f12bce9bde1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4060521a951a7457ce59009486e2f12bce9bde1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs?ref=f4060521a951a7457ce59009486e2f12bce9bde1", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![feature(doc_keyword)]\n+\n+#![crate_type = \"lib\"]\n+\n+#![deny(rustc::existing_doc_keyword)]\n+\n+#[doc(keyword = \"tadam\")] //~ ERROR\n+mod tadam {}"}, {"sha": "bac44f338b74c04fc2a575d02253a544911b6913", "filename": "src/test/ui-fulldeps/internal-lints/existing_doc_keyword.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4060521a951a7457ce59009486e2f12bce9bde1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4060521a951a7457ce59009486e2f12bce9bde1/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr?ref=f4060521a951a7457ce59009486e2f12bce9bde1", "patch": "@@ -0,0 +1,15 @@\n+error: Found non-existing keyword `tadam` used in `#[doc(keyword = \"...\")]`\n+  --> $DIR/existing_doc_keyword.rs:10:1\n+   |\n+LL | #[doc(keyword = \"tadam\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/existing_doc_keyword.rs:8:9\n+   |\n+LL | #![deny(rustc::existing_doc_keyword)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: only existing keywords are allowed in core/std\n+\n+error: aborting due to previous error\n+"}]}