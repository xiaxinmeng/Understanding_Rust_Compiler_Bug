{"sha": "8f294066b32c13fb9865aecfc1ce9cd30e956555", "node_id": "C_kwDOAAsO6NoAKDhmMjk0MDY2YjMyYzEzZmI5ODY1YWVjZmMxY2U5Y2QzMGU5NTY1NTU", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-19T22:48:08Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-25T01:59:53Z"}, "message": "Optimize `incremental_verify_ich`", "tree": {"sha": "ca481c2ec863c3c17e682ebe28ad370064845e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca481c2ec863c3c17e682ebe28ad370064845e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f294066b32c13fb9865aecfc1ce9cd30e956555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f294066b32c13fb9865aecfc1ce9cd30e956555", "html_url": "https://github.com/rust-lang/rust/commit/8f294066b32c13fb9865aecfc1ce9cd30e956555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f294066b32c13fb9865aecfc1ce9cd30e956555/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be3c2bda6b683f87b24714ba595e8b04faef54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be3c2bda6b683f87b24714ba595e8b04faef54c", "html_url": "https://github.com/rust-lang/rust/commit/8be3c2bda6b683f87b24714ba595e8b04faef54c"}], "stats": {"total": 123, "additions": 74, "deletions": 49}, "files": [{"sha": "6ecfda4a1bfd7f111207e690ba1d3f3040fffc61", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=8f294066b32c13fb9865aecfc1ce9cd30e956555", "patch": "@@ -71,13 +71,19 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n }\n \n impl<'tcx> DepContext for TyCtxt<'tcx> {\n+    type Implicit<'a> = TyCtxt<'a>;\n     type DepKind = DepKind;\n \n     #[inline]\n     fn with_stable_hashing_context<R>(self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R {\n         TyCtxt::with_stable_hashing_context(self, f)\n     }\n \n+    #[inline]\n+    fn with_context<R>(f: impl FnOnce(TyCtxt<'_>) -> R) -> R {\n+        ty::tls::with(|tcx| f(tcx))\n+    }\n+\n     #[inline]\n     fn dep_graph(&self) -> &DepGraph {\n         &self.dep_graph"}, {"sha": "09b85010666db6e8073e7cedc6d98057eaed8153", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=8f294066b32c13fb9865aecfc1ce9cd30e956555", "patch": "@@ -535,13 +535,14 @@ impl<K: DepKind> DepGraph<K> {\n             // value to an existing node.\n             //\n             // For sanity, we still check that the loaded stable hash and the new one match.\n-            if let Some(dep_node_index) = data.dep_node_index_of_opt(&node) {\n-                let _current_fingerprint =\n-                    crate::query::incremental_verify_ich(cx, data, result, &node, hash_result);\n+            if let Some(prev_index) = data.previous.node_to_index_opt(&node)\n+                && let Some(dep_node_index) = { data.current.prev_index_to_index.lock()[prev_index] }\n+            {\n+                crate::query::incremental_verify_ich(cx, data, result, prev_index, hash_result);\n \n                 #[cfg(debug_assertions)]\n                 if hash_result.is_some() {\n-                    data.current.record_edge(dep_node_index, node, _current_fingerprint);\n+                    data.current.record_edge(dep_node_index, node, data.prev_fingerprint_of(prev_index));\n                 }\n \n                 return dep_node_index;\n@@ -626,13 +627,19 @@ impl<K: DepKind> DepGraphData<K> {\n \n     /// Returns true if the given node has been marked as green during the\n     /// current compilation session. Used in various assertions\n-    pub fn is_green(&self, dep_node: &DepNode<K>) -> bool {\n-        self.node_color(dep_node).map_or(false, |c| c.is_green())\n+    #[inline]\n+    pub fn is_index_green(&self, prev_index: SerializedDepNodeIndex) -> bool {\n+        self.colors.get(prev_index).map_or(false, |c| c.is_green())\n+    }\n+\n+    #[inline]\n+    pub fn prev_fingerprint_of(&self, prev_index: SerializedDepNodeIndex) -> Fingerprint {\n+        self.previous.fingerprint_by_index(prev_index)\n     }\n \n     #[inline]\n-    pub fn prev_fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n-        self.previous.fingerprint_of(dep_node)\n+    pub fn prev_node_of(&self, prev_index: SerializedDepNodeIndex) -> DepNode<K> {\n+        self.previous.index_to_node(prev_index)\n     }\n \n     pub fn mark_debug_loaded_from_disk(&self, dep_node: DepNode<K>) {\n@@ -643,7 +650,7 @@ impl<K: DepKind> DepGraphData<K> {\n impl<K: DepKind> DepGraph<K> {\n     #[inline]\n     pub fn dep_node_exists(&self, dep_node: &DepNode<K>) -> bool {\n-        self.data.as_ref().and_then(|data| data.dep_node_index_of_opt(dep_node)).is_some()\n+        self.data.as_ref().map_or(false, |data| data.dep_node_exists(dep_node))\n     }\n \n     /// Checks whether a previous work product exists for `v` and, if"}, {"sha": "246ec994e57783b1044ae4cc56447da662969432", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=8f294066b32c13fb9865aecfc1ce9cd30e956555", "patch": "@@ -23,11 +23,15 @@ use std::{fmt, panic};\n use self::graph::{print_markframe_trace, MarkFrame};\n \n pub trait DepContext: Copy {\n+    type Implicit<'a>: DepContext;\n     type DepKind: self::DepKind;\n \n     /// Create a hashing context for hashing new results.\n     fn with_stable_hashing_context<R>(self, f: impl FnOnce(StableHashingContext<'_>) -> R) -> R;\n \n+    /// Access the implicit context.\n+    fn with_context<R>(f: impl FnOnce(Self::Implicit<'_>) -> R) -> R;\n+\n     /// Access the DepGraph.\n     fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n "}, {"sha": "3d19a84915aec05eb43d1ca5e886e6e418dd0dfe", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=8f294066b32c13fb9865aecfc1ce9cd30e956555", "patch": "@@ -79,11 +79,6 @@ impl<K: DepKind> SerializedDepGraph<K> {\n         self.index.get(dep_node).cloned()\n     }\n \n-    #[inline]\n-    pub fn fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n-        self.index.get(dep_node).map(|&node_index| self.fingerprints[node_index])\n-    }\n-\n     #[inline]\n     pub fn fingerprint_by_index(&self, dep_node_index: SerializedDepNodeIndex) -> Fingerprint {\n         self.fingerprints[dep_node_index]"}, {"sha": "e016d948db5970fe2a6f12c7616cd5c31682f06c", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 48, "deletions": 35, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f294066b32c13fb9865aecfc1ce9cd30e956555/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=8f294066b32c13fb9865aecfc1ce9cd30e956555", "patch": "@@ -7,6 +7,7 @@ use crate::dep_graph::{DepGraphData, HasDepContext};\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n+use crate::query::SerializedDepNodeIndex;\n use crate::query::{QueryContext, QueryMap, QuerySideEffects, QueryStackFrame};\n use crate::values::Value;\n use crate::HandleCycleError;\n@@ -19,7 +20,6 @@ use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::{Lock, LockGuard};\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, FatalError};\n-use rustc_session::Session;\n use rustc_span::{Span, DUMMY_SP};\n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n@@ -537,7 +537,7 @@ where\n \n     let (prev_dep_node_index, dep_node_index) = dep_graph_data.try_mark_green(qcx, &dep_node)?;\n \n-    debug_assert!(dep_graph_data.is_green(dep_node));\n+    debug_assert!(dep_graph_data.is_index_green(prev_dep_node_index));\n \n     // First we try to load the result from the on-disk cache.\n     // Some things are never cached on disk.\n@@ -561,8 +561,7 @@ where\n                 dep_graph_data.mark_debug_loaded_from_disk(*dep_node)\n             }\n \n-            let prev_fingerprint =\n-                dep_graph_data.prev_fingerprint_of(dep_node).unwrap_or(Fingerprint::ZERO);\n+            let prev_fingerprint = dep_graph_data.prev_fingerprint_of(prev_dep_node_index);\n             // If `-Zincremental-verify-ich` is specified, re-hash results from\n             // the cache and make sure that they have the expected fingerprint.\n             //\n@@ -578,7 +577,7 @@ where\n                     *qcx.dep_context(),\n                     dep_graph_data,\n                     &result,\n-                    dep_node,\n+                    prev_dep_node_index,\n                     query.hash_result(),\n                 );\n             }\n@@ -623,7 +622,7 @@ where\n         *qcx.dep_context(),\n         dep_graph_data,\n         &result,\n-        dep_node,\n+        prev_dep_node_index,\n         query.hash_result(),\n     );\n \n@@ -636,32 +635,38 @@ pub(crate) fn incremental_verify_ich<Tcx, V: Debug>(\n     tcx: Tcx,\n     dep_graph_data: &DepGraphData<Tcx::DepKind>,\n     result: &V,\n-    dep_node: &DepNode<Tcx::DepKind>,\n+    prev_index: SerializedDepNodeIndex,\n     hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n-) -> Fingerprint\n-where\n+) where\n     Tcx: DepContext,\n {\n-    assert!(\n-        dep_graph_data.is_green(dep_node),\n-        \"fingerprint for green query instance not loaded from cache: {dep_node:?}\",\n-    );\n+    if !dep_graph_data.is_index_green(prev_index) {\n+        incremental_verify_ich_not_green::<Tcx>(prev_index)\n+    }\n \n     let new_hash = hash_result.map_or(Fingerprint::ZERO, |f| {\n         tcx.with_stable_hashing_context(|mut hcx| f(&mut hcx, result))\n     });\n \n-    let old_hash = dep_graph_data.prev_fingerprint_of(dep_node);\n+    let old_hash = dep_graph_data.prev_fingerprint_of(prev_index);\n \n-    if Some(new_hash) != old_hash {\n-        incremental_verify_ich_failed(\n-            tcx.sess(),\n-            DebugArg::from(&dep_node),\n-            DebugArg::from(&result),\n-        );\n+    if new_hash != old_hash {\n+        incremental_verify_ich_failed::<Tcx>(prev_index, DebugArg::from(&result));\n     }\n+}\n \n-    new_hash\n+#[cold]\n+#[inline(never)]\n+fn incremental_verify_ich_not_green<Tcx>(prev_index: SerializedDepNodeIndex)\n+where\n+    Tcx: DepContext,\n+{\n+    Tcx::with_context(|tcx| {\n+        panic!(\n+            \"fingerprint for green query instance not loaded from cache: {:?}\",\n+            tcx.dep_graph().data().unwrap().prev_node_of(prev_index)\n+        )\n+    })\n }\n \n // This DebugArg business is largely a mirror of std::fmt::ArgumentV1, which is\n@@ -706,7 +711,11 @@ impl std::fmt::Debug for DebugArg<'_> {\n // different implementations for LLVM to chew on (and filling up the final\n // binary, too).\n #[cold]\n-fn incremental_verify_ich_failed(sess: &Session, dep_node: DebugArg<'_>, result: DebugArg<'_>) {\n+#[inline(never)]\n+fn incremental_verify_ich_failed<Tcx>(prev_index: SerializedDepNodeIndex, result: DebugArg<'_>)\n+where\n+    Tcx: DepContext,\n+{\n     // When we emit an error message and panic, we try to debug-print the `DepNode`\n     // and query result. Unfortunately, this can cause us to run additional queries,\n     // which may result in another fingerprint mismatch while we're in the middle\n@@ -719,21 +728,25 @@ fn incremental_verify_ich_failed(sess: &Session, dep_node: DebugArg<'_>, result:\n \n     let old_in_panic = INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.replace(true));\n \n-    if old_in_panic {\n-        sess.emit_err(crate::error::Reentrant);\n-    } else {\n-        let run_cmd = if let Some(crate_name) = &sess.opts.crate_name {\n-            format!(\"`cargo clean -p {crate_name}` or `cargo clean`\")\n+    Tcx::with_context(|tcx| {\n+        if old_in_panic {\n+            tcx.sess().emit_err(crate::error::Reentrant);\n         } else {\n-            \"`cargo clean`\".to_string()\n-        };\n+            let run_cmd = if let Some(crate_name) = &tcx.sess().opts.crate_name {\n+                format!(\"`cargo clean -p {crate_name}` or `cargo clean`\")\n+            } else {\n+                \"`cargo clean`\".to_string()\n+            };\n \n-        sess.emit_err(crate::error::IncrementCompilation {\n-            run_cmd,\n-            dep_node: format!(\"{dep_node:?}\"),\n-        });\n-        panic!(\"Found unstable fingerprints for {dep_node:?}: {result:?}\");\n-    }\n+            let dep_node = tcx.dep_graph().data().unwrap().prev_node_of(prev_index);\n+\n+            let dep_node = tcx.sess().emit_err(crate::error::IncrementCompilation {\n+                run_cmd,\n+                dep_node: format!(\"{dep_node:?}\"),\n+            });\n+            panic!(\"Found unstable fingerprints for {dep_node:?}: {result:?}\");\n+        }\n+    });\n \n     INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.set(old_in_panic));\n }"}]}