{"sha": "26cfc269a0ec6a7c895c38954e9701b62940df07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2Y2ZjMjY5YTBlYzZhN2M4OTVjMzg5NTRlOTcwMWI2Mjk0MGRmMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-23T10:49:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-23T10:49:02Z"}, "message": "Auto merge of #32410 - Ticki:master, r=eddyb\n\nAdd support for naked functions\n\nSee https://github.com/rust-lang/rfcs/pull/1201#issuecomment-199442239\n\nThis PR adds `#[naked]` for marking naked functions.", "tree": {"sha": "5e4e1c349375ccddf8dce3be4e996915c26d7bee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4e1c349375ccddf8dce3be4e996915c26d7bee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26cfc269a0ec6a7c895c38954e9701b62940df07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26cfc269a0ec6a7c895c38954e9701b62940df07", "html_url": "https://github.com/rust-lang/rust/commit/26cfc269a0ec6a7c895c38954e9701b62940df07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26cfc269a0ec6a7c895c38954e9701b62940df07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6af19b89c477708ed0f5341ab7a26f1764f1ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6af19b89c477708ed0f5341ab7a26f1764f1ffa", "html_url": "https://github.com/rust-lang/rust/commit/d6af19b89c477708ed0f5341ab7a26f1764f1ffa"}, {"sha": "4869417b6187e16091bfd5e45e36c999c7d0b98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4869417b6187e16091bfd5e45e36c999c7d0b98f", "html_url": "https://github.com/rust-lang/rust/commit/4869417b6187e16091bfd5e45e36c999c7d0b98f"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "3325749d94cf85159269b699c560b621d4053ca0", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=26cfc269a0ec6a7c895c38954e9701b62940df07", "patch": "@@ -1905,6 +1905,8 @@ type int8_t = i8;\n - `should_panic` - indicates that this test function should panic, inverting the success condition.\n - `cold` - The function is unlikely to be executed, so optimize it (and calls\n   to it) differently.\n+- `naked` - The function utilizes a custom ABI or custom inline ASM that requires\n+  epilogue and prologue to be skipped.\n \n ### Static-only attributes\n "}, {"sha": "4ea920c57aadb1782f4df7cca43614c9e8d2c27b", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=26cfc269a0ec6a7c895c38954e9701b62940df07", "patch": "@@ -81,6 +81,18 @@ pub fn set_optimize_for_size(val: ValueRef, optimize: bool) {\n     }\n }\n \n+/// Tell LLVM if this function should be 'naked', i.e. skip the epilogue and prologue.\n+#[inline]\n+pub fn naked(val: ValueRef, is_naked: bool) {\n+    if is_naked {\n+        llvm::SetFunctionAttribute(val, llvm::Attribute::Naked);\n+    } else {\n+        unsafe {\n+            llvm::LLVMRemoveFunctionAttr(val, llvm::Attribute::Naked.bits() as c_ulonglong);\n+        }\n+    }\n+}\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n /// attributes.\n pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) {\n@@ -105,6 +117,8 @@ pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRe\n         if attr.check_name(\"cold\") {\n             llvm::Attributes::default().set(llvm::Attribute::Cold)\n                 .apply_llfn(llvm::FunctionIndex as usize, llfn)\n+        } else if attr.check_name(\"naked\") {\n+            naked(llfn, true);\n         } else if attr.check_name(\"allocator\") {\n             llvm::Attributes::default().set(llvm::Attribute::NoAlias)\n                 .apply_llfn(llvm::ReturnIndex as usize, llfn)"}, {"sha": "698913be292adbc6de6f0b1fdc5789e8c40b25e1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=26cfc269a0ec6a7c895c38954e9701b62940df07", "patch": "@@ -212,6 +212,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     // rust runtime internal\n     (\"unwind_attributes\", \"1.4.0\", None, Active),\n \n+    // allow the use of `#[naked]` on functions.\n+    (\"naked_functions\", \"1.9.0\", None, Active),\n+\n     // allow empty structs and enum variants with braces\n     (\"braced_empty_structs\", \"1.5.0\", Some(29720), Accepted),\n \n@@ -376,6 +379,9 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     // FIXME: #14406 these are processed in trans, which happens after the\n     // lint pass\n     (\"cold\", Whitelisted, Ungated),\n+    (\"naked\", Whitelisted, Gated(\"naked_functions\",\n+                                 \"the `#[naked]` attribute \\\n+                                  is an experimental feature\")),\n     (\"export_name\", Whitelisted, Ungated),\n     (\"inline\", Whitelisted, Ungated),\n     (\"link\", Whitelisted, Ungated),"}, {"sha": "0a600f4acad1fc6855e0714eedfaed09f081235b", "filename": "src/test/codegen/naked-functions.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=26cfc269a0ec6a7c895c38954e9701b62940df07", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+\n+// CHECK: Function Attrs: naked uwtable\n+// CHECK-NEXT: define internal void @naked_empty()\n+#[no_mangle]\n+#[naked]\n+fn naked_empty() {\n+    // CHECK: ret void\n+}\n+\n+// CHECK: Function Attrs: naked uwtable\n+#[no_mangle]\n+#[naked]\n+// CHECK-NEXT: define internal void @naked_with_args(i{{[0-9]+}})\n+fn naked_with_args(a: isize) {\n+    // CHECK: %a = alloca i{{[0-9]+}}\n+    // CHECK: ret void\n+}\n+\n+// CHECK: Function Attrs: naked uwtable\n+// CHECK-NEXT: define internal i{{[0-9]+}} @naked_with_return()\n+#[no_mangle]\n+#[naked]\n+fn naked_with_return() -> isize {\n+    // CHECK: ret i{{[0-9]+}} 0\n+    0\n+}\n+\n+// CHECK: Function Attrs: naked uwtable\n+// CHECK-NEXT: define internal i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}})\n+#[no_mangle]\n+#[naked]\n+fn naked_with_args_and_return(a: isize) -> isize {\n+    // CHECK: %a = alloca i{{[0-9]+}}\n+    // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n+    a\n+}\n+\n+// CHECK: Function Attrs: naked uwtable\n+// CHECK-NEXT: define internal void @naked_recursive()\n+#[no_mangle]\n+#[naked]\n+fn naked_recursive() {\n+    // CHECK: call void @naked_empty()\n+    naked_empty();\n+    // CHECK: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_return()\n+    naked_with_args(\n+        // CHECK: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %{{[0-9]+}})\n+        naked_with_args_and_return(\n+            // CHECK: call void @naked_with_args(i{{[0-9]+}} %{{[0-9]+}})\n+            naked_with_return()\n+        )\n+    );\n+}"}, {"sha": "ceb475e1192176c917e5a96679d16467d6a4e293", "filename": "src/test/compile-fail/gated-naked_functions.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Ftest%2Fcompile-fail%2Fgated-naked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26cfc269a0ec6a7c895c38954e9701b62940df07/src%2Ftest%2Fcompile-fail%2Fgated-naked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-naked_functions.rs?ref=26cfc269a0ec6a7c895c38954e9701b62940df07", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[naked]\n+//~^ the `#[naked]` attribute is an experimental feature\n+fn naked() {}\n+\n+#[naked]\n+//~^ the `#[naked]` attribute is an experimental feature\n+fn naked_2() -> isize {\n+    0\n+}"}]}