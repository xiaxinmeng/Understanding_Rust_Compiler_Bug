{"sha": "9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYWRmYzNmNGI1ZGYwMGE3ZjhlOWIzNjIzODUxMThhZTFkYmE3M2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-05T19:20:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-05T19:20:44Z"}, "message": "Make std::rl unsafe. #3921", "tree": {"sha": "edda9195b44db34bf95e2af66c8246f0fd14a987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edda9195b44db34bf95e2af66c8246f0fd14a987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "html_url": "https://github.com/rust-lang/rust/commit/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8b4dea4e0261b1e8c079c1fcf3c61ea9cc15e6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b4dea4e0261b1e8c079c1fcf3c61ea9cc15e6e", "html_url": "https://github.com/rust-lang/rust/commit/c8b4dea4e0261b1e8c079c1fcf3c61ea9cc15e6e"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "2f1079d83fc04fae4d79c038d06b823b65e8e13b", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "patch": "@@ -267,16 +267,18 @@ pub fn main() {\n         stmts: ~\"\"\n     };\n \n-    do rl::complete |line, suggest| {\n-        if line.starts_with(\":\") {\n-            suggest(~\":clear\");\n-            suggest(~\":exit\");\n-            suggest(~\":help\");\n+    unsafe {\n+        do rl::complete |line, suggest| {\n+            if line.starts_with(\":\") {\n+                suggest(~\":clear\");\n+                suggest(~\":exit\");\n+                suggest(~\":help\");\n+            }\n         }\n     }\n \n     while repl.running {\n-        let result = rl::read(repl.prompt);\n+        let result = unsafe { rl::read(repl.prompt) };\n \n         if result.is_none() {\n             break;\n@@ -290,7 +292,7 @@ pub fn main() {\n             loop;\n         }\n \n-        rl::add_history(line);\n+        unsafe { rl::add_history(line) };\n \n         if line.starts_with(~\":\") {\n             let full = line.substr(1, line.len() - 1);"}, {"sha": "943fecb41150e054b1c5d79ed8f74dbfef6390d6", "filename": "src/libstd/rl.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e/src%2Flibstd%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aadfc3f4b5df00a7f8e9b362385118ae1dba73e/src%2Flibstd%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frl.rs?ref=9aadfc3f4b5df00a7f8e9b362385118ae1dba73e", "patch": "@@ -1,3 +1,6 @@\n+// FIXME #3921. This is unsafe because linenoise uses global mutable\n+// state without mutexes.\n+\n use libc::{c_char, c_int};\n \n extern mod rustrt {\n@@ -12,33 +15,33 @@ extern mod rustrt {\n }\n \n /// Add a line to history\n-pub fn add_history(line: ~str) -> bool {\n+pub unsafe fn add_history(line: ~str) -> bool {\n     do str::as_c_str(line) |buf| {\n         rustrt::linenoiseHistoryAdd(buf) == 1 as c_int\n     }\n }\n \n /// Set the maximum amount of lines stored\n-pub fn set_history_max_len(len: int) -> bool {\n+pub unsafe fn set_history_max_len(len: int) -> bool {\n     rustrt::linenoiseHistorySetMaxLen(len as c_int) == 1 as c_int\n }\n \n /// Save line history to a file\n-pub fn save_history(file: ~str) -> bool {\n+pub unsafe fn save_history(file: ~str) -> bool {\n     do str::as_c_str(file) |buf| {\n         rustrt::linenoiseHistorySave(buf) == 1 as c_int\n     }\n }\n \n /// Load line history from a file\n-pub fn load_history(file: ~str) -> bool {\n+pub unsafe fn load_history(file: ~str) -> bool {\n     do str::as_c_str(file) |buf| {\n         rustrt::linenoiseHistoryLoad(buf) == 1 as c_int\n     }\n }\n \n /// Print out a prompt and then wait for input and return it\n-pub fn read(prompt: ~str) -> Option<~str> {\n+pub unsafe fn read(prompt: ~str) -> Option<~str> {\n     do str::as_c_str(prompt) |buf| unsafe {\n         let line = rustrt::linenoise(buf);\n \n@@ -52,7 +55,7 @@ pub type CompletionCb = fn~(~str, fn(~str));\n fn complete_key(_v: @CompletionCb) {}\n \n /// Bind to the main completion callback\n-pub fn complete(cb: CompletionCb) unsafe {\n+pub unsafe fn complete(cb: CompletionCb) unsafe {\n     task::local_data::local_data_set(complete_key, @(move cb));\n \n     extern fn callback(line: *c_char, completions: *()) unsafe {"}]}