{"sha": "6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZWEwMTRmYmZjMWI5YmRiYTIyYmMzZGNkMDNhYjY0ZDk3ODViNjM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-27T01:55:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-27T01:55:39Z"}, "message": "Document `InferTy` & co.", "tree": {"sha": "9fd65d31c1d0169eb3334af4270082eddfb7251e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fd65d31c1d0169eb3334af4270082eddfb7251e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5+mbCRBK7hj4Ov3rIwAAdHIIAJT6QNyjJDGQdwhEagK/N1Fr\nozWYke7y7SavMKJcWD/TRCtZBP58ppxlufxFj2vwDE0bzQnxVUloVxvWmcCRLG1a\nb3QcB9Nw+VnJXrCiAFq579k4tw2cOMr/8twdYrMIgc6FtmGxpIkVQHRI1XchzlJi\nF1OQgOduTt/HAqX4k6j5SznToYRjD8jQV/y1tHtBzXJvwYcRoQP2ND83MESUfg76\neATezj5Z9szvhmguAk+ZhrL6XD5iEGBTvvISxTY4LW2vaKOvn/SOB5c/ZqxS6Um1\nWeb3nvkmOtTKsH6HCMmk6adJD2PsDba66zmrLtn7ZSmjTA/Pup/TohDcm0s05j8=\n=hjsN\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fd65d31c1d0169eb3334af4270082eddfb7251e\nparent 1832bdd7de93573464e1536e3ea17d5fd7d2888b\nauthor Camelid <camelidcamel@gmail.com> 1609034139 -0800\ncommitter GitHub <noreply@github.com> 1609034139 -0800\n\nDocument `InferTy` & co."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63", "html_url": "https://github.com/rust-lang/rust/commit/6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1832bdd7de93573464e1536e3ea17d5fd7d2888b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1832bdd7de93573464e1536e3ea17d5fd7d2888b", "html_url": "https://github.com/rust-lang/rust/commit/1832bdd7de93573464e1536e3ea17d5fd7d2888b"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "0631f2c53784e334aeef32564e2ce65dd314493e", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6aea014fbfc1b9bdba22bc3dcd03ab64d9785b63", "patch": "@@ -1424,28 +1424,33 @@ pub struct EarlyBoundRegion {\n     pub name: Symbol,\n }\n \n+/// A **ty**pe **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct TyVid {\n     pub index: u32,\n }\n \n+/// A **`const`** **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct ConstVid<'tcx> {\n     pub index: u32,\n     pub phantom: PhantomData<&'tcx ()>,\n }\n \n+/// An **int**egral (`u32`, `i32`, `usize`, etc.) type **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct IntVid {\n     pub index: u32,\n }\n \n+/// An **float**ing-point (`f32` or `f64`) type **v**ariable **ID**.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n pub struct FloatVid {\n     pub index: u32,\n }\n \n rustc_index::newtype_index! {\n+    /// A **region** (lifetime) **v**ariable **ID**.\n     pub struct RegionVid {\n         DEBUG_FORMAT = custom,\n     }\n@@ -1457,18 +1462,40 @@ impl Atom for RegionVid {\n     }\n }\n \n+/// A placeholder for a type that hasn't been inferred yet.\n+///\n+/// E.g., if we have an empty array (`[]`), then we create a fresh\n+/// type variable for the element type since we won't know until it's\n+/// used what the element type is supposed to be.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum InferTy {\n+    /// A type variable.\n     TyVar(TyVid),\n+    /// An integral type variable.\n+    ///\n+    /// These are created when the compiler sees an integer literal like\n+    /// `1` that could be several different types (`u8`, `i32`, `u32`, etc.).\n+    /// We don't know until it's used what type it's supposed to be, so\n+    /// we create a fresh type variable.\n     IntVar(IntVid),\n+    /// A floating-point type variable.\n+    ///\n+    /// These are created when the compiler sees an float literal like\n+    /// `1.0` that could be either an `f32` or an `f64`.\n+    /// We don't know until it's used what type it's supposed to be, so\n+    /// we create a fresh type variable.\n     FloatVar(FloatVid),\n \n-    /// A `FreshTy` is one that is generated as a replacement for an\n-    /// unbound type variable. This is convenient for caching etc. See\n-    /// `infer::freshen` for more details.\n+    /// A [`FreshTy`][Self::FreshTy] is one that is generated as a replacement\n+    /// for an unbound type variable. This is convenient for caching etc. See\n+    /// `rustc_infer::infer::freshen` for more details.\n+    ///\n+    /// Compare with [`TyVar`][Self::TyVar].\n     FreshTy(u32),\n+    /// Like [`FreshTy`][Self::FreshTy], but as a replacement for [`IntVar`][Self::IntVar].\n     FreshIntTy(u32),\n+    /// Like [`FreshTy`][Self::FreshTy], but as a replacement for [`FloatVar`][Self::FloatVar].\n     FreshFloatTy(u32),\n }\n "}]}