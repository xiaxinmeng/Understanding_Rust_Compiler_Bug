{"sha": "6a42d7f627958d20587c8a137ed1756465d13b1e", "node_id": "C_kwDOAAsO6NoAKDZhNDJkN2Y2Mjc5NThkMjA1ODdjOGExMzdlZDE3NTY0NjVkMTNiMWU", "commit": {"author": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-28T13:17:16Z"}, "committer": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-28T13:17:16Z"}, "message": "fix: allow new, subsequent `rust-project.json`-based workspaces to get\nproc macro expansion.", "tree": {"sha": "2cb87fc12c1e7777d541496584bb60efeeb2b7d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb87fc12c1e7777d541496584bb60efeeb2b7d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a42d7f627958d20587c8a137ed1756465d13b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a42d7f627958d20587c8a137ed1756465d13b1e", "html_url": "https://github.com/rust-lang/rust/commit/6a42d7f627958d20587c8a137ed1756465d13b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a42d7f627958d20587c8a137ed1756465d13b1e/comments", "author": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7337fc9c3b4995fdab4e90871bfb48a26d5eaec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7337fc9c3b4995fdab4e90871bfb48a26d5eaec", "html_url": "https://github.com/rust-lang/rust/commit/e7337fc9c3b4995fdab4e90871bfb48a26d5eaec"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "5f23d9fe826e528796822b36b8faf629b3443f81", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a42d7f627958d20587c8a137ed1756465d13b1e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a42d7f627958d20587c8a137ed1756465d13b1e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=6a42d7f627958d20587c8a137ed1756465d13b1e", "patch": "@@ -672,6 +672,14 @@ impl ProjectWorkspace {\n             _ => false,\n         }\n     }\n+\n+    /// Returns `true` if the project workspace is [`Json`].\n+    ///\n+    /// [`Json`]: ProjectWorkspace::Json\n+    #[must_use]\n+    pub fn is_json(&self) -> bool {\n+        matches!(self, Self::Json { .. })\n+    }\n }\n \n fn project_json_to_crate_graph("}, {"sha": "0c76ac8b9254eb8e4d40a4b950e14fe1171c5dd8", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6a42d7f627958d20587c8a137ed1756465d13b1e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a42d7f627958d20587c8a137ed1756465d13b1e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=6a42d7f627958d20587c8a137ed1756465d13b1e", "patch": "@@ -296,11 +296,25 @@ impl GlobalState {\n         let workspaces =\n             workspaces.iter().filter_map(|res| res.as_ref().ok().cloned()).collect::<Vec<_>>();\n \n-        let same_workspaces = workspaces.len() == self.workspaces.len()\n-            && workspaces\n-                .iter()\n-                .zip(self.workspaces.iter())\n-                .all(|(l, r)| l.eq_ignore_build_data(r));\n+        // `different_workspaces` is used to spawn a new proc macro server for a newly-added\n+        // rust workspace (most commonly sourced from a `rust-project.json`). While the algorithm\n+        // to find the new workspaces is quadratic, we generally expect that the number of total\n+        // workspaces to remain in the low single digits. the `cloned_workspace` is needed for borrowck\n+        // reasons.\n+        let cloned_workspaces = workspaces.clone();\n+        let different_workspaces = cloned_workspaces\n+            .iter()\n+            .filter(|ws| {\n+                !self\n+                    .workspaces\n+                    .iter()\n+                    .find(|existing_ws| ws.eq_ignore_build_data(&existing_ws))\n+                    .is_some()\n+            })\n+            .collect::<Vec<_>>();\n+        let same_workspaces = different_workspaces.is_empty();\n+\n+        tracing::debug!(current_workspaces = ?self.workspaces, new_workspaces = ?workspaces, ?same_workspaces, \"comparing workspaces\");\n \n         if same_workspaces {\n             let (workspaces, build_scripts) = self.fetch_build_data_queue.last_op_result();\n@@ -370,11 +384,10 @@ impl GlobalState {\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n-        if self.proc_macro_clients.is_empty() {\n+        if self.proc_macro_clients.is_empty() || !different_workspaces.is_empty() {\n             if let Some((path, path_manually_set)) = self.config.proc_macro_srv() {\n                 tracing::info!(\"Spawning proc-macro servers\");\n-                self.proc_macro_clients = self\n-                    .workspaces\n+                self.proc_macro_clients = different_workspaces\n                     .iter()\n                     .map(|ws| {\n                         let (path, args): (_, &[_]) = if path_manually_set {\n@@ -448,7 +461,19 @@ impl GlobalState {\n         };\n         let mut change = Change::new();\n \n-        if same_workspaces {\n+        // `self.fetch_proc_macros_queue.request_op(cause, proc_macro_paths)` is only called in\n+        // when `switch_workspaces` is called _without_ changing workspaces. This typically occurs\n+        // when build scripts have finishing building, but when rust-analyzer is used with a\n+        // rust-project.json, the build scripts have already been built by the external build system\n+        // that generated the `rust-project.json`.\n+\n+        // Therefore, in order to allow _new_ workspaces added via rust-project.json (e.g., after\n+        // a workspace was already added), we check whether this is the same workspace _or_\n+        // if any of the new workspaces is a `rust-project.json`.\n+        //\n+        // The else branch is used to provide better diagnostics to users while procedural macros\n+        // are still being built.\n+        if same_workspaces || different_workspaces.iter().any(|ws| ws.is_json()) {\n             if self.config.expand_proc_macros() {\n                 self.fetch_proc_macros_queue.request_op(cause, proc_macro_paths);\n             }"}]}