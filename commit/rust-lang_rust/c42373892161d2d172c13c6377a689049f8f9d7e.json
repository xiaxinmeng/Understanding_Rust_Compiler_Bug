{"sha": "c42373892161d2d172c13c6377a689049f8f9d7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjM3Mzg5MjE2MWQyZDE3MmMxM2M2Mzc3YTY4OTA0OWY4ZjlkN2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-09T18:47:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-09T18:47:52Z"}, "message": "Merge #6189\n\n6189: adt: correctly inherit field visibility from enum r=jonas-schievink a=jonas-schievink\n\nPreviously, \"find all references\" on a variant field wouldn't find any\r\nreferences outside the defining module. This is because variant fields\r\nwere incorrectly assumed to be private, like struct fields without\r\nexplicit visibility, but they actually inherit the enum's visibility.\r\n\r\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "adfcfe50433188eec4febbfe80fe432bcc32234f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfcfe50433188eec4febbfe80fe432bcc32234f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42373892161d2d172c13c6377a689049f8f9d7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfgLBYCRBK7hj4Ov3rIwAAdHIIAItyeNmYAN1RXp4t414JgudA\nxtivKOLeQ7WKeD5fcX+Sq0daXP026AJ549ELQK7VZX3RpBHthZ0j5HXrmYbiFDcG\n/ximi2b5Phqmz1/JMrijSXLGrinj+lV8goMDkxNgQlYjkG8gkxwz9f/i7htTvPzN\n4cFgbevobvsLCEeww2070IZo4o1ajudPIIHSICwqhzgoJ4rv6phEagVNCDOkK1ak\nyvzhpgbo/a4M7Nld/1DrYklMgvajZLAywZ1wWT5mwCip+mZMGgPNb/t4lBDEOPuR\nR1IIONGwy4Oc/GKDT2oIX3rFBD4C7lRaV0a7dUCyUKKgRZoFMSTNpO0lkZ7IJEE=\n=qFE1\n-----END PGP SIGNATURE-----\n", "payload": "tree adfcfe50433188eec4febbfe80fe432bcc32234f\nparent cde189c5d5d77afd077b067a887bbc7e3adb4f80\nparent 5dcbf03d0f114cab1ae1748dd3c3632a52f6f52d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602269272 +0000\ncommitter GitHub <noreply@github.com> 1602269272 +0000\n\nMerge #6189\n\n6189: adt: correctly inherit field visibility from enum r=jonas-schievink a=jonas-schievink\n\nPreviously, \"find all references\" on a variant field wouldn't find any\r\nreferences outside the defining module. This is because variant fields\r\nwere incorrectly assumed to be private, like struct fields without\r\nexplicit visibility, but they actually inherit the enum's visibility.\r\n\r\nbors r+ :robot: \n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42373892161d2d172c13c6377a689049f8f9d7e", "html_url": "https://github.com/rust-lang/rust/commit/c42373892161d2d172c13c6377a689049f8f9d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42373892161d2d172c13c6377a689049f8f9d7e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde189c5d5d77afd077b067a887bbc7e3adb4f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde189c5d5d77afd077b067a887bbc7e3adb4f80", "html_url": "https://github.com/rust-lang/rust/commit/cde189c5d5d77afd077b067a887bbc7e3adb4f80"}, {"sha": "5dcbf03d0f114cab1ae1748dd3c3632a52f6f52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcbf03d0f114cab1ae1748dd3c3632a52f6f52d", "html_url": "https://github.com/rust-lang/rust/commit/5dcbf03d0f114cab1ae1748dd3c3632a52f6f52d"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "d505e9444abad28cb7e4285030b00d37653bc8bb", "filename": "crates/assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c42373892161d2d172c13c6377a689049f8f9d7e/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42373892161d2d172c13c6377a689049f8f9d7e/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=c42373892161d2d172c13c6377a689049f8f9d7e", "patch": "@@ -324,23 +324,21 @@ pub struct Foo { pub bar: () }\n \n     #[test]\n     fn fix_visibility_of_enum_variant_field() {\n-        check_assist(\n+        // Enum variants, as well as their fields, always get the enum's visibility. In fact, rustc\n+        // rejects any visibility specifiers on them, so this assist should never fire on them.\n+        check_assist_not_applicable(\n             fix_visibility,\n             r\"mod foo { pub enum Foo { Bar { bar: () } } }\n               fn main() { foo::Foo::Bar { <|>bar: () }; } \",\n-            r\"mod foo { pub enum Foo { Bar { $0pub(crate) bar: () } } }\n-              fn main() { foo::Foo::Bar { bar: () }; } \",\n         );\n-        check_assist(\n+        check_assist_not_applicable(\n             fix_visibility,\n             r\"\n //- /lib.rs\n mod foo;\n fn main() { foo::Foo::Bar { <|>bar: () }; }\n //- /foo.rs\n pub enum Foo { Bar { bar: () } }\n-\",\n-            r\"pub enum Foo { Bar { $0pub(crate) bar: () } }\n \",\n         );\n         check_assist_not_applicable("}, {"sha": "6539959c3c3bec11b2768e3037aa1f278017859b", "filename": "crates/hir_def/src/adt.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c42373892161d2d172c13c6377a689049f8f9d7e/crates%2Fhir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42373892161d2d172c13c6377a689049f8f9d7e/crates%2Fhir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fadt.rs?ref=c42373892161d2d172c13c6377a689049f8f9d7e", "patch": "@@ -14,7 +14,7 @@ use tt::{Delimiter, DelimiterKind, Leaf, Subtree, TokenTree};\n use crate::{\n     body::{CfgExpander, LowerCtx},\n     db::DefDatabase,\n-    item_tree::{AttrOwner, Field, Fields, ItemTree, ModItem},\n+    item_tree::{AttrOwner, Field, Fields, ItemTree, ModItem, RawVisibilityId},\n     src::HasChildSource,\n     src::HasSource,\n     trace::Trace,\n@@ -91,7 +91,7 @@ impl StructData {\n         let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n \n         let strukt = &item_tree[loc.id.value];\n-        let variant_data = lower_fields(&item_tree, &cfg_options, &strukt.fields);\n+        let variant_data = lower_fields(&item_tree, &cfg_options, &strukt.fields, None);\n         Arc::new(StructData {\n             name: strukt.name.clone(),\n             variant_data: Arc::new(variant_data),\n@@ -105,7 +105,7 @@ impl StructData {\n         let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n \n         let union = &item_tree[loc.id.value];\n-        let variant_data = lower_fields(&item_tree, &cfg_options, &union.fields);\n+        let variant_data = lower_fields(&item_tree, &cfg_options, &union.fields, None);\n \n         Arc::new(StructData {\n             name: union.name.clone(),\n@@ -126,7 +126,8 @@ impl EnumData {\n         for var_id in enum_.variants.clone() {\n             if item_tree.attrs(var_id.into()).is_cfg_enabled(&cfg_options) {\n                 let var = &item_tree[var_id];\n-                let var_data = lower_fields(&item_tree, &cfg_options, &var.fields);\n+                let var_data =\n+                    lower_fields(&item_tree, &cfg_options, &var.fields, Some(enum_.visibility));\n \n                 variants.alloc(EnumVariantData {\n                     name: var.name.clone(),\n@@ -296,13 +297,18 @@ fn lower_struct(\n     }\n }\n \n-fn lower_fields(item_tree: &ItemTree, cfg_options: &CfgOptions, fields: &Fields) -> VariantData {\n+fn lower_fields(\n+    item_tree: &ItemTree,\n+    cfg_options: &CfgOptions,\n+    fields: &Fields,\n+    override_visibility: Option<RawVisibilityId>,\n+) -> VariantData {\n     match fields {\n         Fields::Record(flds) => {\n             let mut arena = Arena::new();\n             for field_id in flds.clone() {\n                 if item_tree.attrs(field_id.into()).is_cfg_enabled(cfg_options) {\n-                    arena.alloc(lower_field(item_tree, &item_tree[field_id]));\n+                    arena.alloc(lower_field(item_tree, &item_tree[field_id], override_visibility));\n                 }\n             }\n             VariantData::Record(arena)\n@@ -311,7 +317,7 @@ fn lower_fields(item_tree: &ItemTree, cfg_options: &CfgOptions, fields: &Fields)\n             let mut arena = Arena::new();\n             for field_id in flds.clone() {\n                 if item_tree.attrs(field_id.into()).is_cfg_enabled(cfg_options) {\n-                    arena.alloc(lower_field(item_tree, &item_tree[field_id]));\n+                    arena.alloc(lower_field(item_tree, &item_tree[field_id], override_visibility));\n                 }\n             }\n             VariantData::Tuple(arena)\n@@ -320,10 +326,14 @@ fn lower_fields(item_tree: &ItemTree, cfg_options: &CfgOptions, fields: &Fields)\n     }\n }\n \n-fn lower_field(item_tree: &ItemTree, field: &Field) -> FieldData {\n+fn lower_field(\n+    item_tree: &ItemTree,\n+    field: &Field,\n+    override_visibility: Option<RawVisibilityId>,\n+) -> FieldData {\n     FieldData {\n         name: field.name.clone(),\n         type_ref: field.type_ref.clone(),\n-        visibility: item_tree[field.visibility].clone(),\n+        visibility: item_tree[override_visibility.unwrap_or(field.visibility)].clone(),\n     }\n }"}, {"sha": "9315f73545faa8e5b3bca929e34b9e98cf8a0079", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c42373892161d2d172c13c6377a689049f8f9d7e/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42373892161d2d172c13c6377a689049f8f9d7e/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c42373892161d2d172c13c6377a689049f8f9d7e", "patch": "@@ -732,6 +732,30 @@ fn f(e: En) {\n         );\n     }\n \n+    #[test]\n+    fn test_find_all_refs_enum_var_privacy() {\n+        check(\n+            r#\"\n+mod m {\n+    pub enum En {\n+        Variant {\n+            field<|>: u8,\n+        }\n+    }\n+}\n+\n+fn f() -> m::En {\n+    m::En::Variant { field: 0 }\n+}\n+\"#,\n+            expect![[r#\"\n+                field RECORD_FIELD FileId(0) 56..65 56..61 Other\n+\n+                FileId(0) 125..130 Other Read\n+            \"#]],\n+        );\n+    }\n+\n     fn check(ra_fixture: &str, expect: Expect) {\n         check_with_scope(ra_fixture, None, expect)\n     }"}]}