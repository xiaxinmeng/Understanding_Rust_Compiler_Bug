{"sha": "7b2f44a57b6814c250373bf19fb71e5e733e8044", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMmY0NGE1N2I2ODE0YzI1MDM3M2JmMTlmYjcxZTVlNzMzZTgwNDQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T07:16:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T07:16:36Z"}, "message": "Rollup merge of #73883 - ehuss:rustdoc-stage-previous, r=Mark-Simulacrum\n\nCompile rustdoc less often.\n\nPreviously rustdoc was built 3 times with `x.py test`:\n\n1. stage2 (using stage1 compiler) for compiletest tests (stage1-tools copied to stage2).\n2. stage1 (using stage0 compiler) for std crate tests (stage0-tools copied to stage1).\n3. stage2 test (using stage2 compiler) for rustdoc crate tests and error_index_generator (stage2-tools).\n\nThis PR removes the majority of number 3, where it will instead use the stage1 compiler, which will share the artifacts from number 1.\n\nThis matches the behavior of the libstd crate tests. I don't think it is entirely necessary to run the tests using stage2.\n\nAt `-j2`, the last build step goes from about 300s to 70s on my machine. It's not a huge win, but shaving 4 minutes isn't bad.\n\nThe other two builds would be pretty difficult (or undesired or impossible) to unify. It looks like std tests use stage1 very intentionally (see `force_use_stage1` and its history), and compiletests use the top stage very intentionally.\n\nUnfortunately the linkchecker builds all docs at stage2 (stage2-tools), which means a few build script artifacts are not shared. It's not really clear to me how to fix that (because it uses `default_doc`, there doesn't seem to be any control over the stages).\n\n---\n\nFor `x.py doc`, rustdoc was previously built three times (with compiler-docs):\n\n1. stage2 (using stage1 compiler) for normal documentation output (stage1-tools copied to stage2).\n2. stage1 (using stage0 compiler) for compiler-docs\n3. stage2 (using stage2 compiler) for error_index_generator (stage2-tools)\n\nThis PR combines these so that they consistently use the \"top stage\" rustdoc. I don't know why the compiler-docs was written to use stage minus one, but it seems better to be consistent across the doc steps.\n\n---\n\nI've tried to test this with a variety of commands (`x.py doc`, `x.py test`, different `--stage` flags, `full-bootstrap`, setting `--target`, etc.) to try to make sure there aren't significant regressions here. It's tricky since there are so many variables, and this stuff is difficult for me to fully understand.\n\nCloses #70799 (I think)", "tree": {"sha": "651cb98a17eef5a1e9a6a2b06cb8ef54af018429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/651cb98a17eef5a1e9a6a2b06cb8ef54af018429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b2f44a57b6814c250373bf19fb71e5e733e8044", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/YnUCRBK7hj4Ov3rIwAAdHIIAA0whZEFka6PcsrEiItYcrW/\noxDUg6sOH3WFJSlNgTvPRhDAFcgnV9tUV5qHyElP2dzB4CIzYJEoInkV3WX+TwJ8\nZROpGnaQKfpRpEfY3ZQTKqGD9xjLq918wGcXhAnMVIQITL1pQSQ6yNzE9JtNd8Cz\nJqWT+YGojJG4JRPYpea2lsEcVSJMtJUzjPdKaliH85MFb3IOnH/ARMFF8k5m/692\nQo9nPBy4mPf90z1BpcTQ8VqE1oYxVxnQm0DiJqhqyfnozU6ISU9XyQVuIgaoowla\n+Ijz/q4lBT0HMrWCkMOTtFbHze4T4ouAp/3JxNREO1+nqi9ZlT7WfZGw5AwOQ+s=\n=32ma\n-----END PGP SIGNATURE-----\n", "payload": "tree 651cb98a17eef5a1e9a6a2b06cb8ef54af018429\nparent 294b97251d53eba9ce3f2e389ef5e53d414768f7\nparent 0b9bc79738d3a0bc9672b29196d478e9e7f177cd\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593674196 -0700\ncommitter GitHub <noreply@github.com> 1593674196 -0700\n\nRollup merge of #73883 - ehuss:rustdoc-stage-previous, r=Mark-Simulacrum\n\nCompile rustdoc less often.\n\nPreviously rustdoc was built 3 times with `x.py test`:\n\n1. stage2 (using stage1 compiler) for compiletest tests (stage1-tools copied to stage2).\n2. stage1 (using stage0 compiler) for std crate tests (stage0-tools copied to stage1).\n3. stage2 test (using stage2 compiler) for rustdoc crate tests and error_index_generator (stage2-tools).\n\nThis PR removes the majority of number 3, where it will instead use the stage1 compiler, which will share the artifacts from number 1.\n\nThis matches the behavior of the libstd crate tests. I don't think it is entirely necessary to run the tests using stage2.\n\nAt `-j2`, the last build step goes from about 300s to 70s on my machine. It's not a huge win, but shaving 4 minutes isn't bad.\n\nThe other two builds would be pretty difficult (or undesired or impossible) to unify. It looks like std tests use stage1 very intentionally (see `force_use_stage1` and its history), and compiletests use the top stage very intentionally.\n\nUnfortunately the linkchecker builds all docs at stage2 (stage2-tools), which means a few build script artifacts are not shared. It's not really clear to me how to fix that (because it uses `default_doc`, there doesn't seem to be any control over the stages).\n\n---\n\nFor `x.py doc`, rustdoc was previously built three times (with compiler-docs):\n\n1. stage2 (using stage1 compiler) for normal documentation output (stage1-tools copied to stage2).\n2. stage1 (using stage0 compiler) for compiler-docs\n3. stage2 (using stage2 compiler) for error_index_generator (stage2-tools)\n\nThis PR combines these so that they consistently use the \"top stage\" rustdoc. I don't know why the compiler-docs was written to use stage minus one, but it seems better to be consistent across the doc steps.\n\n---\n\nI've tried to test this with a variety of commands (`x.py doc`, `x.py test`, different `--stage` flags, `full-bootstrap`, setting `--target`, etc.) to try to make sure there aren't significant regressions here. It's tricky since there are so many variables, and this stuff is difficult for me to fully understand.\n\nCloses #70799 (I think)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2f44a57b6814c250373bf19fb71e5e733e8044", "html_url": "https://github.com/rust-lang/rust/commit/7b2f44a57b6814c250373bf19fb71e5e733e8044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b2f44a57b6814c250373bf19fb71e5e733e8044/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294b97251d53eba9ce3f2e389ef5e53d414768f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/294b97251d53eba9ce3f2e389ef5e53d414768f7", "html_url": "https://github.com/rust-lang/rust/commit/294b97251d53eba9ce3f2e389ef5e53d414768f7"}, {"sha": "0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9bc79738d3a0bc9672b29196d478e9e7f177cd", "html_url": "https://github.com/rust-lang/rust/commit/0b9bc79738d3a0bc9672b29196d478e9e7f177cd"}], "stats": {"total": 180, "additions": 146, "deletions": 34}, "files": [{"sha": "1e75e67af0c9e17f847e5e63255ad1d41e2d8feb", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=7b2f44a57b6814c250373bf19fb71e5e733e8044", "patch": "@@ -54,6 +54,11 @@ fn dist_baseline() {\n         &[dist::Std { compiler: Compiler { host: a, stage: 1 }, target: a },]\n     );\n     assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n+    // Make sure rustdoc is only built once.\n+    assert_eq!(\n+        first(builder.cache.all::<tool::Rustdoc>()),\n+        &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n+    );\n }\n \n #[test]\n@@ -414,3 +419,77 @@ fn test_exclude() {\n     // Ensure other tests are not affected.\n     assert!(builder.cache.contains::<test::RustdocUi>());\n }\n+\n+#[test]\n+fn doc_default() {\n+    let mut config = configure(&[], &[]);\n+    config.compiler_docs = true;\n+    config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n+    let build = Build::new(config);\n+    let mut builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);\n+    let a = INTERNER.intern_str(\"A\");\n+\n+    // error_index_generator uses stage 1 to share rustdoc artifacts with the\n+    // rustdoc tool.\n+    assert_eq!(\n+        first(builder.cache.all::<doc::ErrorIndex>()),\n+        &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+    );\n+    assert_eq!(\n+        first(builder.cache.all::<tool::ErrorIndex>()),\n+        &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n+    );\n+    // This is actually stage 1, but Rustdoc::run swaps out the compiler with\n+    // stage minus 1 if --stage is not 0. Very confusing!\n+    assert_eq!(\n+        first(builder.cache.all::<tool::Rustdoc>()),\n+        &[tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },]\n+    );\n+}\n+\n+#[test]\n+fn test_docs() {\n+    // Behavior of `x.py test` doing various documentation tests.\n+    let mut config = configure(&[], &[]);\n+    config.cmd = Subcommand::Test {\n+        paths: vec![],\n+        test_args: vec![],\n+        rustc_args: vec![],\n+        fail_fast: true,\n+        doc_tests: DocTests::Yes,\n+        bless: false,\n+        compare_mode: None,\n+        rustfix_coverage: false,\n+        pass: None,\n+    };\n+    let build = Build::new(config);\n+    let mut builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n+    let a = INTERNER.intern_str(\"A\");\n+\n+    // error_index_generator uses stage 1 to share rustdoc artifacts with the\n+    // rustdoc tool.\n+    assert_eq!(\n+        first(builder.cache.all::<doc::ErrorIndex>()),\n+        &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+    );\n+    assert_eq!(\n+        first(builder.cache.all::<tool::ErrorIndex>()),\n+        &[tool::ErrorIndex { compiler: Compiler { host: a, stage: 1 } }]\n+    );\n+    // Unfortunately rustdoc is built twice. Once from stage1 for compiletest\n+    // (and other things), and once from stage0 for std crates. Ideally it\n+    // would only be built once. If someone wants to fix this, it might be\n+    // worth investigating if it would be possible to test std from stage1.\n+    // Note that the stages here are +1 than what they actually are because\n+    // Rustdoc::run swaps out the compiler with stage minus 1 if --stage is\n+    // not 0.\n+    assert_eq!(\n+        first(builder.cache.all::<tool::Rustdoc>()),\n+        &[\n+            tool::Rustdoc { compiler: Compiler { host: a, stage: 1 } },\n+            tool::Rustdoc { compiler: Compiler { host: a, stage: 2 } },\n+        ]\n+    );\n+}"}, {"sha": "d02c19467ee68da0b9b420a038f7bdf8d6eb43e5", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7b2f44a57b6814c250373bf19fb71e5e733e8044", "patch": "@@ -518,8 +518,7 @@ impl Step for Rustc {\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        // Get the correct compiler for this stage.\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n+        let compiler = builder.compiler(stage, builder.config.build);\n \n         if !builder.config.compiler_docs {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n@@ -599,8 +598,7 @@ impl Step for Rustdoc {\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        // Get the correct compiler for this stage.\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n+        let compiler = builder.compiler(stage, builder.config.build);\n \n         if !builder.config.compiler_docs {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n@@ -639,9 +637,10 @@ impl Step for Rustdoc {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n-    target: Interned<String>,\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n }\n \n impl Step for ErrorIndex {\n@@ -655,26 +654,26 @@ impl Step for ErrorIndex {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(ErrorIndex { target: run.target });\n+        let target = run.target;\n+        // error_index_generator depends on librustdoc. Use the compiler that\n+        // is normally used to build rustdoc for other documentation so that\n+        // it shares the same artifacts.\n+        let compiler =\n+            run.builder.compiler_for(run.builder.top_stage, run.builder.config.build, target);\n+        run.builder.ensure(ErrorIndex { compiler, target });\n     }\n \n     /// Generates the HTML rendered error-index by running the\n     /// `error_index_generator` tool.\n     fn run(self, builder: &Builder<'_>) {\n-        let target = self.target;\n-\n-        builder.info(&format!(\"Documenting error index ({})\", target));\n-        let out = builder.doc_out(target);\n+        builder.info(&format!(\"Documenting error index ({})\", self.target));\n+        let out = builder.doc_out(self.target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler(2, builder.config.build);\n-        let mut index = tool::ErrorIndex::command(builder, compiler);\n+        let mut index = tool::ErrorIndex::command(builder, self.compiler);\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n         index.arg(crate::channel::CFG_RELEASE_NUM);\n \n-        // FIXME: shouldn't have to pass this env var\n-        index.env(\"CFG_BUILD\", &builder.config.build);\n-\n         builder.run(&mut index);\n     }\n }"}, {"sha": "77bcc00d75b2b68c8ab14e7b42bc7f34bd54c0cf", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7b2f44a57b6814c250373bf19fb71e5e733e8044", "patch": "@@ -1454,8 +1454,11 @@ impl Step for ErrorIndex {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder\n-            .ensure(ErrorIndex { compiler: run.builder.compiler(run.builder.top_stage, run.host) });\n+        // error_index_generator depends on librustdoc. Use the compiler that\n+        // is normally used to build rustdoc for other tests (like compiletest\n+        // tests in src/test/rustdoc) so that it shares the same artifacts.\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n+        run.builder.ensure(ErrorIndex { compiler });\n     }\n \n     /// Runs the error index generator tool to execute the tests located in the error\n@@ -1467,22 +1470,23 @@ impl Step for ErrorIndex {\n     fn run(self, builder: &Builder<'_>) {\n         let compiler = self.compiler;\n \n-        builder.ensure(compile::Std { compiler, target: compiler.host });\n-\n         let dir = testdir(builder, compiler.host);\n         t!(fs::create_dir_all(&dir));\n         let output = dir.join(\"error-index.md\");\n \n-        let mut tool = tool::ErrorIndex::command(\n-            builder,\n-            builder.compiler(compiler.stage, builder.config.build),\n-        );\n-        tool.arg(\"markdown\").arg(&output).env(\"CFG_BUILD\", &builder.config.build);\n+        let mut tool = tool::ErrorIndex::command(builder, compiler);\n+        tool.arg(\"markdown\").arg(&output);\n \n-        builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n+        // Use the rustdoc that was built by self.compiler. This copy of\n+        // rustdoc is shared with other tests (like compiletest tests in\n+        // src/test/rustdoc). This helps avoid building rustdoc multiple\n+        // times.\n+        let rustdoc_compiler = builder.compiler(builder.top_stage, builder.config.build);\n+        builder.info(&format!(\"Testing error-index stage{}\", rustdoc_compiler.stage));\n         let _time = util::timeit(&builder);\n         builder.run_quiet(&mut tool);\n-        markdown_test(builder, compiler, &output);\n+        builder.ensure(compile::Std { compiler: rustdoc_compiler, target: rustdoc_compiler.host });\n+        markdown_test(builder, rustdoc_compiler, &output);\n     }\n }\n \n@@ -1797,9 +1801,13 @@ impl Step for CrateRustdoc {\n \n     fn run(self, builder: &Builder<'_>) {\n         let test_kind = self.test_kind;\n+        let target = self.host;\n \n-        let compiler = builder.compiler(builder.top_stage, self.host);\n-        let target = compiler.host;\n+        // Use the previous stage compiler to reuse the artifacts that are\n+        // created when running compiletest for src/test/rustdoc. If this used\n+        // `compiler`, then it would cause rustdoc to be built *again*, which\n+        // isn't really necessary.\n+        let compiler = builder.compiler_for(builder.top_stage, target, target);\n         builder.ensure(compile::Rustc { compiler, target });\n \n         let mut cargo = tool::prepare_tool_cargo(\n@@ -1825,6 +1833,32 @@ impl Step for CrateRustdoc {\n             cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n         }\n \n+        // This is needed for running doctests on librustdoc. This is a bit of\n+        // an unfortunate interaction with how bootstrap works and how cargo\n+        // sets up the dylib path, and the fact that the doctest (in\n+        // html/markdown.rs) links to rustc-private libs. For stage1, the\n+        // compiler host dylibs (in stage1/lib) are not the same as the target\n+        // dylibs (in stage1/lib/rustlib/...). This is different from a normal\n+        // rust distribution where they are the same.\n+        //\n+        // On the cargo side, normal tests use `target_process` which handles\n+        // setting up the dylib for a *target* (stage1/lib/rustlib/... in this\n+        // case). However, for doctests it uses `rustdoc_process` which only\n+        // sets up the dylib path for the *host* (stage1/lib), which is the\n+        // wrong directory.\n+        //\n+        // It should be considered to just stop running doctests on\n+        // librustdoc. There is only one test, and it doesn't look too\n+        // important. There might be other ways to avoid this, but it seems\n+        // pretty convoluted.\n+        //\n+        // See also https://github.com/rust-lang/rust/issues/13983 where the\n+        // host vs target dylibs for rustdoc are consistently tricky to deal\n+        // with.\n+        let mut dylib_path = dylib_path();\n+        dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n+        cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+\n         if !builder.config.verbose_tests {\n             cargo.arg(\"--quiet\");\n         }"}, {"sha": "45f5073f4310081b221c90493ddfb993f875495f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f44a57b6814c250373bf19fb71e5e733e8044/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7b2f44a57b6814c250373bf19fb71e5e733e8044", "patch": "@@ -366,7 +366,7 @@ bootstrap_tool!(\n     ExpandYamlAnchors, \"src/tools/expand-yaml-anchors\", \"expand-yaml-anchors\";\n );\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n pub struct ErrorIndex {\n     pub compiler: Compiler,\n }\n@@ -392,9 +392,9 @@ impl Step for ErrorIndex {\n     fn make_run(run: RunConfig<'_>) {\n         // Compile the error-index in the same stage as rustdoc to avoid\n         // recompiling rustdoc twice if we can.\n-        let stage = if run.builder.top_stage >= 2 { run.builder.top_stage } else { 0 };\n-        run.builder\n-            .ensure(ErrorIndex { compiler: run.builder.compiler(stage, run.builder.config.build) });\n+        let host = run.builder.config.build;\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, host, host);\n+        run.builder.ensure(ErrorIndex { compiler });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n@@ -449,7 +449,7 @@ impl Step for RemoteTestServer {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n pub struct Rustdoc {\n     /// This should only ever be 0 or 2.\n     /// We sometimes want to reference the \"bootstrap\" rustdoc, which is why this option is here."}]}