{"sha": "5be210c4188fb2f1a4fabc6baee5397ac6e6741e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZTIxMGM0MTg4ZmIyZjFhNGZhYmM2YmFlZTUzOTdhYzZlNjc0MWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-15T03:07:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-15T03:07:59Z"}, "message": "Auto merge of #22058 - Gankro:all-the-impls, r=huonw\n\nWorking on just knocking these out for all the collections so that there's something there.", "tree": {"sha": "dbdfb03ca4b9bee9dea2f52c487a09f66a1e1461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdfb03ca4b9bee9dea2f52c487a09f66a1e1461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be210c4188fb2f1a4fabc6baee5397ac6e6741e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be210c4188fb2f1a4fabc6baee5397ac6e6741e", "html_url": "https://github.com/rust-lang/rust/commit/5be210c4188fb2f1a4fabc6baee5397ac6e6741e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be210c4188fb2f1a4fabc6baee5397ac6e6741e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b63cee4a11fcfecf20ed8419bc3bd6859e6496bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b63cee4a11fcfecf20ed8419bc3bd6859e6496bc", "html_url": "https://github.com/rust-lang/rust/commit/b63cee4a11fcfecf20ed8419bc3bd6859e6496bc"}, {"sha": "3c18bc42722c137656caeea2cc6dd1047501f098", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c18bc42722c137656caeea2cc6dd1047501f098", "html_url": "https://github.com/rust-lang/rust/commit/3c18bc42722c137656caeea2cc6dd1047501f098"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "ec1e648939a54360478f01c1ce4fe087f191bf6f", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/5be210c4188fb2f1a4fabc6baee5397ac6e6741e/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be210c4188fb2f1a4fabc6baee5397ac6e6741e/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=5be210c4188fb2f1a4fabc6baee5397ac6e6741e", "patch": "@@ -1289,6 +1289,98 @@ impl<T> RingBuf<T> {\n \n         return elem;\n     }\n+\n+    /// Splits the collection into two at the given index.\n+    ///\n+    /// Returns a newly allocated `Self`. `self` contains elements `[0, at)`,\n+    /// and the returned `Self` contains elements `[at, len)`.\n+    ///\n+    /// Note that the capacity of `self` does not change.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `at > len`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::RingBuf;\n+    ///\n+    /// let mut buf: RingBuf<_> = vec![1,2,3].into_iter().collect();\n+    /// let buf2 = buf.split_off(1);\n+    /// // buf = [1], buf2 = [2, 3]\n+    /// assert_eq!(buf.len(), 1);\n+    /// assert_eq!(buf2.len(), 2);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"collections\",\n+               reason = \"new API, waiting for dust to settle\")]\n+    pub fn split_off(&mut self, at: usize) -> Self {\n+        let len = self.len();\n+        assert!(at <= len, \"`at` out of bounds\");\n+\n+        let other_len = len - at;\n+        let mut other = RingBuf::with_capacity(other_len);\n+\n+        unsafe {\n+            let (first_half, second_half) = self.as_slices();\n+\n+            let first_len = first_half.len();\n+            let second_len = second_half.len();\n+            if at < first_len {\n+                // `at` lies in the first half.\n+                let amount_in_first = first_len - at;\n+\n+                ptr::copy_nonoverlapping_memory(other.ptr,\n+                                                first_half.as_ptr().offset(at as isize),\n+                                                amount_in_first);\n+\n+                // just take all of the second half.\n+                ptr::copy_nonoverlapping_memory(other.ptr.offset(amount_in_first as isize),\n+                                                second_half.as_ptr(),\n+                                                second_len);\n+            } else {\n+                // `at` lies in the second half, need to factor in the elements we skipped\n+                // in the first half.\n+                let offset = at - first_len;\n+                let amount_in_second = second_len - offset;\n+                ptr::copy_nonoverlapping_memory(other.ptr,\n+                                                second_half.as_ptr().offset(offset as isize),\n+                                                amount_in_second);\n+            }\n+        }\n+\n+        // Cleanup where the ends of the buffers are\n+        self.head = self.wrap_index(self.head - other_len);\n+        other.head = other.wrap_index(other_len);\n+\n+        other\n+    }\n+\n+    /// Moves all the elements of `other` into `Self`, leaving `other` empty.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the new number of elements in self overflows a `usize`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::RingBuf;\n+    ///\n+    /// let mut buf: RingBuf<_> = vec![1, 2, 3].into_iter().collect();\n+    /// let mut buf2: RingBuf<_> = vec![4, 5, 6].into_iter().collect();\n+    /// buf.append(&mut buf2);\n+    /// assert_eq!(buf.len(), 6);\n+    /// assert_eq!(buf2.len(), 0);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"collections\",\n+               reason = \"new API, waiting for dust to settle\")]\n+    pub fn append(&mut self, other: &mut Self) {\n+        // naive impl\n+        self.extend(other.drain());\n+    }\n }\n \n impl<T: Clone> RingBuf<T> {\n@@ -2711,4 +2803,63 @@ mod tests {\n         assert_eq!(ring.len() as i32, cap);\n         assert_eq!(ring.capacity() as i32, cap);\n     }\n+\n+    #[test]\n+    fn test_split_off() {\n+        // This test checks that every single combination of tail position, length, and\n+        // split position is tested. Capacity 15 should be large enough to cover every case.\n+\n+        let mut tester = RingBuf::with_capacity(15);\n+        // can't guarantee we got 15, so have to get what we got.\n+        // 15 would be great, but we will definitely get 2^k - 1, for k >= 4, or else\n+        // this test isn't covering what it wants to\n+        let cap = tester.capacity();\n+\n+        // len is the length *before* splitting\n+        for len in 0..cap {\n+            // index to split at\n+            for at in 0..len + 1 {\n+                // 0, 1, 2, .., at - 1 (may be empty)\n+                let expected_self = iter::count(0, 1).take(at).collect();\n+                // at, at + 1, .., len - 1 (may be empty)\n+                let expected_other = iter::count(at, 1).take(len - at).collect();\n+\n+                for tail_pos in 0..cap {\n+                    tester.tail = tail_pos;\n+                    tester.head = tail_pos;\n+                    for i in 0..len {\n+                        tester.push_back(i);\n+                    }\n+                    let result = tester.split_off(at);\n+                    assert!(tester.tail < tester.cap);\n+                    assert!(tester.head < tester.cap);\n+                    assert!(result.tail < result.cap);\n+                    assert!(result.head < result.cap);\n+                    assert_eq!(tester, expected_self);\n+                    assert_eq!(result, expected_other);\n+                }\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn test_append() {\n+        let mut a: RingBuf<_> = vec![1, 2, 3].into_iter().collect();\n+        let mut b: RingBuf<_> = vec![4, 5, 6].into_iter().collect();\n+\n+        // normal append\n+        a.append(&mut b);\n+        assert_eq!(a.iter().cloned().collect(), vec![1, 2, 3, 4, 5, 6]);\n+        assert_eq!(b.iter().cloned().collect(), vec![]);\n+\n+        // append nothing to something\n+        a.append(&mut b);\n+        assert_eq!(a.iter().cloned().collect(), vec![1, 2, 3, 4, 5, 6]);\n+        assert_eq!(b.iter().cloned().collect(), vec![]);\n+\n+        // append something to nothing\n+        b.append(&mut a);\n+        assert_eq!(b.iter().cloned().collect(), vec![1, 2, 3, 4, 5, 6]);\n+        assert_eq!(a.iter().cloned().collect(), vec![]);\n+    }\n }"}]}