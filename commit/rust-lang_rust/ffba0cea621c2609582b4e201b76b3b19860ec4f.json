{"sha": "ffba0cea621c2609582b4e201b76b3b19860ec4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYmEwY2VhNjIxYzI2MDk1ODJiNGUyMDFiNzZiM2IxOTg2MGVjNGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-21T14:40:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-30T20:14:15Z"}, "message": "Merge ty::TyBox into ty::TyAdt", "tree": {"sha": "48c8591c66b1601160f311d4b882f8b27bfcbe28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c8591c66b1601160f311d4b882f8b27bfcbe28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffba0cea621c2609582b4e201b76b3b19860ec4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffba0cea621c2609582b4e201b76b3b19860ec4f", "html_url": "https://github.com/rust-lang/rust/commit/ffba0cea621c2609582b4e201b76b3b19860ec4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffba0cea621c2609582b4e201b76b3b19860ec4f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f9712d14126bce39357e6160a638ce7886e982", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f9712d14126bce39357e6160a638ce7886e982", "html_url": "https://github.com/rust-lang/rust/commit/55f9712d14126bce39357e6160a638ce7886e982"}], "stats": {"total": 660, "additions": 315, "deletions": 345}, "files": [{"sha": "d98bc1892922a850293ed918e1188402b5fbd231", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -103,6 +103,7 @@ pub struct ExchangeHeapSingleton {\n ///\n /// See the [module-level documentation](../../std/boxed/index.html) for more.\n #[lang = \"owned_box\"]\n+#[fundamental]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Box<T: ?Sized>(Unique<T>);\n "}, {"sha": "697a1ecadc456afe92b6702999aa1d8851aa3cd9", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -156,7 +156,6 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::TyUint(..) |\n             ty::TyFloat(..) |\n             ty::TyAdt(..) |\n-            ty::TyBox(..) |\n             ty::TyStr |\n             ty::TyError |\n             ty::TyArray(..) |"}, {"sha": "0e8e1921de700fc1f7a77161bbb9162d1c051c5f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -961,7 +961,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                                     -> cmt<'tcx>\n     {\n         let ptr = match base_cmt.ty.sty {\n-            ty::TyBox(..) => Unique,\n+            ty::TyAdt(def, ..) if def.is_box() => Unique,\n             ty::TyRawPtr(ref mt) => UnsafePtr(mt.mutbl),\n             ty::TyRef(r, mt) => {\n                 let bk = ty::BorrowKind::from_mutbl(mt.mutbl);"}, {"sha": "383fab3fcd766cc1d40cd774c0f44f249b3cf792", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -199,7 +199,7 @@ fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n \n fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, infer_is_local: InferIsLocal)\n                        -> Vec<Ty<'tcx>> {\n-    if ty_is_local_constructor(tcx, ty, infer_is_local) {\n+    if ty_is_local_constructor(ty, infer_is_local) {\n         vec![]\n     } else if fundamental_ty(tcx, ty) {\n         ty.walk_shallow()\n@@ -219,13 +219,13 @@ fn is_type_parameter(ty: Ty) -> bool {\n }\n \n fn ty_is_local(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal) -> bool {\n-    ty_is_local_constructor(tcx, ty, infer_is_local) ||\n+    ty_is_local_constructor(ty, infer_is_local) ||\n         fundamental_ty(tcx, ty) && ty.walk_shallow().any(|t| ty_is_local(tcx, t, infer_is_local))\n }\n \n fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool {\n     match ty.sty {\n-        ty::TyBox(..) | ty::TyRef(..) => true,\n+        ty::TyRef(..) => true,\n         ty::TyAdt(def, _) => def.is_fundamental(),\n         ty::TyDynamic(ref data, ..) => {\n             data.principal().map_or(false, |p| tcx.has_attr(p.def_id(), \"fundamental\"))\n@@ -234,7 +234,7 @@ fn fundamental_ty(tcx: TyCtxt, ty: Ty) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal)-> bool {\n+fn ty_is_local_constructor(ty: Ty, infer_is_local: InferIsLocal)-> bool {\n     debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match ty.sty {\n@@ -265,11 +265,6 @@ fn ty_is_local_constructor(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal)->\n             def.did.is_local()\n         }\n \n-        ty::TyBox(_) => { // Box<T>\n-            let krate = tcx.lang_items.owned_box().map(|d| d.krate);\n-            krate == Some(LOCAL_CRATE)\n-        }\n-\n         ty::TyDynamic(ref tt, ..) => {\n             tt.principal().map_or(false, |p| p.def_id().is_local())\n         }"}, {"sha": "661d47199df13991861ca3023eeb302a4a9d6931", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::TyStr => Some(2),\n                 ty::TyInt(..) | ty::TyUint(..) | ty::TyInfer(ty::IntVar(..)) => Some(3),\n                 ty::TyFloat(..) | ty::TyInfer(ty::FloatVar(..)) => Some(4),\n-                ty::TyBox(..) | ty::TyRef(..) | ty::TyRawPtr(..) => Some(5),\n+                ty::TyRef(..) | ty::TyRawPtr(..) => Some(5),\n                 ty::TyArray(..) | ty::TySlice(..) => Some(6),\n                 ty::TyFnDef(..) | ty::TyFnPtr(..) => Some(7),\n                 ty::TyDynamic(..) => Some(8),"}, {"sha": "d51332f833d77cfdbefddc812c1092da8d7177c6", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -1735,7 +1735,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) |\n             ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n             ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyRawPtr(..) |\n-            ty::TyChar | ty::TyBox(_) | ty::TyRef(..) |\n+            ty::TyChar | ty::TyRef(..) |\n             ty::TyArray(..) | ty::TyClosure(..) | ty::TyNever |\n             ty::TyError => {\n                 // safe for everything\n@@ -1788,7 +1788,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(Vec::new()))\n             }\n \n-            ty::TyBox(_) | ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) |\n+            ty::TyDynamic(..) | ty::TyStr | ty::TySlice(..) |\n             ty::TyClosure(..) |\n             ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutMutable }) => {\n                 Never\n@@ -1865,10 +1865,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                      t);\n             }\n \n-            ty::TyBox(referent_ty) => {  // Box<T>\n-                vec![referent_ty]\n-            }\n-\n             ty::TyRawPtr(ty::TypeAndMut { ty: element_ty, ..}) |\n             ty::TyRef(_, ty::TypeAndMut { ty: element_ty, ..}) => {\n                 vec![element_ty]"}, {"sha": "53e8a1d0e37e5d5f3c604aea96de215b5d528f7c", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -191,10 +191,6 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                     TC::None\n                 }\n \n-                ty::TyBox(typ) => {\n-                    tc_ty(tcx, typ, cache).owned_pointer()\n-                }\n-\n                 ty::TyDynamic(..) => {\n                     TC::All - TC::InteriorParam\n                 }\n@@ -227,6 +223,10 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                                         |ty| tc_ty(tcx, *ty, cache))\n                 }\n \n+                ty::TyAdt(def, _) if def.is_box() => {\n+                    tc_ty(tcx, ty.boxed_ty(), cache).owned_pointer()\n+                }\n+\n                 ty::TyAdt(def, substs) => {\n                     let mut res =\n                         TypeContents::union(&def.variants, |v| {"}, {"sha": "ce4a6a3182635d5aad030d99e5ef25474822d4f7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -19,6 +19,7 @@ use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DisambiguatedDefPathData;\n use middle::free_region::FreeRegionMap;\n+use middle::lang_items;\n use middle::region::RegionMaps;\n use middle::resolve_lifetime;\n use middle::stability;\n@@ -1088,7 +1089,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     pub fn print_debug_stats(self) {\n         sty_debug_print!(\n             self,\n-            TyAdt, TyBox, TyArray, TySlice, TyRawPtr, TyRef, TyFnDef, TyFnPtr,\n+            TyAdt, TyArray, TySlice, TyRawPtr, TyRef, TyFnDef, TyFnPtr,\n             TyDynamic, TyClosure, TyTuple, TyParam, TyInfer, TyProjection, TyAnon);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n@@ -1336,7 +1337,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(TyBox(ty))\n+        let def_id = self.require_lang_item(lang_items::OwnedBoxLangItem);\n+        let adt_def = self.lookup_adt_def(def_id);\n+        let substs = self.mk_substs(iter::once(Kind::from(ty)));\n+        self.mk_ty(TyAdt(adt_def, substs))\n     }\n \n     pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {"}, {"sha": "29d855a7fcb78ebf9cc3362bc7e100060243b610", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -181,7 +181,6 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyTuple(ref tys) if tys.is_empty() => self.to_string(),\n \n             ty::TyAdt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)),\n-            ty::TyBox(_) => \"box\".to_string(),\n             ty::TyArray(_, n) => format!(\"array of {} elements\", n),\n             ty::TySlice(_) => \"slice\".to_string(),\n             ty::TyRawPtr(_) => \"*-ptr\".to_string(),"}, {"sha": "94b9abc72025faed7f33357bdcd25610416ed7d8", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -11,7 +11,6 @@\n use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n-use middle::lang_items::OwnedBoxLangItem;\n \n use self::SimplifiedType::*;\n \n@@ -69,10 +68,6 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             // view of possibly unifying\n             simplify_type(tcx, mt.ty, can_simplify_params)\n         }\n-        ty::TyBox(_) => {\n-            // treat like we would treat `Box`\n-            Some(AdtSimplifiedType(tcx.require_lang_item(OwnedBoxLangItem)))\n-        }\n         ty::TyClosure(def_id, _) => {\n             Some(ClosureSimplifiedType(def_id))\n         }"}, {"sha": "0de77526b5a46a2e934c36ee239a200f441ab05f", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -138,7 +138,7 @@ impl FlagComputation {\n                 self.add_region(r);\n             }\n \n-            &ty::TyBox(tt) | &ty::TyArray(tt, _) | &ty::TySlice(tt) => {\n+            &ty::TyArray(tt, _) | &ty::TySlice(tt) => {\n                 self.add_ty(tt)\n             }\n "}, {"sha": "b719911d18cf8706113805f6ccba94fe49f00b21", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -314,8 +314,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::TyDynamic(data, ..) => data.principal().map(|p| p.def_id()),\n \n         ty::TyArray(subty, _) |\n-        ty::TySlice(subty) |\n-        ty::TyBox(subty) => characteristic_def_id_of_type(subty),\n+        ty::TySlice(subty) => characteristic_def_id_of_type(subty),\n \n         ty::TyRawPtr(mt) |\n         ty::TyRef(_, mt) => characteristic_def_id_of_type(mt.ty),"}, {"sha": "78364abdaecba9ee2a160cf811b53846687211d1", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -1053,6 +1053,23 @@ impl<'a, 'gcx, 'tcx> Layout {\n         let dl = &tcx.data_layout;\n         assert!(!ty.has_infer_types());\n \n+        let ptr_layout = |pointee: Ty<'gcx>| {\n+            let non_zero = !ty.is_unsafe_ptr();\n+            let pointee = normalize_associated_type(infcx, pointee);\n+            if pointee.is_sized(tcx, &infcx.parameter_environment, DUMMY_SP) {\n+                Ok(Scalar { value: Pointer, non_zero: non_zero })\n+            } else {\n+                let unsized_part = tcx.struct_tail(pointee);\n+                let meta = match unsized_part.sty {\n+                    ty::TySlice(_) | ty::TyStr => {\n+                        Int(dl.ptr_sized_integer())\n+                    }\n+                    ty::TyDynamic(..) => Pointer,\n+                    _ => return Err(LayoutError::Unknown(unsized_part))\n+                };\n+                Ok(FatPointer { metadata: meta, non_zero: non_zero })\n+            }\n+        };\n \n         let layout = match ty.sty {\n             // Basic scalars.\n@@ -1082,24 +1099,12 @@ impl<'a, 'gcx, 'tcx> Layout {\n             },\n \n             // Potentially-fat pointers.\n-            ty::TyBox(pointee) |\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n-                let non_zero = !ty.is_unsafe_ptr();\n-                let pointee = normalize_associated_type(infcx, pointee);\n-                if pointee.is_sized(tcx, &infcx.parameter_environment, DUMMY_SP) {\n-                    Scalar { value: Pointer, non_zero: non_zero }\n-                } else {\n-                    let unsized_part = tcx.struct_tail(pointee);\n-                    let meta = match unsized_part.sty {\n-                        ty::TySlice(_) | ty::TyStr => {\n-                            Int(dl.ptr_sized_integer())\n-                        }\n-                        ty::TyDynamic(..) => Pointer,\n-                        _ => return Err(LayoutError::Unknown(unsized_part))\n-                    };\n-                    FatPointer { metadata: meta, non_zero: non_zero }\n-                }\n+                ptr_layout(pointee)?\n+            }\n+            ty::TyAdt(def, _) if def.is_box() => {\n+                ptr_layout(ty.boxed_ty())?\n             }\n \n             // Arrays and slices.\n@@ -1560,26 +1565,32 @@ impl<'a, 'gcx, 'tcx> SizeSkeleton<'gcx> {\n             Err(err) => err\n         };\n \n+        let ptr_skeleton = |pointee: Ty<'gcx>| {\n+            let non_zero = !ty.is_unsafe_ptr();\n+            let tail = tcx.struct_tail(pointee);\n+            match tail.sty {\n+                ty::TyParam(_) | ty::TyProjection(_) => {\n+                    assert!(tail.has_param_types() || tail.has_self_ty());\n+                    Ok(SizeSkeleton::Pointer {\n+                        non_zero: non_zero,\n+                        tail: tcx.erase_regions(&tail)\n+                    })\n+                }\n+                _ => {\n+                    bug!(\"SizeSkeleton::compute({}): layout errored ({}), yet \\\n+                            tail `{}` is not a type parameter or a projection\",\n+                            ty, err, tail)\n+                }\n+            }\n+        };\n+\n         match ty.sty {\n-            ty::TyBox(pointee) |\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n-                let non_zero = !ty.is_unsafe_ptr();\n-                let tail = tcx.struct_tail(pointee);\n-                match tail.sty {\n-                    ty::TyParam(_) | ty::TyProjection(_) => {\n-                        assert!(tail.has_param_types() || tail.has_self_ty());\n-                        Ok(SizeSkeleton::Pointer {\n-                            non_zero: non_zero,\n-                            tail: tcx.erase_regions(&tail)\n-                        })\n-                    }\n-                    _ => {\n-                        bug!(\"SizeSkeleton::compute({}): layout errored ({}), yet \\\n-                              tail `{}` is not a type parameter or a projection\",\n-                             ty, err, tail)\n-                    }\n-                }\n+                ptr_skeleton(pointee)\n+            }\n+            ty::TyAdt(def, _) if def.is_box() => {\n+                ptr_skeleton(ty.boxed_ty())\n             }\n \n             ty::TyAdt(def, substs) => {"}, {"sha": "db21d35f990d35254efbece57602de3e0eb17fa3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -1302,6 +1302,7 @@ bitflags! {\n         const IS_SIMD             = 1 << 4,\n         const IS_FUNDAMENTAL      = 1 << 5,\n         const IS_UNION            = 1 << 6,\n+        const IS_BOX              = 1 << 7,\n     }\n }\n \n@@ -1376,6 +1377,9 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         if Some(did) == tcx.lang_items.phantom_data() {\n             flags = flags | AdtFlags::IS_PHANTOM_DATA;\n         }\n+        if Some(did) == tcx.lang_items.owned_box() {\n+            flags = flags | AdtFlags::IS_BOX;\n+        }\n         match kind {\n             AdtKind::Enum => flags = flags | AdtFlags::IS_ENUM,\n             AdtKind::Union => flags = flags | AdtFlags::IS_UNION,\n@@ -1468,6 +1472,12 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         self.flags.get().intersects(AdtFlags::IS_PHANTOM_DATA)\n     }\n \n+    /// Returns true if this is Box<T>.\n+    #[inline]\n+    pub fn is_box(&self) -> bool {\n+        self.flags.get().intersects(AdtFlags::IS_BOX)\n+    }\n+\n     /// Returns whether this type has a destructor.\n     pub fn has_dtor(&self) -> bool {\n         self.dtor_kind().is_present()\n@@ -1641,7 +1651,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                                -> Vec<Ty<'tcx>> {\n         let result = match ty.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyBox(..) | TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n+            TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n             TyArray(..) | TyClosure(..) | TyNever => {\n                 vec![]\n             }"}, {"sha": "bc30f1fb71722b31f3df73be54f2885e9dede316", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -167,7 +167,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::TyFloat(..) |       // OutlivesScalar\n             ty::TyNever |           // ...\n             ty::TyAdt(..) |         // OutlivesNominalType\n-            ty::TyBox(..) |         // OutlivesNominalType (ish)\n             ty::TyAnon(..) |        // OutlivesNominalType (ish)\n             ty::TyStr |             // OutlivesScalar (ish)\n             ty::TyArray(..) |       // ..."}, {"sha": "89514085e1c78601d1efd4582387df06ef1b4fff", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -418,12 +418,6 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_closure_from_closure_substs(a_id, substs))\n         }\n \n-        (&ty::TyBox(a_inner), &ty::TyBox(b_inner)) =>\n-        {\n-            let typ = relation.relate(&a_inner, &b_inner)?;\n-            Ok(tcx.mk_box(typ))\n-        }\n-\n         (&ty::TyRawPtr(ref a_mt), &ty::TyRawPtr(ref b_mt)) =>\n         {\n             let mt = relation.relate(a_mt, b_mt)?;"}, {"sha": "05f4abad469213f41347de0013a71ae28d3423ff", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -468,7 +468,6 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Slice<Ty<'tcx>> {\n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let sty = match self.sty {\n-            ty::TyBox(typ) => ty::TyBox(typ.fold_with(folder)),\n             ty::TyRawPtr(tm) => ty::TyRawPtr(tm.fold_with(folder)),\n             ty::TyArray(typ, sz) => ty::TyArray(typ.fold_with(folder), sz),\n             ty::TySlice(typ) => ty::TySlice(typ.fold_with(folder)),\n@@ -506,7 +505,6 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match self.sty {\n-            ty::TyBox(typ) => typ.visit_with(visitor),\n             ty::TyRawPtr(ref tm) => tm.visit_with(visitor),\n             ty::TyArray(typ, _sz) => typ.visit_with(visitor),\n             ty::TySlice(typ) => typ.visit_with(visitor),"}, {"sha": "d7686b60ae31e3572ed2c6fb0279d97a1f4db15e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -115,12 +115,6 @@ pub enum TypeVariants<'tcx> {\n     /// definition and not a concrete use of it.\n     TyAdt(&'tcx AdtDef, &'tcx Substs<'tcx>),\n \n-    /// `Box<T>`; this is nominally a struct in the documentation, but is\n-    /// special-cased internally. For example, it is possible to implicitly\n-    /// move the contents of a box out of that box, and methods of any type\n-    /// can have type `Box<Self>`.\n-    TyBox(Ty<'tcx>),\n-\n     /// The pointee of a string slice. Written as `str`.\n     TyStr,\n \n@@ -1139,10 +1133,18 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_unique(&self) -> bool {\n+    pub fn is_box(&self) -> bool {\n         match self.sty {\n-            TyBox(_) => true,\n-            _ => false\n+            TyAdt(def, _) => def.is_box(),\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn boxed_ty(&self) -> Ty<'tcx> {\n+        match self.sty {\n+            TyAdt(def, substs) if def.is_box() =>\n+                substs.types().next().expect(\"Box<T> doesn't have type parameters\"),\n+            _ => bug!(\"`boxed_ty` is called on non-box type {:?}\", self),\n         }\n     }\n \n@@ -1247,9 +1249,9 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         -> Option<TypeAndMut<'tcx>>\n     {\n         match self.sty {\n-            TyBox(ty) => {\n+            TyAdt(def, _) if def.is_box() => {\n                 Some(TypeAndMut {\n-                    ty: ty,\n+                    ty: self.boxed_ty(),\n                     mutbl: if pref == ty::PreferMutLvalue {\n                         hir::MutMutable\n                     } else {\n@@ -1349,7 +1351,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyInt(_) |\n             TyUint(_) |\n             TyFloat(_) |\n-            TyBox(_) |\n             TyStr |\n             TyArray(..) |\n             TySlice(_) |"}, {"sha": "ba49aa1ef4866b97c8ffc5c211130ae5775a99a2", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -481,7 +481,6 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyBool |\n             TyChar |\n             TyStr |\n-            TyBox(_) |\n             TySlice(_) => {}\n \n             TyError |\n@@ -563,7 +562,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                 mutbl: hir::MutImmutable, ..\n             }) => Some(false),\n \n-            TyStr | TyBox(..) | TyRef(_, TypeAndMut {\n+            TyStr | TyRef(_, TypeAndMut {\n                 mutbl: hir::MutMutable, ..\n             }) => Some(true),\n \n@@ -606,7 +605,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         // Fast-path for primitive types\n         let result = match self.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n-            TyBox(..) | TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n+            TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n             TyArray(..) | TyTuple(..) | TyClosure(..) | TyNever => Some(true),\n \n             TyStr | TyDynamic(..) | TySlice(_) => Some(false),"}, {"sha": "0d1dc2e4d7c218c8ed3dabc3dcafca6d176eef87", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -83,7 +83,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n         ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyNever | ty::TyError => {\n         }\n-        ty::TyBox(ty) | ty::TyArray(ty, _) | ty::TySlice(ty) => {\n+        ty::TyArray(ty, _) | ty::TySlice(ty) => {\n             stack.push(ty);\n         }\n         ty::TyRawPtr(ref mt) | ty::TyRef(_, ref mt) => {"}, {"sha": "33b70b09dcb7b6d742ae1932e77079384fe574ae", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -323,7 +323,6 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                ty::TyBox(_) |\n                 ty::TyRawPtr(_) => {\n                     // simple cases that are WF if their type args are WF\n                 }"}, {"sha": "aa2eb2955debe69cbd278e39cb3b7319de362c7e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -16,7 +16,7 @@ use ty::{TyBool, TyChar, TyAdt};\n use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::{TyClosure, TyProjection, TyAnon};\n-use ty::{TyBox, TyDynamic, TyInt, TyUint, TyInfer};\n+use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n \n use std::cell::Cell;\n@@ -708,7 +708,6 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n             TyInt(t) => write!(f, \"{}\", t.ty_to_string()),\n             TyUint(t) => write!(f, \"{}\", t.ty_to_string()),\n             TyFloat(t) => write!(f, \"{}\", t.ty_to_string()),\n-            TyBox(typ) => write!(f, \"Box<{}>\",  typ),\n             TyRawPtr(ref tm) => {\n                 write!(f, \"*{} {}\", match tm.mutbl {\n                     hir::MutMutable => \"mut\","}, {"sha": "d555502c3ff85d1cf11635ee950f531eef6e4975", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -709,18 +709,18 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     fn open_drop<'a>(&mut self, c: &DropCtxt<'a, 'tcx>) -> BasicBlock {\n         let ty = c.lvalue.ty(self.mir, self.tcx).to_ty(self.tcx);\n         match ty.sty {\n-            ty::TyAdt(def, substs) => {\n-                self.open_drop_for_adt(c, def, substs)\n-            }\n             ty::TyClosure(def_id, substs) => {\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx).collect();\n                 self.open_drop_for_tuple(c, &tys)\n             }\n             ty::TyTuple(tys) => {\n                 self.open_drop_for_tuple(c, tys)\n             }\n-            ty::TyBox(ty) => {\n-                self.open_drop_for_box(c, ty)\n+            ty::TyAdt(def, _) if def.is_box() => {\n+                self.open_drop_for_box(c, ty.boxed_ty())\n+            }\n+            ty::TyAdt(def, substs) => {\n+                self.open_drop_for_adt(c, def, substs)\n             }\n             _ => bug!(\"open drop from non-ADT `{:?}`\", ty)\n         }"}, {"sha": "94b2ba58c9aa539c776df5978597f95658365b93", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -722,7 +722,6 @@ fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usize\n     debug!(\"constructor_arity({:?}, {:?})\", ctor, ty);\n     match ty.sty {\n         ty::TyTuple(ref fs) => fs.len(),\n-        ty::TyBox(_) => 1,\n         ty::TySlice(..) | ty::TyArray(..) => match *ctor {\n             Slice(length) => length,\n             ConstantValue(_) => 0,\n@@ -747,7 +746,6 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n     debug!(\"constructor_sub_pattern_tys({:?}, {:?})\", ctor, ty);\n     match ty.sty {\n         ty::TyTuple(ref fs) => fs.into_iter().map(|t| *t).collect(),\n-        ty::TyBox(ty) => vec![ty],\n         ty::TySlice(ty) | ty::TyArray(ty, _) => match *ctor {\n             Slice(length) => repeat(ty).take(length).collect(),\n             ConstantValue(_) => vec![],"}, {"sha": "c6272613f4d09fd3695222e4523e40dde99e6f37", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -215,7 +215,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             }\n             PatternKind::Deref { ref subpattern } => {\n                 match self.ty.sty {\n-                    ty::TyBox(_) => write!(f, \"box \")?,\n+                    ty::TyAdt(def, _) if def.is_box() => write!(f, \"box \")?,\n                     ty::TyRef(_, mt) => {\n                         write!(f, \"&\")?;\n                         if mt.mutbl == hir::MutMutable {"}, {"sha": "1086d75f02cb4055c030b85c0077eb55fb349804", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -805,10 +805,9 @@ fn walk_ty() {\n         let uint_ty = tcx.types.usize;\n         let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n         let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty]);\n-        let uniq_ty = tcx.mk_box(tup2_ty);\n-        let walked: Vec<_> = uniq_ty.walk().collect();\n+        let walked: Vec<_> = tup2_ty.walk().collect();\n         assert_eq!(walked,\n-                   [uniq_ty, tup2_ty, tup1_ty, int_ty, uint_ty, int_ty, uint_ty, tup1_ty, int_ty,\n+                   [tup2_ty, tup1_ty, int_ty, uint_ty, int_ty, uint_ty, tup1_ty, int_ty,\n                     uint_ty, int_ty, uint_ty, uint_ty]);\n     })\n }\n@@ -821,12 +820,10 @@ fn walk_ty_skip_subtree() {\n         let uint_ty = tcx.types.usize;\n         let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n         let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty]);\n-        let uniq_ty = tcx.mk_box(tup2_ty);\n \n         // types we expect to see (in order), plus a boolean saying\n         // whether to skip the subtree.\n-        let mut expected = vec![(uniq_ty, false),\n-                                (tup2_ty, false),\n+        let mut expected = vec![(tup2_ty, false),\n                                 (tup1_ty, false),\n                                 (int_ty, false),\n                                 (uint_ty, false),\n@@ -836,7 +833,7 @@ fn walk_ty_skip_subtree() {\n                                 (uint_ty, false)];\n         expected.reverse();\n \n-        let mut walker = uniq_ty.walk();\n+        let mut walker = tup2_ty.walk();\n         while let Some(t) = walker.next() {\n             debug!(\"walked to {:?}\", t);\n             let (expected_ty, skip) = expected.pop().unwrap();"}, {"sha": "1592d178176413622851fd0ce664e4863fde72e7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -95,7 +95,7 @@ pub struct BoxPointers;\n impl BoxPointers {\n     fn check_heap_type<'a, 'tcx>(&self, cx: &LateContext, span: Span, ty: Ty) {\n         for leaf_ty in ty.walk() {\n-            if let ty::TyBox(_) = leaf_ty.sty {\n+            if leaf_ty.is_box() {\n                 let m = format!(\"type uses owned (Box type) pointers: {}\", ty);\n                 cx.span_lint(BOX_POINTERS, span, &m);\n             }"}, {"sha": "9669efa2d86b3954250d944ad213dadfb30ce37e", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -519,11 +519,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             // Primitive types with a stable representation.\n             ty::TyBool | ty::TyInt(..) | ty::TyUint(..) | ty::TyFloat(..) | ty::TyNever => FfiSafe,\n \n-            ty::TyBox(..) => {\n-                FfiUnsafe(\"found Rust type Box<_> in foreign module, \\\n-                           consider using a raw pointer instead\")\n-            }\n-\n             ty::TySlice(_) => {\n                 FfiUnsafe(\"found Rust slice type in foreign module, \\\n                            consider using a raw pointer instead\")"}, {"sha": "9c1107344f241f077800f03deb48aab657d51dcf", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -350,7 +350,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 base: Lvalue::Local(index),\n                 elem: ProjectionElem::Deref\n             }) if self.mir.local_kind(index) == LocalKind::Temp\n-               && self.mir.local_decls[index].ty.is_unique()\n+               && self.mir.local_decls[index].ty.is_box()\n                && self.temp_qualif[index].map_or(false, |qualif| {\n                     qualif.intersects(Qualif::NOT_CONST)\n                }) => {"}, {"sha": "c9195f29f1784481e0774d8b23ccfaba7d61a523", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -580,9 +580,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             return;\n         }\n \n-        let arg_ty = match args[0].ty(mir, self.tcx()).sty {\n+        let ty = args[0].ty(mir, self.tcx());\n+        let arg_ty = match ty.sty {\n             ty::TyRawPtr(mt) => mt.ty,\n-            ty::TyBox(ty) => ty,\n+            ty::TyAdt(def, _) if def.is_box() => ty.boxed_ty(),\n             _ => {\n                 span_mirbug!(self, term, \"box_free called with bad arg ty\");\n                 return;"}, {"sha": "d392ebaa33d422dfb045ee80a01f67155bdbd96f", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -429,7 +429,7 @@ impl FnType {\n         if !type_is_fat_ptr(ccx, ret_ty) {\n             // The `noalias` attribute on the return value is useful to a\n             // function ptr caller.\n-            if let ty::TyBox(_) = ret_ty.sty {\n+            if ret_ty.is_box() {\n                 // `Box` pointer return values never alias because ownership\n                 // is transferred\n                 ret.attrs.set(ArgAttribute::NoAlias);\n@@ -438,12 +438,16 @@ impl FnType {\n             // We can also mark the return value as `dereferenceable` in certain cases\n             match ret_ty.sty {\n                 // These are not really pointers but pairs, (pointer, len)\n-                ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n-                ty::TyBox(ty) => {\n+                ty::TyRef(_, ty::TypeAndMut { ty, .. }) => {\n                     let llty = type_of::sizing_type_of(ccx, ty);\n                     let llsz = llsize_of_alloc(ccx, llty);\n                     ret.attrs.set_dereferenceable(llsz);\n                 }\n+                ty::TyAdt(def, _) if def.is_box() => {\n+                    let llty = type_of::sizing_type_of(ccx, ret_ty.boxed_ty());\n+                    let llsz = llsize_of_alloc(ccx, llty);\n+                    ret.attrs.set_dereferenceable(llsz);\n+                }\n                 _ => {}\n             }\n         }\n@@ -453,9 +457,9 @@ impl FnType {\n         // Handle safe Rust thin and fat pointers.\n         let rust_ptr_attrs = |ty: Ty<'tcx>, arg: &mut ArgType| match ty.sty {\n             // `Box` pointer parameters never alias because ownership is transferred\n-            ty::TyBox(inner) => {\n+            ty::TyAdt(def, _) if def.is_box() => {\n                 arg.attrs.set(ArgAttribute::NoAlias);\n-                Some(inner)\n+                Some(ty.boxed_ty())\n             }\n \n             ty::TyRef(b, mt) => {"}, {"sha": "9bd19d5bbb3e47f050d7ffcbd19495e55cdaa6fb", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -227,7 +227,6 @@ pub fn unsize_thin_ptr<'a, 'tcx>(\n ) -> (ValueRef, ValueRef) {\n     debug!(\"unsize_thin_ptr: {:?} => {:?}\", src_ty, dst_ty);\n     match (&src_ty.sty, &dst_ty.sty) {\n-        (&ty::TyBox(a), &ty::TyBox(b)) |\n         (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }),\n          &ty::TyRef(_, ty::TypeAndMut { ty: b, .. })) |\n         (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }),\n@@ -238,6 +237,12 @@ pub fn unsize_thin_ptr<'a, 'tcx>(\n             let ptr_ty = type_of::in_memory_type_of(bcx.ccx, b).ptr_to();\n             (bcx.pointercast(src, ptr_ty), unsized_info(bcx.ccx, a, b, None))\n         }\n+        (&ty::TyAdt(def_a, _), &ty::TyAdt(def_b, _)) if def_a.is_box() && def_b.is_box() => {\n+            let (a, b) = (src_ty.boxed_ty(), dst_ty.boxed_ty());\n+            assert!(bcx.ccx.shared().type_is_sized(a));\n+            let ptr_ty = type_of::in_memory_type_of(bcx.ccx, b).ptr_to();\n+            (bcx.pointercast(src, ptr_ty), unsized_info(bcx.ccx, a, b, None))\n+        }\n         _ => bug!(\"unsize_thin_ptr: called on bad types\"),\n     }\n }\n@@ -249,25 +254,30 @@ pub fn coerce_unsized_into<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                                      src_ty: Ty<'tcx>,\n                                      dst: ValueRef,\n                                      dst_ty: Ty<'tcx>) {\n+    let coerce_ptr = || {\n+        let (base, info) = if common::type_is_fat_ptr(bcx.ccx, src_ty) {\n+            // fat-ptr to fat-ptr unsize preserves the vtable\n+            // i.e. &'a fmt::Debug+Send => &'a fmt::Debug\n+            // So we need to pointercast the base to ensure\n+            // the types match up.\n+            let (base, info) = load_fat_ptr(bcx, src, src_ty);\n+            let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx, dst_ty);\n+            let base = bcx.pointercast(base, llcast_ty);\n+            (base, info)\n+        } else {\n+            let base = load_ty(bcx, src, src_ty);\n+            unsize_thin_ptr(bcx, base, src_ty, dst_ty)\n+        };\n+        store_fat_ptr(bcx, base, info, dst, dst_ty);\n+    };\n     match (&src_ty.sty, &dst_ty.sty) {\n-        (&ty::TyBox(..), &ty::TyBox(..)) |\n         (&ty::TyRef(..), &ty::TyRef(..)) |\n         (&ty::TyRef(..), &ty::TyRawPtr(..)) |\n         (&ty::TyRawPtr(..), &ty::TyRawPtr(..)) => {\n-            let (base, info) = if common::type_is_fat_ptr(bcx.ccx, src_ty) {\n-                // fat-ptr to fat-ptr unsize preserves the vtable\n-                // i.e. &'a fmt::Debug+Send => &'a fmt::Debug\n-                // So we need to pointercast the base to ensure\n-                // the types match up.\n-                let (base, info) = load_fat_ptr(bcx, src, src_ty);\n-                let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx, dst_ty);\n-                let base = bcx.pointercast(base, llcast_ty);\n-                (base, info)\n-            } else {\n-                let base = load_ty(bcx, src, src_ty);\n-                unsize_thin_ptr(bcx, base, src_ty, dst_ty)\n-            };\n-            store_fat_ptr(bcx, base, info, dst, dst_ty);\n+            coerce_ptr()\n+        }\n+        (&ty::TyAdt(def_a, _), &ty::TyAdt(def_b, _)) if def_a.is_box() && def_b.is_box() => {\n+            coerce_ptr()\n         }\n \n         (&ty::TyAdt(def_a, substs_a), &ty::TyAdt(def_b, substs_b)) => {\n@@ -414,7 +424,7 @@ pub fn load_ty<'a, 'tcx>(b: &Builder<'a, 'tcx>, ptr: ValueRef, t: Ty<'tcx>) -> V\n         // a char is a Unicode codepoint, and so takes values from 0\n         // to 0x10FFFF inclusive only.\n         b.load_range_assert(ptr, 0, 0x10FFFF + 1, llvm::False)\n-    } else if (t.is_region_ptr() || t.is_unique()) && !common::type_is_fat_ptr(ccx, t) {\n+    } else if (t.is_region_ptr() || t.is_box()) && !common::type_is_fat_ptr(ccx, t) {\n         b.load_nonnull(ptr)\n     } else {\n         b.load(ptr)\n@@ -449,7 +459,7 @@ pub fn load_fat_ptr<'a, 'tcx>(\n     b: &Builder<'a, 'tcx>, src: ValueRef, t: Ty<'tcx>\n ) -> (ValueRef, ValueRef) {\n     let ptr = get_dataptr(b, src);\n-    let ptr = if t.is_region_ptr() || t.is_unique() {\n+    let ptr = if t.is_region_ptr() || t.is_box() {\n         b.load_nonnull(ptr)\n     } else {\n         b.load(ptr)"}, {"sha": "9766b816d9b30ee46d478eabd182ccc230a006a1", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -721,14 +721,13 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n     debug!(\"find_drop_glue_neighbors: {}\", type_to_string(scx.tcx(), ty));\n \n     // Make sure the BoxFreeFn lang-item gets translated if there is a boxed value.\n-    if let ty::TyBox(content_type) = ty.sty {\n+    if ty.is_box() {\n         let def_id = scx.tcx().require_lang_item(BoxFreeFnLangItem);\n-\n         if should_trans_locally(scx.tcx(), def_id) {\n             let box_free_fn_trans_item =\n                 create_fn_trans_item(scx,\n                                      def_id,\n-                                     scx.tcx().mk_substs(iter::once(Kind::from(content_type))),\n+                                     scx.tcx().mk_substs(iter::once(Kind::from(ty.boxed_ty()))),\n                                      scx.tcx().intern_substs(&[]));\n             output.push(box_free_fn_trans_item);\n         }\n@@ -790,8 +789,14 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         ty::TyDynamic(..)  => {\n             /* nothing to do */\n         }\n-        ty::TyAdt(adt_def, substs) => {\n-            for field in adt_def.all_fields() {\n+        ty::TyAdt(def, _) if def.is_box() => {\n+            let inner_type = glue::get_drop_glue_type(scx, ty.boxed_ty());\n+            if scx.type_needs_drop(inner_type) {\n+                output.push(TransItem::DropGlue(DropGlueKind::Ty(inner_type)));\n+            }\n+        }\n+        ty::TyAdt(def, substs) => {\n+            for field in def.all_fields() {\n                 let field_type = scx.tcx().item_type(field.did);\n                 let field_type = monomorphize::apply_param_substs(scx,\n                                                                   substs,\n@@ -811,7 +816,6 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::TyBox(inner_type)      |\n         ty::TySlice(inner_type)    |\n         ty::TyArray(inner_type, _) => {\n             let inner_type = glue::get_drop_glue_type(scx, inner_type);\n@@ -1008,21 +1012,24 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                             source_ty: ty::Ty<'tcx>,\n                                             target_ty: ty::Ty<'tcx>)\n                                             -> (ty::Ty<'tcx>, ty::Ty<'tcx>) {\n+    let ptr_vtable = |inner_source: ty::Ty<'tcx>, inner_target: ty::Ty<'tcx>| {\n+        if !scx.type_is_sized(inner_source) {\n+            (inner_source, inner_target)\n+        } else {\n+            scx.tcx().struct_lockstep_tails(inner_source, inner_target)\n+        }\n+    };\n     match (&source_ty.sty, &target_ty.sty) {\n-        (&ty::TyBox(a), &ty::TyBox(b)) |\n         (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }),\n          &ty::TyRef(_, ty::TypeAndMut { ty: b, .. })) |\n         (&ty::TyRef(_, ty::TypeAndMut { ty: a, .. }),\n          &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) |\n         (&ty::TyRawPtr(ty::TypeAndMut { ty: a, .. }),\n          &ty::TyRawPtr(ty::TypeAndMut { ty: b, .. })) => {\n-            let (inner_source, inner_target) = (a, b);\n-\n-            if !scx.type_is_sized(inner_source) {\n-                (inner_source, inner_target)\n-            } else {\n-                scx.tcx().struct_lockstep_tails(inner_source, inner_target)\n-            }\n+            ptr_vtable(a, b)\n+        }\n+        (&ty::TyAdt(def_a, _), &ty::TyAdt(def_b, _)) if def_a.is_box() && def_b.is_box() => {\n+            ptr_vtable(source_ty.boxed_ty(), target_ty.boxed_ty())\n         }\n \n         (&ty::TyAdt(source_adt_def, source_substs),"}, {"sha": "b7e319f2de43431cf9ef8190611dc227b9aab659", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -490,6 +490,35 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     debug!(\"type_metadata: {:?}\", t);\n \n     let sty = &t.sty;\n+    let ptr_metadata = |ty: Ty<'tcx>| {\n+        match ty.sty {\n+            ty::TySlice(typ) => {\n+                Ok(vec_slice_metadata(cx, t, typ, unique_type_id, usage_site_span))\n+            }\n+            ty::TyStr => {\n+                Ok(vec_slice_metadata(cx, t, cx.tcx().types.u8, unique_type_id, usage_site_span))\n+            }\n+            ty::TyDynamic(..) => {\n+                Ok(MetadataCreationResult::new(\n+                    trait_pointer_metadata(cx, ty, Some(t), unique_type_id),\n+                    false))\n+            }\n+            _ => {\n+                let pointee_metadata = type_metadata(cx, ty, usage_site_span);\n+\n+                match debug_context(cx).type_map\n+                                        .borrow()\n+                                        .find_metadata_for_unique_id(unique_type_id) {\n+                    Some(metadata) => return Err(metadata),\n+                    None => { /* proceed normally */ }\n+                };\n+\n+                Ok(MetadataCreationResult::new(pointer_type_metadata(cx, t, pointee_metadata),\n+                   false))\n+            }\n+        }\n+    };\n+\n     let MetadataCreationResult { metadata, already_stored_in_typemap } = match *sty {\n         ty::TyNever    |\n         ty::TyBool     |\n@@ -516,34 +545,17 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         trait_pointer_metadata(cx, t, None, unique_type_id),\n             false)\n         }\n-        ty::TyBox(ty) |\n         ty::TyRawPtr(ty::TypeAndMut{ty, ..}) |\n         ty::TyRef(_, ty::TypeAndMut{ty, ..}) => {\n-            match ty.sty {\n-                ty::TySlice(typ) => {\n-                    vec_slice_metadata(cx, t, typ, unique_type_id, usage_site_span)\n-                }\n-                ty::TyStr => {\n-                    vec_slice_metadata(cx, t, cx.tcx().types.u8, unique_type_id, usage_site_span)\n-                }\n-                ty::TyDynamic(..) => {\n-                    MetadataCreationResult::new(\n-                        trait_pointer_metadata(cx, ty, Some(t), unique_type_id),\n-                        false)\n-                }\n-                _ => {\n-                    let pointee_metadata = type_metadata(cx, ty, usage_site_span);\n-\n-                    match debug_context(cx).type_map\n-                                           .borrow()\n-                                           .find_metadata_for_unique_id(unique_type_id) {\n-                        Some(metadata) => return metadata,\n-                        None => { /* proceed normally */ }\n-                    };\n-\n-                    MetadataCreationResult::new(pointer_type_metadata(cx, t, pointee_metadata),\n-                                                false)\n-                }\n+            match ptr_metadata(ty) {\n+                Ok(res) => res,\n+                Err(metadata) => return metadata,\n+            }\n+        }\n+        ty::TyAdt(def, _) if def.is_box() => {\n+            match ptr_metadata(t.boxed_ty()) {\n+                Ok(res) => res,\n+                Err(metadata) => return metadata,\n             }\n         }\n         ty::TyFnDef(.., ref barefnty) | ty::TyFnPtr(ref barefnty) => {"}, {"sha": "8e11bf6b8976a8c3c822c18cec94de6966458fbc", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -60,11 +60,6 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             }\n             output.push(')');\n         },\n-        ty::TyBox(inner_type) => {\n-            output.push_str(\"Box<\");\n-            push_debuginfo_type_name(cx, inner_type, true, output);\n-            output.push('>');\n-        },\n         ty::TyRawPtr(ty::TypeAndMut { ty: inner_type, mutbl } ) => {\n             output.push('*');\n             match mutbl {"}, {"sha": "65f3c7add4db1b6bb85aafc0fe0e7f207e1e27f0", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -79,16 +79,21 @@ pub fn get_drop_glue_type<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>, t: Ty<'t\n         return scx.tcx().types.i8;\n     }\n     match t.sty {\n-        ty::TyBox(typ) if !scx.type_needs_drop(typ) && scx.type_is_sized(typ) => {\n-            scx.tcx().infer_ctxt((), traits::Reveal::All).enter(|infcx| {\n-                let layout = t.layout(&infcx).unwrap();\n-                if layout.size(&scx.tcx().data_layout).bytes() == 0 {\n-                    // `Box<ZeroSizeType>` does not allocate.\n-                    scx.tcx().types.i8\n-                } else {\n-                    t\n-                }\n-            })\n+        ty::TyAdt(def, _) if def.is_box() => {\n+            let typ = t.boxed_ty();\n+            if !scx.type_needs_drop(typ) && scx.type_is_sized(typ) {\n+                scx.tcx().infer_ctxt((), traits::Reveal::All).enter(|infcx| {\n+                    let layout = t.layout(&infcx).unwrap();\n+                    if layout.size(&scx.tcx().data_layout).bytes() == 0 {\n+                        // `Box<ZeroSizeType>` does not allocate.\n+                        scx.tcx().types.i8\n+                    } else {\n+                        t\n+                    }\n+                })\n+            } else {\n+                t\n+            }\n         }\n         _ => t\n     }\n@@ -205,11 +210,12 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, g: DropGlueKi\n     };\n \n     let bcx = match t.sty {\n-        ty::TyBox(content_ty) => {\n-            // Support for TyBox is built-in and its drop glue is\n+        ty::TyAdt(def, _) if def.is_box() => {\n+            // Support for Box is built-in and its drop glue is\n             // special. It may move to library and have Drop impl. As\n-            // a safe-guard, assert TyBox not used with TyContents.\n+            // a safe-guard, assert Box not used with TyContents.\n             assert!(!skip_dtor);\n+            let content_ty = t.boxed_ty();\n             let ptr = if !bcx.ccx.shared().type_is_sized(content_ty) {\n                 let llbox = bcx.load(get_dataptr(&bcx, ptr.llval));\n                 let info = bcx.load(get_meta(&bcx, ptr.llval));"}, {"sha": "2a1ab10d74e16dbc4b944a163b264a63ef8a1e71", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -30,7 +30,7 @@ pub fn lvalue_locals<'a, 'tcx>(mircx: &MirContext<'a, 'tcx>) -> BitVector {\n         let ty = mircx.monomorphize(&ty);\n         debug!(\"local {} has type {:?}\", index, ty);\n         if ty.is_scalar() ||\n-            ty.is_unique() ||\n+            ty.is_box() ||\n             ty.is_region_ptr() ||\n             ty.is_simd() ||\n             common::type_is_zero_size(mircx.ccx, ty)"}, {"sha": "d58a93e3cb71c47d4ee758e7887b8648dc10ac28", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -421,11 +421,6 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 }\n                 output.push(')');\n             },\n-            ty::TyBox(inner_type) => {\n-                output.push_str(\"Box<\");\n-                self.push_type_name(inner_type, output);\n-                output.push('>');\n-            },\n             ty::TyRawPtr(ty::TypeAndMut { ty: inner_type, mutbl } ) => {\n                 output.push('*');\n                 match mutbl {"}, {"sha": "4df0e989ada9975040bbe9eea3e350838f1f92af", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -38,6 +38,13 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n     debug!(\"sizing_type_of {:?}\", t);\n     let _recursion_lock = cx.enter_type_of(t);\n \n+    let ptr_sizing_ty = |ty: Ty<'tcx>| {\n+        if cx.shared().type_is_sized(ty) {\n+            Type::i8p(cx)\n+        } else {\n+            Type::struct_(cx, &[Type::i8p(cx), unsized_info_ty(cx, ty)], false)\n+        }\n+    };\n     let llsizingty = match t.sty {\n         _ if !cx.shared().type_is_sized(t) => {\n             Type::struct_(cx, &[Type::i8p(cx), unsized_info_ty(cx, t)], false)\n@@ -50,14 +57,12 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         ty::TyFloat(t) => Type::float_from_ty(cx, t),\n         ty::TyNever => Type::nil(cx),\n \n-        ty::TyBox(ty) |\n         ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n         ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n-            if cx.shared().type_is_sized(ty) {\n-                Type::i8p(cx)\n-            } else {\n-                Type::struct_(cx, &[Type::i8p(cx), unsized_info_ty(cx, ty)], false)\n-            }\n+            ptr_sizing_ty(ty)\n+        }\n+        ty::TyAdt(def, _) if def.is_box() => {\n+            ptr_sizing_ty(t.boxed_ty())\n         }\n \n         ty::TyFnDef(..) => Type::nil(cx),\n@@ -131,11 +136,13 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n \n pub fn fat_ptr_base_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n     match ty.sty {\n-        ty::TyBox(t) |\n         ty::TyRef(_, ty::TypeAndMut { ty: t, .. }) |\n         ty::TyRawPtr(ty::TypeAndMut { ty: t, .. }) if !ccx.shared().type_is_sized(t) => {\n             in_memory_type_of(ccx, t).ptr_to()\n         }\n+        ty::TyAdt(def, _) if def.is_box() => {\n+            in_memory_type_of(ccx, ty.boxed_ty()).ptr_to()\n+        }\n         _ => bug!(\"expected fat ptr ty but got {:?}\", ty)\n     }\n }\n@@ -214,6 +221,22 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n         return llty;\n     }\n \n+    let ptr_ty = |ty: Ty<'tcx>| {\n+        if !cx.shared().type_is_sized(ty) {\n+            if let ty::TyStr = ty.sty {\n+                // This means we get a nicer name in the output (str is always\n+                // unsized).\n+                cx.str_slice_type()\n+            } else {\n+                let ptr_ty = in_memory_type_of(cx, ty).ptr_to();\n+                let info_ty = unsized_info_ty(cx, ty);\n+                Type::struct_(cx, &[ptr_ty, info_ty], false)\n+            }\n+        } else {\n+            in_memory_type_of(cx, ty).ptr_to()\n+        }\n+    };\n+\n     let mut llty = match t.sty {\n       ty::TyBool => Type::bool(cx),\n       ty::TyChar => Type::char(cx),\n@@ -227,22 +250,12 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n           adt::incomplete_type_of(cx, t, \"closure\")\n       }\n \n-      ty::TyBox(ty) |\n       ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n       ty::TyRawPtr(ty::TypeAndMut{ty, ..}) => {\n-          if !cx.shared().type_is_sized(ty) {\n-              if let ty::TyStr = ty.sty {\n-                  // This means we get a nicer name in the output (str is always\n-                  // unsized).\n-                  cx.str_slice_type()\n-              } else {\n-                  let ptr_ty = in_memory_type_of(cx, ty).ptr_to();\n-                  let info_ty = unsized_info_ty(cx, ty);\n-                  Type::struct_(cx, &[ptr_ty, info_ty], false)\n-              }\n-          } else {\n-              in_memory_type_of(cx, ty).ptr_to()\n-          }\n+          ptr_ty(ty)\n+      }\n+      ty::TyAdt(def, _) if def.is_box() => {\n+          ptr_ty(t.boxed_ty())\n       }\n \n       ty::TyArray(ty, size) => {\n@@ -300,7 +313,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n \n     // If this was an enum or struct, fill in the type now.\n     match t.sty {\n-        ty::TyAdt(..) | ty::TyClosure(..) if !t.is_simd() => {\n+        ty::TyAdt(..) | ty::TyClosure(..) if !t.is_simd() && !t.is_box() => {\n             adt::finish_type_of(cx, t, &mut llty);\n         }\n         _ => ()"}, {"sha": "bb9a487802e7b686c207cdff0ed41be19a7ac154", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -670,16 +670,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n         };\n \n-        let substs = self.ast_path_substs_for_ty(span,\n-                                                 did,\n-                                                 item_segment);\n-\n-        // FIXME(#12938): This is a hack until we have full support for DST.\n-        if Some(did) == self.tcx().lang_items.owned_box() {\n-            assert_eq!(substs.types().count(), 1);\n-            return self.tcx().mk_box(substs.type_at(0));\n-        }\n-\n+        let substs = self.ast_path_substs_for_ty(span, did, item_segment);\n         decl_ty.subst(self.tcx(), substs)\n     }\n \n@@ -1674,7 +1665,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n         fn count_modifiers(ty: Ty) -> usize {\n             match ty.sty {\n                 ty::TyRef(_, mt) => count_modifiers(mt.ty) + 1,\n-                ty::TyBox(t) => count_modifiers(t) + 1,\n+                ty::TyAdt(def, _) if def.is_box() => count_modifiers(ty.boxed_ty()) + 1,\n                 _ => 0,\n             }\n         }\n@@ -1687,7 +1678,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n         } else {\n             match self_arg_ty.sty {\n                 ty::TyRef(r, mt) => ExplicitSelf::ByReference(r, mt.mutbl),\n-                ty::TyBox(_) => ExplicitSelf::ByBox,\n+                ty::TyAdt(def, _) if def.is_box() => ExplicitSelf::ByBox,\n                 _ => ExplicitSelf::ByValue,\n             }\n         }"}, {"sha": "6215b4498dc684ee3a63454b1c8bf1d242abfc9f", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                tstr);\n                 }\n             }\n-            ty::TyBox(..) => {\n+            ty::TyAdt(def, ..) if def.is_box() => {\n                 match fcx.tcx.sess.codemap().span_to_snippet(self.cast_span) {\n                     Ok(s) => {\n                         err.span_suggestion(self.cast_span,"}, {"sha": "34aa4eda772ada2b1904be85f40ca05612a29648", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -448,7 +448,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n             Ok(())\n         }\n \n-        ty::TyBox(ity) | ty::TyArray(ity, _) | ty::TySlice(ity) => {\n+        ty::TyArray(ity, _) | ty::TySlice(ity) => {\n             // single-element containers, behave like their element\n             iterate_over_potentially_unsafe_regions_in_type(\n                 cx, context, ity, depth+1)"}, {"sha": "300caca30fec8c12927dc4f405e30a2fdab8b627", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -391,11 +391,6 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             ty::TyAdt(def, _) => {\n                 self.assemble_inherent_impl_candidates_for_type(def.did);\n             }\n-            ty::TyBox(_) => {\n-                if let Some(box_did) = self.tcx.lang_items.owned_box() {\n-                    self.assemble_inherent_impl_candidates_for_type(box_did);\n-                }\n-            }\n             ty::TyParam(p) => {\n                 self.assemble_inherent_candidates_from_param(self_ty, p);\n             }"}, {"sha": "c435f9341253e92920ff621ecc13e8fa26486eb2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -3438,7 +3438,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           hir::ExprBox(ref subexpr) => {\n             let expected_inner = expected.to_option(self).map_or(NoExpectation, |ty| {\n                 match ty.sty {\n-                    ty::TyBox(ty) => Expectation::rvalue_hint(self, ty),\n+                    ty::TyAdt(def, _) if def.is_box()\n+                        => Expectation::rvalue_hint(self, ty.boxed_ty()),\n                     _ => NoExpectation\n                 }\n             });"}, {"sha": "d84e9d3fd3731d642efee92e57d2565ef30badc2", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -815,9 +815,9 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                 self.type_must_outlive(infer::RelateObjectBound(cast_expr.span), from_ty, r);\n             }\n \n-            /*From:*/ (&ty::TyBox(from_referent_ty),\n-            /*To:  */  &ty::TyBox(to_referent_ty)) => {\n-                self.walk_cast(cast_expr, from_referent_ty, to_referent_ty);\n+            /*From:*/ (&ty::TyAdt(from_def, _),\n+            /*To:  */  &ty::TyAdt(to_def, _)) if from_def.is_box() && to_def.is_box() => {\n+                self.walk_cast(cast_expr, from_ty.boxed_ty(), to_ty.boxed_ty());\n             }\n \n             _ => { }"}, {"sha": "96875fce468d2e34473ddc0c2a7b25c37e3755de", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -220,8 +220,6 @@ fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             (mt_a.ty, mt_b.ty, unsize_trait, None)\n         };\n         let (source, target, trait_def_id, kind) = match (&source.sty, &target.sty) {\n-            (&ty::TyBox(a), &ty::TyBox(b)) => (a, b, unsize_trait, None),\n-\n             (&ty::TyRef(r_a, mt_a), &ty::TyRef(r_b, mt_b)) => {\n                 infcx.sub_regions(infer::RelateObjectBound(span), r_b, r_a);\n                 check_mutbl(mt_a, mt_b, &|ty| tcx.mk_imm_ref(r_b, ty))"}, {"sha": "e9c710d2fec4c38ca1173e2e302cb620f52102f5", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -21,7 +21,7 @@ use rustc::ty::{Ty, TyBool, TyChar, TyError};\n use rustc::ty::{TyParam, TyRawPtr};\n use rustc::ty::{TyRef, TyAdt, TyDynamic, TyNever, TyTuple};\n use rustc::ty::{TyStr, TyArray, TySlice, TyFloat, TyInfer, TyInt};\n-use rustc::ty::{TyUint, TyClosure, TyBox, TyFnDef, TyFnPtr};\n+use rustc::ty::{TyUint, TyClosure, TyFnDef, TyFnPtr};\n use rustc::ty::{TyProjection, TyAnon};\n use CrateCtxt;\n use syntax_pos::Span;\n@@ -61,8 +61,6 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n \n             TyDynamic(ref t, ..) => t.principal().map(|p| p.def_id()),\n \n-            TyBox(_) => self.tcx.lang_items.owned_box(),\n-\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) | TyStr | TyArray(..) |\n             TySlice(..) | TyFnDef(..) | TyFnPtr(_) | TyTuple(..) | TyParam(..) | TyError |\n             TyNever | TyRawPtr(_) | TyRef(..) | TyProjection(..) => None,"}, {"sha": "9ef231499df5145c1fc0036624c60f769e9c4f4a", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -91,12 +91,6 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     ty::TyDynamic(ref data, ..) if data.principal().is_some() => {\n                         self.check_def_id(item, data.principal().unwrap().def_id());\n                     }\n-                    ty::TyBox(..) => {\n-                        match self.tcx.lang_items.require_owned_box() {\n-                            Ok(trait_id) => self.check_def_id(item, trait_id),\n-                            Err(msg) => self.tcx.sess.span_fatal(item.span, &msg),\n-                        }\n-                    }\n                     ty::TyChar => {\n                         self.check_primitive_impl(def_id,\n                                                   self.tcx.lang_items.char_impl(),\n@@ -321,7 +315,6 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     let self_ty = trait_ref.self_ty();\n                     let opt_self_def_id = match self_ty.sty {\n                         ty::TyAdt(self_def, _) => Some(self_def.did),\n-                        ty::TyBox(..) => self.tcx.lang_items.owned_box(),\n                         _ => None,\n                     };\n "}, {"sha": "40e82959336de4e654ecc7a95f0ee075a5232f0e", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -329,7 +329,6 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(generics, mt, variance);\n             }\n \n-            ty::TyBox(typ) |\n             ty::TyArray(typ, _) |\n             ty::TySlice(typ) => {\n                 self.add_constraints_from_ty(generics, typ, variance);"}, {"sha": "cdb24a56367fc39749f20d213cf0faadd62ebbe4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -1808,10 +1808,6 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyUint(uint_ty) => Primitive(uint_ty.into()),\n             ty::TyFloat(float_ty) => Primitive(float_ty.into()),\n             ty::TyStr => Primitive(PrimitiveType::Str),\n-            ty::TyBox(t) => {\n-                let box_did = cx.tcx.lang_items.owned_box();\n-                lang_struct(cx, box_did, t, \"Box\", Unique)\n-            }\n             ty::TySlice(ty) => Vector(box ty.clean(cx)),\n             ty::TyArray(ty, i) => FixedVector(box ty.clean(cx),\n                                               format!(\"{}\", i)),\n@@ -2888,33 +2884,6 @@ impl Clean<Deprecation> for attr::Deprecation {\n     }\n }\n \n-fn lang_struct(cx: &DocContext, did: Option<DefId>,\n-               t: ty::Ty, name: &str,\n-               fallback: fn(Box<Type>) -> Type) -> Type {\n-    let did = match did {\n-        Some(did) => did,\n-        None => return fallback(box t.clean(cx)),\n-    };\n-    inline::record_extern_fqn(cx, did, TypeKind::Struct);\n-    ResolvedPath {\n-        typarams: None,\n-        did: did,\n-        path: Path {\n-            global: false,\n-            def: Def::Err,\n-            segments: vec![PathSegment {\n-                name: name.to_string(),\n-                params: PathParameters::AngleBracketed {\n-                    lifetimes: vec![],\n-                    types: vec![t.clean(cx)],\n-                    bindings: vec![]\n-                }\n-            }],\n-        },\n-        is_generic: false,\n-    }\n-}\n-\n /// An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`\n #[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Debug)]\n pub struct TypeBinding {"}, {"sha": "c152fdd9296828b590e80b32e0d3116cba94a02c", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -22,13 +22,14 @@ struct fish {\n fn main() {\n     let a: clam = clam{x: box 1, y: box 2};\n     let b: clam = clam{x: box 10, y: box 20};\n-    let z: isize = a.x + b.y; //~ ERROR binary operation `+` cannot be applied to type `Box<isize>`\n+    let z: isize = a.x + b.y;\n+    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n     println!(\"{}\", z);\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: box 40};\n     let two: fish = fish{a: box 2};\n     let answer: isize = forty.a + two.a;\n-    //~^ ERROR binary operation `+` cannot be applied to type `Box<isize>`\n+    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n     println!(\"{}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "d09cb73d6702a5536863185b88da86dced16ac73", "filename": "src/test/compile-fail/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -35,7 +35,7 @@ fn copy_after_move() {\n     let _x = a.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `Box<isize>`\n+    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -44,7 +44,7 @@ fn move_after_move() {\n     let _x = a.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `Box<isize>`\n+    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -53,7 +53,7 @@ fn borrow_after_move() {\n     let _x = a.x;\n     //~^ value moved here\n     let _y = &a.y; //~ ERROR use of moved\n-    //~^ move occurs because `a.x` has type `Box<isize>`\n+    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -106,7 +106,7 @@ fn copy_after_move_nested() {\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `Box<isize>`\n+    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -115,7 +115,7 @@ fn move_after_move_nested() {\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `Box<isize>`\n+    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n \n@@ -124,7 +124,7 @@ fn borrow_after_move_nested() {\n     let _x = a.x.x;\n     //~^ value moved here\n     let _y = &a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE move occurs because `a.x.x` has type `Box<isize>`\n+    //~^ NOTE move occurs because `a.x.x` has type `std::boxed::Box<isize>`\n     //~| value used here after move\n }\n "}, {"sha": "f389380584b8469a850d8dc95d7ddc77a6148965", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -20,6 +20,5 @@ pub fn main() {\n     let x: Box<Trait> = Box::new(Foo);\n     let _y: &Trait = x; //~  ERROR mismatched types\n                         //~| expected type `&Trait`\n-                        //~| found type `Box<Trait>`\n-                        //~| expected &Trait, found box\n+                        //~| found type `std::boxed::Box<Trait>`\n }"}, {"sha": "835ec8e4a5e7e2060328e2a32e36eb948a056d2c", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -51,6 +51,5 @@ fn main() {\n     let box box x = box 1isize as Box<T>;\n     //~^ ERROR mismatched types\n     //~| expected type `T`\n-    //~| found type `Box<_>`\n-    //~| expected trait T, found box\n+    //~| found type `std::boxed::Box<_>`\n }"}, {"sha": "6377550d3d22f9ed5297d366a7f5130a320ef4c6", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -16,18 +16,15 @@ fn main() {\n     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `Box<std::ops::FnOnce(isize)>`\n-    //~| expected (), found box\n+    //~| found type `std::boxed::Box<std::ops::FnOnce(isize)>`\n     let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `Box<std::ops::Fn(isize, isize)>`\n-    //~| expected (), found box\n+    //~| found type `std::boxed::Box<std::ops::Fn(isize, isize)>`\n     let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `Box<std::ops::FnMut() -> isize>`\n-    //~| expected (), found box\n+    //~| found type `std::boxed::Box<std::ops::FnMut() -> isize>`\n \n     needs_fn(1);\n     //~^ ERROR : std::ops::Fn<(isize,)>`"}, {"sha": "810d6656a8f6216bbcbff41f7080332219a6673e", "filename": "src/test/compile-fail/issue-14915.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -13,5 +13,6 @@\n fn main() {\n     let x: Box<isize> = box 0;\n \n-    println!(\"{}\", x + 1); //~ ERROR binary operation `+` cannot be applied to type `Box<isize>`\n+    println!(\"{}\", x + 1);\n+    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n }"}, {"sha": "45ab9903532e73a399a18982bc1a48fb85c1f779", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -13,9 +13,9 @@ fn main() {\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n \n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n+    // FIXME (#22405): Replace `std::boxed::Box::new` with `box` here when/if possible.\n     let _bar = Box::new(1_usize) as std::fmt::Debug;\n-    //~^ ERROR cast to unsized type: `Box<usize>` as `std::fmt::Debug`\n+    //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n     //~^^ HELP try casting to a `Box` instead\n \n     let _baz = 1_usize as std::fmt::Debug;"}, {"sha": "9ef780aac8e274bdac62fe6c40651292c7fea658", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -43,8 +43,7 @@ fn main() {\n         box (true, false) => ()\n //~^ ERROR mismatched types\n //~| expected type `(bool, bool)`\n-//~| found type `Box<_>`\n-//~| expected tuple, found box\n+//~| found type `std::boxed::Box<_>`\n     }\n \n     match (true, false) {"}, {"sha": "b99f5b707ee2d0afbe5df1401acb17827fff7129", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -13,9 +13,8 @@ struct BarStruct;\n impl<'a> BarStruct {\n     fn foo(&'a mut self) -> Box<BarStruct> { self }\n     //~^ ERROR mismatched types\n-    //~| expected type `Box<BarStruct>`\n+    //~| expected type `std::boxed::Box<BarStruct>`\n     //~| found type `&'a mut BarStruct`\n-    //~| expected box, found mutable reference\n }\n \n fn main() {}"}, {"sha": "21aefc4f9c1bc1b1e7a8098584d401114c00a570", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -21,5 +21,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR `Box<{integer}>: std::marker::Copy` is not satisfied\n+    //~^ ERROR `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n }"}, {"sha": "ccc25b58228bd66941036a5555072f2865cae0b1", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -34,15 +34,15 @@ extern {\n     pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n     pub fn slice_type(p: &[u32]); //~ ERROR: found Rust slice type\n     pub fn str_type(p: &str); //~ ERROR: found Rust type\n-    pub fn box_type(p: Box<u32>); //~ ERROR found Rust type\n+    pub fn box_type(p: Box<u32>); //~ ERROR found struct without\n     pub fn char_type(p: char); //~ ERROR found Rust type\n     pub fn trait_type(p: &Clone); //~ ERROR found Rust trait type\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n     pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n     pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n     pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n     pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n-    pub fn fn_contained(p: RustBadRet); //~ ERROR: found Rust type\n+    pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without\n \n     pub fn good1(size: *const libc::c_int);\n     pub fn good2(size: *const libc::c_uint);"}, {"sha": "eaafc312379c21168f1197bb33b2b8f7b69b9db2", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     let x: Box<Map<isize, isize>> = x;\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let y: Box<Map<usize, isize>> = Box::new(x);\n-    //~^ ERROR `Box<Map<isize, isize>>: Map<usize, isize>` is not satisfied\n+    //~^ ERROR `std::boxed::Box<Map<isize, isize>>: Map<usize, isize>` is not satisfied\n }"}, {"sha": "8babc734c84cc13afdf33ec6fcaf74f757461362", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -14,5 +14,5 @@\n trait Foo {}\n fn take_foo<F:Foo>(f: F) {}\n fn take_object(f: Box<Foo>) { take_foo(f); }\n-//~^ ERROR `Box<Foo>: Foo` is not satisfied\n+//~^ ERROR `std::boxed::Box<Foo>: Foo` is not satisfied\n fn main() {}"}, {"sha": "a276af83dee25c13d74d77b8019a6be578846afb", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     f = box g;\n     //~^  ERROR mismatched types\n     //~| expected type `_`\n-    //~| found type `Box<_>`\n+    //~| found type `std::boxed::Box<_>`\n     //~| cyclic type of infinite size\n }"}, {"sha": "5b6a11e58c27c8059e0ff0b231e7588d1a395abd", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     f = box f;\n     //~^ ERROR mismatched types\n     //~| expected type `_`\n-    //~| found type `Box<_>`\n+    //~| found type `std::boxed::Box<_>`\n     //~| cyclic type of infinite size\n }"}, {"sha": "c559992c865316849674474a32a8e73be36804bd", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -32,8 +32,8 @@ impl<'a> set_f<'a> for c<'a> {\n     fn set_f_bad(&mut self, b: Box<b>) {\n         self.f = b;\n         //~^ ERROR mismatched types\n-        //~| expected type `Box<Box<&'a isize>>`\n-        //~| found type `Box<Box<&isize>>`\n+        //~| expected type `std::boxed::Box<std::boxed::Box<&'a isize>>`\n+        //~| found type `std::boxed::Box<std::boxed::Box<&isize>>`\n         //~| lifetime mismatch\n     }\n }"}, {"sha": "fd92a26d0fcecb90ede0ee48a07942a702ff9501", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -20,8 +20,7 @@ fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n     want_foo(b); //~  ERROR mismatched types\n                  //~| expected type `foo`\n-                 //~| found type `Box<foo>`\n-                 //~| expected struct `foo`, found box\n+                 //~| found type `std::boxed::Box<foo>`\n }\n \n fn main() {}"}, {"sha": "aabf0d26d5ba7db921d144fd43df73d2ab35edb5", "filename": "src/test/compile-fail/trivial_casts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -52,7 +52,8 @@ pub fn main() {\n     let _: *mut [u32] = x;\n \n     let x: Box<[u32; 3]> = Box::new([42, 43, 44]);\n-    let _ = x as Box<[u32]>; //~ERROR trivial cast: `Box<[u32; 3]>` as `Box<[u32]>`\n+    let _ = x as Box<[u32]>;\n+    //~^ ERROR trivial cast: `std::boxed::Box<[u32; 3]>` as `std::boxed::Box<[u32]>`\n     let x: Box<[u32; 3]> = Box::new([42, 43, 44]);\n     let _: Box<[u32]> = x;\n \n@@ -70,7 +71,7 @@ pub fn main() {\n     let _: *mut Foo = x;\n \n     let x: Box<Bar> = Box::new(Bar);\n-    let _ = x as Box<Foo>; //~ERROR trivial cast: `Box<Bar>` as `Box<Foo>`\n+    let _ = x as Box<Foo>; //~ERROR trivial cast: `std::boxed::Box<Bar>` as `std::boxed::Box<Foo>`\n     let x: Box<Bar> = Box::new(Bar);\n     let _: Box<Foo> = x;\n "}, {"sha": "4295d08a4709c701eaa8e63336ff5fac086e9e4d", "filename": "src/test/compile-fail/type-mismatch-same-crate-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -33,7 +33,7 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| Perhaps two different versions of crate `crate_a1`\n         //~| expected trait `main::a::Bar`\n-        //~| expected type `Box<main::a::Bar + 'static>`\n-        //~| found type `Box<main::a::Bar>`\n+        //~| expected type `std::boxed::Box<main::a::Bar + 'static>`\n+        //~| found type `std::boxed::Box<main::a::Bar>`\n     }\n }"}, {"sha": "57d40cccf2d808f1cbb19d5c1bdd18182c305055", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -70,12 +70,12 @@\n \n // BOX\n // gdb-command:whatis box1\n-// gdbg-check:type = struct (Box<f32>, i32)\n-// gdbr-check:type = (Box<f32>, i32)\n+// gdbg-check:type = struct (alloc::boxed::Box<f32>, i32)\n+// gdbr-check:type = (alloc::boxed::Box<f32>, i32)\n \n // gdb-command:whatis box2\n-// gdbg-check:type = struct (Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n-// gdbr-check:type = (Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n+// gdbg-check:type = struct (alloc::boxed::Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n+// gdbr-check:type = (alloc::boxed::Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n \n \n // REFERENCES\n@@ -196,8 +196,8 @@\n // gdbr-check:type = (unsafe fn(type_names::GenericStruct<u16, u8>) -> type_names::mod1::Struct2, usize)\n \n // gdb-command:whatis extern_stdcall_fn_with_return_value\n-// gdbg-check:type = struct (extern \"stdcall\" fn(Box<isize>) -> usize, usize)\n-// gdbr-check:type = (extern \"stdcall\" fn(Box<isize>) -> usize, usize)\n+// gdbg-check:type = struct (extern \"stdcall\" fn(alloc::boxed::Box<isize>) -> usize, usize)\n+// gdbr-check:type = (extern \"stdcall\" fn(alloc::boxed::Box<isize>) -> usize, usize)\n \n // gdb-command:whatis generic_function_int\n // gdbg-check:type = struct (fn(isize) -> isize, usize)"}, {"sha": "ee7d45b77bf4d9afe9d7a361697b1acf5200e3a0", "filename": "src/test/run-pass/auxiliary/issue13507.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue13507.rs?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -58,7 +58,7 @@ pub mod testtypes {\n     // Tests TySlice\n     pub type FooSlice = [u8];\n \n-    // Tests TyBox (of u8)\n+    // Tests Box (of u8)\n     pub type FooBox = Box<u8>;\n \n     // Tests TyRawPtr"}, {"sha": "ccc9fb56772f5b4e1c6b67b5be3d7bf509caed8e", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n 24 |     a(x); //~ ERROR mismatched types [E0308]\n    |       ^ expected trait `Foo + std::marker::Send`, found trait `Foo`\n    |\n-   = note: expected type `Box<Foo + std::marker::Send + 'static>`\n-              found type `Box<Foo + 'static>`\n+   = note: expected type `std::boxed::Box<Foo + std::marker::Send + 'static>`\n+              found type `std::boxed::Box<Foo + 'static>`\n \n error: aborting due to previous error\n "}, {"sha": "6a70b8ff851d7aecf1d7eb82380e4113d9e905f4", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffba0cea621c2609582b4e201b76b3b19860ec4f/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=ffba0cea621c2609582b4e201b76b3b19860ec4f", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n    |         ^^^^^ cyclic type of infinite size\n    |\n    = note: expected type `_`\n-              found type `Box<_>`\n+              found type `std::boxed::Box<_>`\n \n error: aborting due to 5 previous errors\n "}]}