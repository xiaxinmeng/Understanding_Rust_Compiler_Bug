{"sha": "e8d639e42f4bb37a83df263f52ea02adc85cf556", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZDYzOWU0MmY0YmIzN2E4M2RmMjYzZjUyZWEwMmFkYzg1Y2Y1NTY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-05-30T20:21:17Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-06-04T23:14:36Z"}, "message": "Move cached_block out of DropKind", "tree": {"sha": "f7792706e8db992ed0e21ae05d806a3a2dccb1a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7792706e8db992ed0e21ae05d806a3a2dccb1a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d639e42f4bb37a83df263f52ea02adc85cf556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d639e42f4bb37a83df263f52ea02adc85cf556", "html_url": "https://github.com/rust-lang/rust/commit/e8d639e42f4bb37a83df263f52ea02adc85cf556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d639e42f4bb37a83df263f52ea02adc85cf556/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4912df0266bb570008d1898546bc8cb028167edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4912df0266bb570008d1898546bc8cb028167edc", "html_url": "https://github.com/rust-lang/rust/commit/4912df0266bb570008d1898546bc8cb028167edc"}], "stats": {"total": 85, "additions": 35, "deletions": 50}, "files": [{"sha": "85423955ce545acc28ff23afc67de49b9f540ecb", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=e8d639e42f4bb37a83df263f52ea02adc85cf556", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use crate::build::scope::{CachedBlock, DropKind};\n+use crate::build::scope::DropKind;\n use crate::hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n@@ -103,9 +103,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 temp_lifetime,\n                 temp_place,\n                 expr_ty,\n-                DropKind::Value {\n-                    cached_block: CachedBlock::default(),\n-                },\n+                DropKind::Value,\n             );\n         }\n "}, {"sha": "20d1423f8a8b6ef97256e633273b50e0fedfe536", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=e8d639e42f4bb37a83df263f52ea02adc85cf556", "patch": "@@ -5,7 +5,7 @@\n //! This also includes code for pattern bindings in `let` statements and\n //! function parameters.\n \n-use crate::build::scope::{CachedBlock, DropKind};\n+use crate::build::scope::DropKind;\n use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n@@ -544,7 +544,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let place = Place::Base(PlaceBase::Local(local_id));\n         let var_ty = self.local_decls[local_id].ty;\n         let region_scope = self.hir.region_scope_tree.var_scope(var.local_id);\n-        self.schedule_drop(span, region_scope, &place, var_ty, DropKind::Storage { cached_block: CachedBlock::default() });\n+        self.schedule_drop(span, region_scope, &place, var_ty, DropKind::Storage);\n         place\n     }\n \n@@ -557,9 +557,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             region_scope,\n             &Place::Base(PlaceBase::Local(local_id)),\n             var_ty,\n-            DropKind::Value {\n-                cached_block: CachedBlock::default(),\n-            },\n+            DropKind::Value,\n         );\n     }\n "}, {"sha": "919d575f21fe6d133203cd34297896d660d79c3a", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=e8d639e42f4bb37a83df263f52ea02adc85cf556", "patch": "@@ -1,5 +1,5 @@\n use crate::build;\n-use crate::build::scope::{CachedBlock, DropKind};\n+use crate::build::scope::DropKind;\n use crate::hair::cx::Cx;\n use crate::hair::{LintLevel, BindingMode, PatternKind};\n use crate::shim;\n@@ -912,8 +912,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // Make sure we drop (parts of) the argument even when not matched on.\n             self.schedule_drop(\n                 pattern.as_ref().map_or(ast_body.span, |pat| pat.span),\n-                argument_scope, &place, ty,\n-                DropKind::Value { cached_block: CachedBlock::default() },\n+                argument_scope, &place, ty, DropKind::Value,\n             );\n \n             if let Some(pattern) = pattern {"}, {"sha": "d49861f065929a52eb69c614e2df8336575a0caa", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d639e42f4bb37a83df263f52ea02adc85cf556/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=e8d639e42f4bb37a83df263f52ea02adc85cf556", "patch": "@@ -143,10 +143,13 @@ struct DropData<'tcx> {\n \n     /// Whether this is a value Drop or a StorageDead.\n     kind: DropKind,\n+\n+    /// The cached blocks for unwinds.\n+    cached_block: CachedBlock,\n }\n \n #[derive(Debug, Default, Clone, Copy)]\n-pub(crate) struct CachedBlock {\n+struct CachedBlock {\n     /// The cached block for the cleanups-on-diverge path. This block\n     /// contains code to run the current drop and all the preceding\n     /// drops (i.e., those having lower index in Drop\u2019s Scope drop\n@@ -164,8 +167,8 @@ pub(crate) struct CachedBlock {\n \n #[derive(Debug)]\n pub(crate) enum DropKind {\n-    Value { cached_block: CachedBlock },\n-    Storage { cached_block: CachedBlock },\n+    Value,\n+    Storage,\n }\n \n #[derive(Clone, Debug)]\n@@ -208,8 +211,8 @@ impl CachedBlock {\n impl DropKind {\n     fn may_panic(&self) -> bool {\n         match *self {\n-            DropKind::Value { .. } => true,\n-            DropKind::Storage { .. } => false\n+            DropKind::Value => true,\n+            DropKind::Storage => false\n         }\n     }\n }\n@@ -240,11 +243,7 @@ impl<'tcx> Scope<'tcx> {\n \n         if !ignore_unwinds && !this_scope_only {\n             for drop_data in &mut self.drops {\n-                let cached_block = match drop_data.kind {\n-                    DropKind::Storage { ref mut cached_block } => cached_block,\n-                    DropKind::Value { ref mut cached_block } => cached_block,\n-                };\n-                cached_block.invalidate();\n+                drop_data.cached_block.invalidate();\n             }\n         }\n     }\n@@ -642,18 +641,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         place: &Place<'tcx>,\n         place_ty: Ty<'tcx>,\n     ) {\n-        self.schedule_drop(\n-            span, region_scope, place, place_ty,\n-            DropKind::Storage {\n-                cached_block: CachedBlock::default(),\n-            },\n-        );\n-        self.schedule_drop(\n-            span, region_scope, place, place_ty,\n-            DropKind::Value {\n-                cached_block: CachedBlock::default(),\n-            },\n-        );\n+        self.schedule_drop(span, region_scope, place, place_ty, DropKind::Storage);\n+        self.schedule_drop(span, region_scope, place, place_ty, DropKind::Value);\n     }\n \n     // Scheduling drops\n@@ -673,8 +662,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     ) {\n         let needs_drop = self.hir.needs_drop(place_ty);\n         match drop_kind {\n-            DropKind::Value { .. } => if !needs_drop { return },\n-            DropKind::Storage { .. } => {\n+            DropKind::Value => if !needs_drop { return },\n+            DropKind::Storage => {\n                 match *place {\n                     Place::Base(PlaceBase::Local(index)) => if index.index() <= self.arg_count {\n                         span_bug!(\n@@ -740,7 +729,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // cache of outer scpoe stays intact.\n             scope.invalidate_cache(!needs_drop, self.is_generator, this_scope);\n             if this_scope {\n-                if let DropKind::Value { .. } = drop_kind {\n+                if let DropKind::Value = drop_kind {\n                     scope.needs_cleanup = true;\n                 }\n \n@@ -752,7 +741,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 scope.drops.push(DropData {\n                     span: scope_end,\n                     location: place.clone(),\n-                    kind: drop_kind\n+                    kind: drop_kind,\n+                    cached_block: CachedBlock::default(),\n                 });\n                 return;\n             }\n@@ -984,7 +974,7 @@ fn build_scope_drops<'tcx>(\n         let drop_data = &scope.drops[drop_idx];\n         let source_info = scope.source_info(drop_data.span);\n         match drop_data.kind {\n-            DropKind::Value { .. } => {\n+            DropKind::Value => {\n                 let unwind_to = get_unwind_to(scope, is_generator, drop_idx, generator_drop)\n                     .unwrap_or(last_unwind_to);\n \n@@ -996,7 +986,7 @@ fn build_scope_drops<'tcx>(\n                 });\n                 block = next;\n             }\n-            DropKind::Storage { .. } => {\n+            DropKind::Storage => {\n                 // Drop the storage for both value and storage drops.\n                 // Only temps and vars need their storage dead.\n                 match drop_data.location {\n@@ -1022,14 +1012,14 @@ fn get_unwind_to<'tcx>(\n ) -> Option<BasicBlock> {\n     for drop_idx in (0..unwind_from).rev() {\n         let drop_data = &scope.drops[drop_idx];\n-        match drop_data.kind {\n-            DropKind::Storage { cached_block } if is_generator => {\n-                return Some(cached_block.get(generator_drop).unwrap_or_else(|| {\n+        match (is_generator, &drop_data.kind) {\n+            (true, DropKind::Storage) => {\n+                return Some(drop_data.cached_block.get(generator_drop).unwrap_or_else(|| {\n                     span_bug!(drop_data.span, \"cached block not present for {:?}\", drop_data)\n                 }));\n             }\n-            DropKind::Value { cached_block } if !is_generator => {\n-                return Some(cached_block.get(generator_drop).unwrap_or_else(|| {\n+            (false, DropKind::Value) => {\n+                return Some(drop_data.cached_block.get(generator_drop).unwrap_or_else(|| {\n                     span_bug!(drop_data.span, \"cached block not present for {:?}\", drop_data)\n                 }));\n             }\n@@ -1084,7 +1074,7 @@ fn build_diverge_scope<'tcx>(cfg: &mut CFG<'tcx>,\n         // match the behavior of clang, but on inspection eddyb says\n         // this is not what clang does.\n         match drop_data.kind {\n-            DropKind::Storage { ref mut cached_block } if is_generator => {\n+            DropKind::Storage if is_generator => {\n                 // Only temps and vars need their storage dead.\n                 match drop_data.location {\n                     Place::Base(PlaceBase::Local(index)) => {\n@@ -1105,11 +1095,11 @@ fn build_diverge_scope<'tcx>(cfg: &mut CFG<'tcx>,\n                     }\n                     _ => unreachable!(),\n                 };\n-                *cached_block.ref_mut(generator_drop) = Some(target);\n+                *drop_data.cached_block.ref_mut(generator_drop) = Some(target);\n             }\n-            DropKind::Storage { .. } => {}\n-            DropKind::Value { ref mut cached_block } => {\n-                let cached_block = cached_block.ref_mut(generator_drop);\n+            DropKind::Storage => {}\n+            DropKind::Value => {\n+                let cached_block = drop_data.cached_block.ref_mut(generator_drop);\n                 target = if let Some(cached_block) = *cached_block {\n                     storage_deads.clear();\n                     target_built_by_us = false;"}]}