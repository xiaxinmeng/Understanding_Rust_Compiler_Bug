{"sha": "6bbc6b54de37738ea8991b1dd928b9d49d53cd67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYmM2YjU0ZGUzNzczOGVhODk5MWIxZGQ5MjhiOWQ0OWQ1M2NkNjc=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T15:13:42Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T15:13:42Z"}, "message": "Refactor - remove duplicates\n\nreplacing some functions with recover_missing_comments() and\nrewrite_missing_comments().", "tree": {"sha": "8e7eb5e5d4520ebc34d29d2b38d8340d21123d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e7eb5e5d4520ebc34d29d2b38d8340d21123d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bbc6b54de37738ea8991b1dd928b9d49d53cd67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbc6b54de37738ea8991b1dd928b9d49d53cd67", "html_url": "https://github.com/rust-lang/rust/commit/6bbc6b54de37738ea8991b1dd928b9d49d53cd67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bbc6b54de37738ea8991b1dd928b9d49d53cd67/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b16426243f6e9bae6404d453e6845893edcad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b16426243f6e9bae6404d453e6845893edcad6", "html_url": "https://github.com/rust-lang/rust/commit/66b16426243f6e9bae6404d453e6845893edcad6"}], "stats": {"total": 103, "additions": 30, "deletions": 73}, "files": [{"sha": "aa078f4dbf7cf93280385e3631d7300dea2b6c6a", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bbc6b54de37738ea8991b1dd928b9d49d53cd67/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbc6b54de37738ea8991b1dd928b9d49d53cd67/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=6bbc6b54de37738ea8991b1dd928b9d49d53cd67", "patch": "@@ -153,11 +153,10 @@ pub fn combine_strs_with_missing_comments(\n     let mut one_line_width =\n         last_line_width(prev_str) + first_line_width(next_str) + first_sep.len();\n \n-    let original_snippet = context.snippet(span);\n-    let trimmed_snippet = original_snippet.trim();\n     let indent_str = shape.indent.to_string(context.config);\n+    let missing_comment = try_opt!(rewrite_missing_comment(span, shape, context));\n \n-    if trimmed_snippet.is_empty() {\n+    if missing_comment.is_empty() {\n         if allow_extend && prev_str.len() + first_sep.len() + next_str.len() <= shape.width {\n             return Some(format!(\"{}{}{}\", prev_str, first_sep, next_str));\n         } else {\n@@ -175,18 +174,13 @@ pub fn combine_strs_with_missing_comments(\n     // Peek the the original source code and find out whether there is a newline between the first\n     // expression and the second expression or the missing comment. We will preserve the orginal\n     // layout whenever possible.\n+    let original_snippet = context.snippet(span);\n     let prefer_same_line = if let Some(pos) = original_snippet.chars().position(|c| c == '/') {\n         !original_snippet[..pos].contains('\\n')\n     } else {\n         !original_snippet.contains('\\n')\n     };\n \n-    let missing_comment = try_opt!(rewrite_comment(\n-        trimmed_snippet,\n-        false,\n-        shape,\n-        context.config\n-    ));\n     one_line_width -= first_sep.len();\n     let first_sep = if prev_str.is_empty() || missing_comment.is_empty() {\n         String::new()"}, {"sha": "1bb910b61b3ab1b793596e58ffa10febaee5c9bc", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6bbc6b54de37738ea8991b1dd928b9d49d53cd67/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbc6b54de37738ea8991b1dd928b9d49d53cd67/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6bbc6b54de37738ea8991b1dd928b9d49d53cd67", "patch": "@@ -20,7 +20,7 @@ use {Indent, Shape, Spanned};\n use chains::rewrite_chain;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n-              rewrite_comment, FindUncommented};\n+              rewrite_comment, rewrite_missing_comment, FindUncommented};\n use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n use items::{span_hi_for_arg, span_lo_for_arg};\n use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n@@ -1195,9 +1195,13 @@ impl<'a> ControlFlow<'a> {\n             mk_sp(self.block.span.lo, self.block.span.lo)\n         };\n \n-        // for event in event\n+        // `for event in event`\n+        // Do not include label in the span.\n+        let lo = self.label.map_or(self.span.lo, |label| label.span.hi);\n         let between_kwd_cond = mk_sp(\n-            context.codemap.span_after(self.span, self.keyword.trim()),\n+            context\n+                .codemap\n+                .span_after(mk_sp(lo, self.span.hi), self.keyword.trim()),\n             self.pat\n                 .map_or(cond_span.lo, |p| if self.matcher.is_empty() {\n                     p.span.lo\n@@ -1378,21 +1382,13 @@ fn rewrite_label(label: Option<ast::SpannedIdent>) -> String {\n }\n \n fn extract_comment(span: Span, context: &RewriteContext, shape: Shape) -> Option<String> {\n-    let comment_str = context.snippet(span);\n-    if contains_comment(&comment_str) {\n-        let comment = try_opt!(rewrite_comment(\n-            comment_str.trim(),\n-            false,\n-            shape,\n-            context.config,\n-        ));\n-        Some(format!(\n+    match rewrite_missing_comment(span, shape, context) {\n+        Some(ref comment) if !comment.is_empty() => Some(format!(\n             \"\\n{indent}{}\\n{indent}\",\n             comment,\n             indent = shape.indent.to_string(context.config)\n-        ))\n-    } else {\n-        None\n+        )),\n+        _ => None,\n     }\n }\n "}, {"sha": "c3092553b91bcc4d89b348bb4eee5a837ffae155", "filename": "src/items.rs", "status": "modified", "additions": 16, "deletions": 49, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6bbc6b54de37738ea8991b1dd928b9d49d53cd67/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bbc6b54de37738ea8991b1dd928b9d49d53cd67/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6bbc6b54de37738ea8991b1dd928b9d49d53cd67", "patch": "@@ -19,7 +19,7 @@ use syntax::codemap::{BytePos, Span};\n use {Indent, Shape, Spanned};\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n-              rewrite_comment, FindUncommented};\n+              recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n@@ -2006,33 +2006,17 @@ fn rewrite_fn_base(\n     // args and `{`.\n     if where_clause_str.is_empty() {\n         if let ast::FunctionRetTy::Default(ret_span) = fd.output {\n-            let sp = mk_sp(args_span.hi, ret_span.hi);\n-            let missing_snippet = context.snippet(sp);\n-            let trimmed_snippet = missing_snippet.trim();\n-            let missing_comment = if trimmed_snippet.is_empty() {\n-                String::new()\n-            } else {\n-                try_opt!(rewrite_comment(\n-                    trimmed_snippet,\n-                    false,\n-                    Shape::indented(indent, context.config),\n-                    context.config,\n-                ))\n-            };\n-            if !missing_comment.is_empty() {\n-                let pos = missing_snippet.chars().position(|c| c == '/').unwrap_or(0);\n-                // 1 = ` `\n-                let total_width = missing_comment.len() + last_line_width(&result) + 1;\n-                let force_new_line_before_comment = missing_snippet[..pos].contains('\\n') ||\n-                    total_width > context.config.max_width();\n-                let sep = if force_new_line_before_comment {\n-                    format!(\"\\n{}\", indent.to_string(context.config))\n-                } else {\n-                    String::from(\" \")\n-                };\n-                result.push_str(&sep);\n-                result.push_str(&missing_comment);\n-                force_new_line_for_brace = true;\n+            match recover_missing_comment_in_span(\n+                mk_sp(args_span.hi, ret_span.hi),\n+                shape,\n+                context,\n+                last_line_width(&result),\n+            ) {\n+                Some(ref missing_comment) if !missing_comment.is_empty() => {\n+                    result.push_str(missing_comment);\n+                    force_new_line_for_brace = true;\n+                }\n+                _ => (),\n             }\n         }\n     }\n@@ -2684,34 +2668,17 @@ fn missing_span_before_after_where(\n     (missing_span_before, missing_span_after)\n }\n \n-fn rewrite_missing_comment_in_where(\n-    context: &RewriteContext,\n-    comment: &str,\n-    shape: Shape,\n-) -> Option<String> {\n-    let comment = comment.trim();\n-    if comment.is_empty() {\n-        Some(String::new())\n-    } else {\n-        rewrite_comment(comment, false, shape, context.config)\n-    }\n-}\n-\n fn rewrite_comments_before_after_where(\n     context: &RewriteContext,\n     span_before_where: Span,\n     span_after_where: Span,\n     shape: Shape,\n ) -> Option<(String, String)> {\n-    let before_comment = try_opt!(rewrite_missing_comment_in_where(\n-        context,\n-        &context.snippet(span_before_where),\n-        shape,\n-    ));\n-    let after_comment = try_opt!(rewrite_missing_comment_in_where(\n-        context,\n-        &context.snippet(span_after_where),\n+    let before_comment = try_opt!(rewrite_missing_comment(span_before_where, shape, context));\n+    let after_comment = try_opt!(rewrite_missing_comment(\n+        span_after_where,\n         shape.block_indent(context.config.tab_spaces()),\n+        context,\n     ));\n     Some((before_comment, after_comment))\n }"}]}