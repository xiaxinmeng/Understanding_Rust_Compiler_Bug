{"sha": "cc8163439f65138c0945c37d6bddc64ced2d2143", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjODE2MzQzOWY2NTEzOGMwOTQ1YzM3ZDZiZGRjNjRjZWQyZDIxNDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T18:50:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-20T18:50:22Z"}, "message": "populate modules", "tree": {"sha": "232f888acb84723ea89fdf8decd866a042df5d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232f888acb84723ea89fdf8decd866a042df5d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc8163439f65138c0945c37d6bddc64ced2d2143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8163439f65138c0945c37d6bddc64ced2d2143", "html_url": "https://github.com/rust-lang/rust/commit/cc8163439f65138c0945c37d6bddc64ced2d2143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc8163439f65138c0945c37d6bddc64ced2d2143/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf92c3e286232be7e0d1370b88547ca0cb6f636", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf92c3e286232be7e0d1370b88547ca0cb6f636", "html_url": "https://github.com/rust-lang/rust/commit/1cf92c3e286232be7e0d1370b88547ca0cb6f636"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "f49e7f909bab955ad1d8bda5f92ca3b57a168430", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc8163439f65138c0945c37d6bddc64ced2d2143/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8163439f65138c0945c37d6bddc64ced2d2143/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=cc8163439f65138c0945c37d6bddc64ced2d2143", "patch": "@@ -214,6 +214,13 @@ impl ModuleId {\n             .find(|it| it.name == name)?;\n         Some(*link.points_to.first()?)\n     }\n+    fn children<'a>(self, tree: &'a ModuleTree) -> impl Iterator<Item = (SmolStr, ModuleId)> + 'a {\n+        tree.module(self).children.iter().filter_map(move |&it| {\n+            let link = tree.link(it);\n+            let module = *link.points_to.first()?;\n+            Some((link.name.clone(), module))\n+        })\n+    }\n     fn problems(self, tree: &ModuleTree, db: &impl SyntaxDatabase) -> Vec<(SyntaxNode, Problem)> {\n         tree.module(self)\n             .children"}, {"sha": "6ff8e61f559ec2a710303321744793288cb53c19", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 64, "deletions": 10, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/cc8163439f65138c0945c37d6bddc64ced2d2143/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8163439f65138c0945c37d6bddc64ced2d2143/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=cc8163439f65138c0945c37d6bddc64ced2d2143", "patch": "@@ -1,15 +1,21 @@\n //! Name resolution algorithm\n+use std::sync::Arc;\n+\n use rustc_hash::FxHashMap;\n \n use ra_syntax::{\n-    SmolStr, SyntaxKind,\n+    SmolStr, SyntaxKind::{self, *},\n     ast::{self, NameOwner, AstNode}\n };\n \n use crate::{\n-    loc2id::DefId,\n-    descriptors::module::ModuleId,\n-    syntax_ptr::LocalSyntaxPtr,\n+    loc2id::{DefId, DefLoc},\n+    descriptors::{\n+        DescriptorDatabase,\n+        module::{ModuleId, ModuleTree},\n+    },\n+    syntax_ptr::{LocalSyntaxPtr, SyntaxPtr},\n+    input::SourceRootId,\n };\n \n /// A set of items and imports declared inside a module, without relation to\n@@ -44,9 +50,9 @@ struct ItemMap {\n     per_module: FxHashMap<ModuleId, ModuleItems>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Default)]\n struct ModuleItems {\n-    items: FxHashMap<SmolStr, PerNs<DefId>>,\n+    items: FxHashMap<SmolStr, DefId>,\n     import_resolutions: FxHashMap<LocalSyntaxPtr, DefId>,\n }\n \n@@ -201,13 +207,61 @@ impl ModuleItem {\n     }\n }\n \n-struct Resolver {\n+struct Resolver<'a, DB> {\n+    db: &'a DB,\n+    source_root: SourceRootId,\n+    module_tree: Arc<ModuleTree>,\n     input: FxHashMap<ModuleId, InputModuleItems>,\n-    result: ModuleItems,\n+    result: ItemMap,\n+}\n+\n+impl<'a, DB> Resolver<'a, DB>\n+where\n+    DB: DescriptorDatabase,\n+{\n+    fn resolve(&mut self) {\n+        for (&module_id, items) in self.input.iter() {\n+            populate_module(\n+                self.db,\n+                self.source_root,\n+                &*self.module_tree,\n+                &mut self.result,\n+                module_id,\n+                items,\n+            )\n+        }\n+    }\n }\n \n-impl Resolver {\n-    fn resolve(&mut self){\n+fn populate_module(\n+    db: &impl DescriptorDatabase,\n+    source_root: SourceRootId,\n+    module_tree: &ModuleTree,\n+    item_map: &mut ItemMap,\n+    module_id: ModuleId,\n+    input: &InputModuleItems,\n+) {\n+    let file_id = module_id.source(module_tree).file_id();\n \n+    let mut module_items = ModuleItems::default();\n+\n+    for item in input.items.iter() {\n+        if item.kind == MODULE {\n+            // handle submodules separatelly\n+            continue;\n+        }\n+        let ptr = item.ptr.into_global(file_id);\n+        let def_loc = DefLoc::Item { ptr };\n+        let def_id = db.id_maps().def_id(def_loc);\n+        module_items.items.insert(item.name.clone(), def_id);\n+    }\n+\n+    for (name, mod_id) in module_id.children(module_tree) {\n+        let def_loc = DefLoc::Module {\n+            id: mod_id,\n+            source_root,\n+        };\n     }\n+\n+    item_map.per_module.insert(module_id, module_items);\n }"}, {"sha": "e4b55f9b0a5748c0d3e993985b895546e115654e", "filename": "crates/ra_analysis/src/loc2id.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc8163439f65138c0945c37d6bddc64ced2d2143/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8163439f65138c0945c37d6bddc64ced2d2143/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Floc2id.rs?ref=cc8163439f65138c0945c37d6bddc64ced2d2143", "patch": "@@ -96,14 +96,14 @@ pub(crate) struct DefId(u32);\n impl_numeric_id!(DefId);\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-enum DefLoc {\n+pub(crate) enum DefLoc {\n     Module {\n         id: ModuleId,\n         source_root: SourceRootId,\n     },\n     Item {\n         ptr: SyntaxPtr,\n-    }\n+    },\n }\n \n pub(crate) trait IdDatabase: salsa::Database {\n@@ -122,6 +122,13 @@ impl IdMaps {\n     pub(crate) fn fn_ptr(&self, fn_id: FnId) -> SyntaxPtr {\n         self.inner.fns.lock().id2loc(fn_id)\n     }\n+\n+    pub(crate) fn def_id(&self, loc: DefLoc) -> DefId {\n+        self.inner.defs.lock().loc2id(&loc)\n+    }\n+    pub(crate) fn def_loc(&self, def_id: DefId) -> DefLoc {\n+        self.inner.defs.lock().id2loc(def_id)\n+    }\n }\n \n #[derive(Debug, Default)]"}]}