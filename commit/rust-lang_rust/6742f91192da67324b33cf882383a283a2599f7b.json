{"sha": "6742f91192da67324b33cf882383a283a2599f7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NDJmOTExOTJkYTY3MzI0YjMzY2Y4ODIzODNhMjgzYTI1OTlmN2I=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T08:59:16Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T08:59:16Z"}, "message": "Create tuple element accessor traits", "tree": {"sha": "c60aeacca5dc0a7bf9f1cca7f1961d514bc62a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c60aeacca5dc0a7bf9f1cca7f1961d514bc62a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6742f91192da67324b33cf882383a283a2599f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6742f91192da67324b33cf882383a283a2599f7b", "html_url": "https://github.com/rust-lang/rust/commit/6742f91192da67324b33cf882383a283a2599f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6742f91192da67324b33cf882383a283a2599f7b/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91daaa8a9390ccf760b3ba7f965b2863103d993", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91daaa8a9390ccf760b3ba7f965b2863103d993", "html_url": "https://github.com/rust-lang/rust/commit/e91daaa8a9390ccf760b3ba7f965b2863103d993"}], "stats": {"total": 167, "additions": 167, "deletions": 0}, "files": [{"sha": "77371b6336848b356cfaed724309e651e293be6b", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6742f91192da67324b33cf882383a283a2599f7b/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742f91192da67324b33cf882383a283a2599f7b/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=6742f91192da67324b33cf882383a283a2599f7b", "patch": "@@ -52,6 +52,8 @@ pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};\n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n+pub use tuple::{Tuple2, Tuple3, Tuple4, Tuple5, Tuple6, Tuple7, Tuple8, Tuple9};\n+pub use tuple::{Tuple10, Tuple11, Tuple12};\n pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector, MutableVector};"}, {"sha": "810ef75ad6a317034a1b64eb4fafadf0e492b8b4", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/6742f91192da67324b33cf882383a283a2599f7b/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6742f91192da67324b33cf882383a283a2599f7b/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=6742f91192da67324b33cf882383a283a2599f7b", "patch": "@@ -246,6 +246,154 @@ impl<A:Ord,B:Ord,C:Ord> Ord for (A, B, C) {\n     fn gt(&self, other: &(A, B, C)) -> bool { (*other).lt(&(*self))  }\n }\n \n+// Tuple element accessor traits\n+\n+macro_rules! n_tuple(\n+    ($name:ident: $($method:ident : $T:ident),+) => (\n+        pub trait $name<$($T),+> {\n+            $(fn $method(&self) -> $T;)+\n+        }\n+    )\n+)\n+\n+n_tuple!(Tuple2: _0:A, _1:B)\n+n_tuple!(Tuple3: _0:A, _1:B, _2:C)\n+n_tuple!(Tuple4: _0:A, _1:B, _2:C, _3:D)\n+n_tuple!(Tuple5: _0:A, _1:B, _2:C, _3:D, _4:E)\n+n_tuple!(Tuple6: _0:A, _1:B, _2:C, _3:D, _4:E, _5:F)\n+n_tuple!(Tuple7: _0:A, _1:B, _2:C, _3:D, _4:E, _5:F, _6:G)\n+n_tuple!(Tuple8: _0:A, _1:B, _2:C, _3:D, _4:E, _5:F, _6:G, _7:H)\n+n_tuple!(Tuple9: _0:A, _1:B, _2:C, _3:D, _4:E, _5:F, _6:G, _7:H, _8:I)\n+n_tuple!(Tuple10: _0:A, _1:B, _2:C, _3:D, _4:E, _5:F, _6:G, _7:H, _8:I, _9:J)\n+n_tuple!(Tuple11: _0:A, _1:B, _2:C, _3:D, _4:E, _5:F, _6:G, _7:H, _8:I, _9:J, _10:K)\n+n_tuple!(Tuple12: _0:A, _1:B, _2:C, _3:D, _4:E, _5:F, _6:G, _7:H, _8:I, _9:J, _10:K, _11:L)\n+\n+// Tuple element accessor trait implementations\n+\n+macro_rules! impl_n_tuple(\n+    ($name:ident: $($method:ident -> $T:ident { $accessor:pat => $t:expr })+) => (\n+        impl<$($T:Copy),+> $name<$($T),+> for ($($T),+) {\n+            $(\n+                fn $method(&self) -> $T {\n+                    match *self {\n+                        $accessor => $t\n+                    }\n+                }\n+            )+\n+        }\n+    )\n+)\n+\n+impl_n_tuple!(Tuple2:\n+    _0 -> A { (a,_) => a }\n+    _1 -> B { (_,b) => b }\n+)\n+\n+impl_n_tuple!(Tuple3:\n+    _0 -> A { (a,_,_) => a }\n+    _1 -> B { (_,b,_) => b }\n+    _2 -> C { (_,_,c) => c }\n+)\n+\n+impl_n_tuple!(Tuple4:\n+    _0 -> A { (a,_,_,_) => a }\n+    _1 -> B { (_,b,_,_) => b }\n+    _2 -> C { (_,_,c,_) => c }\n+    _3 -> D { (_,_,_,d) => d }\n+)\n+\n+impl_n_tuple!(Tuple5:\n+    _0 -> A { (a,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_) => c }\n+    _3 -> D { (_,_,_,d,_) => d }\n+    _4 -> E { (_,_,_,_,e) => e }\n+)\n+\n+impl_n_tuple!(Tuple6:\n+    _0 -> A { (a,_,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_,_) => c }\n+    _3 -> D { (_,_,_,d,_,_) => d }\n+    _4 -> E { (_,_,_,_,e,_) => e }\n+    _5 -> F { (_,_,_,_,_,f) => f }\n+)\n+\n+impl_n_tuple!(Tuple7:\n+    _0 -> A { (a,_,_,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_,_,_) => c }\n+    _3 -> D { (_,_,_,d,_,_,_) => d }\n+    _4 -> E { (_,_,_,_,e,_,_) => e }\n+    _5 -> F { (_,_,_,_,_,f,_) => f }\n+    _6 -> G { (_,_,_,_,_,_,g) => g }\n+)\n+\n+impl_n_tuple!(Tuple8:\n+    _0 -> A { (a,_,_,_,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_,_,_,_) => c }\n+    _3 -> D { (_,_,_,d,_,_,_,_) => d }\n+    _4 -> E { (_,_,_,_,e,_,_,_) => e }\n+    _5 -> F { (_,_,_,_,_,f,_,_) => f }\n+    _6 -> G { (_,_,_,_,_,_,g,_) => g }\n+    _7 -> H { (_,_,_,_,_,_,_,h) => h }\n+)\n+\n+impl_n_tuple!(Tuple9:\n+    _0 -> A { (a,_,_,_,_,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_,_,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_,_,_,_,_) => c }\n+    _3 -> D { (_,_,_,d,_,_,_,_,_) => d }\n+    _4 -> E { (_,_,_,_,e,_,_,_,_) => e }\n+    _5 -> F { (_,_,_,_,_,f,_,_,_) => f }\n+    _6 -> G { (_,_,_,_,_,_,g,_,_) => g }\n+    _7 -> H { (_,_,_,_,_,_,_,h,_) => h }\n+    _8 -> I { (_,_,_,_,_,_,_,_,i) => i }\n+)\n+\n+impl_n_tuple!(Tuple10:\n+    _0 -> A { (a,_,_,_,_,_,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_,_,_,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_,_,_,_,_,_) => c }\n+    _3 -> D { (_,_,_,d,_,_,_,_,_,_) => d }\n+    _4 -> E { (_,_,_,_,e,_,_,_,_,_) => e }\n+    _5 -> F { (_,_,_,_,_,f,_,_,_,_) => f }\n+    _6 -> G { (_,_,_,_,_,_,g,_,_,_) => g }\n+    _7 -> H { (_,_,_,_,_,_,_,h,_,_) => h }\n+    _8 -> I { (_,_,_,_,_,_,_,_,i,_) => i }\n+    _9 -> J { (_,_,_,_,_,_,_,_,_,j) => j }\n+)\n+\n+impl_n_tuple!(Tuple11:\n+    _0 -> A { (a,_,_,_,_,_,_,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_,_,_,_,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_,_,_,_,_,_,_) => c }\n+    _3 -> D { (_,_,_,d,_,_,_,_,_,_,_) => d }\n+    _4 -> E { (_,_,_,_,e,_,_,_,_,_,_) => e }\n+    _5 -> F { (_,_,_,_,_,f,_,_,_,_,_) => f }\n+    _6 -> G { (_,_,_,_,_,_,g,_,_,_,_) => g }\n+    _7 -> H { (_,_,_,_,_,_,_,h,_,_,_) => h }\n+    _8 -> I { (_,_,_,_,_,_,_,_,i,_,_) => i }\n+    _9 -> J { (_,_,_,_,_,_,_,_,_,j,_) => j }\n+    _10 -> K { (_,_,_,_,_,_,_,_,_,_,k) => k }\n+)\n+\n+impl_n_tuple!(Tuple12:\n+    _0 -> A { (a,_,_,_,_,_,_,_,_,_,_,_) => a }\n+    _1 -> B { (_,b,_,_,_,_,_,_,_,_,_,_) => b }\n+    _2 -> C { (_,_,c,_,_,_,_,_,_,_,_,_) => c }\n+    _3 -> D { (_,_,_,d,_,_,_,_,_,_,_,_) => d }\n+    _4 -> E { (_,_,_,_,e,_,_,_,_,_,_,_) => e }\n+    _5 -> F { (_,_,_,_,_,f,_,_,_,_,_,_) => f }\n+    _6 -> G { (_,_,_,_,_,_,g,_,_,_,_,_) => g }\n+    _7 -> H { (_,_,_,_,_,_,_,h,_,_,_,_) => h }\n+    _8 -> I { (_,_,_,_,_,_,_,_,i,_,_,_) => i }\n+    _9 -> J { (_,_,_,_,_,_,_,_,_,j,_,_) => j }\n+    _10 -> K { (_,_,_,_,_,_,_,_,_,_,k,_) => k }\n+    _11 -> L { (_,_,_,_,_,_,_,_,_,_,_,l) => l }\n+)\n+\n #[test]\n fn test_tuple_ref() {\n     let x = (~\"foo\", ~\"bar\");\n@@ -268,3 +416,20 @@ fn test_clone() {\n     assert!(a.first() == b.first());\n     assert!(a.second() == b.second());\n }\n+\n+#[test]\n+fn test_n_tuple() {\n+    let t = (0u8, 1u16, 2u32, 3u64, 4u, 5i8, 6i16, 7i32, 8i64, 9i, 10f32, 11f64);\n+    assert_eq!(t._0(), 0u8);\n+    assert_eq!(t._1(), 1u16);\n+    assert_eq!(t._2(), 2u32);\n+    assert_eq!(t._3(), 3u64);\n+    assert_eq!(t._4(), 4u);\n+    assert_eq!(t._5(), 5i8);\n+    assert_eq!(t._6(), 6i16);\n+    assert_eq!(t._7(), 7i32);\n+    assert_eq!(t._8(), 8i64);\n+    assert_eq!(t._9(), 9i);\n+    assert_eq!(t._10(), 10f32);\n+    assert_eq!(t._11(), 11f64);\n+}"}]}