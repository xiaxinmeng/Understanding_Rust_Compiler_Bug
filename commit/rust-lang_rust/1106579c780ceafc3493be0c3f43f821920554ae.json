{"sha": "1106579c780ceafc3493be0c3f43f821920554ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMDY1NzljNzgwY2VhZmMzNDkzYmUwYzNmNDNmODIxOTIwNTU0YWU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-10T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-11T07:10:21Z"}, "message": "librustc_codegen_llvm: Use slices instead of 0-terminated strings\n\nChanged functions:\n* LLVMRustGetOrInsertFunction\n* LLVMRustGetNamedValue\n* LLVMRustBuildCall (removed unused name argument)\n* LLVMRustInlineAsm\n* LLVMRustInlineAsmVerify\n* LLVMRustAppendModuleInlineAsm", "tree": {"sha": "d556289b787a505dcff4262bac625e7c5223dfc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d556289b787a505dcff4262bac625e7c5223dfc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1106579c780ceafc3493be0c3f43f821920554ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1106579c780ceafc3493be0c3f43f821920554ae", "html_url": "https://github.com/rust-lang/rust/commit/1106579c780ceafc3493be0c3f43f821920554ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1106579c780ceafc3493be0c3f43f821920554ae/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbade652ed8ebac70f903e01f51cd92c4e4302c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbade652ed8ebac70f903e01f51cd92c4e4302c", "html_url": "https://github.com/rust-lang/rust/commit/3dbade652ed8ebac70f903e01f51cd92c4e4302c"}], "stats": {"total": 118, "additions": 62, "deletions": 56}, "files": [{"sha": "4e7bc9fa0e2aed5fa11796834cbbb2b027cbfd42", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=1106579c780ceafc3493be0c3f43f821920554ae", "patch": "@@ -1,5 +1,3 @@\n-use std::ffi::CString;\n-\n use crate::attributes;\n use libc::c_uint;\n use rustc::bug;\n@@ -50,8 +48,8 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n             args.len() as c_uint,\n             False,\n         );\n-        let name = CString::new(format!(\"__rust_{}\", method.name)).unwrap();\n-        let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr(), ty);\n+        let name = format!(\"__rust_{}\", method.name);\n+        let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n \n         if tcx.sess.target.target.options.default_hidden_visibility {\n             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n@@ -60,8 +58,9 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n             attributes::emit_uwtable(llfn, true);\n         }\n \n-        let callee = CString::new(kind.fn_name(method.name)).unwrap();\n-        let callee = llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr(), ty);\n+        let callee = kind.fn_name(method.name);\n+        let callee =\n+            llvm::LLVMRustGetOrInsertFunction(llmod, callee.as_ptr().cast(), callee.len(), ty);\n         llvm::LLVMRustSetVisibility(callee, llvm::Visibility::Hidden);\n \n         let llbb = llvm::LLVMAppendBasicBlockInContext(llcx, llfn, \"entry\\0\".as_ptr().cast());\n@@ -73,14 +72,8 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n             .enumerate()\n             .map(|(i, _)| llvm::LLVMGetParam(llfn, i as c_uint))\n             .collect::<Vec<_>>();\n-        let ret = llvm::LLVMRustBuildCall(\n-            llbuilder,\n-            callee,\n-            args.as_ptr(),\n-            args.len() as c_uint,\n-            None,\n-            \"\\0\".as_ptr().cast(),\n-        );\n+        let ret =\n+            llvm::LLVMRustBuildCall(llbuilder, callee, args.as_ptr(), args.len() as c_uint, None);\n         llvm::LLVMSetTailCall(ret, True);\n         if output.is_some() {\n             llvm::LLVMBuildRet(llbuilder, ret);"}, {"sha": "64bd618c332d3bb6168b329c328965b22debee0e", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=1106579c780ceafc3493be0c3f43f821920554ae", "patch": "@@ -12,7 +12,6 @@ use rustc_span::Span;\n \n use libc::{c_char, c_uint};\n use log::debug;\n-use std::ffi::{CStr, CString};\n \n impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn codegen_inline_asm(\n@@ -74,12 +73,11 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             _ => self.type_struct(&output_types, false),\n         };\n \n-        let asm = CString::new(ia.asm.as_str().as_bytes()).unwrap();\n-        let constraint_cstr = CString::new(all_constraints).unwrap();\n+        let asm = ia.asm.as_str();\n         let r = inline_asm_call(\n             self,\n             &asm,\n-            &constraint_cstr,\n+            &all_constraints,\n             &inputs,\n             output_type,\n             ia.volatile,\n@@ -119,17 +117,17 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n impl AsmMethods for CodegenCx<'ll, 'tcx> {\n     fn codegen_global_asm(&self, ga: &hir::GlobalAsm) {\n-        let asm = CString::new(ga.asm.as_str().as_bytes()).unwrap();\n+        let asm = ga.asm.as_str();\n         unsafe {\n-            llvm::LLVMRustAppendModuleInlineAsm(self.llmod, asm.as_ptr());\n+            llvm::LLVMRustAppendModuleInlineAsm(self.llmod, asm.as_ptr().cast(), asm.len());\n         }\n     }\n }\n \n fn inline_asm_call(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n-    asm: &CStr,\n-    cons: &CStr,\n+    asm: &str,\n+    cons: &str,\n     inputs: &[&'ll Value],\n     output: &'ll llvm::Type,\n     volatile: bool,\n@@ -151,13 +149,15 @@ fn inline_asm_call(\n     let fty = bx.cx.type_func(&argtys[..], output);\n     unsafe {\n         // Ask LLVM to verify that the constraints are well-formed.\n-        let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr());\n+        let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr().cast(), cons.len());\n         debug!(\"constraint verification result: {:?}\", constraints_ok);\n         if constraints_ok {\n             let v = llvm::LLVMRustInlineAsm(\n                 fty,\n-                asm.as_ptr(),\n-                cons.as_ptr(),\n+                asm.as_ptr().cast(),\n+                asm.len(),\n+                cons.as_ptr().cast(),\n+                cons.len(),\n                 volatile,\n                 alignstack,\n                 llvm::AsmDialect::from_generic(dia),"}, {"sha": "1c5987f26f129f3112e4a365e44b87405a2a62f2", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=1106579c780ceafc3493be0c3f43f821920554ae", "patch": "@@ -1016,7 +1016,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 args.as_ptr() as *const &llvm::Value,\n                 args.len() as c_uint,\n                 bundle,\n-                UNNAMED,\n             )\n         }\n     }"}, {"sha": "fab6321186b2c27363a34d60761a0724092f9861", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=1106579c780ceafc3493be0c3f43f821920554ae", "patch": "@@ -21,7 +21,6 @@ use crate::value::Value;\n use log::debug;\n use rustc::ty::Ty;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::small_c_str::SmallCStr;\n \n /// Declare a function.\n ///\n@@ -34,8 +33,9 @@ fn declare_raw_fn(\n     ty: &'ll Type,\n ) -> &'ll Value {\n     debug!(\"declare_raw_fn(name={:?}, ty={:?})\", name, ty);\n-    let namebuf = SmallCStr::new(name);\n-    let llfn = unsafe { llvm::LLVMRustGetOrInsertFunction(cx.llmod, namebuf.as_ptr(), ty) };\n+    let llfn = unsafe {\n+        llvm::LLVMRustGetOrInsertFunction(cx.llmod, name.as_ptr().cast(), name.len(), ty)\n+    };\n \n     llvm::SetFunctionCallConv(llfn, callconv);\n     // Function addresses in Rust are never significant, allowing functions to\n@@ -83,8 +83,7 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n     fn get_declared_value(&self, name: &str) -> Option<&'ll Value> {\n         debug!(\"get_declared_value(name={:?})\", name);\n-        let namebuf = SmallCStr::new(name);\n-        unsafe { llvm::LLVMRustGetNamedValue(self.llmod, namebuf.as_ptr()) }\n+        unsafe { llvm::LLVMRustGetNamedValue(self.llmod, name.as_ptr().cast(), name.len()) }\n     }\n \n     fn get_defined_value(&self, name: &str) -> Option<&'ll Value> {"}, {"sha": "388b6c74839583535ab1e6f9474a6a02aa29a315", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1106579c780ceafc3493be0c3f43f821920554ae/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=1106579c780ceafc3493be0c3f43f821920554ae", "patch": "@@ -732,7 +732,7 @@ extern \"C\" {\n \n     /// See Module::setModuleInlineAsm.\n     pub fn LLVMSetModuleInlineAsm(M: &Module, Asm: *const c_char);\n-    pub fn LLVMRustAppendModuleInlineAsm(M: &Module, Asm: *const c_char);\n+    pub fn LLVMRustAppendModuleInlineAsm(M: &Module, Asm: *const c_char, AsmLen: size_t);\n \n     /// See llvm::LLVMTypeKind::getTypeID.\n     pub fn LLVMRustGetTypeKind(Ty: &Type) -> TypeKind;\n@@ -879,13 +879,18 @@ extern \"C\" {\n     pub fn LLVMSetThreadLocalMode(GlobalVar: &Value, Mode: ThreadLocalMode);\n     pub fn LLVMIsGlobalConstant(GlobalVar: &Value) -> Bool;\n     pub fn LLVMSetGlobalConstant(GlobalVar: &Value, IsConstant: Bool);\n-    pub fn LLVMRustGetNamedValue(M: &Module, Name: *const c_char) -> Option<&Value>;\n+    pub fn LLVMRustGetNamedValue(\n+        M: &Module,\n+        Name: *const c_char,\n+        NameLen: size_t,\n+    ) -> Option<&Value>;\n     pub fn LLVMSetTailCall(CallInst: &Value, IsTailCall: Bool);\n \n     // Operations on functions\n     pub fn LLVMRustGetOrInsertFunction(\n         M: &'a Module,\n         Name: *const c_char,\n+        NameLen: size_t,\n         FunctionTy: &'a Type,\n     ) -> &'a Value;\n     pub fn LLVMSetFunctionCallConv(Fn: &Value, CC: c_uint);\n@@ -1332,7 +1337,6 @@ extern \"C\" {\n         Args: *const &'a Value,\n         NumArgs: c_uint,\n         Bundle: Option<&OperandBundleDef<'a>>,\n-        Name: *const c_char,\n     ) -> &'a Value;\n     pub fn LLVMRustBuildMemCpy(\n         B: &Builder<'a>,\n@@ -1581,12 +1585,18 @@ extern \"C\" {\n     pub fn LLVMRustInlineAsm(\n         Ty: &Type,\n         AsmString: *const c_char,\n+        AsmStringLen: size_t,\n         Constraints: *const c_char,\n+        ConstraintsLen: size_t,\n         SideEffects: Bool,\n         AlignStack: Bool,\n         Dialect: AsmDialect,\n     ) -> &Value;\n-    pub fn LLVMRustInlineAsmVerify(Ty: &Type, Constraints: *const c_char) -> bool;\n+    pub fn LLVMRustInlineAsmVerify(\n+        Ty: &Type,\n+        Constraints: *const c_char,\n+        ConstraintsLen: size_t,\n+    ) -> bool;\n \n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n     pub fn LLVMRustVersionMajor() -> u32;"}, {"sha": "25cfee3373dc4e5197d99006ed7f199817c4f595", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1106579c780ceafc3493be0c3f43f821920554ae/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1106579c780ceafc3493be0c3f43f821920554ae/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1106579c780ceafc3493be0c3f43f821920554ae", "patch": "@@ -112,20 +112,22 @@ extern \"C\" void LLVMRustPrintPassTimings() {\n   TimerGroup::printAll(OS);\n }\n \n-extern \"C\" LLVMValueRef LLVMRustGetNamedValue(LLVMModuleRef M,\n-                                              const char *Name) {\n-  return wrap(unwrap(M)->getNamedValue(Name));\n+extern \"C\" LLVMValueRef LLVMRustGetNamedValue(LLVMModuleRef M, const char *Name,\n+                                              size_t NameLen) {\n+  return wrap(unwrap(M)->getNamedValue(StringRef(Name, NameLen)));\n }\n \n extern \"C\" LLVMValueRef LLVMRustGetOrInsertFunction(LLVMModuleRef M,\n                                                     const char *Name,\n+                                                    size_t NameLen,\n                                                     LLVMTypeRef FunctionTy) {\n-  return wrap(\n-      unwrap(M)->getOrInsertFunction(Name, unwrap<FunctionType>(FunctionTy))\n+  return wrap(unwrap(M)\n+                  ->getOrInsertFunction(StringRef(Name, NameLen),\n+                                        unwrap<FunctionType>(FunctionTy))\n #if LLVM_VERSION_GE(9, 0)\n-      .getCallee()\n+                  .getCallee()\n #endif\n-      );\n+  );\n }\n \n extern \"C\" LLVMValueRef\n@@ -395,22 +397,26 @@ static InlineAsm::AsmDialect fromRust(LLVMRustAsmDialect Dialect) {\n   }\n }\n \n-extern \"C\" LLVMValueRef LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString,\n-                                          char *Constraints,\n-                                          LLVMBool HasSideEffects,\n-                                          LLVMBool IsAlignStack,\n-                                          LLVMRustAsmDialect Dialect) {\n-  return wrap(InlineAsm::get(unwrap<FunctionType>(Ty), AsmString, Constraints,\n+extern \"C\" LLVMValueRef\n+LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString, size_t AsmStringLen,\n+                  char *Constraints, size_t ConstraintsLen,\n+                  LLVMBool HasSideEffects, LLVMBool IsAlignStack,\n+                  LLVMRustAsmDialect Dialect) {\n+  return wrap(InlineAsm::get(unwrap<FunctionType>(Ty),\n+                             StringRef(AsmString, AsmStringLen),\n+                             StringRef(Constraints, ConstraintsLen),\n                              HasSideEffects, IsAlignStack, fromRust(Dialect)));\n }\n \n-extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty,\n-                                          char *Constraints) {\n-  return InlineAsm::Verify(unwrap<FunctionType>(Ty), Constraints);\n+extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,\n+                                        size_t ConstraintsLen) {\n+  return InlineAsm::Verify(unwrap<FunctionType>(Ty),\n+                           StringRef(Constraints, ConstraintsLen));\n }\n \n-extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm) {\n-  unwrap(M)->appendModuleInlineAsm(StringRef(Asm));\n+extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm,\n+                                              size_t AsmLen) {\n+  unwrap(M)->appendModuleInlineAsm(StringRef(Asm, AsmLen));\n }\n \n typedef DIBuilder *LLVMRustDIBuilderRef;\n@@ -1282,12 +1288,11 @@ extern \"C\" void LLVMRustFreeOperandBundleDef(OperandBundleDef *Bundle) {\n \n extern \"C\" LLVMValueRef LLVMRustBuildCall(LLVMBuilderRef B, LLVMValueRef Fn,\n                                           LLVMValueRef *Args, unsigned NumArgs,\n-                                          OperandBundleDef *Bundle,\n-                                          const char *Name) {\n+                                          OperandBundleDef *Bundle) {\n   unsigned Len = Bundle ? 1 : 0;\n   ArrayRef<OperandBundleDef> Bundles = makeArrayRef(Bundle, Len);\n   return wrap(unwrap(B)->CreateCall(\n-      unwrap(Fn), makeArrayRef(unwrap(Args), NumArgs), Bundles, Name));\n+      unwrap(Fn), makeArrayRef(unwrap(Args), NumArgs), Bundles));\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildMemCpy(LLVMBuilderRef B,"}]}