{"sha": "d6c3b67348d9d6860051a04ee24e284414fa49a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzNiNjczNDhkOWQ2ODYwMDUxYTA0ZWUyNGUyODQ0MTRmYTQ5YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-01T09:06:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-01T09:06:32Z"}, "message": "auto merge of #9576 : FlaPer87/rust/issue/9125, r=alexcrichton\n\nFixes #9125", "tree": {"sha": "6387b2a0d842cc8ea3efaf720bdb4012a6c4f301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6387b2a0d842cc8ea3efaf720bdb4012a6c4f301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c3b67348d9d6860051a04ee24e284414fa49a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c3b67348d9d6860051a04ee24e284414fa49a6", "html_url": "https://github.com/rust-lang/rust/commit/d6c3b67348d9d6860051a04ee24e284414fa49a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c3b67348d9d6860051a04ee24e284414fa49a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb48cc1e607a7189c80c1d0f3f5567312bf1a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb48cc1e607a7189c80c1d0f3f5567312bf1a99", "html_url": "https://github.com/rust-lang/rust/commit/8bb48cc1e607a7189c80c1d0f3f5567312bf1a99"}, {"sha": "d379ff474fac357f599d111f364449f2a6aaf3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d379ff474fac357f599d111f364449f2a6aaf3cb", "html_url": "https://github.com/rust-lang/rust/commit/d379ff474fac357f599d111f364449f2a6aaf3cb"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "74fcccc70e5975455d2ce24aaaaba0b0ce571653", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d6c3b67348d9d6860051a04ee24e284414fa49a6/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c3b67348d9d6860051a04ee24e284414fa49a6/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=d6c3b67348d9d6860051a04ee24e284414fa49a6", "patch": "@@ -13,16 +13,34 @@\n  *\n  * An executing Rust program consists of a tree of tasks, each with their own\n  * stack, and sole ownership of their allocated heap data. Tasks communicate\n- * with each other using ports and channels.\n+ * with each other using ports and channels (see std::rt::comm for more info\n+ * about how communication works).\n  *\n- * When a task fails, that failure will propagate to its parent (the task\n- * that spawned it) and the parent will fail as well. The reverse is not\n- * true: when a parent task fails its children will continue executing. When\n- * the root (main) task fails, all tasks fail, and then so does the entire\n- * process.\n+ * Tasks can be spawned in 3 different modes.\n  *\n- * Tasks may execute in parallel and are scheduled automatically by the\n- * runtime.\n+ *  * Bidirectionally linked: This is the default mode and it's what ```spawn``` does.\n+ *  Failures will be propagated from parent to child and vice versa.\n+ *\n+ *  * Unidirectionally linked (parent->child): This type of task can be created with\n+ *  ```spawn_supervised```. In this case, failures are propagated from parent to child\n+ *  but not the other way around.\n+ *\n+ *  * Unlinked: Tasks can be completely unlinked. These tasks can be created by using\n+ *  ```spawn_unlinked```. In this case failures are not propagated at all.\n+ *\n+ * Tasks' failure modes can be further configured. For instance, parent tasks can (un)watch\n+ * children failures. Please, refer to TaskBuilder's documentation bellow for more information.\n+ *\n+ * When a (bi|uni)directionally linked task fails, its failure will be propagated to all tasks\n+ * linked to it, this will cause such tasks to fail by a `linked failure`.\n+ *\n+ * Task Scheduling:\n+ *\n+ * By default, every task is created in the same scheduler as its parent, where it\n+ * is scheduled cooperatively with all other tasks in that scheduler. Some specialized\n+ * applications may want more control over their scheduling, in which case they can be\n+ * spawned into a new scheduler with the specific properties required. See TaskBuilder's\n+ * documentation bellow for more information.\n  *\n  * # Example\n  *\n@@ -120,17 +138,9 @@ pub struct SchedOpts {\n  * * name - A name for the task-to-be, for identification in failure messages.\n  *\n  * * sched - Specify the configuration of a new scheduler to create the task\n- *           in\n- *\n- *     By default, every task is created in the same scheduler as its\n- *     parent, where it is scheduled cooperatively with all other tasks\n- *     in that scheduler. Some specialized applications may want more\n- *     control over their scheduling, in which case they can be spawned\n- *     into a new scheduler with the specific properties required.\n- *\n- *     This is of particular importance for libraries which want to call\n- *     into foreign code that blocks. Without doing so in a different\n- *     scheduler other tasks will be impeded or even blocked indefinitely.\n+ *           in. This is of particular importance for libraries which want to call\n+ *           into foreign code that blocks. Without doing so in a different\n+ *           scheduler other tasks will be impeded or even blocked indefinitely.\n  */\n pub struct TaskOpts {\n     linked: bool,"}]}