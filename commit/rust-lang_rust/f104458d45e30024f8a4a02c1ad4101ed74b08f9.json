{"sha": "f104458d45e30024f8a4a02c1ad4101ed74b08f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMDQ0NThkNDVlMzAwMjRmOGE0YTAyYzFhZDQxMDFlZDc0YjA4Zjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T17:50:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T17:50:37Z"}, "message": "parameter parsing does not destroy blocks", "tree": {"sha": "4317dc4c504a90ea0876c862b049eee6d6513e98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4317dc4c504a90ea0876c862b049eee6d6513e98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f104458d45e30024f8a4a02c1ad4101ed74b08f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f104458d45e30024f8a4a02c1ad4101ed74b08f9", "html_url": "https://github.com/rust-lang/rust/commit/f104458d45e30024f8a4a02c1ad4101ed74b08f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f104458d45e30024f8a4a02c1ad4101ed74b08f9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0aac1ca98280efee9587897d86ef447933004dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aac1ca98280efee9587897d86ef447933004dd", "html_url": "https://github.com/rust-lang/rust/commit/b0aac1ca98280efee9587897d86ef447933004dd"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "b0e270426e465bb5521efa7451fc71058e5adf66", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -13,7 +13,7 @@ use super::*;\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n // }\n-const LITERAL_FIRST: TokenSet =\n+pub(crate) const LITERAL_FIRST: TokenSet =\n     token_set![TRUE_KW, FALSE_KW, INT_NUMBER, FLOAT_NUMBER, BYTE, CHAR,\n                STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n "}, {"sha": "59a0564d9f6e7f6f8fd5ab3ad601558de83e4d91", "filename": "crates/libsyntax2/src/grammar/expressions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fmod.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -1,7 +1,7 @@\n mod atom;\n \n use super::*;\n-pub(super) use self::atom::literal;\n+pub(super) use self::atom::{literal, LITERAL_FIRST};\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n "}, {"sha": "206c852802af47865685aba65c2b722f543bd946", "filename": "crates/libsyntax2/src/grammar/items/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -250,8 +250,10 @@ fn function(p: &mut Parser, flavor: ItemFlavor) {\n \n     // test fn_decl\n     // trait T { fn foo(); }\n-    if !p.eat(SEMI) {\n+    if p.at(L_CURLY) {\n         expressions::block(p);\n+    } else {\n+        p.expect(SEMI);\n     }\n }\n "}, {"sha": "bc0cb44ba72e83dd4651ac3b5acbf0a3ab26b83c", "filename": "crates/libsyntax2/src/grammar/params.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fparams.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -48,6 +48,10 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n         opt_self_param(p);\n     }\n     while !p.at(EOF) && !p.at(ket) {\n+        if !VALUE_PARAMETER_FIRST.contains(p.current()) {\n+            p.error(\"expected value parameter\");\n+            break;\n+        }\n         value_parameter(p, flavor);\n         if !p.at(ket) {\n             p.expect(COMMA);\n@@ -57,6 +61,13 @@ fn list_(p: &mut Parser, flavor: Flavor) {\n     m.complete(p, PARAM_LIST);\n }\n \n+\n+const VALUE_PARAMETER_FIRST: TokenSet =\n+    token_set_union![\n+        patterns::PATTERN_FIRST,\n+        types::TYPE_FIRST,\n+    ];\n+\n fn value_parameter(p: &mut Parser, flavor: Flavor) {\n     let m = p.start();\n     match flavor {"}, {"sha": "7c9fb8be2c11b65aaf2825640b05f4f40b3f5777", "filename": "crates/libsyntax2/src/grammar/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpaths.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -1,5 +1,8 @@\n use super::*;\n \n+pub(super) const PATH_FIRST: TokenSet =\n+    token_set![IDENT, SELF_KW, SUPER_KW, COLONCOLON, L_ANGLE];\n+\n pub(super) fn is_path_start(p: &Parser) -> bool {\n     match p.current() {\n         IDENT | SELF_KW | SUPER_KW | COLONCOLON => true,"}, {"sha": "11852e0d305ff4f16f6f6af22d7aac0905d37e39", "filename": "crates/libsyntax2/src/grammar/patterns.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -1,5 +1,12 @@\n use super::*;\n \n+pub(super) const PATTERN_FIRST: TokenSet =\n+    token_set_union![\n+        token_set![REF_KW, MUT_KW, L_PAREN, L_BRACK, AMP],\n+        expressions::LITERAL_FIRST,\n+        paths::PATH_FIRST,\n+    ];\n+\n pub(super) fn pattern(p: &mut Parser) {\n     if let Some(lhs) = atom_pat(p) {\n         // test range_pat"}, {"sha": "89030e66cc84692e5efbdf8640b7b9090a372fc7", "filename": "crates/libsyntax2/src/grammar/types.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Ftypes.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -1,5 +1,13 @@\n use super::*;\n \n+pub(super) const TYPE_FIRST: TokenSet =\n+    token_set_union![\n+        token_set![\n+            L_PAREN, EXCL, STAR, L_BRACK, AMP, UNDERSCORE, FN_KW, UNSAFE_KW, EXTERN_KW, FOR_KW, IMPL_KW, DYN_KW, L_ANGLE,\n+        ],\n+        paths::PATH_FIRST,\n+    ];\n+\n pub(super) fn type_(p: &mut Parser) {\n     match p.current() {\n         L_PAREN => paren_or_tuple_type(p),"}, {"sha": "9f9f3ab3a37e791299996d470fbc91e5504789fd", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -58,6 +58,10 @@ pub fn parse(text: &str) -> SyntaxNode {\n     res\n }\n \n+#[cfg(not(debug_assertions))]\n+fn validate_block_structure(_: SyntaxNodeRef) {}\n+\n+#[cfg(debug_assertions)]\n fn validate_block_structure(root: SyntaxNodeRef) {\n     let mut stack = Vec::new();\n     for node in algo::walk::preorder(root) {\n@@ -67,7 +71,12 @@ fn validate_block_structure(root: SyntaxNodeRef) {\n             }\n             SyntaxKind::R_CURLY => {\n                 if let Some(pair) = stack.pop() {\n-                    assert_eq!(node.parent(), pair.parent());\n+                    assert_eq!(\n+                        node.parent(),\n+                        pair.parent(),\n+                        \"unpaired curleys:\\n{}\",\n+                        utils::dump_tree(root),\n+                    );\n                     assert!(\n                         node.next_sibling().is_none() && pair.prev_sibling().is_none(),\n                         \"floating curlys at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\","}, {"sha": "156e70251a1095aa264a45fad9040afc7b152e3e", "filename": "crates/libsyntax2/tests/data/parser/err/0015_curly_in_params.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.rs?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -0,0 +1,2 @@\n+fn foo(}) {\n+}"}, {"sha": "84137979742f7990ac0adc63c693bf094a0d42dd", "filename": "crates/libsyntax2/tests/data/parser/err/0015_curly_in_params.txt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f104458d45e30024f8a4a02c1ad4101ed74b08f9/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt?ref=f104458d45e30024f8a4a02c1ad4101ed74b08f9", "patch": "@@ -0,0 +1,24 @@\n+FILE@[0; 14)\n+  FN_DEF@[0; 7)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 7)\n+      L_PAREN@[6; 7)\n+      err: `expected value parameter`\n+      err: `expected R_PAREN`\n+      err: `expected SEMI`\n+      err: `expected an item`\n+  ERROR@[7; 8)\n+    R_CURLY@[7; 8)\n+    err: `expected an item`\n+  ERROR@[8; 9)\n+    R_PAREN@[8; 9)\n+  WHITESPACE@[9; 10)\n+  err: `expected an item`\n+  ERROR@[10; 13)\n+    L_CURLY@[10; 11)\n+    WHITESPACE@[11; 12)\n+    R_CURLY@[12; 13)\n+  WHITESPACE@[13; 14)"}]}