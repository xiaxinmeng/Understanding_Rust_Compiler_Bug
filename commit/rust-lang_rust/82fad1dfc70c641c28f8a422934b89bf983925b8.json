{"sha": "82fad1dfc70c641c28f8a422934b89bf983925b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZmFkMWRmYzcwYzY0MWMyOGY4YTQyMjkzNGI4OWJmOTgzOTI1Yjg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-08T13:03:02Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:54Z"}, "message": "mir: Call set_operand_dropped in more places, specifically Unsize casts.", "tree": {"sha": "b569437ac5b9536efca849c37785cbef38019b01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b569437ac5b9536efca849c37785cbef38019b01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82fad1dfc70c641c28f8a422934b89bf983925b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82fad1dfc70c641c28f8a422934b89bf983925b8", "html_url": "https://github.com/rust-lang/rust/commit/82fad1dfc70c641c28f8a422934b89bf983925b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82fad1dfc70c641c28f8a422934b89bf983925b8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e98220a1cc9059807961472a9132157cdf3c047", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e98220a1cc9059807961472a9132157cdf3c047", "html_url": "https://github.com/rust-lang/rust/commit/3e98220a1cc9059807961472a9132157cdf3c047"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "e31083f05e1f76033ff42c1eed5805041b085471", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82fad1dfc70c641c28f8a422934b89bf983925b8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fad1dfc70c641c28f8a422934b89bf983925b8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=82fad1dfc70c641c28f8a422934b89bf983925b8", "patch": "@@ -54,7 +54,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                bcx\n            }\n \n-            mir::Rvalue::Cast(mir::CastKind::Unsize, ref operand, cast_ty) => {\n+            mir::Rvalue::Cast(mir::CastKind::Unsize, ref source, cast_ty) => {\n                 if common::type_is_fat_ptr(bcx.tcx(), cast_ty) {\n                     // into-coerce of a thin pointer to a fat pointer - just\n                     // use the operand path.\n@@ -67,7 +67,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 // this to be eliminated by MIR translation, but\n                 // `CoerceUnsized` can be passed by a where-clause,\n                 // so the (generic) MIR may not be able to expand it.\n-                let operand = self.trans_operand(&bcx, operand);\n+                let operand = self.trans_operand(&bcx, source);\n                 bcx.with_block(|bcx| {\n                     match operand.val {\n                         OperandValue::FatPtr(..) => unreachable!(),\n@@ -92,6 +92,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         }\n                     }\n                 });\n+                self.set_operand_dropped(&bcx, source);\n                 bcx\n             }\n \n@@ -127,8 +128,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                     adt::trans_field_ptr(bcx, &repr, val, disr, i)\n                                 });\n                                 self.store_operand(&bcx, lldest_i, op);\n-                                self.set_operand_dropped(&bcx, operand);\n                             }\n+                            self.set_operand_dropped(&bcx, operand);\n                         }\n                     },\n                     _ => {\n@@ -166,8 +167,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 // not be structs but arrays.\n                                 let dest = bcx.gepi(dest.llval, &[0, i]);\n                                 self.store_operand(&bcx, dest, op);\n-                                self.set_operand_dropped(&bcx, operand);\n                             }\n+                            self.set_operand_dropped(&bcx, operand);\n                         }\n                     }\n                 }\n@@ -216,8 +217,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         assert!(rvalue_creates_operand(rvalue), \"cannot trans {:?} to operand\", rvalue);\n \n         match *rvalue {\n-            mir::Rvalue::Cast(ref kind, ref operand, cast_ty) => {\n-                let operand = self.trans_operand(&bcx, operand);\n+            mir::Rvalue::Cast(ref kind, ref source, cast_ty) => {\n+                let operand = self.trans_operand(&bcx, source);\n                 debug!(\"cast operand is {:?}\", operand);\n                 let cast_ty = bcx.monomorphize(&cast_ty);\n \n@@ -250,6 +251,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 // example,\n                                 //   &'a fmt::Debug+Send => &'a fmt::Debug,\n                                 // and is a no-op at the LLVM level\n+                                self.set_operand_dropped(&bcx, source);\n                                 operand.val\n                             }\n                             OperandValue::Immediate(lldata) => {\n@@ -258,6 +260,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                     base::unsize_thin_ptr(bcx, lldata,\n                                                           operand.ty, cast_ty)\n                                 });\n+                                self.set_operand_dropped(&bcx, source);\n                                 OperandValue::FatPtr(lldata, llextra)\n                             }\n                             OperandValue::Ref(_) => {"}]}