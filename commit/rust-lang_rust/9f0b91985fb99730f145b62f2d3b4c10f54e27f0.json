{"sha": "9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMGI5MTk4NWZiOTk3MzBmMTQ1YjYyZjJkM2I0YzEwZjU0ZTI3ZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-01T05:41:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-01T05:41:05Z"}, "message": "auto merge of #16130 : apoelstra/rust/decode-error, r=alexcrichton\n\nA quick and dirty fix for #15036 until we get serious decoder reform.\r\n\r\nRight now it is impossible for a `Decodable` to signal a decode error, for example if it has only finitely many allowed values, is a string which must be encoded a certain way, needs a valid checksum, etc. For example in the `libuuid` implementation of `Decodable` an `Option` is unwrapped, meaning that a decode of a malformed UUID will cause the task to fail.", "tree": {"sha": "25ecb89241b9081954eb2ea6e79d058650c25cfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ecb89241b9081954eb2ea6e79d058650c25cfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "html_url": "https://github.com/rust-lang/rust/commit/9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b495933a7fdc5e7b28ddbb058d1e2dab330ace7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b495933a7fdc5e7b28ddbb058d1e2dab330ace7b", "html_url": "https://github.com/rust-lang/rust/commit/b495933a7fdc5e7b28ddbb058d1e2dab330ace7b"}, {"sha": "dac9a1c5207cb33a0b40813896b74d00bbbd1d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac9a1c5207cb33a0b40813896b74d00bbbd1d36", "html_url": "https://github.com/rust-lang/rust/commit/dac9a1c5207cb33a0b40813896b74d00bbbd1d36"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "4927a8293a4da327c47b279c27bae98beafb13da", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "patch": "@@ -105,7 +105,8 @@ pub enum EbmlEncoderTag {\n pub enum Error {\n     IntTooBig(uint),\n     Expected(String),\n-    IoError(std::io::IoError)\n+    IoError(std::io::IoError),\n+    ApplicationError(String)\n }\n // --------------------------------------\n \n@@ -119,11 +120,11 @@ pub mod reader {\n \n     use serialize;\n \n-    use super::{ EsVec, EsMap, EsEnum, EsVecLen, EsVecElt, EsMapLen, EsMapKey,\n-        EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64, EsI32, EsI16, EsI8,\n-        EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal, EsEnumBody, EsUint,\n-        EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc, Error, IntTooBig,\n-        Expected };\n+    use super::{ ApplicationError, EsVec, EsMap, EsEnum, EsVecLen, EsVecElt,\n+        EsMapLen, EsMapKey, EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64,\n+        EsI32, EsI16, EsI8, EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal,\n+        EsEnumBody, EsUint, EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc,\n+        Error, IntTooBig, Expected };\n \n     pub type DecodeResult<T> = Result<T, Error>;\n     // rbml reading\n@@ -636,6 +637,10 @@ pub mod reader {\n             debug!(\"read_map_elt_val(idx={})\", idx);\n             self.push_doc(EsMapVal, f)\n         }\n+\n+        fn error(&mut self, err: &str) -> Error {\n+            ApplicationError(err.to_string())\n+        }\n     }\n }\n "}, {"sha": "58d69e38cc6e0fd5d4a96d241a87f21f0627ea7d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "patch": "@@ -257,6 +257,7 @@ pub enum DecoderError {\n     ExpectedError(String, String),\n     MissingFieldError(String),\n     UnknownVariantError(String),\n+    ApplicationError(String)\n }\n \n /// Returns a readable error string for a given error code.\n@@ -2071,6 +2072,10 @@ impl ::Decoder<DecoderError> for Decoder {\n         debug!(\"read_map_elt_val(idx={})\", idx);\n         f(self)\n     }\n+\n+    fn error(&mut self, err: &str) -> DecoderError {\n+        ApplicationError(err.to_string())\n+    }\n }\n \n /// A trait for converting values to JSON"}, {"sha": "95c677bcbd727976ad46e697bfe8f09d4d8d9ce3", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "patch": "@@ -163,6 +163,9 @@ pub trait Decoder<E> {\n     fn read_map<T>(&mut self, f: |&mut Self, uint| -> Result<T, E>) -> Result<T, E>;\n     fn read_map_elt_key<T>(&mut self, idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;\n     fn read_map_elt_val<T>(&mut self, idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;\n+\n+    // Failure\n+    fn error(&mut self, err: &str) -> E;\n }\n \n pub trait Encodable<S:Encoder<E>, E> {"}, {"sha": "d922dde6f85372c6e5d92c13305b10555ec51bf4", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0b91985fb99730f145b62f2d3b4c10f54e27f0/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=9f0b91985fb99730f145b62f2d3b4c10f54e27f0", "patch": "@@ -501,7 +501,10 @@ impl<T: Encoder<E>, E> Encodable<T, E> for Uuid {\n impl<T: Decoder<E>, E> Decodable<T, E> for Uuid {\n     /// Decode a UUID from a string\n     fn decode(d: &mut T) -> Result<Uuid, E> {\n-        Ok(from_str(try!(d.read_str()).as_slice()).unwrap())\n+        match from_str(try!(d.read_str()).as_slice()) {\n+            Some(decode) => Ok(decode),\n+            None => Err(d.error(\"Unable to decode UUID\"))\n+        }\n     }\n }\n \n@@ -802,6 +805,23 @@ mod test {\n         assert_eq!(u, u2);\n     }\n \n+    #[test]\n+    fn test_bad_decode() {\n+        use serialize::json;\n+        use serialize::{Encodable, Decodable};\n+\n+        let js_good = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7a8\".to_string());\n+        let js_bad1 = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7ah\".to_string());\n+        let js_bad2 = json::String(\"a1a2a3a4a5a6a7a8a1a2a3a4a5a6a7a\".to_string());\n+\n+        let u_good: Result<Uuid, _> = Decodable::decode(&mut json::Decoder::new(js_good));\n+        let u_bad1: Result<Uuid, _> = Decodable::decode(&mut json::Decoder::new(js_bad1));\n+        let u_bad2: Result<Uuid, _> = Decodable::decode(&mut json::Decoder::new(js_bad2));\n+        assert!(u_good.is_ok());\n+        assert!(u_bad1.is_err());\n+        assert!(u_bad2.is_err());\n+    }\n+\n     #[test]\n     fn test_iterbytes_impl_for_uuid() {\n         use std::collections::HashSet;"}]}