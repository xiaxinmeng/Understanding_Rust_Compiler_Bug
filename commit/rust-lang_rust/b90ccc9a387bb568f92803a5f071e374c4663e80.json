{"sha": "b90ccc9a387bb568f92803a5f071e374c4663e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MGNjYzlhMzg3YmI1NjhmOTI4MDNhNWYwNzFlMzc0YzQ2NjNlODA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-16T18:36:09Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:52Z"}, "message": "librustc: minor cleanup", "tree": {"sha": "37c6c369c2faa01f990d97753d06529bc5bab7b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c6c369c2faa01f990d97753d06529bc5bab7b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90ccc9a387bb568f92803a5f071e374c4663e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90ccc9a387bb568f92803a5f071e374c4663e80", "html_url": "https://github.com/rust-lang/rust/commit/b90ccc9a387bb568f92803a5f071e374c4663e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90ccc9a387bb568f92803a5f071e374c4663e80/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae86c03af261fd116d53f98766fb3700435b0bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae86c03af261fd116d53f98766fb3700435b0bc1", "html_url": "https://github.com/rust-lang/rust/commit/ae86c03af261fd116d53f98766fb3700435b0bc1"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "2ddb2749b94c4120b0550dc2fdddc8f767aee09c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b90ccc9a387bb568f92803a5f071e374c4663e80", "patch": "@@ -134,39 +134,47 @@ pub fn raw_pat(p: @pat) -> @pat {\n pub fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n     assert(!pats.is_empty());\n     let ext = match is_useful(cx, vec::map(pats, |p| ~[*p]), ~[wild()]) {\n-      not_useful => return, // This is good, wildcard pattern isn't reachable\n-      useful_ => None,\n-      useful(ty, ref ctor) => {\n-        match ty::get(ty).sty {\n-          ty::ty_bool => {\n-            match (*ctor) {\n-              val(const_bool(true)) => Some(~\"true\"),\n-              val(const_bool(false)) => Some(~\"false\"),\n-              _ => None\n-            }\n-          }\n-          ty::ty_enum(id, _) => {\n-              let vid = match (*ctor) { variant(id) => id,\n-              _ => fail!(~\"check_exhaustive: non-variant ctor\") };\n-            match vec::find(*ty::enum_variants(cx.tcx, id),\n-                                |v| v.id == vid) {\n-                Some(v) => Some(cx.tcx.sess.str_of(v.name)),\n-              None => fail!(~\"check_exhaustive: bad variant in ctor\")\n-            }\n-          }\n-          ty::ty_unboxed_vec(*) | ty::ty_evec(*) => {\n-            match (*ctor) {\n-              vec(n) => Some(fmt!(\"vectors of length %u\", n)),\n-              _ => None\n+        not_useful => {\n+            // This is good, wildcard pattern isn't reachable\n+            return;\n+        }\n+        useful_ => None,\n+        useful(ty, ref ctor) => {\n+            match ty::get(ty).sty {\n+                ty::ty_bool => {\n+                    match (*ctor) {\n+                        val(const_bool(true)) => Some(~\"true\"),\n+                        val(const_bool(false)) => Some(~\"false\"),\n+                        _ => None\n+                    }\n+                }\n+                ty::ty_enum(id, _) => {\n+                    let vid = match (*ctor) {\n+                        variant(id) => id,\n+                        _ => fail!(~\"check_exhaustive: non-variant ctor\"),\n+                    };\n+                    let variants = ty::enum_variants(cx.tcx, id);\n+\n+                    match variants.find(|v| v.id == vid) {\n+                        Some(v) => Some(cx.tcx.sess.str_of(v.name)),\n+                        None => {\n+                            fail!(~\"check_exhaustive: bad variant in ctor\")\n+                        }\n+                    }\n+                }\n+                ty::ty_unboxed_vec(*) | ty::ty_evec(*) => {\n+                    match (*ctor) {\n+                        vec(n) => Some(fmt!(\"vectors of length %u\", n)),\n+                    _ => None\n+                    }\n+                }\n+                _ => None\n             }\n-          }\n-          _ => None\n         }\n-      }\n     };\n     let msg = ~\"non-exhaustive patterns\" + match ext {\n-      Some(ref s) => ~\": \" + (*s) + ~\" not covered\",\n-      None => ~\"\"\n+        Some(ref s) => ~\": \" + (*s) + ~\" not covered\",\n+        None => ~\"\"\n     };\n     cx.tcx.sess.span_err(sp, msg);\n }"}, {"sha": "70eb937678e2c6e7028d6feef7e9b79bd2424b34", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=b90ccc9a387bb568f92803a5f071e374c4663e80", "patch": "@@ -866,18 +866,18 @@ fn check_item_non_camel_case_types(cx: ty::ctxt, it: @ast::item) {\n     }\n \n     match it.node {\n-      ast::item_ty(*) | ast::item_struct(*) |\n-      ast::item_trait(*) => {\n-        check_case(cx, it.ident, it.id, it.id, it.span)\n-      }\n-      ast::item_enum(ref enum_definition, _) => {\n-        check_case(cx, it.ident, it.id, it.id, it.span);\n-        for enum_definition.variants.each |variant| {\n-            check_case(cx, variant.node.name,\n-                       variant.node.id, it.id, variant.span);\n+        ast::item_ty(*) | ast::item_struct(*) |\n+        ast::item_trait(*) => {\n+            check_case(cx, it.ident, it.id, it.id, it.span)\n         }\n-      }\n-      _ => ()\n+        ast::item_enum(ref enum_definition, _) => {\n+            check_case(cx, it.ident, it.id, it.id, it.span);\n+            for enum_definition.variants.each |variant| {\n+                check_case(cx, variant.node.name,\n+                           variant.node.id, it.id, variant.span);\n+            }\n+        }\n+        _ => ()\n     }\n }\n "}, {"sha": "03b059cbe4ea691fa4a6ab754c1de9118f1d97b5", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b90ccc9a387bb568f92803a5f071e374c4663e80", "patch": "@@ -1141,15 +1141,15 @@ pub fn C_u8(i: uint) -> ValueRef {\n \n // This is a 'c-like' raw string, which differs from\n // our boxed-and-length-annotated strings.\n-pub fn C_cstr(cx: @crate_ctxt, +s: ~str) -> ValueRef {\n+pub fn C_cstr(cx: @crate_ctxt, s: ~str) -> ValueRef {\n     unsafe {\n         match cx.const_cstr_cache.find(&s) {\n-          Some(llval) => return llval,\n-          None => ()\n+            Some(llval) => return llval,\n+            None => ()\n         }\n \n         let sc = do str::as_c_str(s) |buf| {\n-            llvm::LLVMConstString(buf, str::len(s) as c_uint, False)\n+            llvm::LLVMConstString(buf, s.len() as c_uint, False)\n         };\n         let g =\n             str::as_c_str(fmt!(\"str%u\", (cx.names)(~\"str\").repr),"}, {"sha": "325c286458843e0f66c830dfcbaa75fbbae78468", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90ccc9a387bb568f92803a5f071e374c4663e80/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=b90ccc9a387bb568f92803a5f071e374c4663e80", "patch": "@@ -45,7 +45,7 @@ pub impl Reflector {\n         C_int(self.bcx.ccx(), i)\n     }\n \n-    fn c_slice(&mut self, +s: ~str) -> ValueRef {\n+    fn c_slice(&mut self, s: &str) -> ValueRef {\n         // We're careful to not use first class aggregates here because that\n         // will kick us off fast isel. (Issue #4352.)\n         let bcx = self.bcx;"}]}