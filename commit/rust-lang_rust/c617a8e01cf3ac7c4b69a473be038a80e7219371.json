{"sha": "c617a8e01cf3ac7c4b69a473be038a80e7219371", "node_id": "C_kwDOAAsO6NoAKGM2MTdhOGUwMWNmM2FjN2M0YjY5YTQ3M2JlMDM4YTgwZTcyMTkzNzE", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-28T17:06:11Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-28T17:52:36Z"}, "message": "Rename `Rptr` to `Ref` in AST and HIR\n\nThe name makes a lot more sense, and `ty::TyKind` calls it `Ref` already\nas well.", "tree": {"sha": "0c852a41af0d60b8b1ac6789c60422554bf9e954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c852a41af0d60b8b1ac6789c60422554bf9e954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c617a8e01cf3ac7c4b69a473be038a80e7219371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c617a8e01cf3ac7c4b69a473be038a80e7219371", "html_url": "https://github.com/rust-lang/rust/commit/c617a8e01cf3ac7c4b69a473be038a80e7219371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c617a8e01cf3ac7c4b69a473be038a80e7219371/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24444945ec96dbe0dd593ed5bda57d22464a7106", "url": "https://api.github.com/repos/rust-lang/rust/commits/24444945ec96dbe0dd593ed5bda57d22464a7106", "html_url": "https://github.com/rust-lang/rust/commit/24444945ec96dbe0dd593ed5bda57d22464a7106"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "05f2b92c037093affa39e21fe5ac1dc058528cb6", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -969,14 +969,14 @@ fn binding_ty_auto_deref_stability<'tcx>(\n     precedence: i8,\n     binder_args: &'tcx List<BoundVariableKind>,\n ) -> Position {\n-    let TyKind::Rptr(_, ty) = &ty.kind else {\n+    let TyKind::Ref(_, ty) = &ty.kind else {\n         return Position::Other(precedence);\n     };\n     let mut ty = ty;\n \n     loop {\n         break match ty.ty.kind {\n-            TyKind::Rptr(_, ref ref_ty) => {\n+            TyKind::Ref(_, ref ref_ty) => {\n                 ty = ref_ty;\n                 continue;\n             },"}, {"sha": "676a37e04f60269aeb16352f9e1818d70fe28975", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -152,7 +152,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n     let input_lifetimes: Vec<LifetimeName> = inputs\n         .iter()\n         .filter_map(|ty| {\n-            if let TyKind::Rptr(lt, _) = ty.kind {\n+            if let TyKind::Ref(lt, _) = ty.kind {\n                 Some(lt.res)\n             } else {\n                 None"}, {"sha": "77be61b4793403d2a9ba489df6daab12103b8841", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -3986,7 +3986,7 @@ impl OutType {\n             (Self::Unit, &hir::FnRetTy::Return(ty)) if is_unit(ty) => true,\n             (Self::Bool, &hir::FnRetTy::Return(ty)) if is_bool(ty) => true,\n             (Self::Any, &hir::FnRetTy::Return(ty)) if !is_unit(ty) => true,\n-            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Rptr(_, _)),\n+            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Ref(_, _)),\n             _ => false,\n         }\n     }"}, {"sha": "64d8333a093b1143047981a19414a00cb4c33dd5", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -86,15 +86,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        if let hir::TyKind::Rptr(\n+        if let hir::TyKind::Ref(\n             _,\n             hir::MutTy {\n                 ty: pty,\n                 mutbl: hir::Mutability::Mut,\n             },\n         ) = ty.kind\n         {\n-            if let hir::TyKind::Rptr(\n+            if let hir::TyKind::Ref(\n                 _,\n                 hir::MutTy {\n                     mutbl: hir::Mutability::Mut,"}, {"sha": "5457eeec4eacf249c2b1fef96d88f3e7a62da831", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -124,7 +124,7 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n                     check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl);\n                 }\n             },\n-            TyKind::Rptr(lifetime, mut_ty) => {\n+            TyKind::Ref(lifetime, mut_ty) => {\n                 if_chain! {\n                 if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n                 if let PatKind::Ident(BindingAnnotation::NONE, _, _) = p.pat.kind;"}, {"sha": "75add4ee4aadedb8747a09ff1f45c434b6c4782d", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> PassByRefOrValue {\n                     if is_copy(cx, ty)\n                         && let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes())\n                         && size <= self.ref_min_size\n-                        && let hir::TyKind::Rptr(_, MutTy { ty: decl_ty, .. }) = input.kind\n+                        && let hir::TyKind::Ref(_, MutTy { ty: decl_ty, .. }) = input.kind\n                     {\n                         if let Some(typeck) = cx.maybe_typeck_results() {\n                             // Don't lint if an unsafe pointer is created."}, {"sha": "262953042581ab5269cb97221a946830c14059ef", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -421,7 +421,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 if let ty::Ref(_, ty, mutability) = *ty.kind();\n                 if let ty::Adt(adt, substs) = *ty.kind();\n \n-                if let TyKind::Rptr(lt, ref ty) = hir_ty.kind;\n+                if let TyKind::Ref(lt, ref ty) = hir_ty.kind;\n                 if let TyKind::Path(QPath::Resolved(None, path)) = ty.ty.kind;\n \n                 // Check that the name as typed matches the actual name of the type.\n@@ -503,14 +503,14 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n \n fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Option<&'tcx Body<'_>>) {\n     if let FnRetTy::Return(ty) = sig.decl.output\n-        && let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty)\n+        && let Some((out, Mutability::Mut, _)) = get_ref_lm(ty)\n     {\n         let out_region = cx.tcx.named_region(out.hir_id);\n         let args: Option<Vec<_>> = sig\n             .decl\n             .inputs\n             .iter()\n-            .filter_map(get_rptr_lm)\n+            .filter_map(get_ref_lm)\n             .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n             .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n@@ -704,8 +704,8 @@ fn matches_preds<'tcx>(\n     })\n }\n \n-fn get_rptr_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n-    if let TyKind::Rptr(lt, ref m) = ty.kind {\n+fn get_ref_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n+    if let TyKind::Ref(lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))\n     } else {\n         None"}, {"sha": "44bf824aa0e2d432688e90827af89090640484dc", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -59,7 +59,7 @@ impl RedundantStaticLifetimes {\n                 }\n             },\n             // This is what we are looking for !\n-            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n+            TyKind::Ref(ref optional_lifetime, ref borrow_type) => {\n                 // Match the 'static lifetime\n                 if let Some(lifetime) = *optional_lifetime {\n                     match borrow_type.ty.kind {"}, {"sha": "448a32b77c036d92d2d5768db876c95c9317cbb6", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(RefOptionRef => [REF_OPTION_REF]);\n impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n     fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n         if_chain! {\n-            if let TyKind::Rptr(_, ref mut_ty) = ty.kind;\n+            if let TyKind::Ref(_, ref mut_ty) = ty.kind;\n             if mut_ty.mutbl == Mutability::Not;\n             if let TyKind::Path(ref qpath) = &mut_ty.ty.kind;\n             let last = last_path_segment(qpath);\n@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,\n             });\n-            if let TyKind::Rptr(_, ref inner_mut_ty) = inner_ty.kind;\n+            if let TyKind::Ref(_, ref inner_mut_ty) = inner_ty.kind;\n             if inner_mut_ty.mutbl == Mutability::Not;\n \n             then {"}, {"sha": "54ac04df1c12ab9bc96a5f1e8edf7aeb80ff60b5", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -71,7 +71,7 @@ pub(super) fn check<'tcx>(\n /// Gets the type `Bar` in `\u2026::transmute<Foo, &Bar>`.\n fn get_explicit_type<'tcx>(path: &'tcx Path<'tcx>) -> Option<&'tcx hir::Ty<'tcx>> {\n     if let GenericArg::Type(ty) = path.segments.last()?.args?.args.get(1)?\n-        && let TyKind::Rptr(_, ty) = &ty.kind\n+        && let TyKind::Ref(_, ty) = &ty.kind\n     {\n         Some(ty.ty)\n     } else {"}, {"sha": "c14f056a1f2de181d41e47a99bdcbc2c09338ac1", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -539,7 +539,7 @@ impl Types {\n                     QPath::LangItem(..) => {},\n                 }\n             },\n-            TyKind::Rptr(lt, ref mut_ty) => {\n+            TyKind::Ref(lt, ref mut_ty) => {\n                 context.is_nested_call = true;\n                 if !borrowed_box::check(cx, hir_ty, lt, mut_ty) {\n                     self.check_ty(cx, mut_ty.ty, context);"}, {"sha": "0aa50c99c16904abed7bfd0c3ddb278a11877264", "filename": "clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n-            TyKind::Infer | TyKind::Ptr(..) | TyKind::Rptr(..) => (1, 0),\n+            TyKind::Infer | TyKind::Ptr(..) | TyKind::Ref(..) => (1, 0),\n \n             // the \"normal\" components of a type: named types, arrays/tuples\n             TyKind::Path(..) | TyKind::Slice(..) | TyKind::Tup(..) | TyKind::Array(..) => (10 * self.nest, 1),"}, {"sha": "7f43b7841ff33d887668c2b321e686db081d9d76", "filename": "clippy_lints/src/types/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -13,7 +13,7 @@ pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>)\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,\n         });\n-        if let TyKind::Rptr(..) = ty.kind;\n+        if let TyKind::Ref(..) = ty.kind;\n         then {\n             return Some(ty.span);\n         }"}, {"sha": "4c3b1b131fd4caeea3f8d3951382f1a02defd374", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n }\n \n pub(super) fn is_lint_ref_type(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n-    if let TyKind::Rptr(\n+    if let TyKind::Ref(\n         _,\n         MutTy {\n             ty: inner,"}, {"sha": "9d0263e93be756939d9e7df6c36f50e7169f6d8e", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -625,7 +625,7 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n         (Slice(l), Slice(r)) => eq_ty(l, r),\n         (Array(le, ls), Array(re, rs)) => eq_ty(le, re) && eq_expr(&ls.value, &rs.value),\n         (Ptr(l), Ptr(r)) => l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty),\n-        (Rptr(ll, l), Rptr(rl, r)) => {\n+        (Ref(ll, l), Ref(rl, r)) => {\n             both(ll, rl, |l, r| eq_id(l.ident, r.ident)) && l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty)\n         },\n         (BareFn(l), BareFn(r)) => {"}, {"sha": "2bbe1a19b625a7e7eb19c77e88a8a8f2c8e566a5", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -430,7 +430,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => self.eq_ty(lt, rt) && self.eq_array_length(ll, rl),\n             (TyKind::Ptr(l_mut), TyKind::Ptr(r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(l_mut.ty, r_mut.ty),\n-            (TyKind::Rptr(_, l_rmut), TyKind::Rptr(_, r_rmut)) => {\n+            (TyKind::Ref(_, l_rmut), TyKind::Ref(_, r_rmut)) => {\n                 l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(l_rmut.ty, r_rmut.ty)\n             },\n             (TyKind::Path(l), TyKind::Path(r)) => self.eq_qpath(l, r),\n@@ -950,7 +950,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            TyKind::Rptr(lifetime, ref mut_ty) => {\n+            TyKind::Ref(lifetime, ref mut_ty) => {\n                 self.hash_lifetime(lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);"}, {"sha": "d863609b6a72688ac8cf171c38e9405edaa55a1a", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -2264,7 +2264,7 @@ pub fn peel_hir_ty_refs<'a>(mut ty: &'a hir::Ty<'a>) -> (&'a hir::Ty<'a>, usize)\n     let mut count = 0;\n     loop {\n         match &ty.kind {\n-            TyKind::Rptr(_, ref_ty) => {\n+            TyKind::Ref(_, ref_ty) => {\n                 ty = ref_ty.ty;\n                 count += 1;\n             },"}, {"sha": "a203a7afddf88bfef885aa6ba0f952c25414deda", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -813,9 +813,9 @@ pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Opti\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n-        let closure_arg_is_type_annotated_double_ref = if let TyKind::Rptr(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n+        let closure_arg_is_type_annotated_double_ref = if let TyKind::Ref(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n         {\n-            matches!(ty.kind, TyKind::Rptr(_, MutTy { .. }))\n+            matches!(ty.kind, TyKind::Ref(_, MutTy { .. }))\n         } else {\n             false\n         };"}, {"sha": "c8d56a3be5cf356ca7c3723dd8cb29fbed2fbf79", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c617a8e01cf3ac7c4b69a473be038a80e7219371/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=c617a8e01cf3ac7c4b69a473be038a80e7219371", "patch": "@@ -496,7 +496,7 @@ pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bo\n /// Returns the base type for HIR references and pointers.\n pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n     match ty.kind {\n-        TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n+        TyKind::Ptr(ref mut_ty) | TyKind::Ref(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n         _ => ty,\n     }\n }"}]}