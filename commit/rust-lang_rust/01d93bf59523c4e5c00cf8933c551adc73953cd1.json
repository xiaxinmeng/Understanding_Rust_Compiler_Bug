{"sha": "01d93bf59523c4e5c00cf8933c551adc73953cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDkzYmY1OTUyM2M0ZTVjMDBjZjg5MzNjNTUxYWRjNzM5NTNjZDE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-07-08T15:47:49Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-07-09T09:45:46Z"}, "message": "Split the SliceConcat trait into Concat and Join", "tree": {"sha": "836602dd50be9b22864f3dba302ff2c9f8f48467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836602dd50be9b22864f3dba302ff2c9f8f48467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d93bf59523c4e5c00cf8933c551adc73953cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d93bf59523c4e5c00cf8933c551adc73953cd1", "html_url": "https://github.com/rust-lang/rust/commit/01d93bf59523c4e5c00cf8933c551adc73953cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d93bf59523c4e5c00cf8933c551adc73953cd1/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5397dfce77f3b3d903580843af3da37615a44e74", "url": "https://api.github.com/repos/rust-lang/rust/commits/5397dfce77f3b3d903580843af3da37615a44e74", "html_url": "https://github.com/rust-lang/rust/commit/5397dfce77f3b3d903580843af3da37615a44e74"}], "stats": {"total": 91, "additions": 69, "deletions": 22}, "files": [{"sha": "d7a9f83ad242eed13776201fb0e0bc6d08d668a4", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 57, "deletions": 17, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/01d93bf59523c4e5c00cf8933c551adc73953cd1/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d93bf59523c4e5c00cf8933c551adc73953cd1/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=01d93bf59523c4e5c00cf8933c551adc73953cd1", "patch": "@@ -494,10 +494,10 @@ impl<T> [T] {\n     /// assert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn concat<Separator: ?Sized>(&self) -> T::Output\n-        where T: SliceConcat<Separator>\n+    pub fn concat<Item: ?Sized>(&self) -> <Self as Concat<Item>>::Output\n+        where Self: Concat<Item>\n     {\n-        SliceConcat::concat(self)\n+        Concat::concat(self)\n     }\n \n     /// Flattens a slice of `T` into a single value `Self::Output`, placing a\n@@ -510,10 +510,10 @@ impl<T> [T] {\n     /// assert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);\n     /// ```\n     #[stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")]\n-    pub fn join<Separator: ?Sized>(&self, sep: &Separator) -> T::Output\n-        where T: SliceConcat<Separator>\n+    pub fn join<Separator: ?Sized>(&self, sep: &Separator) -> <Self as Join<Separator>>::Output\n+        where Self: Join<Separator>\n     {\n-        SliceConcat::join(self, sep)\n+        Join::join(self, sep)\n     }\n \n     /// Flattens a slice of `T` into a single value `Self::Output`, placing a\n@@ -528,10 +528,10 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n-    pub fn connect<Separator: ?Sized>(&self, sep: &Separator) -> T::Output\n-        where T: SliceConcat<Separator>\n+    pub fn connect<Separator: ?Sized>(&self, sep: &Separator) -> <Self as Join<Separator>>::Output\n+        where Self: Join<Separator>\n     {\n-        SliceConcat::join(self, sep)\n+        Join::join(self, sep)\n     }\n \n }\n@@ -578,37 +578,77 @@ impl [u8] {\n // Extension traits for slices over specific kinds of data\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat)\n-/// and [`[T]::join`](../../std/primitive.slice.html#method.join)\n+/// Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat).\n+///\n+/// Note: the `Item` type parameter is not used in this trait,\n+/// but it allows impls to be more generic.\n+/// Without it, we get this error:\n+///\n+/// ```error\n+/// error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predica\n+///    --> src/liballoc/slice.rs:608:6\n+///     |\n+/// 608 | impl<T: Clone, V: Borrow<[T]>> Concat for [V] {\n+///     |      ^ unconstrained type parameter\n+/// ```\n+///\n+/// This is because there could exist `V` types with multiple `Borrow<[_]>` impls,\n+/// such that multiple `T` types would apply:\n+///\n+/// ```\n+/// # #[allow(dead_code)]\n+/// pub struct Foo(Vec<u32>, Vec<String>);\n+///\n+/// impl std::borrow::Borrow<[u32]> for Foo {\n+///     fn borrow(&self) -> &[u32] { &self.0 }\n+/// }\n+///\n+/// impl std::borrow::Borrow<[String]> for Foo {\n+///     fn borrow(&self) -> &[String] { &self.1 }\n+/// }\n+/// ```\n #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n-pub trait SliceConcat<Separator: ?Sized>: Sized {\n+pub trait Concat<Item: ?Sized> {\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n     /// The resulting type after concatenation\n     type Output;\n \n     /// Implementation of [`[T]::concat`](../../std/primitive.slice.html#method.concat)\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n-    fn concat(slice: &[Self]) -> Self::Output;\n+    fn concat(slice: &Self) -> Self::Output;\n+}\n+\n+/// Helper trait for [`[T]::join`](../../std/primitive.slice.html#method.join)\n+#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n+pub trait Join<Separator: ?Sized> {\n+    #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n+    /// The resulting type after concatenation\n+    type Output;\n \n     /// Implementation of [`[T]::join`](../../std/primitive.slice.html#method.join)\n     #[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]\n-    fn join(slice: &[Self], sep: &Separator) -> Self::Output;\n+    fn join(slice: &Self, sep: &Separator) -> Self::Output;\n }\n \n #[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]\n-impl<T: Clone, V: Borrow<[T]>> SliceConcat<T> for V {\n+impl<T: Clone, V: Borrow<[T]>> Concat<T> for [V] {\n     type Output = Vec<T>;\n \n-    fn concat(slice: &[Self]) -> Vec<T> {\n+    fn concat(slice: &Self) -> Vec<T> {\n         let size = slice.iter().map(|slice| slice.borrow().len()).sum();\n         let mut result = Vec::with_capacity(size);\n         for v in slice {\n             result.extend_from_slice(v.borrow())\n         }\n         result\n     }\n+}\n+\n+#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]\n+impl<T: Clone, V: Borrow<[T]>> Join<T> for [V] {\n+    type Output = Vec<T>;\n \n-    fn join(slice: &[Self], sep: &T) -> Vec<T> {\n+    fn join(slice: &Self, sep: &T) -> Vec<T> {\n         let mut iter = slice.iter();\n         let first = match iter.next() {\n             Some(first) => first,"}, {"sha": "726ac1907fa86a573c431d7dfb7459bb104566c9", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01d93bf59523c4e5c00cf8933c551adc73953cd1/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d93bf59523c4e5c00cf8933c551adc73953cd1/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=01d93bf59523c4e5c00cf8933c551adc73953cd1", "patch": "@@ -37,7 +37,7 @@ use core::unicode::conversions;\n \n use crate::borrow::ToOwned;\n use crate::boxed::Box;\n-use crate::slice::{SliceConcat, SliceIndex};\n+use crate::slice::{Concat, Join, SliceIndex};\n use crate::string::String;\n use crate::vec::Vec;\n \n@@ -71,15 +71,22 @@ pub use core::str::SplitAsciiWhitespace;\n #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n pub use core::str::{EscapeDebug, EscapeDefault, EscapeUnicode};\n \n+/// Note: `str` in `Concat<str>` is not meaningful here.\n+/// This type parameter of the trait only exists to enable another impl.\n #[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]\n-impl<S: Borrow<str>> SliceConcat<str> for S {\n+impl<S: Borrow<str>> Concat<str> for [S] {\n     type Output = String;\n \n-    fn concat(slice: &[Self]) -> String {\n-        Self::join(slice, \"\")\n+    fn concat(slice: &Self) -> String {\n+        Join::join(slice, \"\")\n     }\n+}\n+\n+#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]\n+impl<S: Borrow<str>> Join<str> for [S] {\n+    type Output = String;\n \n-    fn join(slice: &[Self], sep: &str) -> String {\n+    fn join(slice: &Self, sep: &str) -> String {\n         unsafe {\n             String::from_utf8_unchecked( join_generic_copy(slice, sep.as_bytes()) )\n         }"}]}