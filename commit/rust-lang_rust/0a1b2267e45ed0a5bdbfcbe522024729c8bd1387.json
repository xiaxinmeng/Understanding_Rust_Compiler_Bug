{"sha": "0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMWIyMjY3ZTQ1ZWQwYTViZGJmY2JlNTIyMDI0NzI5YzhiZDEzODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-15T11:31:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-15T11:31:40Z"}, "message": "Auto merge of #56840 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #56718 (Use libbacktrace pretty-printing)\n - #56725 (fix rust-lang/rust issue #50583)\n - #56731 (Add missing urls in ffi module docs)\n - #56738 (Fix private_no_mangle_fns message grammar)\n - #56746 (Add test of current behavior (infer free region within closure body))\n - #56747 (target: remove Box returned by get_targets)\n - #56751 (Allow ptr::hash to accept fat pointers)\n - #56755 (Account for `impl Trait` when suggesting lifetime)\n - #56758 (Add short emoji status to toolstate updates)\n - #56760 (Deduplicate unsatisfied trait bounds)\n - #56769 (Add x86_64-unknown-uefi target)\n - #56792 (Bootstrap: Add testsuite for compiletest tool)\n - #56808 (Fixes broken links)\n - #56809 (Fix docs path to PermissionsExt)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "5483e903347301b6bd9c38d3aa238a31218f80d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5483e903347301b6bd9c38d3aa238a31218f80d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "html_url": "https://github.com/rust-lang/rust/commit/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747a5e514a2e235b21a609c365657fb9a0b725f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/747a5e514a2e235b21a609c365657fb9a0b725f4", "html_url": "https://github.com/rust-lang/rust/commit/747a5e514a2e235b21a609c365657fb9a0b725f4"}, {"sha": "ae3882c206d817b7e68efcaa7ed10742f2e101f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3882c206d817b7e68efcaa7ed10742f2e101f4", "html_url": "https://github.com/rust-lang/rust/commit/ae3882c206d817b7e68efcaa7ed10742f2e101f4"}], "stats": {"total": 515, "additions": 419, "deletions": 96}, "files": [{"sha": "be4a1c2f1d3c40292b0d5530e59b38a7dcb4b231", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -81,7 +81,7 @@ dependencies = [\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.9\"\n+version = \"0.3.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -728,15 +728,15 @@ name = \"error-chain\"\n version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"error-chain\"\n version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -751,7 +751,7 @@ name = \"failure\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2060,7 +2060,7 @@ name = \"rustc\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n- \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"chalk-engine 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3380,7 +3380,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n \"checksum assert_cli 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98589b0e465a6c510d95fceebd365bb79bedece7f6e18a480897f2015f85ec51\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n-\"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n+\"checksum backtrace 0.3.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18b65ea1161bfb2dd6da6fade5edd4dbd08fba85012123dd333d2fd1b90b2782\"\n \"checksum backtrace-sys 0.1.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c66d56ac8dabd07f6aacdaf633f4b8262f5b3601a810a0dcddffd5c22c69daa0\"\n \"checksum bit-set 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6f1efcc46c18245a69c38fcc5cc650f16d3a59d034f3106e9ed63748f695730a\"\n \"checksum bit-vec 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4440d5cb623bb7390ae27fec0bb6c61111969860f8e3ae198bfa0663645e67cf\""}, {"sha": "c1d56865da55ceada06595b80834d42ebc827e5b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -416,6 +416,7 @@ impl<'a> Builder<'a> {\n                 test::Rustfmt,\n                 test::Miri,\n                 test::Clippy,\n+                test::CompiletestTest,\n                 test::RustdocJS,\n                 test::RustdocTheme,\n                 // Run bootstrap close to the end as it's unlikely to fail"}, {"sha": "87d5737e2a0a2202ad89adf38a826442d7e30b74", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -429,6 +429,45 @@ impl Step for Miri {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct CompiletestTest {\n+    stage: u32,\n+    host: Interned<String>,\n+}\n+\n+impl Step for CompiletestTest {\n+    type Output = ();\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/compiletest\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(CompiletestTest {\n+            stage: run.builder.top_stage,\n+            host: run.target,\n+        });\n+    }\n+\n+    /// Runs `cargo test` for compiletest.\n+    fn run(self, builder: &Builder) {\n+        let stage = self.stage;\n+        let host = self.host;\n+        let compiler = builder.compiler(stage, host);\n+\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolBootstrap,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/compiletest\",\n+                                                 SourceType::InTree,\n+                                                 &[]);\n+\n+        try_run(builder, &mut cargo);\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Clippy {\n     stage: u32,"}, {"sha": "4f8a3c0240e1a19b50938da2acf7b5f5e2740b97", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -52,8 +52,8 @@ RUN env \\\n     CXX=arm-linux-gnueabi-g++ CXXFLAGS=\"-march=armv6 -marm\" \\\n     bash musl.sh arm && \\\n     env \\\n-    CC=arm-linux-gnueabihf-gcc CFLAGS=\"-march=armv6 -marm\" \\\n-    CXX=arm-linux-gnueabihf-g++ CXXFLAGS=\"-march=armv6 -marm\" \\\n+    CC=arm-linux-gnueabihf-gcc CFLAGS=\"-march=armv6 -marm -mfpu=vfp\" \\\n+    CXX=arm-linux-gnueabihf-g++ CXXFLAGS=\"-march=armv6 -marm -mfpu=vfp\" \\\n     bash musl.sh armhf && \\\n     env \\\n     CC=arm-linux-gnueabihf-gcc CFLAGS=\"-march=armv7-a\" \\"}, {"sha": "2e94ebe345adbbb791cb9d66bf18786c015f45fa", "filename": "src/doc/rustc/src/targets/built-in.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fbuilt-in.md?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -6,5 +6,5 @@ the team is supporting directly.\n \n To see the list of built-in targets, you can run `rustc --print target-list`,\n or look at [the API\n-docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_back/target/#modules).\n+docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/index.html#modules).\n Each module there defines a builder for a particular target.\n\\ No newline at end of file"}, {"sha": "3d63d072befe0ae46979c8d8ffcc5b90d8dc325a", "filename": "src/doc/rustc/src/targets/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -4,7 +4,7 @@\n architecture. The list of *targets* are the possible architectures that you can build for.\n \n To see all the options that you can set with a target, see the docs\n-[here](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_back/target/struct.Target.html).\n+[here](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_target/spec/struct.Target.html).\n \n To compile to a particular target, use the `--target` flag:\n "}, {"sha": "edc039f896b2c528318706b233dde801c8214806", "filename": "src/doc/unstable-book/src/language-features/unsized-locals.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -8,7 +8,7 @@ The tracking issue for this feature is: [#48055]\n \n This implements [RFC1909]. When turned on, you can have unsized arguments and locals:\n \n-[RFC1909]: https://github.com/rust-lang/rfcs/blob/master/text/1909-coercions.md\n+[RFC1909]: https://github.com/rust-lang/rfcs/blob/master/text/1909-unsized-rvalues.md\n \n ```rust\n #![feature(unsized_locals)]"}, {"sha": "79ca600b4a57f0b2742d7202e2d3d3b224cce615", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -2544,7 +2544,7 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n /// assert_eq!(actual, expected);\n /// ```\n #[unstable(feature = \"ptr_hash\", reason = \"newly added\", issue = \"56286\")]\n-pub fn hash<T, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n+pub fn hash<T: ?Sized, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n     use hash::Hash;\n     hashee.hash(into);\n }"}, {"sha": "d213a5c56187141f6f169ca93affa41617bacfbf", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -1095,15 +1095,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             let sp = hir.span(id);\n                             // `sp` only covers `T`, change it so that it covers\n                             // `T:` when appropriate\n-                            let sp = if has_bounds {\n+                            let is_impl_trait = bound_kind.to_string().starts_with(\"impl \");\n+                            let sp = if has_bounds && !is_impl_trait {\n                                 sp.to(self.tcx\n                                     .sess\n                                     .source_map()\n                                     .next_point(self.tcx.sess.source_map().next_point(sp)))\n                             } else {\n                                 sp\n                             };\n-                            (sp, has_bounds)\n+                            (sp, has_bounds, is_impl_trait)\n                         })\n                     } else {\n                         None\n@@ -1136,25 +1137,33 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         fn binding_suggestion<'tcx, S: fmt::Display>(\n             err: &mut DiagnosticBuilder<'tcx>,\n-            type_param_span: Option<(Span, bool)>,\n+            type_param_span: Option<(Span, bool, bool)>,\n             bound_kind: GenericKind<'tcx>,\n             sub: S,\n         ) {\n-            let consider = &format!(\n-                \"consider adding an explicit lifetime bound `{}: {}`...\",\n-                bound_kind, sub\n+            let consider = format!(\n+                \"consider adding an explicit lifetime bound {}\",\n+                if type_param_span.map(|(_, _, is_impl_trait)| is_impl_trait).unwrap_or(false) {\n+                    format!(\" `{}` to `{}`...\", sub, bound_kind)\n+                } else {\n+                    format!(\"`{}: {}`...\", bound_kind, sub)\n+                },\n             );\n-            if let Some((sp, has_lifetimes)) = type_param_span {\n-                let tail = if has_lifetimes { \" + \" } else { \"\" };\n-                let suggestion = format!(\"{}: {}{}\", bound_kind, sub, tail);\n+            if let Some((sp, has_lifetimes, is_impl_trait)) = type_param_span {\n+                let suggestion = if is_impl_trait {\n+                    format!(\"{} + {}\", bound_kind, sub)\n+                } else {\n+                    let tail = if has_lifetimes { \" + \" } else { \"\" };\n+                    format!(\"{}: {}{}\", bound_kind, sub, tail)\n+                };\n                 err.span_suggestion_short_with_applicability(\n                     sp,\n-                    consider,\n+                    &consider,\n                     suggestion,\n                     Applicability::MaybeIncorrect, // Issue #41966\n                 );\n             } else {\n-                err.help(consider);\n+                err.help(&consider);\n             }\n         }\n "}, {"sha": "8b16aafd314d7d0d53a20c652d85c2214a54a875", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -183,50 +183,14 @@ pub struct EvalError<'tcx> {\n impl<'tcx> EvalError<'tcx> {\n     pub fn print_backtrace(&mut self) {\n         if let Some(ref mut backtrace) = self.backtrace {\n-            eprintln!(\"{}\", print_backtrace(&mut *backtrace));\n+            print_backtrace(&mut *backtrace);\n         }\n     }\n }\n \n-fn print_backtrace(backtrace: &mut Backtrace) -> String {\n-    use std::fmt::Write;\n-\n+fn print_backtrace(backtrace: &mut Backtrace) {\n     backtrace.resolve();\n-\n-    let mut trace_text = \"\\n\\nAn error occurred in miri:\\n\".to_string();\n-    write!(trace_text, \"backtrace frames: {}\\n\", backtrace.frames().len()).unwrap();\n-    'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n-        if frame.symbols().is_empty() {\n-            write!(trace_text, \"  {}: no symbols\\n\", i).unwrap();\n-        }\n-        let mut first = true;\n-        for symbol in frame.symbols() {\n-            if first {\n-                write!(trace_text, \"  {}: \", i).unwrap();\n-                first = false;\n-            } else {\n-                let len = i.to_string().len();\n-                write!(trace_text, \"  {}  \", \" \".repeat(len)).unwrap();\n-            }\n-            if let Some(name) = symbol.name() {\n-                write!(trace_text, \"{}\\n\", name).unwrap();\n-            } else {\n-                write!(trace_text, \"<unknown>\\n\").unwrap();\n-            }\n-            write!(trace_text, \"           at \").unwrap();\n-            if let Some(file_path) = symbol.filename() {\n-                write!(trace_text, \"{}\", file_path.display()).unwrap();\n-            } else {\n-                write!(trace_text, \"<unknown_file>\").unwrap();\n-            }\n-            if let Some(line) = symbol.lineno() {\n-                write!(trace_text, \":{}\\n\", line).unwrap();\n-            } else {\n-                write!(trace_text, \"\\n\").unwrap();\n-            }\n-        }\n-    }\n-    trace_text\n+    eprintln!(\"\\n\\nAn error occurred in miri:\\n{:?}\", backtrace);\n }\n \n impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n@@ -238,7 +202,7 @@ impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n \n                 if val == \"immediate\" {\n                     // Print it now\n-                    eprintln!(\"{}\", print_backtrace(&mut backtrace));\n+                    print_backtrace(&mut backtrace);\n                     None\n                 } else {\n                     Some(Box::new(backtrace))"}, {"sha": "66364ff88b38dce963a368511cbb1a951dbe107e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -376,7 +376,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"resolve_trait_on_defaulted_unit\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n     store.register_removed(\"private_no_mangle_fns\",\n-        \"no longer an warning, #[no_mangle] functions always exported\");\n+        \"no longer a warning, #[no_mangle] functions always exported\");\n     store.register_removed(\"private_no_mangle_statics\",\n-        \"no longer an warning, #[no_mangle] statics always exported\");\n+        \"no longer a warning, #[no_mangle] statics always exported\");\n }"}, {"sha": "aef8770bcc69b3c8dfa51d92893aba2a5f358b2e", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -68,6 +68,7 @@ mod linux_musl_base;\n mod openbsd_base;\n mod netbsd_base;\n mod solaris_base;\n+mod uefi_base;\n mod windows_base;\n mod windows_msvc_base;\n mod thumb_base;\n@@ -254,12 +255,12 @@ macro_rules! supported_targets {\n             }\n         }\n \n-        pub fn get_targets() -> Box<dyn Iterator<Item=String>> {\n-            Box::new(TARGETS.iter().filter_map(|t| -> Option<String> {\n+        pub fn get_targets() -> impl Iterator<Item = String> {\n+            TARGETS.iter().filter_map(|t| -> Option<String> {\n                 load_specific(t)\n                     .and(Ok(t.to_string()))\n                     .ok()\n-            }))\n+            })\n         }\n \n         #[cfg(test)]\n@@ -419,6 +420,8 @@ supported_targets! {\n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n \n     (\"x86_64-fortanix-unknown-sgx\", x86_64_fortanix_unknown_sgx),\n+\n+    (\"x86_64-unknown-uefi\", x86_64_unknown_uefi),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "9b0515837600be9a3b76bae61f096d50120a1819", "filename": "src/librustc_target/spec/uefi_base.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This defines a base target-configuration for native UEFI systems. The UEFI specification has\n+// quite detailed sections on the ABI of all the supported target architectures. In almost all\n+// cases it simply follows what Microsoft Windows does. Hence, whenever in doubt, see the MSDN\n+// documentation.\n+// UEFI uses COFF/PE32+ format for binaries. All binaries must be statically linked. No dynamic\n+// linker is supported. As native to COFF, binaries are position-dependent, but will be relocated\n+// by the loader if the pre-chosen memory location is already in use.\n+// UEFI forbids running code on anything but the boot-CPU. Not interrupts are allowed other than\n+// the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n+// code runs in the same environment, no process separation is supported.\n+\n+use spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut pre_link_args = LinkArgs::new();\n+\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), vec![\n+            // Suppress the verbose logo and authorship debugging output, which would needlessly\n+            // clog any log files.\n+            \"/NOLOGO\".to_string(),\n+\n+            // UEFI is fully compatible to non-executable data pages. Tell the compiler that\n+            // non-code sections can be marked as non-executable, including stack pages.\n+            \"/NXCOMPAT\".to_string(),\n+\n+            // There is no runtime for UEFI targets, prevent them from being linked. UEFI targets\n+            // must be freestanding.\n+            \"/nodefaultlib\".to_string(),\n+\n+            // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n+            // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n+            // spec.\n+            \"/entry:efi_main\".to_string(),\n+\n+            // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n+            // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n+            // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n+            // which is very likely the most common option. Individual projects can override this\n+            // with custom linker flags.\n+            // The subsystem-type only has minor effects on the application. It defines the memory\n+            // regions the application is loaded into (runtime-drivers need to be put into\n+            // reserved areas), as well as whether a return from the entry-point is treated as\n+            // exit (default for applications).\n+            \"/subsystem:efi_application\".to_string(),\n+        ]);\n+\n+    TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        disable_redzone: true,\n+        exe_suffix: \".efi\".to_string(),\n+        allows_weak_linkage: false,\n+        panic_strategy: PanicStrategy::Abort,\n+        singlethread: true,\n+        emit_debug_gdb_scripts: false,\n+\n+        linker: Some(\"lld-link\".to_string()),\n+        lld_flavor: LldFlavor::Link,\n+        pre_link_args,\n+\n+        .. Default::default()\n+    }\n+}"}, {"sha": "ea68afa717335ebf23bd273d1efb72cf9e9ccef3", "filename": "src/librustc_target/spec/x86_64_unknown_uefi.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This defines the amd64 target for UEFI systems as described in the UEFI specification. See the\n+// uefi-base module for generic UEFI options. On x86_64 systems (mostly called \"x64\" in the spec)\n+// UEFI systems always run in long-mode, have the interrupt-controller pre-configured and force a\n+// single-CPU execution.\n+// The win64 ABI is used. It differs from the sysv64 ABI, so we must use a windows target with\n+// LLVM. \"x86_64-unknown-windows\" is used to get the minimal subset of windows-specific features.\n+\n+use spec::{LinkerFlavor, LldFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::uefi_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+\n+    // We disable MMX and SSE for now. UEFI does not prevent these from being used, but there have\n+    // been reports to GRUB that some firmware does not initialize the FP exception handlers\n+    // properly. Therefore, using FP coprocessors will end you up at random memory locations when\n+    // you throw FP exceptions.\n+    // To be safe, we disable them for now and force soft-float. This can be revisited when we\n+    // have more test coverage. Disabling FP served GRUB well so far, so it should be good for us\n+    // as well.\n+    base.features = \"-mmx,-sse,+soft-float\".to_string();\n+\n+    // UEFI systems run without a host OS, hence we cannot assume any code locality. We must tell\n+    // LLVM to expect code to reference any address in the address-space. The \"large\" code-model\n+    // places no locality-restrictions, so it fits well here.\n+    base.code_model = Some(\"large\".to_string());\n+\n+    // UEFI mostly mirrors the calling-conventions used on windows. In case of x86-64 this means\n+    // small structs will be returned as int. This shouldn't matter much, since the restrictions\n+    // placed by the UEFI specifications forbid any ABI to return structures.\n+    base.abi_return_struct_as_int = true;\n+\n+    Ok(Target {\n+        llvm_target: \"x86_64-unknown-windows\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        target_os: \"uefi\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n+\n+        options: base,\n+    })\n+}"}, {"sha": "09063579c4214b73d0943616820efb3238be4457", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -424,10 +424,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n \n                 if !unsatisfied_predicates.is_empty() {\n-                    let bound_list = unsatisfied_predicates.iter()\n+                    let mut bound_list = unsatisfied_predicates.iter()\n                         .map(|p| format!(\"`{} : {}`\", p.self_ty(), p))\n-                        .collect::<Vec<_>>()\n-                        .join(\"\\n\");\n+                        .collect::<Vec<_>>();\n+                    bound_list.sort();\n+                    bound_list.dedup();  // #35677\n+                    let bound_list = bound_list.join(\"\\n\");\n                     err.note(&format!(\"the method `{}` exists but the following trait bounds \\\n                                        were not satisfied:\\n{}\",\n                                       item_name,"}, {"sha": "7e155396b8d5e6ec56d4d2a396ba090447bbe9be", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -72,40 +72,40 @@\n //!\n //! * **From Rust to C:** [`CString`] represents an owned, C-friendly\n //! string: it is nul-terminated, and has no internal nul characters.\n-//! Rust code can create a `CString` out of a normal string (provided\n+//! Rust code can create a [`CString`] out of a normal string (provided\n //! that the string doesn't have nul characters in the middle), and\n-//! then use a variety of methods to obtain a raw `*mut u8` that can\n+//! then use a variety of methods to obtain a raw `*mut `[`u8`] that can\n //! then be passed as an argument to functions which use the C\n //! conventions for strings.\n //!\n //! * **From C to Rust:** [`CStr`] represents a borrowed C string; it\n-//! is what you would use to wrap a raw `*const u8` that you got from\n-//! a C function. A `CStr` is guaranteed to be a nul-terminated array\n-//! of bytes. Once you have a `CStr`, you can convert it to a Rust\n-//! `&str` if it's valid UTF-8, or lossily convert it by adding\n+//! is what you would use to wrap a raw `*const `[`u8`] that you got from\n+//! a C function. A [`CStr`] is guaranteed to be a nul-terminated array\n+//! of bytes. Once you have a [`CStr`], you can convert it to a Rust\n+//! [`&str`][`str`] if it's valid UTF-8, or lossily convert it by adding\n //! replacement characters.\n //!\n //! [`OsString`] and [`OsStr`] are useful when you need to transfer\n //! strings to and from the operating system itself, or when capturing\n-//! the output of external commands. Conversions between `OsString`,\n-//! `OsStr` and Rust strings work similarly to those for [`CString`]\n+//! the output of external commands. Conversions between [`OsString`],\n+//! [`OsStr`] and Rust strings work similarly to those for [`CString`]\n //! and [`CStr`].\n //!\n //! * [`OsString`] represents an owned string in whatever\n //! representation the operating system prefers. In the Rust standard\n //! library, various APIs that transfer strings to/from the operating\n-//! system use `OsString` instead of plain strings. For example,\n+//! system use [`OsString`] instead of plain strings. For example,\n //! [`env::var_os()`] is used to query environment variables; it\n-//! returns an `Option<OsString>`. If the environment variable exists\n-//! you will get a `Some(os_string)`, which you can *then* try to\n+//! returns an [`Option`]`<`[`OsString`]`>`. If the environment variable\n+//! exists you will get a [`Some`]`(os_string)`, which you can *then* try to\n //! convert to a Rust string. This yields a [`Result<>`], so that\n //! your code can detect errors in case the environment variable did\n //! not in fact contain valid Unicode data.\n //!\n //! * [`OsStr`] represents a borrowed reference to a string in a\n //! format that can be passed to the operating system. It can be\n //! converted into an UTF-8 Rust string slice in a similar way to\n-//! `OsString`.\n+//! [`OsString`].\n //!\n //! # Conversions\n //!\n@@ -131,7 +131,7 @@\n //! Additionally, on Windows [`OsString`] implements the\n //! `std::os::windows:ffi::`[`OsStringExt`][windows.OsStringExt]\n //! trait, which provides a [`from_wide`] method. The result of this\n-//! method is an `OsString` which can be round-tripped to a Windows\n+//! method is an [`OsString`] which can be round-tripped to a Windows\n //! string losslessly.\n //!\n //! [`String`]: ../string/struct.String.html\n@@ -160,6 +160,8 @@\n //! [`collect`]: ../iter/trait.Iterator.html#method.collect\n //! [windows.OsStringExt]: ../os/windows/ffi/trait.OsStringExt.html\n //! [`from_wide`]: ../os/windows/ffi/trait.OsStringExt.html#tymethod.from_wide\n+//! [`Option`]: ../option/enum.Option.html\n+//! [`Some`]: ../option/enum.Option.html#variant.Some\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "edcfdd9e5348336c2764ab4fb7607c465542e656", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -195,9 +195,10 @@ pub struct OpenOptions(fs_imp::OpenOptions);\n /// This module only currently provides one bit of information, [`readonly`],\n /// which is exposed on all currently supported platforms. Unix-specific\n /// functionality, such as mode bits, is available through the\n-/// `os::unix::PermissionsExt` trait.\n+/// [`PermissionsExt`] trait.\n ///\n /// [`readonly`]: struct.Permissions.html#method.readonly\n+/// [`PermissionsExt`]: ../os/unix/fs/trait.PermissionsExt.html\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Permissions(fs_imp::FilePermissions);"}, {"sha": "ed6b325a01d4d9872006924120008a38dc0b6962", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -14,8 +14,8 @@ LL |         .collect(); //~ ERROR no method named `collect`\n    |          ^^^^^^^\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:16:39: 19:6 found_e:_]>> : std::iter::Iterator`\n            `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:16:39: 19:6 found_e:_]>> : std::iter::Iterator`\n+           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:16:39: 19:6 found_e:_]>> : std::iter::Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "46d3f7e4af00b0f0b7e2683bdfcd917243a34556", "filename": "src/test/ui/issues/issue-35677.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,5 @@\n+use std::collections::HashMap;\n+fn intersect_map<K, V>(this: &mut HashMap<K, V>, other: HashMap<K, V>) -> bool {\n+    this.drain()\n+    //~^ ERROR no method named\n+}"}, {"sha": "dca096b93f5f3f27a48783b4adce9d5257637d57", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,18 @@\n+error[E0601]: `main` function not found in crate `issue_35677`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-35677.rs`\n+\n+error[E0599]: no method named `drain` found for type `&mut std::collections::HashMap<K, V>` in the current scope\n+  --> $DIR/issue-35677.rs:3:10\n+   |\n+LL |     this.drain()\n+   |          ^^^^^\n+   |\n+   = note: the method `drain` exists but the following trait bounds were not satisfied:\n+           `K : std::cmp::Eq`\n+           `K : std::hash::Hash`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0599, E0601.\n+For more information about an error, try `rustc --explain E0599`."}, {"sha": "1df2d7babe91b11735f293040587e3a91d023817", "filename": "src/test/ui/lint/lint-unexported-no-mangle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -1,8 +1,8 @@\n-warning: lint `private_no_mangle_fns` has been removed: `no longer an warning, #[no_mangle] functions always exported`\n+warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, #[no_mangle] functions always exported`\n    |\n    = note: requested on the command line with `-F private_no_mangle_fns`\n \n-warning: lint `private_no_mangle_statics` has been removed: `no longer an warning, #[no_mangle] statics always exported`\n+warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, #[no_mangle] statics always exported`\n    |\n    = note: requested on the command line with `-F private_no_mangle_statics`\n "}, {"sha": "1fbac9d688140aff535cce2402488793b39691b3", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -5,8 +5,8 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                                       ^^^^^\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n-           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n            `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n+           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:17:32"}, {"sha": "24676fe5e5bd9dffbcea74991d93b37f96e53faa", "filename": "src/test/ui/regions/issue-56537-closure-uses-region-from-container.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fregions%2Fissue-56537-closure-uses-region-from-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fregions%2Fissue-56537-closure-uses-region-from-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-56537-closure-uses-region-from-container.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,74 @@\n+// This is a collection of examples where a function's formal\n+// parameter has an explicit lifetime and a closure within that\n+// function returns that formal parameter. The closure's return type,\n+// to be correctly inferred, needs to include the lifetime introduced\n+// by the function.\n+//\n+// This works today, which precludes changing things so that closures\n+// follow the same lifetime-elision rules used elsehwere. See\n+// rust-lang/rust#56537\n+\n+// compile-pass\n+// We are already testing NLL explicitly via the revision system below.\n+// ignore-compare-mode-nll\n+\n+// revisions: ll nll migrate\n+//[ll] compile-flags:-Zborrowck=ast\n+//[nll] compile-flags:-Zborrowck=mir -Z two-phase-borrows\n+//[migrate] compile-flags:-Zborrowck=migrate -Z two-phase-borrows\n+\n+fn willy_no_annot<'w>(p: &'w str, q: &str) -> &'w str {\n+    let free_dumb = |_x| { p }; // no type annotation at all\n+    let hello = format!(\"Hello\");\n+    free_dumb(&hello)\n+}\n+\n+fn willy_ret_type_annot<'w>(p: &'w str, q: &str) -> &'w str {\n+    let free_dumb = |_x| -> &str { p }; // type annotation on the return type\n+    let hello = format!(\"Hello\");\n+    free_dumb(&hello)\n+}\n+\n+fn willy_ret_region_annot<'w>(p: &'w str, q: &str) -> &'w str {\n+    let free_dumb = |_x| -> &'w str { p }; // type+region annotation on return type\n+    let hello = format!(\"Hello\");\n+    free_dumb(&hello)\n+}\n+\n+fn willy_arg_type_ret_type_annot<'w>(p: &'w str, q: &str) -> &'w str {\n+    let free_dumb = |_x: &str| -> &str { p }; // type annotation on arg and return types\n+    let hello = format!(\"Hello\");\n+    free_dumb(&hello)\n+}\n+\n+fn willy_arg_type_ret_region_annot<'w>(p: &'w str, q: &str) -> &'w str {\n+    let free_dumb = |_x: &str| -> &'w str { p }; // fully annotated\n+    let hello = format!(\"Hello\");\n+    free_dumb(&hello)\n+}\n+\n+fn main() {\n+    let world = format!(\"World\");\n+    let w1: &str = {\n+        let hello = format!(\"He11o\");\n+        willy_no_annot(&world, &hello)\n+    };\n+    let w2: &str = {\n+        let hello = format!(\"He22o\");\n+        willy_ret_type_annot(&world, &hello)\n+    };\n+    let w3: &str = {\n+        let hello = format!(\"He33o\");\n+        willy_ret_region_annot(&world, &hello)\n+    };\n+    let w4: &str = {\n+        let hello = format!(\"He44o\");\n+        willy_arg_type_ret_type_annot(&world, &hello)\n+    };\n+    let w5: &str = {\n+        let hello = format!(\"He55o\");\n+        willy_arg_type_ret_region_annot(&world, &hello)\n+    };\n+    assert_eq!((w1, w2, w3, w4, w5),\n+               (\"World\",\"World\",\"World\",\"World\",\"World\"));\n+}"}, {"sha": "8592af1262e6fd8f882148d79e9220d821f046b5", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+\n+fn foo(d: impl Debug + 'static) {\n+//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+    bar(d);\n+//~^ ERROR the parameter type `impl Debug` may not live long enough\n+//~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n+}\n+\n+fn bar(d: impl Debug + 'static) {\n+    println!(\"{:?}\", d)\n+}\n+\n+fn main() {\n+  foo(\"hi\");\n+}"}, {"sha": "c67d78ea4c73bc4536c296a84aca02e2305318bd", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+\n+fn foo(d: impl Debug) {\n+//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+    bar(d);\n+//~^ ERROR the parameter type `impl Debug` may not live long enough\n+//~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n+}\n+\n+fn bar(d: impl Debug + 'static) {\n+    println!(\"{:?}\", d)\n+}\n+\n+fn main() {\n+  foo(\"hi\");\n+}"}, {"sha": "cba231d0e86e541da2fb174f5bd949066291dd3d", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -0,0 +1,19 @@\n+error[E0310]: the parameter type `impl Debug` may not live long enough\n+  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n+   |\n+LL |     bar(d);\n+   |     ^^^\n+   |\n+note: ...so that the type `impl Debug` will meet its required lifetime bounds\n+  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n+   |\n+LL |     bar(d);\n+   |     ^^^\n+help: consider adding an explicit lifetime bound  `'static` to `impl Debug`...\n+   |\n+LL | fn foo(d: impl Debug + 'static) {\n+   |           ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "a65d263d2e3a3e3a7f5507a7fcd8e13c43234e14", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b2267e45ed0a5bdbfcbe522024729c8bd1387/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=0a1b2267e45ed0a5bdbfcbe522024729c8bd1387", "patch": "@@ -34,6 +34,16 @@\n     'rust-by-example': '@steveklabnik @marioidival @projektir',\n }\n \n+EMOJI = {\n+    'miri': '\ud83d\udef0\ufe0f',\n+    'clippy-driver': '\ud83d\udcce',\n+    'rls': '\ud83d\udcbb',\n+    'rustfmt': '\ud83d\udcdd',\n+    'book': '\ud83d\udcd6',\n+    'nomicon': '\ud83d\udc7f',\n+    'reference': '\ud83d\udcda',\n+    'rust-by-example': '\ud83d\udc69\u200d\ud83c\udfeb',\n+}\n \n def read_current_status(current_commit, path):\n     '''Reads build status of `current_commit` from content of `history/*.tsv`\n@@ -63,13 +73,12 @@ def update_latest(\n         }\n \n         slug = 'rust-lang/rust'\n-        message = textwrap.dedent('''\\\n-            \ud83d\udce3 Toolstate changed by {}!\n-\n+        long_message = textwrap.dedent('''\\\n             Tested on commit {}@{}.\n             Direct link to PR: <{}>\n \n-        ''').format(relevant_pr_number, slug, current_commit, relevant_pr_url)\n+        ''').format(slug, current_commit, relevant_pr_url)\n+        emoji_status = []\n         anything_changed = False\n         for status in latest:\n             tool = status['tool']\n@@ -81,12 +90,18 @@ def update_latest(\n                 status[os] = new\n                 if new > old:\n                     changed = True\n-                    message += '\ud83c\udf89 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n-                        .format(tool, os, old, new, MAINTAINERS.get(tool))\n+                    long_message += '\ud83c\udf89 {} on {}: {} \u2192 {}.\\n' \\\n+                        .format(tool, os, old, new)\n+                    emoji = \"{}\ud83c\udf89\".format(EMOJI.get(tool))\n+                    if msg not in emoji_status:\n+                        emoji_status += [msg]\n                 elif new < old:\n                     changed = True\n-                    message += '\ud83d\udc94 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n+                    long_message += '\ud83d\udc94 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n                         .format(tool, os, old, new, MAINTAINERS.get(tool))\n+                    emoji = \"{}\ud83d\udc94\".format(EMOJI.get(tool))\n+                    if msg not in emoji_status:\n+                        emoji_status += [msg]\n \n             if changed:\n                 status['commit'] = current_commit\n@@ -96,6 +111,9 @@ def update_latest(\n         if not anything_changed:\n             return ''\n \n+        short_message = \"\ud83d\udce3 Toolstate changed by {}! ({})\"\n+            .format(relevant_pr_number, '/'.join(emoji_status))\n+        message = short_message + \"\\n\\n\" + long_message\n         f.seek(0)\n         f.truncate(0)\n         json.dump(latest, f, indent=4, separators=(',', ': '))"}]}