{"sha": "9279c1c939fa52da2be7d36efdd47f2839b23c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNzljMWM5MzlmYTUyZGEyYmU3ZDM2ZWZkZDQ3ZjI4MzliMjNjNTY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T15:52:17Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-21T15:52:54Z"}, "message": "Don't offer extract_variable assist when there is no surrounding block", "tree": {"sha": "28cdae5a6f88e8b9f92caedca4a3d39bebe8aecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28cdae5a6f88e8b9f92caedca4a3d39bebe8aecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9279c1c939fa52da2be7d36efdd47f2839b23c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9279c1c939fa52da2be7d36efdd47f2839b23c56", "html_url": "https://github.com/rust-lang/rust/commit/9279c1c939fa52da2be7d36efdd47f2839b23c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9279c1c939fa52da2be7d36efdd47f2839b23c56/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33972da625c06403b4845d28d226d8cef123e736", "url": "https://api.github.com/repos/rust-lang/rust/commits/33972da625c06403b4845d28d226d8cef123e736", "html_url": "https://github.com/rust-lang/rust/commit/33972da625c06403b4845d28d226d8cef123e736"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "176f52aa4d4130b9c31aeff9f8f8d2fda7bf40d9", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 43, "deletions": 28, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9279c1c939fa52da2be7d36efdd47f2839b23c56/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9279c1c939fa52da2be7d36efdd47f2839b23c56/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=9279c1c939fa52da2be7d36efdd47f2839b23c56", "patch": "@@ -35,7 +35,10 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         cov_mark::hit!(extract_var_in_comment_is_not_applicable);\n         return None;\n     }\n-    let to_extract = node.ancestors().find_map(valid_target_expr)?;\n+    let to_extract = node\n+        .ancestors()\n+        .take_while(|it| it.text_range().contains_range(ctx.frange.range))\n+        .find_map(valid_target_expr)?;\n     if let Some(ty) = ctx.sema.type_of_expr(&to_extract) {\n         if ty.is_unit() {\n             return None;\n@@ -142,41 +145,43 @@ enum Anchor {\n \n impl Anchor {\n     fn from(to_extract: &ast::Expr) -> Option<Anchor> {\n-        to_extract.syntax().ancestors().find_map(|node| {\n-            if let Some(expr) =\n-                node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.tail_expr())\n-            {\n-                if expr.syntax() == &node {\n-                    cov_mark::hit!(test_extract_var_last_expr);\n-                    return Some(Anchor::Before(node));\n+        to_extract.syntax().ancestors().take_while(|it| !ast::Item::can_cast(it.kind())).find_map(\n+            |node| {\n+                if let Some(expr) =\n+                    node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.tail_expr())\n+                {\n+                    if expr.syntax() == &node {\n+                        cov_mark::hit!(test_extract_var_last_expr);\n+                        return Some(Anchor::Before(node));\n+                    }\n                 }\n-            }\n \n-            if let Some(parent) = node.parent() {\n-                if parent.kind() == CLOSURE_EXPR {\n-                    cov_mark::hit!(test_extract_var_in_closure_no_block);\n-                    return Some(Anchor::WrapInBlock(node));\n-                }\n-                if parent.kind() == MATCH_ARM {\n-                    if node.kind() == MATCH_GUARD {\n-                        cov_mark::hit!(test_extract_var_in_match_guard);\n-                    } else {\n-                        cov_mark::hit!(test_extract_var_in_match_arm_no_block);\n+                if let Some(parent) = node.parent() {\n+                    if parent.kind() == CLOSURE_EXPR {\n+                        cov_mark::hit!(test_extract_var_in_closure_no_block);\n                         return Some(Anchor::WrapInBlock(node));\n                     }\n+                    if parent.kind() == MATCH_ARM {\n+                        if node.kind() == MATCH_GUARD {\n+                            cov_mark::hit!(test_extract_var_in_match_guard);\n+                        } else {\n+                            cov_mark::hit!(test_extract_var_in_match_arm_no_block);\n+                            return Some(Anchor::WrapInBlock(node));\n+                        }\n+                    }\n                 }\n-            }\n \n-            if let Some(stmt) = ast::Stmt::cast(node.clone()) {\n-                if let ast::Stmt::ExprStmt(stmt) = stmt {\n-                    if stmt.expr().as_ref() == Some(to_extract) {\n-                        return Some(Anchor::Replace(stmt));\n+                if let Some(stmt) = ast::Stmt::cast(node.clone()) {\n+                    if let ast::Stmt::ExprStmt(stmt) = stmt {\n+                        if stmt.expr().as_ref() == Some(to_extract) {\n+                            return Some(Anchor::Replace(stmt));\n+                        }\n                     }\n+                    return Some(Anchor::Before(node));\n                 }\n-                return Some(Anchor::Before(node));\n-            }\n-            None\n-        })\n+                None\n+            },\n+        )\n     }\n \n     fn syntax(&self) -> &SyntaxNode {\n@@ -844,4 +849,14 @@ fn main() {\n             \"2 + 2\",\n         );\n     }\n+\n+    #[test]\n+    fn extract_var_no_block_body() {\n+        check_assist_not_applicable(\n+            extract_variable,\n+            r\"\n+const X: usize = $0100$0;\n+\",\n+        );\n+    }\n }"}]}