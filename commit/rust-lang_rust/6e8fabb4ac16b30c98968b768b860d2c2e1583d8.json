{"sha": "6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOGZhYmI0YWMxNmIzMGM5ODk2OGI3NjhiODYwZDJjMmUxNTgzZDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-15T12:34:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-15T12:34:10Z"}, "message": "Rollup merge of #63586 - petrochenkov:nospanned, r=eddyb\n\ncleanup: Remove `Spanned` where possible\n\nIt generally only makes sense on enums, otherwise it's more convenient to \"flatten\" it by adding a span field to the struct it wraps.", "tree": {"sha": "97262d6fe68846bffd0ebdb303403b4da9ed4ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97262d6fe68846bffd0ebdb303403b4da9ed4ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVVFCCRBK7hj4Ov3rIwAAdHIIAJ8Pkfp+kS/wYuJ9kvx051dR\nFAFA2Hgxv3Z9KnoUV7xHEBsv7U4QbuD2JIGOnR/6jvcFKE40Zz4PXbqvlA6fjfih\n7pNFvptO8BHJ/TTkD8evlr2JIL4MAS3TtNbltD0T7DBjK9VtTiD3K6Gjydui/klm\ndk2Twi0vmEC07HOJuHhB47OIyUYz5Eje6nFJNTVlYzXvwiI/jBbG3pGVt31fSSrm\n6Psj1uu183SZ1e8NbpylU0qRgQ5a9FFSAwq9r+NettOYkLXk+r27he7HKjqS4coy\nYiXCAFZ5490f0oJyN+OzXP9pVCprVZh4FpMShOgh26GaGvq4yhvn4cej/KyMFps=\n=Kj85\n-----END PGP SIGNATURE-----\n", "payload": "tree 97262d6fe68846bffd0ebdb303403b4da9ed4ee1\nparent 19d6178b8f44a8bee56b45df07116a6d490eb7d1\nparent a6182711efe32d4dd68da2663129e3e2e462d8cb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565872450 +0200\ncommitter GitHub <noreply@github.com> 1565872450 +0200\n\nRollup merge of #63586 - petrochenkov:nospanned, r=eddyb\n\ncleanup: Remove `Spanned` where possible\n\nIt generally only makes sense on enums, otherwise it's more convenient to \"flatten\" it by adding a span field to the struct it wraps.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "html_url": "https://github.com/rust-lang/rust/commit/6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d6178b8f44a8bee56b45df07116a6d490eb7d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d6178b8f44a8bee56b45df07116a6d490eb7d1", "html_url": "https://github.com/rust-lang/rust/commit/19d6178b8f44a8bee56b45df07116a6d490eb7d1"}, {"sha": "a6182711efe32d4dd68da2663129e3e2e462d8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6182711efe32d4dd68da2663129e3e2e462d8cb", "html_url": "https://github.com/rust-lang/rust/commit/a6182711efe32d4dd68da2663129e3e2e462d8cb"}], "stats": {"total": 328, "additions": 156, "deletions": 172}, "files": [{"sha": "7ada56cfa76116411cf17a42dcd4efe044daa392", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             PatKind::Struct(_, ref subpats, _) => {\n-                let pats_exit = self.pats_all(subpats.iter().map(|f| &f.node.pat), pred);\n+                let pats_exit = self.pats_all(subpats.iter().map(|f| &f.pat), pred);\n                 self.add_ast_node(pat.hir_id.local_id, &[pats_exit])\n             }\n "}, {"sha": "99fe9f1682f163656c807d1313f29c962ddb0fa1", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -704,9 +704,9 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n         PatKind::Struct(ref qpath, ref fields, _) => {\n             visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n             for field in fields {\n-                visitor.visit_id(field.node.hir_id);\n-                visitor.visit_ident(field.node.ident);\n-                visitor.visit_pat(&field.node.pat)\n+                visitor.visit_id(field.hir_id);\n+                visitor.visit_ident(field.ident);\n+                visitor.visit_pat(&field.pat)\n             }\n         }\n         PatKind::Tuple(ref tuple_elements, _) => {"}, {"sha": "9e5d6378c40142a85ba1b273b28225513cfe6ede", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -2691,16 +2691,12 @@ impl<'a> LoweringContext<'a> {\n \n                 let fs = fields\n                     .iter()\n-                    .map(|f| {\n-                        Spanned {\n-                            span: f.span,\n-                            node: hir::FieldPat {\n-                                hir_id: self.next_id(),\n-                                ident: f.node.ident,\n-                                pat: self.lower_pat(&f.node.pat),\n-                                is_shorthand: f.node.is_shorthand,\n-                            },\n-                        }\n+                    .map(|f| hir::FieldPat {\n+                        hir_id: self.next_id(),\n+                        ident: f.ident,\n+                        pat: self.lower_pat(&f.pat),\n+                        is_shorthand: f.is_shorthand,\n+                        span: f.span,\n                     })\n                     .collect();\n                 hir::PatKind::Struct(qpath, fs, etc)"}, {"sha": "7c2f9907217cbaa8c897834ffc4d4c200e793982", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -877,7 +877,7 @@ impl Pat {\n         match self.node {\n             PatKind::Binding(.., Some(ref p)) => p.walk_(it),\n             PatKind::Struct(_, ref fields, _) => {\n-                fields.iter().all(|field| field.node.pat.walk_(it))\n+                fields.iter().all(|field| field.pat.walk_(it))\n             }\n             PatKind::TupleStruct(_, ref s, _) | PatKind::Tuple(ref s, _) => {\n                 s.iter().all(|p| p.walk_(it))\n@@ -923,6 +923,7 @@ pub struct FieldPat {\n     /// The pattern the field is destructured to.\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n+    pub span: Span,\n }\n \n /// Explicit binding annotations given in the HIR for a binding. Note\n@@ -968,7 +969,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(QPath, HirVec<Spanned<FieldPat>>, bool),\n+    Struct(QPath, HirVec<FieldPat>, bool),\n \n     /// A tuple struct/variant pattern `Variant(x, y, .., z)`.\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position."}, {"sha": "caf8220bbf43295d608821b1ae564dd41619baba", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1670,14 +1670,14 @@ impl<'a> State<'a> {\n                                    &fields[..],\n                                    |s, f| {\n                                        s.cbox(INDENT_UNIT);\n-                                       if !f.node.is_shorthand {\n-                                           s.print_ident(f.node.ident);\n+                                       if !f.is_shorthand {\n+                                           s.print_ident(f.ident);\n                                            s.word_nbsp(\":\");\n                                        }\n-                                       s.print_pat(&f.node.pat);\n+                                       s.print_pat(&f.pat);\n                                        s.end()\n                                    },\n-                                   |f| f.node.pat.span);\n+                                   |f| f.pat.span);\n                 if etc {\n                     if !fields.is_empty() {\n                         self.word_space(\",\");"}, {"sha": "60b338010b0db8a729117a2a1365968aad45c16b", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -153,8 +153,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Ty {\n     }\n }\n \n-impl_stable_hash_for_spanned!(hir::FieldPat);\n-\n impl_stable_hash_for_spanned!(hir::BinOpKind);\n \n impl_stable_hash_for!(struct hir::Stmt {\n@@ -187,8 +185,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Expr {\n \n impl_stable_hash_for_spanned!(usize);\n \n-impl_stable_hash_for_spanned!(ast::Ident);\n-\n impl_stable_hash_for!(struct ast::Ident {\n     name,\n     span,"}, {"sha": "6801fa8d8dbe5b0099ebc53e04fd73ec3ba4406d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1345,7 +1345,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         // part of `walk_mac`, and (b) we should be calling\n         // `visit_path`, *but* that would require a `NodeId`, and I\n         // want to get #53686 fixed quickly. -nmatsakis\n-        ast_visit::walk_path(self, &mac.node.path);\n+        ast_visit::walk_path(self, &mac.path);\n \n         run_early_pass!(self, check_mac, mac);\n     }"}, {"sha": "8ce8bb52566c6118a7b7adcf281300ba63200589", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -17,8 +17,7 @@ use crate::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-use syntax::{ast, source_map};\n-use syntax::attr;\n+use syntax::{ast, attr};\n use syntax::symbol::sym;\n use syntax_pos;\n \n@@ -119,17 +118,16 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, res: Res,\n-                                  pats: &[source_map::Spanned<hir::FieldPat>]) {\n+    fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, res: Res, pats: &[hir::FieldPat]) {\n         let variant = match self.tables.node_type(lhs.hir_id).sty {\n             ty::Adt(adt, _) => adt.variant_of_res(res),\n             _ => span_bug!(lhs.span, \"non-ADT in struct pattern\")\n         };\n         for pat in pats {\n-            if let PatKind::Wild = pat.node.pat.node {\n+            if let PatKind::Wild = pat.pat.node {\n                 continue;\n             }\n-            let index = self.tcx.field_index(pat.node.hir_id, self.tables);\n+            let index = self.tcx.field_index(pat.hir_id, self.tables);\n             self.insert_def_id(variant.fields[index].did);\n         }\n     }"}, {"sha": "9c9e8c0bca3b8f10a2e9d55a02a02686f98ccc05", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -418,8 +418,8 @@ fn add_from_pat<'tcx>(ir: &mut IrMaps<'tcx>, pat: &P<hir::Pat>) {\n             }\n             Struct(_, ref fields, _) => {\n                 for field in fields {\n-                    if field.node.is_shorthand {\n-                        shorthand_field_ids.insert(field.node.pat.hir_id);\n+                    if field.is_shorthand {\n+                        shorthand_field_ids.insert(field.pat.hir_id);\n                     }\n                 }\n             }"}, {"sha": "a55803e255bf6ee8e9ead4a77cad770fd4db36ca", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1282,11 +1282,11 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                 };\n \n                 for fp in field_pats {\n-                    let field_ty = self.pat_ty_adjusted(&fp.node.pat)?; // see (*2)\n-                    let f_index = self.tcx.field_index(fp.node.hir_id, self.tables);\n+                    let field_ty = self.pat_ty_adjusted(&fp.pat)?; // see (*2)\n+                    let f_index = self.tcx.field_index(fp.hir_id, self.tables);\n                     let cmt_field = Rc::new(self.cat_field(pat, cmt.clone(), f_index,\n-                                                           fp.node.ident, field_ty));\n-                    self.cat_pattern_(cmt_field, &fp.node.pat, op)?;\n+                                                           fp.ident, field_ty));\n+                    self.cat_pattern_(cmt_field, &fp.pat, op)?;\n                 }\n             }\n "}, {"sha": "3d100d2fbf8331c007bd82e0fd86e4f4cff22b68", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1207,7 +1207,7 @@ fn resolve_local<'tcx>(\n             PatKind::Binding(hir::BindingAnnotation::RefMut, ..) => true,\n \n             PatKind::Struct(_, ref field_pats, _) => {\n-                field_pats.iter().any(|fp| is_binding_pat(&fp.node.pat))\n+                field_pats.iter().any(|fp| is_binding_pat(&fp.pat))\n             }\n \n             PatKind::Slice(ref pats1, ref pats2, ref pats3) => {"}, {"sha": "47b4e7c948750ef631a2c03b6dbb416ff2bcff9c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                                    .expect(\"struct pattern type is not an ADT\")\n                                    .variant_of_res(cx.tables.qpath_res(qpath, pat.hir_id));\n             for fieldpat in field_pats {\n-                if fieldpat.node.is_shorthand {\n+                if fieldpat.is_shorthand {\n                     continue;\n                 }\n                 if fieldpat.span.ctxt().outer_expn_info().is_some() {\n@@ -173,9 +173,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                     // (Issue #49588)\n                     continue;\n                 }\n-                if let PatKind::Binding(_, _, ident, None) = fieldpat.node.pat.node {\n+                if let PatKind::Binding(_, _, ident, None) = fieldpat.pat.node {\n                     if cx.tcx.find_field_index(ident, &variant) ==\n-                       Some(cx.tcx.field_index(fieldpat.node.hir_id, cx.tables)) {\n+                       Some(cx.tcx.field_index(fieldpat.hir_id, cx.tables)) {\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n                                      fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant\", ident));\n@@ -1493,7 +1493,7 @@ impl EarlyLintPass for KeywordIdents {\n         self.check_tokens(cx, mac_def.stream());\n     }\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n-        self.check_tokens(cx, mac.node.tts.clone().into());\n+        self.check_tokens(cx, mac.tts.clone().into());\n     }\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: ast::Ident) {\n         self.check_ident_token(cx, UnderMacro(false), ident);"}, {"sha": "10223151f5c3ba2fb1d1059524f31567a780a68a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -645,9 +645,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     fields.iter()\n                           .map(|field| {\n                               FieldPattern {\n-                                  field: Field::new(self.tcx.field_index(field.node.hir_id,\n+                                  field: Field::new(self.tcx.field_index(field.hir_id,\n                                                                          self.tables)),\n-                                  pattern: self.lower_pattern(&field.node.pat),\n+                                  pattern: self.lower_pattern(&field.pat),\n                               }\n                           })\n                           .collect();"}, {"sha": "bd46ca4779a430fb56bc5a9bbfae1e9499bfa275", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -824,7 +824,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             |this| visit::walk_enum_def(this, enum_definition, generics, item_id))\n     }\n \n-    fn visit_mac(&mut self, mac: &Spanned<Mac_>) {\n+    fn visit_mac(&mut self, mac: &Mac) {\n         // when a new macro kind is added but the author forgets to set it up for expansion\n         // because that's the only part that won't cause a compiler error\n         self.session.diagnostic()"}, {"sha": "bca77621e553ed304bce307b2e90ed9e5045bb73", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1075,8 +1075,8 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n                 let adt = self.tables.pat_ty(pat).ty_adt_def().unwrap();\n                 let variant = adt.variant_of_res(res);\n                 for field in fields {\n-                    let use_ctxt = field.node.ident.span;\n-                    let index = self.tcx.field_index(field.node.hir_id, self.tables);\n+                    let use_ctxt = field.ident.span;\n+                    let index = self.tcx.field_index(field.hir_id, self.tables);\n                     self.check_field(use_ctxt, field.span, adt, &variant.fields[index]);\n                 }\n             }"}, {"sha": "71e26dac57c2a5f68b2cbad30031cc0e5201e2a8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -186,7 +186,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { ref attr, ref derives, after_derive, .. } =>\n                 (&attr.path, MacroKind::Attr, derives.clone(), after_derive),\n             InvocationKind::Bang { ref mac, .. } =>\n-                (&mac.node.path, MacroKind::Bang, Vec::new(), false),\n+                (&mac.path, MacroKind::Bang, Vec::new(), false),\n             InvocationKind::Derive { ref path, .. } =>\n                 (path, MacroKind::Derive, Vec::new(), false),\n             InvocationKind::DeriveContainer { ref derives, .. } => {"}, {"sha": "9068605b0753c4f09fc2ebfe2101d038a067d126", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -32,7 +32,7 @@ use syntax::print::pprust::{\n     ty_to_string\n };\n use syntax::ptr::P;\n-use syntax::source_map::{Spanned, DUMMY_SP, respan};\n+use syntax::source_map::{DUMMY_SP, respan};\n use syntax::walk_list;\n use syntax_pos::*;\n \n@@ -879,7 +879,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 };\n                 let variant = adt.variant_of_res(self.save_ctxt.get_path_res(p.id));\n \n-                for &Spanned { node: ref field, .. } in fields {\n+                for field in fields {\n                     if let Some(index) = self.tcx.find_field_index(field.ident, variant) {\n                         if !self.span.filter_generated(field.ident.span) {\n                             let span = self.span_from_span(field.ident.span);"}, {"sha": "99ae777bb631bd5b890d8ccba4e23c4c43923dcf", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -12,7 +12,6 @@ use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::subst::Kind;\n use syntax::ast;\n-use syntax::source_map::Spanned;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n use syntax_pos::hygiene::DesugaringKind;\n@@ -1036,7 +1035,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         &self,\n         pat: &'tcx hir::Pat,\n         qpath: &hir::QPath,\n-        fields: &'tcx [Spanned<hir::FieldPat>],\n+        fields: &'tcx [hir::FieldPat],\n         etc: bool,\n         expected: Ty<'tcx>,\n         def_bm: ty::BindingMode,\n@@ -1048,7 +1047,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             variant_ty\n         } else {\n             for field in fields {\n-                self.check_pat_walk(&field.node.pat, self.tcx.types.err, def_bm, discrim_span);\n+                self.check_pat_walk(&field.pat, self.tcx.types.err, def_bm, discrim_span);\n             }\n             return self.tcx.types.err;\n         };\n@@ -1206,7 +1205,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         pat_id: hir::HirId,\n         span: Span,\n         variant: &'tcx ty::VariantDef,\n-        fields: &'tcx [Spanned<hir::FieldPat>],\n+        fields: &'tcx [hir::FieldPat],\n         etc: bool,\n         def_bm: ty::BindingMode,\n     ) -> bool {\n@@ -1231,7 +1230,8 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n \n         let mut inexistent_fields = vec![];\n         // Typecheck each field.\n-        for &Spanned { node: ref field, span } in fields {\n+        for field in fields {\n+            let span = field.span;\n             let ident = tcx.adjust_ident(field.ident, variant.def_id);\n             let field_ty = match used_fields.entry(ident) {\n                 Occupied(occupied) => {"}, {"sha": "a88e32eb34dcd51011beaca14c1275b3879d80f6", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -283,7 +283,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n             }\n             hir::PatKind::Struct(_, ref fields, _) => {\n                 for field in fields {\n-                    self.visit_field_id(field.node.hir_id);\n+                    self.visit_field_id(field.hir_id);\n                 }\n             }\n             _ => {}"}, {"sha": "ec5d86b2c611da4076610301e4ee3c9f7b0512a9", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -3,7 +3,6 @@ use super::*;\n use syntax_pos::DUMMY_SP;\n use syntax::ast::*;\n use syntax::attr;\n-use syntax::source_map::dummy_spanned;\n use syntax::symbol::Symbol;\n use syntax::with_default_globals;\n \n@@ -181,7 +180,8 @@ fn test_parse_ok() {\n \n         let mi = attr::mk_name_value_item_str(\n             Ident::from_str(\"all\"),\n-            dummy_spanned(Symbol::intern(\"done\"))\n+            Symbol::intern(\"done\"),\n+            DUMMY_SP,\n         );\n         assert_eq!(Cfg::parse(&mi), Ok(name_value_cfg(\"all\", \"done\")));\n "}, {"sha": "d5becd2e1a94d7e67837aa2d5f6920cd8331ef09", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -29,7 +29,7 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use syntax::ast::{self, AttrStyle, Ident};\n use syntax::attr;\n use syntax::ext::base::MacroKind;\n-use syntax::source_map::{dummy_spanned, Spanned};\n+use syntax::source_map::DUMMY_SP;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::symbol::InternedString;\n use syntax_pos::{self, Pos, FileName};\n@@ -930,8 +930,8 @@ impl Attributes {\n             if attr.check_name(sym::enable) {\n                 if let Some(feat) = attr.value_str() {\n                     let meta = attr::mk_name_value_item_str(\n-                        Ident::with_empty_ctxt(sym::target_feature),\n-                        dummy_spanned(feat));\n+                        Ident::with_empty_ctxt(sym::target_feature), feat, DUMMY_SP\n+                    );\n                     if let Ok(feat_cfg) = Cfg::parse(&meta) {\n                         cfg &= feat_cfg;\n                     }\n@@ -4102,8 +4102,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n         PatKind::Struct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", qpath_to_string(name),\n-                fields.iter().map(|&Spanned { node: ref fp, .. }|\n-                                  format!(\"{}: {}\", fp.ident, name_from_pat(&*fp.pat)))\n+                fields.iter().map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n                              .collect::<Vec<String>>().join(\", \"),\n                 if etc { \", ..\" } else { \"\" }\n             )"}, {"sha": "3ae37f734b77ee41cdf1007772460a9505d854ba", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -571,7 +571,7 @@ impl Pat {\n \n         match &self.node {\n             PatKind::Ident(_, _, Some(p)) => p.walk(it),\n-            PatKind::Struct(_, fields, _) => fields.iter().all(|field| field.node.pat.walk(it)),\n+            PatKind::Struct(_, fields, _) => fields.iter().all(|field| field.pat.walk(it)),\n             PatKind::TupleStruct(_, s) | PatKind::Tuple(s) | PatKind::Slice(s) => {\n                 s.iter().all(|p| p.walk(it))\n             }\n@@ -609,6 +609,7 @@ pub struct FieldPat {\n     pub is_shorthand: bool,\n     pub attrs: ThinVec<Attribute>,\n     pub id: NodeId,\n+    pub span: Span,\n }\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n@@ -642,7 +643,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Path, Vec<Spanned<FieldPat>>, /* recovered */ bool),\n+    Struct(Path, Vec<FieldPat>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     TupleStruct(Path, Vec<P<Pat>>),\n@@ -939,8 +940,6 @@ pub struct Field {\n     pub id: NodeId,\n }\n \n-pub type SpannedIdent = Spanned<Ident>;\n-\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum BlockCheckMode {\n     Default,\n@@ -1287,19 +1286,18 @@ pub enum Movability {\n     Movable,\n }\n \n-pub type Mac = Spanned<Mac_>;\n-\n /// Represents a macro invocation. The `Path` indicates which macro\n /// is being invoked, and the vector of token-trees contains the source\n /// of the macro invocation.\n ///\n /// N.B., the additional ident for a `macro_rules`-style macro is actually\n /// stored in the enclosing item.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct Mac_ {\n+pub struct Mac {\n     pub path: Path,\n     pub delim: MacDelimiter,\n     pub tts: TokenStream,\n+    pub span: Span,\n     pub prior_type_ascription: Option<(Span, bool)>,\n }\n \n@@ -1310,7 +1308,7 @@ pub enum MacDelimiter {\n     Brace,\n }\n \n-impl Mac_ {\n+impl Mac {\n     pub fn stream(&self) -> TokenStream {\n         self.tts.clone()\n     }"}, {"sha": "85c661d320a7bdec799514d8fadf312e2bf85eba", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -13,7 +13,7 @@ use crate::ast::{AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n-use crate::source_map::{BytePos, Spanned, dummy_spanned};\n+use crate::source_map::{BytePos, Spanned, DUMMY_SP};\n use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crate::parse::parser::Parser;\n use crate::parse::{self, ParseSess, PResult};\n@@ -328,7 +328,9 @@ impl Attribute {\n             let comment = self.value_str().unwrap();\n             let meta = mk_name_value_item_str(\n                 Ident::with_empty_ctxt(sym::doc),\n-                dummy_spanned(Symbol::intern(&strip_doc_comment_decoration(&comment.as_str()))));\n+                Symbol::intern(&strip_doc_comment_decoration(&comment.as_str())),\n+                DUMMY_SP,\n+            );\n             f(&Attribute {\n                 id: self.id,\n                 style: self.style,\n@@ -345,9 +347,9 @@ impl Attribute {\n \n /* Constructors */\n \n-pub fn mk_name_value_item_str(ident: Ident, value: Spanned<Symbol>) -> MetaItem {\n-    let lit_kind = LitKind::Str(value.node, ast::StrStyle::Cooked);\n-    mk_name_value_item(ident, lit_kind, value.span)\n+pub fn mk_name_value_item_str(ident: Ident, str: Symbol, str_span: Span) -> MetaItem {\n+    let lit_kind = LitKind::Str(str, ast::StrStyle::Cooked);\n+    mk_name_value_item(ident, lit_kind, str_span)\n }\n \n pub fn mk_name_value_item(ident: Ident, lit_kind: LitKind, lit_span: Span) -> MetaItem {"}, {"sha": "edeca046c7b8fc9c0b8984e82cd035d68f23979f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1,6 +1,6 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n use crate::attr::{HasAttrs, Stability, Deprecation};\n-use crate::source_map::{SourceMap, Spanned, respan};\n+use crate::source_map::SourceMap;\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n use crate::ext::hygiene::{ExpnId, SyntaxContext, Transparency};\n@@ -916,7 +916,7 @@ pub fn expr_to_spanned_string<'a>(\n     cx: &'a mut ExtCtxt<'_>,\n     mut expr: P<ast::Expr>,\n     err_msg: &str,\n-) -> Result<Spanned<(Symbol, ast::StrStyle)>, Option<DiagnosticBuilder<'a>>> {\n+) -> Result<(Symbol, ast::StrStyle, Span), Option<DiagnosticBuilder<'a>>> {\n     // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n     expr.span = expr.span.apply_mark(cx.current_expansion.id);\n \n@@ -926,7 +926,7 @@ pub fn expr_to_spanned_string<'a>(\n \n     Err(match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n-            ast::LitKind::Str(s, style) => return Ok(respan(expr.span, (s, style))),\n+            ast::LitKind::Str(s, style) => return Ok((s, style, expr.span)),\n             ast::LitKind::Err(_) => None,\n             _ => Some(cx.struct_span_err(l.span, err_msg))\n         },\n@@ -940,7 +940,7 @@ pub fn expr_to_string(cx: &mut ExtCtxt<'_>, expr: P<ast::Expr>, err_msg: &str)\n     expr_to_spanned_string(cx, expr, err_msg)\n         .map_err(|err| err.map(|mut err| err.emit()))\n         .ok()\n-        .map(|s| s.node)\n+        .map(|(symbol, style, _)| (symbol, style))\n }\n \n /// Non-fatally assert that `tts` is empty. Note that this function"}, {"sha": "38f46ee207cae823687ecf15579303bed234f161", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -575,7 +575,7 @@ impl<'a> ExtCtxt<'a> {\n         self.pat(span, PatKind::TupleStruct(path, subpats))\n     }\n     pub fn pat_struct(&self, span: Span, path: ast::Path,\n-                  field_pats: Vec<Spanned<ast::FieldPat>>) -> P<ast::Pat> {\n+                      field_pats: Vec<ast::FieldPat>) -> P<ast::Pat> {\n         self.pat(span, PatKind::Struct(path, field_pats, false))\n     }\n     pub fn pat_tuple(&self, span: Span, pats: Vec<P<ast::Pat>>) -> P<ast::Pat> {"}, {"sha": "97983944931ba0271a482e0271be56b792a010f9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1,7 +1,7 @@\n use crate::ast::{self, Block, Ident, LitKind, NodeId, PatKind, Path};\n use crate::ast::{MacStmtStyle, StmtKind, ItemKind};\n use crate::attr::{self, HasAttrs};\n-use crate::source_map::{dummy_spanned, respan};\n+use crate::source_map::respan;\n use crate::config::StripUnconfigured;\n use crate::ext::base::*;\n use crate::ext::proc_macro::collect_derives;\n@@ -492,22 +492,21 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             InvocationKind::Bang { mac, .. } => match ext {\n                 SyntaxExtensionKind::Bang(expander) => {\n                     self.gate_proc_macro_expansion_kind(span, fragment_kind);\n-                    let tok_result = expander.expand(self.cx, span, mac.node.stream());\n+                    let tok_result = expander.expand(self.cx, span, mac.stream());\n                     let result =\n-                        self.parse_ast_fragment(tok_result, fragment_kind, &mac.node.path, span);\n+                        self.parse_ast_fragment(tok_result, fragment_kind, &mac.path, span);\n                     self.gate_proc_macro_expansion(span, &result);\n                     result\n                 }\n                 SyntaxExtensionKind::LegacyBang(expander) => {\n                     let prev = self.cx.current_expansion.prior_type_ascription;\n-                    self.cx.current_expansion.prior_type_ascription =\n-                        mac.node.prior_type_ascription;\n-                    let tok_result = expander.expand(self.cx, span, mac.node.stream());\n+                    self.cx.current_expansion.prior_type_ascription = mac.prior_type_ascription;\n+                    let tok_result = expander.expand(self.cx, span, mac.stream());\n                     let result = if let Some(result) = fragment_kind.make_from(tok_result) {\n                         result\n                     } else {\n                         let msg = format!(\"non-{kind} macro in {kind} position: {path}\",\n-                                          kind = fragment_kind.name(), path = mac.node.path);\n+                                          kind = fragment_kind.name(), path = mac.path);\n                         self.cx.span_err(span, &msg);\n                         self.cx.trace_macros_diag();\n                         fragment_kind.dummy(span)\n@@ -1251,13 +1250,15 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n                                         Ident::with_empty_ctxt(sym::file),\n-                                        dummy_spanned(file),\n+                                        file,\n+                                        DUMMY_SP,\n                                     ),\n                                 ),\n                                 ast::NestedMetaItem::MetaItem(\n                                     attr::mk_name_value_item_str(\n                                         Ident::with_empty_ctxt(sym::contents),\n-                                        dummy_spanned(src_interned),\n+                                        src_interned,\n+                                        DUMMY_SP,\n                                     ),\n                                 ),\n                             ];"}, {"sha": "2d05f8f0b00478b8a35f65851f097c7c9057af8c", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -14,12 +14,13 @@ use rustc_data_structures::fx::FxHashMap;\n \n pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     fn mac_placeholder() -> ast::Mac {\n-        dummy_spanned(ast::Mac_ {\n+        ast::Mac {\n             path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n             tts: TokenStream::empty().into(),\n             delim: ast::MacDelimiter::Brace,\n+            span: DUMMY_SP,\n             prior_type_ascription: None,\n-        })\n+        }\n     }\n \n     let ident = ast::Ident::invalid();"}, {"sha": "acafe327640d028a6784bf70534b965c3e2781d9", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -533,8 +533,8 @@ pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_mac<T: MutVisitor>(Spanned { node, span }: &mut Mac, vis: &mut T) {\n-    let Mac_ { path, delim: _, tts, .. } = node;\n+pub fn noop_visit_mac<T: MutVisitor>(mac: &mut Mac, vis: &mut T) {\n+    let Mac { path, delim: _, tts, span, prior_type_ascription: _ } = mac;\n     vis.visit_path(path);\n     vis.visit_tts(tts);\n     vis.visit_span(span);\n@@ -1042,10 +1042,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n         }\n         PatKind::Struct(path, fields, _etc) => {\n             vis.visit_path(path);\n-            for Spanned {\n-                node: FieldPat { ident, pat, is_shorthand: _, attrs, id },\n-                span\n-            } in fields {\n+            for FieldPat { ident, pat, is_shorthand: _, attrs, id, span } in fields {\n                 vis.visit_ident(ident);\n                 vis.visit_id(id);\n                 vis.visit_pat(pat);"}, {"sha": "f4b6a926734fb1ac01bb0f63af11a8f1294d135a", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -8,13 +8,13 @@ use crate::ast::{self, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode};\n use crate::ast::{Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm};\n use crate::ast::{Ty, TyKind, FunctionRetTy, Arg, FnDecl};\n use crate::ast::{BinOpKind, BinOp, UnOp};\n-use crate::ast::{Mac_, AnonConst, Field};\n+use crate::ast::{Mac, AnonConst, Field};\n \n use crate::parse::classify;\n use crate::parse::token::{self, Token};\n use crate::parse::diagnostics::{Error};\n use crate::print::pprust;\n-use crate::source_map::{self, respan, Span};\n+use crate::source_map::{self, Span};\n use crate::symbol::{kw, sym};\n use crate::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n \n@@ -1011,12 +1011,13 @@ impl<'a> Parser<'a> {\n                         // MACRO INVOCATION expression\n                         let (delim, tts) = self.expect_delimited_token_tree()?;\n                         hi = self.prev_span;\n-                        ex = ExprKind::Mac(respan(lo.to(hi), Mac_ {\n+                        ex = ExprKind::Mac(Mac {\n                             path,\n                             tts,\n                             delim,\n+                            span: lo.to(hi),\n                             prior_type_ascription: self.last_type_ascription,\n-                        }));\n+                        });\n                     } else if self.check(&token::OpenDelim(token::Brace)) {\n                         if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n                             return expr;"}, {"sha": "72819c9966035223fe24121f7c081470176dd6fe", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -10,7 +10,7 @@ use crate::ast::{Visibility, VisibilityKind, Mutability, FnDecl, FnHeader};\n use crate::ast::{ForeignItem, ForeignItemKind};\n use crate::ast::{Ty, TyKind, GenericBounds, TraitRef};\n use crate::ast::{EnumDef, VariantData, StructField, AnonConst};\n-use crate::ast::{Mac, Mac_, MacDelimiter};\n+use crate::ast::{Mac, MacDelimiter};\n use crate::ext::base::DummyResult;\n use crate::parse::token;\n use crate::parse::parser::maybe_append;\n@@ -530,12 +530,13 @@ impl<'a> Parser<'a> {\n             }\n \n             let hi = self.prev_span;\n-            let mac = respan(mac_lo.to(hi), Mac_ {\n+            let mac = Mac {\n                 path,\n                 tts,\n                 delim,\n+                span: mac_lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n-            });\n+            };\n             let item =\n                 self.mk_item(lo.to(hi), Ident::invalid(), ItemKind::Mac(mac), visibility, attrs);\n             return Ok(Some(item));\n@@ -604,12 +605,13 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::Semi)?;\n             }\n \n-            Ok(Some(respan(lo.to(self.prev_span), Mac_ {\n+            Ok(Some(Mac {\n                 path,\n                 tts,\n                 delim,\n+                span: lo.to(self.prev_span),\n                 prior_type_ascription: self.last_type_ascription,\n-            })))\n+            }))\n         } else {\n             Ok(None)\n         }"}, {"sha": "c3079d2da0ce7ed9efbd80f6de663d69f9d52e7e", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -2,7 +2,7 @@ use super::{Parser, PResult, PathStyle};\n \n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n-use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac_};\n+use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n use crate::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n use crate::parse::token::{self};\n use crate::print::pprust;\n@@ -275,12 +275,13 @@ impl<'a> Parser<'a> {\n     fn parse_pat_mac_invoc(&mut self, lo: Span, path: Path) -> PResult<'a, PatKind> {\n         self.bump();\n         let (delim, tts) = self.expect_delimited_token_tree()?;\n-        let mac = respan(lo.to(self.prev_span), Mac_ {\n+        let mac = Mac {\n             path,\n             tts,\n             delim,\n+            span: lo.to(self.prev_span),\n             prior_type_ascription: self.last_type_ascription,\n-        });\n+        };\n         Ok(PatKind::Mac(mac))\n     }\n \n@@ -487,7 +488,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the fields of a struct-like pattern.\n-    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<Spanned<FieldPat>>, bool)> {\n+    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<FieldPat>, bool)> {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut ate_comma = true;\n@@ -619,11 +620,7 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n-    fn parse_pat_field(\n-        &mut self,\n-        lo: Span,\n-        attrs: Vec<Attribute>\n-    ) -> PResult<'a, Spanned<FieldPat>> {\n+    fn parse_pat_field(&mut self, lo: Span, attrs: Vec<Attribute>) -> PResult<'a, FieldPat> {\n         // Check if a colon exists one ahead. This means we're parsing a fieldname.\n         let hi;\n         let (subpat, fieldname, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n@@ -658,15 +655,13 @@ impl<'a> Parser<'a> {\n             (subpat, fieldname, true)\n         };\n \n-        Ok(Spanned {\n+        Ok(FieldPat {\n+            ident: fieldname,\n+            pat: subpat,\n+            is_shorthand,\n+            attrs: attrs.into(),\n+            id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n-            node: FieldPat {\n-                ident: fieldname,\n-                pat: subpat,\n-                is_shorthand,\n-                attrs: attrs.into(),\n-                id: ast::DUMMY_NODE_ID,\n-           }\n         })\n     }\n "}, {"sha": "c911caba4cd414605f26d901afa47408dd9ce6d5", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -5,7 +5,7 @@ use super::path::PathStyle;\n use crate::ptr::P;\n use crate::{maybe_whole, ThinVec};\n use crate::ast::{self, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n-use crate::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac_, MacDelimiter};\n+use crate::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac, MacDelimiter};\n use crate::ext::base::DummyResult;\n use crate::parse::{classify, DirectoryOwnership};\n use crate::parse::diagnostics::Error;\n@@ -99,12 +99,13 @@ impl<'a> Parser<'a> {\n                 MacStmtStyle::NoBraces\n             };\n \n-            let mac = respan(lo.to(hi), Mac_ {\n+            let mac = Mac {\n                 path,\n                 tts,\n                 delim,\n+                span: lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n-            });\n+            };\n             let node = if delim == MacDelimiter::Brace ||\n                           self.token == token::Semi || self.token == token::Eof {\n                 StmtKind::Mac(P((mac, style, attrs.into())))"}, {"sha": "337702b8d30c57bae465d51907c28d4f09bdc3e7", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -4,9 +4,9 @@ use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n use crate::ptr::P;\n use crate::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n use crate::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n-use crate::ast::{Mutability, AnonConst, FnDecl, Mac_};\n+use crate::ast::{Mutability, AnonConst, FnDecl, Mac};\n use crate::parse::token::{self, Token};\n-use crate::source_map::{respan, Span};\n+use crate::source_map::Span;\n use crate::symbol::{kw};\n \n use rustc_target::spec::abi::Abi;\n@@ -175,13 +175,14 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::Not) {\n                 // Macro invocation in type position\n                 let (delim, tts) = self.expect_delimited_token_tree()?;\n-                let node = Mac_ {\n+                let mac = Mac {\n                     path,\n                     tts,\n                     delim,\n+                    span: lo.to(self.prev_span),\n                     prior_type_ascription: self.last_type_ascription,\n                 };\n-                TyKind::Mac(respan(lo.to(self.prev_span), node))\n+                TyKind::Mac(mac)\n             } else {\n                 // Just a type path or bound list (trait object type) starting with a trait.\n                 //   `Type`"}, {"sha": "9edc83a3594143caca13ccbe2dc2490c33f0f5e0", "filename": "src/libsyntax/parse/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftests.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -172,8 +172,8 @@ fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n     impl<'a> crate::visit::Visitor<'a> for PatIdentVisitor {\n         fn visit_pat(&mut self, p: &'a ast::Pat) {\n             match p.node {\n-                PatKind::Ident(_ , ref spannedident, _) => {\n-                    self.spans.push(spannedident.span.clone());\n+                PatKind::Ident(_ , ref ident, _) => {\n+                    self.spans.push(ident.span.clone());\n                 }\n                 _ => {\n                     crate::visit::walk_pat(self, p);\n@@ -273,7 +273,7 @@ fn ttdelim_span() {\n             \"foo!( fn main() { body } )\".to_string(), &sess).unwrap();\n \n         let tts: Vec<_> = match expr.node {\n-            ast::ExprKind::Mac(ref mac) => mac.node.stream().trees().collect(),\n+            ast::ExprKind::Mac(ref mac) => mac.stream().trees().collect(),\n             _ => panic!(\"not a macro\"),\n         };\n "}, {"sha": "5955b91384290fce930018d0579c9f41b4c3b27b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1067,7 +1067,7 @@ impl<'a> State<'a> {\n             }\n             ast::ForeignItemKind::Macro(ref m) => {\n                 self.print_mac(m);\n-                match m.node.delim {\n+                match m.delim {\n                     MacDelimiter::Brace => {},\n                     _ => self.s.word(\";\")\n                 }\n@@ -1341,7 +1341,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.node.delim {\n+                match mac.delim {\n                     MacDelimiter::Brace => {}\n                     _ => self.s.word(\";\"),\n                 }\n@@ -1554,7 +1554,7 @@ impl<'a> State<'a> {\n             }\n             ast::TraitItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.node.delim {\n+                match mac.delim {\n                     MacDelimiter::Brace => {}\n                     _ => self.s.word(\";\"),\n                 }\n@@ -1591,7 +1591,7 @@ impl<'a> State<'a> {\n             }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.print_mac(mac);\n-                match mac.node.delim {\n+                match mac.delim {\n                     MacDelimiter::Brace => {}\n                     _ => self.s.word(\";\"),\n                 }\n@@ -1749,11 +1749,11 @@ impl<'a> State<'a> {\n \n     crate fn print_mac(&mut self, m: &ast::Mac) {\n         self.print_mac_common(\n-            Some(MacHeader::Path(&m.node.path)),\n+            Some(MacHeader::Path(&m.path)),\n             true,\n             None,\n-            m.node.delim.to_token(),\n-            m.node.stream(),\n+            m.delim.to_token(),\n+            m.stream(),\n             true,\n             m.span,\n         );\n@@ -2367,14 +2367,14 @@ impl<'a> State<'a> {\n                     Consistent, &fields[..],\n                     |s, f| {\n                         s.cbox(INDENT_UNIT);\n-                        if !f.node.is_shorthand {\n-                            s.print_ident(f.node.ident);\n+                        if !f.is_shorthand {\n+                            s.print_ident(f.ident);\n                             s.word_nbsp(\":\");\n                         }\n-                        s.print_pat(&f.node.pat);\n+                        s.print_pat(&f.pat);\n                         s.end();\n                     },\n-                    |f| f.node.pat.span);\n+                    |f| f.pat.span);\n                 if etc {\n                     if !fields.is_empty() { self.word_space(\",\"); }\n                     self.s.word(\"..\");"}, {"sha": "6648347d4aef543aba90e9ebcb1c9794c19da6bb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -442,9 +442,9 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         PatKind::Struct(ref path, ref fields, _) => {\n             visitor.visit_path(path, pattern.id);\n             for field in fields {\n-                walk_list!(visitor, visit_attribute, field.node.attrs.iter());\n-                visitor.visit_ident(field.node.ident);\n-                visitor.visit_pat(&field.node.pat)\n+                walk_list!(visitor, visit_attribute, field.attrs.iter());\n+                visitor.visit_ident(field.ident);\n+                visitor.visit_pat(&field.pat)\n             }\n         }\n         PatKind::Tuple(ref elems) => {\n@@ -663,7 +663,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n }\n \n pub fn walk_mac<'a, V: Visitor<'a>>(visitor: &mut V, mac: &'a Mac) {\n-    visitor.visit_path(&mac.node.path, DUMMY_NODE_ID);\n+    visitor.visit_path(&mac.path, DUMMY_NODE_ID);\n }\n \n pub fn walk_anon_const<'a, V: Visitor<'a>>(visitor: &mut V, constant: &'a AnonConst) {"}, {"sha": "6301283460ac7460a333fb0bbb16c6abee796ed2", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -1,7 +1,6 @@\n use errors::{Applicability, DiagnosticBuilder};\n \n use syntax::ast::{self, *};\n-use syntax::source_map::Spanned;\n use syntax::ext::base::*;\n use syntax::parse::token::{self, TokenKind};\n use syntax::parse::parser::Parser;\n@@ -25,7 +24,7 @@ pub fn expand_assert<'cx>(\n     };\n \n     let sp = sp.apply_mark(cx.current_expansion.id);\n-    let panic_call = Mac_ {\n+    let panic_call = Mac {\n         path: Path::from_ident(Ident::new(sym::panic, sp)),\n         tts: custom_message.unwrap_or_else(|| {\n             TokenStream::from(TokenTree::token(\n@@ -37,17 +36,15 @@ pub fn expand_assert<'cx>(\n             ))\n         }).into(),\n         delim: MacDelimiter::Parenthesis,\n+        span: sp,\n         prior_type_ascription: None,\n     };\n     let if_expr = cx.expr_if(\n         sp,\n         cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)),\n         cx.expr(\n             sp,\n-            ExprKind::Mac(Spanned {\n-                span: sp,\n-                node: panic_call,\n-            }),\n+            ExprKind::Mac(panic_call),\n         ),\n         None,\n     );"}, {"sha": "d080dc37a9268fb8af78fb3682f1227ad5aeaeec", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -187,7 +187,7 @@ use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{VariantData, GenericParamKind, GenericArg};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt, SpecialDerives};\n-use syntax::source_map::{self, respan};\n+use syntax::source_map::respan;\n use syntax::util::map_in_place::MapInPlace;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1610,15 +1610,13 @@ impl<'a> TraitDef<'a> {\n                         if ident.is_none() {\n                             cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");\n                         }\n-                        source_map::Spanned {\n+                        ast::FieldPat {\n+                            ident: ident.unwrap(),\n+                            is_shorthand: false,\n+                            attrs: ThinVec::new(),\n+                            id: ast::DUMMY_NODE_ID,\n                             span: pat.span.with_ctxt(self.span.ctxt()),\n-                            node: ast::FieldPat {\n-                                id: ast::DUMMY_NODE_ID,\n-                                ident: ident.unwrap(),\n-                                pat,\n-                                is_shorthand: false,\n-                                attrs: ThinVec::new(),\n-                            },\n+                            pat,\n                         }\n                     })\n                     .collect();"}, {"sha": "83764205a198e340aa0717e90d0454f561d67e5b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8fabb4ac16b30c98968b768b860d2c2e1583d8/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=6e8fabb4ac16b30c98968b768b860d2c2e1583d8", "patch": "@@ -846,9 +846,9 @@ pub fn expand_preparsed_format_args(\n \n     let msg = \"format argument must be a string literal\";\n     let fmt_sp = efmt.span;\n-    let fmt = match expr_to_spanned_string(ecx, efmt, msg) {\n+    let (fmt_str, fmt_style, fmt_span) = match expr_to_spanned_string(ecx, efmt, msg) {\n         Ok(mut fmt) if append_newline => {\n-            fmt.node.0 = Symbol::intern(&format!(\"{}\\n\", fmt.node.0));\n+            fmt.0 = Symbol::intern(&format!(\"{}\\n\", fmt.0));\n             fmt\n         }\n         Ok(fmt) => fmt,\n@@ -875,7 +875,7 @@ pub fn expand_preparsed_format_args(\n         _ => (false, None),\n     };\n \n-    let str_style = match fmt.node.1 {\n+    let str_style = match fmt_style {\n         ast::StrStyle::Cooked => None,\n         ast::StrStyle::Raw(raw) => {\n             Some(raw as usize)\n@@ -981,7 +981,7 @@ pub fn expand_preparsed_format_args(\n         vec![]\n     };\n \n-    let fmt_str = &*fmt.node.0.as_str();  // for the suggestions below\n+    let fmt_str = &*fmt_str.as_str();  // for the suggestions below\n     let mut parser = parse::Parser::new(fmt_str, str_style, skips, append_newline);\n \n     let mut unverified_pieces = Vec::new();\n@@ -995,23 +995,23 @@ pub fn expand_preparsed_format_args(\n \n     if !parser.errors.is_empty() {\n         let err = parser.errors.remove(0);\n-        let sp = fmt.span.from_inner(err.span);\n+        let sp = fmt_span.from_inner(err.span);\n         let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\",\n                                                      err.description));\n         e.span_label(sp, err.label + \" in format string\");\n         if let Some(note) = err.note {\n             e.note(&note);\n         }\n         if let Some((label, span)) = err.secondary_label {\n-            let sp = fmt.span.from_inner(span);\n+            let sp = fmt_span.from_inner(span);\n             e.span_label(sp, label);\n         }\n         e.emit();\n         return DummyResult::raw_expr(sp, true);\n     }\n \n     let arg_spans = parser.arg_places.iter()\n-        .map(|span| fmt.span.from_inner(*span))\n+        .map(|span| fmt_span.from_inner(*span))\n         .collect();\n \n     let named_pos: FxHashSet<usize> = names.values().cloned().collect();\n@@ -1034,7 +1034,7 @@ pub fn expand_preparsed_format_args(\n         str_pieces: Vec::with_capacity(unverified_pieces.len()),\n         all_pieces_simple: true,\n         macsp,\n-        fmtsp: fmt.span,\n+        fmtsp: fmt_span,\n         invalid_refs: Vec::new(),\n         arg_spans,\n         arg_with_formatting: Vec::new(),"}]}