{"sha": "225f353aa26329260b8c7f69305f616a9edaad70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNWYzNTNhYTI2MzI5MjYwYjhjN2Y2OTMwNWY2MTZhOWVkYWFkNzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-10T14:48:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-10T14:48:04Z"}, "message": "Merge #4412\n\n4412: infer: Make expected rhs type for plain assign the lhs type r=flodiebold a=kiljacken\n\nThis fixes an issue where the following code sample would fail to infer\r\nthe type contained in the option:\r\n```rust\r\nfn main() {\r\n    let mut end = None; // Was Option<{unknown}>, is now Option<bool>\r\n    loop {\r\n        end = Some(true);\r\n    }\r\n}\r\n```\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>", "tree": {"sha": "3557b041edfbab6a1c85a1701d7d322b829a43a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3557b041edfbab6a1c85a1701d7d322b829a43a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225f353aa26329260b8c7f69305f616a9edaad70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeuBQkCRBK7hj4Ov3rIwAAdHIIADk85wKyRlAxIAxPLK1tUpv+\nI9Gx2P0gXZr3Z4fEV8dMpFpaX5IiebTvUZoClL7sEg2KGGs94ba4N726fY6EAjMZ\nF2qUw+pFJG9QMezMpSJOlPRb2CvdwWLABk4QwITCYc6Mjp1F+hmTNRoW5ll7Jx3M\ngdeWOLjMNkzGAvWhsEwyN5ppYTbs//XTarwK4Ib20cTB+WGKryZE48msSdxk336r\nD9mVQChTNzUAHJ05P3v+t3gl3WXeVCWv5YzxcjKob1tjvOV5ZNL7km3f32EL9Wrz\nwdu0w7cZqd2ggWlRNplh5RtTrj+wjp6bfmco7pfj20CySDZqDVUxMPMA1cqiMAw=\n=0s1F\n-----END PGP SIGNATURE-----\n", "payload": "tree 3557b041edfbab6a1c85a1701d7d322b829a43a6\nparent 4578154b608fa075595103d0c933da60d55b25c8\nparent 85d44cad45761a55741ff406e23f2e40b0f24b88\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589122084 +0000\ncommitter GitHub <noreply@github.com> 1589122084 +0000\n\nMerge #4412\n\n4412: infer: Make expected rhs type for plain assign the lhs type r=flodiebold a=kiljacken\n\nThis fixes an issue where the following code sample would fail to infer\r\nthe type contained in the option:\r\n```rust\r\nfn main() {\r\n    let mut end = None; // Was Option<{unknown}>, is now Option<bool>\r\n    loop {\r\n        end = Some(true);\r\n    }\r\n}\r\n```\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225f353aa26329260b8c7f69305f616a9edaad70", "html_url": "https://github.com/rust-lang/rust/commit/225f353aa26329260b8c7f69305f616a9edaad70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225f353aa26329260b8c7f69305f616a9edaad70/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4578154b608fa075595103d0c933da60d55b25c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4578154b608fa075595103d0c933da60d55b25c8", "html_url": "https://github.com/rust-lang/rust/commit/4578154b608fa075595103d0c933da60d55b25c8"}, {"sha": "85d44cad45761a55741ff406e23f2e40b0f24b88", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d44cad45761a55741ff406e23f2e40b0f24b88", "html_url": "https://github.com/rust-lang/rust/commit/85d44cad45761a55741ff406e23f2e40b0f24b88"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "0870874fce6cd0544a9e93794ba8e81e5dfd9365", "filename": "crates/ra_hir_ty/src/op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/225f353aa26329260b8c7f69305f616a9edaad70/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225f353aa26329260b8c7f69305f616a9edaad70/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fop.rs?ref=225f353aa26329260b8c7f69305f616a9edaad70", "patch": "@@ -30,7 +30,8 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::LogicOp(..) => Ty::simple(TypeCtor::Bool),\n-        BinaryOp::Assignment { op: None } | BinaryOp::CmpOp(CmpOp::Eq { .. }) => match lhs_ty {\n+        BinaryOp::Assignment { op: None } => lhs_ty,\n+        BinaryOp::CmpOp(CmpOp::Eq { .. }) => match lhs_ty {\n             Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n                 TypeCtor::Int(..)\n                 | TypeCtor::Float(..)"}, {"sha": "322838f020a9f97e794c83687b73a162efc932db", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/225f353aa26329260b8c7f69305f616a9edaad70/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225f353aa26329260b8c7f69305f616a9edaad70/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=225f353aa26329260b8c7f69305f616a9edaad70", "patch": "@@ -1787,3 +1787,32 @@ fn main() {\n     \"###\n     )\n }\n+\n+#[test]\n+fn infer_generic_from_later_assignment() {\n+    assert_snapshot!(\n+        infer(r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+\n+fn test() {\n+    let mut end = None;\n+    loop {\n+        end = Some(true);\n+    }\n+}\n+\"#),\n+        @r###\"\n+    60..130 '{     ...   } }': ()\n+    70..77 'mut end': Option<bool>\n+    80..84 'None': Option<bool>\n+    90..128 'loop {...     }': !\n+    95..128 '{     ...     }': ()\n+    105..108 'end': Option<bool>\n+    105..121 'end = ...(true)': ()\n+    111..115 'Some': Some<bool>(bool) -> Option<bool>\n+    111..121 'Some(true)': Option<bool>\n+    116..120 'true': bool\n+    \"###\n+    );\n+}"}]}