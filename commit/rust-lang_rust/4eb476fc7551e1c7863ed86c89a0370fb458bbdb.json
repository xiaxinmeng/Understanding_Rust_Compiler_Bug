{"sha": "4eb476fc7551e1c7863ed86c89a0370fb458bbdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjQ3NmZjNzU1MWUxYzc4NjNlZDg2Yzg5YTAzNzBmYjQ1OGJiZGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-20T22:46:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-20T22:50:43Z"}, "message": "stdlib: Modify union-find to guarantee that root nodes are always less than or equal to leaf nodes; add a \"prune\" method", "tree": {"sha": "87c217f455112c59daf4f151209be066d5889350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c217f455112c59daf4f151209be066d5889350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb476fc7551e1c7863ed86c89a0370fb458bbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb476fc7551e1c7863ed86c89a0370fb458bbdb", "html_url": "https://github.com/rust-lang/rust/commit/4eb476fc7551e1c7863ed86c89a0370fb458bbdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb476fc7551e1c7863ed86c89a0370fb458bbdb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c083b14cde0b62c41a8488beded0527ffe4765", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c083b14cde0b62c41a8488beded0527ffe4765", "html_url": "https://github.com/rust-lang/rust/commit/36c083b14cde0b62c41a8488beded0527ffe4765"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "c7513a7b9015d4608aa8a60cea8b8693d3878d27", "filename": "src/lib/ufind.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4eb476fc7551e1c7863ed86c89a0370fb458bbdb/src%2Flib%2Fufind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb476fc7551e1c7863ed86c89a0370fb458bbdb/src%2Flib%2Fufind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fufind.rs?ref=4eb476fc7551e1c7863ed86c89a0370fb458bbdb", "patch": "@@ -2,6 +2,8 @@ import option::none;\n import option::some;\n \n // A very naive implementation of union-find with unsigned integer nodes.\n+// Maintains the invariant that the root of a node is always equal to or less\n+// than the node itself.\n \n type node = option::t[uint];\n type ufind = rec(mutable vec[mutable node] nodes);\n@@ -20,18 +22,27 @@ fn make_set(&ufind ufnd) -> uint {\n \n fn find(&ufind ufnd, uint n) -> uint {\n     alt (ufnd.nodes.(n)) {\n-    case (none[uint]) { ret n; }\n-    case (some[uint](?m)) {\n-        // TODO: \"be\"\n-        ret find(ufnd, m);\n-    }\n+        case (none[uint]) { ret n; }\n+        case (some[uint](?m)) { be find(ufnd, m); }\n     }\n }\n \n fn union(&ufind ufnd, uint m, uint n) {\n     auto m_root = find(ufnd, m);\n     auto n_root = find(ufnd, n);\n-    auto ptr = some[uint](n_root);\n-    ufnd.nodes.(m_root) = ptr;\n+    if (m_root < n_root) {\n+        ufnd.nodes.(n_root) = some[uint](m_root);\n+    } else {\n+        ufnd.nodes.(m_root) = some[uint](n_root);\n+    }\n+}\n+\n+// Removes all sets with IDs greater than or equal to the given value.\n+fn prune(&ufind ufnd, uint n) {\n+    // TODO: Use \"slice\" once we get rid of \"mutable?\"\n+    while (n != 0u) {\n+        vec::pop[node](ufnd.nodes);\n+        n -= 1u;\n+    }\n }\n "}]}