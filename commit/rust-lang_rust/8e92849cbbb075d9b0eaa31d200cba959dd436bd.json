{"sha": "8e92849cbbb075d9b0eaa31d200cba959dd436bd", "node_id": "C_kwDOAAsO6NoAKDhlOTI4NDljYmJiMDc1ZDliMGVhYTMxZDIwMGNiYTk1OWRkNDM2YmQ", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-14T21:17:38Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-17T00:05:59Z"}, "message": "changes from review", "tree": {"sha": "1080633b57d104ad0fee71d4ad32ff1d1d82d95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1080633b57d104ad0fee71d4ad32ff1d1d82d95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e92849cbbb075d9b0eaa31d200cba959dd436bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e92849cbbb075d9b0eaa31d200cba959dd436bd", "html_url": "https://github.com/rust-lang/rust/commit/8e92849cbbb075d9b0eaa31d200cba959dd436bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e92849cbbb075d9b0eaa31d200cba959dd436bd/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c183110cc26abb506dba0a4def917735fb6eb6f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c183110cc26abb506dba0a4def917735fb6eb6f0", "html_url": "https://github.com/rust-lang/rust/commit/c183110cc26abb506dba0a4def917735fb6eb6f0"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "f4e03ad8c593d0d9916755d455d2ea25d2f570a0", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -690,7 +690,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert!(self.tcx.is_static(def_id));\n                 assert!(!self.tcx.is_thread_local_static(def_id));\n                 // Use size and align of the type.\n-                let ty = self.tcx.type_of(def_id).subst_identity();\n+                let ty = self\n+                    .tcx\n+                    .type_of(def_id)\n+                    .no_bound_vars()\n+                    .expect(\"statics should not have generic parameters\");\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n                 assert!(layout.is_sized());\n                 (layout.size, layout.align.abi, AllocKind::LiveData)"}, {"sha": "417c62f69dbc6cabbc7f6cc38c80f63d1dc4affc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -450,7 +450,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         .into()\n                     }\n                     (&GenericParamDefKind::Const { .. }, hir::GenericArg::Infer(inf)) => {\n-                        let ty = tcx.at(self.span).type_of(param.def_id).subst_identity();\n+                        let ty = tcx\n+                            .at(self.span)\n+                            .type_of(param.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\");\n                         if self.astconv.allow_ty_infer() {\n                             self.astconv.ct_infer(ty, Some(param), inf.span).into()\n                         } else {\n@@ -503,7 +507,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n-                        let ty = tcx.at(self.span).type_of(param.def_id).subst_identity();\n+                        let ty = tcx\n+                            .at(self.span)\n+                            .type_of(param.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\");\n                         if ty.references_error() {\n                             return tcx.const_error(ty).into();\n                         }"}, {"sha": "879a64fc0fb9fb54a6bd50657ca85c34a4641fed", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -2037,7 +2037,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                    args: &[hir::Expr<'_>],\n                                    kind: CallableKind| {\n             let arg_idx = args.iter().position(|a| a.hir_id == expr.hir_id).unwrap();\n-            let fn_ty = self.tcx.type_of(def_id).0;\n+            let fn_ty = self.tcx.type_of(def_id).skip_binder();\n             if !fn_ty.is_fn() {\n                 return;\n             }"}, {"sha": "e9c899f95ea784cce0505b5e4eafd06887a34ec1", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -1228,7 +1228,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let tcx = self.fcx.tcx();\n                         self.fcx\n                             .ct_infer(\n-                                tcx.type_of(param.def_id).subst_identity(),\n+                                tcx.type_of(param.def_id)\n+                                    .no_bound_vars()\n+                                    .expect(\"const parameter types cannot be generic\"),\n                                 Some(param),\n                                 inf.span,\n                             )"}, {"sha": "f7de55c989fa3fe01407c054d726c98efb038dff", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -386,7 +386,9 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                         let tcx = self.cfcx.tcx();\n                         self.cfcx\n                             .ct_infer(\n-                                tcx.type_of(param.def_id).subst_identity(),\n+                                tcx.type_of(param.def_id)\n+                                    .no_bound_vars()\n+                                    .expect(\"const parameter types cannot be generic\"),\n                                 Some(param),\n                                 inf.span,\n                             )"}, {"sha": "2d79466c7f6f45e4e786533be167e464467fd421", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -1958,7 +1958,14 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n                     span,\n                 };\n-                self.next_const_var(self.tcx.type_of(param.def_id).subst_identity(), origin).into()\n+                self.next_const_var(\n+                    self.tcx\n+                        .type_of(param.def_id)\n+                        .no_bound_vars()\n+                        .expect(\"const parameter types cannot be generic\"),\n+                    origin,\n+                )\n+                .into()\n             }\n         })\n     }"}, {"sha": "aa316b2dadb0447ecde9f0710000fb3dc81c4ad0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -1167,7 +1167,13 @@ impl<'tcx> InferCtxt<'tcx> {\n                         val: ConstVariableValue::Unknown { universe: self.universe() },\n                     });\n                 self.tcx\n-                    .mk_const(const_var_id, self.tcx.type_of(param.def_id).subst_identity())\n+                    .mk_const(\n+                        const_var_id,\n+                        self.tcx\n+                            .type_of(param.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\"),\n+                    )\n                     .into()\n             }\n         }"}, {"sha": "c4632e91b336df1f54be73058e2784251b10fa55", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -71,7 +71,10 @@ impl<'tcx> Const<'tcx> {\n         let expr = &tcx.hir().body(body_id).value;\n         debug!(?expr);\n \n-        let ty = tcx.type_of(def.def_id_for_type_of()).subst_identity();\n+        let ty = tcx\n+            .type_of(def.def_id_for_type_of())\n+            .no_bound_vars()\n+            .expect(\"const parameter types cannot be generic\");\n \n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,"}, {"sha": "50e985ab687e5453ac5c06d3f54f597665cbf2a4", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -2002,7 +2002,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             GenericParamDefKind::Const { .. } => self\n                 .mk_const(\n                     ParamConst { index: param.index, name: param.name },\n-                    self.type_of(param.def_id).subst_identity(),\n+                    self.type_of(param.def_id)\n+                        .no_bound_vars()\n+                        .expect(\"const parameter types cannot be generic\"),\n                 )\n                 .into(),\n         }"}, {"sha": "e5e993954385a366503953286d71228780f78d5b", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -557,7 +557,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                         ty::INNERMOST,\n                                         ty::BoundVar::from_usize(bound_vars.len() - 1),\n                                     ),\n-                                    tcx.type_of(param.def_id).subst_identity(),\n+                                    tcx.type_of(param.def_id)\n+                                        .no_bound_vars()\n+                                        .expect(\"const parameter types cannot be generic\"),\n                                 )\n                                 .into()\n                             }"}, {"sha": "43679d05914c845bf99975d0acddb61b476cd35e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e92849cbbb075d9b0eaa31d200cba959dd436bd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e92849cbbb075d9b0eaa31d200cba959dd436bd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8e92849cbbb075d9b0eaa31d200cba959dd436bd", "patch": "@@ -508,7 +508,12 @@ fn clean_generic_param_def<'tcx>(\n             GenericParamDefKind::Const {\n                 did: def.def_id,\n                 ty: Box::new(clean_middle_ty(\n-                    ty::Binder::dummy(cx.tcx.type_of(def.def_id).subst_identity()),\n+                    ty::Binder::dummy(\n+                        cx.tcx\n+                            .type_of(def.def_id)\n+                            .no_bound_vars()\n+                            .expect(\"const parameter types cannot be generic\"),\n+                    ),\n                     cx,\n                     Some(def.def_id),\n                 )),"}]}