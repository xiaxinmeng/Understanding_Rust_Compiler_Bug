{"sha": "189d2065229944258fe8f621c5e1ec4386b637d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OWQyMDY1MjI5OTQ0MjU4ZmU4ZjYyMWM1ZTFlYzQzODZiNjM3ZDQ=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-03-15T03:53:43Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-03-15T17:16:18Z"}, "message": "Fix error after rebase", "tree": {"sha": "3d5e72853d15cafe4709ba3bc8bb349acf3e935a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5e72853d15cafe4709ba3bc8bb349acf3e935a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/189d2065229944258fe8f621c5e1ec4386b637d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/189d2065229944258fe8f621c5e1ec4386b637d4", "html_url": "https://github.com/rust-lang/rust/commit/189d2065229944258fe8f621c5e1ec4386b637d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/189d2065229944258fe8f621c5e1ec4386b637d4/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22eaffe71ae1665a0596d67acca7748276534dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/22eaffe71ae1665a0596d67acca7748276534dc9", "html_url": "https://github.com/rust-lang/rust/commit/22eaffe71ae1665a0596d67acca7748276534dc9"}], "stats": {"total": 64, "additions": 25, "deletions": 39}, "files": [{"sha": "ce816b6229e4b1a09b94b9b6c7785ebeaf8bbb93", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=189d2065229944258fe8f621c5e1ec4386b637d4", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n-            ExprKind::Closure { closure_id, substs, upvars, movability, fake_reads } => {\n+            ExprKind::Closure { closure_id, substs, upvars, movability, ref fake_reads } => {\n                 // Convert the closure fake reads, if any, from `ExprRef` to mir `Place`\n                 // and push the fake reads.\n                 // This must come before creating the operands. This is required in case\n@@ -179,7 +179,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //     match x { _ => () } // fake read of `x`\n                 // };\n                 // ```\n-\n                 // FIXME(RFC2229): Remove feature gate once diagnostics are improved\n                 if this.tcx.features().capture_disjoint_fields {\n                     for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n@@ -193,8 +192,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 place_builder_resolved.into_place(this.tcx, this.typeck_results);\n                             this.cfg.push_fake_read(\n                                 block,\n-                                this.source_info(this.tcx.hir().span(hir_id)),\n-                                cause,\n+                                this.source_info(this.tcx.hir().span(*hir_id)),\n+                                *cause,\n                                 mir_place,\n                             );\n                         }"}, {"sha": "73fd3f0feb59117b2d308794d4393a9b96864660", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=189d2065229944258fe8f621c5e1ec4386b637d4", "patch": "@@ -97,8 +97,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let scrutinee_place =\n             unpack!(block = self.lower_scrutinee(block, scrutinee, scrutinee_span,));\n \n-        let mut arm_candidates =\n-            self.create_match_candidates(scrutinee_place.clone(), &arms.clone());\n+        let mut arm_candidates = self.create_match_candidates(scrutinee_place.clone(), &arms);\n \n         let match_has_guard = arms.iter().any(|arm| arm.guard.is_some());\n         let mut candidates =\n@@ -244,8 +243,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let arm_source_info = self.source_info(arm.span);\n                 let arm_scope = (arm.scope, arm_source_info);\n                 self.in_scope(arm_scope, arm.lint_level, |this| {\n-                    let body = arm.body;\n-\n                     // `try_upvars_resolved` may fail if it is unable to resolve the given\n                     // `PlaceBuilder` inside a closure. In this case, we don't want to include\n                     // a scrutinee place. `scrutinee_place_builder` will fail to be resolved\n@@ -264,7 +261,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         .try_upvars_resolved(this.tcx, this.typeck_results)\n                     {\n                         scrutinee_place =\n-                            scrutinee_builder.clone().into_place(this.tcx, this.typeck_results);\n+                            scrutinee_builder.into_place(this.tcx, this.typeck_results);\n                         opt_scrutinee_place = Some((Some(&scrutinee_place), scrutinee_span));\n                     }\n                     let scope = this.declare_bindings(\n@@ -524,9 +521,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         if let Ok(match_pair_resolved) =\n                             initializer.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n                         {\n-                            let place = match_pair_resolved\n-                                .clone()\n-                                .into_place(self.tcx, self.typeck_results);\n+                            let place =\n+                                match_pair_resolved.into_place(self.tcx, self.typeck_results);\n                             *match_place = Some(place);\n                         }\n                     } else {\n@@ -1480,7 +1476,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             TestKind::Switch { adt_def: _, ref mut variants } => {\n                 for candidate in candidates.iter() {\n-                    if !self.add_variants_to_switch(&match_place.clone(), candidate, variants) {\n+                    if !self.add_variants_to_switch(&match_place, candidate, variants) {\n                         break;\n                     }\n                 }\n@@ -1493,8 +1489,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             if let Ok(match_place_resolved) =\n                 match_place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n             {\n-                let resolved_place =\n-                    match_place_resolved.clone().into_place(self.tcx, self.typeck_results);\n+                let resolved_place = match_place_resolved.into_place(self.tcx, self.typeck_results);\n                 fb.insert(resolved_place);\n             }\n         }\n@@ -1577,7 +1572,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             target_blocks\n         };\n \n-        self.perform_test(block, match_place.clone(), &test, make_target_blocks);\n+        self.perform_test(block, match_place, &test, make_target_blocks);\n     }\n \n     /// Determine the fake borrows that are needed from a set of places that\n@@ -1811,9 +1806,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n                 Guard::IfLet(pat, scrutinee) => {\n                     let scrutinee_span = scrutinee.span;\n-                    let scrutinee_place_builder = unpack!(\n-                        block = self.lower_scrutinee(block, scrutinee.clone(), scrutinee_span)\n-                    );\n+                    let scrutinee_place_builder =\n+                        unpack!(block = self.lower_scrutinee(block, scrutinee, scrutinee_span));\n                     let mut guard_candidate =\n                         Candidate::new(scrutinee_place_builder.clone(), &pat, false);\n                     let wildcard = Pat::wildcard_from_ty(pat.ty);\n@@ -1827,12 +1821,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                     let mut opt_scrutinee_place: Option<(Option<&Place<'tcx>>, Span)> = None;\n                     let scrutinee_place: Place<'tcx>;\n-                    if let Ok(scrutinee_builder) = scrutinee_place_builder\n-                        .clone()\n-                        .try_upvars_resolved(self.tcx, self.typeck_results)\n+                    if let Ok(scrutinee_builder) =\n+                        scrutinee_place_builder.try_upvars_resolved(self.tcx, self.typeck_results)\n                     {\n                         scrutinee_place =\n-                            scrutinee_builder.clone().into_place(self.tcx, self.typeck_results);\n+                            scrutinee_builder.into_place(self.tcx, self.typeck_results);\n                         opt_scrutinee_place = Some((Some(&scrutinee_place), scrutinee_span));\n                     }\n                     self.declare_bindings("}, {"sha": "6820d4ba35ae37b594a185c53134ff61d691bb17", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=189d2065229944258fe8f621c5e1ec4386b637d4", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) {\n         let place: Place<'tcx>;\n         if let Ok(test_place_builder) =\n-            place_builder.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n+            place_builder.try_upvars_resolved(self.tcx, self.typeck_results)\n         {\n             place = test_place_builder.into_place(self.tcx, self.typeck_results);\n         } else {"}, {"sha": "43d63d59ed964c8ad6b90ec937b006d75170a797", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=189d2065229944258fe8f621c5e1ec4386b637d4", "patch": "@@ -455,28 +455,19 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n                 );\n \n                 // Convert the closure fake reads, if any, from hir `Place` to ExprRef\n-                let fake_reads = match self.typeck_results().closure_fake_reads.get(&def_id) {\n+                let fake_reads = match self.typeck_results.closure_fake_reads.get(&def_id) {\n                     Some(fake_reads) => fake_reads\n                         .iter()\n                         .map(|(place, cause, hir_id)| {\n-                            (\n-                                self.arena\n-                                    .alloc(self.convert_captured_hir_place(expr, place.clone())),\n-                                *cause,\n-                                *hir_id,\n-                            )\n+                            let expr = self.convert_captured_hir_place(expr, place.clone());\n+                            let expr_ref: &'thir Expr<'thir, 'tcx> = self.arena.alloc(expr);\n+                            (expr_ref, *cause, *hir_id)\n                         })\n                         .collect(),\n                     None => Vec::new(),\n                 };\n \n-                ExprKind::Closure {\n-                    closure_id: def_id,\n-                    substs,\n-                    upvars,\n-                    movability,\n-                    fake_reads: fake_reads,\n-                }\n+                ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }\n             }\n \n             hir::ExprKind::Path(ref qpath) => {"}, {"sha": "6f20195db0b5eee6d09bbeb2a5d7c188f23c66ac", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189d2065229944258fe8f621c5e1ec4386b637d4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=189d2065229944258fe8f621c5e1ec4386b637d4", "patch": "@@ -281,7 +281,7 @@ pub enum ExprKind<'thir, 'tcx> {\n         substs: UpvarSubsts<'tcx>,\n         upvars: &'thir [Expr<'thir, 'tcx>],\n         movability: Option<hir::Movability>,\n-        fake_reads: Vec<(&'thir mut Expr<'thir, 'tcx>, FakeReadCause, hir::HirId)>,\n+        fake_reads: Vec<(&'thir Expr<'thir, 'tcx>, FakeReadCause, hir::HirId)>,\n     },\n     Literal {\n         literal: &'tcx Const<'tcx>,"}, {"sha": "cb56512db60fee29b266b2372ec8daa699304e24", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/189d2065229944258fe8f621c5e1ec4386b637d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189d2065229944258fe8f621c5e1ec4386b637d4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=189d2065229944258fe8f621c5e1ec4386b637d4", "patch": "@@ -4,6 +4,7 @@ use if_chain::if_chain;\n use rustc_hir::{BindingAnnotation, Expr, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n@@ -106,6 +107,8 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n             }\n         }\n     }\n+\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _:HirId) { }\n }\n \n impl MutatePairDelegate<'_, '_> {"}]}