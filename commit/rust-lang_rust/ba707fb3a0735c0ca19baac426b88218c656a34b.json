{"sha": "ba707fb3a0735c0ca19baac426b88218c656a34b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzA3ZmIzYTA3MzVjMGNhMTliYWFjNDI2Yjg4MjE4YzY1NmEzNGI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-19T09:34:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:25:43Z"}, "message": "Remove OwnedStr trait\n\nThis trait was only implemented by `String`. It provided the methods\n`into_bytes` and `append`, both of which **are already implemented as normal\nmethods** of `String` (not as trait methods). This change improves the\nconsistency of strings.\n\nThis shouldn't break any code, except if somebody has implemented\n`OwnedStr` for a user-defined type.", "tree": {"sha": "f147d5668a03e47882796b7a7b5446de95112993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f147d5668a03e47882796b7a7b5446de95112993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba707fb3a0735c0ca19baac426b88218c656a34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba707fb3a0735c0ca19baac426b88218c656a34b", "html_url": "https://github.com/rust-lang/rust/commit/ba707fb3a0735c0ca19baac426b88218c656a34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba707fb3a0735c0ca19baac426b88218c656a34b/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "482c776d5a705d62a8093f2a441919278eb2b1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/482c776d5a705d62a8093f2a441919278eb2b1d0", "html_url": "https://github.com/rust-lang/rust/commit/482c776d5a705d62a8093f2a441919278eb2b1d0"}], "stats": {"total": 37, "additions": 2, "deletions": 35}, "files": [{"sha": "ae1fb87ef7f9600e1e04cd1ac6fa3fc9c703607b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ba707fb3a0735c0ca19baac426b88218c656a34b", "patch": "@@ -603,11 +603,6 @@ pub mod raw {\n         from_utf8_owned(vec![u])\n     }\n \n-    /// Sets the length of a string\n-    ///\n-    /// This will explicitly set the size of the string, without actually\n-    /// modifying its buffers, so it is up to the caller to ensure that\n-    /// the string is actually the specified size.\n     #[test]\n     fn test_from_buf_len() {\n         use slice::ImmutableVector;\n@@ -785,30 +780,6 @@ impl<'a> StrAllocating for &'a str {\n     }\n }\n \n-/// Methods for owned strings\n-pub trait OwnedStr {\n-    /// Consumes the string, returning the underlying byte buffer.\n-    ///\n-    /// The buffer does not have a null terminator.\n-    fn into_bytes(self) -> Vec<u8>;\n-\n-    /// Pushes the given string onto this string, returning the concatenation of the two strings.\n-    fn append(self, rhs: &str) -> String;\n-}\n-\n-impl OwnedStr for String {\n-    #[inline]\n-    fn into_bytes(self) -> Vec<u8> {\n-        unsafe { mem::transmute(self) }\n-    }\n-\n-    #[inline]\n-    fn append(mut self, rhs: &str) -> String {\n-        self.push_str(rhs);\n-        self\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use std::iter::AdditiveIterator;"}, {"sha": "bcc0761d92a3a75a90861183df084847d9d47c8c", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=ba707fb3a0735c0ca19baac426b88218c656a34b", "patch": "@@ -20,7 +20,7 @@ use iter::Iterator;\n use mem;\n use option::{Option, Some, None};\n use slice::{ImmutableVector, MutableVector, Vector};\n-use str::{OwnedStr, Str, StrAllocating, StrSlice};\n+use str::{Str, StrAllocating, StrSlice};\n use string::String;\n use to_string::IntoStr;\n use vec::Vec;"}, {"sha": "ca76be40cb59421c2c93f531324ee31941d80593", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ba707fb3a0735c0ca19baac426b88218c656a34b", "patch": "@@ -56,8 +56,6 @@ use vec::Vec;\n use c_str::ToCStr;\n #[cfg(unix)]\n use libc::c_char;\n-#[cfg(windows)]\n-use str::OwnedStr;\n \n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n@@ -708,8 +706,6 @@ pub fn self_exe_name() -> Option<Path> {\n \n     #[cfg(windows)]\n     fn load_self() -> Option<Vec<u8>> {\n-        use str::OwnedStr;\n-\n         unsafe {\n             use os::win32::fill_utf16_buf_and_decode;\n             fill_utf16_buf_and_decode(|buf, sz| {"}, {"sha": "96d5c0785f47774650696b43ad0b9f9ef2816983", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba707fb3a0735c0ca19baac426b88218c656a34b/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=ba707fb3a0735c0ca19baac426b88218c656a34b", "patch": "@@ -76,7 +76,7 @@\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n #[doc(no_inline)] pub use ptr::RawPtr;\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek};\n-#[doc(no_inline)] pub use str::{Str, StrVector, StrSlice, OwnedStr};\n+#[doc(no_inline)] pub use str::{Str, StrVector, StrSlice};\n #[doc(no_inline)] pub use str::{IntoMaybeOwned, StrAllocating, UnicodeStrSlice};\n #[doc(no_inline)] pub use to_string::{ToString, IntoStr};\n #[doc(no_inline)] pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};"}]}