{"sha": "7d815b862f026d8223b4f40d6dde0bda95af40da", "node_id": "C_kwDOAAsO6NoAKDdkODE1Yjg2MmYwMjZkODIyM2I0ZjQwZDZkZGUwYmRhOTVhZjQwZGE", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-11-28T08:54:35Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-11-28T08:54:35Z"}, "message": "Refactor proxy settings", "tree": {"sha": "b03738030689a6fe6fc10d111c9a11e2184dc173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b03738030689a6fe6fc10d111c9a11e2184dc173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d815b862f026d8223b4f40d6dde0bda95af40da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d815b862f026d8223b4f40d6dde0bda95af40da", "html_url": "https://github.com/rust-lang/rust/commit/7d815b862f026d8223b4f40d6dde0bda95af40da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d815b862f026d8223b4f40d6dde0bda95af40da/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f5149886d931c807f4b08ae02c10f1c036c03d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5149886d931c807f4b08ae02c10f1c036c03d4", "html_url": "https://github.com/rust-lang/rust/commit/2f5149886d931c807f4b08ae02c10f1c036c03d4"}], "stats": {"total": 62, "additions": 32, "deletions": 30}, "files": [{"sha": "81cf5d28b7e2a2ad5dd31a6a1d4eb8585c390d1f", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d815b862f026d8223b4f40d6dde0bda95af40da/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d815b862f026d8223b4f40d6dde0bda95af40da/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=7d815b862f026d8223b4f40d6dde0bda95af40da", "patch": "@@ -8,6 +8,11 @@ const NIGHTLY_TAG = \"nightly\";\n \n export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string; env: Record<string, string> }[];\n \n+export class ProxySettings {\n+    proxy?: string = undefined;\n+    strictSSL: boolean = true;\n+}\n+\n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";\n \n@@ -99,16 +104,17 @@ export class Config {\n     get channel() { return this.get<UpdatesChannel>(\"updates.channel\"); }\n     get askBeforeDownload() { return this.get<boolean>(\"updates.askBeforeDownload\"); }\n     get traceExtension() { return this.get<boolean>(\"trace.extension\"); }\n-    get httpProxy() {\n-        const httpProxy = vscode\n+    get proxySettings(): ProxySettings {\n+        const proxy = vscode\n             .workspace\n             .getConfiguration('http')\n-            .get<null | string>(\"proxy\")!;\n+            .get<null | string>(\"proxy\")! || process.env[\"https_proxy\"] || process.env[\"HTTPS_PROXY\"];\n+        const strictSSL = vscode.workspace.getConfiguration(\"http\").get<boolean>(\"proxyStrictSSL\") || true;\n \n-        return httpProxy || process.env[\"https_proxy\"] || process.env[\"HTTPS_PROXY\"];\n-    }\n-    get proxyStrictSSL(): boolean {\n-        return vscode.workspace.getConfiguration(\"http\").get(\"proxyStrictSSL\") || true;\n+        return {\n+            proxy: proxy,\n+            strictSSL: strictSSL,\n+        };\n     }\n \n     get inlayHints() {"}, {"sha": "734f224503632a73db8ede9a49bca6b72f5134ac", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d815b862f026d8223b4f40d6dde0bda95af40da/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d815b862f026d8223b4f40d6dde0bda95af40da/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=7d815b862f026d8223b4f40d6dde0bda95af40da", "patch": "@@ -198,7 +198,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     }\n \n     const latestNightlyRelease = await downloadWithRetryDialog(state, async () => {\n-        return await fetchRelease(\"nightly\", state.githubToken, config.httpProxy, config.proxyStrictSSL);\n+        return await fetchRelease(\"nightly\", state.githubToken, config.proxySettings);\n     }).catch(async (e) => {\n         log.error(e);\n         if (isInitialNightlyDownload) {\n@@ -230,8 +230,7 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n             url: artifact.browser_download_url,\n             dest,\n             progressTitle: \"Downloading rust-analyzer extension\",\n-            httpProxy: config.httpProxy,\n-            proxyStrictSSL: config.proxyStrictSSL,\n+            proxySettings: config.proxySettings,\n         });\n     });\n \n@@ -362,7 +361,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n \n     const releaseTag = config.package.releaseTag;\n     const release = await downloadWithRetryDialog(state, async () => {\n-        return await fetchRelease(releaseTag, state.githubToken, config.httpProxy, config.proxyStrictSSL);\n+        return await fetchRelease(releaseTag, state.githubToken, config.proxySettings);\n     });\n     const artifact = release.assets.find(artifact => artifact.name === `rust-analyzer-${platform}.gz`);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n@@ -374,8 +373,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n             progressTitle: \"Downloading rust-analyzer server\",\n             gunzip: true,\n             mode: 0o755,\n-            httpProxy: config.httpProxy,\n-            proxyStrictSSL: config.proxyStrictSSL,\n+            proxySettings: config.proxySettings,\n         });\n     });\n "}, {"sha": "103aed360e79aefb408366eb0a9d6dd7585b1cea", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7d815b862f026d8223b4f40d6dde0bda95af40da/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7d815b862f026d8223b4f40d6dde0bda95af40da/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=7d815b862f026d8223b4f40d6dde0bda95af40da", "patch": "@@ -11,6 +11,7 @@ import * as path from \"path\";\n import { log, assert } from \"./util\";\n import * as url from \"url\";\n import * as https from \"https\";\n+import { ProxySettings } from \"./config\";\n \n const pipeline = util.promisify(stream.pipeline);\n \n@@ -29,8 +30,7 @@ function makeHttpAgent(proxy: string | null | undefined, options?: https.AgentOp\n export async function fetchRelease(\n     releaseTag: string,\n     githubToken: string | null | undefined,\n-    httpProxy: string | null | undefined,\n-    proxyStrictSSL: boolean,\n+    proxySettings: ProxySettings,\n ): Promise<GithubRelease> {\n \n     const apiEndpointPath = `/repos/${OWNER}/${REPO}/releases/tags/${releaseTag}`;\n@@ -45,14 +45,14 @@ export async function fetchRelease(\n     }\n \n     const response = await (() => {\n-        if (httpProxy) {\n-            log.debug(`Fetching release metadata via proxy: ${httpProxy}`);\n+        if (proxySettings.proxy) {\n+            log.debug(`Fetching release metadata via proxy: ${proxySettings.proxy}`);\n         }\n-        let options: any = {};\n-        if (proxyStrictSSL) {\n+        const options: any = {};\n+        if (proxySettings.strictSSL) {\n             options[\"rejectUnauthorized\"] = false;\n         }\n-        const agent = makeHttpAgent(httpProxy, options);\n+        const agent = makeHttpAgent(proxySettings.proxy, options);\n         return fetch(requestUrl, { headers: headers, agent: agent });\n     })();\n \n@@ -97,8 +97,7 @@ interface DownloadOpts {\n     dest: vscode.Uri;\n     mode?: number;\n     gunzip?: boolean;\n-    httpProxy?: string;\n-    proxyStrictSSL: boolean;\n+    proxySettings: ProxySettings;\n }\n \n export async function download(opts: DownloadOpts) {\n@@ -118,7 +117,7 @@ export async function download(opts: DownloadOpts) {\n         },\n         async (progress, _cancellationToken) => {\n             let lastPercentage = 0;\n-            await downloadFile(opts.url, tempFilePath, opts.mode, !!opts.gunzip, opts.httpProxy, opts.proxyStrictSSL, (readBytes, totalBytes) => {\n+            await downloadFile(opts.url, tempFilePath, opts.mode, !!opts.gunzip, opts.proxySettings, (readBytes, totalBytes) => {\n                 const newPercentage = Math.round((readBytes / totalBytes) * 100);\n                 if (newPercentage !== lastPercentage) {\n                     progress.report({\n@@ -182,21 +181,20 @@ async function downloadFile(\n     destFilePath: vscode.Uri,\n     mode: number | undefined,\n     gunzip: boolean,\n-    httpProxy: string | null | undefined,\n-    proxyStrictSSL: boolean,\n+    proxySettings: ProxySettings,\n     onProgress: (readBytes: number, totalBytes: number) => void\n ): Promise<void> {\n     const urlString = url.toString();\n \n     const res = await (() => {\n-        if (httpProxy) {\n-            log.debug(`Downloading ${urlString} via proxy: ${httpProxy}`);\n+        if (proxySettings.proxy) {\n+            log.debug(`Downloading ${urlString} via proxy: ${proxySettings.proxy}`);\n         }\n-        let options: any = {};\n-        if (proxyStrictSSL) {\n+        const options: any = {};\n+        if (proxySettings.strictSSL) {\n             options[\"rejectUnauthorized\"] = false;\n         }\n-        const agent = makeHttpAgent(httpProxy, options);\n+        const agent = makeHttpAgent(proxySettings.proxy, options);\n         return fetch(urlString, { agent: agent });\n     })();\n "}]}