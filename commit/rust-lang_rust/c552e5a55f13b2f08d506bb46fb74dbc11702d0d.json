{"sha": "c552e5a55f13b2f08d506bb46fb74dbc11702d0d", "node_id": "C_kwDOAAsO6NoAKGM1NTJlNWE1NWYxM2IyZjA4ZDUwNmJiNDZmYjc0ZGJjMTE3MDJkMGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T16:32:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T16:32:53Z"}, "message": "Auto merge of #14004 - lowr:patch/no-need-to-escape-non-snippet, r=Veykril\n\nDon't escape non-snippets in assist\n\nI was misunderstanding that we're always sending snippets as response to assist request. For assists that never return snippets like `move_const_to_impl` we don't need to escape, and I don't think `utils::escape_non_snippet()` is useful at the moment since we guarantee that only a single edit will have `InsertTextFormat.Snippet` and we have `utils::render_snippet()` for that.", "tree": {"sha": "76d83fe7423b5d456cf69e3965c2244772fc4a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d83fe7423b5d456cf69e3965c2244772fc4a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c552e5a55f13b2f08d506bb46fb74dbc11702d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c552e5a55f13b2f08d506bb46fb74dbc11702d0d", "html_url": "https://github.com/rust-lang/rust/commit/c552e5a55f13b2f08d506bb46fb74dbc11702d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c552e5a55f13b2f08d506bb46fb74dbc11702d0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16", "html_url": "https://github.com/rust-lang/rust/commit/1575d55fc81c328eb7ae728d9e3aaba9d13d4a16"}, {"sha": "01d8b8947c54999eb15d88b60fa17bdde18b4875", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d8b8947c54999eb15d88b60fa17bdde18b4875", "html_url": "https://github.com/rust-lang/rust/commit/01d8b8947c54999eb15d88b60fa17bdde18b4875"}], "stats": {"total": 61, "additions": 2, "deletions": 59}, "files": [{"sha": "d848fce4be821b79585bd3854c1dff06ccb3bc41", "filename": "crates/ide-assists/src/handlers/move_const_to_impl.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c552e5a55f13b2f08d506bb46fb74dbc11702d0d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_const_to_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c552e5a55f13b2f08d506bb46fb74dbc11702d0d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_const_to_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_const_to_impl.rs?ref=c552e5a55f13b2f08d506bb46fb74dbc11702d0d", "patch": "@@ -5,10 +5,7 @@ use syntax::{\n     SyntaxKind,\n };\n \n-use crate::{\n-    assist_context::{AssistContext, Assists},\n-    utils,\n-};\n+use crate::assist_context::{AssistContext, Assists};\n \n // NOTE: Code may break if the self type implements a trait that has associated const with the same\n // name, but it's pretty expensive to check that (`hir::Impl::all_for_type()`) and we assume that's\n@@ -130,9 +127,7 @@ pub(crate) fn move_const_to_impl(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n \n             let const_ = const_.clone_for_update();\n             const_.reindent_to(indent);\n-            let mut const_text = format!(\"\\n{indent}{const_}{fixup}\");\n-            utils::escape_non_snippet(&mut const_text);\n-            builder.insert(insert_offset, const_text);\n+            builder.insert(insert_offset, format!(\"\\n{indent}{const_}{fixup}\"));\n         },\n     )\n }\n@@ -443,39 +438,4 @@ impl S {\n \"#,\n         );\n     }\n-\n-    #[test]\n-    fn moved_const_body_is_escaped() {\n-        // Note that the last argument is what *lsp clients would see* rather than\n-        // what users would see. Unescaping happens thereafter.\n-        check_assist(\n-            move_const_to_impl,\n-            r#\"\n-struct S;\n-impl S {\n-    fn f() -> usize {\n-        /// doc comment\n-        /// \\\\\n-        /// ${snippet}\n-        const C$0: &str = \"\\ and $1\";\n-\n-        C.len()\n-    }\n-}\n-\"#,\n-            r#\"\n-struct S;\n-impl S {\n-    /// doc comment\n-    /// \\\\\\\\\n-    /// \\${snippet}\n-    const C: &str = \"\\\\ and \\$1\";\n-\n-    fn f() -> usize {\n-        Self::C.len()\n-    }\n-}\n-\"#,\n-        )\n-    }\n }"}, {"sha": "f323ebcf7a3bdc76af45069d353d20557daf44ec", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c552e5a55f13b2f08d506bb46fb74dbc11702d0d/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c552e5a55f13b2f08d506bb46fb74dbc11702d0d/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=c552e5a55f13b2f08d506bb46fb74dbc11702d0d", "patch": "@@ -208,23 +208,6 @@ pub(crate) fn render_snippet(_cap: SnippetCap, node: &SyntaxNode, cursor: Cursor\n     }\n }\n \n-/// Escapes text that should be rendered as-is, typically those that we're copy-pasting what the\n-/// users wrote.\n-///\n-/// This function should only be used when the text doesn't contain snippet **AND** the text\n-/// wouldn't be included in a snippet.\n-pub(crate) fn escape_non_snippet(text: &mut String) {\n-    // While we *can* escape `}`, we don't really have to in this specific case. We only need to\n-    // escape it inside `${}` to disambiguate it from the ending token of the syntax, but after we\n-    // escape every occurrence of `$`, we wouldn't have `${}` in the first place.\n-    //\n-    // This will break if the text contains snippet or it will be included in a snippet (hence doc\n-    // comment). Compare `fn escape(buf)` in `render_snippet()` above, where the escaped text is\n-    // included in a snippet.\n-    stdx::replace(text, '\\\\', r\"\\\\\");\n-    stdx::replace(text, '$', r\"\\$\");\n-}\n-\n pub(crate) fn vis_offset(node: &SyntaxNode) -> TextSize {\n     node.children_with_tokens()\n         .find(|it| !matches!(it.kind(), WHITESPACE | COMMENT | ATTR))"}]}