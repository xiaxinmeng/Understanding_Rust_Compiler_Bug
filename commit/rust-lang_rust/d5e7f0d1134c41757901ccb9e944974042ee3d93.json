{"sha": "d5e7f0d1134c41757901ccb9e944974042ee3d93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZTdmMGQxMTM0YzQxNzU3OTAxY2NiOWU5NDQ5NzQwNDJlZTNkOTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-14T08:43:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-14T19:24:09Z"}, "message": "rt: Don't kill tasks while they are in a callback from C", "tree": {"sha": "96a27c2daa6411b57c46f43453088264f573fa47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a27c2daa6411b57c46f43453088264f573fa47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e7f0d1134c41757901ccb9e944974042ee3d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e7f0d1134c41757901ccb9e944974042ee3d93", "html_url": "https://github.com/rust-lang/rust/commit/d5e7f0d1134c41757901ccb9e944974042ee3d93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e7f0d1134c41757901ccb9e944974042ee3d93/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f4872f03284f4737675a68438350dd2958db229", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4872f03284f4737675a68438350dd2958db229", "html_url": "https://github.com/rust-lang/rust/commit/3f4872f03284f4737675a68438350dd2958db229"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "628389f10ceefcb28930e74b694f7ab12cb01686", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d5e7f0d1134c41757901ccb9e944974042ee3d93", "patch": "@@ -576,7 +576,7 @@ port_recv(uintptr_t *dptr, rust_port *port,\n \n         // If this task has been killed then we're not going to bother\n         // blocking, we have to unwind.\n-        if (task->killed) {\n+        if (task->must_fail_from_being_killed()) {\n             *killed = true;\n             return;\n         }"}, {"sha": "14c223ddb91954580736d075eec5db0c107ca02f", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=d5e7f0d1134c41757901ccb9e944974042ee3d93", "patch": "@@ -84,11 +84,12 @@ rust_task::rust_task(rust_task_thread *thread, rust_task_list *state,\n     local_region(&thread->srv->local_region),\n     boxed(&local_region),\n     unwinding(false),\n-    killed(false),\n     propagate_failure(true),\n     dynastack(this),\n     cc_counter(0),\n     total_stack_sz(0),\n+    killed(false),\n+    reentered_rust_stack(false),\n     c_stack(NULL),\n     next_c_sp(0),\n     next_rust_sp(0)\n@@ -240,17 +241,22 @@ void rust_task::start()\n     transition(&thread->newborn_tasks, &thread->running_tasks);\n }\n \n+bool\n+rust_task::must_fail_from_being_killed() {\n+    return killed && !reentered_rust_stack;\n+}\n+\n // Only run this on the rust stack\n void\n rust_task::yield(bool *killed) {\n-    if (this->killed) {\n+    if (must_fail_from_being_killed()) {\n         *killed = true;\n     }\n \n     // Return to the scheduler.\n     ctx.next->swap(ctx);\n \n-    if (this->killed) {\n+    if (must_fail_from_being_killed()) {\n         *killed = true;\n     }\n }"}, {"sha": "0a1b02037a2433b943d9f0a593c703ef6955261a", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=d5e7f0d1134c41757901ccb9e944974042ee3d93", "patch": "@@ -37,6 +37,7 @@ typedef unsigned long task_result;\n #define tr_failure 1\n \n struct spawn_args;\n+struct cleanup_args;\n \n // std::lib::task::task_notification\n //\n@@ -88,8 +89,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // We use this to suppress the \"killed\" flag during calls to yield.\n     bool unwinding;\n \n-    // Indicates that the task was killed and needs to unwind\n-    bool killed;\n     bool propagate_failure;\n \n     lock_and_signal lock;\n@@ -107,6 +106,11 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n private:\n \n+    // Indicates that the task was killed and needs to unwind\n+    bool killed;\n+    // Indicates that we've called back into Rust from C\n+    bool reentered_rust_stack;\n+\n     // The stack used for running C code, borrowed from the scheduler thread\n     stk_seg *c_stack;\n     uintptr_t next_c_sp;\n@@ -123,6 +127,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void return_c_stack();\n \n     friend void task_start_wrapper(spawn_args *a);\n+    friend void cleanup_task(cleanup_args *a);\n \n public:\n \n@@ -162,6 +167,10 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // Fail this task (assuming caller-on-stack is different task).\n     void kill();\n \n+    // Indicates that we've been killed and now is an apropriate\n+    // time to fail as a result\n+    bool must_fail_from_being_killed();\n+\n     // Fail self, assuming caller-on-stack is this task.\n     void fail();\n     void conclude_failure();\n@@ -262,6 +271,9 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n     // I(thread, !on_rust_stack());\n     I(thread, next_rust_sp);\n \n+    bool had_reentered_rust_stack = reentered_rust_stack;\n+    reentered_rust_stack = true;\n+\n     uintptr_t prev_c_sp = next_c_sp;\n     next_c_sp = get_sp();\n \n@@ -270,6 +282,7 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n     __morestack(args, fn_ptr, sp);\n \n     next_c_sp = prev_c_sp;\n+    reentered_rust_stack = had_reentered_rust_stack;\n }\n \n inline void"}, {"sha": "aafd70bb84fee794fd2b1cf9d281fdae488f671a", "filename": "src/test/run-fail/crust-fail.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Ftest%2Frun-fail%2Fcrust-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e7f0d1134c41757901ccb9e944974042ee3d93/src%2Ftest%2Frun-fail%2Fcrust-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcrust-fail.rs?ref=d5e7f0d1134c41757901ccb9e944974042ee3d93", "patch": "@@ -0,0 +1,31 @@\n+// error-pattern:explicit failure\n+// Testing that runtime failure doesn't cause callbacks to abort abnormally.\n+// Instead the failure will be delivered after the callbacks return.\n+\n+native mod rustrt {\n+    fn rust_dbg_call(cb: *u8,\n+                     data: ctypes::uintptr_t) -> ctypes::uintptr_t;\n+}\n+\n+crust fn cb(data: ctypes::uintptr_t) -> ctypes::uintptr_t {\n+    if data == 1u {\n+        data\n+    } else {\n+        count(data - 1u) + count(data - 1u)\n+    }\n+}\n+\n+fn count(n: uint) -> uint {\n+    task::yield();\n+    rustrt::rust_dbg_call(cb, n)\n+}\n+\n+fn main() {\n+    iter::repeat(10u) {||\n+        task::spawn {||\n+            let result = count(5u);\n+            #debug(\"result = %?\", result);\n+            fail;\n+        };\n+    }\n+}"}]}