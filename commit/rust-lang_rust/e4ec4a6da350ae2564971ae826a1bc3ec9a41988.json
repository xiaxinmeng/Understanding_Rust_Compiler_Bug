{"sha": "e4ec4a6da350ae2564971ae826a1bc3ec9a41988", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZWM0YTZkYTM1MGFlMjU2NDk3MWFlODI2YTFiYzNlYzlhNDE5ODg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-14T03:06:00Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-18T02:25:17Z"}, "message": "Change `MetaItem::tokens()` to `MetaItem::token_trees_and_joints()`.\n\nLikewise for `NestedMetaItem::tokens()`. Also, add\n`MetaItemKind::token_trees_and_joints()`, which `MetaItemKind::tokens()`\nnow calls.\n\nThis avoids some unnecessary `TokenTree` to `TokenStream` conversions,\nand removes the need for the clumsy\n`TokenStream::append_to_tree_and_joint_vec()`.", "tree": {"sha": "37daff706da6abf4b60047ce3db6ad192e192422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37daff706da6abf4b60047ce3db6ad192e192422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ec4a6da350ae2564971ae826a1bc3ec9a41988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ec4a6da350ae2564971ae826a1bc3ec9a41988", "html_url": "https://github.com/rust-lang/rust/commit/e4ec4a6da350ae2564971ae826a1bc3ec9a41988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ec4a6da350ae2564971ae826a1bc3ec9a41988/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "url": "https://api.github.com/repos/rust-lang/rust/commits/212ae58f36e4c9f2e0f46153f1c50a657e6c25db", "html_url": "https://github.com/rust-lang/rust/commit/212ae58f36e4c9f2e0f46153f1c50a657e6c25db"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "4aec50408812f27a0fed880b3a095a68d8efe0ba", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e4ec4a6da350ae2564971ae826a1bc3ec9a41988/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ec4a6da350ae2564971ae826a1bc3ec9a41988/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=e4ec4a6da350ae2564971ae826a1bc3ec9a41988", "patch": "@@ -22,7 +22,7 @@ use crate::ptr::P;\n use crate::sess::ParseSess;\n use crate::symbol::{sym, Symbol};\n use crate::ThinVec;\n-use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n+use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use crate::GLOBALS;\n \n use log::debug;\n@@ -463,7 +463,7 @@ pub fn first_attr_value_str_by_name(attrs: &[Attribute], name: Symbol) -> Option\n }\n \n impl MetaItem {\n-    fn tokens(&self) -> TokenStream {\n+    fn token_trees_and_joints(&self) -> Vec<TreeAndJoint> {\n         let mut idents = vec![];\n         let mut last_pos = BytePos(0 as u32);\n         for (i, segment) in self.path.segments.iter().enumerate() {\n@@ -477,8 +477,8 @@ impl MetaItem {\n             idents.push(TokenTree::Token(Token::from_ast_ident(segment.ident)).into());\n             last_pos = segment.ident.span.hi();\n         }\n-        self.kind.tokens(self.span).append_to_tree_and_joint_vec(&mut idents);\n-        TokenStream::new(idents)\n+        idents.extend(self.kind.token_trees_and_joints(self.span));\n+        idents\n     }\n \n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>\n@@ -537,32 +537,41 @@ impl MetaItem {\n }\n \n impl MetaItemKind {\n-    pub fn tokens(&self, span: Span) -> TokenStream {\n+    pub fn token_trees_and_joints(&self, span: Span) -> Vec<TreeAndJoint> {\n         match *self {\n-            MetaItemKind::Word => TokenStream::default(),\n+            MetaItemKind::Word => vec![],\n             MetaItemKind::NameValue(ref lit) => {\n-                TokenStream::new(vec![\n+                vec![\n                     TokenTree::token(token::Eq, span).into(),\n                     lit.token_tree().into(),\n-                ])\n+                ]\n             }\n             MetaItemKind::List(ref list) => {\n                 let mut tokens = Vec::new();\n                 for (i, item) in list.iter().enumerate() {\n                     if i > 0 {\n                         tokens.push(TokenTree::token(token::Comma, span).into());\n                     }\n-                    item.tokens().append_to_tree_and_joint_vec(&mut tokens);\n+                    tokens.extend(item.token_trees_and_joints())\n                 }\n-                TokenTree::Delimited(\n-                    DelimSpan::from_single(span),\n-                    token::Paren,\n-                    TokenStream::new(tokens).into(),\n-                ).into()\n+                vec![\n+                    TokenTree::Delimited(\n+                        DelimSpan::from_single(span),\n+                        token::Paren,\n+                        TokenStream::new(tokens).into(),\n+                    ).into()\n+                ]\n             }\n         }\n     }\n \n+    // Premature conversions of `TokenTree`s to `TokenStream`s can hurt\n+    // performance. Do not use this function if `token_trees_and_joints()` can\n+    // be used instead.\n+    pub fn tokens(&self, span: Span) -> TokenStream {\n+        TokenStream::new(self.token_trees_and_joints(span))\n+    }\n+\n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItemKind>\n         where I: Iterator<Item = TokenTree>,\n     {\n@@ -604,10 +613,10 @@ impl NestedMetaItem {\n         }\n     }\n \n-    fn tokens(&self) -> TokenStream {\n+    fn token_trees_and_joints(&self) -> Vec<TreeAndJoint> {\n         match *self {\n-            NestedMetaItem::MetaItem(ref item) => item.tokens(),\n-            NestedMetaItem::Literal(ref lit) => lit.token_tree().into(),\n+            NestedMetaItem::MetaItem(ref item) => item.token_trees_and_joints(),\n+            NestedMetaItem::Literal(ref lit) => vec![lit.token_tree().into()],\n         }\n     }\n "}, {"sha": "ac155556cdae25d541ca79c82b947409d0c3b58f", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4ec4a6da350ae2564971ae826a1bc3ec9a41988/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ec4a6da350ae2564971ae826a1bc3ec9a41988/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=e4ec4a6da350ae2564971ae826a1bc3ec9a41988", "patch": "@@ -271,10 +271,6 @@ impl TokenStream {\n         }\n     }\n \n-    pub fn append_to_tree_and_joint_vec(self, vec: &mut Vec<TreeAndJoint>) {\n-        vec.extend(self.0.iter().cloned());\n-    }\n-\n     pub fn trees(&self) -> Cursor {\n         self.clone().into_trees()\n     }"}]}