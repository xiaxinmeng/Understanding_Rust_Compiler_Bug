{"sha": "a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZWIxYTU0NmM3NjIzZjY1ODIzYzVlMjQ5Y2QzYzZkOGM5MGZkOGM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T17:07:25Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T17:11:21Z"}, "message": "Differentiate Tuple / FnPtr type constructors by cardinality\n\nThis is necessary because Chalk (reasonably) expects each 'struct' to know how\nmany type parameters it takes.", "tree": {"sha": "0942d7a4976bb444031d044beb1ea786adabcaeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0942d7a4976bb444031d044beb1ea786adabcaeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "html_url": "https://github.com/rust-lang/rust/commit/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19fbd919986e99287168f40aa11003a11aa43d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19fbd919986e99287168f40aa11003a11aa43d3a", "html_url": "https://github.com/rust-lang/rust/commit/19fbd919986e99287168f40aa11003a11aa43d3a"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "f4eee835f27b815ded1cd7c6c3672f03edd60956", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "patch": "@@ -82,13 +82,13 @@ pub enum TypeCtor {\n     /// fn foo() -> i32 { 1 }\n     /// let bar: fn() -> i32 = foo;\n     /// ```\n-    FnPtr,\n+    FnPtr { num_args: u16 },\n \n     /// The never type `!`.\n     Never,\n \n     /// A tuple type.  For example, `(i32, bool)`.\n-    Tuple,\n+    Tuple { cardinality: u16 },\n }\n \n /// A nominal type with (maybe 0) type parameters. This might be a primitive\n@@ -299,7 +299,7 @@ impl Ty {\n         Ty::Apply(ApplicationTy { ctor, parameters })\n     }\n     pub fn unit() -> Self {\n-        Ty::apply(TypeCtor::Tuple, Substs::empty())\n+        Ty::apply(TypeCtor::Tuple { cardinality: 0 }, Substs::empty())\n     }\n \n     pub fn walk(&self, f: &mut impl FnMut(&Ty)) {\n@@ -352,7 +352,9 @@ impl Ty {\n \n     pub fn as_tuple(&self) -> Option<&Substs> {\n         match self {\n-            Ty::Apply(ApplicationTy { ctor: TypeCtor::Tuple, parameters }) => Some(parameters),\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Tuple { .. }, parameters }) => {\n+                Some(parameters)\n+            }\n             _ => None,\n         }\n     }\n@@ -380,7 +382,7 @@ impl Ty {\n     fn callable_sig(&self, db: &impl HirDatabase) -> Option<FnSig> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n-                TypeCtor::FnPtr => Some(FnSig::from_fn_ptr_substs(&a_ty.parameters)),\n+                TypeCtor::FnPtr { .. } => Some(FnSig::from_fn_ptr_substs(&a_ty.parameters)),\n                 TypeCtor::FnDef(def) => {\n                     let sig = db.callable_item_signature(def);\n                     Some(sig.subst(&a_ty.parameters))\n@@ -466,7 +468,7 @@ impl HirDisplay for ApplicationTy {\n                 write!(f, \"&{}{}\", m.as_keyword_for_ref(), t.display(f.db))?;\n             }\n             TypeCtor::Never => write!(f, \"!\")?,\n-            TypeCtor::Tuple => {\n+            TypeCtor::Tuple { .. } => {\n                 let ts = &self.parameters;\n                 if ts.len() == 1 {\n                     write!(f, \"({},)\", ts[0].display(f.db))?;\n@@ -476,7 +478,7 @@ impl HirDisplay for ApplicationTy {\n                     write!(f, \")\")?;\n                 }\n             }\n-            TypeCtor::FnPtr => {\n+            TypeCtor::FnPtr { .. } => {\n                 let sig = FnSig::from_fn_ptr_substs(&self.parameters);\n                 write!(f, \"fn(\")?;\n                 f.write_joined(sig.params(), \", \")?;"}, {"sha": "edce1afe7f00951dbecc7344bfc5c53e00a768c8", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "patch": "@@ -739,14 +739,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 };\n                 let expectations_iter = expectations.iter().chain(repeat(&Ty::Unknown));\n \n-                let inner_tys = args\n+                let inner_tys: Substs = args\n                     .iter()\n                     .zip(expectations_iter)\n                     .map(|(&pat, ty)| self.infer_pat(pat, ty, default_bm))\n                     .collect::<Vec<_>>()\n                     .into();\n \n-                Ty::apply(TypeCtor::Tuple, Substs(inner_tys))\n+                Ty::apply(TypeCtor::Tuple { cardinality: inner_tys.len() as u16 }, inner_tys)\n             }\n             Pat::Ref { pat, mutability } => {\n                 let expectation = match expected.as_reference() {\n@@ -1073,7 +1073,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     .autoderef(self.db)\n                     .find_map(|derefed_ty| match derefed_ty {\n                         Ty::Apply(a_ty) => match a_ty.ctor {\n-                            TypeCtor::Tuple => {\n+                            TypeCtor::Tuple { .. } => {\n                                 let i = name.to_string().parse::<usize>().ok();\n                                 i.and_then(|i| a_ty.parameters.0.get(i).cloned())\n                             }\n@@ -1184,7 +1184,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     ty_vec.push(self.infer_expr(*arg, &Expectation::none()));\n                 }\n \n-                Ty::apply(TypeCtor::Tuple, Substs(ty_vec.into()))\n+                Ty::apply(\n+                    TypeCtor::Tuple { cardinality: ty_vec.len() as u16 },\n+                    Substs(ty_vec.into()),\n+                )\n             }\n             Expr::Array(array) => {\n                 let elem_ty = match &expected.ty {"}, {"sha": "8bab7e54b89e0a97a8a4909c027d481da743b743", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "patch": "@@ -29,7 +29,10 @@ impl Ty {\n             TypeRef::Tuple(inner) => {\n                 let inner_tys =\n                     inner.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n-                Ty::apply(TypeCtor::Tuple, Substs(inner_tys.into()))\n+                Ty::apply(\n+                    TypeCtor::Tuple { cardinality: inner_tys.len() as u16 },\n+                    Substs(inner_tys.into()),\n+                )\n             }\n             TypeRef::Path(path) => Ty::from_hir_path(db, resolver, path),\n             TypeRef::RawPtr(inner, mutability) => {\n@@ -53,7 +56,7 @@ impl Ty {\n                 let inner_tys =\n                     params.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n                 let sig = Substs(inner_tys.into());\n-                Ty::apply(TypeCtor::FnPtr, sig)\n+                Ty::apply(TypeCtor::FnPtr { num_args: sig.len() as u16 - 1 }, sig)\n             }\n             TypeRef::Error => Ty::Unknown,\n         }"}, {"sha": "8b77d21b4a39999502356bf00489863a71d18bf5", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "patch": "@@ -184,6 +184,7 @@ where\n         debug!(\"struct_datum {:?}\", struct_id);\n         let type_ctor = from_chalk(self.db, struct_id);\n         // FIXME might be nicer if we can create a fake GenericParams for the TypeCtor\n+        // FIXME extract this to a method on Ty\n         let (num_params, upstream) = match type_ctor {\n             TypeCtor::Bool\n             | TypeCtor::Char\n@@ -192,7 +193,8 @@ where\n             | TypeCtor::Never\n             | TypeCtor::Str => (0, true),\n             TypeCtor::Slice | TypeCtor::Array | TypeCtor::RawPtr(_) | TypeCtor::Ref(_) => (1, true),\n-            TypeCtor::FnPtr | TypeCtor::Tuple => unimplemented!(), // FIXME tuples and FnPtr are currently variadic... we need to make the parameter number explicit\n+            TypeCtor::FnPtr { num_args } => (num_args as usize + 1, true),\n+            TypeCtor::Tuple { cardinality } => (cardinality as usize, true),\n             TypeCtor::FnDef(_) => unimplemented!(),\n             TypeCtor::Adt(adt) => {\n                 let generic_params = adt.generic_params(self.db);"}, {"sha": "2e808469915c76e344c71de9ea970383f0769a1e", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=a4eb1a546c7623f65823c5e249cd3c6d8c90fd8c", "patch": "@@ -24,7 +24,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n                     }\n                 }\n                 // FIXME unions\n-                TypeCtor::Tuple => {\n+                TypeCtor::Tuple { .. } => {\n                     for (i, ty) in a_ty.parameters.iter().enumerate() {\n                         acc.add_pos_field(ctx, i, ty);\n                     }"}]}