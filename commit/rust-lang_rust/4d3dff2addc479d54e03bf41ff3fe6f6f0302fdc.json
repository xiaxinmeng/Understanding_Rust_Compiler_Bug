{"sha": "4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkM2RmZjJhZGRjNDc5ZDU0ZTAzYmY0MWZmM2ZlNmY2ZjAzMDJmZGM=", "commit": {"author": {"name": "Chase Albert", "email": "thaoeuns@gmail.com", "date": "2020-04-30T21:30:27Z"}, "committer": {"name": "Chase Albert", "email": "thaoeuns@gmail.com", "date": "2020-05-04T17:51:23Z"}, "message": "Address consistency of naming for unused/merely validated arguments.", "tree": {"sha": "a49fc858794c55b0f69521c28a2f5c9b1e18f731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a49fc858794c55b0f69521c28a2f5c9b1e18f731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "html_url": "https://github.com/rust-lang/rust/commit/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/comments", "author": {"login": "toc-the-younger", "id": 1740780, "node_id": "MDQ6VXNlcjE3NDA3ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1740780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toc-the-younger", "html_url": "https://github.com/toc-the-younger", "followers_url": "https://api.github.com/users/toc-the-younger/followers", "following_url": "https://api.github.com/users/toc-the-younger/following{/other_user}", "gists_url": "https://api.github.com/users/toc-the-younger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toc-the-younger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toc-the-younger/subscriptions", "organizations_url": "https://api.github.com/users/toc-the-younger/orgs", "repos_url": "https://api.github.com/users/toc-the-younger/repos", "events_url": "https://api.github.com/users/toc-the-younger/events{/privacy}", "received_events_url": "https://api.github.com/users/toc-the-younger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toc-the-younger", "id": 1740780, "node_id": "MDQ6VXNlcjE3NDA3ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1740780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toc-the-younger", "html_url": "https://github.com/toc-the-younger", "followers_url": "https://api.github.com/users/toc-the-younger/followers", "following_url": "https://api.github.com/users/toc-the-younger/following{/other_user}", "gists_url": "https://api.github.com/users/toc-the-younger/gists{/gist_id}", "starred_url": "https://api.github.com/users/toc-the-younger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toc-the-younger/subscriptions", "organizations_url": "https://api.github.com/users/toc-the-younger/orgs", "repos_url": "https://api.github.com/users/toc-the-younger/repos", "events_url": "https://api.github.com/users/toc-the-younger/events{/privacy}", "received_events_url": "https://api.github.com/users/toc-the-younger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46aaab30fec9ba85ac086137109e66bf5557dd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/46aaab30fec9ba85ac086137109e66bf5557dd7e", "html_url": "https://github.com/rust-lang/rust/commit/46aaab30fec9ba85ac086137109e66bf5557dd7e"}], "stats": {"total": 87, "additions": 45, "deletions": 42}, "files": [{"sha": "6b28e7070165bc31e736d63bd045e12c02d7eaca", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "patch": "@@ -56,7 +56,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fcntl\" => {\n-                let result = this.fcntl(args);\n+                let result = this.fcntl(args)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"read\" => {\n@@ -168,8 +168,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Dynamic symbol loading\n             \"dlsym\" => {\n-                let &[_handle, symbol] = check_arg_count(args)?;\n-                let _handle = this.read_scalar(_handle)?.not_undef()?;\n+                let &[handle, symbol] = check_arg_count(args)?;\n+                this.read_scalar(handle)?.not_undef()?;\n                 let symbol = this.read_scalar(symbol)?.not_undef()?;\n                 let symbol_name = this.memory.read_c_str(symbol)?;\n                 let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n@@ -360,19 +360,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Miscellaneous\n             \"isatty\" => {\n-                let &[_fd] = check_arg_count(args)?;\n-                let _fd = this.read_scalar(_fd)?.to_i32()?;\n+                let &[fd] = check_arg_count(args)?;\n+                this.read_scalar(fd)?.to_i32()?;\n                 // \"returns 1 if fd is an open file descriptor referring to a terminal; otherwise 0 is returned, and errno is set to indicate the error\"\n                 // FIXME: we just say nothing is a terminal.\n                 let enotty = this.eval_libc(\"ENOTTY\")?;\n                 this.set_last_error(enotty)?;\n                 this.write_null(dest)?;\n             }\n             \"pthread_atfork\" => {\n-                let &[_prepare, _parent, _child] = check_arg_count(args)?;\n-                let _prepare = this.read_scalar(_prepare)?.not_undef()?;\n-                let _parent = this.read_scalar(_parent)?.not_undef()?;\n-                let _child = this.read_scalar(_child)?.not_undef()?;\n+                let &[prepare, parent, child] = check_arg_count(args)?;\n+                this.read_scalar(prepare)?.not_undef()?;\n+                this.read_scalar(parent)?.not_undef()?;\n+                this.read_scalar(child)?.not_undef()?;\n                 // We do not support forking, so there is nothing to do here.\n                 this.write_null(dest)?;\n             }"}, {"sha": "3f9d1b259a86a1dd334f0816c797d7a592b098f6", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "patch": "@@ -46,11 +46,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             // Linux-only\n             \"posix_fadvise\" => {\n-                let &[_fd, _offset, _len, _advice] = check_arg_count(args)?;\n-                let _fd = this.read_scalar(_fd)?.to_i32()?;\n-                let _offset = this.read_scalar(_offset)?.to_machine_isize(this)?;\n-                let _len = this.read_scalar(_len)?.to_machine_isize(this)?;\n-                let _advice = this.read_scalar(_advice)?.to_i32()?;\n+                let &[fd, offset, len, advice] = check_arg_count(args)?;\n+                this.read_scalar(fd)?.to_i32()?;\n+                this.read_scalar(offset)?.to_machine_isize(this)?;\n+                this.read_scalar(len)?.to_machine_isize(this)?;\n+                this.read_scalar(advice)?.to_i32()?;\n                 // fadvise is only informational, we can ignore it.\n                 this.write_null(dest)?;\n             }\n@@ -66,8 +66,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Querying system information\n             \"pthread_attr_getstack\" => {\n                 // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n-                let &[_attr_place, addr_place, size_place] = check_arg_count(args)?;\n-                let _attr_place = this.deref_operand(_attr_place)?;\n+                let &[attr_place, addr_place, size_place] = check_arg_count(args)?;\n+                this.deref_operand(attr_place)?;\n                 let addr_place = this.deref_operand(addr_place)?;\n                 let size_place = this.deref_operand(size_place)?;\n \n@@ -102,14 +102,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .to_machine_usize(this)?;\n \n                 if args.is_empty() {\n-                    throw_ub_format!(\"incorrect number of arguments, needed at least 1\");\n+                    throw_ub_format!(\"incorrect number of arguments for syscall, needed at least 1\");\n                 }\n                 match this.read_scalar(args[0])?.to_machine_usize(this)? {\n                     // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n                     // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                     id if id == sys_getrandom => {\n                         // The first argument is the syscall id, so skip over it.\n-                        getrandom(this, &args[1..], dest)?;\n+                        let &[_, ptr, len, flags] = check_arg_count(args)?;\n+                        getrandom(this, ptr, len, flags, dest)?;\n                     }\n                     // `statx` is used by `libstd` to retrieve metadata information on `linux`\n                     // instead of using `stat`,`lstat` or `fstat` as on `macos`.\n@@ -125,13 +126,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Miscelanneous\n             \"getrandom\" => {\n-                getrandom(this, args, dest)?;\n+                let &[ptr, len, flags] = check_arg_count(args)?;\n+                getrandom(this, ptr, len, flags, dest)?;\n             }\n             \"sched_getaffinity\" => {\n-                let &[_pid, _cpusetsize, _mask] = check_arg_count(args)?;\n-                let _pid = this.read_scalar(_pid)?.to_i32()?;\n-                let _cpusetsize = this.read_scalar(_cpusetsize)?.to_machine_usize(this)?;\n-                let _mask = this.deref_operand(_mask)?;\n+                let &[pid, cpusetsize, mask] = check_arg_count(args)?;\n+                this.read_scalar(pid)?.to_i32()?;\n+                this.read_scalar(cpusetsize)?.to_machine_usize(this)?;\n+                this.deref_operand(mask)?;\n                 // FIXME: we just return an error; `num_cpus` then falls back to `sysconf`.\n                 let einval = this.eval_libc(\"EINVAL\")?;\n                 this.set_last_error(einval)?;\n@@ -154,16 +156,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n // Shims the linux `getrandom` syscall.\n fn getrandom<'tcx>(\n     this: &mut MiriEvalContext<'_, 'tcx>,\n-    args: &[OpTy<'tcx, Tag>],\n+    ptr: OpTy<'tcx, Tag>,\n+    len: OpTy<'tcx, Tag>,\n+    flags: OpTy<'tcx, Tag>,\n     dest: PlaceTy<'tcx, Tag>,\n ) -> InterpResult<'tcx> {\n-    let &[ptr, len, _flags] = check_arg_count(args)?;\n     let ptr = this.read_scalar(ptr)?.not_undef()?;\n     let len = this.read_scalar(len)?.to_machine_usize(this)?;\n \n     // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n     // neither of which have any effect on our current PRNG.\n-    let _flags = this.read_scalar(_flags)?.to_i32()?;\n+    this.read_scalar(flags)?.to_i32()?;\n \n     this.gen_random(ptr, len)?;\n     this.write_scalar(Scalar::from_machine_usize(len, this), dest)?;"}, {"sha": "685f66d443d4f56abc787a65381831b08c1a48d3", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "patch": "@@ -104,14 +104,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Querying system information\n             \"pthread_get_stackaddr_np\" => {\n-                let &[_thread] = check_arg_count(args)?;\n-                let _thread = this.read_scalar(_thread)?.not_undef()?;\n+                let &[thread] = check_arg_count(args)?;\n+                this.read_scalar(thread)?.not_undef()?;\n                 let stack_addr = Scalar::from_uint(STACK_ADDR, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n-                let &[_thread] = check_arg_count(args)?;\n-                let _thread = this.read_scalar(_thread)?.not_undef()?;\n+                let &[thread] = check_arg_count(args)?;\n+                this.read_scalar(thread)?.not_undef()?;\n                 let stack_size = Scalar::from_uint(STACK_SIZE, this.pointer_size());\n                 this.write_scalar(stack_size, dest)?;\n             }"}, {"sha": "3d7afc616e8ed58f514f8b4203e2b197c93445bb", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=4d3dff2addc479d54e03bf41ff3fe6f6f0302fdc", "patch": "@@ -97,25 +97,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Allocation\n             \"HeapAlloc\" => {\n-                let &[_handle, flags, size] = check_arg_count(args)?;\n-                let _handle = this.read_scalar(_handle)?.to_machine_isize(this)?;\n+                let &[handle, flags, size] = check_arg_count(args)?;\n+                this.read_scalar(handle)?.to_machine_isize(this)?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let zero_init = (flags & 0x00000008) != 0; // HEAP_ZERO_MEMORY\n                 let res = this.malloc(size, zero_init, MiriMemoryKind::WinHeap);\n                 this.write_scalar(res, dest)?;\n             }\n             \"HeapFree\" => {\n-                let &[_handle, _flags, ptr] = check_arg_count(args)?;\n-                let _handle = this.read_scalar(_handle)?.to_machine_isize(this)?;\n+                let &[handle, _flags, ptr] = check_arg_count(args)?;\n+                this.read_scalar(handle)?.to_machine_isize(this)?;\n                 let _flags = this.read_scalar(_flags)?.to_u32()?;\n                 let ptr = this.read_scalar(ptr)?.not_undef()?;\n                 this.free(ptr, MiriMemoryKind::WinHeap)?;\n                 this.write_scalar(Scalar::from_i32(1), dest)?;\n             }\n             \"HeapReAlloc\" => {\n-                let &[_handle, _flags, ptr, size] = check_arg_count(args)?;\n-                let _handle = this.read_scalar(_handle)?.to_machine_isize(this)?;\n+                let &[handle, _flags, ptr, size] = check_arg_count(args)?;\n+                this.read_scalar(handle)?.to_machine_isize(this)?;\n                 let _flags = this.read_scalar(_flags)?.to_u32()?;\n                 let ptr = this.read_scalar(ptr)?.not_undef()?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n@@ -216,18 +216,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"GetConsoleScreenBufferInfo\" => {\n                 // `term` needs this, so we fake it.\n-                let &[_console, _buffer_info] = check_arg_count(args)?;\n-                let _console = this.read_scalar(_console)?.to_machine_isize(this)?;\n-                let _buffer_info = this.deref_operand(_buffer_info)?;\n+                let &[console, buffer_info] = check_arg_count(args)?;\n+                this.read_scalar(console)?.to_machine_isize(this)?;\n+                this.deref_operand(buffer_info)?;\n                 // Indicate an error.\n                 // FIXME: we should set last_error, but to what?\n                 this.write_null(dest)?;\n             }\n             \"GetConsoleMode\" => {\n                 // Windows \"isatty\" (in libtest) needs this, so we fake it.\n-                let &[_console, _mode] = check_arg_count(args)?;\n-                let _console = this.read_scalar(_console)?.to_machine_isize(this)?;\n-                let _mode = this.deref_operand(_mode)?;\n+                let &[console, mode] = check_arg_count(args)?;\n+                this.read_scalar(console)?.to_machine_isize(this)?;\n+                this.deref_operand(mode)?;\n                 // Indicate an error.\n                 // FIXME: we should set last_error, but to what?\n                 this.write_null(dest)?;"}]}