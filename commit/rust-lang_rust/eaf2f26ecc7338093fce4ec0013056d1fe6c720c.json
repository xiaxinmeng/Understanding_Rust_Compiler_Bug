{"sha": "eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "node_id": "C_kwDOAAsO6NoAKGVhZjJmMjZlY2M3MzM4MDkzZmNlNGVjMDAxMzA1NmQxZmU2YzcyMGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-17T22:44:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-17T22:44:28Z"}, "message": "Rollup merge of #105814 - JakobDegen:custom-mir-terms, r=oli-obk\n\nSupport call and drop terminators in custom mir\n\nThe only caveat with this change is that cleanup blocks are not supported. I would like to add them, but it's not quite clear to me what the best way to do that is, so I'll have to think about it some more.\n\nr? ``@oli-obk``", "tree": {"sha": "cfbc4d05ce4bdba1e051ea67b8675219d460db57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfbc4d05ce4bdba1e051ea67b8675219d460db57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnkZMCRBK7hj4Ov3rIwAAIcEIAItpFaBt9xPumHcExYDGWVVu\nj5V+pUCEThBCSP5+icMaOoATnToQLWQQVodueXNprJgOCU+4cC0N/LWOQRgjSMh7\ny0IVXGOA8GZ45YGbswjtl29nvs243Wzx18aFSFdLYv5e+kuBx8kizqTBPKKr/pYl\nNanNwa/cz2DTBhfzf/g/mUEkYtc/KZRjqPCTG71Hu9Rl+8bZ3IcxaTTOqKug8JMS\nlHMOoUY+dCdiuTxm+BHOYGBk0X2/ytSs03gceCsdPRpwL/91K1GtiyfWpxMhQQ/K\n88oFC7HiAZQ7JFDJxNEJkpPxGOFzbUIQq2fjGStJUf60UrV0sdA7bPz/ob+zRcY=\n=yxq4\n-----END PGP SIGNATURE-----\n", "payload": "tree cfbc4d05ce4bdba1e051ea67b8675219d460db57\nparent a8ad7f64a1c3d337fb8c75f4ee36dbc3a2d5bc04\nparent 3d849ae44c0eabea326bd8ccccc3a6ab702115ff\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671317068 +0100\ncommitter GitHub <noreply@github.com> 1671317068 +0100\n\nRollup merge of #105814 - JakobDegen:custom-mir-terms, r=oli-obk\n\nSupport call and drop terminators in custom mir\n\nThe only caveat with this change is that cleanup blocks are not supported. I would like to add them, but it's not quite clear to me what the best way to do that is, so I'll have to think about it some more.\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "html_url": "https://github.com/rust-lang/rust/commit/eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8ad7f64a1c3d337fb8c75f4ee36dbc3a2d5bc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ad7f64a1c3d337fb8c75f4ee36dbc3a2d5bc04", "html_url": "https://github.com/rust-lang/rust/commit/a8ad7f64a1c3d337fb8c75f4ee36dbc3a2d5bc04"}, {"sha": "3d849ae44c0eabea326bd8ccccc3a6ab702115ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d849ae44c0eabea326bd8ccccc3a6ab702115ff", "html_url": "https://github.com/rust-lang/rust/commit/3d849ae44c0eabea326bd8ccccc3a6ab702115ff"}], "stats": {"total": 268, "additions": 266, "deletions": 2}, "files": [{"sha": "ecc3e4de8d1da46f035b96b4b0174d127c9e6b68", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -42,6 +42,29 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             @call(\"mir_goto\", args) => {\n                 Ok(TerminatorKind::Goto { target: self.parse_block(args[0])? } )\n             },\n+            @call(\"mir_unreachable\", _args) => {\n+                Ok(TerminatorKind::Unreachable)\n+            },\n+            @call(\"mir_drop\", args) => {\n+                Ok(TerminatorKind::Drop {\n+                    place: self.parse_place(args[0])?,\n+                    target: self.parse_block(args[1])?,\n+                    unwind: None,\n+                })\n+            },\n+            @call(\"mir_drop_and_replace\", args) => {\n+                Ok(TerminatorKind::DropAndReplace {\n+                    place: self.parse_place(args[0])?,\n+                    value: self.parse_operand(args[1])?,\n+                    target: self.parse_block(args[2])?,\n+                    unwind: None,\n+                })\n+            },\n+            @call(\"mir_call\", args) => {\n+                let destination = self.parse_place(args[0])?;\n+                let target = self.parse_block(args[1])?;\n+                self.parse_call(args[2], destination, target)\n+            },\n             ExprKind::Match { scrutinee, arms } => {\n                 let discr = self.parse_operand(*scrutinee)?;\n                 self.parse_match(arms, expr.span).map(|t| TerminatorKind::SwitchInt { discr, targets: t })\n@@ -86,6 +109,32 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         Ok(SwitchTargets::new(values.into_iter().zip(targets), otherwise))\n     }\n \n+    fn parse_call(\n+        &self,\n+        expr_id: ExprId,\n+        destination: Place<'tcx>,\n+        target: BasicBlock,\n+    ) -> PResult<TerminatorKind<'tcx>> {\n+        parse_by_kind!(self, expr_id, _, \"function call\",\n+            ExprKind::Call { fun, args, from_hir_call, fn_span, .. } => {\n+                let fun = self.parse_operand(*fun)?;\n+                let args = args\n+                    .iter()\n+                    .map(|arg| self.parse_operand(*arg))\n+                    .collect::<PResult<Vec<_>>>()?;\n+                Ok(TerminatorKind::Call {\n+                    func: fun,\n+                    args,\n+                    destination,\n+                    target: Some(target),\n+                    cleanup: None,\n+                    from_hir_call: *from_hir_call,\n+                    fn_span: *fn_span,\n+                })\n+            },\n+        )\n+    }\n+\n     fn parse_rvalue(&self, expr_id: ExprId) -> PResult<Rvalue<'tcx>> {\n         parse_by_kind!(self, expr_id, _, \"rvalue\",\n             @call(\"mir_discriminant\", args) => self.parse_place(args[0]).map(Rvalue::Discriminant),"}, {"sha": "e08a15571fcbed0f74ccc42144202c8addfac029", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -44,7 +44,8 @@\n //! if you want your MIR to be modified by the full MIR pipeline, or `#![custom_mir(dialect =\n //! \"runtime\", phase = \"optimized\")] if you don't.\n //!\n-//! [dialect docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html\n+//! [dialect docs]:\n+//!     https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.MirPhase.html\n //!\n //! The input to the [`mir!`] macro is:\n //!\n@@ -99,6 +100,30 @@\n //!         Return()\n //!     })\n //! }\n+//!\n+//! #[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n+//! fn push_and_pop<T>(v: &mut Vec<T>, value: T) {\n+//!     mir!(\n+//!         let unused;\n+//!         let popped;\n+//!\n+//!         {\n+//!             Call(unused, pop, Vec::push(v, value))\n+//!         }\n+//!\n+//!         pop = {\n+//!             Call(popped, drop, Vec::pop(v))\n+//!         }\n+//!\n+//!         drop = {\n+//!             Drop(popped, ret)\n+//!         }\n+//!\n+//!         ret = {\n+//!             Return()\n+//!         }\n+//!     )\n+//! }\n //! ```\n //!\n //! We can also set off compilation failures that happen in sufficiently late stages of the\n@@ -195,10 +220,16 @@\n //!\n //! #### Terminators\n //!\n-//!  - [`Goto`] and [`Return`] have associated functions.\n+//! Custom MIR does not currently support cleanup blocks or non-trivial unwind paths. As such, there\n+//! are no resume and abort terminators, and terminators that might unwind do not have any way to\n+//! indicate the unwind block.\n+//!\n+//!  - [`Goto`], [`Return`], [`Unreachable`], [`Drop`](Drop()), and [`DropAndReplace`] have associated functions.\n //!  - `match some_int_operand` becomes a `SwitchInt`. Each arm should be `literal => basic_block`\n //!     - The exception is the last arm, which must be `_ => basic_block` and corresponds to the\n //!       otherwise branch.\n+//!  - [`Call`] has an associated function as well. The third argument of this function is a normal\n+//!    function call expresion, for example `my_other_function(a, 5)`.\n //!\n \n #![unstable(\n@@ -223,6 +254,10 @@ macro_rules! define {\n \n define!(\"mir_return\", fn Return() -> BasicBlock);\n define!(\"mir_goto\", fn Goto(destination: BasicBlock) -> BasicBlock);\n+define!(\"mir_unreachable\", fn Unreachable() -> BasicBlock);\n+define!(\"mir_drop\", fn Drop<T>(place: T, goto: BasicBlock));\n+define!(\"mir_drop_and_replace\", fn DropAndReplace<T>(place: T, value: T, goto: BasicBlock));\n+define!(\"mir_call\", fn Call<T>(place: T, goto: BasicBlock, call: T));\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_retag_raw\", fn RetagRaw<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);"}, {"sha": "a1a27226b4e9210b1559c349c8c7527bb15e9946", "filename": "src/test/mir-opt/building/custom/terminators.assert_nonzero.built.after.mir", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.assert_nonzero.built.after.mir?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -0,0 +1,17 @@\n+// MIR for `assert_nonzero` after built\n+\n+fn assert_nonzero(_1: i32) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:27: +0:27\n+\n+    bb0: {\n+        switchInt(_1) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/terminators.rs:+3:13: +6:14\n+    }\n+\n+    bb1: {\n+        unreachable;                     // scope 0 at $DIR/terminators.rs:+10:13: +10:26\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+14:13: +14:21\n+    }\n+}"}, {"sha": "1b2345a965ed020a4e4750743139fe1751362ede", "filename": "src/test/mir-opt/building/custom/terminators.direct_call.built.after.mir", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.direct_call.built.after.mir?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -0,0 +1,16 @@\n+// MIR for `direct_call` after built\n+\n+fn direct_call(_1: i32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/terminators.rs:+0:27: +0:30\n+\n+    bb0: {\n+        _0 = ident::<i32>(_1) -> bb1;    // scope 0 at $DIR/terminators.rs:+3:13: +3:42\n+                                         // mir::Constant\n+                                         // + span: $DIR/terminators.rs:15:33: 15:38\n+                                         // + literal: Const { ty: fn(i32) -> i32 {ident::<i32>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "c903e5946961b7b51bda4628b62ef4f6796baca7", "filename": "src/test/mir-opt/building/custom/terminators.drop_first.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_first.built.after.mir?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `drop_first` after built\n+\n+fn drop_first(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:59: +0:59\n+\n+    bb0: {\n+        replace(_1 <- move _2) -> bb1;   // scope 0 at $DIR/terminators.rs:+3:13: +3:49\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "f14246f2d1206e07d01fb6437e419d61f9c8ed6c", "filename": "src/test/mir-opt/building/custom/terminators.drop_second.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.drop_second.built.after.mir?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `drop_second` after built\n+\n+fn drop_second(_1: WriteOnDrop<'_>, _2: WriteOnDrop<'_>) -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/terminators.rs:+0:60: +0:60\n+\n+    bb0: {\n+        drop(_2) -> bb1;                 // scope 0 at $DIR/terminators.rs:+3:13: +3:30\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "2f1b14069abe06a124aee230e203decae4b88c55", "filename": "src/test/mir-opt/building/custom/terminators.indirect_call.built.after.mir", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.indirect_call.built.after.mir?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -0,0 +1,13 @@\n+// MIR for `indirect_call` after built\n+\n+fn indirect_call(_1: i32, _2: fn(i32) -> i32) -> i32 {\n+    let mut _0: i32;                     // return place in scope 0 at $DIR/terminators.rs:+0:48: +0:51\n+\n+    bb0: {\n+        _0 = _2(_1) -> bb1;              // scope 0 at $DIR/terminators.rs:+3:13: +3:38\n+    }\n+\n+    bb1: {\n+        return;                          // scope 0 at $DIR/terminators.rs:+7:13: +7:21\n+    }\n+}"}, {"sha": "c23233fcf9aca05fa6531a1b327cc040f51f2be3", "filename": "src/test/mir-opt/building/custom/terminators.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf2f26ecc7338093fce4ec0013056d1fe6c720c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fcustom%2Fterminators.rs?ref=eaf2f26ecc7338093fce4ec0013056d1fe6c720c", "patch": "@@ -0,0 +1,108 @@\n+#![feature(custom_mir, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+fn ident<T>(t: T) -> T {\n+    t\n+}\n+\n+// EMIT_MIR terminators.direct_call.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn direct_call(x: i32) -> i32 {\n+    mir!(\n+        {\n+            Call(RET, retblock, ident(x))\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR terminators.indirect_call.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn indirect_call(x: i32, f: fn(i32) -> i32) -> i32 {\n+    mir!(\n+        {\n+            Call(RET, retblock, f(x))\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+struct WriteOnDrop<'a>(&'a mut i32, i32);\n+\n+impl<'a> Drop for WriteOnDrop<'a> {\n+    fn drop(&mut self) {\n+        *self.0 = self.1;\n+    }\n+}\n+\n+// EMIT_MIR terminators.drop_first.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn drop_first<'a>(a: WriteOnDrop<'a>, b: WriteOnDrop<'a>) {\n+    mir!(\n+        {\n+            DropAndReplace(a, Move(b), retblock)\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR terminators.drop_second.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn drop_second<'a>(a: WriteOnDrop<'a>, b: WriteOnDrop<'a>) {\n+    mir!(\n+        {\n+            Drop(b, retblock)\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+// EMIT_MIR terminators.assert_nonzero.built.after.mir\n+#[custom_mir(dialect = \"built\")]\n+fn assert_nonzero(a: i32) {\n+    mir!(\n+        {\n+            match a {\n+                0 => unreachable,\n+                _ => retblock\n+            }\n+        }\n+\n+        unreachable = {\n+            Unreachable()\n+        }\n+\n+        retblock = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(direct_call(5), 5);\n+    assert_eq!(indirect_call(5, ident), 5);\n+\n+    let mut a = 0;\n+    let mut b = 0;\n+    drop_first(WriteOnDrop(&mut a, 1), WriteOnDrop(&mut b, 1));\n+    assert_eq!((a, b), (1, 0));\n+\n+    let mut a = 0;\n+    let mut b = 0;\n+    drop_second(WriteOnDrop(&mut a, 1), WriteOnDrop(&mut b, 1));\n+    assert_eq!((a, b), (0, 1));\n+}"}]}