{"sha": "b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTRiODhkMTgwYmNhNWMyZjg5NmNmOGZiZDFiYTk2YTAyMDhkMTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-15T09:57:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-15T09:57:57Z"}, "message": "Merge pull request #2662 from mikerite/issue_2546\n\nFix useless_format false negative", "tree": {"sha": "369de6b075c425fb6581bb7e07f3a5234250f930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/369de6b075c425fb6581bb7e07f3a5234250f930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa0yIlCRBK7hj4Ov3rIwAAdHIIAI0nM+su/KGqOUvjpREN6H1f\nT5o5dvFGXMAQ1khaknPTbK0XHC/NQJPpQgE+sVgzzkqnfj3SyQJbfAU6NJNNwRgH\nWLV21M5puFsxmOJbCBKgdZSRFum646koARBQZ0WqThvs0GyIkCU/UEdxcTvWRClV\n/wlj7Oa5wRguMw3R7y98yn44NN/ExRLVe8C2iaeBFQyGBIcT+adAztSgRQMoS2xz\ng3Y2/hVFxvQylG7Mk0AMBAUcBkF18QLoGK/egKaqZqoGFXNw/nUcTTJRRwn5WSCb\n/QcJVfYVivTTrfxPhC8vdDoME6hKXp2j0L8Cpuoip6AOdFMWPKPE0Iz/AL4yWEo=\n=c3Wf\n-----END PGP SIGNATURE-----\n", "payload": "tree 369de6b075c425fb6581bb7e07f3a5234250f930\nparent cefb7b0f5862fe58294d56842327bc9cb62bfda7\nparent c7ad71ccf2a805529d18cf45a09bd3196994a488\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1523786277 +0200\ncommitter GitHub <noreply@github.com> 1523786277 +0200\n\nMerge pull request #2662 from mikerite/issue_2546\n\nFix useless_format false negative"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "html_url": "https://github.com/rust-lang/rust/commit/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cefb7b0f5862fe58294d56842327bc9cb62bfda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cefb7b0f5862fe58294d56842327bc9cb62bfda7", "html_url": "https://github.com/rust-lang/rust/commit/cefb7b0f5862fe58294d56842327bc9cb62bfda7"}, {"sha": "c7ad71ccf2a805529d18cf45a09bd3196994a488", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ad71ccf2a805529d18cf45a09bd3196994a488", "html_url": "https://github.com/rust-lang/rust/commit/c7ad71ccf2a805529d18cf45a09bd3196994a488"}], "stats": {"total": 124, "additions": 105, "deletions": 19}, "files": [{"sha": "25cff794fd896e39c603dae5b99d7c507ef6d4b7", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "patch": "@@ -2,8 +2,9 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::LitKind;\n+use syntax_pos::Span;\n use utils::paths;\n-use utils::{in_macro, is_expn_of, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n+use utils::{in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n \n /// **What it does:** Checks for the use of `format!(\"string literal with no\n /// argument\")` and `format!(\"{}\", foo)` where `foo` is a string.\n@@ -43,20 +44,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 return;\n             }\n             match expr.node {\n+\n                 // `format!(\"{}\", foo)` expansion\n                 ExprCall(ref fun, ref args) => {\n                     if_chain! {\n                         if let ExprPath(ref qpath) = fun.node;\n-                        if args.len() == 2;\n+                        if args.len() == 3;\n                         if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id));\n-                        if match_def_path(cx.tcx, fun_def_id, &paths::FMT_ARGUMENTS_NEWV1);\n-                        // ensure the format string is `\"{..}\"` with only one argument and no text\n-                        if check_static_str(&args[0]);\n-                        // ensure the format argument is `{}` ie. Display with no fancy option\n-                        // and that the argument is a string\n-                        if check_arg_is_display(cx, &args[1]);\n+                        if match_def_path(cx.tcx, fun_def_id, &paths::FMT_ARGUMENTS_NEWV1FORMATTED);\n+                        if check_single_piece(&args[0]);\n+                        if let Some(format_arg) = get_single_string_arg(cx, &args[1]);\n+                        if check_unformatted(&args[2]);\n                         then {\n-                            let sugg = format!(\"{}.to_string()\", snippet(cx, expr.span, \"<expr>\").into_owned());\n+                            let sugg = format!(\"{}.to_string()\", snippet(cx, format_arg, \"<arg>\").into_owned());\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n                                 db.span_suggestion(expr.span, \"consider using .to_string()\", sugg);\n                             });\n@@ -79,7 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n /// Checks if the expressions matches `&[\"\"]`\n-fn check_static_str(expr: &Expr) -> bool {\n+fn check_single_piece(expr: &Expr) -> bool {\n     if_chain! {\n         if let ExprAddrOf(_, ref expr) = expr.node; // &[\"\"]\n         if let ExprArray(ref exprs) = expr.node; // [\"\"]\n@@ -96,15 +96,17 @@ fn check_static_str(expr: &Expr) -> bool {\n \n /// Checks if the expressions matches\n /// ```rust,ignore\n-/// &match (&42,) {\n+/// &match (&\"arg\",) {\n /// (__arg0,) => [::std::fmt::ArgumentV1::new(__arg0,\n /// ::std::fmt::Display::fmt)],\n /// }\n /// ```\n-fn check_arg_is_display(cx: &LateContext, expr: &Expr) -> bool {\n+/// and that type of `__arg0` is `&str` or `String`\n+/// then returns the span of first element of the matched tuple\n+fn get_single_string_arg(cx: &LateContext, expr: &Expr) -> Option<Span> {\n     if_chain! {\n         if let ExprAddrOf(_, ref expr) = expr.node;\n-        if let ExprMatch(_, ref arms, _) = expr.node;\n+        if let ExprMatch(ref match_expr, ref arms, _) = expr.node;\n         if arms.len() == 1;\n         if arms[0].pats.len() == 1;\n         if let PatKind::Tuple(ref pat, None) = arms[0].pats[0].node;\n@@ -118,8 +120,40 @@ fn check_arg_is_display(cx: &LateContext, expr: &Expr) -> bool {\n         if match_def_path(cx.tcx, fun_def_id, &paths::DISPLAY_FMT_METHOD);\n         then {\n             let ty = walk_ptrs_ty(cx.tables.pat_ty(&pat[0]));\n+            if ty.sty == ty::TyStr || match_type(cx, ty, &paths::STRING) {\n+                if let ExprTup(ref values) = match_expr.node {\n+                    return Some(values[0].span);\n+                }\n+            }\n+        }\n+    }\n+\n+    None\n+}\n \n-            return ty.sty == ty::TyStr || match_type(cx, ty, &paths::STRING);\n+/// Checks if the expression matches\n+/// ```rust,ignore\n+/// &[_ {\n+///    format: _ {\n+///         width: _::Implied,\n+///         ...\n+///    },\n+///    ...,\n+/// }]\n+/// ```\n+fn check_unformatted(expr: &Expr) -> bool {\n+    if_chain! {\n+        if let ExprAddrOf(_, ref expr) = expr.node;\n+        if let ExprArray(ref exprs) = expr.node;\n+        if exprs.len() == 1;\n+        if let ExprStruct(_, ref fields, _) = exprs[0].node;\n+        if let Some(format_field) = fields.iter().find(|f| f.name.node == \"format\");\n+        if let ExprStruct(_, ref fields, _) = format_field.expr.node;\n+        if let Some(align_field) = fields.iter().find(|f| f.name.node == \"width\");\n+        if let ExprPath(ref qpath) = align_field.expr.node;\n+        if last_path_segment(qpath).name == \"Implied\";\n+        then {\n+            return true;\n         }\n     }\n "}, {"sha": "783c6ea095dc2b09eb4be3a67083f4139fef98e0", "filename": "tests/ui/format.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "patch": "@@ -12,15 +12,19 @@ fn main() {\n     format!(\"foo\");\n \n     format!(\"{}\", \"foo\");\n-    format!(\"{:?}\", \"foo\"); // we only want to warn about `{}`\n-    format!(\"{:+}\", \"foo\"); // we only want to warn about `{}`\n+    format!(\"{:?}\", \"foo\"); // don't warn about debug\n+    format!(\"{:8}\", \"foo\");\n+    format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n+    format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n     format!(\"foo {}\", \"bar\");\n     format!(\"{} bar\", \"foo\");\n \n     let arg: String = \"\".to_owned();\n     format!(\"{}\", arg);\n-    format!(\"{:?}\", arg); // we only want to warn about `{}`\n-    format!(\"{:+}\", arg); // we only want to warn about `{}`\n+    format!(\"{:?}\", arg); // don't warn about debug\n+    format!(\"{:8}\", arg);\n+    format!(\"{:+}\", arg); // warn when the format makes no difference\n+    format!(\"{:<}\", arg); // warn when the format makes no difference\n     format!(\"foo {}\", arg);\n     format!(\"{} bar\", arg);\n "}, {"sha": "fa5c740c551b51f953ead07dc34bfa1d2854043a", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=b2e4b88d180bca5c2f896cf8fbd1ba96a0208d15", "patch": "@@ -6,5 +6,53 @@ error: useless use of `format!`\n    |\n    = note: `-D useless-format` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: useless use of `format!`\n+  --> $DIR/format.rs:14:5\n+   |\n+14 |     format!(\"{}\", \"foo\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:17:5\n+   |\n+17 |     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:18:5\n+   |\n+18 |     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:23:5\n+   |\n+23 |     format!(\"{}\", arg);\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:26:5\n+   |\n+26 |     format!(\"{:+}\", arg); // warn when the format makes no difference\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:27:5\n+   |\n+27 |     format!(\"{:<}\", arg); // warn when the format makes no difference\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 7 previous errors\n "}]}