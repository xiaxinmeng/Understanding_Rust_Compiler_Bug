{"sha": "c21d09f3ccb161880033aef699734ddcf84c59d7", "node_id": "C_kwDOAAsO6NoAKGMyMWQwOWYzY2NiMTYxODgwMDMzYWVmNjk5NzM0ZGRjZjg0YzU5ZDc", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-26T10:56:13Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-26T10:56:13Z"}, "message": "insert type vars in function arguments", "tree": {"sha": "470cf86fc8155f8a5b792da8cd206e9611fc47f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/470cf86fc8155f8a5b792da8cd206e9611fc47f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c21d09f3ccb161880033aef699734ddcf84c59d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c21d09f3ccb161880033aef699734ddcf84c59d7", "html_url": "https://github.com/rust-lang/rust/commit/c21d09f3ccb161880033aef699734ddcf84c59d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c21d09f3ccb161880033aef699734ddcf84c59d7/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "615aaa47510fae3a95d95cbd8b607c3695878161", "url": "https://api.github.com/repos/rust-lang/rust/commits/615aaa47510fae3a95d95cbd8b607c3695878161", "html_url": "https://github.com/rust-lang/rust/commit/615aaa47510fae3a95d95cbd8b607c3695878161"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "f30758484300f1caeadf99bb6c1378be1cc58b35", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c21d09f3ccb161880033aef699734ddcf84c59d7/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21d09f3ccb161880033aef699734ddcf84c59d7/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=c21d09f3ccb161880033aef699734ddcf84c59d7", "patch": "@@ -1025,7 +1025,8 @@ impl<'a> InferenceContext<'a> {\n                 )\n             }\n         };\n-\n+        // Try to evaluate unevaluated constant, and insert variable if is not possible.\n+        let len = self.table.insert_const_vars_shallow(len);\n         TyKind::Array(elem_ty, len).intern(Interner)\n     }\n \n@@ -1681,9 +1682,10 @@ impl<'a> InferenceContext<'a> {\n                 } else {\n                     param_ty\n                 };\n-                if !coercion_target.is_unknown()\n-                    && self.coerce(Some(arg), &ty, &coercion_target).is_err()\n-                {\n+                // The function signature may contain some unknown types, so we need to insert\n+                // type vars here to avoid type mismatch false positive.\n+                let coercion_target = self.insert_type_vars(coercion_target);\n+                if self.coerce(Some(arg), &ty, &coercion_target).is_err() {\n                     self.result.type_mismatches.insert(\n                         arg.into(),\n                         TypeMismatch { expected: coercion_target, actual: ty.clone() },"}, {"sha": "1fdeddede096c1c2b261a74126a58e480889a584", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c21d09f3ccb161880033aef699734ddcf84c59d7/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21d09f3ccb161880033aef699734ddcf84c59d7/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=c21d09f3ccb161880033aef699734ddcf84c59d7", "patch": "@@ -1888,6 +1888,26 @@ fn main() {\n     _ = Outer {\n         inner: Inner::<1>(),\n     };\n+}\n+        \"#,\n+    );\n+    check_no_mismatches(\n+        r#\"\n+pub const N: usize = 2 + 2;\n+\n+fn f(t: [u8; N]) {}\n+\n+fn main() {\n+    let a = [1, 2, 3, 4];\n+    f(a);\n+    let b = [1; 4];\n+    let c: [u8; N] = b;\n+    let d = [1; N];\n+    let e: [u8; N] = d;\n+    let f = [1; N];\n+    let g = match f {\n+        [a, b, c, d] => a + b + c + d,\n+    };\n }\n         \"#,\n     );"}, {"sha": "c28f98d8333e28227fd66068d952f5309d6a2e96", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c21d09f3ccb161880033aef699734ddcf84c59d7/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c21d09f3ccb161880033aef699734ddcf84c59d7/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=c21d09f3ccb161880033aef699734ddcf84c59d7", "patch": "@@ -644,6 +644,25 @@ fn h() {\n         );\n     }\n \n+    #[test]\n+    fn unknown_type_in_function_signature() {\n+        check_diagnostics(\n+            r#\"\n+struct X<T>(T);\n+\n+fn foo(x: X<Unknown>) {}\n+fn test1() {\n+    // Unknown might be `i32`, so we should not emit type mismatch here.\n+    foo(X(42));\n+}\n+fn test2() {\n+    foo(42);\n+      //^^ error: expected X<{unknown}>, found i32\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn evaluate_const_generics_in_types() {\n         check_diagnostics("}]}