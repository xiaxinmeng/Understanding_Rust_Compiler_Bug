{"sha": "e6c959421320643352262caed15aeedb532ccf72", "node_id": "C_kwDOAAsO6NoAKGU2Yzk1OTQyMTMyMDY0MzM1MjI2MmNhZWQxNWFlZWRiNTMyY2NmNzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-09T22:00:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T22:00:29Z"}, "message": "Rollup merge of #100226 - cjgillot:noice-multibyte, r=davidtwco\n\nDo not manually craft a span pointing inside a multibyte character.\n\nFixes https://github.com/rust-lang/rust/issues/92462", "tree": {"sha": "524c4a1217175a77206d68a6ec615513e2bdb45b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524c4a1217175a77206d68a6ec615513e2bdb45b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6c959421320643352262caed15aeedb532ccf72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8tj9CRBK7hj4Ov3rIwAA+eMIAFGrCM2YqjILY/F9e7YyVq14\nySzAdWZC813pRtwFHQc9kKrpNS7bA2guQ25OUX/p5MbH5G1HIqgBXnl7/312STZw\nobsVGIdRnV9LTA4VBliUiVZYjEkd0BKpUU8uZ0tyuo9FQGKhkVkC247zd0rA3trs\nDd8wlai0DZ3LooSOsRUsX5lfOAlY/YiVtnG6cDJSoBzhtv87oN7la7ygXefDojjB\nlwZqRVYQAsA9Q6nmdmRcGwnKFF+lazdGEsJk/GCy02sC8NtDBO1hSj36esL538Bj\nkOiP/IY5CabnIQQ2MGnMR0RZ76idknRgl1By3EfKqK3eAI9DXNGZIedOpn0Blbg=\n=PG7F\n-----END PGP SIGNATURE-----\n", "payload": "tree 524c4a1217175a77206d68a6ec615513e2bdb45b\nparent 867453e2df14a738c02b74a9874e20dae2501dc2\nparent db7ddc50b62f4c0a687e591b69ebe224c8eafadb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660082429 +0200\ncommitter GitHub <noreply@github.com> 1660082429 +0200\n\nRollup merge of #100226 - cjgillot:noice-multibyte, r=davidtwco\n\nDo not manually craft a span pointing inside a multibyte character.\n\nFixes https://github.com/rust-lang/rust/issues/92462\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c959421320643352262caed15aeedb532ccf72", "html_url": "https://github.com/rust-lang/rust/commit/e6c959421320643352262caed15aeedb532ccf72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6c959421320643352262caed15aeedb532ccf72/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "867453e2df14a738c02b74a9874e20dae2501dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/867453e2df14a738c02b74a9874e20dae2501dc2", "html_url": "https://github.com/rust-lang/rust/commit/867453e2df14a738c02b74a9874e20dae2501dc2"}, {"sha": "db7ddc50b62f4c0a687e591b69ebe224c8eafadb", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7ddc50b62f4c0a687e591b69ebe224c8eafadb", "html_url": "https://github.com/rust-lang/rust/commit/db7ddc50b62f4c0a687e591b69ebe224c8eafadb"}], "stats": {"total": 142, "additions": 96, "deletions": 46}, "files": [{"sha": "4e7ba1c6ce4fa126df507839d3a972868313ccec", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e6c959421320643352262caed15aeedb532ccf72/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c959421320643352262caed15aeedb532ccf72/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=e6c959421320643352262caed15aeedb532ccf72", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::{BytePos, Span, DUMMY_SP};\n+use rustc_span::{BytePos, Span};\n \n declare_lint! {\n     /// The `unused_must_use` lint detects unused result of a type flagged as\n@@ -504,23 +504,23 @@ trait UnusedDelimLint {\n             ast::ExprKind::Block(ref block, None) if block.stmts.len() > 0 => {\n                 let start = block.stmts[0].span;\n                 let end = block.stmts[block.stmts.len() - 1].span;\n-                if value.span.from_expansion() || start.from_expansion() || end.from_expansion() {\n-                    (\n-                        value.span.with_hi(value.span.lo() + BytePos(1)),\n-                        value.span.with_lo(value.span.hi() - BytePos(1)),\n-                    )\n+                if let Some(start) = start.find_ancestor_inside(value.span)\n+                    && let Some(end) = end.find_ancestor_inside(value.span)\n+                {\n+                    Some((\n+                        value.span.with_hi(start.lo()),\n+                        value.span.with_lo(end.hi()),\n+                    ))\n                 } else {\n-                    (value.span.with_hi(start.lo()), value.span.with_lo(end.hi()))\n+                    None\n                 }\n             }\n             ast::ExprKind::Paren(ref expr) => {\n-                if value.span.from_expansion() || expr.span.from_expansion() {\n-                    (\n-                        value.span.with_hi(value.span.lo() + BytePos(1)),\n-                        value.span.with_lo(value.span.hi() - BytePos(1)),\n-                    )\n+                let expr_span = expr.span.find_ancestor_inside(value.span);\n+                if let Some(expr_span) = expr_span {\n+                    Some((value.span.with_hi(expr_span.lo()), value.span.with_lo(expr_span.hi())))\n                 } else {\n-                    (value.span.with_hi(expr.span.lo()), value.span.with_lo(expr.span.hi()))\n+                    None\n                 }\n             }\n             _ => return,\n@@ -529,36 +529,38 @@ trait UnusedDelimLint {\n             left_pos.map_or(false, |s| s >= value.span.lo()),\n             right_pos.map_or(false, |s| s <= value.span.hi()),\n         );\n-        self.emit_unused_delims(cx, spans, ctx.into(), keep_space);\n+        self.emit_unused_delims(cx, value.span, spans, ctx.into(), keep_space);\n     }\n \n     fn emit_unused_delims(\n         &self,\n         cx: &EarlyContext<'_>,\n-        spans: (Span, Span),\n+        value_span: Span,\n+        spans: Option<(Span, Span)>,\n         msg: &str,\n         keep_space: (bool, bool),\n     ) {\n-        // FIXME(flip1995): Quick and dirty fix for #70814. This should be fixed in rustdoc\n-        // properly.\n-        if spans.0 == DUMMY_SP || spans.1 == DUMMY_SP {\n-            return;\n-        }\n-\n-        cx.struct_span_lint(self.lint(), MultiSpan::from(vec![spans.0, spans.1]), |lint| {\n-            let replacement = vec![\n-                (spans.0, if keep_space.0 { \" \".into() } else { \"\".into() }),\n-                (spans.1, if keep_space.1 { \" \".into() } else { \"\".into() }),\n-            ];\n-            lint.build(fluent::lint::unused_delim)\n-                .set_arg(\"delim\", Self::DELIM_STR)\n-                .set_arg(\"item\", msg)\n-                .multipart_suggestion(\n+        let primary_span = if let Some((lo, hi)) = spans {\n+            MultiSpan::from(vec![lo, hi])\n+        } else {\n+            MultiSpan::from(value_span)\n+        };\n+        cx.struct_span_lint(self.lint(), primary_span, |lint| {\n+            let mut db = lint.build(fluent::lint::unused_delim);\n+            db.set_arg(\"delim\", Self::DELIM_STR);\n+            db.set_arg(\"item\", msg);\n+            if let Some((lo, hi)) = spans {\n+                let replacement = vec![\n+                    (lo, if keep_space.0 { \" \".into() } else { \"\".into() }),\n+                    (hi, if keep_space.1 { \" \".into() } else { \"\".into() }),\n+                ];\n+                db.multipart_suggestion(\n                     fluent::lint::suggestion,\n                     replacement,\n                     Applicability::MachineApplicable,\n-                )\n-                .emit();\n+                );\n+            }\n+            db.emit();\n         });\n     }\n \n@@ -766,15 +768,12 @@ impl UnusedParens {\n                 // Otherwise proceed with linting.\n                 _ => {}\n             }\n-            let spans = if value.span.from_expansion() || inner.span.from_expansion() {\n-                (\n-                    value.span.with_hi(value.span.lo() + BytePos(1)),\n-                    value.span.with_lo(value.span.hi() - BytePos(1)),\n-                )\n+            let spans = if let Some(inner) = inner.span.find_ancestor_inside(value.span) {\n+                Some((value.span.with_hi(inner.lo()), value.span.with_lo(inner.hi())))\n             } else {\n-                (value.span.with_hi(inner.span.lo()), value.span.with_lo(inner.span.hi()))\n+                None\n             };\n-            self.emit_unused_delims(cx, spans, \"pattern\", (false, false));\n+            self.emit_unused_delims(cx, value.span, spans, \"pattern\", (false, false));\n         }\n     }\n }\n@@ -879,15 +878,12 @@ impl EarlyLintPass for UnusedParens {\n                     );\n                 }\n                 _ => {\n-                    let spans = if ty.span.from_expansion() || r.span.from_expansion() {\n-                        (\n-                            ty.span.with_hi(ty.span.lo() + BytePos(1)),\n-                            ty.span.with_lo(ty.span.hi() - BytePos(1)),\n-                        )\n+                    let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n+                        Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n                     } else {\n-                        (ty.span.with_hi(r.span.lo()), ty.span.with_lo(r.span.hi()))\n+                        None\n                     };\n-                    self.emit_unused_delims(cx, spans, \"type\", (false, false));\n+                    self.emit_unused_delims(cx, ty.span, spans, \"type\", (false, false));\n                 }\n             }\n         }"}, {"sha": "8fcfae22a3d3385e31d9e7ed9f62b48c41dc4930", "filename": "src/test/ui/lint/unused_parens_multibyte_recovery.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6c959421320643352262caed15aeedb532ccf72/src%2Ftest%2Fui%2Flint%2Funused_parens_multibyte_recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6c959421320643352262caed15aeedb532ccf72/src%2Ftest%2Fui%2Flint%2Funused_parens_multibyte_recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_multibyte_recovery.rs?ref=e6c959421320643352262caed15aeedb532ccf72", "patch": "@@ -0,0 +1,11 @@\n+// ignore-tidy-trailing-newlines\n+//\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: format argument must be a string literal\n+//\n+// Verify that unused parens lint does not try to create a span\n+// which points in the middle of a multibyte character.\n+\n+fn f(){(print!(\u00e1\n\\ No newline at end of file"}, {"sha": "a0302b17e255d06d2fe85d7fb810ef67fbcd2f28", "filename": "src/test/ui/lint/unused_parens_multibyte_recovery.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e6c959421320643352262caed15aeedb532ccf72/src%2Ftest%2Fui%2Flint%2Funused_parens_multibyte_recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6c959421320643352262caed15aeedb532ccf72/src%2Ftest%2Fui%2Flint%2Funused_parens_multibyte_recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_multibyte_recovery.stderr?ref=e6c959421320643352262caed15aeedb532ccf72", "patch": "@@ -0,0 +1,43 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/unused_parens_multibyte_recovery.rs:11:17\n+   |\n+LL | fn f(){(print!(\u00e1\n+   |       --      - ^\n+   |       ||      |\n+   |       ||      unclosed delimiter\n+   |       |unclosed delimiter\n+   |       unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/unused_parens_multibyte_recovery.rs:11:17\n+   |\n+LL | fn f(){(print!(\u00e1\n+   |       --      - ^\n+   |       ||      |\n+   |       ||      unclosed delimiter\n+   |       |unclosed delimiter\n+   |       unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/unused_parens_multibyte_recovery.rs:11:17\n+   |\n+LL | fn f(){(print!(\u00e1\n+   |       --      - ^\n+   |       ||      |\n+   |       ||      unclosed delimiter\n+   |       |unclosed delimiter\n+   |       unclosed delimiter\n+\n+error: format argument must be a string literal\n+  --> $DIR/unused_parens_multibyte_recovery.rs:11:16\n+   |\n+LL | fn f(){(print!(\u00e1\n+   |                ^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL | fn f(){(print!(\"{}\", \u00e1\n+   |                +++++\n+\n+error: aborting due to 4 previous errors\n+"}]}