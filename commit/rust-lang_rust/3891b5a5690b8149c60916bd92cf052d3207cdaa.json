{"sha": "3891b5a5690b8149c60916bd92cf052d3207cdaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OTFiNWE1NjkwYjgxNDljNjA5MTZiZDkyY2YwNTJkMzIwN2NkYWE=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-29T19:51:04Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-29T20:11:55Z"}, "message": "tutorial: Minor cleanup.", "tree": {"sha": "f56273eeaec03acec23e10a54c14f464247f9fee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56273eeaec03acec23e10a54c14f464247f9fee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3891b5a5690b8149c60916bd92cf052d3207cdaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3891b5a5690b8149c60916bd92cf052d3207cdaa", "html_url": "https://github.com/rust-lang/rust/commit/3891b5a5690b8149c60916bd92cf052d3207cdaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3891b5a5690b8149c60916bd92cf052d3207cdaa/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d1c29912d7205e81726fb19571e8b706847317d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1c29912d7205e81726fb19571e8b706847317d", "html_url": "https://github.com/rust-lang/rust/commit/5d1c29912d7205e81726fb19571e8b706847317d"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "c6ae2f108f698cc10d0c2b911c2054ba87fde24a", "filename": "doc/tutorial.md", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3891b5a5690b8149c60916bd92cf052d3207cdaa/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3891b5a5690b8149c60916bd92cf052d3207cdaa/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3891b5a5690b8149c60916bd92cf052d3207cdaa", "patch": "@@ -274,7 +274,7 @@ characters. This is a bug that will eventually be fixed.\n \n The double-colon (`::`) is used as a module separator, so\n `io::println` means 'the thing named `println` in the module\n-named `io`.\n+named `io`'.\n \n Rust will normally emit warnings about unused variables. These can be\n suppressed by using a variable name that starts with an underscore.\n@@ -1114,9 +1114,9 @@ enum direction {\n This will define `north`, `east`, `south`, and `west` as constants,\n all of which have type `direction`.\n \n-When the enum is C like, that is none of the variants have parameters,\n-it is possible to explicitly set the discriminator values to an integer\n-value:\n+When an enum is C-like, that is, when none of the variants have\n+parameters, it is possible to explicitly set the discriminator values\n+to an integer value:\n \n ~~~~\n enum color {\n@@ -1372,7 +1372,7 @@ destructors. Resources might go away in the future.\n Rust datatypes are not trivial to copy (the way, for example,\n JavaScript values can be copied by simply taking one or two machine\n words and plunking them somewhere else). Shared boxes require\n-reference count updates, big records, enums, or unique pointers require\n+reference count updates, and big records, enums, or unique pointers require\n an arbitrary amount of data to be copied (plus updating the reference\n counts of shared boxes hanging off them).\n \n@@ -1492,7 +1492,7 @@ simply pick the most efficient passing style. There is one exception,\n which will be described in the section on [generics](#generics).\n \n To explicitly set the passing-style for a parameter, you prefix the\n-argument name with a sigil. There are two special passing styles that\n+argument name with a sigil. There are three special passing styles that\n are often useful. The first is by-mutable-pointer, written with a\n single `&`:\n \n@@ -1532,10 +1532,11 @@ non-copyable types.\n \n ## Generic functions\n \n-Throughout this tutorial, I've been defining functions like `for_rev`\n-that act only on integers. It is 2012, and we no longer expect to be\n-defining such functions again and again for every type they apply to.\n-Thus, Rust allows functions and datatypes to have type parameters.\n+Throughout this tutorial, we've been defining functions like `for_rev`\n+that act only on single data types. It is 2012, and we no longer\n+expect to be defining such functions again and again for every type\n+they apply to.  Thus, Rust allows functions and datatypes to have type\n+parameters.\n \n ~~~~\n fn for_rev<T>(v: [T], act: fn(T)) {\n@@ -1877,7 +1878,7 @@ just fine, but it does not have access to `enc::super_secret_number`.\n \n ## Namespaces\n \n-Rust uses three different namespaces. One for modules, one for types,\n+Rust uses three different namespaces: one for modules, one for types,\n and one for values. This means that this code is valid:\n \n ~~~~\n@@ -1901,10 +1902,10 @@ though `str` is a built-in type name.\n The resolution process in Rust simply goes up the chain of contexts,\n looking for the name in each context. Nested functions and modules\n create new contexts inside their parent function or module. A file\n-that's part of a bigger crate will have that crate's context as parent\n-context.\n+that's part of a bigger crate will have that crate's context as its\n+parent context.\n \n-Identifiers can shadow each others. In this program, `x` is of type\n+Identifiers can shadow each other. In this program, `x` is of type\n `int`:\n \n ~~~~"}]}