{"sha": "788a802dad3f273b74150b732d24d37a695d29f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OGE4MDJkYWQzZjI3M2I3NDE1MGI3MzJkMjRkMzdhNjk1ZDI5ZjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T17:25:23Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:22Z"}, "message": "New tests --- projection outlives relation", "tree": {"sha": "af418f292ef4e3fe2c3317543c4b2e49486772c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af418f292ef4e3fe2c3317543c4b2e49486772c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/788a802dad3f273b74150b732d24d37a695d29f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/788a802dad3f273b74150b732d24d37a695d29f6", "html_url": "https://github.com/rust-lang/rust/commit/788a802dad3f273b74150b732d24d37a695d29f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/788a802dad3f273b74150b732d24d37a695d29f6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15997750211421cc1367faba574b3d9b2dc2432", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15997750211421cc1367faba574b3d9b2dc2432", "html_url": "https://github.com/rust-lang/rust/commit/d15997750211421cc1367faba574b3d9b2dc2432"}], "stats": {"total": 428, "additions": 405, "deletions": 23}, "files": [{"sha": "f070ab6799c08bd1ac075f636a1e36af8310846c", "filename": "src/test/compile-fail/associated-types-outlives.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fassociated-types-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fassociated-types-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-outlives.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #24622. The older associated types code\n+// was erroneously assuming that all projections outlived the current\n+// fn body, causing this (invalid) code to be accepted.\n+\n+pub trait Foo<'a> {\n+    type Bar;\n+}\n+\n+impl<'a, T:'a> Foo<'a> for T {\n+    type Bar = &'a T;\n+}\n+\n+fn denormalise<'a, T>(t: &'a T) -> <T as Foo<'a>>::Bar {\n+    t\n+}\n+\n+pub fn free_and_use<T: for<'a> Foo<'a>,\n+                    F: for<'a> FnOnce(<T as Foo<'a>>::Bar)>(x: T, f: F) {\n+    let y;\n+    'body: loop { // lifetime annotations added for clarity\n+        's: loop { y = denormalise(&x); break }\n+        drop(x); //~ ERROR cannot move out of `x` because it is borrowed\n+        return f(y);\n+    }\n+}\n+\n+pub fn main() {\n+}"}, {"sha": "61897aac18769353f932d70296f4c36899784510", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -72,13 +72,12 @@ fn meh1<'a, T: Iter>(v: &'a T) -> Box<X+'a>\n     where T::Item : Clone\n {\n     // This case is kind of interesting. It's the same as `ok3` but\n-    // without the explicit declaration. In principle, it seems like\n-    // we ought to be able to infer that `T::Item : 'a` because we\n-    // invoked `v.as_self()` which yielded a value of type `&'a\n-    // T::Item`. But we're not that smart at present.\n+    // without the explicit declaration. This is valid because `T: 'a\n+    // => T::Item: 'a`, and the former we can deduce from our argument\n+    // of type `&'a T`.\n \n     let item = Clone::clone(v.as_item());\n-    Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live\n+    Box::new(item)\n }\n \n fn main() {}"}, {"sha": "65594ab8f2e29220ee603252622bf2e83b52fbe0", "filename": "src/test/compile-fail/regions-implied-bounds-projection-gap-1.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-1.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Illustrates the \"projection gap\": in this test, even though we know\n+// that `T::Foo: 'x`, that does not tell us that `T: 'x`, because\n+// there might be other ways for the caller of `func` to show that\n+// `T::Foo: 'x` holds (e.g., where-clause).\n+\n+trait Trait1<'x> {\n+    type Foo;\n+}\n+\n+// calling this fn should trigger a check that the type argument\n+// supplied is well-formed.\n+fn wf<T>() { }\n+\n+fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n+{\n+    wf::<&'x T>();\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn caller2<'x, T:Trait1<'x>>(t: &'x T)\n+{\n+    wf::<&'x T::Foo>(); // OK\n+}\n+\n+fn caller3<'x, T:Trait1<'x>>(t: &'x T::Foo)\n+{\n+    wf::<&'x T::Foo>(); // OK\n+}\n+\n+fn main() { }"}, {"sha": "b3037a1e187f4ca9f33062b662cbff7444bbc953", "filename": "src/test/compile-fail/regions-implied-bounds-projection-gap-2.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-2.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Along with the other tests in this series, illustrates the\n+// \"projection gap\": in this test, we know that `T: 'x`, and that is\n+// enough to conclude that `T::Foo: 'x`.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+trait Trait1<'x> {\n+    type Foo;\n+}\n+\n+// calling this fn should trigger a check that the type argument\n+// supplied is well-formed.\n+fn wf<T>() { }\n+\n+fn func<'x, T:Trait1<'x>>(t: &'x T)\n+{\n+    wf::<&'x T::Foo>();\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "a2e6de2137696f98e0009cdc5cf7d07580c6b06d", "filename": "src/test/compile-fail/regions-implied-bounds-projection-gap-3.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-3.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Along with the other tests in this series, illustrates the\n+// \"projection gap\": in this test, we know that `T::Foo: 'x`, and that\n+// is (naturally) enough to conclude that `T::Foo: 'x`.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+trait Trait1<'x> {\n+    type Foo;\n+}\n+\n+// calling this fn should trigger a check that the type argument\n+// supplied is well-formed.\n+fn wf<T>() { }\n+\n+fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n+{\n+    wf::<&'x T::Foo>();\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "b8582f8c26b3147b3e991a9cf1a970e19b043b7a", "filename": "src/test/compile-fail/regions-implied-bounds-projection-gap-4.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-4.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Along with the other tests in this series, illustrates the\n+// \"projection gap\": in this test, we know that `T: 'x`, and that\n+// is (naturally) enough to conclude that `T: 'x`.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+trait Trait1<'x> {\n+    type Foo;\n+}\n+\n+// calling this fn should trigger a check that the type argument\n+// supplied is well-formed.\n+fn wf<T>() { }\n+\n+fn func<'x, T:Trait1<'x>>(t: &'x T)\n+{\n+    wf::<&'x T>();\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "47985f931dd34fe190cb588e123f6c69d1959a26", "filename": "src/test/compile-fail/regions-implied-bounds-projection-gap-hr-1.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-hr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-hr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-implied-bounds-projection-gap-hr-1.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The \"projection gap\" is particularly \"fun\" around higher-ranked\n+// projections.  This is because the current code is hard-coded to say\n+// that a projection that contains escaping regions, like `<T as\n+// Trait2<'y, 'z>>::Foo` where `'z` is bound, can only be found to\n+// outlive a region if all components that appear free (`'y`, where)\n+// outlive that region. However, we DON'T add those components to the\n+// implied bounds set, but rather we treat projections with escaping\n+// regions as opaque entities, just like projections without escaping\n+// regions.\n+\n+trait Trait1<T> { }\n+\n+trait Trait2<'a, 'b> {\n+    type Foo;\n+}\n+\n+fn wf<T>() { }\n+\n+// As a side-effect of the conservative process above, this argument\n+// is not automatically considered well-formed, since for it to be WF,\n+// we would need to know that `'y: 'x`, but we do not infer that.\n+fn callee<'x, 'y, T>(\n+    t: &'x for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+{\n+    wf::<&'x &'y i32>();\n+    //~^ ERROR reference has a longer lifetime than the data it references\n+}\n+\n+fn main() { }"}, {"sha": "6fb409326f1f71ed6687db8c1d0e9639840222c8", "filename": "src/test/compile-fail/regions-outlives-nominal-type-enum.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-enum.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_enum_region {\n+    enum Foo<'a> {\n+        V { x: &'a i32 }\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<'b>\n+    }\n+}\n+\n+mod rev_variant_enum_region {\n+    enum Foo<'a> {\n+        V { x: fn(&'a i32) }\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<'b>\n+    }\n+}\n+\n+mod variant_enum_type {\n+    enum Foo<T> {\n+        V { x: T }\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<&'b i32>\n+    }\n+}\n+\n+mod rev_variant_enum_type {\n+    enum Foo<T> {\n+        V { x: fn(T) }\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<&'b i32>\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "fb3fdddae88794dbecc74388965a90e74a686029", "filename": "src/test/compile-fail/regions-outlives-nominal-type-struct.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-nominal-type-struct.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_struct_region {\n+    struct Foo<'a> {\n+        x: &'a i32,\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<'b>\n+    }\n+}\n+\n+mod rev_variant_struct_region {\n+    struct Foo<'a> {\n+        x: fn(&'a i32),\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<'b>\n+    }\n+}\n+\n+mod variant_struct_type {\n+    struct Foo<T> {\n+        x: T\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<&'b i32>\n+    }\n+}\n+\n+mod rev_variant_struct_type {\n+    struct Foo<T> {\n+        x: fn(T)\n+    }\n+    struct Bar<'a,'b> { //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<&'b i32>\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "b8c4a7f8a8c0555e2be24ab036cb96b4397795ef", "filename": "src/test/compile-fail/regions-outlives-projection-container-hrtb.rs", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-hrtb.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -37,10 +37,10 @@ pub struct WithHrAssoc<T>\n }\n \n fn with_assoc<'a,'b>() {\n-    // We get no error here because the where clause has a higher-ranked assoc type,\n-    // which could not be projected from.\n+    // We get an error because beacuse 'b:'a does not hold:\n \n     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -57,12 +57,13 @@ pub struct WithHrAssocSub<T>\n }\n \n fn with_assoc_sub<'a,'b>() {\n-    // Same here, because although the where clause is not HR, it\n-    // extends a trait in a HR way.\n+    // The error here is just because `'b:'a` must hold for the type\n+    // below to be well-formed, it is not related to the HR relation.\n \n     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n #[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+fn main() {\n }", "previous_filename": "src/test/compile-fail/regions-assoc-type-outlives-container-hrtb.rs"}, {"sha": "2ceaea98d279703f89aaf873deed387fca41e601", "filename": "src/test/compile-fail/regions-outlives-projection-container-wc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container-wc.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "previous_filename": "src/test/compile-fail/regions-assoc-type-outlives-container-wc.rs"}, {"sha": "6f5ebf2d1cecf3b246d983821729ce088939d03b", "filename": "src/test/compile-fail/regions-outlives-projection-container.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-container.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -59,11 +59,10 @@ fn with_assoc1<'a,'b>() where 'b : 'a {\n }\n \n fn without_assoc<'a,'b>() {\n-    // Here there are no associated types and the `'b` appearing in\n-    // `TheType<'b>` is purely covariant, so there is no requirement\n-    // that `'b:'a` holds.\n+    // Here there are no associated types but there is a requirement\n+    // that `'b:'a` holds because the `'b` appears in `TheType<'b>`.\n \n-    let _: &'a WithoutAssoc<TheType<'b>> = loop { };\n+    let _: &'a WithoutAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n }\n \n fn call_with_assoc<'a,'b>() {\n@@ -72,13 +71,13 @@ fn call_with_assoc<'a,'b>() {\n     // no data.\n \n     call::<&'a WithAssoc<TheType<'b>>>();\n-    //~^ ERROR cannot infer\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn call_without_assoc<'a,'b>() {\n     // As `without_assoc`, but in a distinct scenario.\n \n-    call::<&'a WithoutAssoc<TheType<'b>>>();\n+    call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n }\n \n fn call<T>() { }", "previous_filename": "src/test/compile-fail/regions-assoc-type-outlives-container.rs"}, {"sha": "04682a7729735121e61b4424e2a5077bd63de8e4", "filename": "src/test/compile-fail/regions-outlives-projection-trait-def.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-projection-trait-def.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `<F as Foo<'a>>::Type: 'b`, where `trait Foo<'a> { Type:\n+// 'a; }`, does not require that `F: 'b`.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+trait SomeTrait<'a> {\n+    type Type: 'a;\n+}\n+\n+impl<'a: 'c, 'c, T> SomeTrait<'a> for &'c T where T: SomeTrait<'a> {\n+    type Type = <T as SomeTrait<'a>>::Type;\n+    //          ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+    //                       |\n+    // Note that this type must outlive 'a, due to the trait\n+    // definition.  If we fall back to OutlivesProjectionComponents\n+    // here, then we would require that `T:'a`, which is too strong.\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "94f7a350cf787789b16f959666a663e28e92d94f", "filename": "src/test/compile-fail/regions-outlives-scalar.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Fregions-outlives-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-outlives-scalar.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that scalar values outlive all regions.\n+// Rule OutlivesScalar from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct Foo<'a> {\n+    x: &'a i32,\n+    y: &'static i32\n+}\n+\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}, {"sha": "80d2884ee60aaaa84ea870748a70a295cd98f7e9", "filename": "src/test/compile-fail/traits-issue-23003-overflow.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788a802dad3f273b74150b732d24d37a695d29f6/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-issue-23003-overflow.rs?ref=788a802dad3f273b74150b732d24d37a695d29f6", "patch": "@@ -9,10 +9,11 @@\n // except according to those terms.\n \n // A variant of traits-issue-23003 in which an infinite series of\n-// types are required. This currently creates an overflow. This test\n-// is included to ensure that some controlled failure, at least,\n-// results -- but it might be that we should adjust the rules somewhat\n-// to make this legal. -nmatsakis\n+// types are required. This test now just compiles fine, since the\n+// relevant rules that triggered the overflow were removed.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n \n use std::marker::PhantomData;\n \n@@ -32,7 +33,7 @@ impl<B> Async for Complete<B> {\n     type Cancel = Receipt<Complete<Option<B>>>;\n }\n \n-fn foo(r: Receipt<Complete<()>>) { }\n-//~^ ERROR overflow\n+fn foo(_: Receipt<Complete<()>>) { }\n \n-fn main() { }\n+#[rustc_error]\n+fn main() { } //~ ERROR compilation successful"}]}