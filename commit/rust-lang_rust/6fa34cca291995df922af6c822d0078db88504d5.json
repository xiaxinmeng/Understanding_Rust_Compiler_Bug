{"sha": "6fa34cca291995df922af6c822d0078db88504d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTM0Y2NhMjkxOTk1ZGY5MjJhZjZjODIyZDAwNzhkYjg4NTA0ZDU=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-25T16:38:08Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-25T16:39:21Z"}, "message": "methods: suggest correct replacement for `to_string()` (fixes #232)", "tree": {"sha": "b7920ea68e568dfae7f12f499151ea90c745a087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7920ea68e568dfae7f12f499151ea90c745a087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa34cca291995df922af6c822d0078db88504d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa34cca291995df922af6c822d0078db88504d5", "html_url": "https://github.com/rust-lang/rust/commit/6fa34cca291995df922af6c822d0078db88504d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa34cca291995df922af6c822d0078db88504d5/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d72faca4222dbe03523cff74bf86318a206342", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d72faca4222dbe03523cff74bf86318a206342", "html_url": "https://github.com/rust-lang/rust/commit/53d72faca4222dbe03523cff74bf86318a206342"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "bfe2f7984a90549bf90d6735d21a88a10f10d675", "filename": "src/methods.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fa34cca291995df922af6c822d0078db88504d5/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa34cca291995df922af6c822d0078db88504d5/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=6fa34cca291995df922af6c822d0078db88504d5", "patch": "@@ -1,8 +1,10 @@\n use syntax::ast::*;\n use rustc::lint::*;\n use rustc::middle::ty;\n+use std::iter;\n+use std::borrow::Cow;\n \n-use utils::{span_lint, match_type, walk_ptrs_ty};\n+use utils::{snippet, span_lint, match_type, walk_ptrs_ty_depth};\n use utils::{OPTION_PATH, RESULT_PATH, STRING_PATH};\n \n #[derive(Copy,Clone)]\n@@ -24,7 +26,7 @@ impl LintPass for MethodsPass {\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprMethodCall(ref ident, _, ref args) = expr.node {\n-            let obj_ty = walk_ptrs_ty(cx.tcx.expr_ty(&args[0]));\n+            let (obj_ty, ptr_depth) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&args[0]));\n             if ident.node.name == \"unwrap\" {\n                 if match_type(cx, obj_ty, &OPTION_PATH) {\n                     span_lint(cx, OPTION_UNWRAP_USED, expr.span,\n@@ -39,7 +41,15 @@ impl LintPass for MethodsPass {\n             }\n             else if ident.node.name == \"to_string\" {\n                 if obj_ty.sty == ty::TyStr {\n-                    span_lint(cx, STR_TO_STRING, expr.span, \"`str.to_owned()` is faster\");\n+                    let mut arg_str = snippet(cx, args[0].span, \"_\");\n+                    if ptr_depth > 1 {\n+                        arg_str = Cow::Owned(format!(\n+                            \"({}{})\",\n+                            iter::repeat('*').take(ptr_depth - 1).collect::<String>(),\n+                            arg_str));\n+                    }\n+                    span_lint(cx, STR_TO_STRING, expr.span, &format!(\n+                        \"`{}.to_owned()` is faster\", arg_str));\n                 } else if match_type(cx, obj_ty, &STRING_PATH) {\n                     span_lint(cx, STRING_TO_STRING, expr.span, \"`String.to_string()` is a no-op; use \\\n                                                                 `clone()` to make a copy\");"}, {"sha": "1b01d558094a30b453e326dc9974f161fbcd6f8c", "filename": "src/utils.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6fa34cca291995df922af6c822d0078db88504d5/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa34cca291995df922af6c822d0078db88504d5/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=6fa34cca291995df922af6c822d0078db88504d5", "patch": "@@ -158,6 +158,17 @@ pub fn walk_ptrs_ty(ty: ty::Ty) -> ty::Ty {\n     }\n }\n \n+/// return the base type for references and raw pointers, and count reference depth\n+pub fn walk_ptrs_ty_depth(ty: ty::Ty) -> (ty::Ty, usize) {\n+    fn inner(ty: ty::Ty, depth: usize) -> (ty::Ty, usize) {\n+        match ty.sty {\n+            ty::TyRef(_, ref tm) | ty::TyRawPtr(ref tm) => inner(tm.ty, depth + 1),\n+            _ => (ty, depth)\n+        }\n+    }\n+    inner(ty, 0)\n+}\n+\n /// Produce a nested chain of if-lets and ifs from the patterns:\n ///\n ///     if_let_chain! {"}, {"sha": "811c44ef85cb846b538dea588ba684d75c15a494", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6fa34cca291995df922af6c822d0078db88504d5/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa34cca291995df922af6c822d0078db88504d5/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=6fa34cca291995df922af6c822d0078db88504d5", "patch": "@@ -10,6 +10,9 @@ fn main() {\n     let res: Result<i32, ()> = Ok(0);\n     let _ = res.unwrap();  //~ERROR used unwrap() on a Result\n \n-    let string = \"str\".to_string();  //~ERROR `str.to_owned()` is faster\n+    let _ = \"str\".to_string();  //~ERROR `\"str\".to_owned()` is faster\n+\n+    let v = &\"str\";\n+    let string = v.to_string();  //~ERROR `(*v).to_owned()` is faster\n     let _again = string.to_string();  //~ERROR `String.to_string()` is a no-op\n }"}, {"sha": "7e21294a3d16a3c1dcb5df27bb166d8f8411426b", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6fa34cca291995df922af6c822d0078db88504d5/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa34cca291995df922af6c822d0078db88504d5/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=6fa34cca291995df922af6c822d0078db88504d5", "patch": "@@ -4,29 +4,29 @@\n #[deny(string_add)]\n #[allow(string_add_assign)]\n fn add_only() { // ignores assignment distinction\n-\tlet mut x = \"\".to_owned();\n+    let mut x = \"\".to_owned();\n \n     for _ in (1..3) {\n         x = x + \".\"; //~ERROR you added something to a string.\n     }\n-    \n+\n     let y = \"\".to_owned();\n     let z = y + \"...\"; //~ERROR you added something to a string.\n-    \n+\n     assert_eq!(&x, &z);\n }\n \n #[deny(string_add_assign)]\n fn add_assign_only() {\n-\tlet mut x = \"\".to_owned();\n+    let mut x = \"\".to_owned();\n \n     for _ in (1..3) {\n         x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n     }\n-    \n+\n     let y = \"\".to_owned();\n     let z = y + \"...\";\n-    \n+\n     assert_eq!(&x, &z);\n }\n \n@@ -37,20 +37,20 @@ fn both() {\n     for _ in (1..3) {\n         x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n     }\n-    \n+\n     let y = \"\".to_owned();\n     let z = y + \"...\"; //~ERROR you added something to a string.\n-    \n+\n     assert_eq!(&x, &z);\n }\n \n fn main() {\n-\tadd_only();\n-\tadd_assign_only();\n-\tboth();\n-\t\n-\t// the add is only caught for String\n-\tlet mut x = 1;\n-\tx = x + 1;\n-\tassert_eq!(2, x);\n+    add_only();\n+    add_assign_only();\n+    both();\n+\n+    // the add is only caught for String\n+    let mut x = 1;\n+    x = x + 1;\n+    assert_eq!(2, x);\n }"}]}