{"sha": "fd01fbc05884178122471a1a44b715f0dc87d187", "node_id": "C_kwDOAAsO6NoAKGZkMDFmYmMwNTg4NDE3ODEyMjQ3MWExYTQ0YjcxNWYwZGM4N2QxODc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-13T06:01:18Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-13T06:01:18Z"}, "message": "Remove some unnecessary `rustc_allow_const_fn_unstable` attributes.", "tree": {"sha": "5765aa935b7371acc62d2ca617b6cad846f01003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5765aa935b7371acc62d2ca617b6cad846f01003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd01fbc05884178122471a1a44b715f0dc87d187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd01fbc05884178122471a1a44b715f0dc87d187", "html_url": "https://github.com/rust-lang/rust/commit/fd01fbc05884178122471a1a44b715f0dc87d187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd01fbc05884178122471a1a44b715f0dc87d187/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b4f1be33607fc4f18ce19cfd475ac9f43213fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b4f1be33607fc4f18ce19cfd475ac9f43213fc", "html_url": "https://github.com/rust-lang/rust/commit/08b4f1be33607fc4f18ce19cfd475ac9f43213fc"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "4be5f6cf9ca514773cf8857dce2058e43c46b5fd", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=fd01fbc05884178122471a1a44b715f0dc87d187", "patch": "@@ -118,7 +118,6 @@ impl<T, A: Allocator> RawVec<T, A> {\n \n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n         Self { ptr: Unique::dangling(), cap: 0, alloc }"}, {"sha": "70969edd6eaf7019ad371f50336ef1a0a0a1a38d", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=fd01fbc05884178122471a1a44b715f0dc87d187", "patch": "@@ -52,7 +52,6 @@ macro_rules! nonzero_integers {\n                 #[$const_new_unchecked_stability]\n                 #[must_use]\n                 #[inline]\n-                #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)] // required by assert_unsafe_precondition\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     // SAFETY: this is guaranteed to be safe by the caller.\n                     unsafe {"}, {"sha": "d0746698f40131940c281155cfafd0daa7de16f1", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=fd01fbc05884178122471a1a44b715f0dc87d187", "patch": "@@ -1486,7 +1486,6 @@ impl<T> Option<T> {\n     where\n         T: ~const Default,\n     {\n-        #[rustc_allow_const_fn_unstable(const_fn_trait_bound)]\n         const fn default<T: ~const Default>() -> T {\n             T::default()\n         }"}, {"sha": "413fe7e6cc40f7303f48673b1f083ae0b7c3a1d5", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=fd01fbc05884178122471a1a44b715f0dc87d187", "patch": "@@ -147,7 +147,6 @@ impl RawWakerVTable {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "cdb2bac2607572c8ffce7f7d1e5d254b9eb89b84", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=fd01fbc05884178122471a1a44b715f0dc87d187", "patch": "@@ -416,7 +416,6 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n }\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         extern \"C\" fn run(\n             bridge: Bridge<'_>,\n@@ -429,7 +428,6 @@ impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n }\n \n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n@@ -474,7 +472,6 @@ impl ProcMacro {\n         }\n     }\n \n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n@@ -483,15 +480,13 @@ impl ProcMacro {\n         ProcMacro::CustomDerive { trait_name, attributes, client: Client::expand1(expand) }\n     }\n \n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn attr(\n         name: &'static str,\n         expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr { name, client: Client::expand2(expand) }\n     }\n \n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn bang(\n         name: &'static str,\n         expand: fn(crate::TokenStream) -> crate::TokenStream,"}, {"sha": "2cde1f65adf9c484ab0aee45fe6c978fda30cbb9", "filename": "library/proc_macro/src/bridge/scoped_cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd01fbc05884178122471a1a44b715f0dc87d187/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs?ref=fd01fbc05884178122471a1a44b715f0dc87d187", "patch": "@@ -35,7 +35,6 @@ impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {\n pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);\n \n impl<T: LambdaL> ScopedCell<T> {\n-    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {\n         ScopedCell(Cell::new(value))\n     }"}]}