{"sha": "ebc7eda9e75829305a31a00037056a5365d261fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzdlZGE5ZTc1ODI5MzA1YTMxYTAwMDM3MDU2YTUzNjVkMjYxZmU=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-24T13:22:23Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-24T20:35:17Z"}, "message": "perf: Add inline on commonly used methods added in 69464\n\nReclaims most of the regression in inflate", "tree": {"sha": "8c155eb373bf7500a139b183ec62405b06fe2ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c155eb373bf7500a139b183ec62405b06fe2ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc7eda9e75829305a31a00037056a5365d261fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc7eda9e75829305a31a00037056a5365d261fe", "html_url": "https://github.com/rust-lang/rust/commit/ebc7eda9e75829305a31a00037056a5365d261fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc7eda9e75829305a31a00037056a5365d261fe/comments", "author": null, "committer": null, "parents": [{"sha": "1d8489c150df7d0e751f7c438541036df1a9ac5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8489c150df7d0e751f7c438541036df1a9ac5e", "html_url": "https://github.com/rust-lang/rust/commit/1d8489c150df7d0e751f7c438541036df1a9ac5e"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "b4cc85293f7c19b84d27b612d0b09f56a25f7cd6", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=ebc7eda9e75829305a31a00037056a5365d261fe", "patch": "@@ -37,6 +37,7 @@ pub enum UndoLog<K, V> {\n }\n \n impl<K, V, M, L> SnapshotMap<K, V, M, L> {\n+    #[inline]\n     pub fn with_log<L2>(&mut self, undo_log: L2) -> SnapshotMap<K, V, &mut M, L2> {\n         SnapshotMap { map: &mut self.map, undo_log, _marker: PhantomData }\n     }"}, {"sha": "5dedaced0b1127538bd327d50701298b4834a341", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=ebc7eda9e75829305a31a00037056a5365d261fe", "patch": "@@ -219,18 +219,22 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {\n         &self.region_obligations\n     }\n \n+    #[inline]\n     pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {\n         self.projection_cache.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n     fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {\n         self.type_variable_storage.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n     fn int_unification_table(\n         &mut self,\n     ) -> ut::UnificationTable<\n@@ -243,6 +247,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         self.int_unification_storage.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n     fn float_unification_table(\n         &mut self,\n     ) -> ut::UnificationTable<\n@@ -255,6 +260,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         self.float_unification_storage.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n     fn const_unification_table(\n         &mut self,\n     ) -> ut::UnificationTable<\n@@ -267,6 +273,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         self.const_unification_storage.with_log(&mut self.undo_log)\n     }\n \n+    #[inline]\n     pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {\n         self.region_constraint_storage\n             .as_mut()\n@@ -1645,14 +1652,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// having to resort to storing full `GenericArg`s in `stalled_on`.\n     #[inline(always)]\n     pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {\n-        let mut inner = self.inner.borrow_mut();\n         match infer_var {\n             TyOrConstInferVar::Ty(v) => {\n                 use self::type_variable::TypeVariableValue;\n \n                 // If `inlined_probe` returns a `Known` value, it never equals\n                 // `ty::Infer(ty::TyVar(v))`.\n-                match inner.type_variables().inlined_probe(v) {\n+                match self.inner.borrow_mut().type_variables().inlined_probe(v) {\n                     TypeVariableValue::Unknown { .. } => false,\n                     TypeVariableValue::Known { .. } => true,\n                 }\n@@ -1662,23 +1668,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // If `inlined_probe_value` returns a value it's always a\n                 // `ty::Int(_)` or `ty::UInt(_)`, which never matches a\n                 // `ty::Infer(_)`.\n-                inner.int_unification_table().inlined_probe_value(v).is_some()\n+                self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()\n             }\n \n             TyOrConstInferVar::TyFloat(v) => {\n                 // If `probe_value` returns a value it's always a\n                 // `ty::Float(_)`, which never matches a `ty::Infer(_)`.\n                 //\n                 // Not `inlined_probe_value(v)` because this call site is colder.\n-                inner.float_unification_table().probe_value(v).is_some()\n+                self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()\n             }\n \n             TyOrConstInferVar::Const(v) => {\n                 // If `probe_value` returns a `Known` value, it never equals\n                 // `ty::ConstKind::Infer(ty::InferConst::Var(v))`.\n                 //\n                 // Not `inlined_probe_value(v)` because this call site is colder.\n-                match inner.const_unification_table().probe_value(v).val {\n+                match self.inner.borrow_mut().const_unification_table().probe_value(v).val {\n                     ConstVariableValue::Unknown { .. } => false,\n                     ConstVariableValue::Known { .. } => true,\n                 }"}, {"sha": "095a20105e574d7550762aac1b603841e9f121fc", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ebc7eda9e75829305a31a00037056a5365d261fe", "patch": "@@ -68,12 +68,14 @@ pub struct RegionConstraintCollector<'a, 'tcx> {\n \n impl std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {\n     type Target = RegionConstraintStorage<'tcx>;\n+    #[inline]\n     fn deref(&self) -> &RegionConstraintStorage<'tcx> {\n         self.storage\n     }\n }\n \n impl std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {\n+    #[inline]\n     fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {\n         self.storage\n     }\n@@ -345,6 +347,7 @@ impl<'tcx> RegionConstraintStorage<'tcx> {\n         Self::default()\n     }\n \n+    #[inline]\n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n         undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n@@ -796,6 +799,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n             .unwrap_or(None)\n     }\n \n+    #[inline]\n     fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, ty::RegionVid> {\n         ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)\n     }"}, {"sha": "53c7dcc6377184c02cae803e1a30b2e14a525d81", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=ebc7eda9e75829305a31a00037056a5365d261fe", "patch": "@@ -87,11 +87,7 @@ pub struct TypeVariableStorage<'tcx> {\n }\n \n pub struct TypeVariableTable<'a, 'tcx> {\n-    values: &'a mut sv::SnapshotVecStorage<Delegate>,\n-\n-    eq_relations: &'a mut ut::UnificationTableStorage<TyVidEqKey<'tcx>>,\n-\n-    sub_relations: &'a mut ut::UnificationTableStorage<ty::TyVid>,\n+    storage: &'a mut TypeVariableStorage<'tcx>,\n \n     undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n@@ -165,12 +161,12 @@ impl<'tcx> TypeVariableStorage<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n         undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n     ) -> TypeVariableTable<'a, 'tcx> {\n-        let TypeVariableStorage { values, eq_relations, sub_relations } = self;\n-        TypeVariableTable { values, eq_relations, sub_relations, undo_log }\n+        TypeVariableTable { storage: self, undo_log }\n     }\n }\n \n@@ -180,15 +176,15 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n     pub fn var_diverges(&self, vid: ty::TyVid) -> bool {\n-        self.values.get(vid.index as usize).diverging\n+        self.storage.values.get(vid.index as usize).diverging\n     }\n \n     /// Returns the origin that was given when `vid` was created.\n     ///\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n     pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {\n-        &self.values.get(vid.index as usize).origin\n+        &self.storage.values.get(vid.index as usize).origin\n     }\n \n     /// Records that `a == b`, depending on `dir`.\n@@ -265,7 +261,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n \n     /// Returns the number of type variables created thus far.\n     pub fn num_vars(&self) -> usize {\n-        self.values.len()\n+        self.storage.values.len()\n     }\n \n     /// Returns the \"root\" variable of `vid` in the `eq_relations`\n@@ -319,18 +315,21 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n         }\n     }\n \n+    #[inline]\n     fn values(\n         &mut self,\n     ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {\n-        self.values.with_log(self.undo_log)\n+        self.storage.values.with_log(self.undo_log)\n     }\n \n+    #[inline]\n     fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {\n-        self.eq_relations.with_log(self.undo_log)\n+        self.storage.eq_relations.with_log(self.undo_log)\n     }\n \n+    #[inline]\n     fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {\n-        self.sub_relations.with_log(self.undo_log)\n+        self.storage.sub_relations.with_log(self.undo_log)\n     }\n \n     /// Returns a range of the type variables created during the snapshot.\n@@ -342,7 +341,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n         (\n             range.start..range.end,\n             (range.start.index..range.end.index)\n-                .map(|index| self.values.get(index as usize).origin)\n+                .map(|index| self.storage.values.get(index as usize).origin)\n                 .collect(),\n         )\n     }\n@@ -378,7 +377,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n                         // quick check to see if this variable was\n                         // created since the snapshot started or not.\n                         let mut eq_relations = ut::UnificationTable::with_log(\n-                            &mut *self.eq_relations,\n+                            &mut self.storage.eq_relations,\n                             &mut *self.undo_log,\n                         );\n                         let escaping_type = match eq_relations.probe_value(vid) {\n@@ -400,7 +399,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n     /// Returns indices of all variables that are not yet\n     /// instantiated.\n     pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {\n-        (0..self.values.len())\n+        (0..self.storage.values.len())\n             .filter_map(|i| {\n                 let vid = ty::TyVid { index: i as u32 };\n                 match self.probe(vid) {"}, {"sha": "e7f1869955d20cd84944370a6908fc48326f8d64", "filename": "src/librustc_infer/infer/undo_log.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs?ref=ebc7eda9e75829305a31a00037056a5365d261fe", "patch": "@@ -100,10 +100,12 @@ impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>\n where\n     UndoLog<'tcx>: From<T>,\n {\n+    #[inline]\n     fn num_open_snapshots(&self) -> usize {\n         self.num_open_snapshots\n     }\n \n+    #[inline]\n     fn push(&mut self, undo: T) {\n         if self.in_snapshot() {\n             self.logs.push(undo.into())"}, {"sha": "65284bcee912c446d44df88659d67548098f4286", "filename": "src/librustc_infer/traits/project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc7eda9e75829305a31a00037056a5365d261fe/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fproject.rs?ref=ebc7eda9e75829305a31a00037056a5365d261fe", "patch": "@@ -95,6 +95,7 @@ pub enum ProjectionCacheEntry<'tcx> {\n }\n \n impl<'tcx> ProjectionCacheStorage<'tcx> {\n+    #[inline]\n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n         undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n@@ -104,6 +105,7 @@ impl<'tcx> ProjectionCacheStorage<'tcx> {\n }\n \n impl<'tcx> ProjectionCache<'_, 'tcx> {\n+    #[inline]\n     fn map(\n         &mut self,\n     ) -> SnapshotMapRef<"}]}