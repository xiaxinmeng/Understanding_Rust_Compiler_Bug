{"sha": "d10b5c725b927c94ab73e74f036d622fdc14f4c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMGI1YzcyNWI5MjdjOTRhYjczZTc0ZjAzNmQ2MjJmZGMxNGY0YzU=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-01-03T17:57:08Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T07:34:34Z"}, "message": "Add is_mutbl field to def_arg", "tree": {"sha": "3e3cd8605790dd4e4c261630572db59850469907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3cd8605790dd4e4c261630572db59850469907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d10b5c725b927c94ab73e74f036d622fdc14f4c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d10b5c725b927c94ab73e74f036d622fdc14f4c5", "html_url": "https://github.com/rust-lang/rust/commit/d10b5c725b927c94ab73e74f036d622fdc14f4c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d10b5c725b927c94ab73e74f036d622fdc14f4c5/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd29dee571a89d1e085e6657d1fa582d946462e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd29dee571a89d1e085e6657d1fa582d946462e", "html_url": "https://github.com/rust-lang/rust/commit/4dd29dee571a89d1e085e6657d1fa582d946462e"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "5928723f5c4c96040918f2fd10cec730ae21d025", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -415,7 +415,7 @@ impl ast::def: tr {\n           ast::def_mod(did) => { ast::def_mod(did.tr(xcx)) }\n           ast::def_foreign_mod(did) => { ast::def_foreign_mod(did.tr(xcx)) }\n           ast::def_const(did) => { ast::def_const(did.tr(xcx)) }\n-          ast::def_arg(nid, m) => { ast::def_arg(xcx.tr_id(nid), m) }\n+          ast::def_arg(nid, m, b) => { ast::def_arg(xcx.tr_id(nid), m, b) }\n           ast::def_local(nid, b) => { ast::def_local(xcx.tr_id(nid), b) }\n           ast::def_variant(e_did, v_did) => {\n             ast::def_variant(e_did.tr(xcx), v_did.tr(xcx))"}, {"sha": "dec09a3235c53a8182db846e297c47c8d1df2a1b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -286,7 +286,7 @@ enum VarKind {\n fn relevant_def(def: def) -> Option<node_id> {\n     match def {\n       def_binding(nid, _) |\n-      def_arg(nid, _) |\n+      def_arg(nid, _, _) |\n       def_local(nid, _) |\n       def_self(nid, _) => Some(nid),\n "}, {"sha": "0698db1a3efc242f6f3f501c4e9e97357dc2f1f3", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -453,7 +453,7 @@ impl &mem_categorization_ctxt {\n               mutbl:m_imm, ty:expr_ty}\n           }\n \n-          ast::def_arg(vid, mode) => {\n+          ast::def_arg(vid, mode, _) => {\n             // Idea: make this could be rewritten to model by-ref\n             // stuff as `&const` and `&mut`?\n "}, {"sha": "3e571ce38c1bbfb544fc4e9b6265f3cd6de86aa9", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -4561,7 +4561,8 @@ impl Resolver {\n                                 }\n                                 ArgumentIrrefutableMode(argument_mode) => {\n                                     // And for function arguments, `def_arg`.\n-                                    def_arg(pattern.id, argument_mode)\n+                                    def_arg(pattern.id, argument_mode,\n+                                            is_mutable)\n                                 }\n                             };\n "}, {"sha": "ea9ddc2e5d0c7744ca0b95604315b586c2813da9", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -854,7 +854,7 @@ fn trans_local_var(bcx: block,\n                 }\n             }\n         }\n-        ast::def_arg(nid, _) => {\n+        ast::def_arg(nid, _, _) => {\n             take_local(bcx, bcx.fcx.llargs, nid, expr_id_opt)\n         }\n         ast::def_local(nid, _) | ast::def_binding(nid, _) => {"}, {"sha": "5899ac04586e71a90afb101794d26dc7819ee341", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -2818,7 +2818,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n     ty_param_bounds_and_ty {\n \n     match defn {\n-      ast::def_arg(nid, _) | ast::def_local(nid, _) |\n+      ast::def_arg(nid, _, _) | ast::def_local(nid, _) |\n       ast::def_self(nid, _) | ast::def_binding(nid, _) => {\n         assert (fcx.inh.locals.contains_key(nid));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));"}, {"sha": "05f23bddb0860dfe4ed7f2ab41636d383e71a164", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -55,8 +55,8 @@ type rvt = visit::vt<@rcx>;\n fn encl_region_of_def(fcx: @fn_ctxt, def: ast::def) -> ty::Region {\n     let tcx = fcx.tcx();\n     match def {\n-        def_local(node_id, _) | def_arg(node_id, _) | def_self(node_id, _) |\n-        def_binding(node_id, _) =>\n+        def_local(node_id, _) | def_arg(node_id, _, _) |\n+        def_self(node_id, _) | def_binding(node_id, _) =>\n             return encl_region(tcx, node_id),\n         def_upvar(_, subdef, closure_id, body_id) => {\n             match ty_fn_proto(fcx.node_ty(closure_id)) {"}, {"sha": "8211f646ec79db537df82d1094fec9255b71de21", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -139,7 +139,7 @@ enum def {\n     def_mod(def_id),\n     def_foreign_mod(def_id),\n     def_const(def_id),\n-    def_arg(node_id, mode),\n+    def_arg(node_id, mode, bool /* is_mutbl */),\n     def_local(node_id, bool /* is_mutbl */),\n     def_variant(def_id /* enum */, def_id /* variant */),\n     def_ty(def_id),\n@@ -203,9 +203,10 @@ impl def : cmp::Eq {\n                     _ => false\n                 }\n             }\n-            def_arg(e0a, e1a) => {\n+            def_arg(e0a, e1a, e2a) => {\n                 match (*other) {\n-                    def_arg(e0b, e1b) => e0a == e0b && e1a == e1b,\n+                    def_arg(e0b, e1b, e2b) =>\n+                        e0a == e0b && e1a == e1b && e2a == e2b,\n                     _ => false\n                 }\n             }"}, {"sha": "23ea27e7c5cfc4f4c7923a43061dea080d685533", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10b5c725b927c94ab73e74f036d622fdc14f4c5/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=d10b5c725b927c94ab73e74f036d622fdc14f4c5", "patch": "@@ -86,7 +86,7 @@ pure fn def_id_of_def(d: def) -> def_id {\n       def_use(id) | def_struct(id) => {\n         id\n       }\n-      def_arg(id, _) | def_local(id, _) | def_self(id, _) | def_self_ty(id)\n+      def_arg(id, _, _) | def_local(id, _) | def_self(id, _) | def_self_ty(id)\n       | def_upvar(id, _, _, _) | def_binding(id, _) | def_region(id)\n       | def_typaram_binder(id) | def_label(id) => {\n         local_def(id)"}]}