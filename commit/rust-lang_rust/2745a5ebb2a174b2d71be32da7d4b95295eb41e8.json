{"sha": "2745a5ebb2a174b2d71be32da7d4b95295eb41e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NDVhNWViYjJhMTc0YjJkNzFiZTMyZGE3ZDRiOTUyOTVlYjQxZTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T02:17:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-24T02:17:04Z"}, "message": "Handle line-comments and a few more symbols in rustc lexer.", "tree": {"sha": "42ee518eca41ce33365130c1cac7e93f0f09f163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ee518eca41ce33365130c1cac7e93f0f09f163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2745a5ebb2a174b2d71be32da7d4b95295eb41e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2745a5ebb2a174b2d71be32da7d4b95295eb41e8", "html_url": "https://github.com/rust-lang/rust/commit/2745a5ebb2a174b2d71be32da7d4b95295eb41e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2745a5ebb2a174b2d71be32da7d4b95295eb41e8/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3a77c3a3b32aa6fabad895492c2b24739fedba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3a77c3a3b32aa6fabad895492c2b24739fedba", "html_url": "https://github.com/rust-lang/rust/commit/6e3a77c3a3b32aa6fabad895492c2b24739fedba"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "f5c603726df01350d90e03e6bade7d3a108a8906", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2745a5ebb2a174b2d71be32da7d4b95295eb41e8/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2745a5ebb2a174b2d71be32da7d4b95295eb41e8/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=2745a5ebb2a174b2d71be32da7d4b95295eb41e8", "patch": "@@ -27,15 +27,36 @@ fn is_whitespace(char c) -> bool {\n     ret c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\n }\n \n+fn consume_any_whitespace(stdio_reader rdr, char c) -> char {\n+    auto c1 = c;\n+    while (is_whitespace(c1)) {\n+        c1 = rdr.getc() as char;\n+    }\n+    be consume_any_line_comment(rdr, c1);\n+}\n+\n+fn consume_any_line_comment(stdio_reader rdr, char c) -> char {\n+    auto c1 = c;\n+    if (c1 == '/') {\n+        auto c2 = rdr.getc() as char;\n+        if (c2 == '/') {\n+            while (c1 != '\\n') {\n+                c1 = rdr.getc() as char;\n+            }\n+            // Restart whitespace munch.\n+            be consume_any_whitespace(rdr, c1);\n+        }\n+    }\n+    ret c;\n+}\n+\n fn next_token(stdio_reader rdr) -> token.token {\n     auto eof = (-1) as char;\n     auto c = rdr.getc() as char;\n     auto accum_str = \"\";\n     auto accum_int = 0;\n \n-    while (is_whitespace(c) && c != eof) {\n-        c = rdr.getc() as char;\n-    }\n+    c = consume_any_whitespace(rdr, c);\n \n     if (c == eof) { ret token.EOF(); }\n \n@@ -61,8 +82,19 @@ fn next_token(stdio_reader rdr) -> token.token {\n         }\n     }\n \n-    // One-byte structural symbols.\n+\n+    fn op_or_opeq(stdio_reader rdr, char c2,\n+                  token.op op) -> token.token {\n+        if (c2 == '=') {\n+            ret token.OPEQ(op);\n+        } else {\n+            rdr.ungetc(c2 as int);\n+            ret token.OP(op);\n+        }\n+    }\n+\n     alt (c) {\n+        // One-byte tokens.\n         case (';') { ret token.SEMI(); }\n         case (',') { ret token.COMMA(); }\n         case ('.') { ret token.DOT(); }\n@@ -74,6 +106,8 @@ fn next_token(stdio_reader rdr) -> token.token {\n         case (']') { ret token.RBRACKET(); }\n         case ('@') { ret token.AT(); }\n         case ('#') { ret token.POUND(); }\n+\n+        // Multi-byte tokens.\n         case ('=') {\n             auto c2 = rdr.getc() as char;\n             if (c2 == '=') {\n@@ -83,6 +117,49 @@ fn next_token(stdio_reader rdr) -> token.token {\n                 ret token.OP(token.EQ());\n             }\n         }\n+\n+        case ('-') {\n+            auto c2 = rdr.getc() as char;\n+            if (c2 == '>') {\n+                ret token.RARROW();\n+            } else {\n+                ret op_or_opeq(rdr, c2, token.MINUS());\n+            }\n+        }\n+\n+        case ('&') {\n+            auto c2 = rdr.getc() as char;\n+            if (c2 == '&') {\n+                ret token.OP(token.ANDAND());\n+            } else {\n+                ret op_or_opeq(rdr, c2, token.AND());\n+            }\n+        }\n+\n+        case ('+') {\n+            ret op_or_opeq(rdr, rdr.getc() as char, token.PLUS());\n+        }\n+\n+        case ('*') {\n+            ret op_or_opeq(rdr, rdr.getc() as char, token.STAR());\n+        }\n+\n+        case ('/') {\n+            ret op_or_opeq(rdr, rdr.getc() as char, token.STAR());\n+        }\n+\n+        case ('!') {\n+            ret op_or_opeq(rdr, rdr.getc() as char, token.NOT());\n+        }\n+\n+        case ('^') {\n+            ret op_or_opeq(rdr, rdr.getc() as char, token.CARET());\n+        }\n+\n+        case ('%') {\n+            ret op_or_opeq(rdr, rdr.getc() as char, token.PERCENT());\n+        }\n+\n     }\n \n     log \"lexer stopping at \";"}]}