{"sha": "14a459bf37bc19476d43e0045d078121c12d3fef", "node_id": "C_kwDOAAsO6NoAKDE0YTQ1OWJmMzdiYzE5NDc2ZDQzZTAwNDVkMDc4MTIxYzEyZDNmZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-16T07:54:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-16T07:54:22Z"}, "message": "Auto merge of #100441 - nnethercote:shrink-ast-Attribute, r=petrochenkov\n\nShrink `ast::Attribute`.\n\nr? `@ghost`", "tree": {"sha": "36e797a07bf83ddd338f6bb369f3ea09d4a384ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36e797a07bf83ddd338f6bb369f3ea09d4a384ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14a459bf37bc19476d43e0045d078121c12d3fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14a459bf37bc19476d43e0045d078121c12d3fef", "html_url": "https://github.com/rust-lang/rust/commit/14a459bf37bc19476d43e0045d078121c12d3fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14a459bf37bc19476d43e0045d078121c12d3fef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8556e6620e4866526b3cea767ad8c20ae877a569", "url": "https://api.github.com/repos/rust-lang/rust/commits/8556e6620e4866526b3cea767ad8c20ae877a569", "html_url": "https://github.com/rust-lang/rust/commit/8556e6620e4866526b3cea767ad8c20ae877a569"}, {"sha": "85a6cd6a47ea0f7129dff5038fce7398ceb18222", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a6cd6a47ea0f7129dff5038fce7398ceb18222", "html_url": "https://github.com/rust-lang/rust/commit/85a6cd6a47ea0f7129dff5038fce7398ceb18222"}], "stats": {"total": 316, "additions": 167, "deletions": 149}, "files": [{"sha": "3a55396248e687a033c60faa19308f9632261f75", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -2547,10 +2547,16 @@ pub struct Attribute {\n     pub span: Span,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct NormalAttr {\n+    pub item: AttrItem,\n+    pub tokens: Option<LazyTokenStream>,\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum AttrKind {\n     /// A normal attribute.\n-    Normal(AttrItem, Option<LazyTokenStream>),\n+    Normal(P<NormalAttr>),\n \n     /// A doc comment (e.g. `/// ...`, `//! ...`, `/** ... */`, `/*! ... */`).\n     /// Doc attributes (e.g. `#[doc=\"...\"]`) are represented with the `Normal`\n@@ -3033,7 +3039,7 @@ mod size_asserts {\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(AssocItem, 160);\n     static_assert_size!(AssocItemKind, 72);\n-    static_assert_size!(Attribute, 152);\n+    static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 48);\n     static_assert_size!(Expr, 104);\n     static_assert_size!(Fn, 192);"}, {"sha": "1fc5e480215ea4888ac673f7b48eb339d124635f", "filename": "compiler/rustc_ast/src/ast_traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast_traits.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -212,15 +212,15 @@ impl HasTokens for Stmt {\n impl HasTokens for Attribute {\n     fn tokens(&self) -> Option<&LazyTokenStream> {\n         match &self.kind {\n-            AttrKind::Normal(_, tokens) => tokens.as_ref(),\n+            AttrKind::Normal(normal) => normal.tokens.as_ref(),\n             kind @ AttrKind::DocComment(..) => {\n                 panic!(\"Called tokens on doc comment attr {:?}\", kind)\n             }\n         }\n     }\n     fn tokens_mut(&mut self) -> Option<&mut Option<LazyTokenStream>> {\n         Some(match &mut self.kind {\n-            AttrKind::Normal(_, tokens) => tokens,\n+            AttrKind::Normal(normal) => &mut normal.tokens,\n             kind @ AttrKind::DocComment(..) => {\n                 panic!(\"Called tokens_mut on doc comment attr {:?}\", kind)\n             }"}, {"sha": "bc4f183d9b111618bef080e8945c7f29ef53182e", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -114,17 +114,17 @@ impl Attribute {\n     #[inline]\n     pub fn has_name(&self, name: Symbol) -> bool {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => item.path == name,\n+            AttrKind::Normal(ref normal) => normal.item.path == name,\n             AttrKind::DocComment(..) => false,\n         }\n     }\n \n     /// For a single-segment attribute, returns its name; otherwise, returns `None`.\n     pub fn ident(&self) -> Option<Ident> {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => {\n-                if item.path.segments.len() == 1 {\n-                    Some(item.path.segments[0].ident)\n+            AttrKind::Normal(ref normal) => {\n+                if normal.item.path.segments.len() == 1 {\n+                    Some(normal.item.path.segments[0].ident)\n                 } else {\n                     None\n                 }\n@@ -138,14 +138,16 @@ impl Attribute {\n \n     pub fn value_str(&self) -> Option<Symbol> {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => item.meta_kind().and_then(|kind| kind.value_str()),\n+            AttrKind::Normal(ref normal) => {\n+                normal.item.meta_kind().and_then(|kind| kind.value_str())\n+            }\n             AttrKind::DocComment(..) => None,\n         }\n     }\n \n     pub fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => match item.meta_kind() {\n+            AttrKind::Normal(ref normal) => match normal.item.meta_kind() {\n                 Some(MetaItemKind::List(list)) => Some(list),\n                 _ => None,\n             },\n@@ -154,8 +156,8 @@ impl Attribute {\n     }\n \n     pub fn is_word(&self) -> bool {\n-        if let AttrKind::Normal(item, _) = &self.kind {\n-            matches!(item.args, MacArgs::Empty)\n+        if let AttrKind::Normal(normal) = &self.kind {\n+            matches!(normal.item.args, MacArgs::Empty)\n         } else {\n             false\n         }\n@@ -247,7 +249,8 @@ impl Attribute {\n     pub fn doc_str_and_comment_kind(&self) -> Option<(Symbol, CommentKind)> {\n         match self.kind {\n             AttrKind::DocComment(kind, data) => Some((data, kind)),\n-            AttrKind::Normal(ref item, _) if item.path == sym::doc => item\n+            AttrKind::Normal(ref normal) if normal.item.path == sym::doc => normal\n+                .item\n                 .meta_kind()\n                 .and_then(|kind| kind.value_str())\n                 .map(|data| (data, CommentKind::Line)),\n@@ -258,8 +261,8 @@ impl Attribute {\n     pub fn doc_str(&self) -> Option<Symbol> {\n         match self.kind {\n             AttrKind::DocComment(.., data) => Some(data),\n-            AttrKind::Normal(ref item, _) if item.path == sym::doc => {\n-                item.meta_kind().and_then(|kind| kind.value_str())\n+            AttrKind::Normal(ref normal) if normal.item.path == sym::doc => {\n+                normal.item.meta_kind().and_then(|kind| kind.value_str())\n             }\n             _ => None,\n         }\n@@ -271,36 +274,37 @@ impl Attribute {\n \n     pub fn get_normal_item(&self) -> &AttrItem {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => item,\n+            AttrKind::Normal(ref normal) => &normal.item,\n             AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n         }\n     }\n \n     pub fn unwrap_normal_item(self) -> AttrItem {\n         match self.kind {\n-            AttrKind::Normal(item, _) => item,\n+            AttrKind::Normal(normal) => normal.into_inner().item,\n             AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n         }\n     }\n \n     /// Extracts the MetaItem from inside this Attribute.\n     pub fn meta(&self) -> Option<MetaItem> {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => item.meta(self.span),\n+            AttrKind::Normal(ref normal) => normal.item.meta(self.span),\n             AttrKind::DocComment(..) => None,\n         }\n     }\n \n     pub fn meta_kind(&self) -> Option<MetaItemKind> {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => item.meta_kind(),\n+            AttrKind::Normal(ref normal) => normal.item.meta_kind(),\n             AttrKind::DocComment(..) => None,\n         }\n     }\n \n     pub fn tokens(&self) -> AttrAnnotatedTokenStream {\n         match self.kind {\n-            AttrKind::Normal(_, ref tokens) => tokens\n+            AttrKind::Normal(ref normal) => normal\n+                .tokens\n                 .as_ref()\n                 .unwrap_or_else(|| panic!(\"attribute is missing tokens: {:?}\", self))\n                 .create_token_stream(),\n@@ -361,7 +365,12 @@ pub fn mk_attr_from_item(\n     style: AttrStyle,\n     span: Span,\n ) -> Attribute {\n-    Attribute { kind: AttrKind::Normal(item, tokens), id: mk_attr_id(), style, span }\n+    Attribute {\n+        kind: AttrKind::Normal(P(ast::NormalAttr { item, tokens })),\n+        id: mk_attr_id(),\n+        style,\n+        span,\n+    }\n }\n \n /// Returns an inner attribute with the given value and span."}, {"sha": "54e2f7557e534060e0771a581437cb87aa486c23", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -596,7 +596,9 @@ pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n     let Attribute { kind, id: _, style: _, span } = attr;\n     match kind {\n-        AttrKind::Normal(AttrItem { path, args, tokens }, attr_tokens) => {\n+        AttrKind::Normal(normal) => {\n+            let NormalAttr { item: AttrItem { path, args, tokens }, tokens: attr_tokens } =\n+                &mut **normal;\n             vis.visit_path(path);\n             visit_mac_args(args, vis);\n             visit_lazy_tts(tokens, vis);\n@@ -659,8 +661,8 @@ pub fn visit_attr_annotated_tt<T: MutVisitor>(tt: &mut AttrAnnotatedTokenTree, v\n         AttrAnnotatedTokenTree::Attributes(data) => {\n             for attr in &mut *data.attrs {\n                 match &mut attr.kind {\n-                    AttrKind::Normal(_, attr_tokens) => {\n-                        visit_lazy_tts(attr_tokens, vis);\n+                    AttrKind::Normal(normal) => {\n+                        visit_lazy_tts(&mut normal.tokens, vis);\n                     }\n                     AttrKind::DocComment(..) => {\n                         vis.visit_span(&mut attr.span);"}, {"sha": "f687bfeced841e6a9417084545e46088879b9e0c", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -929,7 +929,7 @@ pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n \n pub fn walk_attribute<'a, V: Visitor<'a>>(visitor: &mut V, attr: &'a Attribute) {\n     match attr.kind {\n-        AttrKind::Normal(ref item, ref _tokens) => walk_mac_args(visitor, &item.args),\n+        AttrKind::Normal(ref normal) => walk_mac_args(visitor, &normal.item.args),\n         AttrKind::DocComment(..) => {}\n     }\n }"}, {"sha": "5f5667ce9055fb393638aeb033e0ad6b940da380", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -39,6 +39,7 @@\n #[macro_use]\n extern crate tracing;\n \n+use rustc_ast::ptr::P;\n use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n@@ -871,14 +872,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // the `HirId`s. We don't actually need HIR version of attributes anyway.\n         // Tokens are also not needed after macro expansion and parsing.\n         let kind = match attr.kind {\n-            AttrKind::Normal(ref item, _) => AttrKind::Normal(\n-                AttrItem {\n-                    path: item.path.clone(),\n-                    args: self.lower_mac_args(&item.args),\n+            AttrKind::Normal(ref normal) => AttrKind::Normal(P(NormalAttr {\n+                item: AttrItem {\n+                    path: normal.item.path.clone(),\n+                    args: self.lower_mac_args(&normal.item.args),\n                     tokens: None,\n                 },\n-                None,\n-            ),\n+                tokens: None,\n+            })),\n             AttrKind::DocComment(comment_kind, data) => AttrKind::DocComment(comment_kind, data),\n         };\n "}, {"sha": "c454034efa735d5f89fc6397e0b30488a75062ef", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -442,12 +442,12 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n         self.maybe_print_comment(attr.span.lo());\n         match attr.kind {\n-            ast::AttrKind::Normal(ref item, _) => {\n+            ast::AttrKind::Normal(ref normal) => {\n                 match attr.style {\n                     ast::AttrStyle::Inner => self.word(\"#![\"),\n                     ast::AttrStyle::Outer => self.word(\"#[\"),\n                 }\n-                self.print_attr_item(&item, attr.span);\n+                self.print_attr_item(&normal.item, attr.span);\n                 self.word(\"]\");\n             }\n             ast::AttrKind::DocComment(comment_kind, data) => {"}, {"sha": "d7732cb1825b111610f79223dfe0b8fa69bc8c95", "filename": "compiler/rustc_query_system/src/ich/impls_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -42,12 +42,12 @@ impl<'ctx> rustc_ast::HashStableContext for StableHashingContext<'ctx> {\n         debug_assert!(!attr.is_doc_comment());\n \n         let ast::Attribute { kind, id: _, style, span } = attr;\n-        if let ast::AttrKind::Normal(item, tokens) = kind {\n-            item.hash_stable(self, hasher);\n+        if let ast::AttrKind::Normal(normal) = kind {\n+            normal.item.hash_stable(self, hasher);\n             style.hash_stable(self, hasher);\n             span.hash_stable(self, hasher);\n             assert_matches!(\n-                tokens.as_ref(),\n+                normal.tokens.as_ref(),\n                 None,\n                 \"Tokens should have been removed during lowering!\"\n             );"}, {"sha": "9ea32e8d64ea44bbaaf7a3b640f2bbc5575dfbd4", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 100, "deletions": 100, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -4,120 +4,120 @@ PRE EXPANSION AST STATS\n Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n ExprField                 48 ( 0.5%)             1            48\n+Attribute                 64 ( 0.7%)             2            32\n+- Normal                    32 ( 0.4%)             1\n+- DocComment                32 ( 0.4%)             1\n GenericArgs               64 ( 0.7%)             1            64\n - AngleBracketed            64 ( 0.7%)             1\n Local                     72 ( 0.8%)             1            72\n WherePredicate            72 ( 0.8%)             1            72\n - BoundPredicate            72 ( 0.8%)             1\n Crate                     72 ( 0.8%)             1            72\n-Arm                       96 ( 1.0%)             2            48\n-FieldDef                 160 ( 1.7%)             2            80\n-ForeignItem              160 ( 1.7%)             1           160\n-- Fn                       160 ( 1.7%)             1\n-Stmt                     160 ( 1.7%)             5            32\n-- Local                     32 ( 0.3%)             1\n-- MacCall                   32 ( 0.3%)             1\n-- Expr                      96 ( 1.0%)             3\n-Param                    160 ( 1.7%)             4            40\n+Arm                       96 ( 1.1%)             2            48\n+FieldDef                 160 ( 1.8%)             2            80\n+ForeignItem              160 ( 1.8%)             1           160\n+- Fn                       160 ( 1.8%)             1\n+Stmt                     160 ( 1.8%)             5            32\n+- Local                     32 ( 0.4%)             1\n+- MacCall                   32 ( 0.4%)             1\n+- Expr                      96 ( 1.1%)             3\n+Param                    160 ( 1.8%)             4            40\n FnDecl                   200 ( 2.2%)             5            40\n-Variant                  240 ( 2.6%)             2           120\n-Block                    288 ( 3.1%)             6            48\n-Attribute                304 ( 3.3%)             2           152\n-- Normal                   152 ( 1.7%)             1\n-- DocComment               152 ( 1.7%)             1\n-GenericBound             352 ( 3.8%)             4            88\n-- Trait                    352 ( 3.8%)             4\n-GenericParam             520 ( 5.7%)             5           104\n-AssocItem                640 ( 7.0%)             4           160\n-- TyAlias                  320 ( 3.5%)             2\n-- Fn                       320 ( 3.5%)             2\n-PathSegment              720 ( 7.9%)            30            24\n-Expr                     832 ( 9.1%)             8           104\n-- Path                     104 ( 1.1%)             1\n-- Match                    104 ( 1.1%)             1\n-- Struct                   104 ( 1.1%)             1\n+Variant                  240 ( 2.7%)             2           120\n+Block                    288 ( 3.2%)             6            48\n+GenericBound             352 ( 4.0%)             4            88\n+- Trait                    352 ( 4.0%)             4\n+GenericParam             520 ( 5.8%)             5           104\n+AssocItem                640 ( 7.2%)             4           160\n+- TyAlias                  320 ( 3.6%)             2\n+- Fn                       320 ( 3.6%)             2\n+PathSegment              720 ( 8.1%)            30            24\n+Expr                     832 ( 9.3%)             8           104\n+- Path                     104 ( 1.2%)             1\n+- Match                    104 ( 1.2%)             1\n+- Struct                   104 ( 1.2%)             1\n - Lit                      208 ( 2.3%)             2\n-- Block                    312 ( 3.4%)             3\n-Pat                      840 ( 9.2%)             7           120\n+- Block                    312 ( 3.5%)             3\n+Pat                      840 ( 9.4%)             7           120\n - Struct                   120 ( 1.3%)             1\n - Wild                     120 ( 1.3%)             1\n-- Ident                    600 ( 6.6%)             5\n-Ty                     1_344 (14.7%)            14            96\n-- Rptr                      96 ( 1.0%)             1\n-- Ptr                       96 ( 1.0%)             1\n-- ImplicitSelf             192 ( 2.1%)             2\n-- Path                     960 (10.5%)            10\n-Item                   1_800 (19.7%)             9           200\n+- Ident                    600 ( 6.7%)             5\n+Ty                     1_344 (15.1%)            14            96\n+- Rptr                      96 ( 1.1%)             1\n+- Ptr                       96 ( 1.1%)             1\n+- ImplicitSelf             192 ( 2.2%)             2\n+- Path                     960 (10.8%)            10\n+Item                   1_800 (20.2%)             9           200\n - Trait                    200 ( 2.2%)             1\n - Enum                     200 ( 2.2%)             1\n - ForeignMod               200 ( 2.2%)             1\n - Impl                     200 ( 2.2%)             1\n-- Fn                       400 ( 4.4%)             2\n-- Use                      600 ( 6.6%)             3\n+- Fn                       400 ( 4.5%)             2\n+- Use                      600 ( 6.7%)             3\n ----------------------------------------------------------------\n-Total                  9_144\n+Total                  8_904\n \n \n POST EXPANSION AST STATS\n \n Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n ExprField                 48 ( 0.5%)             1            48\n-GenericArgs               64 ( 0.6%)             1            64\n-- AngleBracketed            64 ( 0.6%)             1\n+GenericArgs               64 ( 0.7%)             1            64\n+- AngleBracketed            64 ( 0.7%)             1\n Local                     72 ( 0.7%)             1            72\n WherePredicate            72 ( 0.7%)             1            72\n - BoundPredicate            72 ( 0.7%)             1\n Crate                     72 ( 0.7%)             1            72\n-Arm                       96 ( 0.9%)             2            48\n+Arm                       96 ( 1.0%)             2            48\n InlineAsm                120 ( 1.2%)             1           120\n-FieldDef                 160 ( 1.6%)             2            80\n-ForeignItem              160 ( 1.6%)             1           160\n-- Fn                       160 ( 1.6%)             1\n-Stmt                     160 ( 1.6%)             5            32\n+Attribute                128 ( 1.3%)             4            32\n+- DocComment                32 ( 0.3%)             1\n+- Normal                    96 ( 1.0%)             3\n+FieldDef                 160 ( 1.7%)             2            80\n+ForeignItem              160 ( 1.7%)             1           160\n+- Fn                       160 ( 1.7%)             1\n+Stmt                     160 ( 1.7%)             5            32\n - Local                     32 ( 0.3%)             1\n - Semi                      32 ( 0.3%)             1\n-- Expr                      96 ( 0.9%)             3\n-Param                    160 ( 1.6%)             4            40\n-FnDecl                   200 ( 2.0%)             5            40\n-Variant                  240 ( 2.4%)             2           120\n-Block                    288 ( 2.8%)             6            48\n-GenericBound             352 ( 3.5%)             4            88\n-- Trait                    352 ( 3.5%)             4\n-GenericParam             520 ( 5.1%)             5           104\n-Attribute                608 ( 6.0%)             4           152\n-- DocComment               152 ( 1.5%)             1\n-- Normal                   456 ( 4.5%)             3\n-AssocItem                640 ( 6.3%)             4           160\n-- TyAlias                  320 ( 3.2%)             2\n-- Fn                       320 ( 3.2%)             2\n-PathSegment              792 ( 7.8%)            33            24\n-Pat                      840 ( 8.3%)             7           120\n+- Expr                      96 ( 1.0%)             3\n+Param                    160 ( 1.7%)             4            40\n+FnDecl                   200 ( 2.1%)             5            40\n+Variant                  240 ( 2.5%)             2           120\n+Block                    288 ( 3.0%)             6            48\n+GenericBound             352 ( 3.6%)             4            88\n+- Trait                    352 ( 3.6%)             4\n+GenericParam             520 ( 5.4%)             5           104\n+AssocItem                640 ( 6.6%)             4           160\n+- TyAlias                  320 ( 3.3%)             2\n+- Fn                       320 ( 3.3%)             2\n+PathSegment              792 ( 8.2%)            33            24\n+Pat                      840 ( 8.7%)             7           120\n - Struct                   120 ( 1.2%)             1\n - Wild                     120 ( 1.2%)             1\n-- Ident                    600 ( 5.9%)             5\n-Expr                     936 ( 9.2%)             9           104\n-- Path                     104 ( 1.0%)             1\n-- Match                    104 ( 1.0%)             1\n-- Struct                   104 ( 1.0%)             1\n-- InlineAsm                104 ( 1.0%)             1\n-- Lit                      208 ( 2.1%)             2\n-- Block                    312 ( 3.1%)             3\n-Ty                     1_344 (13.2%)            14            96\n-- Rptr                      96 ( 0.9%)             1\n-- Ptr                       96 ( 0.9%)             1\n-- ImplicitSelf             192 ( 1.9%)             2\n-- Path                     960 ( 9.5%)            10\n-Item                   2_200 (21.7%)            11           200\n-- Trait                    200 ( 2.0%)             1\n-- Enum                     200 ( 2.0%)             1\n-- ExternCrate              200 ( 2.0%)             1\n-- ForeignMod               200 ( 2.0%)             1\n-- Impl                     200 ( 2.0%)             1\n-- Fn                       400 ( 3.9%)             2\n-- Use                      800 ( 7.9%)             4\n+- Ident                    600 ( 6.2%)             5\n+Expr                     936 ( 9.7%)             9           104\n+- Path                     104 ( 1.1%)             1\n+- Match                    104 ( 1.1%)             1\n+- Struct                   104 ( 1.1%)             1\n+- InlineAsm                104 ( 1.1%)             1\n+- Lit                      208 ( 2.2%)             2\n+- Block                    312 ( 3.2%)             3\n+Ty                     1_344 (13.9%)            14            96\n+- Rptr                      96 ( 1.0%)             1\n+- Ptr                       96 ( 1.0%)             1\n+- ImplicitSelf             192 ( 2.0%)             2\n+- Path                     960 ( 9.9%)            10\n+Item                   2_200 (22.8%)            11           200\n+- Trait                    200 ( 2.1%)             1\n+- Enum                     200 ( 2.1%)             1\n+- ExternCrate              200 ( 2.1%)             1\n+- ForeignMod               200 ( 2.1%)             1\n+- Impl                     200 ( 2.1%)             1\n+- Fn                       400 ( 4.1%)             2\n+- Use                      800 ( 8.3%)             4\n ----------------------------------------------------------------\n-Total                 10_144\n+Total                  9_664\n \n \n HIR STATS\n@@ -126,26 +126,26 @@ Name                Accumulated Size         Count     Item Size\n ----------------------------------------------------------------\n Param                     64 ( 0.7%)             2            32\n Local                     64 ( 0.7%)             1            64\n-ForeignItem               72 ( 0.7%)             1            72\n+ForeignItem               72 ( 0.8%)             1            72\n FieldDef                  96 ( 1.0%)             2            48\n Arm                       96 ( 1.0%)             2            48\n Stmt                      96 ( 1.0%)             3            32\n-FnDecl                   120 ( 1.2%)             3            40\n-Lifetime                 128 ( 1.3%)             4            32\n-Variant                  160 ( 1.6%)             2            80\n-ImplItem                 176 ( 1.8%)             2            88\n-GenericBound             192 ( 2.0%)             4            48\n-TraitItem                192 ( 2.0%)             2            96\n-WherePredicate           216 ( 2.2%)             3            72\n-Block                    288 ( 3.0%)             6            48\n-QPath                    408 ( 4.2%)            17            24\n-Pat                      440 ( 4.5%)             5            88\n-Attribute                608 ( 6.2%)             4           152\n-Expr                     672 ( 6.9%)            12            56\n-Item                     960 ( 9.9%)            12            80\n-Ty                     1_152 (11.8%)            16            72\n-Path                   1_296 (13.3%)            27            48\n-PathSegment            2_240 (23.0%)            40            56\n+FnDecl                   120 ( 1.3%)             3            40\n+Attribute                128 ( 1.4%)             4            32\n+Lifetime                 128 ( 1.4%)             4            32\n+Variant                  160 ( 1.7%)             2            80\n+ImplItem                 176 ( 1.9%)             2            88\n+GenericBound             192 ( 2.1%)             4            48\n+TraitItem                192 ( 2.1%)             2            96\n+WherePredicate           216 ( 2.3%)             3            72\n+Block                    288 ( 3.1%)             6            48\n+QPath                    408 ( 4.4%)            17            24\n+Pat                      440 ( 4.8%)             5            88\n+Expr                     672 ( 7.3%)            12            56\n+Item                     960 (10.4%)            12            80\n+Ty                     1_152 (12.4%)            16            72\n+Path                   1_296 (14.0%)            27            48\n+PathSegment            2_240 (24.2%)            40            56\n ----------------------------------------------------------------\n-Total                  9_736\n+Total                  9_256\n "}, {"sha": "20cc330e035f8990563c10bdfd313dedcfc15fa5", "filename": "src/tools/clippy/clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -74,8 +74,8 @@ impl EarlyLintPass for CrateInMacroDef {\n \n fn is_macro_export(attr: &Attribute) -> bool {\n     if_chain! {\n-        if let AttrKind::Normal(attr_item, _) = &attr.kind;\n-        if let [segment] = attr_item.path.segments.as_slice();\n+        if let AttrKind::Normal(normal) = &attr.kind;\n+        if let [segment] = normal.item.path.segments.as_slice();\n         then {\n             segment.ident.name == sym::macro_export\n         } else {"}, {"sha": "493991f30e8720fe16be776ffb29d71f96acbc32", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -695,7 +695,7 @@ pub fn eq_attr(l: &Attribute, r: &Attribute) -> bool {\n     l.style == r.style\n         && match (&l.kind, &r.kind) {\n             (DocComment(l1, l2), DocComment(r1, r2)) => l1 == r1 && l2 == r2,\n-            (Normal(l, _), Normal(r, _)) => eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args),\n+            (Normal(l), Normal(r)) => eq_path(&l.item.path, &r.item.path) && eq_mac_args(&l.item.args, &r.item.args),\n             _ => false,\n         }\n }"}, {"sha": "8ab77c88166365eecc83f35968e83e3d17ac1b0b", "filename": "src/tools/clippy/clippy_utils/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -59,8 +59,8 @@ pub fn get_attr<'a>(\n     name: &'static str,\n ) -> impl Iterator<Item = &'a ast::Attribute> {\n     attrs.iter().filter(move |attr| {\n-        let attr = if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n-            attr\n+        let attr = if let ast::AttrKind::Normal(ref normal) = attr.kind {\n+            &normal.item\n         } else {\n             return false;\n         };"}, {"sha": "f716f009ff3f5c23c238b7e28f2a3cf435fe012e", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -1893,8 +1893,8 @@ pub fn std_or_core(cx: &LateContext<'_>) -> Option<&'static str> {\n \n pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n     cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n-        if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n-            attr.path == sym::no_std\n+        if let ast::AttrKind::Normal(ref normal) = attr.kind {\n+            normal.item.path == sym::no_std\n         } else {\n             false\n         }\n@@ -1903,8 +1903,8 @@ pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n \n pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n     cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n-        if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n-            attr.path == sym::no_core\n+        if let ast::AttrKind::Normal(ref normal) = attr.kind {\n+            normal.item.path == sym::no_core\n         } else {\n             false\n         }"}, {"sha": "032922d421df7a340d9f55b699bb7ffac46a0a6d", "filename": "src/tools/rustfmt/src/skip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Frustfmt%2Fsrc%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Frustfmt%2Fsrc%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fskip.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -58,8 +58,8 @@ fn get_skip_names(kind: &str, attrs: &[ast::Attribute]) -> Vec<String> {\n     for attr in attrs {\n         // rustc_ast::ast::Path is implemented partialEq\n         // but it is designed for segments.len() == 1\n-        if let ast::AttrKind::Normal(attr_item, _) = &attr.kind {\n-            if pprust::path_to_string(&attr_item.path) != path {\n+        if let ast::AttrKind::Normal(normal) = &attr.kind {\n+            if pprust::path_to_string(&normal.item.path) != path {\n                 continue;\n             }\n         }"}, {"sha": "7bb745eeb8b9b7752dd85fd9ddef94b45bf7ea61", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a459bf37bc19476d43e0045d078121c12d3fef/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=14a459bf37bc19476d43e0045d078121c12d3fef", "patch": "@@ -811,8 +811,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n             } else {\n                 match &attr.kind {\n-                    ast::AttrKind::Normal(ref attribute_item, _)\n-                        if self.is_unknown_rustfmt_attr(&attribute_item.path.segments) =>\n+                    ast::AttrKind::Normal(ref normal)\n+                        if self.is_unknown_rustfmt_attr(&normal.item.path.segments) =>\n                     {\n                         let file_name = self.parse_sess.span_to_filename(attr.span);\n                         self.report.append("}]}