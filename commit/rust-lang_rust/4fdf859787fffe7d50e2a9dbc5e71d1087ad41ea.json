{"sha": "4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZGY4NTk3ODdmZmZlN2Q1MGUyYTlkYmM1ZTcxZDEwODdhZDQxZWE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-04-04T23:25:13Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-04-04T23:25:13Z"}, "message": "Merge pull request #897 from matklad/refactor-run\n\nRefactor run family of functions", "tree": {"sha": "356514b6f299452949fb0d43c3b469ce8401c78e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356514b6f299452949fb0d43c3b469ce8401c78e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "html_url": "https://github.com/rust-lang/rust/commit/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e393b3d53aba6f3d18b76fd820c148f9e4b62e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e393b3d53aba6f3d18b76fd820c148f9e4b62e7", "html_url": "https://github.com/rust-lang/rust/commit/6e393b3d53aba6f3d18b76fd820c148f9e4b62e7"}, {"sha": "c29ee66b94fea672f459374942a4e311dc9cef5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c29ee66b94fea672f459374942a4e311dc9cef5e", "html_url": "https://github.com/rust-lang/rust/commit/c29ee66b94fea672f459374942a4e311dc9cef5e"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "bce8ac7bc0fd77d54d93b94e45ef97559329718e", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "patch": "@@ -17,7 +17,7 @@ extern crate toml;\n extern crate env_logger;\n extern crate getopts;\n \n-use rustfmt::{run, run_from_stdin};\n+use rustfmt::{run, Input};\n use rustfmt::config::{Config, WriteMode};\n \n use std::env;\n@@ -197,7 +197,7 @@ fn execute() -> i32 {\n             // write_mode is always Plain for Stdin.\n             config.write_mode = WriteMode::Plain;\n \n-            run_from_stdin(input, &config);\n+            run(Input::Text(input), &config);\n             0\n         }\n         Operation::Format { files, config_path } => {\n@@ -233,7 +233,7 @@ fn execute() -> i32 {\n                     print_usage(&opts, &e);\n                     return 1;\n                 }\n-                run(&file, &config);\n+                run(Input::File(file), &config);\n             }\n             0\n         }"}, {"sha": "c6af9a7018486b15e0563773cab147a2946566ef", "filename": "src/filemap.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "patch": "@@ -31,14 +31,14 @@ pub fn append_newlines(file_map: &mut FileMap) {\n     }\n }\n \n-pub fn write_all_files<T>(file_map: &FileMap, mut out: T, config: &Config) -> Result<(), io::Error>\n+pub fn write_all_files<T>(file_map: &FileMap, out: &mut T, config: &Config) -> Result<(), io::Error>\n     where T: Write\n {\n-    output_header(&mut out, config.write_mode).ok();\n+    output_header(out, config.write_mode).ok();\n     for filename in file_map.keys() {\n-        try!(write_file(&file_map[filename], filename, &mut out, config));\n+        try!(write_file(&file_map[filename], filename, out, config));\n     }\n-    output_footer(&mut out, config.write_mode).ok();\n+    output_footer(out, config.write_mode).ok();\n \n     Ok(())\n }\n@@ -80,11 +80,11 @@ pub fn write_system_newlines<T>(writer: T,\n     }\n }\n \n-pub fn write_file<T>(text: &StringBuffer,\n-                     filename: &str,\n-                     out: &mut T,\n-                     config: &Config)\n-                     -> Result<Option<String>, io::Error>\n+fn write_file<T>(text: &StringBuffer,\n+                 filename: &str,\n+                 out: &mut T,\n+                 config: &Config)\n+                 -> Result<Option<String>, io::Error>\n     where T: Write\n {\n "}, {"sha": "8c69710e3595b71c27d77a378048258bfb5c8c48", "filename": "src/lib.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "patch": "@@ -33,15 +33,15 @@ use syntax::parse::{self, ParseSess};\n \n use std::io::stdout;\n use std::ops::{Add, Sub};\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use std::collections::HashMap;\n use std::fmt;\n \n use issues::{BadIssueSeeker, Issue};\n use filemap::FileMap;\n use visitor::FmtVisitor;\n-use config::Config;\n+use config::{Config, WriteMode};\n \n #[macro_use]\n mod utils;\n@@ -287,7 +287,7 @@ fn fmt_ast(krate: &ast::Crate,\n // Formatting done on a char by char or line by line basis.\n // TODO(#209) warn on bad license\n // TODO(#20) other stuff for parity with make tidy\n-pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n+fn format_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     let mut truncate_todo = Vec::new();\n     let mut report = FormatReport { file_error_map: HashMap::new() };\n \n@@ -367,7 +367,7 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     report\n }\n \n-pub fn format_string(input: String, config: &Config) -> FileMap {\n+fn format_string(input: String, config: &Config) -> FileMap {\n     let path = \"stdin\";\n     let codemap = Rc::new(CodeMap::new());\n \n@@ -403,7 +403,7 @@ pub fn format_string(input: String, config: &Config) -> FileMap {\n     file_map\n }\n \n-pub fn format(file: &Path, config: &Config) -> FileMap {\n+fn format_file(file: &Path, config: &Config) -> FileMap {\n     let codemap = Rc::new(CodeMap::new());\n \n     let tty_handler = Handler::with_tty_emitter(ColorConfig::Auto,\n@@ -428,27 +428,35 @@ pub fn format(file: &Path, config: &Config) -> FileMap {\n     file_map\n }\n \n-pub fn run(file: &Path, config: &Config) {\n-    let mut result = format(file, config);\n+pub fn format_input(input: Input, config: &Config) -> (FileMap, FormatReport) {\n+    let mut file_map = match input {\n+        Input::File(ref file) => format_file(file, config),\n+        Input::Text(text) => format_string(text, config),\n+    };\n \n-    print!(\"{}\", fmt_lines(&mut result, config));\n-    let out = stdout();\n-    let write_result = filemap::write_all_files(&result, out, config);\n+    let report = format_lines(&mut file_map, config);\n+    (file_map, report)\n+}\n \n-    if let Err(msg) = write_result {\n-        println!(\"Error writing files: {}\", msg);\n-    }\n+pub enum Input {\n+    File(PathBuf),\n+    Text(String),\n }\n \n-// Similar to run, but takes an input String instead of a file to format\n-pub fn run_from_stdin(input: String, config: &Config) {\n-    let mut result = format_string(input, config);\n-    fmt_lines(&mut result, config);\n+pub fn run(input: Input, config: &Config) {\n+    let (file_map, report) = format_input(input, config);\n+\n+    let ignore_errors = config.write_mode == WriteMode::Plain;\n+    if !ignore_errors {\n+        print!(\"{}\", report);\n+    }\n \n     let mut out = stdout();\n-    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", &mut out, config);\n+    let write_result = filemap::write_all_files(&file_map, &mut out, config);\n \n     if let Err(msg) = write_result {\n-        panic!(\"Error writing to stdout: {}\", msg);\n+        if !ignore_errors {\n+            println!(\"Error writing files: {}\", msg);\n+        }\n     }\n }"}, {"sha": "96a9d9b7f924de323c6454023ac45de320f0f18c", "filename": "tests/system.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "patch": "@@ -16,7 +16,7 @@ extern crate term;\n use std::collections::HashMap;\n use std::fs;\n use std::io::{self, Read, BufRead, BufReader};\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n use rustfmt::*;\n use rustfmt::filemap::{write_system_newlines, FileMap};\n@@ -74,12 +74,8 @@ fn checkstyle_test() {\n // Helper function for comparing the results of rustfmt\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &str, expected_filename: &str, write_mode: Option<WriteMode>) {\n-    let file_map = run_rustfmt(source.to_string(), write_mode);\n-\n-    let mut config = read_config(&source);\n-    if let Some(write_mode) = write_mode {\n-        config.write_mode = write_mode;\n-    }\n+    let config = read_config(&source, write_mode);\n+    let (file_map, _report) = format_file(source, &config);\n \n     // Populate output by writing to a vec.\n     let mut out = vec![];\n@@ -180,7 +176,7 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     assert!(t.reset().unwrap());\n }\n \n-fn read_config(filename: &str) -> Config {\n+fn read_config(filename: &str, write_mode: Option<WriteMode>) -> Config {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n \n@@ -192,25 +188,25 @@ fn read_config(filename: &str) -> Config {\n \n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n+\n+    if let Some(mode) = write_mode {\n+        config.write_mode = mode\n+    }\n+\n     config\n }\n \n-// Simulate run()\n-fn run_rustfmt(filename: String, write_mode: Option<WriteMode>) -> FileMap {\n-    let mut config = read_config(&filename);\n-    if let Some(write_mode) = write_mode {\n-        config.write_mode = write_mode;\n-    }\n-    format(Path::new(&filename), &config)\n+fn format_file<P: Into<PathBuf>>(filename: P, config: &Config) -> (FileMap, FormatReport) {\n+    let input = Input::File(filename.into());\n+    format_input(input, &config)\n }\n \n pub fn idempotent_check(filename: String,\n                         write_mode: Option<WriteMode>)\n                         -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n-    let config = read_config(&filename);\n-    let mut file_map = run_rustfmt(filename, write_mode);\n-    let format_report = fmt_lines(&mut file_map, &config);\n+    let config = read_config(&filename, write_mode);\n+    let (file_map, format_report) = format_file(filename, &config);\n \n     let mut write_result = HashMap::new();\n     for (filename, text) in file_map.iter() {"}, {"sha": "12c7dd9fdf1a0e2830645f4e32650d476fc54c1f", "filename": "tests/writemode/checkstyle.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/tests%2Fwritemode%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea/tests%2Fwritemode%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Fcheckstyle.xml?ref=4fdf859787fffe7d50e2a9dbc5e71d1087ad41ea", "patch": "@@ -1,2 +1,2 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<checkstyle version=\"4.3\"><file name=\"tests/source/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"50\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be ``\" /></file></checkstyle>\n+<checkstyle version=\"4.3\"><file name=\"tests/source/fn-single-line.rs\"><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `    where T: Sync`\" /><error line=\"1\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"50\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"57\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;() where T: Bar {}`\" /></file></checkstyle>"}]}