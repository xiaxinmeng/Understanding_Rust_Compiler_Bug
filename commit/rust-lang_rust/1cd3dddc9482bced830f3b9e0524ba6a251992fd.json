{"sha": "1cd3dddc9482bced830f3b9e0524ba6a251992fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDNkZGRjOTQ4MmJjZWQ4MzBmM2I5ZTA1MjRiYTZhMjUxOTkyZmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-25T02:57:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-25T02:57:38Z"}, "message": "Rollup merge of #61104 - spastorino:eval-place-to-op-iterate, r=oli-obk\n\nMake eval_place_to_op iterate instead of recurse\n\nr? @oli-obk", "tree": {"sha": "d31432aefeef46b6800585eeb1473245d64dcadb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31432aefeef46b6800585eeb1473245d64dcadb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd3dddc9482bced830f3b9e0524ba6a251992fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc6K8jCRBK7hj4Ov3rIwAAdHIIACN2Qtr8nO4c/3HZmRRK+8at\nhkJR03R8CHCuq9uN+Gq6L9eg2gwkFvVWZ8z400bvJ7dvTDXzIRm5Lih112X9/+e2\nJeH6fJRGJtUIl7Lkpdta5MPRYJllKDVY2iKl5Z5uxfp35RMOEj5wslM/tPGGpPH+\nEC1g7Q4dsCxc2sQn18eXDS6OccRLE2E9O/1eob105euehJpF6Pi//8Pbmv4vw0w3\nj1knnYocexHNeSFckHhE3wVL7CScnjvLhSkBRxHXPOIUG0y9SxBnEZT7dFKuwkrv\n5BiJRAcy8JmDmIgsTP2al4kEUVTWrTPHC3ERyqMTApjSL7m/vKolZDat7+eLB6M=\n=ihMc\n-----END PGP SIGNATURE-----\n", "payload": "tree d31432aefeef46b6800585eeb1473245d64dcadb\nparent dd33e8a84a2933a11d89dc78c164b639b842fc43\nparent e38b399d03605f68ddbec50bf31e2f6fb12d278d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558753058 +0200\ncommitter GitHub <noreply@github.com> 1558753058 +0200\n\nRollup merge of #61104 - spastorino:eval-place-to-op-iterate, r=oli-obk\n\nMake eval_place_to_op iterate instead of recurse\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd3dddc9482bced830f3b9e0524ba6a251992fd", "html_url": "https://github.com/rust-lang/rust/commit/1cd3dddc9482bced830f3b9e0524ba6a251992fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd3dddc9482bced830f3b9e0524ba6a251992fd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd33e8a84a2933a11d89dc78c164b639b842fc43", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd33e8a84a2933a11d89dc78c164b639b842fc43", "html_url": "https://github.com/rust-lang/rust/commit/dd33e8a84a2933a11d89dc78c164b639b842fc43"}, {"sha": "e38b399d03605f68ddbec50bf31e2f6fb12d278d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38b399d03605f68ddbec50bf31e2f6fb12d278d", "html_url": "https://github.com/rust-lang/rust/commit/e38b399d03605f68ddbec50bf31e2f6fb12d278d"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "a674389a93695394f4959a1fdfc7b213056cac39", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1cd3dddc9482bced830f3b9e0524ba6a251992fd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd3dddc9482bced830f3b9e0524ba6a251992fd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=1cd3dddc9482bced830f3b9e0524ba6a251992fd", "patch": "@@ -467,22 +467,34 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         mir_place: &mir::Place<'tcx>,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        use rustc::mir::Place::*;\n+        use rustc::mir::Place;\n         use rustc::mir::PlaceBase;\n-        let op = match *mir_place {\n-            Base(PlaceBase::Local(mir::RETURN_PLACE)) => return err!(ReadFromReturnPointer),\n-            Base(PlaceBase::Local(local)) => self.access_local(self.frame(), local, layout)?,\n \n-            Projection(ref proj) => {\n-                let op = self.eval_place_to_op(&proj.base, None)?;\n-                self.operand_projection(op, &proj.elem)?\n-            }\n+        mir_place.iterate(|place_base, place_projection| {\n+            let mut op = match place_base {\n+                PlaceBase::Local(mir::RETURN_PLACE) => return err!(ReadFromReturnPointer),\n+                PlaceBase::Local(local) => {\n+                    // FIXME use place_projection.is_empty() when is available\n+                    let layout = if let Place::Base(_) = mir_place {\n+                        layout\n+                    } else {\n+                        None\n+                    };\n+\n+                    self.access_local(self.frame(), *local, layout)?\n+                }\n+                PlaceBase::Static(place_static) => {\n+                    self.eval_static_to_mplace(place_static)?.into()\n+                }\n+            };\n \n-            _ => self.eval_place_to_mplace(mir_place)?.into(),\n-        };\n+            for proj in place_projection {\n+                op = self.operand_projection(op, &proj.elem)?\n+            }\n \n-        trace!(\"eval_place_to_op: got {:?}\", *op);\n-        Ok(op)\n+            trace!(\"eval_place_to_op: got {:?}\", *op);\n+            Ok(op)\n+        })\n     }\n \n     /// Evaluate the operand, returning a place where you can then find the data."}, {"sha": "65e5e23e384247e176aee2a5f85e7739823a7f12", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1cd3dddc9482bced830f3b9e0524ba6a251992fd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd3dddc9482bced830f3b9e0524ba6a251992fd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=1cd3dddc9482bced830f3b9e0524ba6a251992fd", "patch": "@@ -562,23 +562,23 @@ where\n \n     /// Evaluate statics and promoteds to an `MPlace`. Used to share some code between\n     /// `eval_place` and `eval_place_to_op`.\n-    pub(super) fn eval_place_to_mplace(\n+    pub(super) fn eval_static_to_mplace(\n         &self,\n-        mir_place: &mir::Place<'tcx>\n+        place_static: &mir::Static<'tcx>\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        use rustc::mir::Place::*;\n-        use rustc::mir::PlaceBase;\n-        use rustc::mir::{Static, StaticKind};\n-        Ok(match *mir_place {\n-            Base(PlaceBase::Static(box Static { kind: StaticKind::Promoted(promoted), .. })) => {\n+        use rustc::mir::StaticKind;\n+\n+        Ok(match place_static.kind {\n+            StaticKind::Promoted(promoted) => {\n                 let instance = self.frame().instance;\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),\n                 })?\n             }\n \n-            Base(PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), ty })) => {\n+            StaticKind::Static(def_id) => {\n+                let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;\n                 let instance = ty::Instance::mono(*self.tcx, def_id);\n@@ -600,8 +600,6 @@ where\n                 let alloc = self.tcx.alloc_map.lock().intern_static(cid.instance.def_id());\n                 MPlaceTy::from_aligned_ptr(Pointer::from(alloc).with_default_tag(), layout)\n             }\n-\n-            _ => bug!(\"eval_place_to_mplace called on {:?}\", mir_place),\n         })\n     }\n \n@@ -613,7 +611,7 @@ where\n     ) -> EvalResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {\n         use rustc::mir::Place::*;\n         use rustc::mir::PlaceBase;\n-        let place = match *mir_place {\n+        let place = match mir_place {\n             Base(PlaceBase::Local(mir::RETURN_PLACE)) => match self.frame().return_place {\n                 Some(return_place) =>\n                     // We use our layout to verify our assumption; caller will validate\n@@ -628,17 +626,19 @@ where\n                 // This works even for dead/uninitialized locals; we check further when writing\n                 place: Place::Local {\n                     frame: self.cur_frame(),\n-                    local,\n+                    local: *local,\n                 },\n-                layout: self.layout_of_local(self.frame(), local, None)?,\n+                layout: self.layout_of_local(self.frame(), *local, None)?,\n             },\n \n-            Projection(ref proj) => {\n+            Projection(proj) => {\n                 let place = self.eval_place(&proj.base)?;\n                 self.place_projection(place, &proj.elem)?\n             }\n \n-            _ => self.eval_place_to_mplace(mir_place)?.into(),\n+            Base(PlaceBase::Static(place_static)) => {\n+                self.eval_static_to_mplace(place_static)?.into()\n+            }\n         };\n \n         self.dump_place(place.place);"}]}