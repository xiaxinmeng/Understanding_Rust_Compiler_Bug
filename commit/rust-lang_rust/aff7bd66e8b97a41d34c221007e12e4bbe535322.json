{"sha": "aff7bd66e8b97a41d34c221007e12e4bbe535322", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjdiZDY2ZThiOTdhNDFkMzRjMjIxMDA3ZTEyZTRiYmU1MzUzMjI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-03T23:11:14Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-10T20:58:13Z"}, "message": "Merge set_panic and set_print into set_output_capture.\n\nThere were no use cases for setting them separately.\nMerging them simplifies some things.", "tree": {"sha": "546732fa39141338be1e546634a3815f50272d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/546732fa39141338be1e546634a3815f50272d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff7bd66e8b97a41d34c221007e12e4bbe535322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff7bd66e8b97a41d34c221007e12e4bbe535322", "html_url": "https://github.com/rust-lang/rust/commit/aff7bd66e8b97a41d34c221007e12e4bbe535322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff7bd66e8b97a41d34c221007e12e4bbe535322/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b7cb79e0d76aab4d3a68335595c07b238c17b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b7cb79e0d76aab4d3a68335595c07b238c17b8", "html_url": "https://github.com/rust-lang/rust/commit/08b7cb79e0d76aab4d3a68335595c07b238c17b8"}], "stats": {"total": 188, "additions": 57, "deletions": 131}, "files": [{"sha": "0935eb2bd7199cad3d5810684c37767d23993aea", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -1,6 +1,6 @@\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n-#![feature(set_stdio)]\n+#![feature(internal_output_capture)]\n #![feature(nll)]\n #![feature(generator_trait)]\n #![feature(generators)]"}, {"sha": "20a7b47313ecf5d08e4bf16eb9b01acd260370c1", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -148,7 +148,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n \n     let main_handler = move || {\n         rustc_span::with_session_globals(edition, || {\n-            io::set_panic(stderr.clone());\n+            io::set_output_capture(stderr.clone());\n             f()\n         })\n     };\n@@ -186,7 +186,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n             // on the new threads.\n             let main_handler = move |thread: rayon::ThreadBuilder| {\n                 rustc_span::SESSION_GLOBALS.set(session_globals, || {\n-                    io::set_panic(stderr.clone());\n+                    io::set_output_capture(stderr.clone());\n                     thread.run()\n                 })\n             };"}, {"sha": "d1e5942cba81907e56229c5701a80e7d0aa599ff", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -269,20 +269,18 @@ pub use self::buffered::{BufReader, BufWriter, LineWriter};\n pub use self::cursor::Cursor;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::error::{Error, ErrorKind, Result};\n+#[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n+#[doc(no_inline, hidden)]\n+pub use self::stdio::set_output_capture;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{stderr, stdin, stdout, Stderr, Stdin, Stdout};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{StderrLock, StdinLock, StdoutLock};\n #[unstable(feature = \"print_internals\", issue = \"none\")]\n pub use self::stdio::{_eprint, _print};\n-#[unstable(feature = \"libstd_io_internals\", issue = \"42788\")]\n-#[doc(no_inline, hidden)]\n-pub use self::stdio::{set_panic, set_print};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::util::{copy, empty, repeat, sink, Empty, Repeat, Sink};\n \n-pub(crate) use self::stdio::clone_io;\n-\n mod buffered;\n mod cursor;\n mod error;"}, {"sha": "f1dfb4c773047c8fce4d6acadb9106ce6e01b784", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 27, "deletions": 85, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -14,37 +14,29 @@ use crate::sync::{Arc, Mutex, MutexGuard};\n use crate::sys::stdio;\n use crate::sys_common;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use crate::thread::LocalKey;\n \n type LocalStream = Arc<Mutex<Vec<u8>>>;\n \n thread_local! {\n-    /// Used by the test crate to capture the output of the print! and println! macros.\n-    static LOCAL_STDOUT: Cell<Option<LocalStream>> = {\n+    /// Used by the test crate to capture the output of the print macros and panics.\n+    static OUTPUT_CAPTURE: Cell<Option<LocalStream>> = {\n         Cell::new(None)\n     }\n }\n \n-thread_local! {\n-    /// Used by the test crate to capture the output of the eprint! and eprintln! macros, and panics.\n-    static LOCAL_STDERR: Cell<Option<LocalStream>> = {\n-        Cell::new(None)\n-    }\n-}\n-\n-/// Flag to indicate LOCAL_STDOUT and/or LOCAL_STDERR is used.\n+/// Flag to indicate OUTPUT_CAPTURE is used.\n ///\n-/// If both are None and were never set on any thread, this flag is set to\n-/// false, and both LOCAL_STDOUT and LOCAL_STDOUT can be safely ignored on all\n-/// threads, saving some time and memory registering an unused thread local.\n+/// If it is None and was never set on any thread, this flag is set to false,\n+/// and OUTPUT_CAPTURE can be safely ignored on all threads, saving some time\n+/// and memory registering an unused thread local.\n ///\n-/// Note about memory ordering: This contains information about whether two\n-/// thread local variables might be in use. Although this is a global flag, the\n+/// Note about memory ordering: This contains information about whether a\n+/// thread local variable might be in use. Although this is a global flag, the\n /// memory ordering between threads does not matter: we only want this flag to\n-/// have a consistent order between set_print/set_panic and print_to *within\n+/// have a consistent order between set_output_capture and print_to *within\n /// the same thread*. Within the same thread, things always have a perfectly\n /// consistent order. So Ordering::Relaxed is fine.\n-static LOCAL_STREAMS: AtomicBool = AtomicBool::new(false);\n+static OUTPUT_CAPTURE_USED: AtomicBool = AtomicBool::new(false);\n \n /// A handle to a raw instance of the standard input stream of this process.\n ///\n@@ -890,70 +882,24 @@ impl fmt::Debug for StderrLock<'_> {\n     }\n }\n \n-/// Resets the thread-local stderr handle to the specified writer\n-///\n-/// This will replace the current thread's stderr handle, returning the old\n-/// handle. All future calls to `panic!` and friends will emit their output to\n-/// this specified handle.\n-///\n-/// Note that this does not need to be called for all new threads; the default\n-/// output handle is to the process's stderr stream.\n-#[unstable(\n-    feature = \"set_stdio\",\n-    reason = \"this function may disappear completely or be replaced \\\n-                     with a more general mechanism\",\n-    issue = \"none\"\n-)]\n-#[doc(hidden)]\n-pub fn set_panic(sink: Option<LocalStream>) -> Option<LocalStream> {\n-    if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n-        // LOCAL_STDERR is definitely None since LOCAL_STREAMS is false.\n-        return None;\n-    }\n-    LOCAL_STREAMS.store(true, Ordering::Relaxed);\n-    LOCAL_STDERR.with(move |slot| slot.replace(sink))\n-}\n-\n-/// Resets the thread-local stdout handle to the specified writer\n-///\n-/// This will replace the current thread's stdout handle, returning the old\n-/// handle. All future calls to `print!` and friends will emit their output to\n-/// this specified handle.\n-///\n-/// Note that this does not need to be called for all new threads; the default\n-/// output handle is to the process's stdout stream.\n+/// Sets the thread-local output capture buffer and returns the old one.\n #[unstable(\n-    feature = \"set_stdio\",\n-    reason = \"this function may disappear completely or be replaced \\\n-                     with a more general mechanism\",\n+    feature = \"internal_output_capture\",\n+    reason = \"this function is meant for use in the test crate \\\n+        and may disappear in the future\",\n     issue = \"none\"\n )]\n #[doc(hidden)]\n-pub fn set_print(sink: Option<LocalStream>) -> Option<LocalStream> {\n-    if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n-        // LOCAL_STDOUT is definitely None since LOCAL_STREAMS is false.\n+pub fn set_output_capture(sink: Option<LocalStream>) -> Option<LocalStream> {\n+    if sink.is_none() && !OUTPUT_CAPTURE_USED.load(Ordering::Relaxed) {\n+        // OUTPUT_CAPTURE is definitely None since OUTPUT_CAPTURE_USED is false.\n         return None;\n     }\n-    LOCAL_STREAMS.store(true, Ordering::Relaxed);\n-    LOCAL_STDOUT.with(move |slot| slot.replace(sink))\n-}\n-\n-pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n-    // Don't waste time when LOCAL_{STDOUT,STDERR} are definitely None.\n-    if !LOCAL_STREAMS.load(Ordering::Relaxed) {\n-        return (None, None);\n-    }\n-\n-    let clone = |cell: &Cell<Option<LocalStream>>| {\n-        let s = cell.take();\n-        cell.set(s.clone());\n-        s\n-    };\n-\n-    (LOCAL_STDOUT.with(clone), LOCAL_STDERR.with(clone))\n+    OUTPUT_CAPTURE_USED.store(true, Ordering::Relaxed);\n+    OUTPUT_CAPTURE.with(move |slot| slot.replace(sink))\n }\n \n-/// Write `args` to output stream `local_s` if possible, `global_s`\n+/// Write `args` to the capture buffer if enabled and possible, or `global_s`\n /// otherwise. `label` identifies the stream in a panic message.\n ///\n /// This function is used to print error messages, so it takes extra\n@@ -963,16 +909,12 @@ pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n /// thread, it will just fall back to the global stream.\n ///\n /// However, if the actual I/O causes an error, this function does panic.\n-fn print_to<T>(\n-    args: fmt::Arguments<'_>,\n-    local_s: &'static LocalKey<Cell<Option<LocalStream>>>,\n-    global_s: fn() -> T,\n-    label: &str,\n-) where\n+fn print_to<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str)\n+where\n     T: Write,\n {\n-    if LOCAL_STREAMS.load(Ordering::Relaxed)\n-        && local_s.try_with(|s| {\n+    if OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)\n+        && OUTPUT_CAPTURE.try_with(|s| {\n             // Note that we completely remove a local sink to write to in case\n             // our printing recursively panics/prints, so the recursive\n             // panic/print goes to the global sink instead of our local sink.\n@@ -982,7 +924,7 @@ fn print_to<T>(\n             })\n         }) == Ok(Some(()))\n     {\n-        // Succesfully wrote to local stream.\n+        // Succesfully wrote to capture buffer.\n         return;\n     }\n \n@@ -999,7 +941,7 @@ fn print_to<T>(\n #[doc(hidden)]\n #[cfg(not(test))]\n pub fn _print(args: fmt::Arguments<'_>) {\n-    print_to(args, &LOCAL_STDOUT, stdout, \"stdout\");\n+    print_to(args, stdout, \"stdout\");\n }\n \n #[unstable(\n@@ -1010,7 +952,7 @@ pub fn _print(args: fmt::Arguments<'_>) {\n #[doc(hidden)]\n #[cfg(not(test))]\n pub fn _eprint(args: fmt::Arguments<'_>) {\n-    print_to(args, &LOCAL_STDERR, stderr, \"stderr\");\n+    print_to(args, stderr, \"stderr\");\n }\n \n #[cfg(test)]"}, {"sha": "334757aafd774d1493ef6804ea5771b0d0417234", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -207,7 +207,7 @@\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n #![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n-#![cfg_attr(test, feature(print_internals, set_stdio, update_panic_count))]\n+#![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform)"}, {"sha": "8ba3feccb6bcc8f817efa43cd0b373124c27bcd8", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -24,11 +24,11 @@ use crate::sys_common::{thread_info, util};\n use crate::thread;\n \n #[cfg(not(test))]\n-use crate::io::set_panic;\n+use crate::io::set_output_capture;\n // make sure to use the stderr output configured\n // by libtest in the real copy of std\n #[cfg(test)]\n-use realstd::io::set_panic;\n+use realstd::io::set_output_capture;\n \n // Binary interface to the panic runtime that the standard library depends on.\n //\n@@ -218,9 +218,9 @@ fn default_hook(info: &PanicInfo<'_>) {\n         }\n     };\n \n-    if let Some(local) = set_panic(None) {\n+    if let Some(local) = set_output_capture(None) {\n         write(&mut *local.lock().unwrap_or_else(|e| e.into_inner()));\n-        set_panic(Some(local));\n+        set_output_capture(Some(local));\n     } else if let Some(mut out) = panic_output() {\n         write(&mut out);\n     }"}, {"sha": "5d65f960fcd391eb14c66077bcc48de18a8a2292", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -456,15 +456,15 @@ impl Builder {\n         let my_packet: Arc<UnsafeCell<Option<Result<T>>>> = Arc::new(UnsafeCell::new(None));\n         let their_packet = my_packet.clone();\n \n-        let (stdout, stderr) = crate::io::clone_io();\n+        let output_capture = crate::io::set_output_capture(None);\n+        crate::io::set_output_capture(output_capture.clone());\n \n         let main = move || {\n             if let Some(name) = their_thread.cname() {\n                 imp::Thread::set_name(name);\n             }\n \n-            crate::io::set_print(stdout);\n-            crate::io::set_panic(stderr);\n+            crate::io::set_output_capture(output_capture);\n \n             // SAFETY: the stack guard passed is the one for the current thread.\n             // This means the current thread's stack and the new thread's stack"}, {"sha": "d4b37284ea7749e903988d6e40ee52701316426c", "filename": "library/test/src/bench.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Ftest%2Fsrc%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Ftest%2Fsrc%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fbench.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -184,18 +184,14 @@ where\n     let mut bs = Bencher { mode: BenchMode::Auto, summary: None, bytes: 0 };\n \n     let data = Arc::new(Mutex::new(Vec::new()));\n-    let oldio = if !nocapture {\n-        Some((io::set_print(Some(data.clone())), io::set_panic(Some(data.clone()))))\n-    } else {\n-        None\n-    };\n+\n+    if !nocapture {\n+        io::set_output_capture(Some(data.clone()));\n+    }\n \n     let result = catch_unwind(AssertUnwindSafe(|| bs.bench(f)));\n \n-    if let Some((printio, panicio)) = oldio {\n-        io::set_print(printio);\n-        io::set_panic(panicio);\n-    }\n+    io::set_output_capture(None);\n \n     let test_result = match result {\n         //bs.bench(f) {"}, {"sha": "816b4d51188034cf97afea7097942b04df5113f5", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -25,7 +25,7 @@\n #![feature(nll)]\n #![feature(bool_to_option)]\n #![feature(available_concurrency)]\n-#![feature(set_stdio)]\n+#![feature(internal_output_capture)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n #![feature(termination_trait_lib)]\n@@ -530,11 +530,9 @@ fn run_test_in_process(\n     // Buffer for capturing standard I/O\n     let data = Arc::new(Mutex::new(Vec::new()));\n \n-    let oldio = if !nocapture {\n-        Some((io::set_print(Some(data.clone())), io::set_panic(Some(data.clone()))))\n-    } else {\n-        None\n-    };\n+    if !nocapture {\n+        io::set_output_capture(Some(data.clone()));\n+    }\n \n     let start = report_time.then(Instant::now);\n     let result = catch_unwind(AssertUnwindSafe(testfn));\n@@ -543,10 +541,7 @@ fn run_test_in_process(\n         TestExecTime(duration)\n     });\n \n-    if let Some((printio, panicio)) = oldio {\n-        io::set_print(printio);\n-        io::set_panic(panicio);\n-    }\n+    io::set_output_capture(None);\n \n     let test_result = match result {\n         Ok(()) => calc_result(&desc, Ok(()), &time_opts, &exec_time),"}, {"sha": "7e1241fce985aa2f8544a5eca0ad8795155964b3", "filename": "src/doc/unstable-book/src/library-features/internal-output-capture.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finternal-output-capture.md", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finternal-output-capture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Finternal-output-capture.md?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -1,4 +1,4 @@\n-# `libstd_io_internals`\n+# `internal_output_capture`\n \n This feature is internal to the Rust compiler and is not intended for general use.\n ", "previous_filename": "src/doc/unstable-book/src/library-features/libstd-io-internals.md"}, {"sha": "7dbdcdaa1a2ff21816e4c7b8a255667b20458057", "filename": "src/doc/unstable-book/src/library-features/set-stdio.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08b7cb79e0d76aab4d3a68335595c07b238c17b8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fset-stdio.md", "raw_url": "https://github.com/rust-lang/rust/raw/08b7cb79e0d76aab4d3a68335595c07b238c17b8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fset-stdio.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fset-stdio.md?ref=08b7cb79e0d76aab4d3a68335595c07b238c17b8", "patch": "@@ -1,5 +0,0 @@\n-# `set_stdio`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}, {"sha": "96b35e45535a6a4851aa1f032711262f4337fb60", "filename": "src/test/ui/panic-while-printing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-while-printing.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -1,11 +1,11 @@\n // run-pass\n // ignore-emscripten no subprocess support\n \n-#![feature(set_stdio)]\n+#![feature(internal_output_capture)]\n \n use std::fmt;\n use std::fmt::{Display, Formatter};\n-use std::io::set_panic;\n+use std::io::set_output_capture;\n use std::sync::{Arc, Mutex};\n \n pub struct A;\n@@ -17,7 +17,7 @@ impl Display for A {\n }\n \n fn main() {\n-    set_panic(Some(Arc::new(Mutex::new(Vec::new()))));\n+    set_output_capture(Some(Arc::new(Mutex::new(Vec::new()))));\n     assert!(std::panic::catch_unwind(|| {\n         eprintln!(\"{}\", A);\n     })"}, {"sha": "78145e337dafbc5c91c82eaf15110f9b44388060", "filename": "src/test/ui/threads-sendsync/task-stderr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff7bd66e8b97a41d34c221007e12e4bbe535322/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff7bd66e8b97a41d34c221007e12e4bbe535322/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftask-stderr.rs?ref=aff7bd66e8b97a41d34c221007e12e4bbe535322", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-emscripten no threads support\n \n-#![feature(set_stdio)]\n+#![feature(internal_output_capture)]\n \n use std::io;\n use std::str;\n@@ -13,7 +13,7 @@ fn main() {\n     let res = thread::Builder::new().spawn({\n         let data = data.clone();\n         move || {\n-            io::set_panic(Some(data));\n+            io::set_output_capture(Some(data));\n             panic!(\"Hello, world!\")\n         }\n     }).unwrap().join();"}]}