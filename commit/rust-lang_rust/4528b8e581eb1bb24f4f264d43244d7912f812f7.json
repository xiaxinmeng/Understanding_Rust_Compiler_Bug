{"sha": "4528b8e581eb1bb24f4f264d43244d7912f812f7", "node_id": "C_kwDOAAsO6NoAKDQ1MjhiOGU1ODFlYjFiYjI0ZjRmMjY0ZDQzMjQ0ZDc5MTJmODEyZjc", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2021-10-01T16:23:07Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2021-10-01T16:34:18Z"}, "message": "collector: limit pme context note to user-defd fns\n\nrustc adds notes to errors which happen post-monomorphization to\nprovide the user with helpful context (as these errors may rely on the\nspecific instantiations). To prevent this note being added where it is\nnot appropriate, the node is checked to originate outwith the current\ncrate. However, when polymorphization is enabled, this can result in\nsome errors (produced by `optimized_mir`) to occur earlier in\ncompilation than they normally would, during the collection of shims.\nSome shims have ids that originate in the standard library, but these\nshould not receive the PME note, so instances for compiler-generated\nfunctions no longer receive this note.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "b9c362bf67ff29425617cfcd89b819cdec9e004c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9c362bf67ff29425617cfcd89b819cdec9e004c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4528b8e581eb1bb24f4f264d43244d7912f812f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4528b8e581eb1bb24f4f264d43244d7912f812f7", "html_url": "https://github.com/rust-lang/rust/commit/4528b8e581eb1bb24f4f264d43244d7912f812f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4528b8e581eb1bb24f4f264d43244d7912f812f7/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2b69b6142725586a41d6db751921043a1786af", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2b69b6142725586a41d6db751921043a1786af", "html_url": "https://github.com/rust-lang/rust/commit/da2b69b6142725586a41d6db751921043a1786af"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "1c0b274f0631bcdcd4fc435ba5b82d2144a2254b", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4528b8e581eb1bb24f4f264d43244d7912f812f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528b8e581eb1bb24f4f264d43244d7912f812f7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=4528b8e581eb1bb24f4f264d43244d7912f812f7", "patch": "@@ -47,6 +47,14 @@ pub enum MonoItem<'tcx> {\n }\n \n impl<'tcx> MonoItem<'tcx> {\n+    /// Returns `true` if the mono item is user-defined (i.e. not compiler-generated, like shims).\n+    pub fn is_user_defined(&self) -> bool {\n+        match *self {\n+            MonoItem::Fn(instance) => matches!(instance.def, InstanceDef::Item(..)),\n+            MonoItem::Static(..) | MonoItem::GlobalAsm(..) => true,\n+        }\n+    }\n+\n     pub fn size_estimate(&self, tcx: TyCtxt<'tcx>) -> usize {\n         match *self {\n             MonoItem::Fn(instance) => {"}, {"sha": "5ccf8997d28ce0ae7a2f1c3ba8f67bcc870481c4", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4528b8e581eb1bb24f4f264d43244d7912f812f7/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4528b8e581eb1bb24f4f264d43244d7912f812f7/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=4528b8e581eb1bb24f4f264d43244d7912f812f7", "patch": "@@ -450,7 +450,9 @@ fn collect_items_rec<'tcx>(\n     // involving a dependency, and the lack of context is confusing) in this MVP, we focus on\n     // diagnostics on edges crossing a crate boundary: the collected mono items which are not\n     // defined in the local crate.\n-    if tcx.sess.diagnostic().err_count() > error_count && starting_point.node.krate() != LOCAL_CRATE\n+    if tcx.sess.diagnostic().err_count() > error_count\n+        && starting_point.node.krate() != LOCAL_CRATE\n+        && starting_point.node.is_user_defined()\n     {\n         let formatted_item = with_no_trimmed_paths(|| starting_point.node.to_string());\n         tcx.sess.span_note_without_error("}]}