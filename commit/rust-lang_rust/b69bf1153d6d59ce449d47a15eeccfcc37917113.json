{"sha": "b69bf1153d6d59ce449d47a15eeccfcc37917113", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OWJmMTE1M2Q2ZDU5Y2U0NDlkNDdhMTVlZWNjZmNjMzc5MTcxMTM=", "commit": {"author": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2015-08-05T19:47:01Z"}, "committer": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2015-08-05T19:57:27Z"}, "message": "Block import resolution only on 'pub' imports.\n\nWhen resolving 'use' statements, only consider pub imports of the\ntarget module as blocking.\n\nCloses #4865", "tree": {"sha": "027aba56835f3896666f4cdad32245dc419da86b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/027aba56835f3896666f4cdad32245dc419da86b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69bf1153d6d59ce449d47a15eeccfcc37917113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69bf1153d6d59ce449d47a15eeccfcc37917113", "html_url": "https://github.com/rust-lang/rust/commit/b69bf1153d6d59ce449d47a15eeccfcc37917113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69bf1153d6d59ce449d47a15eeccfcc37917113/comments", "author": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03456183e85fe7bd465bbe7c8f67885a2528444", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03456183e85fe7bd465bbe7c8f67885a2528444", "html_url": "https://github.com/rust-lang/rust/commit/d03456183e85fe7bd465bbe7c8f67885a2528444"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "355578ddccf2a4c862599cc0f32a09426e57163b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b69bf1153d6d59ce449d47a15eeccfcc37917113/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69bf1153d6d59ce449d47a15eeccfcc37917113/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b69bf1153d6d59ce449d47a15eeccfcc37917113", "patch": "@@ -926,6 +926,11 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                                                is_public,\n                                                                shadowable));\n         self.unresolved_imports += 1;\n+\n+        if is_public {\n+            module_.pub_count.set(module_.pub_count.get() + 1);\n+        }\n+\n         // Bump the reference count on the name. Or, if this is a glob, set\n         // the appropriate flag.\n \n@@ -959,6 +964,9 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // module's exports ahead of time.\n \n                 module_.glob_count.set(module_.glob_count.get() + 1);\n+                if is_public {\n+                    module_.pub_glob_count.set(module_.pub_glob_count.get() + 1);\n+                }\n             }\n         }\n     }"}, {"sha": "1dd26fe7c58afb0f09d42d8652756b727174c4d1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b69bf1153d6d59ce449d47a15eeccfcc37917113/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69bf1153d6d59ce449d47a15eeccfcc37917113/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b69bf1153d6d59ce449d47a15eeccfcc37917113", "patch": "@@ -699,6 +699,12 @@ pub struct Module {\n     // The number of unresolved globs that this module exports.\n     glob_count: Cell<usize>,\n \n+    // The number of unresolved pub imports (both regular and globs) in this module\n+    pub_count: Cell<usize>,\n+\n+    // The number of unresolved pub glob imports in this module\n+    pub_glob_count: Cell<usize>,\n+\n     // The index of the import we're resolving.\n     resolved_import_count: Cell<usize>,\n \n@@ -726,6 +732,8 @@ impl Module {\n             anonymous_children: RefCell::new(NodeMap()),\n             import_resolutions: RefCell::new(HashMap::new()),\n             glob_count: Cell::new(0),\n+            pub_count: Cell::new(0),\n+            pub_glob_count: Cell::new(0),\n             resolved_import_count: Cell::new(0),\n             populated: Cell::new(!external),\n         }"}, {"sha": "18fefa967ea3a579f43a6edebea390007076743c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b69bf1153d6d59ce449d47a15eeccfcc37917113/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69bf1153d6d59ce449d47a15eeccfcc37917113/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b69bf1153d6d59ce449d47a15eeccfcc37917113", "patch": "@@ -409,11 +409,19 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 GlobImport => {\n                     assert!(module_.glob_count.get() >= 1);\n                     module_.glob_count.set(module_.glob_count.get() - 1);\n+                    if import_directive.is_public {\n+                        assert!(module_.pub_glob_count.get() >= 1);\n+                        module_.pub_glob_count.set(module_.pub_glob_count.get() - 1);\n+                    }\n                 }\n                 SingleImport(..) => {\n                     // Ignore.\n                 }\n             }\n+            if import_directive.is_public {\n+                assert!(module_.pub_count.get() >= 1);\n+                module_.pub_count.set(module_.pub_count.get() - 1);\n+            }\n         }\n \n         return resolution_result;\n@@ -503,8 +511,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 // containing module, bail out. We don't know enough to be\n                 // able to resolve this import.\n \n-                if target_module.glob_count.get() > 0 {\n-                    debug!(\"(resolving single import) unresolved glob; \\\n+                if target_module.pub_glob_count.get() > 0 {\n+                    debug!(\"(resolving single import) unresolved pub glob; \\\n                             bailing out\");\n                     return ResolveResult::Indeterminate;\n                 }\n@@ -767,16 +775,22 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         // We must bail out if the node has unresolved imports of any kind\n         // (including globs).\n-        if !(*target_module).all_imports_resolved() {\n+        if (*target_module).pub_count.get() > 0 {\n             debug!(\"(resolving glob import) target module has unresolved \\\n-                    imports; bailing out\");\n+                    pub imports; bailing out\");\n             return ResolveResult::Indeterminate;\n         }\n \n-        assert_eq!(target_module.glob_count.get(), 0);\n-\n         // Add all resolved imports from the containing module.\n         let import_resolutions = target_module.import_resolutions.borrow();\n+\n+        if module_.import_resolutions.borrow_state() != ::std::cell::BorrowState::Unused {\n+            // In this case, target_module == module_\n+            // This means we are trying to glob import a module into itself,\n+            // and it is a no-go\n+            return ResolveResult::Indeterminate;\n+        }\n+\n         for (ident, target_import_resolution) in import_resolutions.iter() {\n             debug!(\"(resolving glob import) writing module resolution \\\n                     {} into `{}`\","}]}