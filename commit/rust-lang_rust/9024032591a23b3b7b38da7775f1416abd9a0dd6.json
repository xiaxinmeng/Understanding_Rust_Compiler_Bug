{"sha": "9024032591a23b3b7b38da7775f1416abd9a0dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMjQwMzI1OTFhMjNiM2I3YjM4ZGE3Nzc1ZjE0MTZhYmQ5YTBkZDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T01:59:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T01:59:40Z"}, "message": "Rollup merge of #64038 - matthewjasper:deny-mutual-impl-trait-recursion, r=varkor\n\nCheck impl trait substs when checking for recursive types\n\ncloses #64004", "tree": {"sha": "6c66903f083eaf13b53dc77e72cc61005f3c5cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c66903f083eaf13b53dc77e72cc61005f3c5cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9024032591a23b3b7b38da7775f1416abd9a0dd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcGwMCRBK7hj4Ov3rIwAAdHIIAJJ3EofbxrqQw1Mvai+x3fcu\nJA9Te1V0Fv5O0N8AsZNS/myC7UWNHyAOM+Wfc6KPxnxGnY5gzbAihKlqDDRS5wvF\nQAZtWRA/xBXnOy41TmXv65ObwxGFjNECJG20yyBGo1glGYL1xOOl3MOl9S1sN4AG\n5cNUHvxA08Dyw0QH/hpjiQNszTEwOu14tIe8hW3dkzIjVGFEOz7eeeD/fGrFze+d\nwTRlww+e8jryVntJzjuhGsP0L7DRiGVd5p9yLT/gfz2Q4OoBQAq+0IUACnI2s46G\nB9JsDdHecqr5ZqvSeF5oa6W7V+PR0oAbom52zyLxpJC0xTqDklt4boMGt5OnmVM=\n=voMZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c66903f083eaf13b53dc77e72cc61005f3c5cbf\nparent 07a28338faf3c7f637134a6906f8f6dc2239ceb8\nparent 877faf38440ada48b0c27100fa3c456b35bc5612\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567648780 +0200\ncommitter GitHub <noreply@github.com> 1567648780 +0200\n\nRollup merge of #64038 - matthewjasper:deny-mutual-impl-trait-recursion, r=varkor\n\nCheck impl trait substs when checking for recursive types\n\ncloses #64004\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9024032591a23b3b7b38da7775f1416abd9a0dd6", "html_url": "https://github.com/rust-lang/rust/commit/9024032591a23b3b7b38da7775f1416abd9a0dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9024032591a23b3b7b38da7775f1416abd9a0dd6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a28338faf3c7f637134a6906f8f6dc2239ceb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a28338faf3c7f637134a6906f8f6dc2239ceb8", "html_url": "https://github.com/rust-lang/rust/commit/07a28338faf3c7f637134a6906f8f6dc2239ceb8"}, {"sha": "877faf38440ada48b0c27100fa3c456b35bc5612", "url": "https://api.github.com/repos/rust-lang/rust/commits/877faf38440ada48b0c27100fa3c456b35bc5612", "html_url": "https://github.com/rust-lang/rust/commit/877faf38440ada48b0c27100fa3c456b35bc5612"}], "stats": {"total": 106, "additions": 100, "deletions": 6}, "files": [{"sha": "a08c82a0ae82fdd7a559b14a7520d1f7dacd1263", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=9024032591a23b3b7b38da7775f1416abd9a0dd6", "patch": "@@ -709,8 +709,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                 substs: SubstsRef<'tcx>,\n             ) -> Option<Ty<'tcx>> {\n                 if self.found_recursion {\n-                    None\n-                } else if self.seen_opaque_tys.insert(def_id) {\n+                    return None;\n+                }\n+                let substs = substs.fold_with(self);\n+                if self.seen_opaque_tys.insert(def_id) {\n                     let generic_ty = self.tcx.type_of(def_id);\n                     let concrete_ty = generic_ty.subst(self.tcx, substs);\n                     let expanded_ty = self.fold_ty(concrete_ty);"}, {"sha": "b3ce92cb7d922c48963e39247734280dd4e599f7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9024032591a23b3b7b38da7775f1416abd9a0dd6", "patch": "@@ -1420,8 +1420,8 @@ fn check_opaque_for_cycles<'tcx>(\n                 tcx.sess, span, E0733,\n                 \"recursion in an `async fn` requires boxing\",\n             )\n-            .span_label(span, \"an `async fn` cannot invoke itself directly\")\n-            .note(\"a recursive `async fn` must be rewritten to return a boxed future.\")\n+            .span_label(span, \"recursive `async fn`\")\n+            .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\")\n             .emit();\n         } else {\n             let mut err = struct_span_err!("}, {"sha": "bb2a61f03ce1f46e54d33741741df75762cda59f", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.rs?ref=9024032591a23b3b7b38da7775f1416abd9a0dd6", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden when using `async` and `await`.\n+\n+async fn rec_1() { //~ ERROR recursion in an `async fn`\n+    rec_2().await;\n+}\n+\n+async fn rec_2() { //~ ERROR recursion in an `async fn`\n+    rec_1().await;\n+}\n+\n+fn main() {}"}, {"sha": "9249308936e5452b4503c2f4ccaf14bde509958b", "filename": "src/test/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=9024032591a23b3b7b38da7775f1416abd9a0dd6", "patch": "@@ -0,0 +1,19 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:5:18\n+   |\n+LL | async fn rec_1() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n+   |\n+LL | async fn rec_2() {\n+   |                  ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "9ee014021804e168da5543c7f0294c978ea19af9", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=9024032591a23b3b7b38da7775f1416abd9a0dd6", "patch": "@@ -2,9 +2,9 @@ error[E0733]: recursion in an `async fn` requires boxing\n   --> $DIR/recursive-async-impl-trait-type.rs:5:40\n    |\n LL | async fn recursive_async_function() -> () {\n-   |                                        ^^ an `async fn` cannot invoke itself directly\n+   |                                        ^^ recursive `async fn`\n    |\n-   = note: a recursive `async fn` must be rewritten to return a boxed future.\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`.\n \n error: aborting due to previous error\n "}, {"sha": "cfd9c0ec5b45bab47c0813922f7ec11902452e3a", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.rs?ref=9024032591a23b3b7b38da7775f1416abd9a0dd6", "patch": "@@ -0,0 +1,25 @@\n+// Test that impl trait does not allow creating recursive types that are\n+// otherwise forbidden. Even when there's an opaque type in another crate\n+// hiding this.\n+\n+fn id<T>(t: T) -> impl Sized { t }\n+\n+fn recursive_id() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    id(recursive_id2())\n+}\n+\n+fn recursive_id2() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    id(recursive_id())\n+}\n+\n+fn wrap<T>(t: T) -> impl Sized { (t,) }\n+\n+fn recursive_wrap() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    wrap(recursive_wrap2())\n+}\n+\n+fn recursive_wrap2() -> impl Sized { //~ ERROR opaque type expands to a recursive type\n+    wrap(recursive_wrap())\n+}\n+\n+fn main() {}"}, {"sha": "7572c6c1bf0570f0169eb1f86350d488bb4d9d8d", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9024032591a23b3b7b38da7775f1416abd9a0dd6/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type--through-non-recursize.stderr?ref=9024032591a23b3b7b38da7775f1416abd9a0dd6", "patch": "@@ -0,0 +1,35 @@\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:7:22\n+   |\n+LL | fn recursive_id() -> impl Sized {\n+   |                      ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:11:23\n+   |\n+LL | fn recursive_id2() -> impl Sized {\n+   |                       ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:17:24\n+   |\n+LL | fn recursive_wrap() -> impl Sized {\n+   |                        ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: expanded type is `((impl Sized,),)`\n+\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:21:25\n+   |\n+LL | fn recursive_wrap2() -> impl Sized {\n+   |                         ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: expanded type is `((impl Sized,),)`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0720`."}]}