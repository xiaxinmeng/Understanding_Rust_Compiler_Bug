{"sha": "401ab612c26d7568f949f2f26710283cd05ca761", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMWFiNjEyYzI2ZDc1NjhmOTQ5ZjJmMjY3MTAyODNjZDA1Y2E3NjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-21T11:59:17Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-21T11:59:17Z"}, "message": "Adjust new suggestions to the suggestion guidelines", "tree": {"sha": "319ef573b0b4de069506e03d7831e5abd67a770f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/319ef573b0b4de069506e03d7831e5abd67a770f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401ab612c26d7568f949f2f26710283cd05ca761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401ab612c26d7568f949f2f26710283cd05ca761", "html_url": "https://github.com/rust-lang/rust/commit/401ab612c26d7568f949f2f26710283cd05ca761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401ab612c26d7568f949f2f26710283cd05ca761/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d361efac2639fa9dd7f6195e4276a728b8875d7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d361efac2639fa9dd7f6195e4276a728b8875d7a", "html_url": "https://github.com/rust-lang/rust/commit/d361efac2639fa9dd7f6195e4276a728b8875d7a"}], "stats": {"total": 104, "additions": 40, "deletions": 64}, "files": [{"sha": "7bb8a251354e2f9da2df7f9850a6df804048c2d4", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let suggestions = compatible_variants.iter()\n                         .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n                     err.span_suggestions(expr.span,\n-                                         \"perhaps you meant to use a variant of the expected type\",\n+                                         \"try using a variant of the expected type\",\n                                          suggestions);\n                 }\n             }"}, {"sha": "8b6d896cf8fb5a059ab30f930605ab0555d4b30a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -2654,7 +2654,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // Add help to type error if this is an `if` condition with an assignment\n             match (expected, &expr.node) {\n                 (ExpectIfCondition, &hir::ExprAssign(ref lhs, ref rhs)) => {\n-                    let msg = \"did you mean to compare equality?\";\n+                    let msg = \"try comparing for equality\";\n                     if let (Ok(left), Ok(right)) = (\n                         self.tcx.sess.codemap().span_to_snippet(lhs.span),\n                         self.tcx.sess.codemap().span_to_snippet(rhs.span))\n@@ -4270,7 +4270,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 hir::ExprBlock(..) => {\n                     let sp = cause_span.next_point();\n                     err.span_suggestion(sp,\n-                                        \"did you mean to add a semicolon here?\",\n+                                        \"try adding a semicolon\",\n                                         \";\".to_string());\n                 }\n                 _ => (),\n@@ -4302,7 +4302,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } = fn_decl {\n             if ty.is_suggestable() {\n                 err.span_suggestion(span,\n-                                    \"possibly return type missing here?\",\n+                                    \"try adding a return type\",\n                                     format!(\"-> {} \", ty));\n             } else {\n                 err.span_label(span, \"possibly return type missing here?\");"}, {"sha": "1db58b5c085709c7e71316ecaaf01a3f7fbd8a95", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -2936,7 +2936,7 @@ impl<'a> Parser<'a> {\n                         let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n                                                 .unwrap_or(pprust::expr_to_string(&expr));\n                         err.span_suggestion(expr.span,\n-                                            \"if you want to compare the casted value then write:\",\n+                                            \"try comparing the casted value\",\n                                             format!(\"({})\", expr_str));\n                         err.emit();\n "}, {"sha": "f0528838152469b5986a5814f29c89a6bd55c157", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -6,11 +6,11 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `()`\n               found type `usize`\n-help: did you mean to add a semicolon here?\n+help: try adding a semicolon\n    |\n 19 |     foo();\n    |          ^\n-help: possibly return type missing here?\n+help: try adding a return type\n    |\n 18 | fn bar() -> usize {\n    |          ^^^^^^^^"}, {"sha": "0cc157aa5bb5c4e45a08c0ffbee193369c8d4c19", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -6,7 +6,7 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `DoubleOption<_>`\n               found type `usize`\n-help: perhaps you meant to use a variant of the expected type\n+help: try using a variant of the expected type\n    |\n 21 |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c497db00c10f795f914342117453cfc13df8e24e", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 22, "deletions": 42, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -2,66 +2,46 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n   --> $DIR/issue-22644.rs:16:31\n    |\n 16 |     println!(\"{}\", a as usize < long_name);\n-   |                               ^ --------- interpreted as generic arguments\n-   |                               |\n-   |                               not interpreted as comparison\n-   |\n-help: if you want to compare the casted value then write:\n-   |\n-16 |     println!(\"{}\", (a as usize) < long_name);\n-   |                    ^^^^^^^^^^^^\n+   |                    ---------- ^ --------- interpreted as generic arguments\n+   |                    |          |\n+   |                    |          not interpreted as comparison\n+   |                    help: try comparing the casted value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:17:33\n    |\n 17 |     println!(\"{}{}\", a as usize < long_name, long_name);\n-   |                                 ^ -------------------- interpreted as generic arguments\n-   |                                 |\n-   |                                 not interpreted as comparison\n-   |\n-help: if you want to compare the casted value then write:\n-   |\n-17 |     println!(\"{}{}\", (a as usize) < long_name, long_name);\n-   |                      ^^^^^^^^^^^^\n+   |                      ---------- ^ -------------------- interpreted as generic arguments\n+   |                      |          |\n+   |                      |          not interpreted as comparison\n+   |                      help: try comparing the casted value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:18:31\n    |\n 18 |     println!(\"{}\", a as usize < 4);\n-   |                               ^ - interpreted as generic arguments\n-   |                               |\n-   |                               not interpreted as comparison\n-   |\n-help: if you want to compare the casted value then write:\n-   |\n-18 |     println!(\"{}\", (a as usize) < 4);\n-   |                    ^^^^^^^^^^^^\n+   |                    ---------- ^ - interpreted as generic arguments\n+   |                    |          |\n+   |                    |          not interpreted as comparison\n+   |                    help: try comparing the casted value: `(a as usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:20:31\n    |\n 20 |     println!(\"{}{}\", a: usize < long_name, long_name);\n-   |                               ^ -------------------- interpreted as generic arguments\n-   |                               |\n-   |                               not interpreted as comparison\n-   |\n-help: if you want to compare the casted value then write:\n-   |\n-20 |     println!(\"{}{}\", (a: usize) < long_name, long_name);\n-   |                      ^^^^^^^^^^\n+   |                      -------- ^ -------------------- interpreted as generic arguments\n+   |                      |        |\n+   |                      |        not interpreted as comparison\n+   |                      help: try comparing the casted value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:21:29\n    |\n 21 |     println!(\"{}\", a: usize < 4);\n-   |                             ^ - interpreted as generic arguments\n-   |                             |\n-   |                             not interpreted as comparison\n-   |\n-help: if you want to compare the casted value then write:\n-   |\n-21 |     println!(\"{}\", (a: usize) < 4);\n-   |                    ^^^^^^^^^^\n+   |                    -------- ^ - interpreted as generic arguments\n+   |                    |        |\n+   |                    |        not interpreted as comparison\n+   |                    help: try comparing the casted value: `(a: usize)`\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n   --> $DIR/issue-22644.rs:26:20\n@@ -71,7 +51,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n 27 |                    4);\n    |                    - interpreted as generic arguments\n    |\n-help: if you want to compare the casted value then write:\n+help: try comparing the casted value\n    |\n 23 |     println!(\"{}\", (a\n 24 |                    as\n@@ -86,7 +66,7 @@ error: `<` is interpreted as a start of generic arguments for `usize`, not a com\n 36 |                    5);\n    |                    - interpreted as generic arguments\n    |\n-help: if you want to compare the casted value then write:\n+help: try comparing the casted value\n    |\n 28 |     println!(\"{}\", (a\n 29 | "}, {"sha": "7287c8f37eb063f34748fb1c97feeb1a2b2028d7", "filename": "src/test/ui/issue-42954.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -2,17 +2,13 @@ error: `<` is interpreted as a start of generic arguments for `u32`, not a compa\n   --> $DIR/issue-42954.rs:13:19\n    |\n 13 |         $i as u32 < 0\n-   |                   ^ - interpreted as generic arguments\n-   |                   |\n-   |                   not interpreted as comparison\n+   |         --------- ^ - interpreted as generic arguments\n+   |         |         |\n+   |         |         not interpreted as comparison\n+   |         help: try comparing the casted value: `($i as u32)`\n ...\n 19 |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation\n-   |\n-help: if you want to compare the casted value then write:\n-   |\n-13 |         ($i as u32) < 0\n-   |         ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "714d1b397334ff366ae4102583a581fc93829950", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-19109.rs:14:5\n    |\n 13 | fn function(t: &mut Trait) {\n-   |                            - help: possibly return type missing here?: `-> *mut Trait `\n+   |                            - help: try adding a return type: `-> *mut Trait `\n 14 |     t as *mut Trait\n    |     ^^^^^^^^^^^^^^^ expected (), found *-ptr\n    |"}, {"sha": "c8e19db3707e1071ec3a0283859e8e97267b2616", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/token-error-correct-3.rs:25:13\n    |\n 25 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: did you mean to add a semicolon here?: `;`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n    |             |\n    |             expected (), found enum `std::result::Result`\n    |"}, {"sha": "6052b3091c7bd04debab12185ad56c0e798bada1", "filename": "src/test/ui/type-check/assignment-in-if.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/401ab612c26d7568f949f2f26710283cd05ca761/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fassignment-in-if.stderr?ref=401ab612c26d7568f949f2f26710283cd05ca761", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |        ^^^^^\n    |        |\n    |        expected bool, found ()\n-   |        help: did you mean to compare equality?: `x == x`\n+   |        help: try comparing for equality: `x == x`\n    |\n    = note: expected type `bool`\n               found type `()`\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n    |        ^^^^^^^\n    |        |\n    |        expected bool, found ()\n-   |        help: did you mean to compare equality?: `x == x`\n+   |        help: try comparing for equality: `x == x`\n    |\n    = note: expected type `bool`\n               found type `()`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n    |        ^^^^^^^^^^^^^^^^^^^^\n    |        |\n    |        expected bool, found ()\n-   |        help: did you mean to compare equality?: `y == (Foo { foo: x })`\n+   |        help: try comparing for equality: `y == (Foo { foo: x })`\n    |\n    = note: expected type `bool`\n               found type `()`\n@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n    |        ^^^^^\n    |        |\n    |        expected bool, found ()\n-   |        help: did you mean to compare equality?: `3 == x`\n+   |        help: try comparing for equality: `3 == x`\n    |\n    = note: expected type `bool`\n               found type `()`"}]}