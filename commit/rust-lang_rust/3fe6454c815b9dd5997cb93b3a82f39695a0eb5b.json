{"sha": "3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZTY0NTRjODE1YjlkZDU5OTdjYjkzYjNhODJmMzk2OTVhMGViNWI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-31T13:38:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-31T13:38:13Z"}, "message": "Merge pull request #2006 from rust-lang-nursery/rustup\n\nAccessing `Span` internals is deprecated", "tree": {"sha": "8fd7bf18ea8c0a1d13c254692e674c9d195b19a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd7bf18ea8c0a1d13c254692e674c9d195b19a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "html_url": "https://github.com/rust-lang/rust/commit/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d6c0feef237d0e6155d6d38e81cd4fbfe743b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6c0feef237d0e6155d6d38e81cd4fbfe743b65", "html_url": "https://github.com/rust-lang/rust/commit/9d6c0feef237d0e6155d6d38e81cd4fbfe743b65"}, {"sha": "755a236641840a7c071db458c5dbf8afc5debdde", "url": "https://api.github.com/repos/rust-lang/rust/commits/755a236641840a7c071db458c5dbf8afc5debdde", "html_url": "https://github.com/rust-lang/rust/commit/755a236641840a7c071db458c5dbf8afc5debdde"}], "stats": {"total": 127, "additions": 38, "deletions": 89}, "files": [{"sha": "1914b83e8989961c9ed14a94dcc1af365ea435eb", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -126,7 +126,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext, expr: &ast::Expr, check: &ast:\n         let Some(inner) = expr_block(then),\n         let ast::ExprKind::If(ref check_inner, ref content, None) = inner.node,\n     ], {\n-        if expr.span.ctxt != inner.span.ctxt {\n+        if expr.span.ctxt() != inner.span.ctxt() {\n             return;\n         }\n         span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {"}, {"sha": "f72a13147dc9e761b5f9e4bc99a0b9948d782222", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -96,10 +96,7 @@ pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(\n                 vec![\n                     (\n                         doc.len(),\n-                        Span {\n-                            lo: span.lo + BytePos(prefix.len() as u32),\n-                            ..span\n-                        }\n+                        span.with_lo(span.lo() + BytePos(prefix.len() as u32)),\n                     ),\n                 ],\n             );\n@@ -117,10 +114,7 @@ pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(\n             // +1 for the newline\n             sizes.push((\n                 line.len() + 1,\n-                Span {\n-                    lo: span.lo + BytePos(offset as u32),\n-                    ..span\n-                },\n+                span.with_lo(span.lo() + BytePos(offset as u32)),\n             ));\n         }\n         if !contains_initial_stars {\n@@ -228,10 +222,7 @@ fn check_doc<'a, Events: Iterator<Item = (usize, pulldown_cmark::Event<'a>)>>(\n                     let (begin, span) = spans[index];\n \n                     // Adjust for the begining of the current `Event`\n-                    let span = Span {\n-                        lo: span.lo + BytePos::from_usize(offset - begin),\n-                        ..span\n-                    };\n+                    let span = span.with_lo(span.lo() + BytePos::from_usize(offset - begin));\n \n                     check_text(cx, valid_idents, &text, span);\n                 }\n@@ -253,11 +244,11 @@ fn check_text(cx: &EarlyContext, valid_idents: &[String], text: &str, span: Span\n \n         // Adjust for the current word\n         let offset = word.as_ptr() as usize - text.as_ptr() as usize;\n-        let span = Span {\n-            lo: span.lo + BytePos::from_usize(offset),\n-            hi: span.lo + BytePos::from_usize(offset + word.len()),\n-            ..span\n-        };\n+        let span = Span::new(\n+            span.lo() + BytePos::from_usize(offset),\n+            span.lo() + BytePos::from_usize(offset + word.len()),\n+            span.ctxt(),\n+        );\n \n         check_word(cx, word, span);\n     }"}, {"sha": "e3b3bb408b33aefb53c91b302ddd0751ab86d5bb", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -1,6 +1,5 @@\n use rustc::lint::*;\n use syntax::ast;\n-use syntax_pos::{Span, NO_EXPANSION};\n use utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n use syntax::ptr::P;\n \n@@ -106,19 +105,11 @@ impl EarlyLintPass for Formatting {\n fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n     if let ast::ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro(lhs.span) {\n-            let eq_span = Span {\n-                lo: lhs.span.hi,\n-                hi: rhs.span.lo,\n-                ctxt: NO_EXPANSION,\n-            };\n+            let eq_span = lhs.span.between(rhs.span);\n             if let ast::ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n                     let op = ast::UnOp::to_string(op);\n-                    let eqop_span = Span {\n-                        lo: lhs.span.hi,\n-                        hi: sub_rhs.span.lo,\n-                        ctxt: NO_EXPANSION,\n-                    };\n+                    let eqop_span = lhs.span.between(sub_rhs.span);\n                     if eq_snippet.ends_with('=') {\n                         span_note_and_lint(\n                             cx,\n@@ -146,11 +137,7 @@ fn check_else_if(cx: &EarlyContext, expr: &ast::Expr) {\n             // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to\n             // the\n             // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n-            let else_span = Span {\n-                lo: then.span.hi,\n-                hi: else_.span.lo,\n-                ctxt: NO_EXPANSION,\n-            };\n+            let else_span = then.span.between(else_.span);\n \n             // the snippet should look like \" else \\n    \" with maybe comments anywhere\n             // it\u2019s bad when there is a \u2018\\n\u2019 after the \u201celse\u201d\n@@ -181,17 +168,9 @@ fn check_array(cx: &EarlyContext, expr: &ast::Expr) {\n         for element in array {\n             if let ast::ExprKind::Binary(ref op, ref lhs, _) = element.node {\n                 if !differing_macro_contexts(lhs.span, op.span) {\n-                    let space_span = Span {\n-                        lo: lhs.span.hi,\n-                        hi: op.span.lo,\n-                        ctxt: NO_EXPANSION,\n-                    };\n+                    let space_span = lhs.span.between(op.span);\n                     if let Some(space_snippet) = snippet_opt(cx, space_span) {\n-                        let lint_span = Span {\n-                            lo: lhs.span.hi,\n-                            hi: lhs.span.hi,\n-                            ctxt: NO_EXPANSION,\n-                        };\n+                        let lint_span = lhs.span.with_lo(lhs.span.hi());\n                         if space_snippet.contains('\\n') {\n                             span_note_and_lint(\n                                 cx,\n@@ -215,11 +194,7 @@ fn check_consecutive_ifs(cx: &EarlyContext, first: &ast::Expr, second: &ast::Exp\n         unsugar_if(second).is_some()\n     {\n         // where the else would be\n-        let else_span = Span {\n-            lo: first.span.hi,\n-            hi: second.span.lo,\n-            ctxt: NO_EXPANSION,\n-        };\n+        let else_span = first.span.between(second.span);\n \n         if let Some(else_snippet) = snippet_opt(cx, else_span) {\n             if !else_snippet.contains('\\n') {"}, {"sha": "36411b73a623e0660bb0f6ae8faa60a4899f8554", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -1,6 +1,5 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use syntax::codemap::Span;\n use utils::{paths, span_lint_and_then, match_qpath, snippet};\n \n /// **What it does:*** Lint for redundant pattern matching over `Result` or\n@@ -74,11 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                    arms[0].pats[0].span,\n                                    &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n                                    |db| {\n-                    let span = Span {\n-                        lo: expr.span.lo,\n-                        hi: op.span.hi,\n-                        ctxt: expr.span.ctxt,\n-                    };\n+                    let span = expr.span.with_hi(op.span.hi());\n                     db.span_suggestion(span, \"try this\", format!(\"if {}.{}\", snippet(cx, op.span, \"_\"), good_method));\n                 });\n             }"}, {"sha": "9812c759109b5cf0e74234d9ad545017be8cee8b", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -1,7 +1,6 @@\n use rustc::lint::*;\n use rustc::hir;\n use rustc::hir::BindingAnnotation;\n-use syntax_pos::{Span, NO_EXPANSION};\n use utils::{snippet, span_lint_and_then};\n \n /// **What it does:** Checks for variable declarations immediately followed by a\n@@ -74,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                 let Some(value) = check_assign(cx, def_id, &*then),\n                 !used_in_expr(cx, def_id, value),\n             ], {\n-                let span = Span { lo: stmt.span.lo, hi: if_.span.hi, ctxt: NO_EXPANSION };\n+                let span = stmt.span.to(if_.span);\n \n                 let (default_multi_stmts, default) = if let Some(ref else_) = *else_ {\n                     if let hir::ExprBlock(ref else_) = else_.node {"}, {"sha": "c47af20e148e28e0d1c63119bd17d51c5b5d5acf", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -1092,7 +1092,7 @@ fn lint_map_unwrap_or(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::Expr]\n         // lint, with note if neither arg is > 1 line and both map() and\n         // unwrap_or() have the same span\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n-        let same_span = map_args[1].span.ctxt == unwrap_args[1].span.ctxt;\n+        let same_span = map_args[1].span.ctxt() == unwrap_args[1].span.ctxt();\n         if same_span && !multiline {\n             span_note_and_lint(\n                 cx,\n@@ -1125,7 +1125,7 @@ fn lint_map_unwrap_or_else(cx: &LateContext, expr: &hir::Expr, map_args: &[hir::\n         // lint, with note if neither arg is > 1 line and both map() and\n         // unwrap_or_else() have the same span\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n-        let same_span = map_args[1].span.ctxt == unwrap_args[1].span.ctxt;\n+        let same_span = map_args[1].span.ctxt() == unwrap_args[1].span.ctxt();\n         if same_span && !multiline {\n             span_note_and_lint(\n                 cx,"}, {"sha": "e7c3fb895fbde7d7d973acb5774d78c81e9f98ce", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -567,7 +567,7 @@ fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n /// generated by\n /// `#[derive(...)`] or the like).\n fn in_attributes_expansion(expr: &Expr) -> bool {\n-    expr.span.ctxt.outer().expn_info().map_or(\n+    expr.span.ctxt().outer().expn_info().map_or(\n         false,\n         |info| matches!(info.callee.format, ExpnFormat::MacroAttribute(_)),\n     )"}, {"sha": "2ee33013791f4a058a2e5fd192e5880383332420", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -140,11 +140,11 @@ fn str_span(base: Span, s: &str, c: usize) -> Span {\n \n     match (si.next(), si.next()) {\n         (Some((l, _)), Some((h, _))) => {\n-            Span {\n-                lo: base.lo + BytePos(l as u32),\n-                hi: base.lo + BytePos(h as u32),\n-                ..base\n-            }\n+            Span::new(\n+                base.lo() + BytePos(l as u32),\n+                base.lo() + BytePos(h as u32),\n+                base.ctxt(),\n+            )\n         },\n         _ => base,\n     }"}, {"sha": "6119e5008f3c28d7c3227b0826793b615c10c52a", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -3,7 +3,6 @@ use rustc::lint::*;\n use rustc::ty;\n use utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n use utils::sugg::Sugg;\n-use syntax_pos::{Span, NO_EXPANSION};\n \n /// **What it does:** Checks for manual swapping.\n ///\n@@ -122,7 +121,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n                 (true, \"\".to_owned(), \"\".to_owned())\n             };\n \n-            let span = Span { lo: w[0].span.lo, hi: second.span.hi, ctxt: NO_EXPANSION};\n+            let span = w[0].span.to(second.span);\n \n             span_lint_and_then(cx,\n                                MANUAL_SWAP,\n@@ -161,7 +160,7 @@ fn check_suspicious_swap(cx: &LateContext, block: &Block) {\n                 (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n             };\n \n-            let span = Span{ lo: first.span.lo, hi: second.span.hi, ctxt: NO_EXPANSION};\n+            let span = first.span.to(second.span);\n \n             span_lint_and_then(cx,\n                                ALMOST_SWAPPED,"}, {"sha": "a2832ef7af23ea442b718ae386620f3202034c7f", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n             // Therefore, we need to climb the macro expansion tree and find the\n             // actual span that invoked `declare_lint!`:\n             let lint_span = lint_span\n-                .ctxt\n+                .ctxt()\n                 .outer()\n                 .expn_info()\n                 .map(|ei| ei.call_site)"}, {"sha": "a0ee741d1dd85debc9f0e891012d7c31b61dd248", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -98,7 +98,7 @@ pub mod higher;\n /// from a macro and one\n /// isn't).\n pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n-    rhs.ctxt != lhs.ctxt\n+    rhs.ctxt() != lhs.ctxt()\n }\n \n pub fn in_constant(cx: &LateContext, id: NodeId) -> bool {\n@@ -114,7 +114,7 @@ pub fn in_constant(cx: &LateContext, id: NodeId) -> bool {\n \n /// Returns true if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n-    span.ctxt.outer().expn_info().map_or(false, |info| {\n+    span.ctxt().outer().expn_info().map_or(false, |info| {\n         match info.callee.format {// don't treat range expressions desugared to structs as \"in_macro\"\n             ExpnFormat::CompilerDesugaring(kind) => kind != CompilerDesugaringKind::DotFill,\n             _ => true,\n@@ -147,7 +147,7 @@ pub fn in_external_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n         })\n     }\n \n-    span.ctxt.outer().expn_info().map_or(false, |info| {\n+    span.ctxt().outer().expn_info().map_or(false, |info| {\n         in_macro_ext(cx, &info)\n     })\n }\n@@ -740,7 +740,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = span.ctxt.outer().expn_info().map(|ei| {\n+        let span_name_span = span.ctxt().outer().expn_info().map(|ei| {\n             (ei.callee.name(), ei.call_site)\n         });\n \n@@ -762,7 +762,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = span.ctxt.outer().expn_info().map(|ei| {\n+    let span_name_span = span.ctxt().outer().expn_info().map(|ei| {\n         (ei.callee.name(), ei.call_site)\n     });\n "}, {"sha": "4dc2314accb9676bcb428c5e33e3bbc917bedc42", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -392,7 +392,7 @@ fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n /// Return the indentation before `span` if there are nothing but `[ \\t]`\n /// before it on its line.\n fn indentation<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String> {\n-    let lo = cx.sess().codemap().lookup_char_pos(span.lo);\n+    let lo = cx.sess().codemap().lookup_char_pos(span.lo());\n     if let Some(line) = lo.file.get_line(\n         lo.line - 1, /* line numbers in `Loc` are 1-based */\n     )\n@@ -443,21 +443,15 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n     fn suggest_item_with_attr<D: Display + ?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D) {\n         if let Some(indent) = indentation(cx, item) {\n-            let span = Span {\n-                hi: item.lo,\n-                ..item\n-            };\n+            let span = item.with_hi(item.lo());\n \n             self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent));\n         }\n     }\n \n     fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str) {\n         if let Some(indent) = indentation(cx, item) {\n-            let span = Span {\n-                hi: item.lo,\n-                ..item\n-            };\n+            let span = item.with_hi(item.lo());\n \n             let mut first = true;\n             let new_item = new_item"}, {"sha": "95f3c913dac684160a54a760a0640351d30ac537", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe6454c815b9dd5997cb93b3a82f39695a0eb5b/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=3fe6454c815b9dd5997cb93b3a82f39695a0eb5b", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             is_copy(cx, vec_type(cx.tables.expr_ty_adjusted(arg))),\n         ], {\n             // report the error around the `vec!` not inside `<std macros>:`\n-            let span = arg.span.ctxt.outer().expn_info().map(|info| info.call_site).expect(\"unable to get call_site\");\n+            let span = arg.span.ctxt().outer().expn_info().map(|info| info.call_site).expect(\"unable to get call_site\");\n             check_vec_macro(cx, &vec_args, span);\n         }}\n     }\n@@ -74,11 +74,7 @@ fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n         },\n         higher::VecArgs::Vec(args) => {\n             if let Some(last) = args.iter().last() {\n-                let span = Span {\n-                    lo: args[0].span.lo,\n-                    hi: last.span.hi,\n-                    ctxt: args[0].span.ctxt,\n-                };\n+                let span = args[0].span.to(last.span);\n \n                 format!(\"&[{}]\", snippet(cx, span, \"..\")).into()\n             } else {"}]}