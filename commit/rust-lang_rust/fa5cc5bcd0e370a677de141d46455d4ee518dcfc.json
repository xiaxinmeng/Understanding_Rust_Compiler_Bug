{"sha": "fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNWNjNWJjZDBlMzcwYTY3N2RlMTQxZDQ2NDU1ZDRlZTUxOGRjZmM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-16T00:59:55Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-16T01:00:41Z"}, "message": "Generate drop glue correctly for classes with destructors", "tree": {"sha": "b918a6d1643f41eb4f17b65eca80b283c6cefbd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b918a6d1643f41eb4f17b65eca80b283c6cefbd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "html_url": "https://github.com/rust-lang/rust/commit/fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d625af9f944c7b6567c443a6f796e30dbb01bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d625af9f944c7b6567c443a6f796e30dbb01bf2", "html_url": "https://github.com/rust-lang/rust/commit/5d625af9f944c7b6567c443a6f796e30dbb01bf2"}], "stats": {"total": 201, "additions": 171, "deletions": 30}, "files": [{"sha": "06821366f1cd588fe4f39ce44156499bb3aec2d1", "filename": "src/librustsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Flibrustsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Flibrustsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast_util.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -363,8 +363,11 @@ fn operator_prec(op: ast::binop) -> uint {\n }\n \n fn dtor_dec() -> fn_decl {\n-    {inputs: [], output: @{id: 0, node: ty_nil, span: dummy_sp()},\n-     purity: impure_fn, cf: return_val, constraints: []}\n+    let nil_t = @{id: 0, node: ty_nil, span: dummy_sp()};\n+    // dtor has one argument, of type ()\n+    {inputs: [{mode: ast::expl(ast::by_ref),\n+               ty: nil_t, ident: \"_\", id: 0}],\n+     output: nil_t, purity: impure_fn, cf: return_val, constraints: []}\n }\n \n // Local Variables:"}, {"sha": "35373bffd84640d4dbdf5c88bb6e3fda2eedea39", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -95,6 +95,7 @@ const tag_mod_impl_iface: uint = 0x47u;\n   different tags.\n  */\n const tag_item_impl_method: uint = 0x48u;\n+const tag_item_dtor: uint = 0x49u;\n \n // used to encode crate_ctxt side tables\n enum astencode_tag { // Reserves 0x50 -- 0x6f"}, {"sha": "5ebdc144ae7f3169d28f00d52807a6a1f4e10994", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -10,6 +10,7 @@ import driver::session::expect;\n import common::*;\n import std::map::hashmap;\n \n+export class_dtor;\n export get_symbol;\n export get_class_fields;\n export get_class_method;\n@@ -185,6 +186,12 @@ fn get_class_method(cstore: cstore::cstore, def: ast::def_id, mname: str)\n     decoder::get_class_method(cdata, def.node, mname)\n }\n \n+/* If def names a class with a dtor, return it. Otherwise, return none. */\n+fn class_dtor(cstore: cstore::cstore, def: ast::def_id)\n+    -> option<ast::def_id> {\n+    let cdata = cstore::get_crate_data(cstore, def.crate);\n+    decoder::class_dtor(cdata, def.node)\n+}\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "832dda817e3e09067a9612cb94e3591d6092388f", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -16,6 +16,7 @@ import util::ppaux::ty_to_str;\n import ebml::deserializer;\n import syntax::diagnostic::span_handler;\n \n+export class_dtor;\n export get_class_fields;\n export get_symbol;\n export get_enum_variants;\n@@ -331,6 +332,19 @@ fn get_class_method(cdata: cmd, id: ast::node_id, name: str) -> ast::def_id {\n     }\n }\n \n+fn class_dtor(cdata: cmd, id: ast::node_id) -> option<ast::def_id> {\n+    let items = ebml::get_doc(ebml::doc(cdata.data), tag_items);\n+    let cls_items = alt maybe_find_item(id, items) {\n+            some(it) { it }\n+            none     { ret none; }};\n+    let mut rslt = none;\n+    ebml::tagged_docs(cls_items, tag_item_dtor) {|f|\n+        let did = parse_def_id(ebml::doc_data(f));\n+        rslt = some(translate_def_id(cdata, did));\n+    }\n+    rslt\n+}\n+\n fn get_symbol(data: @[u8], id: ast::node_id) -> str {\n     ret item_symbol(lookup_item(id, data));\n }"}, {"sha": "4638d8ea4e568746f01a7b2afefb0a541f5716fe", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -201,8 +201,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n             encode_def_id(ebml_w, local_def(it.id));\n             ebml_w.end_tag();\n           }\n-          // FIXME: I don't *think* dtor needs to be serialized?\n-          item_class(_, _, items, ctor, _dtor, _) {\n+          item_class(_, _, items, ctor, m_dtor, _) {\n             add_to_index(ebml_w, path, index, it.ident);\n             ebml_w.start_tag(tag_paths_data_item);\n             encode_name(ebml_w, it.ident);\n@@ -212,6 +211,12 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n             add_to_index(ebml_w, path, index, it.ident);\n             #debug(\"ctor id: %d\", ctor.node.id);\n             encode_named_def_id(ebml_w, it.ident, local_def(ctor.node.id));\n+            /* Encode id for dtor */\n+            option::iter(m_dtor) {|dtor|\n+                ebml_w.start_tag(tag_item_dtor);\n+                encode_def_id(ebml_w, local_def(dtor.node.id));\n+                ebml_w.end_tag();\n+            };\n             encode_class_item_paths(ebml_w, items, path + [it.ident],\n                                       index);\n             ebml_w.end_tag();"}, {"sha": "71ce361c626dd48e9f328c4e5b7ac426d1f58a1a", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -302,7 +302,6 @@ fn node_id_to_str(map: map, id: node_id) -> str {\n       }\n     }\n }\n-\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "dcecd3f2251e4e92e1950d4aed35491d1fa2c798", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 77, "deletions": 13, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -717,6 +717,48 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_res(did, inner, substs) {\n         trans_res_drop(bcx, v0, did, inner, substs.tps)\n       }\n+      ty::ty_class(did, substs) {\n+        let tcx = bcx.tcx();\n+        alt ty::ty_dtor(tcx, did) {\n+          some(dtor) {\n+            let drop_flag = GEPi(bcx, v0, [0u, 0u]);\n+            with_cond(bcx, IsNotNull(bcx, Load(bcx, drop_flag))) {|cx|\n+               let mut bcx = cx;\n+                // we have to cast v0\n+               let classptr = GEPi(bcx, v0, [0u, 1u]);\n+                // Find and call the actual destructor\n+                let dtor_addr = get_res_dtor(bcx.ccx(), dtor, substs.tps);\n+                // The second argument is the \"self\" argument for drop\n+                let params = lib::llvm::fn_ty_param_tys\n+                   (llvm::LLVMGetElementType\n+                    (llvm::LLVMTypeOf(dtor_addr)));\n+                let self_arg = PointerCast(bcx, v0, params[1u]);\n+                let args = [bcx.fcx.llretptr, self_arg];\n+                let val_llty = lib::llvm::fn_ty_param_tys\n+                    (llvm::LLVMGetElementType\n+                     (llvm::LLVMTypeOf(dtor_addr)))[args.len()];\n+                let val_cast = BitCast(bcx, classptr, val_llty);\n+                #debug(\"fn_ty: %s\", ty_str(bcx.ccx().tn,\n+                                           (llvm::LLVMGetElementType\n+                                            (llvm::LLVMTypeOf(dtor_addr)))));\n+                #debug(\"self's ty: %s\", val_str(bcx.ccx().tn, v0));\n+                Call(bcx, dtor_addr, args + [val_cast]);\n+                // Drop the fields\n+                for vec::eachi(ty::class_items_as_fields(tcx, did, substs))\n+                     {|i, fld|\n+                         let llfld_a = GEPi(bcx, classptr, [0u, i]);\n+                         bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n+                     }\n+                Store(bcx, C_u8(0u), drop_flag);\n+                bcx\n+             }\n+          }\n+          none {\n+            // No dtor? Just the default case\n+            iter_structural_ty(bcx, v0, t, drop_ty)\n+          }\n+        }\n+      }\n       ty::ty_fn(_) {\n         closure::make_fn_glue(bcx, v0, t, drop_ty)\n       }\n@@ -1015,11 +1057,12 @@ fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n         ret next_cx;\n       }\n       ty::ty_class(did, substs) {\n-          // a class is like a record type\n-          for vec::eachi(ty::class_items_as_fields(cx.tcx(), did, substs))\n+        assert(ty::ty_dtor(cx.tcx(), did) == none);\n+        // a class w/ no dtor is like a record type\n+        for vec::eachi(ty::class_items_as_fields(cx.tcx(), did, substs))\n            {|i, fld|\n-             let llfld_a = GEPi(cx, av, [0u, i]);\n-             cx = f(cx, llfld_a, fld.mt.ty);\n+               let llfld_a = GEPi(cx, av, [0u, i]);\n+               cx = f(cx, llfld_a, fld.mt.ty);\n            }\n       }\n       _ { cx.sess().unimpl(\"type in iter_structural_ty\"); }\n@@ -2340,16 +2383,24 @@ fn trans_rec_field(bcx: block, base: @ast::expr,\n \n fn trans_rec_field_inner(bcx: block, val: ValueRef, ty: ty::t,\n                          field: ast::ident, sp: span) -> lval_result {\n+    let mut is_class_with_dtor = false;\n     let fields = alt ty::get(ty).struct {\n-            ty::ty_rec(fs) { fs }\n-            ty::ty_class(did, substs) {\n-                ty::class_items_as_fields(bcx.tcx(), did, substs) }\n-            // Constraint?\n-            _ { bcx.tcx().sess.span_bug(sp, \"trans_rec_field:\\\n+       ty::ty_rec(fs) { fs }\n+       ty::ty_class(did, substs) {\n+         if option::is_some(ty::ty_dtor(bcx.tcx(), did)) {\n+            is_class_with_dtor = true;\n+         }\n+         ty::class_items_as_fields(bcx.tcx(), did, substs)\n+       }\n+       // Constraint?\n+       _ { bcx.tcx().sess.span_bug(sp, \"trans_rec_field:\\\n                  base expr has non-record type\"); }\n-        };\n+    };\n     let ix = field_idx_strict(bcx.tcx(), sp, field, fields);\n-    let val = GEPi(bcx, val, [0u, ix]);\n+    let val = GEPi(bcx, if is_class_with_dtor {\n+            GEPi(bcx, val, [0u, 1u])\n+        }\n+        else { val }, [0u, ix]);\n     ret {bcx: bcx, val: val, kind: owned};\n }\n \n@@ -4596,6 +4647,19 @@ fn trans_class_ctor(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n   // So we initialize it here\n \n   let selfptr = alloc_ty(bcx_top, rslt_ty);\n+  // If we have a dtor, we have a two-word representation with a drop\n+  // flag, then a pointer to the class itself\n+  let valptr = if option::is_some(ty::ty_dtor(bcx_top.tcx(),\n+                                  parent_id)) {\n+    // Initialize the drop flag\n+    let one = C_u8(1u);\n+    let flag = GEPi(bcx_top, selfptr, [0u, 0u]);\n+    Store(bcx_top, one, flag);\n+    // Select the pointer to the class itself\n+    GEPi(bcx_top, selfptr, [0u, 1u])\n+  }\n+  else { selfptr };\n+\n   // initialize fields to zero\n   let fields = ty::class_items_as_fields(bcx_top.tcx(), parent_id,\n                                          dummy_substs(psubsts.tys));\n@@ -4604,7 +4668,7 @@ fn trans_class_ctor(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n   // drop their LHS\n   for fields.each {|field|\n      let ix = field_idx_strict(bcx.tcx(), sp, field.ident, fields);\n-     bcx = zero_alloca(bcx, GEPi(bcx, selfptr, [0u, ix]),\n+     bcx = zero_alloca(bcx, GEPi(bcx, valptr, [0u, ix]),\n                        field.mt.ty);\n   }\n \n@@ -4626,7 +4690,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n                     body: ast::blk, lldtor_decl: ValueRef,\n                     dtor_id: ast::node_id,\n                     parent_id: ast::def_id) {\n-    let class_ty = ty::lookup_item_type(ccx.tcx, parent_id).ty;\n+  let class_ty = ty::lookup_item_type(ccx.tcx, parent_id).ty;\n   trans_fn(ccx, path, ast_util::dtor_dec(),\n            body, lldtor_decl, impl_self(class_ty), none, dtor_id);\n }"}, {"sha": "73897fd31756d5da1f679fd8eaa3b5c0b2530c8c", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -414,10 +414,25 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         s\n       }\n       ty::ty_iface(_, _) { [shape_box_fn] }\n-      ty::ty_class(did, ts) {\n-        // same as records\n-        let mut s = [shape_struct], sub = [];\n-        for ty::class_items_as_fields(ccx.tcx, did, ts).each {|f|\n+      ty::ty_class(did, substs) {\n+        // same as records, unless there's a dtor\n+        let tps = substs.tps;\n+        let m_dtor_did = ty::ty_dtor(ccx.tcx, did);\n+        let mut s = if option::is_some(m_dtor_did) {\n+            [shape_res]\n+          }\n+          else { [shape_struct] };\n+        let mut sub = [];\n+        option::iter(m_dtor_did) {|dtor_did|\n+          let ri = {did: dtor_did, tps: tps};\n+          let id = interner::intern(ccx.shape_cx.resources, ri);\n+          add_u16(s, id as u16);\n+          add_u16(s, vec::len(tps) as u16);\n+          for vec::each(tps) {|tp|\n+             add_substr(s, shape_of(ccx, tp, ty_param_map));\n+          }\n+        };\n+        for ty::class_items_as_fields(ccx.tcx, did, substs).each {|f|\n             sub += shape_of(ccx, f.mt.ty, ty_param_map);\n         }\n         add_substr(s, sub);\n@@ -571,14 +586,11 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n \n fn gen_resource_shapes(ccx: @crate_ctxt) -> ValueRef {\n     let mut dtors = [];\n-    let mut i = 0u;\n     let len = interner::len(ccx.shape_cx.resources);\n-    while i < len {\n-        let ri = interner::get(ccx.shape_cx.resources, i);\n-        dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.tps)];\n-        i += 1u;\n+    uint::range(0u, len) {|i|\n+      let ri = interner::get(ccx.shape_cx.resources, i);\n+      dtors += [trans::base::get_res_dtor(ccx, ri.did, ri.tps)];\n     }\n-\n     ret mk_global(ccx, \"resource_shapes\", C_struct(dtors), true);\n }\n "}, {"sha": "b094a576cb1d17af8137a7ce9c95ad9bc319e2a4", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -147,7 +147,13 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n                 let t = ty::lookup_field_type(cx.tcx, did, f.id, ts);\n                 type_of(cx, t)\n             };\n-            T_struct(tys)\n+            if ty::ty_dtor(cx.tcx, did) == none {\n+              T_struct(tys)\n+            }\n+            else {\n+              // resource type\n+              T_struct([T_i8(), T_struct(tys)])\n+            }\n           }\n           ty::ty_self { cx.tcx.sess.unimpl(\"type_of: ty_self\"); }\n           ty::ty_var(_) { cx.tcx.sess.bug(\"type_of shouldn't see a ty_var\"); }"}, {"sha": "2d12870d25b43eb7091fdc2fb15b341edf496bc6", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -6,7 +6,7 @@ import session::session;\n import syntax::ast;\n import syntax::ast::*;\n import syntax::ast_util;\n-import syntax::ast_util::{is_local, split_class_items};\n+import syntax::ast_util::{is_local, local_def, split_class_items};\n import syntax::codemap::span;\n import metadata::csearch;\n import util::common::*;\n@@ -69,6 +69,7 @@ export new_ty_hash;\n export enum_variants, substd_enum_variants;\n export iface_methods, store_iface_methods, impl_iface;\n export enum_variant_with_id;\n+export ty_dtor;\n export ty_param_bounds_and_ty;\n export ty_bool, mk_bool, type_is_bool;\n export ty_bot, mk_bot, type_is_bot;\n@@ -2377,6 +2378,22 @@ fn item_path_str(cx: ctxt, id: ast::def_id) -> str {\n     ast_map::path_to_str(item_path(cx, id))\n }\n \n+/* If class_id names a class with a dtor, return some(the dtor's id).\n+   Otherwise return none. */\n+fn ty_dtor(cx: ctxt, class_id: def_id) -> option<def_id> {\n+    if is_local(class_id) {\n+       alt cx.items.find(class_id.node) {\n+         some(ast_map::node_item(@{node: ast::item_class(_, _, _, _,\n+                                     some(dtor), _), _}, _))\n+             { some(local_def(dtor.node.id))  }\n+          _  { none }\n+       }\n+    }\n+    else {\n+      csearch::class_dtor(cx.sess.cstore, class_id)\n+    }\n+}\n+\n fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n     if id.crate != ast::local_crate {\n         csearch::get_item_path(cx, id)"}, {"sha": "0ae85a5af0b79a66f6a5b70067fb78cdc698202d", "filename": "src/test/run-pass/resource-destruct-with-class.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Ftest%2Frun-pass%2Fresource-destruct-with-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5cc5bcd0e370a677de141d46455d4ee518dcfc/src%2Ftest%2Frun-pass%2Fresource-destruct-with-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct-with-class.rs?ref=fa5cc5bcd0e370a677de141d46455d4ee518dcfc", "patch": "@@ -0,0 +1,13 @@\n+class shrinky_pointer {\n+  let i: @@mut int;\n+  fn look_at() -> int { ret **(self.i); }\n+  new(i: @@mut int) { self.i = i; }\n+  drop { log(error, \"Hello!\"); **(self.i) -= 1; }\n+}\n+\n+fn main() {\n+    let my_total = @@mut 10;\n+    { let pt <- shrinky_pointer(my_total); assert (pt.look_at() == 10); }\n+    log(error, #fmt(\"my_total = %d\", **my_total));\n+    assert (**my_total == 9);\n+}"}]}