{"sha": "ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhN2RlODY5ZWE5ZjdmYzlmNmYzNDc5MDVjM2Y3MTVhNjJlNDA4MGU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-10T04:37:10Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-10T05:38:27Z"}, "message": "Remove lifetime from Resolver", "tree": {"sha": "daa6207971ba9bc9c6b59ae8433d3a3349e49015", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa6207971ba9bc9c6b59ae8433d3a3349e49015"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "html_url": "https://github.com/rust-lang/rust/commit/ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2c329c72c3d764423c3909c7483cf2fd6659626", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c329c72c3d764423c3909c7483cf2fd6659626", "html_url": "https://github.com/rust-lang/rust/commit/e2c329c72c3d764423c3909c7483cf2fd6659626"}], "stats": {"total": 168, "additions": 84, "deletions": 84}, "files": [{"sha": "31dd46eefc888b95d2b13468354fd01802f8d2be", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -730,9 +730,9 @@ pub struct ExpansionResult {\n     pub hir_forest: hir_map::Forest,\n }\n \n-pub struct InnerExpansionResult<'a, 'b: 'a> {\n+pub struct InnerExpansionResult<'a> {\n     pub expanded_crate: ast::Crate,\n-    pub resolver: Resolver<'a, 'b>,\n+    pub resolver: Resolver<'a>,\n     pub hir_forest: hir_map::Forest,\n }\n \n@@ -811,7 +811,7 @@ where\n \n /// Same as phase_2_configure_and_expand, but doesn't let you keep the resolver\n /// around\n-pub fn phase_2_configure_and_expand_inner<'a, 'b: 'a, F>(\n+pub fn phase_2_configure_and_expand_inner<'a, F>(\n     sess: &'a Session,\n     cstore: &'a CStore,\n     mut krate: ast::Crate,\n@@ -820,9 +820,9 @@ pub fn phase_2_configure_and_expand_inner<'a, 'b: 'a, F>(\n     addl_plugins: Option<Vec<String>>,\n     make_glob_map: MakeGlobMap,\n     resolver_arenas: &'a ResolverArenas<'a>,\n-    crate_loader: &'a mut CrateLoader<'b>,\n+    crate_loader: &'a mut CrateLoader<'a>,\n     after_expand: F,\n-) -> Result<InnerExpansionResult<'a, 'b>, CompileIncomplete>\n+) -> Result<InnerExpansionResult<'a>, CompileIncomplete>\n where\n     F: FnOnce(&ast::Crate) -> CompileResult,\n {"}, {"sha": "f082d776969ebe418da7b630468ff2f652adc085", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -83,7 +83,7 @@ impl<'a> ToNameBinding<'a> for (Def, ty::Visibility, Span, Mark, IsMacroExport)\n     }\n }\n \n-impl<'a, 'cl> Resolver<'a, 'cl> {\n+impl<'a> Resolver<'a> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n     pub fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n@@ -888,13 +888,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     }\n }\n \n-pub struct BuildReducedGraphVisitor<'a, 'b: 'a, 'c: 'b> {\n-    pub resolver: &'a mut Resolver<'b, 'c>,\n+pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n+    pub resolver: &'a mut Resolver<'b>,\n     pub current_legacy_scope: LegacyScope<'b>,\n     pub expansion: Mark,\n }\n \n-impl<'a, 'b, 'cl> BuildReducedGraphVisitor<'a, 'b, 'cl> {\n+impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn visit_invoc(&mut self, id: ast::NodeId) -> &'b InvocationData<'b> {\n         let mark = id.placeholder_to_mark();\n         self.resolver.current_module.unresolved_invocations.borrow_mut().insert(mark);\n@@ -917,7 +917,7 @@ macro_rules! method {\n     }\n }\n \n-impl<'a, 'b, 'cl> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b, 'cl> {\n+impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n     method!(visit_impl_item: ast::ImplItem, ast::ImplItemKind::Macro, walk_impl_item);\n     method!(visit_expr:      ast::Expr,     ast::ExprKind::Mac,       walk_expr);\n     method!(visit_pat:       ast::Pat,      ast::PatKind::Mac,        walk_pat);"}, {"sha": "5d231d845cfd86dea91d46740d69270f61ffac3e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -31,30 +31,30 @@ use syntax::visit::{self, Visitor};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n \n \n-struct UnusedImportCheckVisitor<'a, 'b: 'a, 'd: 'b> {\n-    resolver: &'a mut Resolver<'b, 'd>,\n+struct UnusedImportCheckVisitor<'a, 'b: 'a> {\n+    resolver: &'a mut Resolver<'b>,\n     /// All the (so far) unused imports, grouped path list\n     unused_imports: NodeMap<NodeMap<Span>>,\n     base_id: ast::NodeId,\n     item_span: Span,\n }\n \n // Deref and DerefMut impls allow treating UnusedImportCheckVisitor as Resolver.\n-impl<'a, 'b, 'd> Deref for UnusedImportCheckVisitor<'a, 'b, 'd> {\n-    type Target = Resolver<'b, 'd>;\n+impl<'a, 'b> Deref for UnusedImportCheckVisitor<'a, 'b> {\n+    type Target = Resolver<'b>;\n \n-    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'd> {\n+    fn deref<'c>(&'c self) -> &'c Resolver<'b> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b, 'd> DerefMut for UnusedImportCheckVisitor<'a, 'b, 'd> {\n-    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'd> {\n+impl<'a, 'b> DerefMut for UnusedImportCheckVisitor<'a, 'b> {\n+    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b> {\n         &mut *self.resolver\n     }\n }\n \n-impl<'a, 'b, 'd> UnusedImportCheckVisitor<'a, 'b, 'd> {\n+impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     // We have information about whether `use` (import) directives are actually\n     // used now. If an import is not used at all, we signal a lint error.\n     fn check_import(&mut self, item_id: ast::NodeId, id: ast::NodeId, span: Span) {\n@@ -77,7 +77,7 @@ impl<'a, 'b, 'd> UnusedImportCheckVisitor<'a, 'b, 'd> {\n     }\n }\n \n-impl<'a, 'b, 'cl> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'cl> {\n+impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         self.item_span = item.span;\n "}, {"sha": "5ff012662f91c52d65a83a896daee9b1ba6e49b2", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -17,7 +17,7 @@ use syntax_pos::Span;\n use resolve_imports::ImportResolver;\n use std::cmp::Reverse;\n \n-impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n+impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     /// Add suggestions for a path that cannot be resolved.\n     pub(crate) fn make_path_suggestion(\n         &mut self,"}, {"sha": "3961301f7468367c13489c66b948a5183ec6714b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -742,7 +742,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n }\n \n /// This thing walks the whole crate in DFS manner, visiting each item, resolving names as it goes.\n-impl<'a, 'tcx, 'cl> Visitor<'tcx> for Resolver<'a, 'cl> {\n+impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         self.resolve_item(item);\n     }\n@@ -1476,7 +1476,7 @@ pub struct ExternPreludeEntry<'a> {\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n-pub struct Resolver<'a, 'b: 'a> {\n+pub struct Resolver<'a> {\n     session: &'a Session,\n     cstore: &'a CStore,\n \n@@ -1580,7 +1580,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n \n-    crate_loader: &'a mut CrateLoader<'b>,\n+    crate_loader: &'a mut CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, &'a NameBinding<'a>>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n@@ -1654,7 +1654,7 @@ impl<'a> ResolverArenas<'a> {\n     }\n }\n \n-impl<'a, 'b: 'a, 'cl: 'b> ty::DefIdTree for &'a Resolver<'b, 'cl> {\n+impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n@@ -1665,7 +1665,7 @@ impl<'a, 'b: 'a, 'cl: 'b> ty::DefIdTree for &'a Resolver<'b, 'cl> {\n \n /// This interface is used through the AST\u2192HIR step, to embed full paths into the HIR. After that\n /// the resolver is no longer needed as all the relevant information is inline.\n-impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n+impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     fn resolve_hir_path(\n         &mut self,\n         path: &ast::Path,\n@@ -1711,7 +1711,7 @@ impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n     }\n }\n \n-impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n+impl<'a> Resolver<'a> {\n     /// Rustdoc uses this to resolve things in a recoverable way. ResolutionError<'a>\n     /// isn't something that can be returned because it can't be made to live that long,\n     /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,\n@@ -1800,15 +1800,15 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     }\n }\n \n-impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n+impl<'a> Resolver<'a> {\n     pub fn new(session: &'a Session,\n                cstore: &'a CStore,\n                krate: &Crate,\n                crate_name: &str,\n                make_glob_map: MakeGlobMap,\n-               crate_loader: &'a mut CrateLoader<'crateloader>,\n+               crate_loader: &'a mut CrateLoader<'a>,\n                arenas: &'a ResolverArenas<'a>)\n-               -> Resolver<'a, 'crateloader> {\n+               -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let root_module_kind = ModuleKind::Def(Def::Mod(root_def_id), keywords::Invalid.name());\n         let graph_root = arenas.alloc_module(ModuleData {"}, {"sha": "32f0d84342eddee8811c9fc8cde793ddf1589523", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -121,7 +121,7 @@ fn sub_namespace_match(candidate: Option<MacroKind>, requirement: Option<MacroKi\n     candidate.is_none() || requirement.is_none() || candidate == requirement\n }\n \n-impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n+impl<'a> base::Resolver for Resolver<'a> {\n     fn next_node_id(&mut self) -> ast::NodeId {\n         self.session.next_node_id()\n     }\n@@ -139,11 +139,11 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n     }\n \n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> {\n-        struct EliminateCrateVar<'b, 'a: 'b, 'crateloader: 'a>(\n-            &'b mut Resolver<'a, 'crateloader>, Span\n+        struct EliminateCrateVar<'b, 'a: 'b>(\n+            &'b mut Resolver<'a>, Span\n         );\n \n-        impl<'a, 'b, 'crateloader> Folder for EliminateCrateVar<'a, 'b, 'crateloader> {\n+        impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n             fn fold_path(&mut self, path: ast::Path) -> ast::Path {\n                 match self.fold_qpath(None, path) {\n                     (None, path) => path,\n@@ -290,7 +290,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n     }\n }\n \n-impl<'a, 'cl> Resolver<'a, 'cl> {\n+impl<'a> Resolver<'a> {\n     pub fn dummy_parent_scope(&self) -> ParentScope<'a> {\n         self.invoc_parent_scope(Mark::root(), Vec::new())\n     }"}, {"sha": "7b55ee9ce3336200053770dd44b8aeaeea2c3a46", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -134,7 +134,7 @@ impl<'a> NameResolution<'a> {\n     }\n }\n \n-impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n+impl<'a> Resolver<'a> {\n     fn resolution(&self, module: Module<'a>, ident: Ident, ns: Namespace)\n                   -> &'a RefCell<NameResolution<'a>> {\n         *module.resolutions.borrow_mut().entry((ident.modern(), ns))\n@@ -541,7 +541,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     // If the resolution becomes a success, define it in the module's glob importers.\n     fn update_resolution<T, F>(&mut self, module: Module<'a>, ident: Ident, ns: Namespace, f: F)\n                                -> T\n-        where F: FnOnce(&mut Resolver<'a, 'crateloader>, &mut NameResolution<'a>) -> T\n+        where F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T\n     {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n         // during which the resolution might end up getting re-defined via a glob cycle.\n@@ -592,30 +592,30 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     }\n }\n \n-pub struct ImportResolver<'a, 'b: 'a, 'c: 'a + 'b> {\n-    pub resolver: &'a mut Resolver<'b, 'c>,\n+pub struct ImportResolver<'a, 'b: 'a> {\n+    pub resolver: &'a mut Resolver<'b>,\n }\n \n-impl<'a, 'b: 'a, 'c: 'a + 'b> ::std::ops::Deref for ImportResolver<'a, 'b, 'c> {\n-    type Target = Resolver<'b, 'c>;\n-    fn deref(&self) -> &Resolver<'b, 'c> {\n+impl<'a, 'b: 'a> ::std::ops::Deref for ImportResolver<'a, 'b> {\n+    type Target = Resolver<'b>;\n+    fn deref(&self) -> &Resolver<'b> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a, 'c: 'a + 'b> ::std::ops::DerefMut for ImportResolver<'a, 'b, 'c> {\n-    fn deref_mut(&mut self) -> &mut Resolver<'b, 'c> {\n+impl<'a, 'b: 'a> ::std::ops::DerefMut for ImportResolver<'a, 'b> {\n+    fn deref_mut(&mut self) -> &mut Resolver<'b> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a, 'c: 'a + 'b> ty::DefIdTree for &'a ImportResolver<'a, 'b, 'c> {\n+impl<'a, 'b: 'a> ty::DefIdTree for &'a ImportResolver<'a, 'b> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         self.resolver.parent(id)\n     }\n }\n \n-impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n+impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     // Import resolution\n     //\n     // This is a fixed-point algorithm. We resolve imports until our efforts"}, {"sha": "2d879fc0f3048b935c714f7c672e43da44d94217", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -17,13 +17,13 @@ use self::def_ctor::{get_def_from_def_id, get_def_from_node_id};\n \n use super::*;\n \n-pub struct AutoTraitFinder<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub struct AutoTraitFinder<'a, 'tcx: 'a, 'rcx: 'a> {\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n     pub f: auto::AutoTraitFinder<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n-    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n+    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> Self {\n         let f = auto::AutoTraitFinder::new(&cx.tcx);\n \n         AutoTraitFinder { cx, f }"}, {"sha": "ea8f892016c6da647380c4809911b84948f5bcbc", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -21,12 +21,12 @@ use super::*;\n \n use self::def_ctor::{get_def_from_def_id, get_def_from_node_id};\n \n-pub struct BlanketImplFinder<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub struct BlanketImplFinder<'a, 'tcx: 'a, 'rcx: 'a> {\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n-    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> BlanketImplFinder <'a, 'tcx, 'rcx> {\n+    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> Self {\n         BlanketImplFinder { cx }\n     }\n "}, {"sha": "8e8218684235f08442234d39f142ef5637744ebc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -149,7 +149,7 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n         use ::visit_lib::LibEmbargoVisitor;\n "}, {"sha": "fff2eff4058223cc75f52f618b7810f817907656", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -55,9 +55,9 @@ pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n-pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub resolver: &'a RefCell<resolve::Resolver<'rcx, 'cstore>>,\n+    pub resolver: &'a RefCell<resolve::Resolver<'rcx>>,\n     /// The stack of module NodeIds up till this point\n     pub crate_name: Option<String>,\n     pub cstore: Rc<CStore>,\n@@ -88,7 +88,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     pub all_traits: Vec<DefId>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocContext<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n     pub fn sess(&self) -> &session::Session {\n         &self.tcx.sess\n     }"}, {"sha": "7df8cfd97215d01e379db6497036f8aba45f3e70", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -53,14 +53,14 @@ enum PathKind {\n     Type,\n }\n \n-struct LinkCollector<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+struct LinkCollector<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n     mod_ids: Vec<NodeId>,\n     is_nightly_build: bool,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n-    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> LinkCollector<'a, 'tcx, 'rcx> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx>) -> Self {\n         LinkCollector {\n             cx,\n             mod_ids: Vec::new(),\n@@ -213,7 +213,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     }\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocFolder for LinkCollector<'a, 'tcx, 'rcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_node_id = if item.is_mod() {\n             if let Some(id) = self.cx.tcx.hir().as_local_node_id(item.def_id) {"}, {"sha": "80a906c9f435c28bc8e4e09fb11734546a784f36", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -147,21 +147,21 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext) -> Crate {\n     krate\n }\n \n-struct SyntheticImplCollector<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+struct SyntheticImplCollector<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n     impls: Vec<Item>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> SyntheticImplCollector<'a, 'tcx, 'rcx, 'cstore> {\n-    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> SyntheticImplCollector<'a, 'tcx, 'rcx> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx>) -> Self {\n         SyntheticImplCollector {\n             cx,\n             impls: Vec::new(),\n         }\n     }\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for SyntheticImplCollector<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocFolder for SyntheticImplCollector<'a, 'tcx, 'rcx> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         if i.is_struct() || i.is_enum() || i.is_union() {\n             if let (Some(node_id), Some(name)) ="}, {"sha": "aca371f92ac9edfffb5811dda8d5150c62ed001c", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -361,8 +361,8 @@ impl fold::DocFolder for ImportStripper {\n     }\n }\n \n-pub fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a>(\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n     dox: &str,\n     item: &Item,\n     check_missing_code: bool,"}, {"sha": "cd8e039764c4b14181f93a540c465cc609b2e858", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -19,12 +19,12 @@ pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass =\n     Pass::early(\"check-private-items-doc-tests\", check_private_items_doc_tests,\n                 \"check private items doc tests\");\n \n-struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n-    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+impl<'a, 'tcx, 'rcx> PrivateItemDocTestLinter<'a, 'tcx, 'rcx> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx>) -> Self {\n         PrivateItemDocTestLinter {\n             cx,\n         }\n@@ -37,7 +37,7 @@ pub fn check_private_items_doc_tests(krate: Crate, cx: &DocContext) -> Crate {\n     coll.fold_crate(krate)\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx, 'rcx> {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n         let cx = self.cx;\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);"}, {"sha": "917966423af6927d32bd0634d96d8de64048e477", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -36,21 +36,21 @@ use doctree::*;\n // Also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?.\n \n-pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n     view_item_stack: FxHashSet<ast::NodeId>,\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n     inside_public_path: bool,\n     exact_paths: Option<FxHashMap<DefId, Vec<String>>>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     pub fn new(\n-        cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>\n-    ) -> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+        cx: &'a core::DocContext<'a, 'tcx, 'rcx>\n+    ) -> RustdocVisitor<'a, 'tcx, 'rcx> {\n         // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet::default();\n         stack.insert(ast::CRATE_NODE_ID);"}, {"sha": "391a222f5f503ba1ccda342bd59e68d07cf07b52", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7de869ea9f7fc9f6f347905c3f715a62e4080e/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=ca7de869ea9f7fc9f6f347905c3f715a62e4080e", "patch": "@@ -22,8 +22,8 @@ use clean::{AttributesExt, NestedAttributesExt};\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e., `doc(hidden)`)\n-pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n-    cx: &'a ::core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>,\n     // Accessibility levels for reachable nodes\n     access_levels: RefMut<'a, AccessLevels<DefId>>,\n     // Previous accessibility level, None means unreachable\n@@ -32,10 +32,10 @@ pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     visited_mods: FxHashSet<DefId>,\n }\n \n-impl<'a, 'tcx, 'rcx, 'cstore> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+impl<'a, 'tcx, 'rcx> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n     pub fn new(\n-        cx: &'a ::core::DocContext<'a, 'tcx, 'rcx, 'cstore>\n-    ) -> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+        cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>\n+    ) -> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n         LibEmbargoVisitor {\n             cx,\n             access_levels: RefMut::map(cx.renderinfo.borrow_mut(), |ri| &mut ri.access_levels),"}]}