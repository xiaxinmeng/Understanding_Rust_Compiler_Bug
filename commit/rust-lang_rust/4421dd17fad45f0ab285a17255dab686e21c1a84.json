{"sha": "4421dd17fad45f0ab285a17255dab686e21c1a84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MjFkZDE3ZmFkNDVmMGFiMjg1YTE3MjU1ZGFiNjg2ZTIxYzFhODQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-03-06T11:12:25Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-08-15T06:44:36Z"}, "message": "Return the canonicalized query from type ops", "tree": {"sha": "294d7511cf4f44c861e217f36a87c388842bbe8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/294d7511cf4f44c861e217f36a87c388842bbe8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4421dd17fad45f0ab285a17255dab686e21c1a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4421dd17fad45f0ab285a17255dab686e21c1a84", "html_url": "https://github.com/rust-lang/rust/commit/4421dd17fad45f0ab285a17255dab686e21c1a84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4421dd17fad45f0ab285a17255dab686e21c1a84/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842f0590dbeacf3480c09915bd36efacf0bd647a", "url": "https://api.github.com/repos/rust-lang/rust/commits/842f0590dbeacf3480c09915bd36efacf0bd647a", "html_url": "https://github.com/rust-lang/rust/commit/842f0590dbeacf3480c09915bd36efacf0bd647a"}], "stats": {"total": 92, "additions": 53, "deletions": 39}, "files": [{"sha": "012d67255d13bd6b96171cbb0a48104d6c41eb68", "filename": "compiler/rustc_mir/src/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=4421dd17fad45f0ab285a17255dab686e21c1a84", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n+use type_op::TypeOpOutput;\n \n use crate::borrow_check::{\n     nll::ToRegionVid,\n@@ -255,7 +256,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n         let constraint_sets: Vec<_> = unnormalized_input_output_tys\n             .flat_map(|ty| {\n                 debug!(\"build: input_or_output={:?}\", ty);\n-                let (ty, constraints1) = self\n+                let TypeOpOutput { output: ty, constraints: constraints1, .. } = self\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))\n                     .fully_perform(self.infcx)\n@@ -264,7 +265,11 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                             .tcx\n                             .sess\n                             .delay_span_bug(DUMMY_SP, &format!(\"failed to normalize {:?}\", ty));\n-                        (self.infcx.tcx.ty_error(), None)\n+                        TypeOpOutput {\n+                            output: self.infcx.tcx.ty_error(),\n+                            constraints: None,\n+                            canonicalized_query: None,\n+                        }\n                     });\n                 let constraints2 = self.add_implied_bounds(ty);\n                 normalized_inputs_and_output.push(ty);\n@@ -317,7 +322,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n     /// from this local.\n     fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<QueryRegionConstraints<'tcx>>> {\n         debug!(\"add_implied_bounds(ty={:?})\", ty);\n-        let (bounds, constraints) = self\n+        let TypeOpOutput { output: bounds, constraints, .. } = self\n             .param_env\n             .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n             .fully_perform(self.infcx)"}, {"sha": "e411f1dc10889d901884a04cd46a711087cdb118", "filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Ftrace.rs?ref=4421dd17fad45f0ab285a17255dab686e21c1a84", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir::{BasicBlock, Body, ConstraintCategory, Local, Location};\n use rustc_middle::ty::{Ty, TypeFoldable};\n use rustc_trait_selection::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n-use rustc_trait_selection::traits::query::type_op::TypeOp;\n+use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n use std::rc::Rc;\n \n use crate::dataflow::impls::MaybeInitializedPlaces;\n@@ -519,9 +519,9 @@ impl LivenessContext<'_, '_, '_, 'tcx> {\n         debug!(\"compute_drop_data(dropped_ty={:?})\", dropped_ty,);\n \n         let param_env = typeck.param_env;\n-        let (dropck_result, region_constraint_data) =\n+        let TypeOpOutput { output, constraints, .. } =\n             param_env.and(DropckOutlives::new(dropped_ty)).fully_perform(typeck.infcx).unwrap();\n \n-        DropData { dropck_result, region_constraint_data }\n+        DropData { dropck_result: output, region_constraint_data: constraints }\n     }\n }"}, {"sha": "e7cd98e1cc983be167fbed7046069153a7241c8e", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=4421dd17fad45f0ab285a17255dab686e21c1a84", "patch": "@@ -40,6 +40,7 @@ use rustc_trait_selection::traits::query::type_op;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations};\n+use type_op::TypeOpOutput;\n \n use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::MoveData;\n@@ -1113,13 +1114,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory,\n         op: impl type_op::TypeOp<'tcx, Output = R>,\n     ) -> Fallible<R> {\n-        let (r, opt_data) = op.fully_perform(self.infcx)?;\n+        let TypeOpOutput { output, constraints, .. } = op.fully_perform(self.infcx)?;\n \n-        if let Some(data) = &opt_data {\n+        if let Some(data) = &constraints {\n             self.push_region_constraints(locations, category, data);\n         }\n \n-        Ok(r)\n+        Ok(output)\n     }\n \n     fn push_region_constraints("}, {"sha": "b5398f8a4353b222599a49f008bb91a8ccc47035", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=4421dd17fad45f0ab285a17255dab686e21c1a84", "patch": "@@ -1,13 +1,13 @@\n-use crate::infer::{InferCtxt, InferOk};\n-use crate::traits::query::Fallible;\n-use std::fmt;\n-\n use crate::infer::canonical::query_response;\n-use crate::infer::canonical::QueryRegionConstraints;\n+use crate::infer::{InferCtxt, InferOk};\n use crate::traits::engine::TraitEngineExt as _;\n+use crate::traits::query::type_op::TypeOpOutput;\n+use crate::traits::query::Fallible;\n use crate::traits::{ObligationCause, TraitEngine};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_span::source_map::DUMMY_SP;\n+\n+use std::fmt;\n use std::rc::Rc;\n \n pub struct CustomTypeOp<F, G> {\n@@ -35,10 +35,7 @@ where\n     /// Processes the operation and all resulting obligations,\n     /// returning the final result along with any region constraints\n     /// (they will be given over to the NLL region solver).\n-    fn fully_perform(\n-        self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n+    fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n         if cfg!(debug_assertions) {\n             info!(\"fully_perform({:?})\", self);\n         }\n@@ -58,10 +55,10 @@ where\n \n /// Executes `op` and then scrapes out all the \"old style\" region\n /// constraints that result, creating query-region-constraints.\n-fn scrape_region_constraints<'tcx, R>(\n+fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     op: impl FnOnce() -> Fallible<InferOk<'tcx, R>>,\n-) -> Fallible<(R, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n+) -> Fallible<TypeOpOutput<'tcx, Op>> {\n     let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n     let dummy_body_id = ObligationCause::dummy().body_id;\n \n@@ -101,8 +98,12 @@ fn scrape_region_constraints<'tcx, R>(\n     );\n \n     if region_constraints.is_empty() {\n-        Ok((value, None))\n+        Ok(TypeOpOutput { output: value, constraints: None, canonicalized_query: None })\n     } else {\n-        Ok((value, Some(Rc::new(region_constraints))))\n+        Ok(TypeOpOutput {\n+            output: value,\n+            constraints: Some(Rc::new(region_constraints)),\n+            canonicalized_query: None,\n+        })\n     }\n }"}, {"sha": "3863dd61cefc09894f542ac784cd5f3d8b94f645", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=4421dd17fad45f0ab285a17255dab686e21c1a84", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }"}, {"sha": "12ca3faeb379785e34b8f3b1c3e55ab6b3726743", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4421dd17fad45f0ab285a17255dab686e21c1a84/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=4421dd17fad45f0ab285a17255dab686e21c1a84", "patch": "@@ -4,6 +4,7 @@ use crate::infer::canonical::{\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::query::Fallible;\n use crate::traits::ObligationCause;\n+use rustc_infer::infer::canonical::Canonical;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n use std::fmt;\n@@ -30,10 +31,18 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n     /// Processes the operation and all resulting obligations,\n     /// returning the final result along with any region constraints\n     /// (they will be given over to the NLL region solver).\n-    fn fully_perform(\n-        self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<QueryRegionConstraints<'tcx>>>)>;\n+    fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>>;\n+}\n+\n+/// The output from performing a type op\n+pub struct TypeOpOutput<'tcx, Op: TypeOp<'tcx>> {\n+    /// The output from the type op.\n+    pub output: Op::Output,\n+    /// Any region constraints from performing the type op.\n+    pub constraints: Option<Rc<QueryRegionConstraints<'tcx>>>,\n+    /// The canonicalized form of the query.\n+    /// This for error reporting to be able to rerun the query.\n+    pub canonicalized_query: Option<Canonical<'tcx, Op>>,\n }\n \n /// \"Query type ops\" are type ops that are implemented using a\n@@ -45,7 +54,7 @@ pub trait TypeOp<'tcx>: Sized + fmt::Debug {\n /// which produces the resulting query region constraints.\n ///\n /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html\n-pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n+pub trait QueryTypeOp<'tcx>: fmt::Debug + Copy + TypeFoldable<'tcx> + 'tcx {\n     type QueryResponse: TypeFoldable<'tcx>;\n \n     /// Give query the option for a simple fast path that never\n@@ -71,9 +80,9 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n         query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'_, 'tcx>,\n         output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,\n-    ) -> Fallible<Self::QueryResponse> {\n+    ) -> Fallible<(Self::QueryResponse, Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>)> {\n         if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {\n-            return Ok(result);\n+            return Ok((result, None));\n         }\n \n         // FIXME(#33684) -- We need to use\n@@ -101,14 +110,14 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n         // create obligations. In that case, we have to go\n         // fulfill them. We do this via a (recursive) query.\n         for obligation in obligations {\n-            let () = ProvePredicate::fully_perform_into(\n+            let ((), _) = ProvePredicate::fully_perform_into(\n                 obligation.param_env.and(ProvePredicate::new(obligation.predicate)),\n                 infcx,\n                 output_query_region_constraints,\n             )?;\n         }\n \n-        Ok(value)\n+        Ok((value, Some(canonical_self)))\n     }\n }\n \n@@ -118,18 +127,16 @@ where\n {\n     type Output = Q::QueryResponse;\n \n-    fn fully_perform(\n-        self,\n-        infcx: &InferCtxt<'_, 'tcx>,\n-    ) -> Fallible<(Self::Output, Option<Rc<QueryRegionConstraints<'tcx>>>)> {\n+    fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n         let mut region_constraints = QueryRegionConstraints::default();\n-        let r = Q::fully_perform_into(self, infcx, &mut region_constraints)?;\n+        let (output, canonicalized_query) =\n+            Q::fully_perform_into(self, infcx, &mut region_constraints)?;\n \n         // Promote the final query-region-constraints into a\n         // (optional) ref-counted vector:\n-        let opt_qrc =\n+        let region_constraints =\n             if region_constraints.is_empty() { None } else { Some(Rc::new(region_constraints)) };\n \n-        Ok((r, opt_qrc))\n+        Ok(TypeOpOutput { output, constraints: region_constraints, canonicalized_query })\n     }\n }"}]}