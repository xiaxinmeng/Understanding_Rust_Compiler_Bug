{"sha": "94e047ba3bff6a789f51f89b2e6fd880102744ad", "node_id": "C_kwDOAAsO6NoAKDk0ZTA0N2JhM2JmZjZhNzg5ZjUxZjg5YjJlNmZkODgwMTAyNzQ0YWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-11T17:36:16Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-22T01:36:41Z"}, "message": "Check generics parity between impl and trait before collecting RPITITs", "tree": {"sha": "20a3a8ed54006265b2fff951324c3becdfb52f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a3a8ed54006265b2fff951324c3becdfb52f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94e047ba3bff6a789f51f89b2e6fd880102744ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94e047ba3bff6a789f51f89b2e6fd880102744ad", "html_url": "https://github.com/rust-lang/rust/commit/94e047ba3bff6a789f51f89b2e6fd880102744ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94e047ba3bff6a789f51f89b2e6fd880102744ad/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a53cdb4695b71cb9ee39959df88542056479cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a53cdb4695b71cb9ee39959df88542056479cd", "html_url": "https://github.com/rust-lang/rust/commit/28a53cdb4695b71cb9ee39959df88542056479cd"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "110ecd2f56b559a36249ce2d528c45b4bd7c35a4", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94e047ba3bff6a789f51f89b2e6fd880102744ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e047ba3bff6a789f51f89b2e6fd880102744ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=94e047ba3bff6a789f51f89b2e6fd880102744ad", "patch": "@@ -51,7 +51,7 @@ pub(crate) fn compare_impl_method<'tcx>(\n         return;\n     }\n \n-    if let Err(_) = compare_number_of_generics(tcx, impl_m, impl_m_span, trait_m, trait_item_span) {\n+    if let Err(_) = compare_number_of_generics(tcx, impl_m, trait_m, trait_item_span) {\n         return;\n     }\n \n@@ -352,6 +352,10 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     let impl_trait_ref = tcx.impl_trait_ref(impl_m.impl_container(tcx).unwrap()).unwrap();\n     let param_env = tcx.param_env(def_id);\n \n+    // First, check a few of the same thing as `compare_impl_method`, just so we don't ICE during substitutions later.\n+    compare_number_of_generics(tcx, impl_m, trait_m, tcx.hir().span_if_local(impl_m.def_id))?;\n+    compare_generic_param_kinds(tcx, impl_m, trait_m)?;\n+\n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n     let impl_m_hir_id = tcx.hir().local_def_id_to_hir_id(impl_m.def_id.expect_local());\n@@ -376,6 +380,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     let infcx = &tcx.infer_ctxt().build();\n     let ocx = ObligationCtxt::new(infcx);\n \n+    // Normalize the impl signature with fresh variables for lifetime inference.\n     let norm_cause = ObligationCause::misc(return_span, impl_m_hir_id);\n     let impl_sig = ocx.normalize(\n         norm_cause.clone(),\n@@ -388,6 +393,10 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     );\n     let impl_return_ty = impl_sig.output();\n \n+    // Normalize the trait signature with liberated bound vars, passing it through\n+    // the ImplTraitInTraitCollector, which gathers all of the RPITITs and replaces\n+    // them with inference variables.\n+    // We will use these inference variables to collect the hidden types of RPITITs.\n     let mut collector = ImplTraitInTraitCollector::new(&ocx, return_span, param_env, impl_m_hir_id);\n     let unnormalized_trait_sig = tcx\n         .liberate_late_bound_regions(\n@@ -922,7 +931,6 @@ fn compare_self_type<'tcx>(\n fn compare_number_of_generics<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_: &ty::AssocItem,\n-    _impl_span: Span,\n     trait_: &ty::AssocItem,\n     trait_span: Option<Span>,\n ) -> Result<(), ErrorGuaranteed> {\n@@ -1489,7 +1497,7 @@ pub(crate) fn compare_ty_impl<'tcx>(\n     debug!(\"compare_impl_type(impl_trait_ref={:?})\", impl_trait_ref);\n \n     let _: Result<(), ErrorGuaranteed> = (|| {\n-        compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n+        compare_number_of_generics(tcx, impl_ty, trait_ty, trait_item_span)?;\n \n         compare_generic_param_kinds(tcx, impl_ty, trait_ty)?;\n "}, {"sha": "608006203d90b43252db4d98a408b619aec8d4fd", "filename": "src/test/ui/impl-trait/in-trait/trait-more-generics-than-impl.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94e047ba3bff6a789f51f89b2e6fd880102744ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e047ba3bff6a789f51f89b2e6fd880102744ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs?ref=94e047ba3bff6a789f51f89b2e6fd880102744ad", "patch": "@@ -0,0 +1,18 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+struct S;\n+\n+trait Foo {\n+    fn bar<T>() -> impl Sized;\n+}\n+\n+impl Foo for S {\n+    fn bar() -> impl Sized {}\n+    //~^ ERROR method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n+    //~| ERROR method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n+}\n+\n+fn main() {\n+    S::bar();\n+}"}, {"sha": "acde1f7654b76d9c32f7188068da33b7d8247962", "filename": "src/test/ui/impl-trait/in-trait/trait-more-generics-than-impl.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/94e047ba3bff6a789f51f89b2e6fd880102744ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94e047ba3bff6a789f51f89b2e6fd880102744ad/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.stderr?ref=94e047ba3bff6a789f51f89b2e6fd880102744ad", "patch": "@@ -0,0 +1,21 @@\n+error[E0049]: method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n+  --> $DIR/trait-more-generics-than-impl.rs:11:11\n+   |\n+LL |     fn bar<T>() -> impl Sized;\n+   |            - expected 1 type parameter\n+...\n+LL |     fn bar() -> impl Sized {}\n+   |           ^ found 0 type parameters\n+\n+error[E0049]: method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n+  --> $DIR/trait-more-generics-than-impl.rs:11:11\n+   |\n+LL |     fn bar<T>() -> impl Sized;\n+   |            - expected 1 type parameter\n+...\n+LL |     fn bar() -> impl Sized {}\n+   |           ^ found 0 type parameters\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0049`."}]}