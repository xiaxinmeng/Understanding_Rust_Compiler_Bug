{"sha": "ed318dd991cb5356fe299aa8fc8c3078dcc614d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzE4ZGQ5OTFjYjUzNTZmZTI5OWFhOGZjOGMzMDc4ZGNjNjE0ZDM=", "commit": {"author": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2018-04-23T15:00:08Z"}, "committer": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2018-04-23T15:02:01Z"}, "message": "make rustdoc test follow the jobserver limit of threadsfix that to many threads is executing at the same timewhen rustdoc test is executed.", "tree": {"sha": "dd080b03357e93ce6d20381019c67b8da1fcaff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd080b03357e93ce6d20381019c67b8da1fcaff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed318dd991cb5356fe299aa8fc8c3078dcc614d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed318dd991cb5356fe299aa8fc8c3078dcc614d3", "html_url": "https://github.com/rust-lang/rust/commit/ed318dd991cb5356fe299aa8fc8c3078dcc614d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed318dd991cb5356fe299aa8fc8c3078dcc614d3/comments", "author": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b78853b6fd9597dc42ccf044fed805851d0a6f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/b78853b6fd9597dc42ccf044fed805851d0a6f91", "html_url": "https://github.com/rust-lang/rust/commit/b78853b6fd9597dc42ccf044fed805851d0a6f91"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "e2be51b552ae8c639548b12e9360fa9d21d8502d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed318dd991cb5356fe299aa8fc8c3078dcc614d3/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed318dd991cb5356fe299aa8fc8c3078dcc614d3/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ed318dd991cb5356fe299aa8fc8c3078dcc614d3", "patch": "@@ -156,7 +156,7 @@ pub struct Session {\n \n     /// Loaded up early on in the initialization of this `Session` to avoid\n     /// false positives about a job server in our environment.\n-    pub jobserver_from_env: Option<Client>,\n+    pub jobserver: Client,\n \n     /// Metadata about the allocators for the current crate being compiled\n     pub has_global_allocator: Once<bool>,\n@@ -1128,14 +1128,23 @@ pub fn build_session_(\n         // positives, or in other words we try to execute this before we open\n         // any file descriptors ourselves.\n         //\n+        // Pick a \"reasonable maximum\" if we don't otherwise have\n+        // a jobserver in our environment, capping out at 32 so we\n+        // don't take everything down by hogging the process run queue.\n+        // The fixed number is used to have deterministic compilation\n+        // across machines.\n+        //\n         // Also note that we stick this in a global because there could be\n         // multiple `Session` instances in this process, and the jobserver is\n         // per-process.\n-        jobserver_from_env: unsafe {\n-            static mut GLOBAL_JOBSERVER: *mut Option<Client> = 0 as *mut _;\n+        jobserver: unsafe {\n+            static mut GLOBAL_JOBSERVER: *mut Client = 0 as *mut _;\n             static INIT: std::sync::Once = std::sync::ONCE_INIT;\n             INIT.call_once(|| {\n-                GLOBAL_JOBSERVER = Box::into_raw(Box::new(Client::from_env()));\n+                let client = Client::from_env().unwrap_or_else(|| {\n+                    Client::new(32).expect(\"failed to create jobserver\")\n+                });\n+                GLOBAL_JOBSERVER = Box::into_raw(Box::new(client));\n             });\n             (*GLOBAL_JOBSERVER).clone()\n         },"}, {"sha": "613a07cd2695dadf2489ad8472ba6d321167ee9e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed318dd991cb5356fe299aa8fc8c3078dcc614d3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed318dd991cb5356fe299aa8fc8c3078dcc614d3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ed318dd991cb5356fe299aa8fc8c3078dcc614d3", "patch": "@@ -1007,13 +1007,6 @@ pub fn start_async_translation(tcx: TyCtxt,\n     metadata_config.time_passes = false;\n     allocator_config.time_passes = false;\n \n-    let client = sess.jobserver_from_env.clone().unwrap_or_else(|| {\n-        // Pick a \"reasonable maximum\" if we don't otherwise have a jobserver in\n-        // our environment, capping out at 32 so we don't take everything down\n-        // by hogging the process run queue.\n-        Client::new(32).expect(\"failed to create jobserver\")\n-    });\n-\n     let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n     let (trans_worker_send, trans_worker_receive) = channel();\n \n@@ -1023,7 +1016,7 @@ pub fn start_async_translation(tcx: TyCtxt,\n                                                   trans_worker_send,\n                                                   coordinator_receive,\n                                                   total_cgus,\n-                                                  client,\n+                                                  sess.jobserver.clone(),\n                                                   time_graph.clone(),\n                                                   Arc::new(modules_config),\n                                                   Arc::new(metadata_config),"}]}