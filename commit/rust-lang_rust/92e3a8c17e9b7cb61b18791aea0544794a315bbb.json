{"sha": "92e3a8c17e9b7cb61b18791aea0544794a315bbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZTNhOGMxN2U5YjdjYjYxYjE4NzkxYWVhMDU0NDc5NGEzMTViYmI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-07T01:13:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-07T01:13:52Z"}, "message": "rustc: reuse const vals, translate fn paths as consts. Close #2530.", "tree": {"sha": "237f14d900625d7f3f8b10f9452d5d86e30f128e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/237f14d900625d7f3f8b10f9452d5d86e30f128e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92e3a8c17e9b7cb61b18791aea0544794a315bbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92e3a8c17e9b7cb61b18791aea0544794a315bbb", "html_url": "https://github.com/rust-lang/rust/commit/92e3a8c17e9b7cb61b18791aea0544794a315bbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92e3a8c17e9b7cb61b18791aea0544794a315bbb/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0ed151539cddb1c191f67f9f9597942919d44eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ed151539cddb1c191f67f9f9597942919d44eb", "html_url": "https://github.com/rust-lang/rust/commit/b0ed151539cddb1c191f67f9f9597942919d44eb"}], "stats": {"total": 105, "additions": 62, "deletions": 43}, "files": [{"sha": "30b25403a4ec9f9f5607514412c0e2ebf286ee94", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=92e3a8c17e9b7cb61b18791aea0544794a315bbb", "patch": "@@ -96,18 +96,16 @@ struct Guard<T, U:Copy> {\n mod test {\n \n     fn sadness_key(_x: @Handler<int,int>) { }\n+    const sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n+\n     fn trouble(i: int) {\n-        // Condition should work as a const, just limitations in consts.\n-        let sadness_condition : Condition<int,int> =\n-            Condition { key: sadness_key };\n         debug!(\"trouble: raising conition\");\n         let j = sadness_condition.raise(&i);\n         debug!(\"trouble: handler recovered with %d\", j);\n     }\n \n     fn nested_trap_test_inner() {\n-        let sadness_condition : Condition<int,int> =\n-            Condition { key: sadness_key };\n \n         let mut inner_trapped = false;\n \n@@ -126,9 +124,6 @@ mod test {\n     #[test]\n     fn nested_trap_test_outer() {\n \n-        let sadness_condition : Condition<int,int> =\n-            Condition { key: sadness_key };\n-\n         let mut outer_trapped = false;\n \n         do sadness_condition.trap(|_j| {\n@@ -144,8 +139,6 @@ mod test {\n     }\n \n     fn nested_reraise_trap_test_inner() {\n-        let sadness_condition : Condition<int,int> =\n-            Condition { key: sadness_key };\n \n         let mut inner_trapped = false;\n \n@@ -166,9 +159,6 @@ mod test {\n     #[test]\n     fn nested_reraise_trap_test_outer() {\n \n-        let sadness_condition : Condition<int,int> =\n-            Condition { key: sadness_key };\n-\n         let mut outer_trapped = false;\n \n         do sadness_condition.trap(|_j| {\n@@ -184,8 +174,6 @@ mod test {\n \n     #[test]\n     fn test_default() {\n-        let sadness_condition : Condition<int,int> =\n-            Condition { key: sadness_key };\n \n         let mut trapped = false;\n "}, {"sha": "6eb592942e165a2191dc37617ef1e5548a9fb29a", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=92e3a8c17e9b7cb61b18791aea0544794a315bbb", "patch": "@@ -82,19 +82,30 @@ fn check_expr(sess: Session, def_map: resolve::DefMap,\n                               ~\"` in a constant expression\");\n             }\n           }\n-          expr_path(_) => {\n+          expr_path(pth) => {\n+            // NB: In the future you might wish to relax this slightly\n+            // to handle on-demand instantiation of functions via\n+            // foo::<bar> in a const. Currently that is only done on\n+            // a path in trans::callee that only works in block contexts.\n+            if pth.types.len() != 0 {\n+                sess.span_err(\n+                    e.span, ~\"paths in constants may only refer to \\\n+                              items without type parameters\");\n+            }\n             match def_map.find(e.id) {\n-              Some(def_const(def_id)) => {\n+              Some(def_const(def_id)) |\n+                Some(def_fn(def_id, _)) => {\n                 if !ast_util::is_local(def_id) {\n                     sess.span_err(\n                         e.span, ~\"paths in constants may only refer to \\\n-                                 crate-local constants\");\n+                                 crate-local constants or functions\");\n                 }\n               }\n               _ => {\n                 sess.span_err(\n                     e.span,\n-                    ~\"paths in constants may only refer to constants\");\n+                    ~\"paths in constants may only refer to \\\n+                      constants or functions\");\n               }\n             }\n           }"}, {"sha": "a2d74dc92dfd69e38bd4014d75e4f2fa86d68307", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=92e3a8c17e9b7cb61b18791aea0544794a315bbb", "patch": "@@ -2688,6 +2688,7 @@ fn trans_crate(sess: session::Session,\n           vtables: map::HashMap(),\n           const_cstr_cache: HashMap(),\n           const_globals: HashMap(),\n+          const_values: HashMap(),\n           module_data: HashMap(),\n           lltypes: ty::new_ty_hash(),\n           names: new_namegen(sess.parse_sess.interner),"}, {"sha": "36d6bb9258b1d16b184edc4498affd07e8d27ad1", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=92e3a8c17e9b7cb61b18791aea0544794a315bbb", "patch": "@@ -140,10 +140,19 @@ type crate_ctxt = {\n      vtables: HashMap<mono_id, ValueRef>,\n      // Cache of constant strings,\n      const_cstr_cache: HashMap<~str, ValueRef>,\n-     // Reverse-direction for const ptrs cast from globals,\n-     // since the ptr -> init association is lost any\n-     // time a GlobalValue is cast.\n+\n+     // Reverse-direction for const ptrs cast from globals.\n+     // Key is an int, cast from a ValueRef holding a *T,\n+     // Val is a ValueRef holding a *[T].\n+     //\n+     // Needed because LLVM loses pointer->pointee association\n+     // when we ptrcast, and we have to ptrcast during translation\n+     // of a [T] const because we form a slice, a [*T,int] pair, not\n+     // a pointer to an LLVM array type.\n      const_globals: HashMap<int, ValueRef>,\n+\n+     // Cache of emitted const values\n+     const_values: HashMap<ast::node_id, ValueRef>,\n      module_data: HashMap<~str, ValueRef>,\n      lltypes: HashMap<ty::t, TypeRef>,\n      names: namegen,"}, {"sha": "23ec0b6a9c184dbd4bba31498b2aa55d2d0763c0", "filename": "src/rustc/middle/trans/consts.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=92e3a8c17e9b7cb61b18791aea0544794a315bbb", "patch": "@@ -28,10 +28,6 @@ fn const_lit(cx: @crate_ctxt, e: @ast::expr, lit: ast::lit)\n     }\n }\n \n-// FIXME (#2530): this should do some structural hash-consing to avoid\n-// duplicate constants. I think. Maybe LLVM has a magical mode that does so\n-// later on?\n-\n fn const_ptrcast(cx: @crate_ctxt, a: ValueRef, t: TypeRef) -> ValueRef {\n     let b = llvm::LLVMConstPointerCast(a, T_ptr(t));\n     assert cx.const_globals.insert(b as int, a);\n@@ -341,24 +337,29 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                                 ~\"bad const-slice expr\")\n         }\n       }\n-      ast::expr_path(_) => {\n+      ast::expr_path(pth) => {\n+        assert pth.types.len() == 0;\n         match cx.tcx.def_map.find(e.id) {\n+          Some(ast::def_fn(def_id, _)) => {\n+              assert ast_util::is_local(def_id);\n+              let f = base::get_item_val(cx, def_id.node);\n+              C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n+          }\n           Some(ast::def_const(def_id)) => {\n-            // Don't know how to handle external consts\n             assert ast_util::is_local(def_id);\n-            match cx.tcx.items.get(def_id.node) {\n-              ast_map::node_item(@{\n-                node: ast::item_const(_, subexpr), _\n-              }, _) => {\n-                // FIXME (#2530): Instead of recursing here to regenerate\n-                // the values for other constants, we should just look up\n-                // the already-defined value.\n-                const_expr(cx, subexpr)\n-              }\n-              _ => cx.sess.span_bug(e.span, ~\"expected item\")\n+            if ! cx.const_values.contains_key(def_id.node) {\n+                match cx.tcx.items.get(def_id.node) {\n+                    ast_map::node_item(@{\n+                        node: ast::item_const(_, subexpr), _\n+                    }, _) => {\n+                        trans_const(cx, subexpr, def_id.node);\n+                    }\n+                    _ => cx.sess.span_bug(e.span, ~\"expected item\")\n+                }\n             }\n+            cx.const_values.get(def_id.node)\n           }\n-          _ => cx.sess.span_bug(e.span, ~\"expected to find a const def\")\n+          _ => cx.sess.span_bug(e.span, ~\"expected a const or fn def\")\n         }\n       }\n         ast::expr_paren(e) => { return const_expr(cx, e); }\n@@ -369,11 +370,9 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n \n fn trans_const(ccx: @crate_ctxt, e: @ast::expr, id: ast::node_id) {\n     let _icx = ccx.insn_ctxt(\"trans_const\");\n-    let v = const_expr(ccx, e);\n-\n-    // The scalars come back as 1st class LLVM vals\n-    // which we have to stick into global constants.\n     let g = base::get_item_val(ccx, id);\n+    let v = const_expr(ccx, e);\n+    ccx.const_values.insert(id, v);\n     llvm::LLVMSetInitializer(g, v);\n     llvm::LLVMSetGlobalConstant(g, True);\n }"}, {"sha": "c37b5b68c06d73ffa103a56929b7b889d4b6e979", "filename": "src/test/run-pass/const-fn-val.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e3a8c17e9b7cb61b18791aea0544794a315bbb/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=92e3a8c17e9b7cb61b18791aea0544794a315bbb", "patch": "@@ -0,0 +1,11 @@\n+fn foo() -> int {\n+    return 0xca7f000d;\n+}\n+\n+struct Bar { f: &fn() -> int }\n+\n+const b : Bar = Bar { f: foo };\n+\n+fn main() {\n+    assert (b.f)() == 0xca7f000d;\n+}\n\\ No newline at end of file"}]}