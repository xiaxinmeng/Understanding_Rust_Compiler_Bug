{"sha": "cd88bb332c40deda6db2c18c0bc03cfd0da42055", "node_id": "C_kwDOAAsO6NoAKGNkODhiYjMzMmM0MGRlZGE2ZGIyYzE4YzBiYzAzY2ZkMGRhNDIwNTU", "commit": {"author": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2022-06-28T20:35:48Z"}, "committer": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2022-06-28T20:38:32Z"}, "message": "Improve pretty printing of valtrees for references", "tree": {"sha": "a8c6e05321adf47e899a2b44f233ff270ff4fecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c6e05321adf47e899a2b44f233ff270ff4fecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd88bb332c40deda6db2c18c0bc03cfd0da42055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd88bb332c40deda6db2c18c0bc03cfd0da42055", "html_url": "https://github.com/rust-lang/rust/commit/cd88bb332c40deda6db2c18c0bc03cfd0da42055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd88bb332c40deda6db2c18c0bc03cfd0da42055/comments", "author": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e93749ab00539a11e90426ea87382c433530a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e93749ab00539a11e90426ea87382c433530a8", "html_url": "https://github.com/rust-lang/rust/commit/94e93749ab00539a11e90426ea87382c433530a8"}], "stats": {"total": 246, "additions": 144, "deletions": 102}, "files": [{"sha": "bf65fdc54ca48a6ca15525213e2091ec06326ca7", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::mir;\n use rustc_middle::mir::interpret::{EvalToValTreeResult, GlobalId};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n-use rustc_target::abi::VariantIdx;\n \n use crate::interpret::{\n     intern_const_alloc_recursive, ConstValue, InternKind, InterpCx, InterpResult, MemPlaceMeta,\n@@ -91,83 +90,6 @@ pub(crate) fn eval_to_valtree<'tcx>(\n     }\n }\n \n-/// Tries to destructure constants of type Array or Adt into the constants\n-/// of its fields.\n-pub(crate) fn try_destructure_const<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    const_: ty::Const<'tcx>,\n-) -> Option<ty::DestructuredConst<'tcx>> {\n-    if let ty::ConstKind::Value(valtree) = const_.kind() {\n-        let branches = match valtree {\n-            ty::ValTree::Branch(b) => b,\n-            _ => return None,\n-        };\n-\n-        let (fields, variant) = match const_.ty().kind() {\n-            ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n-                // construct the consts for the elements of the array/slice\n-                let field_consts = branches\n-                    .iter()\n-                    .map(|b| {\n-                        tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty })\n-                    })\n-                    .collect::<Vec<_>>();\n-                debug!(?field_consts);\n-\n-                (field_consts, None)\n-            }\n-            ty::Adt(def, _) if def.variants().is_empty() => bug!(\"unreachable\"),\n-            ty::Adt(def, substs) => {\n-                let variant_idx = if def.is_enum() {\n-                    VariantIdx::from_u32(branches[0].unwrap_leaf().try_to_u32().ok()?)\n-                } else {\n-                    VariantIdx::from_u32(0)\n-                };\n-                let fields = &def.variant(variant_idx).fields;\n-                let mut field_consts = Vec::with_capacity(fields.len());\n-\n-                // Note: First element inValTree corresponds to variant of enum\n-                let mut valtree_idx = if def.is_enum() { 1 } else { 0 };\n-                for field in fields {\n-                    let field_ty = field.ty(tcx, substs);\n-                    let field_valtree = branches[valtree_idx]; // first element of branches is variant\n-                    let field_const = tcx.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Value(field_valtree),\n-                        ty: field_ty,\n-                    });\n-                    field_consts.push(field_const);\n-                    valtree_idx += 1;\n-                }\n-                debug!(?field_consts);\n-\n-                (field_consts, Some(variant_idx))\n-            }\n-            ty::Tuple(elem_tys) => {\n-                let fields = elem_tys\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(i, elem_ty)| {\n-                        let elem_valtree = branches[i];\n-                        tcx.mk_const(ty::ConstS {\n-                            kind: ty::ConstKind::Value(elem_valtree),\n-                            ty: elem_ty,\n-                        })\n-                    })\n-                    .collect::<Vec<_>>();\n-\n-                (fields, None)\n-            }\n-            _ => bug!(\"cannot destructure constant {:?}\", const_),\n-        };\n-\n-        let fields = tcx.arena.alloc_from_iter(fields.into_iter());\n-\n-        Some(ty::DestructuredConst { variant, fields })\n-    } else {\n-        None\n-    }\n-}\n-\n #[instrument(skip(tcx), level = \"debug\")]\n pub(crate) fn try_destructure_mir_constant<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "5bf91879066f483008426082dd542e3796a7eeee", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -42,7 +42,6 @@ pub fn provide(providers: &mut Providers) {\n     providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;\n     providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n-    providers.try_destructure_const = |tcx, val| const_eval::try_destructure_const(tcx, val);\n     providers.eval_to_valtree = |tcx, param_env_and_value| {\n         let (param_env, raw) = param_env_and_value.into_parts();\n         const_eval::eval_to_valtree(tcx, param_env, raw)"}, {"sha": "575147feebc94f051bb3109d42fc16114a1cf358", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -205,14 +205,8 @@ impl<'tcx> TyCtxtEnsure<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    /// Destructure a type-level constant ADT or array into its variant index and its field values.\n-    /// Panics if the destructuring fails, use `try_destructure_const` for fallible version.\n-    pub fn destructure_const(self, const_: ty::Const<'tcx>) -> ty::DestructuredConst<'tcx> {\n-        self.try_destructure_const(const_).unwrap()\n-    }\n-\n     /// Destructure a mir constant ADT or array into its variant index and its field values.\n-    /// Panics if the destructuring fails, use `try_destructure_const` for fallible version.\n+    /// Panics if the destructuring fails, use `try_destructure_mir_constant` for fallible version.\n     pub fn destructure_mir_constant(\n         self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "b07916d3bbc5af1008c963385e49153ff333d6cc", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -978,11 +978,8 @@ rustc_queries! {\n         desc { \"converting type-level constant value to mir constant value\"}\n     }\n \n-    /// Destructure a constant ADT or array into its variant index and its\n-    /// field values or return `None` if constant is invalid.\n-    ///\n-    /// Use infallible `TyCtxt::destructure_const` when you know that constant is valid.\n-    query try_destructure_const(key: ty::Const<'tcx>) -> Option<ty::DestructuredConst<'tcx>> {\n+    /// Destructure a type-level constant ADT or array into its variant index and its field values.\n+    query destructure_const(key: ty::Const<'tcx>) -> ty::DestructuredConst<'tcx> {\n         desc { \"destructuring type level constant\"}\n     }\n "}, {"sha": "7f3b0fdccc6f11ffc9a05bef5a95a634a7102d6b", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -1447,7 +1447,11 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"{:?}\", String::from_utf8_lossy(bytes)));\n                     return Ok(self);\n                 }\n-                _ => {}\n+                _ => {\n+                    p!(\"&\");\n+                    p!(pretty_print_const_valtree(valtree, *inner_ty, print_ty));\n+                    return Ok(self);\n+                }\n             },\n             (ty::ValTree::Branch(_), ty::Array(t, _)) if *t == u8_type => {\n                 let bytes = valtree.try_to_raw_bytes(self.tcx(), *t).unwrap_or_else(|| {\n@@ -1459,16 +1463,8 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n             (ty::ValTree::Branch(_), ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) => {\n-                let Some(contents) = self.tcx().try_destructure_const(\n-                    ty::Const::from_value(self.tcx(), valtree, ty)\n-                ) else {\n-                    // Fall back to debug pretty printing for invalid constants.\n-                    p!(write(\"{:?}\", valtree));\n-                    if print_ty {\n-                        p!(\": \", print(ty));\n-                    }\n-                    return Ok(self);\n-                };\n+                let contents =\n+                    self.tcx().destructure_const(ty::Const::from_value(self.tcx(), valtree, ty));\n                 let fields = contents.fields.iter().copied();\n                 match *ty.kind() {\n                     ty::Array(..) => {"}, {"sha": "22cfd7e19853e5d77f1cb2facdde852ada458c41", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -0,0 +1,84 @@\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n+\n+/// Tries to destructure constants of type Array or Adt into the constants\n+/// of its fields.\n+pub(crate) fn destructure_const<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    const_: ty::Const<'tcx>,\n+) -> ty::DestructuredConst<'tcx> {\n+    if let ty::ConstKind::Value(valtree) = const_.kind() {\n+        let branches = match valtree {\n+            ty::ValTree::Branch(b) => b,\n+            _ => bug!(\"cannot destructure constant {:?}\", const_),\n+        };\n+\n+        let (fields, variant) = match const_.ty().kind() {\n+            ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n+                // construct the consts for the elements of the array/slice\n+                let field_consts = branches\n+                    .iter()\n+                    .map(|b| {\n+                        tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty })\n+                    })\n+                    .collect::<Vec<_>>();\n+                debug!(?field_consts);\n+\n+                (field_consts, None)\n+            }\n+            ty::Adt(def, _) if def.variants().is_empty() => bug!(\"unreachable\"),\n+            ty::Adt(def, substs) => {\n+                let variant_idx = if def.is_enum() {\n+                    VariantIdx::from_u32(branches[0].unwrap_leaf().try_to_u32().unwrap())\n+                } else {\n+                    VariantIdx::from_u32(0)\n+                };\n+                let fields = &def.variant(variant_idx).fields;\n+                let mut field_consts = Vec::with_capacity(fields.len());\n+\n+                // Note: First element inValTree corresponds to variant of enum\n+                let mut valtree_idx = if def.is_enum() { 1 } else { 0 };\n+                for field in fields {\n+                    let field_ty = field.ty(tcx, substs);\n+                    let field_valtree = branches[valtree_idx]; // first element of branches is variant\n+                    let field_const = tcx.mk_const(ty::ConstS {\n+                        kind: ty::ConstKind::Value(field_valtree),\n+                        ty: field_ty,\n+                    });\n+                    field_consts.push(field_const);\n+                    valtree_idx += 1;\n+                }\n+                debug!(?field_consts);\n+\n+                (field_consts, Some(variant_idx))\n+            }\n+            ty::Tuple(elem_tys) => {\n+                let fields = elem_tys\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, elem_ty)| {\n+                        let elem_valtree = branches[i];\n+                        tcx.mk_const(ty::ConstS {\n+                            kind: ty::ConstKind::Value(elem_valtree),\n+                            ty: elem_ty,\n+                        })\n+                    })\n+                    .collect::<Vec<_>>();\n+\n+                (fields, None)\n+            }\n+            _ => bug!(\"cannot destructure constant {:?}\", const_),\n+        };\n+\n+        let fields = tcx.arena.alloc_from_iter(fields.into_iter());\n+\n+        ty::DestructuredConst { variant, fields }\n+    } else {\n+        bug!(\"cannot destructure constant {:?}\", const_)\n+    }\n+}\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers =\n+        ty::query::Providers { destructure_const, ..*providers };\n+}"}, {"sha": "a27cb7cf07e7226a092f5bce7964b6e55117fbb1", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -18,6 +18,7 @@ use rustc_middle::ty::query::Providers;\n \n mod assoc;\n mod common_traits;\n+pub mod consts;\n pub mod instance;\n mod needs_drop;\n pub mod representability;\n@@ -26,6 +27,7 @@ mod ty;\n pub fn provide(providers: &mut Providers) {\n     assoc::provide(providers);\n     common_traits::provide(providers);\n+    consts::provide(providers);\n     needs_drop::provide(providers);\n     ty::provide(providers);\n     instance::provide(providers);"}, {"sha": "76505d188759426da9edac16616a1eb76e68e5d9", "filename": "src/test/ui/const-generics/issue-66451.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -0,0 +1,28 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Foo {\n+    value: i32,\n+    nested: &'static Bar<i32>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+struct Bar<T>(T);\n+\n+struct Test<const F: Foo>;\n+\n+fn main() {\n+    let x: Test<{\n+        Foo {\n+            value: 3,\n+            nested: &Bar(4),\n+        }  \n+    }> = Test;\n+    let y: Test<{\n+        Foo {\n+            value: 3,\n+            nested: &Bar(5),\n+        }\n+    }> = x; //~ ERROR mismatched types\n+}"}, {"sha": "b691eac4f2d0e16d6e28bc81d9329246ac0af8c6", "filename": "src/test/ui/const-generics/issue-66451.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd88bb332c40deda6db2c18c0bc03cfd0da42055/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88bb332c40deda6db2c18c0bc03cfd0da42055/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.stderr?ref=cd88bb332c40deda6db2c18c0bc03cfd0da42055", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66451.rs:27:10\n+   |\n+LL |       let y: Test<{\n+   |  ____________-\n+LL | |         Foo {\n+LL | |             value: 3,\n+LL | |             nested: &Bar(5),\n+LL | |         }\n+LL | |     }> = x;\n+   | |      -   ^ expected `Foo { value: 3_i32, nested: &Bar::<i32>(5_i32) }`, found `Foo { value: 3_i32, nested: &Bar::<i32>(4_i32) }`\n+   | |______|\n+   |        expected due to this\n+   |\n+   = note: expected struct `Test<Foo { value: 3_i32, nested: &Bar::<i32>(5_i32) }>`\n+              found struct `Test<Foo { value: 3_i32, nested: &Bar::<i32>(4_i32) }>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}