{"sha": "f3a3599e090cb6aa63a327351738d7633c934728", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTM1OTllMDkwY2I2YWE2M2EzMjczNTE3MzhkNzYzM2M5MzQ3Mjg=", "commit": {"author": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-07T23:42:28Z"}, "committer": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-08T02:14:34Z"}, "message": "Add debug asserts and fix some violations", "tree": {"sha": "e67ceaa2524f895251d81c2214e91210da948f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e67ceaa2524f895251d81c2214e91210da948f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a3599e090cb6aa63a327351738d7633c934728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a3599e090cb6aa63a327351738d7633c934728", "html_url": "https://github.com/rust-lang/rust/commit/f3a3599e090cb6aa63a327351738d7633c934728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a3599e090cb6aa63a327351738d7633c934728/comments", "author": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddacf037fdc8bfb845bde2ce41ea4b9b6de445c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddacf037fdc8bfb845bde2ce41ea4b9b6de445c7", "html_url": "https://github.com/rust-lang/rust/commit/ddacf037fdc8bfb845bde2ce41ea4b9b6de445c7"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "7ed7fd204fd991f637c6df0f7a58845a4e0fe4f5", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3599e090cb6aa63a327351738d7633c934728/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3599e090cb6aa63a327351738d7633c934728/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=f3a3599e090cb6aa63a327351738d7633c934728", "patch": "@@ -246,6 +246,9 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n     }\n \n     fn replace(&mut self, key: K) -> Option<K> {\n+        if self.root.is_shared_root() {\n+            self.root = node::Root::new_leaf();\n+        }\n         match search::search_tree::<marker::Mut, K, (), K>(self.root.as_mut(), &key) {\n             Found(handle) => Some(mem::replace(handle.into_kv_mut().0, key)),\n             GoDown(handle) => {\n@@ -889,6 +892,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn entry(&mut self, key: K) -> Entry<K, V> {\n+        // FIXME(@porglezomp) Avoid allocating if we don't insert\n         if self.root.is_shared_root() {\n             self.root = node::Root::new_leaf();\n         }\n@@ -1026,6 +1030,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         let total_num = self.len();\n \n         let mut right = Self::new();\n+        right.root = node::Root::new_leaf();\n         for _ in 0..(self.root.as_ref().height()) {\n             right.root.push_level();\n         }"}, {"sha": "17eee65178e005b20c423733feef943d7228f263", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3599e090cb6aa63a327351738d7633c934728/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3599e090cb6aa63a327351738d7633c934728/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=f3a3599e090cb6aa63a327351738d7633c934728", "patch": "@@ -195,6 +195,10 @@ impl<K, V> Root<K, V> {\n     }\n \n     pub fn shared_empty_root() -> Self {\n+        // Ensuring that the shared node hasn't been corrupted by any mutations\n+        debug_assert!(EMPTY_ROOT_NODE.parent == ptr::null());\n+        debug_assert!(EMPTY_ROOT_NODE.parent_idx == 0);\n+        debug_assert!(EMPTY_ROOT_NODE.len == 0);\n         Root {\n             node: unsafe {\n                 BoxedNode::from_ptr(NonNull::new_unchecked(\n@@ -246,6 +250,7 @@ impl<K, V> Root<K, V> {\n     /// new node the root. This increases the height by 1 and is the opposite of `pop_level`.\n     pub fn push_level(&mut self)\n             -> NodeRef<marker::Mut, K, V, marker::Internal> {\n+        debug_assert!(!self.is_shared_root());\n         let mut new_node = Box::new(unsafe { InternalNode::new() });\n         new_node.edges[0] = unsafe { BoxedNode::from_ptr(self.node.as_ptr()) };\n \n@@ -474,6 +479,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n             marker::Edge\n         >\n     > {\n+        debug_assert!(!self.is_shared_root());\n         let node = self.node;\n         let ret = self.ascend().ok();\n         Global.dealloc(node.as_opaque(), Layout::new::<LeafNode<K, V>>());\n@@ -631,6 +637,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n     pub fn push(&mut self, key: K, val: V) {\n         // Necessary for correctness, but this is an internal module\n         debug_assert!(self.len() < CAPACITY);\n+        debug_assert!(!self.is_shared_root());\n \n         let idx = self.len();\n \n@@ -646,6 +653,7 @@ impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n     pub fn push_front(&mut self, key: K, val: V) {\n         // Necessary for correctness, but this is an internal module\n         debug_assert!(self.len() < CAPACITY);\n+        debug_assert!(!self.is_shared_root());\n \n         unsafe {\n             slice_insert(self.keys_mut(), 0, key);\n@@ -959,6 +967,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge\n     fn insert_fit(&mut self, key: K, val: V) -> *mut V {\n         // Necessary for correctness, but in a private module\n         debug_assert!(self.node.len() < CAPACITY);\n+        debug_assert!(!self.node.is_shared_root());\n \n         unsafe {\n             slice_insert(self.node.keys_mut(), self.idx, key);\n@@ -1136,6 +1145,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV>\n     ///   allocated node.\n     pub fn split(mut self)\n             -> (NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, K, V, Root<K, V>) {\n+        debug_assert!(!self.node.is_shared_root());\n         unsafe {\n             let mut new_node = Box::new(LeafNode::new());\n \n@@ -1173,6 +1183,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV>\n     /// now adjacent key/value pairs to the left and right of this handle.\n     pub fn remove(mut self)\n             -> (Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>, K, V) {\n+        debug_assert!(!self.node.is_shared_root());\n         unsafe {\n             let k = slice_remove(self.node.keys_mut(), self.idx);\n             let v = slice_remove(self.node.vals_mut(), self.idx);"}]}