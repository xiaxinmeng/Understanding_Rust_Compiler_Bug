{"sha": "8af3d6367ecead0abf80e697176f697d97c25215", "node_id": "C_kwDOAAsO6NoAKDhhZjNkNjM2N2VjZWFkMGFiZjgwZTY5NzE3NmY2OTdkOTdjMjUyMTU", "commit": {"author": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-09T20:06:26Z"}, "committer": {"name": "David Barsky", "email": "me@davidbarsky.com", "date": "2023-03-13T17:30:18Z"}, "message": "This commit add Cargo-style project discovery for Buck and Bazel users.\n\nThis feature requires the user to add a command that generates a\n`rust-project.json` from a set of files. Project discovery can be invoked\nin two ways:\n\n1. At extension activation time, which includes the generated\n   `rust-project.json` as part of the linkedProjects argument in\n    InitializeParams\n2. Through a new command titled \"Add current file to workspace\", which\n   makes use of a new, rust-analyzer specific LSP request that adds\n   the workspace without erasing any existing workspaces.\n\nI think that the command-running functionality _could_ merit being\nplaced into its own extension (and expose it via extension contribution\npoints), if only provide build-system idiomatic progress reporting and\nstatus handling, but I haven't (yet) made an extension that does this.", "tree": {"sha": "54a28c70aadc17ddc93991fb4344a516ae6cba29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a28c70aadc17ddc93991fb4344a516ae6cba29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af3d6367ecead0abf80e697176f697d97c25215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af3d6367ecead0abf80e697176f697d97c25215", "html_url": "https://github.com/rust-lang/rust/commit/8af3d6367ecead0abf80e697176f697d97c25215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af3d6367ecead0abf80e697176f697d97c25215/comments", "author": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidbarsky", "id": 2067774, "node_id": "MDQ6VXNlcjIwNjc3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2067774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidbarsky", "html_url": "https://github.com/davidbarsky", "followers_url": "https://api.github.com/users/davidbarsky/followers", "following_url": "https://api.github.com/users/davidbarsky/following{/other_user}", "gists_url": "https://api.github.com/users/davidbarsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidbarsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidbarsky/subscriptions", "organizations_url": "https://api.github.com/users/davidbarsky/orgs", "repos_url": "https://api.github.com/users/davidbarsky/repos", "events_url": "https://api.github.com/users/davidbarsky/events{/privacy}", "received_events_url": "https://api.github.com/users/davidbarsky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95497533524537b1cc7a2870ce94b0b14503be8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95497533524537b1cc7a2870ce94b0b14503be8b", "html_url": "https://github.com/rust-lang/rust/commit/95497533524537b1cc7a2870ce94b0b14503be8b"}], "stats": {"total": 283, "additions": 258, "deletions": 25}, "files": [{"sha": "2a4767970c0ec1fdd8b5c96d58814daeda09ac70", "filename": "crates/project-model/src/cfg_flag.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcfg_flag.rs?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -4,6 +4,7 @@\n use std::{fmt, str::FromStr};\n \n use cfg::CfgOptions;\n+use serde::Serialize;\n \n #[derive(Clone, Eq, PartialEq, Debug)]\n pub enum CfgFlag {\n@@ -38,6 +39,18 @@ impl<'de> serde::Deserialize<'de> for CfgFlag {\n     }\n }\n \n+impl Serialize for CfgFlag {\n+    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+    where\n+        S: serde::Serializer,\n+    {\n+        match self {\n+            CfgFlag::Atom(s) => serializer.serialize_str(s),\n+            CfgFlag::KeyValue { .. } => serializer.serialize_str(&format!(\"{}\", &self)),\n+        }\n+    }\n+}\n+\n impl Extend<CfgFlag> for CfgOptions {\n     fn extend<T: IntoIterator<Item = CfgFlag>>(&mut self, iter: T) {\n         for cfg_flag in iter {"}, {"sha": "0f779e5307eb34918fe665314a92886a12781f47", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -54,7 +54,7 @@ use std::path::PathBuf;\n use base_db::{CrateDisplayName, CrateId, CrateName, Dependency, Edition};\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n-use serde::{de, Deserialize};\n+use serde::{de, ser, Deserialize, Serialize};\n \n use crate::cfg_flag::CfgFlag;\n \n@@ -171,14 +171,14 @@ impl ProjectJson {\n     }\n }\n \n-#[derive(Deserialize, Debug, Clone)]\n+#[derive(Serialize, Deserialize, Debug, Clone)]\n pub struct ProjectJsonData {\n     sysroot: Option<PathBuf>,\n     sysroot_src: Option<PathBuf>,\n     crates: Vec<CrateData>,\n }\n \n-#[derive(Deserialize, Debug, Clone)]\n+#[derive(Serialize, Deserialize, Debug, Clone)]\n struct CrateData {\n     display_name: Option<String>,\n     root_module: PathBuf,\n@@ -200,7 +200,7 @@ struct CrateData {\n     repository: Option<String>,\n }\n \n-#[derive(Deserialize, Debug, Clone)]\n+#[derive(Serialize, Deserialize, Debug, Clone)]\n #[serde(rename = \"edition\")]\n enum EditionData {\n     #[serde(rename = \"2015\")]\n@@ -221,16 +221,16 @@ impl From<EditionData> for Edition {\n     }\n }\n \n-#[derive(Deserialize, Debug, Clone)]\n+#[derive(Serialize, Deserialize, Debug, Clone)]\n struct DepData {\n     /// Identifies a crate by position in the crates array.\n     #[serde(rename = \"crate\")]\n     krate: usize,\n-    #[serde(deserialize_with = \"deserialize_crate_name\")]\n+    #[serde(deserialize_with = \"deserialize_crate_name\", serialize_with = \"serialize_crate_name\")]\n     name: CrateName,\n }\n \n-#[derive(Deserialize, Debug, Clone)]\n+#[derive(Serialize, Deserialize, Debug, Clone)]\n struct CrateSource {\n     include_dirs: Vec<PathBuf>,\n     exclude_dirs: Vec<PathBuf>,\n@@ -243,3 +243,10 @@ where\n     let name = String::deserialize(de)?;\n     CrateName::new(&name).map_err(|err| de::Error::custom(format!(\"invalid crate name: {err:?}\")))\n }\n+\n+fn serialize_crate_name<S>(crate_name: &CrateName, serializer: S) -> Result<S::Ok, S::Error>\n+where\n+    S: ser::Serializer,\n+{\n+    crate_name.serialize(serializer)\n+}"}, {"sha": "05ad7ab4c4af64e1e8e501fd062324762c26878e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -272,7 +272,6 @@ config_data! {\n         /// The warnings will be indicated by a blue squiggly underline in code\n         /// and a blue icon in the `Problems Panel`.\n         diagnostics_warningsAsInfo: Vec<String> = \"[]\",\n-\n         /// These directories will be ignored by rust-analyzer. They are\n         /// relative to the workspace root, and globs are not supported. You may\n         /// also need to add the folders to Code's `files.watcherExclude`.\n@@ -895,6 +894,15 @@ impl Config {\n         }\n     }\n \n+    pub fn add_linked_projects(&mut self, linked_projects: Vec<ProjectJsonData>) {\n+        let mut linked_projects = linked_projects\n+            .into_iter()\n+            .map(ManifestOrProjectJson::ProjectJson)\n+            .collect::<Vec<ManifestOrProjectJson>>();\n+\n+        self.data.linkedProjects.append(&mut linked_projects);\n+    }\n+\n     pub fn did_save_text_document_dynamic_registration(&self) -> bool {\n         let caps = try_or_def!(self.caps.text_document.as_ref()?.synchronization.clone()?);\n         caps.did_save == Some(true) && caps.dynamic_registration == Some(true)"}, {"sha": "c38addd59874f5fdbfe35ab62f48332b824e0640", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -5,6 +5,7 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n+    sync::Arc,\n };\n \n use anyhow::Context;\n@@ -46,6 +47,22 @@ use crate::{\n pub(crate) fn handle_workspace_reload(state: &mut GlobalState, _: ()) -> Result<()> {\n     state.proc_macro_clients.clear();\n     state.proc_macro_changed = false;\n+\n+    state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n+    state.fetch_build_data_queue.request_op(\"reload workspace request\".to_string());\n+    Ok(())\n+}\n+\n+pub(crate) fn handle_add_project(\n+    state: &mut GlobalState,\n+    params: lsp_ext::AddProjectParams,\n+) -> Result<()> {\n+    state.proc_macro_clients.clear();\n+    state.proc_macro_changed = false;\n+\n+    let config = Arc::make_mut(&mut state.config);\n+    config.add_linked_projects(params.project);\n+\n     state.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n     state.fetch_build_data_queue.request_op(\"reload workspace request\".to_string());\n     Ok(())"}, {"sha": "e6caebe35371ef2330b9e212116dac7c53ffa455", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -9,6 +9,7 @@ use lsp_types::{\n     notification::Notification, CodeActionKind, DocumentOnTypeFormattingParams,\n     PartialResultParams, Position, Range, TextDocumentIdentifier, WorkDoneProgressParams,\n };\n+use project_model::ProjectJsonData;\n use serde::{Deserialize, Serialize};\n \n use crate::line_index::PositionEncoding;\n@@ -51,6 +52,20 @@ impl Request for ReloadWorkspace {\n     const METHOD: &'static str = \"rust-analyzer/reloadWorkspace\";\n }\n \n+pub enum AddProject {}\n+\n+impl Request for AddProject {\n+    type Params = AddProjectParams;\n+    type Result = ();\n+    const METHOD: &'static str = \"rust-analyzer/addProject\";\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AddProjectParams {\n+    pub project: Vec<ProjectJsonData>,\n+}\n+\n pub enum SyntaxTree {}\n \n impl Request for SyntaxTree {"}, {"sha": "1cc771552a928721e06b4d2d02a7705f54c5e8c2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -625,6 +625,7 @@ impl GlobalState {\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n             .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n             .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)\n+            .on_sync_mut::<lsp_ext::AddProject>(handlers::handle_add_project)\n             .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)\n             .on_sync::<lsp_ext::OnEnter>(handlers::handle_on_enter)\n             .on_sync::<lsp_types::request::SelectionRangeRequest>(handlers::handle_selection_range)"}, {"sha": "e79ab33726d3a2702b6a4ce6b9498a4c028e3faf", "filename": "editors/code/package.json", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -199,6 +199,11 @@\n                 \"title\": \"Reload workspace\",\n                 \"category\": \"rust-analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.addProject\",\n+                \"title\": \"Add current file to workspace\",\n+                \"category\": \"rust-analyzer\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.reload\",\n                 \"title\": \"Restart server\",\n@@ -447,6 +452,17 @@\n                         \"Fill missing expressions with reasonable defaults, `new` or `default` constructors.\"\n                     ]\n                 },\n+                \"rust-analyzer.discoverProjectCommand\": {\n+                    \"markdownDescription\": \"Sets the command that rust-analyzer uses to generate `rust-project.json` files. This command is\\n only suggested if a build system like Buck or Bazel is used. The command must accept files as arguements and return \\n a rust-project.json over stdout.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n                 \"rust-analyzer.cachePriming.enable\": {\n                     \"markdownDescription\": \"Warm up caches on project load.\",\n                     \"default\": true,\n@@ -1904,4 +1920,4 @@\n             }\n         ]\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "beff8501dc8c36eaede92802dadcf7ee84c792cc", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -3,7 +3,7 @@ import * as lc from \"vscode-languageclient\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import { Ctx, Cmd, CtxInit } from \"./ctx\";\n+import { Ctx, Cmd, CtxInit, discoverWorkspace } from \"./ctx\";\n import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n@@ -749,6 +749,23 @@ export function reloadWorkspace(ctx: CtxInit): Cmd {\n     return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n }\n \n+export function addProject(ctx: CtxInit): Cmd {\n+    return async () => {\n+        const discoverProjectCommand = ctx.config.discoverProjectCommand;\n+        if (!discoverProjectCommand) {\n+            return;\n+        }\n+\n+        let workspaces: JsonProject[] = await Promise.all(vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n+            return discoverWorkspace(vscode.workspace.textDocuments, discoverProjectCommand, { cwd: folder.uri.fsPath });\n+        }));\n+\n+        await ctx.client.sendRequest(ra.addProject, {\n+            project: workspaces\n+        });\n+    }\n+}\n+\n async function showReferencesImpl(\n     client: LanguageClient | undefined,\n     uri: string,"}, {"sha": "f62843dffa6438f77a572522625423a15388ac7f", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -214,6 +214,10 @@ export class Config {\n         return this.get<boolean>(\"trace.extension\");\n     }\n \n+    get discoverProjectCommand() {\n+        return this.get<string[] | undefined>(\"discoverProjectCommand\")\n+    }\n+\n     get cargoRunner() {\n         return this.get<string | undefined>(\"cargoRunner\");\n     }"}, {"sha": "ba2d4e97af15dc278c9224582c6fe38c6be983ee", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -4,10 +4,11 @@ import * as ra from \"./lsp_ext\";\n \n import { Config, substituteVSCodeVariables } from \"./config\";\n import { createClient } from \"./client\";\n-import { isRustDocument, isRustEditor, LazyOutputChannel, log, RustEditor } from \"./util\";\n+import { executeDiscoverProject, isRustDocument, isRustEditor, LazyOutputChannel, log, RustEditor } from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n import { PersistentState } from \"./persistent_state\";\n import { bootstrap } from \"./bootstrap\";\n+import { ExecOptions } from \"child_process\";\n \n // We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n // only those are in use. We use \"Empty\" to represent these scenarios\n@@ -16,12 +17,12 @@ import { bootstrap } from \"./bootstrap\";\n export type Workspace =\n     | { kind: \"Empty\" }\n     | {\n-          kind: \"Workspace Folder\";\n-      }\n+        kind: \"Workspace Folder\";\n+    }\n     | {\n-          kind: \"Detached Files\";\n-          files: vscode.TextDocument[];\n-      };\n+        kind: \"Detached Files\";\n+        files: vscode.TextDocument[];\n+    };\n \n export function fetchWorkspace(): Workspace {\n     const folders = (vscode.workspace.workspaceFolders || []).filter(\n@@ -35,12 +36,19 @@ export function fetchWorkspace(): Workspace {\n         ? rustDocuments.length === 0\n             ? { kind: \"Empty\" }\n             : {\n-                  kind: \"Detached Files\",\n-                  files: rustDocuments,\n-              }\n+                kind: \"Detached Files\",\n+                files: rustDocuments,\n+            }\n         : { kind: \"Workspace Folder\" };\n }\n \n+export async function discoverWorkspace(files: readonly vscode.TextDocument[], command: string[], options: ExecOptions): Promise<JsonProject> {\n+    const paths = files.map((f) => f.uri.fsPath).join(\" \");\n+    const joinedCommand = command.join(\" \");\n+    const data = await executeDiscoverProject(`${joinedCommand} -- ${paths}`, options);\n+    return JSON.parse(data) as JsonProject;\n+}\n+\n export type CommandFactory = {\n     enabled: (ctx: CtxInit) => Cmd;\n     disabled?: (ctx: Ctx) => Cmd;\n@@ -63,6 +71,7 @@ export class Ctx {\n     private state: PersistentState;\n     private commandFactories: Record<string, CommandFactory>;\n     private commandDisposables: Disposable[];\n+    private discoveredWorkspaces: JsonProject[] | undefined;\n \n     get client() {\n         return this._client;\n@@ -71,7 +80,7 @@ export class Ctx {\n     constructor(\n         readonly extCtx: vscode.ExtensionContext,\n         commandFactories: Record<string, CommandFactory>,\n-        workspace: Workspace\n+        workspace: Workspace,\n     ) {\n         extCtx.subscriptions.push(this);\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n@@ -169,7 +178,18 @@ export class Ctx {\n                 };\n             }\n \n-            const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n+            const discoverProjectCommand = this.config.discoverProjectCommand;\n+            if (discoverProjectCommand) {\n+                let workspaces: JsonProject[] = await Promise.all(vscode.workspace.workspaceFolders!.map(async (folder): Promise<JsonProject> => {\n+                    return discoverWorkspace(vscode.workspace.textDocuments, discoverProjectCommand, { cwd: folder.uri.fsPath });\n+                }));\n+\n+                this.discoveredWorkspaces = workspaces;\n+            }\n+\n+            let initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n+            // this appears to be load-bearing, for better or worse.\n+            await initializationOptions.update('linkedProjects', this.discoveredWorkspaces)\n \n             this._client = await createClient(\n                 this.traceOutputChannel,"}, {"sha": "6c8428aa972e198957191e09721f98e939252462", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -43,6 +43,10 @@ export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, Te\n     \"rust-analyzer/relatedTests\"\n );\n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n+export const addProject = new lc.RequestType<AddProjectParams, string, void>(\n+    \"rust-analyzer/addProject\"\n+)\n+\n export const runFlycheck = new lc.NotificationType<{\n     textDocument: lc.TextDocumentIdentifier | null;\n }>(\"rust-analyzer/runFlycheck\");\n@@ -68,6 +72,8 @@ export const viewItemTree = new lc.RequestType<ViewItemTreeParams, string, void>\n \n export type AnalyzerStatusParams = { textDocument?: lc.TextDocumentIdentifier };\n \n+export type AddProjectParams = { project: JsonProject[] };\n+\n export type ExpandMacroParams = {\n     textDocument: lc.TextDocumentIdentifier;\n     position: lc.Position;"}, {"sha": "323aa89ef061ff148026f4c83a6e3ab8deea3c59", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -24,11 +24,11 @@ export async function activate(\n         vscode.window\n             .showWarningMessage(\n                 `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n-                    \"plugins enabled. These are known to conflict and cause various functions of \" +\n-                    \"both plugins to not work correctly. You should disable one of them.\",\n+                \"plugins enabled. These are known to conflict and cause various functions of \" +\n+                \"both plugins to not work correctly. You should disable one of them.\",\n                 \"Got it\"\n             )\n-            .then(() => {}, console.error);\n+            .then(() => { }, console.error);\n     }\n \n     const ctx = new Ctx(context, createCommands(), fetchWorkspace());\n@@ -146,13 +146,14 @@ function createCommands(): Record<string, CommandFactory> {\n                     health: \"stopped\",\n                 });\n             },\n-            disabled: (_) => async () => {},\n+            disabled: (_) => async () => { },\n         },\n \n         analyzerStatus: { enabled: commands.analyzerStatus },\n         memoryUsage: { enabled: commands.memoryUsage },\n         shuffleCrateGraph: { enabled: commands.shuffleCrateGraph },\n         reloadWorkspace: { enabled: commands.reloadWorkspace },\n+        addProject: { enabled: commands.addProject },\n         matchingBrace: { enabled: commands.matchingBrace },\n         joinLines: { enabled: commands.joinLines },\n         parentModule: { enabled: commands.parentModule },"}, {"sha": "adf0f89c96121dffb06bbad97ec36725793cfa8c", "filename": "editors/code/src/rust_project.ts", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Frust_project.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Frust_project.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust_project.ts?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -0,0 +1,91 @@\n+interface JsonProject {\n+    /// Path to the directory with *source code* of\n+    /// sysroot crates.\n+    ///\n+    /// It should point to the directory where std,\n+    /// core, and friends can be found:\n+    ///\n+    /// https://github.com/rust-lang/rust/tree/master/library.\n+    ///\n+    /// If provided, rust-analyzer automatically adds\n+    /// dependencies on sysroot crates. Conversely,\n+    /// if you omit this path, you can specify sysroot\n+    /// dependencies yourself and, for example, have\n+    /// several different \"sysroots\" in one graph of\n+    /// crates.\n+    sysroot_src?: string;\n+    /// The set of crates comprising the current\n+    /// project. Must include all transitive\n+    /// dependencies as well as sysroot crate (libstd,\n+    /// libcore and such).\n+    crates: Crate[];\n+}\n+\n+interface Crate {\n+    /// Optional crate name used for display purposes,\n+    /// without affecting semantics. See the `deps`\n+    /// key for semantically-significant crate names.\n+    display_name?: string;\n+    /// Path to the root module of the crate.\n+    root_module: string;\n+    /// Edition of the crate.\n+    edition: \"2015\" | \"2018\" | \"2021\";\n+    /// Dependencies\n+    deps: Dep[];\n+    /// Should this crate be treated as a member of\n+    /// current \"workspace\".\n+    ///\n+    /// By default, inferred from the `root_module`\n+    /// (members are the crates which reside inside\n+    /// the directory opened in the editor).\n+    ///\n+    /// Set this to `false` for things like standard\n+    /// library and 3rd party crates to enable\n+    /// performance optimizations (rust-analyzer\n+    /// assumes that non-member crates don't change).\n+    is_workspace_member?: boolean;\n+    /// Optionally specify the (super)set of `.rs`\n+    /// files comprising this crate.\n+    ///\n+    /// By default, rust-analyzer assumes that only\n+    /// files under `root_module.parent` can belong\n+    /// to a crate. `include_dirs` are included\n+    /// recursively, unless a subdirectory is in\n+    /// `exclude_dirs`.\n+    ///\n+    /// Different crates can share the same `source`.\n+    ///\n+    /// If two crates share an `.rs` file in common,\n+    /// they *must* have the same `source`.\n+    /// rust-analyzer assumes that files from one\n+    /// source can't refer to files in another source.\n+    source?: {\n+        include_dirs: string[],\n+        exclude_dirs: string[],\n+    },\n+    /// The set of cfgs activated for a given crate, like\n+    /// `[\"unix\", \"feature=\\\"foo\\\"\", \"feature=\\\"bar\\\"\"]`.\n+    cfg: string[];\n+    /// Target triple for this Crate.\n+    ///\n+    /// Used when running `rustc --print cfg`\n+    /// to get target-specific cfgs.\n+    target?: string;\n+    /// Environment variables, used for\n+    /// the `env!` macro\n+    env: { [key: string]: string; },\n+\n+    /// Whether the crate is a proc-macro crate.\n+    is_proc_macro: boolean;\n+    /// For proc-macro crates, path to compiled\n+    /// proc-macro (.so file).\n+    proc_macro_dylib_path?: string;\n+}\n+\n+interface Dep {\n+    /// Index of a crate in the `crates` array.\n+    crate: number,\n+    /// Name as should appear in the (implicit)\n+    /// `extern crate name` declaration.\n+    name: string,\n+}\n\\ No newline at end of file"}, {"sha": "d2ecdce5b4e8ceaed91555d2a31bfc22ae37323f", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8af3d6367ecead0abf80e697176f697d97c25215/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=8af3d6367ecead0abf80e697176f697d97c25215", "patch": "@@ -150,9 +150,11 @@ export function memoizeAsync<Ret, TThis, Param extends string>(\n \n /** Awaitable wrapper around `child_process.exec` */\n export function execute(command: string, options: ExecOptions): Promise<string> {\n+    log.info(`running command: ${command}`)\n     return new Promise((resolve, reject) => {\n         exec(command, options, (err, stdout, stderr) => {\n             if (err) {\n+                log.error(err);\n                 reject(err);\n                 return;\n             }\n@@ -167,6 +169,21 @@ export function execute(command: string, options: ExecOptions): Promise<string>\n     });\n }\n \n+export function executeDiscoverProject(command: string, options: ExecOptions): Promise<string> {\n+    log.info(`running command: ${command}`)\n+    return new Promise((resolve, reject) => {\n+        exec(command, options, (err, stdout, _) => {\n+            if (err) {\n+                log.error(err);\n+                reject(err);\n+                return;\n+            }\n+\n+            resolve(stdout.trimEnd());\n+        });\n+    });\n+}\n+\n export class LazyOutputChannel implements vscode.OutputChannel {\n     constructor(name: string) {\n         this.name = name;"}]}