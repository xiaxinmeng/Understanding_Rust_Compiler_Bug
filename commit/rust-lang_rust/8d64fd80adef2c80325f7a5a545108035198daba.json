{"sha": "8d64fd80adef2c80325f7a5a545108035198daba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNjRmZDgwYWRlZjJjODAzMjVmN2E1YTU0NTEwODAzNTE5OGRhYmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T11:45:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T11:45:06Z"}, "message": "Rollup merge of #72499 - mendess:master, r=dtolnay\n\nOverride Box::<[T]>::clone_from\n\nAvoid dropping and reallocating when cloning to an existing box if the lengths are the same.\n\nIt would be nice if this could also be specialized for `Copy` but I don't know how that works since it's not on stable. Will gladly look into it if it's deemed as a good idea.\n\nThis is my first PR with code, hope I did everything right :smile:", "tree": {"sha": "d4c7cc359f8fe829430ca74ed89883f1b0aa72e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c7cc359f8fe829430ca74ed89883f1b0aa72e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d64fd80adef2c80325f7a5a545108035198daba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0kdCCRBK7hj4Ov3rIwAAdHIIAH7dC51PKbW+zslGxSF7xtoj\neczAMoH7RxtXcpgDriiniu1PqGxsU/o8oyaRdUzTdC+U0xHoSU/Lw8mUlyk08FIj\nEJ9+u3gH/VQAd1d94WVvPfANsPjusCVeM4K+u6jIWAJTBnxe2aCSEVgA70AZZO6H\nyXZmaPz2KmpH+GvtODDE77hjCXOAYuXN/xg4Xn1scFgNpRWU+3jcHuAkJbp46rNN\nzV51ekIlOSNSRTpmVYcnUn9QbNeXz+uRKfk18uIZ5wEEuVWG9t7VpnZUB/WYEjr5\nG+n0VuuTo2F8vmIlyfdTRw5PKZL+MTT9jhhHswrEOiqn9tiKIWdN8k1BkE2qpdU=\n=k3Yg\n-----END PGP SIGNATURE-----\n", "payload": "tree d4c7cc359f8fe829430ca74ed89883f1b0aa72e2\nparent 49ca99de93f8ed26b16ac2ef70c61c7ed2267754\nparent dbf32e2270f82601bd2816da270ce70269cc59ba\nauthor Ralf Jung <post@ralfj.de> 1590839106 +0200\ncommitter GitHub <noreply@github.com> 1590839106 +0200\n\nRollup merge of #72499 - mendess:master, r=dtolnay\n\nOverride Box::<[T]>::clone_from\n\nAvoid dropping and reallocating when cloning to an existing box if the lengths are the same.\n\nIt would be nice if this could also be specialized for `Copy` but I don't know how that works since it's not on stable. Will gladly look into it if it's deemed as a good idea.\n\nThis is my first PR with code, hope I did everything right :smile:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d64fd80adef2c80325f7a5a545108035198daba", "html_url": "https://github.com/rust-lang/rust/commit/8d64fd80adef2c80325f7a5a545108035198daba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d64fd80adef2c80325f7a5a545108035198daba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49ca99de93f8ed26b16ac2ef70c61c7ed2267754", "url": "https://api.github.com/repos/rust-lang/rust/commits/49ca99de93f8ed26b16ac2ef70c61c7ed2267754", "html_url": "https://github.com/rust-lang/rust/commit/49ca99de93f8ed26b16ac2ef70c61c7ed2267754"}, {"sha": "dbf32e2270f82601bd2816da270ce70269cc59ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf32e2270f82601bd2816da270ce70269cc59ba", "html_url": "https://github.com/rust-lang/rust/commit/dbf32e2270f82601bd2816da270ce70269cc59ba"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "22c344323a2edd6354b99a61e77fcb1ec3f14953", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d64fd80adef2c80325f7a5a545108035198daba/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d64fd80adef2c80325f7a5a545108035198daba/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=8d64fd80adef2c80325f7a5a545108035198daba", "patch": "@@ -1109,6 +1109,14 @@ impl<T: Clone> Clone for Box<[T]> {\n     fn clone(&self) -> Self {\n         self.to_vec().into_boxed_slice()\n     }\n+\n+    fn clone_from(&mut self, other: &Self) {\n+        if self.len() == other.len() {\n+            self.clone_from_slice(&other);\n+        } else {\n+            *self = other.clone();\n+        }\n+    }\n }\n \n #[stable(feature = \"box_borrow\", since = \"1.1.0\")]"}, {"sha": "5377485da8f3b7def467ee749689494cd6399b72", "filename": "src/liballoc/tests/boxed.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8d64fd80adef2c80325f7a5a545108035198daba/src%2Fliballoc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d64fd80adef2c80325f7a5a545108035198daba/src%2Fliballoc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fboxed.rs?ref=8d64fd80adef2c80325f7a5a545108035198daba", "patch": "@@ -16,3 +16,36 @@ fn unitialized_zero_size_box() {\n         NonNull::<MaybeUninit<String>>::dangling().as_ptr(),\n     );\n }\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+struct Dummy {\n+    _data: u8,\n+}\n+\n+#[test]\n+fn box_clone_and_clone_from_equivalence() {\n+    for size in (0..8).map(|i| 2usize.pow(i)) {\n+        let control = vec![Dummy { _data: 42 }; size].into_boxed_slice();\n+        let clone = control.clone();\n+        let mut copy = vec![Dummy { _data: 84 }; size].into_boxed_slice();\n+        copy.clone_from(&control);\n+        assert_eq!(control, clone);\n+        assert_eq!(control, copy);\n+    }\n+}\n+\n+/// This test might give a false positive in case the box realocates, but the alocator keeps the\n+/// original pointer.\n+///\n+/// On the other hand it won't give a false negative, if it fails than the memory was definitly not\n+/// reused\n+#[test]\n+fn box_clone_from_ptr_stability() {\n+    for size in (0..8).map(|i| 2usize.pow(i)) {\n+        let control = vec![Dummy { _data: 42 }; size].into_boxed_slice();\n+        let mut copy = vec![Dummy { _data: 84 }; size].into_boxed_slice();\n+        let copy_raw = copy.as_ptr() as usize;\n+        copy.clone_from(&control);\n+        assert_eq!(copy.as_ptr() as usize, copy_raw);\n+    }\n+}"}]}