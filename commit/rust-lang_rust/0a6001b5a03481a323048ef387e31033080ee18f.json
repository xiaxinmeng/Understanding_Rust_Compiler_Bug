{"sha": "0a6001b5a03481a323048ef387e31033080ee18f", "node_id": "C_kwDOAAsO6NoAKDBhNjAwMWI1YTAzNDgxYTMyMzA0OGVmMzg3ZTMxMDMzMDgwZWUxOGY", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-03-05T17:32:33Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-05-31T22:16:23Z"}, "message": "Expose get_many_mut and get_many_unchecked_mut to HashMap", "tree": {"sha": "9b6c9d48fbd206c990c3c3540af97d173309ea5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b6c9d48fbd206c990c3c3540af97d173309ea5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a6001b5a03481a323048ef387e31033080ee18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6001b5a03481a323048ef387e31033080ee18f", "html_url": "https://github.com/rust-lang/rust/commit/0a6001b5a03481a323048ef387e31033080ee18f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a6001b5a03481a323048ef387e31033080ee18f/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "html_url": "https://github.com/rust-lang/rust/commit/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "a49dd0102bb7e824eeebbe9ec020f87cb6114892", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/0a6001b5a03481a323048ef387e31033080ee18f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a6001b5a03481a323048ef387e31033080ee18f/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=0a6001b5a03481a323048ef387e31033080ee18f", "patch": "@@ -895,6 +895,119 @@ where\n         self.base.get_key_value(k)\n     }\n \n+    /// Attempts to get mutable references to `N` values in the map at once.\n+    ///\n+    /// Returns an array of length `N` with the results of each query. For soundness, at most one\n+    /// mutable reference will be returned to any value. `None` will be returned if any of the\n+    /// keys are duplicates or missing.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_many_mut)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut libraries = HashMap::new();\n+    /// libraries.insert(\"Bodleian Library\".to_string(), 1602);\n+    /// libraries.insert(\"Athen\u00e6um\".to_string(), 1807);\n+    /// libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\n+    /// libraries.insert(\"Library of Congress\".to_string(), 1800);\n+    ///\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Library of Congress\",\n+    /// ]);\n+    /// assert_eq!(\n+    ///     got,\n+    ///     Some([\n+    ///         &mut 1807,\n+    ///         &mut 1800,\n+    ///     ]),\n+    /// );\n+    ///\n+    /// // Missing keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"New York Public Library\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    ///\n+    /// // Duplicate keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Athen\u00e6um\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_many_mut\", issue = \"97601\")]\n+    pub fn get_many_mut<Q: ?Sized, const N: usize>(&mut self, ks: [&Q; N]) -> Option<[&'_ mut V; N]>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_many_mut(ks)\n+    }\n+\n+    /// Attempts to get mutable references to `N` values in the map at once, without validating that\n+    /// the values are unique.\n+    ///\n+    /// Returns an array of length `N` with the results of each query. `None` will be returned if\n+    /// any of the keys are missing.\n+    ///\n+    /// For a safe alternative see [`get_many_mut`](Self::get_many_mut).\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method with overlapping keys is *[undefined behavior]* even if the resulting\n+    /// references are not used.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_many_mut)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut libraries = HashMap::new();\n+    /// libraries.insert(\"Bodleian Library\".to_string(), 1602);\n+    /// libraries.insert(\"Athen\u00e6um\".to_string(), 1807);\n+    /// libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\n+    /// libraries.insert(\"Library of Congress\".to_string(), 1800);\n+    ///\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"Library of Congress\",\n+    /// ]);\n+    /// assert_eq!(\n+    ///     got,\n+    ///     Some([\n+    ///         &mut 1807,\n+    ///         &mut 1800,\n+    ///     ]),\n+    /// );\n+    ///\n+    /// // Missing keys result in None\n+    /// let got = libraries.get_many_mut([\n+    ///     \"Athen\u00e6um\",\n+    ///     \"New York Public Library\",\n+    /// ]);\n+    /// assert_eq!(got, None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"map_many_mut\", issue = \"97601\")]\n+    pub unsafe fn get_many_unchecked_mut<Q: ?Sized, const N: usize>(\n+        &mut self,\n+        ks: [&Q; N],\n+    ) -> Option<[&'_ mut V; N]>\n+    where\n+        K: Borrow<Q>,\n+        Q: Hash + Eq,\n+    {\n+        self.base.get_many_unchecked_mut(ks)\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but"}]}