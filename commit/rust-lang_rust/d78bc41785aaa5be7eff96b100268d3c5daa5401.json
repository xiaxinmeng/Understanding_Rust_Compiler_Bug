{"sha": "d78bc41785aaa5be7eff96b100268d3c5daa5401", "node_id": "C_kwDOAAsO6NoAKGQ3OGJjNDE3ODVhYWE1YmU3ZWZmOTZiMTAwMjY4ZDNjNWRhYTU0MDE", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-23T17:55:51Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-09-23T17:55:51Z"}, "message": "Remove unused `ConstFn(Once)Closure` structs.", "tree": {"sha": "b16d867bd6adf055bd433110b9d59bb7f9549285", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16d867bd6adf055bd433110b9d59bb7f9549285"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d78bc41785aaa5be7eff96b100268d3c5daa5401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d78bc41785aaa5be7eff96b100268d3c5daa5401", "html_url": "https://github.com/rust-lang/rust/commit/d78bc41785aaa5be7eff96b100268d3c5daa5401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d78bc41785aaa5be7eff96b100268d3c5daa5401/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6267c60f6a1eb8bb135bb3d37edd4ab9ab352d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6267c60f6a1eb8bb135bb3d37edd4ab9ab352d6e", "html_url": "https://github.com/rust-lang/rust/commit/6267c60f6a1eb8bb135bb3d37edd4ab9ab352d6e"}], "stats": {"total": 125, "additions": 0, "deletions": 125}, "files": [{"sha": "d2e80e8e7e5dfaf446ec1a0f3ce0981bfbb16e32", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/d78bc41785aaa5be7eff96b100268d3c5daa5401/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78bc41785aaa5be7eff96b100268d3c5daa5401/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=d78bc41785aaa5be7eff96b100268d3c5daa5401", "patch": "@@ -1,56 +1,5 @@\n use crate::marker::Destruct;\n \n-/// Struct representing a closure with owned data.\n-///\n-/// Example:\n-/// ```no_build\n-/// use crate::const_closure::ConstFnOnceClosure;\n-/// const fn imp(state: i32, (arg,): (i32,)) -> i32 {\n-///     state + arg\n-/// }\n-/// let i = 5;\n-/// let cl = ConstFnOnceClosure::new(i, imp);\n-///\n-/// assert!(7 == cl(2));\n-/// ```\n-pub(crate) struct ConstFnOnceClosure<CapturedData, Function> {\n-    data: CapturedData,\n-    func: Function,\n-}\n-\n-impl<CapturedData, Function> ConstFnOnceClosure<CapturedData, Function> {\n-    /// Function for creating a new closure.\n-    ///\n-    /// `data` is the owned data that is captured from the environment (this data must be `~const Destruct`).\n-    ///\n-    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n-    ///   and return the return value of the closure.\n-    #[allow(dead_code)]\n-    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n-        data: CapturedData,\n-        func: Function,\n-    ) -> Self\n-    where\n-        CapturedData: ~const Destruct,\n-        Function: ~const Fn(CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n-    {\n-        Self { data, func }\n-    }\n-}\n-\n-impl<CapturedData, ClosureArguments, Function> const FnOnce<ClosureArguments>\n-    for ConstFnOnceClosure<CapturedData, Function>\n-where\n-    CapturedData: ~const Destruct,\n-    Function: ~const Fn<(CapturedData, ClosureArguments)> + ~const Destruct,\n-{\n-    type Output = Function::Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: ClosureArguments) -> Self::Output {\n-        (self.func)(self.data, args)\n-    }\n-}\n-\n /// Struct representing a closure with mutably borrowed data.\n ///\n /// Example:\n@@ -112,77 +61,3 @@ where\n         (self.func)(self.data, args)\n     }\n }\n-\n-/// Struct representing a closure with borrowed data.\n-///\n-/// Example:\n-/// ```no_build\n-/// use crate::const_closure::ConstFnClosure;\n-///\n-/// const fn imp(state: &i32, (arg,): (i32,)) -> i32 {\n-///     *state + arg\n-/// }\n-/// let i = 5;\n-/// let cl = ConstFnClosure::new(&i, imp);\n-///\n-/// assert!(7 == cl(2));\n-/// assert!(6 == cl(1));\n-/// ```\n-pub(crate) struct ConstFnClosure<'a, CapturedData: ?Sized, Function> {\n-    data: &'a CapturedData,\n-    func: Function,\n-}\n-\n-impl<'a, CapturedData: ?Sized, Function> ConstFnClosure<'a, CapturedData, Function> {\n-    /// Function for creating a new closure.\n-    ///\n-    /// `data` is the a mutable borrow of data that is captured from the environment.\n-    ///\n-    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n-    ///   and return the return value of the closure.\n-    #[allow(dead_code)]\n-    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n-        data: &'a CapturedData,\n-        func: Function,\n-    ) -> Self\n-    where\n-        Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue,\n-    {\n-        Self { data, func }\n-    }\n-}\n-\n-impl<'a, CapturedData: ?Sized, Function, ClosureArguments, ClosureReturnValue> const\n-    FnOnce<ClosureArguments> for ConstFnClosure<'a, CapturedData, Function>\n-where\n-    Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n-{\n-    type Output = ClosureReturnValue;\n-\n-    extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-        self.call_mut(args)\n-    }\n-}\n-\n-impl<'a, CapturedData: ?Sized, Function, ClosureArguments, ClosureReturnValue> const\n-    FnMut<ClosureArguments> for ConstFnClosure<'a, CapturedData, Function>\n-where\n-    Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue,\n-{\n-    extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-        self.call(args)\n-    }\n-}\n-\n-impl<\n-    'a,\n-    CapturedData: ?Sized,\n-    Function: ~const Fn(&CapturedData, ClosureArguments) -> ClosureReturnValue,\n-    ClosureArguments,\n-    ClosureReturnValue,\n-> const Fn<ClosureArguments> for ConstFnClosure<'a, CapturedData, Function>\n-{\n-    extern \"rust-call\" fn call(&self, args: ClosureArguments) -> Self::Output {\n-        (self.func)(self.data, args)\n-    }\n-}"}]}