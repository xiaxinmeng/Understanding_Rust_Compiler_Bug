{"sha": "091fd0360b0f457ff77ba85d7a01ff39e26677eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MWZkMDM2MGIwZjQ1N2ZmNzdiYTg1ZDdhMDFmZjM5ZTI2Njc3ZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-17T10:48:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-17T10:48:16Z"}, "message": "Auto merge of #3555 - daxpedda:master, r=oli-obk\n\nFix `implicit_return` false positives.\n\nFixing some false positives on the `implicit_return` lint.\n\nBasically it should only check for missing return statements in `block.stmts.last()` if it's a `break`, otherwise it should skip because it would either be an error, or a false positive in the case of a `loop` (which I'm trying to fix with this PR).\n\n**Question:**\n- I say \"we\" inside of comments ([`// make sure it's a break, otherwise we want to skip`](https://github.com/rust-lang/rust-clippy/pull/3555/files#diff-11d233fe8c8414214c2b8732b8c9877aR71)). Any alternatives or is that okay?\n- I named a test [`test_loop_with_nests()`](https://github.com/rust-lang/rust-clippy/blob/6870638c3fb66c2abb20633bf40cc09ccc760047/tests/ui/implicit_return.rs#L54-L64), any better suggestions?", "tree": {"sha": "2dd6d565c508b1e14effd1d2675ecaa0f8152458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dd6d565c508b1e14effd1d2675ecaa0f8152458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091fd0360b0f457ff77ba85d7a01ff39e26677eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091fd0360b0f457ff77ba85d7a01ff39e26677eb", "html_url": "https://github.com/rust-lang/rust/commit/091fd0360b0f457ff77ba85d7a01ff39e26677eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091fd0360b0f457ff77ba85d7a01ff39e26677eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d", "html_url": "https://github.com/rust-lang/rust/commit/a416c5e0f7c4c9473069a58410d3ec3e86b1ac0d"}, {"sha": "6870638c3fb66c2abb20633bf40cc09ccc760047", "url": "https://api.github.com/repos/rust-lang/rust/commits/6870638c3fb66c2abb20633bf40cc09ccc760047", "html_url": "https://github.com/rust-lang/rust/commit/6870638c3fb66c2abb20633bf40cc09ccc760047"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "96022db56aa26ed933342eb701db26064e583165", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/091fd0360b0f457ff77ba85d7a01ff39e26677eb/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091fd0360b0f457ff77ba85d7a01ff39e26677eb/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=091fd0360b0f457ff77ba85d7a01ff39e26677eb", "patch": "@@ -45,6 +45,19 @@ declare_clippy_lint! {\n pub struct Pass;\n \n impl Pass {\n+    fn lint(cx: &LateContext<'_, '_>, outer_span: syntax_pos::Span, inner_span: syntax_pos::Span, msg: &str) {\n+        span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n+            if let Some(snippet) = snippet_opt(cx, inner_span) {\n+                db.span_suggestion_with_applicability(\n+                    outer_span,\n+                    msg,\n+                    format!(\"return {}\", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        });\n+    }\n+\n     fn expr_match(cx: &LateContext<'_, '_>, expr: &rustc::hir::Expr) {\n         match &expr.node {\n             // loops could be using `break` instead of `return`\n@@ -55,23 +68,19 @@ impl Pass {\n                 // only needed in the case of `break` with `;` at the end\n                 else if let Some(stmt) = block.stmts.last() {\n                     if let rustc::hir::StmtKind::Semi(expr, ..) = &stmt.node {\n-                        Self::expr_match(cx, expr);\n+                        // make sure it's a break, otherwise we want to skip\n+                        if let ExprKind::Break(.., break_expr) = &expr.node {\n+                            if let Some(break_expr) = break_expr {\n+                                Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n+                            }\n+                        }\n                     }\n                 }\n             },\n             // use `return` instead of `break`\n             ExprKind::Break(.., break_expr) => {\n                 if let Some(break_expr) = break_expr {\n-                    span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n-                        if let Some(snippet) = snippet_opt(cx, break_expr.span) {\n-                            db.span_suggestion_with_applicability(\n-                                expr.span,\n-                                \"change `break` to `return` as shown\",\n-                                format!(\"return {}\", snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    });\n+                    Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n                 }\n             },\n             ExprKind::If(.., if_expr, else_expr) => {\n@@ -89,16 +98,7 @@ impl Pass {\n             // skip if it already has a return statement\n             ExprKind::Ret(..) => (),\n             // everything else is missing `return`\n-            _ => span_lint_and_then(cx, IMPLICIT_RETURN, expr.span, \"missing return statement\", |db| {\n-                if let Some(snippet) = snippet_opt(cx, expr.span) {\n-                    db.span_suggestion_with_applicability(\n-                        expr.span,\n-                        \"add `return` as shown\",\n-                        format!(\"return {}\", snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }),\n+            _ => Self::lint(cx, expr.span, expr.span, \"add `return` as shown\"),\n         }\n     }\n }"}, {"sha": "9fb30135231cc5a24d59b351aa554029fe5bbfd6", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/091fd0360b0f457ff77ba85d7a01ff39e26677eb/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091fd0360b0f457ff77ba85d7a01ff39e26677eb/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=091fd0360b0f457ff77ba85d7a01ff39e26677eb", "patch": "@@ -42,6 +42,27 @@ fn test_loop() -> bool {\n     }\n }\n \n+#[allow(clippy::never_loop)]\n+fn test_loop_with_block() -> bool {\n+    loop {\n+        {\n+            break true;\n+        }\n+    }\n+}\n+\n+#[allow(clippy::never_loop)]\n+fn test_loop_with_nests() -> bool {\n+    loop {\n+        if true {\n+            break true;\n+        }\n+        else {\n+            let _ = true;\n+        }\n+    }\n+}\n+\n fn test_closure() {\n     #[rustfmt::skip]\n     let _ = || { true };\n@@ -53,5 +74,7 @@ fn main() {\n     let _ = test_if_block();\n     let _ = test_match(true);\n     let _ = test_loop();\n+    let _ = test_loop_with_block();\n+    let _ = test_loop_with_nests();\n     test_closure();\n }"}, {"sha": "b3562b67034f164081e530e491682396094676ff", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/091fd0360b0f457ff77ba85d7a01ff39e26677eb/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091fd0360b0f457ff77ba85d7a01ff39e26677eb/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=091fd0360b0f457ff77ba85d7a01ff39e26677eb", "patch": "@@ -37,16 +37,28 @@ error: missing return statement\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:47:18\n+  --> $DIR/implicit_return.rs:49:13\n    |\n-47 |     let _ = || { true };\n+49 |             break true;\n+   |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:58:13\n+   |\n+58 |             break true;\n+   |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n+\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:68:18\n+   |\n+68 |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:48:16\n+  --> $DIR/implicit_return.rs:69:16\n    |\n-48 |     let _ = || true;\n+69 |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}]}