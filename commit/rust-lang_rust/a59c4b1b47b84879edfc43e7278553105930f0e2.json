{"sha": "a59c4b1b47b84879edfc43e7278553105930f0e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWM0YjFiNDdiODQ4NzllZGZjNDNlNzI3ODU1MzEwNTkzMGYwZTI=", "commit": {"author": {"name": "User Jyyou", "email": "jyyou@plaslab.cs.nctu.edu.tw", "date": "2011-12-30T08:18:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-02T04:18:55Z"}, "message": "freebsd support", "tree": {"sha": "43bb77fc44805eb19df2a3d5319d7fe1f2f3bd9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43bb77fc44805eb19df2a3d5319d7fe1f2f3bd9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59c4b1b47b84879edfc43e7278553105930f0e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59c4b1b47b84879edfc43e7278553105930f0e2", "html_url": "https://github.com/rust-lang/rust/commit/a59c4b1b47b84879edfc43e7278553105930f0e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59c4b1b47b84879edfc43e7278553105930f0e2/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e98691dbf88d0fac7ae04d131e9059d0335527", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e98691dbf88d0fac7ae04d131e9059d0335527", "html_url": "https://github.com/rust-lang/rust/commit/f0e98691dbf88d0fac7ae04d131e9059d0335527"}], "stats": {"total": 1042, "additions": 1003, "deletions": 39}, "files": [{"sha": "927fc62c4af732a735bd85e397cd042e2e5bd2dd", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/configure", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -212,7 +212,7 @@ case $CFG_CPUTYPE in\n         CFG_CPUTYPE=arm\n         ;;\n \n-    x86_64 | x86-64 | x64)\n+    x86_64 | x86-64 | x64 | amd64)\n         CFG_CPUTYPE=x86_64\n         ;;\n "}, {"sha": "98a175dd3f0201bde67cda38156647804f4694f7", "filename": "mk/libuv/x86_64/freebsd/Makefile", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2FMakefile?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -0,0 +1,353 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= lockf $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crs\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crs\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=freebsd\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n+#\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "333d5e04a2310ac30a9e71fedb8b6cdab5c78e51", "filename": "mk/libuv/x86_64/freebsd/src/libuv/run-benchmarks.target.mk", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -0,0 +1,83 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-benchmarks\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -pthread\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := \n+\n+$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-benchmarks: LIBS := $(LIBS)\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-benchmarks\n+# Add target alias\n+.PHONY: run-benchmarks\n+run-benchmarks: $(builddir)/run-benchmarks\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-benchmarks\n+"}, {"sha": "7eb08d192d1bb85fc48cd7924a093d4e72cffa3c", "filename": "mk/libuv/x86_64/freebsd/src/libuv/run-tests.target.mk", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -0,0 +1,117 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -pthread\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := \n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "3842bae54b951d4e4d977d3f6f984e92be64f166", "filename": "mk/libuv/x86_64/freebsd/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.Makefile?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/x86_64/unix/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "f1b02252a037e0804f7206524cbe8e56d8a87445", "filename": "mk/libuv/x86_64/freebsd/src/libuv/uv.target.mk", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Ffreebsd%2Fsrc%2Flibuv%2Fuv.target.mk?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -0,0 +1,138 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_freebsd.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_freebsd.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -pthread \\\n+\t-g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_freebsd\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/freebsd.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := -lm\n+\n+$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "40a3dd8ebc6b959d257f4f0e8f6c6a50f1cbb587", "filename": "mk/platform.mk", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -24,14 +24,15 @@ endif\n ifneq ($(findstring freebsd,$(CFG_OSTYPE)),)\n   CFG_LIB_NAME=lib$(1).so\n   CFG_LIB_GLOB=lib$(1)-*.so\n-  CFG_GCCISH_CFLAGS += -fPIC -march=i686 -I/usr/local/include\n+  CFG_GCCISH_CFLAGS += -fPIC -I/usr/local/include\n   CFG_GCCISH_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n-  ifeq ($(CFG_CPUTYPE), x86_64)\n-\tCFG_GCCISH_CFLAGS_i386 += -m32\n-\tCFG_GCCISH_LINK_FLAGS_i386 += -m32\n-\tCFG_GCCISH_CFLAGS_x86_64 += -m32\n-\tCFG_GCCISH_LINK_FLAGS_x86_64 += -m32\n-  endif\n+  CFG_GCCISH_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n+  CFG_GCCISH_PRE_LIB_FLAGS := -Wl,-whole-archive\n+  CFG_GCCISH_POST_LIB_FLAGS := -Wl,-no-whole-archive\n+  CFG_GCCISH_CFLAGS_i386 += -m32\n+  CFG_GCCISH_LINK_FLAGS_i386 += -m32\n+  CFG_GCCISH_CFLAGS_x86_64 += -m64\n+  CFG_GCCISH_LINK_FLAGS_x86_64 += -m64\n   CFG_UNIXY := 1\n   CFG_LDENV := LD_LIBRARY_PATH\n   CFG_DEF_SUFFIX := .bsd.def\n@@ -246,4 +247,4 @@ define CFG_MAKE_ASSEMBLER\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES),\\\n-  $(eval $(call CFG_MAKE_ASSEMBLER,$(target))))\n\\ No newline at end of file\n+  $(eval $(call CFG_MAKE_ASSEMBLER,$(target))))"}, {"sha": "2eae42087290badf1ca360df307dc4aca2b1e710", "filename": "mk/rt.mk", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -119,6 +119,9 @@ ifeq ($$(CFG_WINDOWSY), 1)\n else ifeq ($(CFG_OSTYPE), apple-darwin)\n   LIBUV_OSTYPE_$(1) := mac\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/libuv.a\n+else ifeq ($(CFG_OSTYPE), unknown-freebsd)\n+  LIBUV_OSTYPE_$(1) := freebsd\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/libuv/libuv.a\n else\n   LIBUV_OSTYPE_$(1) := unix\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/libuv/libuv.a\n@@ -174,6 +177,12 @@ $$(LIBUV_LIB_$(1)): $$(wildcard \\\n # These could go in rt.mk or rustllvm.mk, they're needed for both.\n \n # This regexp has a single $, escaped twice\n+%.bsd.def:    %.def.in $$(MKFILE_DEPS)\n+\t@$$(call E, def: $$@)\n+\t$$(Q)echo \"{\" > $$@\n+\t$$(Q)sed 's/.$$$$/&;/' $$< >> $$@\n+\t$$(Q)echo \"};\" >> $$@\n+\n %.linux.def:    %.def.in $$(MKFILE_DEPS)\n \t@$$(call E, def: $$@)\n \t$$(Q)echo \"{\" > $$@"}, {"sha": "34f58b60aa91e72673419dccf0423b8c0fed3b2f", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -220,6 +220,7 @@ mod write {\n             } else { FileType = LLVMAssemblyFile; }\n             // Write optimized bitcode if --save-temps was on.\n \n+            let seg_stack = sess.get_targ_cfg().os != session::os_freebsd;\n             if opts.save_temps {\n                 // Always output the bitcode file with --save-temps\n \n@@ -244,7 +245,7 @@ mod write {\n                                     buf_o,\n                                     LLVMAssemblyFile,\n                                     CodeGenOptLevel,\n-                                    true)})});\n+                                    seg_stack)})});\n                 }\n \n \n@@ -264,7 +265,7 @@ mod write {\n                                         buf_o,\n                                         LLVMObjectFile,\n                                         CodeGenOptLevel,\n-                                        true)})});\n+                                        seg_stack)})});\n                 }\n             } else {\n                 // If we aren't saving temps then just output the file\n@@ -282,7 +283,7 @@ mod write {\n                                     buf_o,\n                                     FileType,\n                                     CodeGenOptLevel,\n-                                    true)})});\n+                                    seg_stack)})});\n             }\n             // Clean up and return\n \n@@ -566,7 +567,8 @@ fn link_binary(sess: session::session,\n         let rmlib =\n             bind fn (config: @session::config, filename: str) -> str {\n                      if config.os == session::os_macos ||\n-                            config.os == session::os_linux &&\n+                            (config.os == session::os_linux ||\n+                             config.os == session::os_freebsd) &&\n                                 str::find(filename, \"lib\") == 0 {\n                          ret str::slice(filename, 3u,\n                                         str::byte_len(filename));\n@@ -580,6 +582,7 @@ fn link_binary(sess: session::session,\n         ret alt config.os {\n               session::os_macos. { rmext(rmlib(filename)) }\n               session::os_linux. { rmext(rmlib(filename)) }\n+              session::os_freebsd. { rmext(rmlib(filename)) }\n               _ { rmext(filename) }\n             };\n     }\n@@ -657,6 +660,10 @@ fn link_binary(sess: session::session,\n         gcc_args += [\"-lrt\", \"-ldl\"];\n     }\n \n+    if sess.get_targ_cfg().os == session::os_freebsd {\n+        gcc_args += [\"-lrt\"];\n+    }\n+\n     // OS X 10.6 introduced 'compact unwind info', which is produced by the\n     // linker from the dwarf unwind info. Unfortunately, it does not seem to\n     // understand how to unwind our __morestack frame, so we have to turn it"}, {"sha": "fccacdcba801b1887072419e15ee3a3e6108bde2", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -105,6 +105,7 @@ fn get_rpath_relative_to_output(os: session::os,\n     // Mac doesn't appear to support $ORIGIN\n     let prefix = alt os {\n         session::os_linux. { \"$ORIGIN\" + fs::path_sep() }\n+        session::os_freebsd. { \"$ORIGIN\" + fs::path_sep() }\n         session::os_macos. { \"@executable_path\" + fs::path_sep() }\n     };\n \n@@ -191,6 +192,7 @@ fn minimize_rpaths(rpaths: [str]) -> [str] {\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n #[cfg(test)]\n mod test {\n     #[test]\n@@ -315,6 +317,14 @@ mod test {\n         assert res == \"$ORIGIN/../lib\";\n     }\n \n+    #[test]\n+    #[cfg(target_os = \"freebsd\")]\n+    fn test_rpath_relative() {\n+        let res = get_rpath_relative_to_output(session::os_freebsd,\n+            \"/usr\", \"bin/rustc\", \"lib/libstd.so\");\n+        assert res == \"$ORIGIN/../lib\";\n+    }\n+\n     #[test]\n     #[cfg(target_os = \"macos\")]\n     fn test_rpath_relative() {"}, {"sha": "6e668b4c967c7c1efb0d352ab3533f4630b6d424", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -8,6 +8,7 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_macos. { \"__DATA,__note.rustc\" }\n           session::os_win32. { \".note.rustc\" }\n           session::os_linux. { \".note.rustc\" }\n+          session::os_freebsd. { \".note.rustc\" }\n         },\n \n         data_layout: alt target_os {\n@@ -24,12 +25,17 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_linux. {\n             \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n           }\n+\n+          session::os_freebsd. {\n+            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n+          }\n         },\n \n         target_triple: alt target_os {\n           session::os_macos. { \"i686-apple-darwin\" }\n           session::os_win32. { \"i686-pc-mingw32\" }\n           session::os_linux. { \"i686-unknown-linux-gnu\" }\n+          session::os_freebsd. { \"i686-unknown-freebsd\" }\n         },\n \n         gcc_args: [\"-m32\"]"}, {"sha": "b02910be489d6072321f791e30231879fde8aeb4", "filename": "src/comp/back/x86_64.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86_64.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -8,6 +8,7 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_macos. { \"__DATA,__note.rustc\" }\n           session::os_win32. { \".note.rustc\" }\n           session::os_linux. { \".note.rustc\" }\n+          session::os_freebsd. { \".note.rustc\" }\n         },\n \n         data_layout: alt target_os {\n@@ -29,12 +30,19 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n                 \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n                 \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n+\n+          session::os_freebsd. {\n+            \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n+                \"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                \"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n+          }\n         },\n \n         target_triple: alt target_os {\n           session::os_macos. { \"x86_64-apple-darwin\" }\n           session::os_win32. { \"x86_64-pc-mingw32\" }\n           session::os_linux. { \"x86_64-unknown-linux-gnu\" }\n+          session::os_freebsd. { \"x86_64-unknown-freebsd\" }\n         },\n \n         gcc_args: [\"-m64\"]"}, {"sha": "ee8c36c3c8d01d4361fc5901f9e505b75d69122e", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -26,6 +26,7 @@ fn default_configuration(sess: session::session, argv0: str, input: str) ->\n           session::os_win32. { \"msvcrt.dll\" }\n           session::os_macos. { \"libc.dylib\" }\n           session::os_linux. { \"libc.so.6\" }\n+          session::os_freebsd. { \"libc.so.7\" }\n           _ { \"libc.so\" }\n         };\n \n@@ -294,6 +295,8 @@ fn get_os(triple: str) -> session::os {\n             session::os_macos\n         } else if str::find(triple, \"linux\") >= 0 {\n             session::os_linux\n+        } else if str::find(triple, \"freebsd\") >= 0 {\n+            session::os_freebsd\n         } else { early_error(\"Unknown operating system!\") };\n }\n "}, {"sha": "55f25a14f1d354ea2ff8b51a79e92aead655f383", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -9,7 +9,7 @@ import syntax::parse::parser::parse_sess;\n import util::filesearch;\n import back::target_strs;\n \n-tag os { os_win32; os_macos; os_linux; }\n+tag os { os_win32; os_macos; os_linux; os_freebsd; }\n \n tag arch { arch_x86; arch_x86_64; arch_arm; }\n "}, {"sha": "2536e2efcb573fff78bd17275b279574479856a7", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -129,6 +129,7 @@ fn default_native_lib_naming(sess: session::session, static: bool) ->\n       session::os_win32. { ret {prefix: \"\", suffix: \".dll\"}; }\n       session::os_macos. { ret {prefix: \"lib\", suffix: \".dylib\"}; }\n       session::os_linux. { ret {prefix: \"lib\", suffix: \".so\"}; }\n+      session::os_freebsd. { ret {prefix: \"lib\", suffix: \".so\"}; }\n     }\n }\n "}, {"sha": "a9564f87eb1b190cc8903f45af2d98d66400f787", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -5152,6 +5152,8 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         fn main_name() -> str { ret \"main\"; }\n         #[cfg(target_os = \"linux\")]\n         fn main_name() -> str { ret \"main\"; }\n+        #[cfg(target_os = \"freebsd\")]\n+        fn main_name() -> str { ret \"main\"; }\n         let llfty = T_fn([ccx.int_type, ccx.int_type], ccx.int_type);\n         let llfn = decl_cdecl_fn(ccx.llmod, main_name(), llfty);\n         let llbb = str::as_buf(\"top\", {|buf|"}, {"sha": "39ecb909a8585ca369a81f02c334153691343e0a", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -163,6 +163,7 @@ fn maybe_with_lib_path<T>(path: str, f: fn@() -> T) -> T {\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n fn maybe_with_lib_path<T>(_path: str, f: fn@() -> T) -> T {\n     f()\n }"}, {"sha": "fefa9d7e6172032e45fcf7d87cd618c6f0d32286", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -309,6 +309,7 @@ fn program_output(cx: cx, testfile: str, lib_path: str, prog: str,\n // Linux and mac don't require adjusting the library search path\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n fn make_cmdline(_libpath: str, prog: str, args: [str]) -> str {\n     #fmt[\"%s %s\", prog, str::connect(args, \" \")]\n }"}, {"sha": "eb8460374829b8d9bf011e744cfc9633adb8aaa0", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -17,6 +17,7 @@ fn make_new_path(path: str) -> str {\n }\n \n #[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"freebsd\")]\n fn lib_path_env_var() -> str { \"LD_LIBRARY_PATH\" }\n \n #[cfg(target_os = \"macos\")]\n@@ -27,6 +28,7 @@ fn lib_path_env_var() -> str { \"PATH\" }\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n fn path_div() -> str { \":\" }\n \n #[cfg(target_os = \"win32\")]"}, {"sha": "d62476a632e29f5022cd7f9014407d423b9bf4be", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -22,6 +22,9 @@ native mod f64 {\n     #[link_name=\"log\"] pure fn ln(n: f64) -> f64;\n     #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n     pure fn log10(n: f64) -> f64;\n+    #[cfg(target_os=\"linux\")]\n+    #[cfg(target_os=\"macos\")]\n+    #[cfg(target_os=\"win32\")]\n     pure fn log2(n: f64) -> f64;\n     pure fn modf(n: f64, iptr: *f64) -> f64;\n     pure fn pow(n: f64, e: f64) -> f64;\n@@ -56,6 +59,9 @@ native mod f32 {\n     #[link_name=\"ldexpf\"] pure fn ldexp(x: f32, n: c_int) -> f32;\n     #[link_name=\"logf\"] pure fn ln(n: f32) -> f32;\n     #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n+    #[cfg(target_os=\"linux\")]\n+    #[cfg(target_os=\"macos\")]\n+    #[cfg(target_os=\"win32\")]\n     #[link_name=\"log2f\"] pure fn log2(n: f32) -> f32;\n     #[link_name=\"log10f\"] pure fn log10(n: f32) -> f32;\n     #[link_name=\"modff\"] pure fn modf(n: f32, iptr: *f32) -> f32;"}, {"sha": "a91708580c19f222716fcc09b041b5479c2e6ca8", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -114,6 +114,11 @@ mod consts {\n     const ln_10: f32 = 2.30258509299404568401799145468436421f32;\n }\n \n+#[cfg(target_os=\"freebsd\")]\n+pure fn log2(n: f32) -> f32 {\n+    ret ln(n) / ln(2f32)\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "73f807a4285cf7f57b33e4a3fcdb242c4177550d", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -114,6 +114,11 @@ mod consts {\n     const ln_10: f64 = 2.30258509299404568401799145468436421f64;\n }\n \n+#[cfg(target_os=\"freebsd\")]\n+pure fn log2(n: f64) -> f64 {\n+    ret ln(n) / ln(2f64)\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "4fecf418213e3990f833083132ffe6554b897f85", "filename": "src/libstd/freebsd_os.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Ffreebsd_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Ffreebsd_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffreebsd_os.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -0,0 +1,155 @@\n+/*\n+Module: os\n+\n+TODO: Restructure and document\n+*/\n+\n+import core::option;\n+import core::ctypes::*;\n+\n+export libc;\n+export libc_constants;\n+export pipe;\n+export fd_FILE;\n+export close;\n+export fclose;\n+export waitpid;\n+export getcwd;\n+export exec_suffix;\n+export target_os;\n+export dylib_filename;\n+export get_exe_path;\n+export fsync_fd;\n+\n+// FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n+// by https://github.com/graydon/rust/issues#issue/268\n+\n+#[link_name = \"\"]               // FIXME remove after #[nolink] is snapshotted\n+#[nolink]\n+#[abi = \"cdecl\"]\n+native mod libc {\n+    fn read(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n+    fn write(fd: fd_t, buf: *u8, count: size_t) -> ssize_t;\n+    fn fread(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n+    fn fwrite(buf: *u8, size: size_t, n: size_t, f: libc::FILE) -> size_t;\n+    fn open(s: str::sbuf, flags: c_int, mode: unsigned) -> fd_t;\n+    fn close(fd: fd_t) -> c_int;\n+    type FILE;\n+    fn fopen(path: str::sbuf, mode: str::sbuf) -> FILE;\n+    fn fdopen(fd: fd_t, mode: str::sbuf) -> FILE;\n+    fn fclose(f: FILE);\n+    fn fflush(f: FILE) -> c_int;\n+    fn fsync(fd: fd_t) -> c_int;\n+    fn fileno(f: FILE) -> fd_t;\n+    fn fgetc(f: FILE) -> c_int;\n+    fn ungetc(c: c_int, f: FILE);\n+    fn feof(f: FILE) -> c_int;\n+    fn fseek(f: FILE, offset: long, whence: c_int) -> c_int;\n+    fn ftell(f: FILE) -> long;\n+    type dir;\n+    fn opendir(d: str::sbuf) -> dir;\n+    fn closedir(d: dir) -> c_int;\n+    type dirent;\n+    fn readdir(d: dir) -> dirent;\n+    fn getenv(n: str::sbuf) -> str::sbuf;\n+    fn setenv(n: str::sbuf, v: str::sbuf, overwrite: c_int) -> c_int;\n+    fn unsetenv(n: str::sbuf) -> c_int;\n+    fn pipe(buf: *mutable fd_t) -> c_int;\n+    fn waitpid(pid: pid_t, &status: c_int, options: c_int) -> pid_t;\n+    fn readlink(path: str::sbuf, buf: str::sbuf, bufsize: size_t) -> ssize_t;\n+    fn mkdir(path: str::sbuf, mode: c_int) -> c_int;\n+    fn rmdir(path: str::sbuf) -> c_int;\n+    fn chdir(path: str::sbuf) -> c_int;\n+\n+    fn sysctl(name: *c_int, namelen: c_uint,\n+              oldp: *u8, &oldlenp: size_t,\n+              newp: *u8, newlen: size_t) -> c_int;\n+}\n+\n+mod libc_constants {\n+    const O_RDONLY: c_int = 0i32;\n+    const O_WRONLY: c_int = 1i32;\n+    const O_RDWR: c_int   = 2i32;\n+    const O_APPEND: c_int = 8i32;\n+    const O_CREAT: c_int  = 512i32;\n+    const O_EXCL: c_int   = 2048i32;\n+    const O_TRUNC: c_int  = 1024i32;\n+    const O_TEXT: c_int   = 0i32;     // nonexistent in FreeBSD libc\n+    const O_BINARY: c_int = 0i32;     // nonexistent in FreeBSD libc\n+\n+    const S_IRUSR: unsigned = 256u32;\n+    const S_IWUSR: unsigned = 128u32;\n+\n+    const CTL_KERN: c_int = 1i32;\n+    const KERN_PROC: c_int = 14i32;\n+    const KERN_PROC_PATHNAME: c_int = 12i32;\n+}\n+\n+fn pipe() -> {in: fd_t, out: fd_t} {\n+    let fds = {mutable in: 0i32, mutable out: 0i32};\n+    assert (os::libc::pipe(ptr::mut_addr_of(fds.in)) == 0i32);\n+    ret {in: fds.in, out: fds.out};\n+}\n+\n+fn fd_FILE(fd: fd_t) -> libc::FILE {\n+    ret str::as_buf(\"r\", {|modebuf| libc::fdopen(fd, modebuf) });\n+}\n+\n+fn close(fd: fd_t) -> c_int {\n+    libc::close(fd)\n+}\n+\n+fn fclose(file: libc::FILE) {\n+    libc::fclose(file)\n+}\n+\n+fn fsync_fd(fd: fd_t, _l: io::fsync::level) -> c_int {\n+    ret libc::fsync(fd);\n+}\n+\n+fn waitpid(pid: pid_t) -> i32 {\n+    let status = 0i32;\n+    assert (os::libc::waitpid(pid, status, 0i32) != -1i32);\n+    ret status;\n+}\n+\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n+    fn rust_getcwd() -> str;\n+}\n+\n+fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n+\n+fn exec_suffix() -> str { ret \"\"; }\n+\n+fn target_os() -> str { ret \"freebsd\"; }\n+\n+fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".so\"; }\n+\n+/// Returns the directory containing the running program\n+/// followed by a path separator\n+fn get_exe_path() -> option::t<fs::path> unsafe {\n+    let bufsize = 1023u;\n+    let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize));\n+    let mib = [libc_constants::CTL_KERN,\n+               libc_constants::KERN_PROC,\n+               libc_constants::KERN_PROC_PATHNAME, -1i32];\n+    ret str::as_buf(path, { |path_buf|\n+        if libc::sysctl(vec::unsafe::to_ptr(mib),\n+                        vec::len(mib) as c_uint,\n+                        path_buf, bufsize,\n+                        ptr::null(), 0u) == 0i32 {\n+            option::some(fs::dirname(path) + fs::path_sep())\n+        } else {\n+            option::none\n+        }\n+    });\n+}\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:"}, {"sha": "330305651436549b6bc19883742875525154f283", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -148,6 +148,7 @@ fn make_dir(p: path, mode: ctypes::c_int) -> bool {\n \n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n     fn mkdir(_p: path, _mode: ctypes::c_int) -> bool {\n         ret str::as_buf(_p, {|buf| os::libc::mkdir(buf, _mode) == 0i32 });\n     }\n@@ -186,6 +187,7 @@ fn remove_dir(p: path) -> bool {\n \n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n     fn rmdir(_p: path) -> bool {\n         ret str::as_buf(_p, {|buf| os::libc::rmdir(buf) == 0i32 });\n     }\n@@ -201,6 +203,7 @@ fn change_dir(p: path) -> bool {\n \n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n     fn chdir(_p: path) -> bool {\n         ret str::as_buf(_p, {|buf| os::libc::chdir(buf) == 0i32 });\n     }\n@@ -367,6 +370,7 @@ fn normalize(p: path) -> path {\n \n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n     fn reabsolute(orig: path, new: path) -> path {\n         if path_is_absolute(orig) {\n             path_sep() + new"}, {"sha": "6ffcb75c97741be2339de800d20885196da1889d", "filename": "src/libstd/generic_os.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgeneric_os.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -28,6 +28,7 @@ fn setenv(n: str, v: str) { }\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n fn getenv(n: str) -> option::t<str> unsafe {\n     let s = str::as_buf(n, {|buf| os::libc::getenv(buf) });\n     ret if unsafe::reinterpret_cast(s) == 0 {\n@@ -40,6 +41,7 @@ fn getenv(n: str) -> option::t<str> unsafe {\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n fn setenv(n: str, v: str) {\n     // FIXME (868)\n     str::as_buf("}, {"sha": "11bc15d578f853d8c1ce0ad6fc494e66d7e7ca4e", "filename": "src/libstd/run_program.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun_program.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -266,13 +266,15 @@ fn waitpid(pid: pid_t) -> int {\n \n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n+    #[cfg(target_os = \"freebsd\")]\n     fn waitpid_os(pid: pid_t) -> int {\n         #[cfg(target_os = \"linux\")]\n         fn WIFEXITED(status: i32) -> bool {\n             (status & 0xffi32) == 0i32\n         }\n \n         #[cfg(target_os = \"macos\")]\n+        #[cfg(target_os = \"freebsd\")]\n         fn WIFEXITED(status: i32) -> bool {\n             (status & 0x7fi32) == 0i32\n         }\n@@ -283,6 +285,7 @@ fn waitpid(pid: pid_t) -> int {\n         }\n \n         #[cfg(target_os = \"macos\")]\n+        #[cfg(target_os = \"freebsd\")]\n         fn WEXITSTATUS(status: i32) -> i32 {\n             status >> 8i32\n         }"}, {"sha": "8acb1ac9ef92ec677e92d7b20cf919db37fbf0e4", "filename": "src/libstd/std.rc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -98,6 +98,13 @@ mod os;\n #[path = \"posix_fs.rs\"]\n mod os_fs;\n \n+#[cfg(target_os = \"freebsd\")]\n+#[path = \"freebsd_os.rs\"]\n+mod os;\n+#[cfg(target_os = \"freebsd\")]\n+#[path = \"posix_fs.rs\"]\n+mod os_fs;\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "b24008448bb72c20cb30a136cd2c0fb0b278a632", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -5,6 +5,7 @@ the C libuv API. Does very little right now pending scheduler improvements.\n \n #[cfg(target_os = \"linux\")];\n #[cfg(target_os = \"macos\")];\n+#[cfg(target_os = \"freebsd\")];\n \n export sanity_check;\n export loop_t, idle_t;\n@@ -39,6 +40,7 @@ type idle_cb = opaque_cb;\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n type handle_private_fields = {\n     a00: ctypes::c_int,\n     a01: ctypes::c_int,\n@@ -121,6 +123,7 @@ fn sanity_check() {\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n+#[cfg(target_os = \"freebsd\")]\n fn handle_fields_new() -> handle_fields {\n     {\n         loop: ptr::null(),\n@@ -149,4 +152,4 @@ fn idle_new() -> idle_t {\n     {\n         fields: handle_fields_new()\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c04c3e01c7ea413a675f4407f742bb61b0ea12b2", "filename": "src/rt/arch/i386/ccall.S", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fi386%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fi386%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fccall.S?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -16,20 +16,20 @@ ___morestack:\n __morestack:\n #endif\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_startproc\n #endif\n \n \tpushl %ebp\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_def_cfa_offset 8\n \t.cfi_offset %ebp, -8\n #endif\n \n \tmovl %esp,%ebp          // save esp\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_def_cfa_register %ebp\n #endif\n \n@@ -42,6 +42,6 @@ __morestack:\n \n \tret\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_endproc\n-#endif\n\\ No newline at end of file\n+#endif"}, {"sha": "d1433213b2d018912ac55d7ce7a1000fbda02b9e", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -72,7 +72,7 @@\n #define UPCALL_DEL_STACK        L_upcall_del_stack$stub\n #define MORESTACK               ___morestack\n #else\n-#if defined(__linux__)\n+#if defined(__linux__) || defined(__FreeBSD__)\n #define UPCALL_NEW_STACK        upcall_new_stack\n #define UPCALL_DEL_STACK        upcall_del_stack\n #define RUST_GET_TASK           rust_get_task\n@@ -93,7 +93,7 @@\n .globl MORESTACK\n \n // FIXME: What about _WIN32?\t\n-#if defined(__linux__)\n+#if defined(__linux__) || defined(__FreeBSD__)\n \t.hidden MORESTACK\n #else\n #if defined(__APPLE__)\n@@ -106,7 +106,7 @@\n #endif\n \n MORESTACK:\n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_startproc\n #endif\n \n@@ -125,15 +125,15 @@ MORESTACK:\n \t// __morestack, and an extra return address.\n \n \tpushl %ebp\n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t// The CFA is 20 bytes above the register that it is\n \t// associated with for this frame (which will be %ebp)\n \t.cfi_def_cfa_offset 20\n \t// %ebp is -20 bytes from the CFA\n \t.cfi_offset %ebp, -20\n #endif\n \tmovl %esp, %ebp\n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t// Calculate the CFA as an offset from %ebp\n \t.cfi_def_cfa_register %ebp\n #endif\n@@ -216,7 +216,7 @@ MORESTACK:\n \t// FIXME: I don't think these rules are necessary\n \t// since the unwinder should never encounter an instruction\n \t// pointer pointing here.\n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t// Restore the rule for how to find %ebp\n \t.cfi_restore %ebp\n \t// Tell the unwinder how to find the CFA in terms of %esp\n@@ -234,7 +234,7 @@ MORESTACK:\n \t\n \tjmpl *%eax\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_endproc\n #endif\n "}, {"sha": "1b698ed74bf50428f05249af684bfb4699517ef4", "filename": "src/rt/arch/i386/record_sp.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Frecord_sp.S?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -14,7 +14,7 @@\n .globl GET_SP\n .globl CHECK_STACK\n \n-#if defined(__linux__)\n+#if defined(__linux__) || defined(__FreeBSD__)\n RECORD_SP:\n \tmovl 4(%esp), %eax\n \tmovl %eax, %gs:48"}, {"sha": "42415e84a52f0cd1a6ad3437ee1b5a743bb5d540", "filename": "src/rt/arch/x86_64/ccall.S", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fccall.S?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -23,19 +23,19 @@ ___morestack:\n __morestack:\n #endif\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_startproc\n #endif\n \n \tpush %rbp\n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_def_cfa_offset 16\n \t.cfi_offset %rbp, -16\n #endif\n \n \tmov %rsp,%rbp          // save rsp\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_def_cfa_register %rbp\n #endif\n \n@@ -46,6 +46,6 @@ __morestack:\n \n \tret\n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n \t.cfi_endproc\n #endif"}, {"sha": "b19092c4aa637ac5e24729bccf38a70a80720a04", "filename": "src/rt/arch/x86_64/context.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.h?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -31,7 +31,11 @@ extern \"C\" void __morestack(void *args, void *fn_ptr, uintptr_t stack_ptr);\n \n class context {\n public:\n+#ifdef __FreeBSD__\n+    registers_t regs __attribute__(aligned(16));\n+#else\n     registers_t regs;\n+#endif\n     \n     context();\n     "}, {"sha": "89ca9d21452c002ff3dc63d67e5b6d9683687782", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -20,7 +20,7 @@\n .globl UPCALL_DEL_STACK\n .globl MORESTACK\n \n-#if defined(__linux__)\n+#if defined(__linux__) || defined(__FreeBSD__)\n \t.hidden MORESTACK\n #else\n #if defined(__APPLE__)\n@@ -33,7 +33,7 @@\n #endif\n \n \n-#if defined(__linux__) || defined(__APPLE__)\n+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__)\n MORESTACK:\n \t.cfi_startproc\n \n@@ -92,6 +92,9 @@ MORESTACK:\n #ifdef __linux__\n \tcall UPCALL_NEW_STACK@PLT\n #endif\n+#ifdef __FreeBSD__\n+\tcall UPCALL_NEW_STACK@PLT\n+#endif\n \n \t// Pop the saved arguments\n \tmovdqa    (%rsp), %xmm0\n@@ -135,6 +138,9 @@ MORESTACK:\n #ifdef __linux__\n \tcall UPCALL_DEL_STACK@PLT\n #endif\n+#ifdef __FreeBSD__\n+\tcall UPCALL_DEL_STACK@PLT\n+#endif\n \n \tpopq %rax // Restore the return value\n \tpopq %rbp"}, {"sha": "4330d4cfb76021ae6e9f76d13b4fd186869e9362", "filename": "src/rt/arch/x86_64/record_sp.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -14,7 +14,7 @@\n .globl GET_SP\n .globl CHECK_STACK\n \n-#if defined(__linux__)\n+#if defined(__linux__) || defined(__FreeBSD__)\n RECORD_SP:\n \tmovq %rdi, %fs:112\n \tret"}, {"sha": "b533ab1f673a481154ea5769329031ced142df2e", "filename": "src/rt/rust_abi.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Frust_abi.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Frust_abi.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.cpp?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -7,7 +7,7 @@\n #include <stdint.h>\n #include \"rust_abi.h\"\n \n-#if defined(__APPLE__) || defined(__linux__)\n+#if defined(__APPLE__) || defined(__linux__) || defined(__FreeBSD__)\n #define HAVE_DLFCN_H\n #include <dlfcn.h>\n #elif defined(_WIN32)"}, {"sha": "92f24c8c7fa6bcb68d7136bb769062ff7d5d6a1c", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -23,6 +23,8 @@\n #define RZ_MAC_32   (1024*20)\n #define RZ_MAC_64   (1024*20)\n #define RZ_WIN_32   (1024*20)\n+#define RZ_BSD_32   (1024*20)\n+#define RZ_BSD_64   (1024*20)\n \n #ifdef __linux__\n #ifdef __i386__\n@@ -48,6 +50,14 @@\n #define RED_ZONE_SIZE RZ_WIN_64\n #endif\n #endif\n+#ifdef __FreeBSD__\n+#ifdef __i386__\n+#define RED_ZONE_SIZE RZ_BSD_32\n+#endif\n+#ifdef __x86_64__\n+#define RED_ZONE_SIZE RZ_BSD_64\n+#endif\n+#endif\n \n // A value that goes at the end of the stack and must not be touched\n const uint8_t stack_canary[] = {0xAB, 0xCD, 0xAB, 0xCD,"}, {"sha": "7d64842994e8c93d64e51c0b74fc6b423a8a889a", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -20,7 +20,7 @@\n // the rust stack and happen frequently enough to catch most stack changes,\n // including at the beginning of all landing pads.\n // FIXME: Enable this for windows\n-#if defined __linux__ || defined __APPLE__\n+#if defined __linux__ || defined __APPLE__ || defined __FreeBSD__\n extern \"C\" void\n check_stack_alignment() __attribute__ ((aligned (16)));\n #else"}, {"sha": "663bc50fd0259376d9820cf27fbf9f73981bdc9c", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -8,4 +8,7 @@ mod hello;\n mod hello;\n \n #[cfg(target_os = \"win32\")]\n-mod hello;\n\\ No newline at end of file\n+mod hello;\n+\n+#[cfg(target_os = \"freebsd\")]\n+mod hello;"}, {"sha": "b9d9b84a526c75473718e940b786df8da55271ee", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -19,4 +19,5 @@ fn main() {\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"freebsd\")]\n fn main() { }"}, {"sha": "e58656a73a44f39fcc66f5a68e23ac2dea7a888a", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -24,4 +24,5 @@ fn main() {\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"freebsd\")]\n fn main() { }"}, {"sha": "a7f6e0a8f15730fc3ee97b9fe83497e4b7bdbff2", "filename": "src/test/stdtest/uv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Fstdtest%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59c4b1b47b84879edfc43e7278553105930f0e2/src%2Ftest%2Fstdtest%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fuv.rs?ref=a59c4b1b47b84879edfc43e7278553105930f0e2", "patch": "@@ -1,6 +1,7 @@\n \n #[cfg(target_os = \"linux\")];\n #[cfg(target_os = \"macos\")];\n+#[cfg(target_os = \"freebsd\")];\n \n import core::*;\n \n@@ -44,4 +45,4 @@ mod test_ref {\n         uv::loop_delete(loop);\n         */\n     }\n-}\n\\ No newline at end of file\n+}"}]}