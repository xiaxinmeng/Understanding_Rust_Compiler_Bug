{"sha": "c49ba058a0d61b929975f47daf25f19dd22de9c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OWJhMDU4YTBkNjFiOTI5OTc1ZjQ3ZGFmMjVmMTlkZDIyZGU5YzY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-10-26T22:41:56Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-12-09T18:37:42Z"}, "message": "Create tar balls of save-analysis-api metadata for the standard libraries as part of `make dist`.", "tree": {"sha": "fe9edd3f30292327882e50e7dd063165eaf21529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9edd3f30292327882e50e7dd063165eaf21529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c49ba058a0d61b929975f47daf25f19dd22de9c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c49ba058a0d61b929975f47daf25f19dd22de9c6", "html_url": "https://github.com/rust-lang/rust/commit/c49ba058a0d61b929975f47daf25f19dd22de9c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c49ba058a0d61b929975f47daf25f19dd22de9c6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd148d220e976330672c9f5b5a9720701079b8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd148d220e976330672c9f5b5a9720701079b8e8", "html_url": "https://github.com/rust-lang/rust/commit/bd148d220e976330672c9f5b5a9720701079b8e8"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "2f674a311fef4d09245e4be3937d2bb4c7f44e34", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=c49ba058a0d61b929975f47daf25f19dd22de9c6", "patch": "@@ -125,6 +125,11 @@ fn main() {\n             cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n         }\n \n+        // Emit save-analysis info.\n+        if env::var(\"RUSTC_SAVE_ANALYSIS\") == Ok(\"api\".to_string()) {\n+            cmd.arg(\"-Zsave-analysis-api\");\n+        }\n+\n         // Dealing with rpath here is a little special, so let's go into some\n         // detail. First off, `-rpath` is a linker option on Unix platforms\n         // which adds to the runtime dynamic loader path when looking for"}, {"sha": "1d3445a9eac451277c6c5853f2dd878ab5aa37fe", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c49ba058a0d61b929975f47daf25f19dd22de9c6", "patch": "@@ -23,7 +23,7 @@ use std::io::Write;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n-use {Build, Compiler};\n+use {Build, Compiler, Mode};\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy};\n \n pub fn package_vers(build: &Build) -> &str {\n@@ -289,6 +289,50 @@ pub fn rust_src_location(build: &Build) -> PathBuf {\n     distdir(build).join(&format!(\"{}.tar.gz\", plain_name))\n }\n \n+/// Creates a tarball of save-analysis metadata, if available.\n+pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n+    println!(\"Dist analysis\");\n+\n+    if build.config.channel != \"nightly\" {\n+        println!(\"Skipping dist-analysis - not on nightly channel\");\n+        return;\n+    }\n+    if compiler.stage != 2 {\n+        return\n+    }\n+\n+    let name = format!(\"rust-analysis-{}\", package_vers(build));\n+    let image = tmpdir(build).join(format!(\"{}-{}-image\", name, target));\n+\n+    let src = build.stage_out(compiler, Mode::Libstd).join(target).join(\"release\").join(\"deps\");\n+\n+    let image_src = src.join(\"save-analysis\");\n+    let dst = image.join(\"lib/rustlib\").join(target).join(\"analysis\");\n+    t!(fs::create_dir_all(&dst));\n+    cp_r(&image_src, &dst);\n+\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=save-analysis-saved.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--package-name={}-{}\", name, target))\n+       .arg(format!(\"--component-name=rust-analysis-{}\", target))\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+    t!(fs::remove_dir_all(&image));\n+\n+    // Create plain source tarball\n+    let mut cmd = Command::new(\"tar\");\n+    cmd.arg(\"-czf\").arg(sanitize_sh(&distdir(build).join(&format!(\"{}.tar.gz\", name))))\n+       .arg(\"analysis\")\n+       .current_dir(&src);\n+    build.run(&mut cmd);\n+}\n+\n /// Creates the `rust-src` installer component and the plain source tarball\n pub fn rust_src(build: &Build) {\n     println!(\"Dist src\");"}, {"sha": "cd80c4298dc41b594616afcd86b96789bf4f9ec3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c49ba058a0d61b929975f47daf25f19dd22de9c6", "patch": "@@ -507,6 +507,10 @@ impl Build {\n                  .env(format!(\"CFLAGS_{}\", target), self.cflags(target).join(\" \"));\n         }\n \n+        if self.config.channel == \"nightly\" && compiler.stage == 2 {\n+            cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n+        }\n+\n         // Environment variables *required* needed throughout the build\n         //\n         // FIXME: should update code to not require this env var"}, {"sha": "884cc7da8eaf8f6f39492a313540602263bdc205", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c49ba058a0d61b929975f47daf25f19dd22de9c6/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=c49ba058a0d61b929975f47daf25f19dd22de9c6", "patch": "@@ -499,6 +499,10 @@ pub fn build_rules(build: &Build) -> Rules {\n          .default(true)\n          .dep(|s| s.name(\"default:doc\"))\n          .run(move |s| dist::docs(build, s.stage, s.target));\n+    rules.dist(\"dist-analysis\", \"src/libstd\")\n+         .dep(|s| s.name(\"dist-std\"))\n+         .default(true)\n+         .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n     rules.dist(\"install\", \"src\")\n          .dep(|s| s.name(\"default:dist\"))\n          .run(move |s| install::install(build, s.stage, s.target));"}]}