{"sha": "89c761058ab75334d864283c5881d59f7fad33c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Yzc2MTA1OGFiNzUzMzRkODY0MjgzYzU4ODFkNTlmN2ZhZDMzYzI=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-01-18T21:59:56Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-02-23T17:00:01Z"}, "message": "Constify ptr::write and the write[_unaligned] methods on *mut T\n\nConstify intrinsics::forget", "tree": {"sha": "e28055ae4cc44b6ec6ecc4e79c2ac1fe69fbd438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e28055ae4cc44b6ec6ecc4e79c2ac1fe69fbd438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c761058ab75334d864283c5881d59f7fad33c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEeQ9lb2ZjsXFBDRuFH1AezRu9cKcFAmA1NNUACgkQH1AezRu9\ncKdpng/8DhbjsQ3kAP7fs8daAAm9ncXzbaRjJo7gmMH6evwxnUb3Uo2eFjkG9InD\nlc1qDjhlAMWwhp/297uW5/h+PIO0LT+06P59jF68/xfyroJK7jS5KfMuj+vVWMbo\nuT7jFWW2FAta6sKlB7dbftPWfb8XX4+mPXJf11s5S2MXD3CFVML7LP8GHmGa/3+Q\ntFamGh/dxehGHLioAMZg5GsxjciECw217UtJAwQegUBgfz1jlMGb9ALcK555YJva\nhlnzOO7dQc+9b/IWGUTTof2MroRhWSycq4B+FjLObq/vuE0snFfgMTI52HGJP9PK\nGlVQRerCPqT37PzZCyLxq9v+y+JrZdj/MtEWgf5ciZQi/ZflpDCc9Om3JA6yGKcj\nw9AWYXyieIUsnHwJNarfS4QUjnAMZ9A9krpF+2ND7tlsk85mYa/qU7j5vN21h/AU\nEj7IVzTCCUuxzAjnM+66wmhyvcUL4xUwICtjdJPixRpY//U7d1xRyzONNfTYH9r2\nWzYDd5+f5Dzc4vtHvOk+r0TQuQukDR3NERjBDEQ+BrRf5DRkbDpVcvcYE7Ts1xcM\nzR1UKesp5biBIz/nfnZ2YVmlz3ld/VgZi7u6idQpVQg8xTeTtU/M1HokRm90q4Un\n/CdyC1heI6f9TZurjPWl19GGA3oiURcvvsZZHiUfnhdjcutc1/M=\n=HEoR\n-----END PGP SIGNATURE-----", "payload": "tree e28055ae4cc44b6ec6ecc4e79c2ac1fe69fbd438\nparent 446d4533e89db04f9568be4199e56b5fce0d176d\nauthor Albin Hedman <albin9604@gmail.com> 1611007196 +0100\ncommitter Albin Hedman <albin9604@gmail.com> 1614099601 +0100\n\nConstify ptr::write and the write[_unaligned] methods on *mut T\n\nConstify intrinsics::forget\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c761058ab75334d864283c5881d59f7fad33c2", "html_url": "https://github.com/rust-lang/rust/commit/89c761058ab75334d864283c5881d59f7fad33c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c761058ab75334d864283c5881d59f7fad33c2/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446d4533e89db04f9568be4199e56b5fce0d176d", "url": "https://api.github.com/repos/rust-lang/rust/commits/446d4533e89db04f9568be4199e56b5fce0d176d", "html_url": "https://github.com/rust-lang/rust/commit/446d4533e89db04f9568be4199e56b5fce0d176d"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "5274262ded2b20d9874b0586ba3ce8f4902a034c", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=89c761058ab75334d864283c5881d59f7fad33c2", "patch": "@@ -833,6 +833,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This exists solely for [`mem::forget_unsized`]; normal `forget` uses\n     /// `ManuallyDrop` instead.\n+    #[rustc_const_unstable(feature = \"const_intrinsic_forget\", issue = \"none\")]\n     pub fn forget<T: ?Sized>(_: T);\n \n     /// Reinterprets the bits of a value of one type as another type."}, {"sha": "64e2a95130999743982c84bbac9ab5a56b6ed23e", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=89c761058ab75334d864283c5881d59f7fad33c2", "patch": "@@ -73,10 +73,12 @@\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]\n #![feature(const_intrinsic_copy)]\n+#![feature(const_intrinsic_forget)]\n #![feature(const_float_classify)]\n #![feature(const_float_bits_conv)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_mut_refs)]\n+#![feature(const_refs_to_cell)]\n #![feature(const_cttz)]\n #![feature(const_panic)]\n #![feature(const_pin)]\n@@ -90,6 +92,7 @@\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]\n+#![feature(const_ptr_write)]\n #![feature(const_raw_ptr_comparison)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_slice_from_raw_parts)]"}, {"sha": "481d5d772b4a91b839cb78b2dcdb955f3b45b77f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=89c761058ab75334d864283c5881d59f7fad33c2", "patch": "@@ -902,7 +902,8 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn write<T>(dst: *mut T, src: T) {\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n+pub const unsafe fn write<T>(dst: *mut T, src: T) {\n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function.\n@@ -998,14 +999,16 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n-pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n+pub const unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function.\n     unsafe {\n         copy_nonoverlapping(&src as *const T as *const u8, dst as *mut u8, mem::size_of::<T>());\n+        // We are calling the intrinsic directly to avoid function calls in the generated code.\n+        intrinsics::forget(src);\n     }\n-    mem::forget(src);\n }\n \n /// Performs a volatile read of the value from `src` without moving it. This"}, {"sha": "4e3e88b946cd9311bdfbce391f3c975e5698a7bd", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=89c761058ab75334d864283c5881d59f7fad33c2", "patch": "@@ -1003,8 +1003,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn write(self, val: T)\n+    pub const unsafe fn write(self, val: T)\n     where\n         T: Sized,\n     {\n@@ -1057,8 +1058,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write_unaligned`]: crate::ptr::write_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"none\")]\n     #[inline]\n-    pub unsafe fn write_unaligned(self, val: T)\n+    pub const unsafe fn write_unaligned(self, val: T)\n     where\n         T: Sized,\n     {"}, {"sha": "152fed803ecdb751167ccbb31a3155958920523a", "filename": "library/core/tests/const_ptr.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Ftests%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Ftests%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconst_ptr.rs?ref=89c761058ab75334d864283c5881d59f7fad33c2", "patch": "@@ -49,3 +49,53 @@ fn mut_ptr_read() {\n     const UNALIGNED: u16 = unsafe { UNALIGNED_PTR.read_unaligned() };\n     assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n }\n+\n+#[test]\n+fn write() {\n+    use core::ptr;\n+\n+    const fn write_aligned() -> i32 {\n+        let mut res = 0;\n+        unsafe {\n+            ptr::write(&mut res as *mut _, 42);\n+        }\n+        res\n+    }\n+    const ALIGNED: i32 = write_aligned();\n+    assert_eq!(ALIGNED, 42);\n+\n+    const fn write_unaligned() -> [u16; 2] {\n+        let mut two_aligned = [0u16; 2];\n+        unsafe {\n+            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            ptr::write_unaligned(unaligned_ptr, u16::from_ne_bytes([0x23, 0x45]));\n+        }\n+        two_aligned\n+    }\n+    const UNALIGNED: [u16; 2] = write_unaligned();\n+    assert_eq!(UNALIGNED, [u16::from_ne_bytes([0x00, 0x23]), u16::from_ne_bytes([0x45, 0x00])]);\n+}\n+\n+#[test]\n+fn mut_ptr_write() {\n+    const fn aligned() -> i32 {\n+        let mut res = 0;\n+        unsafe {\n+            (&mut res as *mut i32).write(42);\n+        }\n+        res\n+    }\n+    const ALIGNED: i32 = aligned();\n+    assert_eq!(ALIGNED, 42);\n+\n+    const fn write_unaligned() -> [u16; 2] {\n+        let mut two_aligned = [0u16; 2];\n+        unsafe {\n+            let unaligned_ptr = (two_aligned.as_mut_ptr() as *mut u8).add(1) as *mut u16;\n+            unaligned_ptr.write_unaligned(u16::from_ne_bytes([0x23, 0x45]));\n+        }\n+        two_aligned\n+    }\n+    const UNALIGNED: [u16; 2] = write_unaligned();\n+    assert_eq!(UNALIGNED, [u16::from_ne_bytes([0x00, 0x23]), u16::from_ne_bytes([0x45, 0x00])]);\n+}"}, {"sha": "d6d3111e2ffa71f267a4e2de11271ebd66da3a90", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c761058ab75334d864283c5881d59f7fad33c2/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=89c761058ab75334d864283c5881d59f7fad33c2", "patch": "@@ -14,6 +14,7 @@\n #![feature(const_cell_into_inner)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_ptr_read)]\n+#![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]\n #![feature(control_flow_enum)]\n #![feature(core_intrinsics)]"}]}