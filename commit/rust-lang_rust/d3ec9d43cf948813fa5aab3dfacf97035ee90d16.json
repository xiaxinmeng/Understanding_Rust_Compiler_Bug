{"sha": "d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZWM5ZDQzY2Y5NDg4MTNmYTVhYWIzZGZhY2Y5NzAzNWVlOTBkMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-14T06:34:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-14T06:34:52Z"}, "message": "Auto merge of #33538 - Ms2ger:LocalCrateReader, r=arielb1\n\nRefactor code around LocalCrateReader.", "tree": {"sha": "48e535b0901b4db9b325c0d4bd6477328682c33e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e535b0901b4db9b325c0d4bd6477328682c33e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "html_url": "https://github.com/rust-lang/rust/commit/d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee865a56db3833e74801b71acf26264817c1637", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee865a56db3833e74801b71acf26264817c1637", "html_url": "https://github.com/rust-lang/rust/commit/dee865a56db3833e74801b71acf26264817c1637"}, {"sha": "c0e321abcbc25c47e55a808628fb7e65b3fe0f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e321abcbc25c47e55a808628fb7e65b3fe0f98", "html_url": "https://github.com/rust-lang/rust/commit/c0e321abcbc25c47e55a808628fb7e65b3fe0f98"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "f0eb580cfd57e70c494ba0e25776eab2069d0e8c", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "patch": "@@ -196,7 +196,7 @@ pub struct Map<'ast> {\n     /// plain old integers.\n     map: RefCell<Vec<MapEntry<'ast>>>,\n \n-    definitions: &'ast RefCell<Definitions>,\n+    definitions: RefCell<Definitions>,\n }\n \n impl<'ast> Map<'ast> {\n@@ -790,7 +790,7 @@ pub fn collect_definitions<'ast>(krate: &'ast ast::Crate) -> Definitions {\n }\n \n pub fn map_crate<'ast>(forest: &'ast mut Forest,\n-                       definitions: &'ast RefCell<Definitions>)\n+                       definitions: Definitions)\n                        -> Map<'ast> {\n     let mut collector = NodeCollector::root(&forest.krate);\n     intravisit::walk_crate(&mut collector, &forest.krate);\n@@ -816,7 +816,7 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest,\n         forest: forest,\n         dep_graph: forest.dep_graph.clone(),\n         map: RefCell::new(map),\n-        definitions: definitions,\n+        definitions: RefCell::new(definitions),\n     }\n }\n "}, {"sha": "da36cb7c2e4f2db9e201f21f21d0c1abc20af0e0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "patch": "@@ -28,7 +28,7 @@ use rustc_borrowck as borrowck;\n use rustc_incremental;\n use rustc_resolve as resolve;\n use rustc_metadata::macro_import;\n-use rustc_metadata::creader::LocalCrateReader;\n+use rustc_metadata::creader::read_local_crates;\n use rustc_metadata::cstore::CStore;\n use rustc_trans::back::link;\n use rustc_trans::back::write;\n@@ -155,22 +155,21 @@ pub fn compile_input(sess: &Session,\n         let dep_graph = DepGraph::new(sess.opts.build_dep_graph());\n \n         // Collect defintions for def ids.\n-        let defs = &RefCell::new(time(sess.time_passes(),\n-                                 \"collecting defs\",\n-                                 || hir_map::collect_definitions(&expanded_crate)));\n+        let mut defs = time(sess.time_passes(),\n+                            \"collecting defs\",\n+                            || hir_map::collect_definitions(&expanded_crate));\n \n         time(sess.time_passes(),\n              \"external crate/lib resolution\",\n-             || LocalCrateReader::new(sess, &cstore, defs, &expanded_crate, &id)\n-                    .read_crates(&dep_graph));\n+             || read_local_crates(sess, &cstore, &defs, &expanded_crate, &id, &dep_graph));\n \n         time(sess.time_passes(),\n              \"early lint checks\",\n              || lint::check_ast_crate(sess, &expanded_crate));\n \n         let (analysis, resolutions, mut hir_forest) = {\n-            let defs = &mut *defs.borrow_mut();\n-            lower_and_resolve(sess, &id, defs, &expanded_crate, dep_graph, control.make_glob_map)\n+            lower_and_resolve(sess, &id, &mut defs, &expanded_crate, dep_graph,\n+                              control.make_glob_map)\n         };\n \n         // Discard MTWT tables that aren't required past lowering to HIR."}, {"sha": "bbda1965c7facef04e2ac902d3232c5a5cd4fd0e", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "patch": "@@ -26,10 +26,9 @@ use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::infer::{self, InferOk, InferResult, TypeOrigin};\n use rustc_metadata::cstore::CStore;\n-use rustc_metadata::creader::LocalCrateReader;\n+use rustc_metadata::creader::read_local_crates;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n-use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::abi::Abi;\n@@ -120,13 +119,13 @@ fn test_env<F>(source_string: &str,\n \n     let dep_graph = DepGraph::new(false);\n     let krate = driver::assign_node_ids(&sess, krate);\n-    let defs = &RefCell::new(hir_map::collect_definitions(&krate));\n-    LocalCrateReader::new(&sess, &cstore, defs, &krate, \"test_crate\").read_crates(&dep_graph);\n+    let mut defs = hir_map::collect_definitions(&krate);\n+    read_local_crates(&sess, &cstore, &defs, &krate, \"test_crate\", &dep_graph);\n     let _ignore = dep_graph.in_ignore();\n \n     let (_, resolutions, mut hir_forest) = {\n-        let (defs, dep_graph) = (&mut *defs.borrow_mut(), dep_graph.clone());\n-        driver::lower_and_resolve(&sess, \"test-crate\", defs, &krate, dep_graph, MakeGlobMap::No)\n+        driver::lower_and_resolve(&sess, \"test-crate\", &mut defs, &krate, dep_graph.clone(),\n+                                  MakeGlobMap::No)\n     };\n \n     let arenas = ty::CtxtArenas::new();"}, {"sha": "63c6af704bbfe6b64357447c6f59c29edfa9561a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "patch": "@@ -41,12 +41,12 @@ use syntax::parse::token::InternedString;\n use syntax::visit;\n use log;\n \n-pub struct LocalCrateReader<'a> {\n+struct LocalCrateReader<'a> {\n     sess: &'a Session,\n     cstore: &'a CStore,\n     creader: CrateReader<'a>,\n     krate: &'a ast::Crate,\n-    defintions: &'a RefCell<hir_map::Definitions>,\n+    definitions: &'a hir_map::Definitions,\n }\n \n pub struct CrateReader<'a> {\n@@ -841,25 +841,25 @@ impl<'a> CrateReader<'a> {\n }\n \n impl<'a> LocalCrateReader<'a> {\n-    pub fn new(sess: &'a Session,\n-               cstore: &'a CStore,\n-               defs: &'a RefCell<hir_map::Definitions>,\n-               krate: &'a ast::Crate,\n-               local_crate_name: &str)\n-               -> LocalCrateReader<'a> {\n+    fn new(sess: &'a Session,\n+           cstore: &'a CStore,\n+           defs: &'a hir_map::Definitions,\n+           krate: &'a ast::Crate,\n+           local_crate_name: &str)\n+           -> LocalCrateReader<'a> {\n         LocalCrateReader {\n             sess: sess,\n             cstore: cstore,\n             creader: CrateReader::new(sess, cstore, local_crate_name),\n             krate: krate,\n-            defintions: defs,\n+            definitions: defs,\n         }\n     }\n \n     // Traverses an AST, reading all the information about use'd crates and\n     // extern libraries necessary for later resolving, typechecking, linking,\n     // etc.\n-    pub fn read_crates(&mut self, dep_graph: &DepGraph) {\n+    fn read_crates(&mut self, dep_graph: &DepGraph) {\n         let _task = dep_graph.in_task(DepNode::CrateReader);\n \n         self.process_crate(self.krate);\n@@ -902,9 +902,8 @@ impl<'a> LocalCrateReader<'a> {\n                                                                       PathKind::Crate,\n                                                                       true);\n \n-                        let defs = self.defintions.borrow();\n-                        let def_id = defs.opt_local_def_id(i.id).unwrap();\n-                        let len = defs.def_path(def_id.index).data.len();\n+                        let def_id = self.definitions.opt_local_def_id(i.id).unwrap();\n+                        let len = self.definitions.def_path(def_id.index).data.len();\n \n                         self.creader.update_extern_crate(cnum,\n                                                          ExternCrate {\n@@ -982,6 +981,17 @@ impl<'a> LocalCrateReader<'a> {\n     }\n }\n \n+/// Traverses an AST, reading all the information about use'd crates and extern\n+/// libraries necessary for later resolving, typechecking, linking, etc.\n+pub fn read_local_crates(sess: & Session,\n+                         cstore: & CStore,\n+                         defs: & hir_map::Definitions,\n+                         krate: & ast::Crate,\n+                         local_crate_name: &str,\n+                         dep_graph: &DepGraph) {\n+    LocalCrateReader::new(sess, cstore, defs, krate, local_crate_name).read_crates(dep_graph)\n+}\n+\n /// Imports the codemap from an external crate into the codemap of the crate\n /// currently being compiled (the \"local crate\").\n ///"}, {"sha": "6d45980b45da9946a34bf6c0087d57c7a174eba9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "patch": "@@ -21,7 +21,7 @@ use rustc::lint;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n-use rustc_metadata::creader::LocalCrateReader;\n+use rustc_metadata::creader::read_local_crates;\n \n use syntax::{ast, codemap, errors};\n use syntax::errors::emitter::ColorConfig;\n@@ -153,13 +153,13 @@ pub fn run_core(search_paths: SearchPaths,\n     let krate = driver::assign_node_ids(&sess, krate);\n     let dep_graph = DepGraph::new(false);\n \n-    let defs = &RefCell::new(hir_map::collect_definitions(&krate));\n-    LocalCrateReader::new(&sess, &cstore, &defs, &krate, &name).read_crates(&dep_graph);\n+    let mut defs = hir_map::collect_definitions(&krate);\n+    read_local_crates(&sess, &cstore, &defs, &krate, &name, &dep_graph);\n \n     // Lower ast -> hir and resolve.\n     let (analysis, resolutions, mut hir_forest) = {\n-        let defs = &mut *defs.borrow_mut();\n-        driver::lower_and_resolve(&sess, &name, defs, &krate, dep_graph, resolve::MakeGlobMap::No)\n+        driver::lower_and_resolve(&sess, &name, &mut defs, &krate, dep_graph,\n+                                  resolve::MakeGlobMap::No)\n     };\n \n     let arenas = ty::CtxtArenas::new();"}, {"sha": "e4fbdba77a445f9a497fa09e59ed725bc7efda91", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "patch": "@@ -95,7 +95,7 @@ pub fn run(input: &str,\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n     let krate = driver::assign_node_ids(&sess, krate);\n     let dep_graph = DepGraph::new(false);\n-    let defs = &RefCell::new(hir_map::collect_definitions(&krate));\n+    let defs = hir_map::collect_definitions(&krate);\n \n     let mut dummy_resolver = DummyResolver;\n     let krate = lower_crate(&krate, &sess, &mut dummy_resolver);"}, {"sha": "0ad113b8d8b38c90d83968feec79f7ab8adcf447", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ec9d43cf948813fa5aab3dfacf97035ee90d16/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=d3ec9d43cf948813fa5aab3dfacf97035ee90d16", "patch": "@@ -20,7 +20,6 @@ extern crate rustc_metadata;\n extern crate rustc_resolve;\n #[macro_use] extern crate syntax;\n \n-use std::cell::RefCell;\n use std::ffi::{CStr, CString};\n use std::mem::transmute;\n use std::path::PathBuf;\n@@ -35,7 +34,7 @@ use rustc::session::config::{self, basic_options, build_configuration, Input, Op\n use rustc::session::build_session;\n use rustc_driver::{driver, abort_on_err};\n use rustc_resolve::MakeGlobMap;\n-use rustc_metadata::creader::LocalCrateReader;\n+use rustc_metadata::creader::read_local_crates;\n use rustc_metadata::cstore::CStore;\n use libc::c_void;\n \n@@ -240,14 +239,14 @@ fn compile_program(input: &str, sysroot: PathBuf)\n \n         let dep_graph = DepGraph::new(sess.opts.build_dep_graph());\n         let krate = driver::assign_node_ids(&sess, krate);\n-        let defs = RefCell::new(ast_map::collect_definitions(&krate));\n-        LocalCrateReader::new(&sess, &cstore, &defs, &krate, &id).read_crates(&dep_graph);\n+        let mut defs = ast_map::collect_definitions(&krate);\n+        read_local_crates(&sess, &cstore, &defs, &krate, &id, &dep_graph);\n         let (analysis, resolutions, mut hir_forest) = {\n-            let defs = &mut *defs.borrow_mut();\n-            driver::lower_and_resolve(&sess, &id, defs, &krate, dep_graph, MakeGlobMap::No)\n+            driver::lower_and_resolve(&sess, &id, &mut defs, &krate, dep_graph, MakeGlobMap::No)\n         };\n+\n         let arenas = ty::CtxtArenas::new();\n-        let ast_map = ast_map::map_crate(&mut hir_forest, &defs);\n+        let ast_map = ast_map::map_crate(&mut hir_forest, defs);\n \n         abort_on_err(driver::phase_3_run_analysis_passes(\n             &sess, ast_map, analysis, resolutions, &arenas, &id,"}]}