{"sha": "2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "node_id": "C_kwDOAAsO6NoAKDJmZTlmNzYzZDA4Y2Y0OTM4OTYyNjJkYTA1MzNmZDFhM2M4YWUzZGQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-02-03T13:20:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-03T13:20:24Z"}, "message": "Rollup merge of #92802 - compiler-errors:deduplicate-stack-trace, r=oli-obk\n\nDeduplicate lines in long const-eval stack trace\n\nLemme know if this is kinda overkill, lol.\n\nFixes #92796", "tree": {"sha": "2a6f4e7f881a372fd1ba43468580d734f56aa66d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a6f4e7f881a372fd1ba43468580d734f56aa66d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+9aYCRBK7hj4Ov3rIwAAAHYIAGvxrBkPQob9S0McvrH6rkO6\ns4VphTuITIv01dQfX1aS2rKN4L63XCmwe9+CwygJWe87FMjHbxHhbUYyFXbCrcSx\nzuNc3EVHdHnUh2UGj992Mp8iVhHFAptqB8SZRJLjwIJi2k6CGqQuHfZ7x2BbKQC7\nKgXBVAOANhd5/q9ykntIrQPyOsjBbe3qv5oQfmJHqTii0qQX8S1kjG+JS3zajdAo\ndl55yFW96jIrorFRFqipFV28Id8OMYZZGQqQJTxUdBHQrgNJG7SZHDYcTW7n9w8j\nEok9QFCqx1lNDbO4p7Fp2sCbGDTCKdCN3VyyUJOsxekZHtMVfylTOVZa2NFOTQg=\n=gRgT\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a6f4e7f881a372fd1ba43468580d734f56aa66d\nparent 9298bd8197ebffac1d310ff90f5845a30a512a23\nparent 73ad8df70d94d318fea0df3079504bd23e5b4901\nauthor Yuki Okushi <jtitor@2k36.org> 1643894424 +0900\ncommitter GitHub <noreply@github.com> 1643894424 +0900\n\nRollup merge of #92802 - compiler-errors:deduplicate-stack-trace, r=oli-obk\n\nDeduplicate lines in long const-eval stack trace\n\nLemme know if this is kinda overkill, lol.\n\nFixes #92796\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "html_url": "https://github.com/rust-lang/rust/commit/2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe9f763d08cf493896262da0533fd1a3c8ae3dd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9298bd8197ebffac1d310ff90f5845a30a512a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/9298bd8197ebffac1d310ff90f5845a30a512a23", "html_url": "https://github.com/rust-lang/rust/commit/9298bd8197ebffac1d310ff90f5845a30a512a23"}, {"sha": "73ad8df70d94d318fea0df3079504bd23e5b4901", "url": "https://api.github.com/repos/rust-lang/rust/commits/73ad8df70d94d318fea0df3079504bd23e5b4901", "html_url": "https://github.com/rust-lang/rust/commit/73ad8df70d94d318fea0df3079504bd23e5b4901"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "89a0f8245e5fb7e36b23433e5320f6d11b39ee25", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9f763d08cf493896262da0533fd1a3c8ae3dd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9f763d08cf493896262da0533fd1a3c8ae3dd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "patch": "@@ -156,9 +156,37 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             }\n             // Add spans for the stacktrace. Don't print a single-line backtrace though.\n             if self.stacktrace.len() > 1 {\n+                // Helper closure to print duplicated lines.\n+                let mut flush_last_line = |last_frame, times| {\n+                    if let Some((line, span)) = last_frame {\n+                        err.span_label(span, &line);\n+                        // Don't print [... additional calls ...] if the number of lines is small\n+                        if times < 3 {\n+                            for _ in 0..times {\n+                                err.span_label(span, &line);\n+                            }\n+                        } else {\n+                            err.span_label(\n+                                span,\n+                                format!(\"[... {} additional calls {} ...]\", times, &line),\n+                            );\n+                        }\n+                    }\n+                };\n+\n+                let mut last_frame = None;\n+                let mut times = 0;\n                 for frame_info in &self.stacktrace {\n-                    err.span_label(frame_info.span, frame_info.to_string());\n+                    let frame = (frame_info.to_string(), frame_info.span);\n+                    if last_frame.as_ref() == Some(&frame) {\n+                        times += 1;\n+                    } else {\n+                        flush_last_line(last_frame, times);\n+                        last_frame = Some(frame);\n+                        times = 0;\n+                    }\n                 }\n+                flush_last_line(last_frame, times);\n             }\n             // Let the caller finish the job.\n             emit(err)"}, {"sha": "664940c52cfc5bf33bbda2c28886fae66e6033ba", "filename": "src/test/ui/consts/recursive.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9f763d08cf493896262da0533fd1a3c8ae3dd/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9f763d08cf493896262da0533fd1a3c8ae3dd/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs?ref=2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "patch": "@@ -0,0 +1,11 @@\n+#![allow(unused)]\n+\n+const fn f<T>(x: T) { //~ WARN function cannot return without recursing\n+    f(x);\n+    //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler\n+}\n+\n+const X: () = f(1);\n+\n+fn main() {}"}, {"sha": "31ac1fff4e84e1506bfc618353fddee29025a6b8", "filename": "src/test/ui/consts/recursive.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2fe9f763d08cf493896262da0533fd1a3c8ae3dd/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fe9f763d08cf493896262da0533fd1a3c8ae3dd/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=2fe9f763d08cf493896262da0533fd1a3c8ae3dd", "patch": "@@ -0,0 +1,31 @@\n+warning: function cannot return without recursing\n+  --> $DIR/recursive.rs:3:1\n+   |\n+LL | const fn f<T>(x: T) {\n+   | ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     f(x);\n+   |     ---- recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: any use of this value will cause an error\n+  --> $DIR/recursive.rs:4:5\n+   |\n+LL |     f(x);\n+   |     ^^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n+   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n+   |     inside `X` at $DIR/recursive.rs:9:15\n+...\n+LL | const X: () = f(1);\n+   | -------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}