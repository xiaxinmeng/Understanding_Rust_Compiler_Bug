{"sha": "552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MmFmNTFmZmI5ZjRhZTA4YTdlZTNiZjI3YjBlODMwOTAwNmNhNmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-06T12:01:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-06T12:01:16Z"}, "message": "Rollup merge of #32570 - eddyb:tis-but-a-front, r=nikomatsakis\n\n r? @nikomatsakis\n\nConflicts:\n\tsrc/librustc_save_analysis/lib.rs\n\tsrc/libsyntax/ast_util.rs", "tree": {"sha": "30b2cefa099bea233f2e257116c5ec99589aaa63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b2cefa099bea233f2e257116c5ec99589aaa63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "html_url": "https://github.com/rust-lang/rust/commit/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7b00b68fc7960e98fb914be52d9a6a16fe2224", "url": "https://api.github.com/repos/rust-lang/rust/commits/af7b00b68fc7960e98fb914be52d9a6a16fe2224", "html_url": "https://github.com/rust-lang/rust/commit/af7b00b68fc7960e98fb914be52d9a6a16fe2224"}, {"sha": "e8a8dfb056fb3654bacd6aaa6acbc4536358df23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a8dfb056fb3654bacd6aaa6acbc4536358df23", "html_url": "https://github.com/rust-lang/rust/commit/e8a8dfb056fb3654bacd6aaa6acbc4536358df23"}], "stats": {"total": 3490, "additions": 1307, "deletions": 2183}, "files": [{"sha": "4c06afcae0c420534131ac6c97d1b102e6151bcf", "filename": "mk/crates.mk", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -56,7 +56,7 @@ TARGET_CRATES := libc std term \\\n \t\t alloc_system alloc_jemalloc\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n-                rustc_data_structures rustc_front rustc_platform_intrinsics \\\n+                rustc_data_structures rustc_platform_intrinsics \\\n                 rustc_plugin rustc_metadata rustc_passes rustc_save_analysis \\\n                 rustc_const_eval rustc_const_math\n HOST_CRATES := syntax syntax_ext $(RUSTC_CRATES) rustdoc fmt_macros \\\n@@ -93,38 +93,37 @@ DEPS_syntax := std term serialize log arena libc rustc_bitflags rustc_unicode\n DEPS_syntax_ext := syntax fmt_macros\n \n DEPS_rustc_const_math := std syntax log serialize\n-DEPS_rustc_const_eval := rustc_const_math rustc syntax log serialize rustc_front \\\n+DEPS_rustc_const_eval := rustc_const_math rustc syntax log serialize \\\n \t\t\t\t\t     rustc_back graphviz\n \n-DEPS_rustc := syntax fmt_macros flate arena serialize getopts rbml rustc_front\\\n+DEPS_rustc := syntax fmt_macros flate arena serialize getopts rbml \\\n               log graphviz rustc_back rustc_data_structures\\\n \t\t  \t  rustc_const_math\n-DEPS_rustc_back := std syntax rustc_front flate log libc\n-DEPS_rustc_borrowck := rustc rustc_front rustc_mir log graphviz syntax\n+DEPS_rustc_back := std syntax flate log libc\n+DEPS_rustc_borrowck := rustc rustc_mir log graphviz syntax\n DEPS_rustc_data_structures := std log serialize\n DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n                      rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n-\t             rustc_trans rustc_privacy rustc_lint rustc_front rustc_plugin \\\n+\t             rustc_trans rustc_privacy rustc_lint rustc_plugin \\\n                      rustc_metadata syntax_ext rustc_passes rustc_save_analysis rustc_const_eval\n-DEPS_rustc_front := std syntax log serialize\n DEPS_rustc_lint := rustc log syntax rustc_const_eval\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n-DEPS_rustc_metadata := rustc rustc_front syntax rbml rustc_const_math\n-DEPS_rustc_passes := syntax rustc core rustc_front rustc_const_eval\n-DEPS_rustc_mir := rustc rustc_front syntax rustc_const_math rustc_const_eval\n-DEPS_rustc_resolve := arena rustc rustc_front log syntax\n+DEPS_rustc_metadata := rustc syntax rbml rustc_const_math\n+DEPS_rustc_passes := syntax rustc core rustc_const_eval\n+DEPS_rustc_mir := rustc syntax rustc_const_math rustc_const_eval\n+DEPS_rustc_resolve := arena rustc log syntax\n DEPS_rustc_platform_intrinsics := std\n DEPS_rustc_plugin := rustc rustc_metadata syntax rustc_mir\n-DEPS_rustc_privacy := rustc rustc_front log syntax\n+DEPS_rustc_privacy := rustc log syntax\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\\n-                    log syntax serialize rustc_llvm rustc_front rustc_platform_intrinsics \\\n+                    log syntax serialize rustc_llvm rustc_platform_intrinsics \\\n                     rustc_const_math rustc_const_eval\n-DEPS_rustc_save_analysis := rustc log syntax rustc_front\n-DEPS_rustc_typeck := rustc syntax rustc_front rustc_platform_intrinsics rustc_const_math \\\n+DEPS_rustc_save_analysis := rustc log syntax\n+DEPS_rustc_typeck := rustc syntax rustc_platform_intrinsics rustc_const_math \\\n                      rustc_const_eval\n \n DEPS_rustdoc := rustc rustc_driver native:hoedown serialize getopts \\\n-                test rustc_lint rustc_front rustc_const_eval\n+                test rustc_lint rustc_const_eval\n \n \n TOOL_DEPS_compiletest := test getopts log"}, {"sha": "d77268219fcecb76e1fcf7730527da81085da824", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -19,6 +19,5 @@ rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_front = { path = \"../librustc_front\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "7049749135565e9832119f4a50bfde6585f43aad", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,13 +10,13 @@\n \n use rustc_data_structures::graph;\n use cfg::*;\n-use middle::def::Def;\n-use middle::pat_util;\n+use hir::def::Def;\n+use hir::pat_util;\n use ty::{self, TyCtxt};\n use syntax::ast;\n use syntax::ptr::P;\n \n-use rustc_front::hir::{self, PatKind};\n+use hir::{self, PatKind};\n \n struct CFGBuilder<'a, 'tcx: 'a> {\n     tcx: &'a TyCtxt<'tcx>,\n@@ -257,7 +257,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.match_(expr.id, &discr, &arms, pred)\n             }\n \n-            hir::ExprBinary(op, ref l, ref r) if ::rustc_front::util::lazy_binop(op.node) => {\n+            hir::ExprBinary(op, ref l, ref r) if op.node.is_lazy() => {\n                 //\n                 //     [pred]\n                 //       |"}, {"sha": "c651baae28224015fc3b790a3af5ee59d14d6aba", "filename": "src/librustc/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fgraphviz.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,7 @@ use graphviz::IntoCow;\n \n use syntax::ast;\n \n-use front::map as ast_map;\n+use hir::map as ast_map;\n use cfg;\n \n pub type Node<'a> = (cfg::CFGIndex, &'a cfg::CFGNode);"}, {"sha": "e86bf6ebc589af97d1e7f7b7d665678e584a6c7a", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,7 +14,7 @@\n use rustc_data_structures::graph;\n use ty::TyCtxt;\n use syntax::ast;\n-use rustc_front::hir;\n+use hir;\n \n mod construct;\n pub mod graphviz;"}, {"sha": "55ec56a4bbe669a5597f42d630129cd9080b580e", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use self::thread::{DepGraphThreadData, DepMessage};\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use syntax::ast::NodeId;\n use ty::TyCtxt;\n-use rustc_front::hir;\n-use rustc_front::intravisit::Visitor;\n+use hir;\n+use hir::intravisit::Visitor;\n use std::rc::Rc;\n \n mod dep_tracking_map;"}, {"sha": "085acc198d16adcdbccd2e1d94ff24b0bd75dc19", "filename": "src/librustc/hir/check_attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "previous_filename": "src/librustc/front/check_attr.rs"}, {"sha": "c270a4413bfaffd1a9358bc4d2c612a00eeedeab", "filename": "src/librustc/hir/def.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst::ParamSpace;\n use util::nodemap::NodeMap;\n use syntax::ast;\n-use rustc_front::hir;\n+use hir;\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {", "previous_filename": "src/librustc/middle/def.rs"}, {"sha": "a3b83ec5be4bdc2ade2b11648d7c01742289120d", "filename": "src/librustc/hir/def_id.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "previous_filename": "src/librustc/middle/def_id.rs"}, {"sha": "a6ff716488526888a9b60ca08a2ec34a07f4bbce", "filename": "src/librustc/hir/fold.rs", "status": "renamed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -908,14 +908,6 @@ pub fn noop_fold_item<T: Folder>(item: Item, folder: &mut T) -> Item {\n     let Item { id, name, attrs, node, vis, span } = item;\n     let id = folder.new_id(id);\n     let node = folder.fold_item_underscore(node);\n-    // FIXME: we should update the impl_pretty_name, but it uses pretty printing.\n-    // let ident = match node {\n-    //     // The node may have changed, recompute the \"pretty\" impl name.\n-    //     ItemImpl(_, _, _, ref maybe_trait, ref ty, _) => {\n-    //         impl_pretty_name(maybe_trait, Some(&**ty))\n-    //     }\n-    //     _ => ident\n-    // };\n \n     Item {\n         id: id,", "previous_filename": "src/librustc_front/fold.rs"}, {"sha": "d34d66918ca9498f1dc0d95699933f99bef57479", "filename": "src/librustc/hir/intravisit.rs", "status": "renamed", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -31,6 +31,9 @@ use syntax::attr::ThinAttributesExt;\n use syntax::codemap::Span;\n use hir::*;\n \n+use std::cmp;\n+use std::u32;\n+\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n@@ -835,3 +838,233 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n     visitor.visit_expr(&arm.body);\n     walk_list!(visitor, visit_attribute, &arm.attrs);\n }\n+\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct IdRange {\n+    pub min: NodeId,\n+    pub max: NodeId,\n+}\n+\n+impl IdRange {\n+    pub fn max() -> IdRange {\n+        IdRange {\n+            min: u32::MAX,\n+            max: u32::MIN,\n+        }\n+    }\n+\n+    pub fn empty(&self) -> bool {\n+        self.min >= self.max\n+    }\n+\n+    pub fn add(&mut self, id: NodeId) {\n+        self.min = cmp::min(self.min, id);\n+        self.max = cmp::max(self.max, id + 1);\n+    }\n+}\n+\n+pub trait IdVisitingOperation {\n+    fn visit_id(&mut self, node_id: NodeId);\n+}\n+\n+pub struct IdRangeComputingVisitor {\n+    pub result: IdRange,\n+}\n+\n+impl IdRangeComputingVisitor {\n+    pub fn new() -> IdRangeComputingVisitor {\n+        IdRangeComputingVisitor { result: IdRange::max() }\n+    }\n+\n+    pub fn result(&self) -> IdRange {\n+        self.result\n+    }\n+}\n+\n+impl IdVisitingOperation for IdRangeComputingVisitor {\n+    fn visit_id(&mut self, id: NodeId) {\n+        self.result.add(id);\n+    }\n+}\n+\n+pub struct IdVisitor<'a, O: 'a> {\n+    operation: &'a mut O,\n+\n+    // In general, the id visitor visits the contents of an item, but\n+    // not including nested trait/impl items, nor other nested items.\n+    // The base visitor itself always skips nested items, but not\n+    // trait/impl items. This means in particular that if you start by\n+    // visiting a trait or an impl, you should not visit the\n+    // trait/impl items respectively.  This is handled by setting\n+    // `skip_members` to true when `visit_item` is on the stack. This\n+    // way, if the user begins by calling `visit_trait_item`, we will\n+    // visit the trait item, but if they begin with `visit_item`, we\n+    // won't visit the (nested) trait items.\n+    skip_members: bool,\n+}\n+\n+impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {\n+    pub fn new(operation: &'a mut O) -> IdVisitor<'a, O> {\n+        IdVisitor { operation: operation, skip_members: false }\n+    }\n+\n+    fn visit_generics_helper(&mut self, generics: &Generics) {\n+        for type_parameter in generics.ty_params.iter() {\n+            self.operation.visit_id(type_parameter.id)\n+        }\n+        for lifetime in &generics.lifetimes {\n+            self.operation.visit_id(lifetime.lifetime.id)\n+        }\n+    }\n+}\n+\n+impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n+    fn visit_mod(&mut self, module: &Mod, _: Span, node_id: NodeId) {\n+        self.operation.visit_id(node_id);\n+        walk_mod(self, module)\n+    }\n+\n+    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n+        self.operation.visit_id(foreign_item.id);\n+        walk_foreign_item(self, foreign_item)\n+    }\n+\n+    fn visit_item(&mut self, item: &Item) {\n+        assert!(!self.skip_members);\n+        self.skip_members = true;\n+\n+        self.operation.visit_id(item.id);\n+        match item.node {\n+            ItemUse(ref view_path) => {\n+                match view_path.node {\n+                    ViewPathSimple(_, _) |\n+                    ViewPathGlob(_) => {}\n+                    ViewPathList(_, ref paths) => {\n+                        for path in paths {\n+                            self.operation.visit_id(path.node.id())\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        walk_item(self, item);\n+\n+        self.skip_members = false;\n+    }\n+\n+    fn visit_local(&mut self, local: &Local) {\n+        self.operation.visit_id(local.id);\n+        walk_local(self, local)\n+    }\n+\n+    fn visit_block(&mut self, block: &Block) {\n+        self.operation.visit_id(block.id);\n+        walk_block(self, block)\n+    }\n+\n+    fn visit_stmt(&mut self, statement: &Stmt) {\n+        self.operation.visit_id(statement.node.id());\n+        walk_stmt(self, statement)\n+    }\n+\n+    fn visit_pat(&mut self, pattern: &Pat) {\n+        self.operation.visit_id(pattern.id);\n+        walk_pat(self, pattern)\n+    }\n+\n+    fn visit_expr(&mut self, expression: &Expr) {\n+        self.operation.visit_id(expression.id);\n+        walk_expr(self, expression)\n+    }\n+\n+    fn visit_ty(&mut self, typ: &Ty) {\n+        self.operation.visit_id(typ.id);\n+        walk_ty(self, typ)\n+    }\n+\n+    fn visit_generics(&mut self, generics: &Generics) {\n+        self.visit_generics_helper(generics);\n+        walk_generics(self, generics)\n+    }\n+\n+    fn visit_fn(&mut self,\n+                function_kind: FnKind<'v>,\n+                function_declaration: &'v FnDecl,\n+                block: &'v Block,\n+                span: Span,\n+                node_id: NodeId) {\n+        self.operation.visit_id(node_id);\n+\n+        match function_kind {\n+            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n+                self.visit_generics_helper(generics)\n+            }\n+            FnKind::Method(_, sig, _, _) => {\n+                self.visit_generics_helper(&sig.generics)\n+            }\n+            FnKind::Closure(_) => {}\n+        }\n+\n+        for argument in &function_declaration.inputs {\n+            self.operation.visit_id(argument.id)\n+        }\n+\n+        walk_fn(self, function_kind, function_declaration, block, span);\n+    }\n+\n+    fn visit_struct_field(&mut self, struct_field: &StructField) {\n+        self.operation.visit_id(struct_field.id);\n+        walk_struct_field(self, struct_field)\n+    }\n+\n+    fn visit_variant_data(&mut self,\n+                          struct_def: &VariantData,\n+                          _: Name,\n+                          _: &Generics,\n+                          _: NodeId,\n+                          _: Span) {\n+        self.operation.visit_id(struct_def.id());\n+        walk_struct_def(self, struct_def);\n+    }\n+\n+    fn visit_trait_item(&mut self, ti: &TraitItem) {\n+        if !self.skip_members {\n+            self.operation.visit_id(ti.id);\n+            walk_trait_item(self, ti);\n+        }\n+    }\n+\n+    fn visit_impl_item(&mut self, ii: &ImplItem) {\n+        if !self.skip_members {\n+            self.operation.visit_id(ii.id);\n+            walk_impl_item(self, ii);\n+        }\n+    }\n+\n+    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n+        self.operation.visit_id(lifetime.id);\n+    }\n+\n+    fn visit_lifetime_def(&mut self, def: &LifetimeDef) {\n+        self.visit_lifetime(&def.lifetime);\n+    }\n+\n+    fn visit_trait_ref(&mut self, trait_ref: &TraitRef) {\n+        self.operation.visit_id(trait_ref.ref_id);\n+        walk_trait_ref(self, trait_ref);\n+    }\n+}\n+\n+/// Computes the id range for a single fn body, ignoring nested items.\n+pub fn compute_id_range_for_fn_body(fk: FnKind,\n+                                    decl: &FnDecl,\n+                                    body: &Block,\n+                                    sp: Span,\n+                                    id: NodeId)\n+                                    -> IdRange {\n+    let mut visitor = IdRangeComputingVisitor { result: IdRange::max() };\n+    let mut id_visitor = IdVisitor::new(&mut visitor);\n+    id_visitor.visit_fn(fk, decl, body, sp, id);\n+    id_visitor.operation.result\n+}", "previous_filename": "src/librustc_front/intravisit.rs"}, {"sha": "738a04dea585de7a7498e8eee67fc6ad68329f0d", "filename": "src/librustc/hir/lowering.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "previous_filename": "src/librustc_front/lowering.rs"}, {"sha": "7b1c692d54b5e84d7ffba99996c6f884826bb160", "filename": "src/librustc/hir/map/blocks.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -23,14 +23,14 @@\n \n pub use self::Code::*;\n \n-use front::map::{self, Node};\n+use hir::map::{self, Node};\n use syntax::abi;\n-use rustc_front::hir::{Block, FnDecl};\n+use hir::{Block, FnDecl};\n use syntax::ast::{Attribute, Name, NodeId};\n use syntax::attr::ThinAttributesExt;\n-use rustc_front::hir as ast;\n+use hir as ast;\n use syntax::codemap::Span;\n-use rustc_front::intravisit::FnKind;\n+use hir::intravisit::FnKind;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n /// and a body (as well as a NodeId, a span, etc).", "previous_filename": "src/librustc/front/map/blocks.rs"}, {"sha": "94fa393ae3df8f08ff13ce64e66bea3335e90484", "filename": "src/librustc/hir/map/collector.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,10 +11,10 @@\n use super::*;\n use super::MapEntry::*;\n \n-use rustc_front::hir::*;\n-use rustc_front::util;\n-use rustc_front::intravisit::{self, Visitor};\n-use middle::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n+use hir::*;\n+use hir::intravisit::Visitor;\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n+use middle::cstore::InlinedItem;\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n use syntax::codemap::Span;\n@@ -47,7 +47,7 @@ impl<'ast> NodeCollector<'ast> {\n     }\n \n     pub fn extend(krate: &'ast Crate,\n-                  parent: &'ast InlinedParent,\n+                  parent: &'ast InlinedItem,\n                   parent_node: NodeId,\n                   parent_def_path: DefPath,\n                   parent_def_id: DefId,\n@@ -305,7 +305,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     }\n \n     fn visit_stmt(&mut self, stmt: &'ast Stmt) {\n-        let id = util::stmt_id(stmt);\n+        let id = stmt.node.id();\n         self.insert(id, NodeStmt(stmt));\n         let parent_node = self.parent_node;\n         self.parent_node = id;", "previous_filename": "src/librustc/front/map/collector.rs"}, {"sha": "d045313cb1e972f29925baebde6e5a52beab816f", "filename": "src/librustc/hir/map/definitions.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::cstore::LOCAL_CRATE;\n-use middle::def_id::{DefId, DefIndex};\n+use hir::def_id::{DefId, DefIndex};\n use rustc_data_structures::fnv::FnvHashMap;\n use syntax::ast;\n use syntax::parse::token::InternedString;", "previous_filename": "src/librustc/front/map/definitions.rs"}, {"sha": "e1b7afda58bbe5068e77c04d7e271955370aed76", "filename": "src/librustc/hir/map/mod.rs", "status": "renamed", "additions": 54, "deletions": 194, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub use self::Node::*;\n-pub use self::PathElem::*;\n use self::MapEntry::*;\n use self::collector::NodeCollector;\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n@@ -19,100 +18,26 @@ use dep_graph::{DepGraph, DepNode};\n \n use middle::cstore::InlinedItem;\n use middle::cstore::InlinedItem as II;\n-use middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId};\n \n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID};\n use syntax::attr::ThinAttributesExt;\n use syntax::codemap::{Span, Spanned};\n-use syntax::parse::token;\n \n-use rustc_front::hir::*;\n-use rustc_front::fold::Folder;\n-use rustc_front::intravisit;\n-use rustc_front::print::pprust;\n+use hir::*;\n+use hir::fold::Folder;\n+use hir::print as pprust;\n \n use arena::TypedArena;\n use std::cell::RefCell;\n-use std::fmt;\n use std::io;\n-use std::iter;\n use std::mem;\n-use std::slice;\n \n pub mod blocks;\n mod collector;\n pub mod definitions;\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n-pub enum PathElem {\n-    PathMod(Name),\n-    PathName(Name)\n-}\n-\n-impl PathElem {\n-    pub fn name(&self) -> Name {\n-        match *self {\n-            PathMod(name) | PathName(name) => name\n-        }\n-    }\n-}\n-\n-impl fmt::Display for PathElem {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.name())\n-    }\n-}\n-\n-#[derive(Clone)]\n-pub struct LinkedPathNode<'a> {\n-    node: PathElem,\n-    next: LinkedPath<'a>,\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct LinkedPath<'a>(Option<&'a LinkedPathNode<'a>>);\n-\n-impl<'a> LinkedPath<'a> {\n-    pub fn empty() -> LinkedPath<'a> {\n-        LinkedPath(None)\n-    }\n-\n-    pub fn from(node: &'a LinkedPathNode) -> LinkedPath<'a> {\n-        LinkedPath(Some(node))\n-    }\n-}\n-\n-impl<'a> Iterator for LinkedPath<'a> {\n-    type Item = PathElem;\n-\n-    fn next(&mut self) -> Option<PathElem> {\n-        match self.0 {\n-            Some(node) => {\n-                *self = node.next;\n-                Some(node.node)\n-            }\n-            None => None\n-        }\n-    }\n-}\n-\n-/// The type of the iterator used by with_path.\n-pub type PathElems<'a, 'b> = iter::Chain<iter::Cloned<slice::Iter<'a, PathElem>>, LinkedPath<'b>>;\n-\n-pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n-    let itr = token::get_ident_interner();\n-\n-    path.fold(String::new(), |mut s, e| {\n-        let e = itr.get(e.name());\n-        if !s.is_empty() {\n-            s.push_str(\"::\");\n-        }\n-        s.push_str(&e[..]);\n-        s\n-    })\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n@@ -157,7 +82,7 @@ pub enum MapEntry<'ast> {\n \n     /// Roots for node trees.\n     RootCrate,\n-    RootInlinedParent(&'ast InlinedParent)\n+    RootInlinedParent(&'ast InlinedItem)\n }\n \n impl<'ast> Clone for MapEntry<'ast> {\n@@ -166,12 +91,6 @@ impl<'ast> Clone for MapEntry<'ast> {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct InlinedParent {\n-    path: Vec<PathElem>,\n-    ii: InlinedItem\n-}\n-\n impl<'ast> MapEntry<'ast> {\n     fn from_node(p: NodeId, node: Node<'ast>) -> MapEntry<'ast> {\n         match node {\n@@ -234,7 +153,7 @@ impl<'ast> MapEntry<'ast> {\n pub struct Forest {\n     krate: Crate,\n     pub dep_graph: DepGraph,\n-    inlined_items: TypedArena<InlinedParent>\n+    inlined_items: TypedArena<InlinedItem>\n }\n \n impl Forest {\n@@ -352,8 +271,10 @@ impl<'ast> Map<'ast> {\n         self.definitions.borrow().def_key(def_id.index)\n     }\n \n-    pub fn def_path_from_id(&self, id: NodeId) -> DefPath {\n-        self.def_path(self.local_def_id(id))\n+    pub fn def_path_from_id(&self, id: NodeId) -> Option<DefPath> {\n+        self.opt_local_def_id(id).map(|def_id| {\n+            self.def_path(def_id)\n+        })\n     }\n \n     pub fn def_path(&self, def_id: DefId) -> DefPath {\n@@ -552,8 +473,8 @@ impl<'ast> Map<'ast> {\n     pub fn get_parent_did(&self, id: NodeId) -> DefId {\n         let parent = self.get_parent(id);\n         match self.find_entry(parent) {\n-            Some(RootInlinedParent(&InlinedParent {ii: II::TraitItem(did, _), ..})) => did,\n-            Some(RootInlinedParent(&InlinedParent {ii: II::ImplItem(did, _), ..})) => did,\n+            Some(RootInlinedParent(&II::TraitItem(did, _))) |\n+            Some(RootInlinedParent(&II::ImplItem(did, _))) => did,\n             _ => self.local_def_id(parent)\n         }\n     }\n@@ -635,80 +556,21 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n-    /// returns the name associated with the given NodeId's AST\n-    pub fn get_path_elem(&self, id: NodeId) -> PathElem {\n-        let node = self.get(id);\n-        match node {\n-            NodeItem(item) => {\n-                match item.node {\n-                    ItemMod(_) | ItemForeignMod(_) => {\n-                        PathMod(item.name)\n-                    }\n-                    _ => PathName(item.name)\n-                }\n-            }\n-            NodeForeignItem(i) => PathName(i.name),\n-            NodeImplItem(ii) => PathName(ii.name),\n-            NodeTraitItem(ti) => PathName(ti.name),\n-            NodeVariant(v) => PathName(v.node.name),\n-            NodeLifetime(lt) => PathName(lt.name),\n-            NodeTyParam(tp) => PathName(tp.name),\n+    /// Returns the name associated with the given NodeId's AST.\n+    pub fn name(&self, id: NodeId) -> Name {\n+        match self.get(id) {\n+            NodeItem(i) => i.name,\n+            NodeForeignItem(i) => i.name,\n+            NodeImplItem(ii) => ii.name,\n+            NodeTraitItem(ti) => ti.name,\n+            NodeVariant(v) => v.node.name,\n+            NodeLifetime(lt) => lt.name,\n+            NodeTyParam(tp) => tp.name,\n             NodeLocal(&Pat { node: PatKind::Ident(_,l,_), .. }) => {\n-                PathName(l.node.name)\n+                l.node.name\n             },\n-            _ => bug!(\"no path elem for {:?}\", node)\n-        }\n-    }\n-\n-    pub fn with_path<T, F>(&self, id: NodeId, f: F) -> T where\n-        F: FnOnce(PathElems) -> T,\n-    {\n-        self.with_path_next(id, LinkedPath::empty(), f)\n-    }\n-\n-    pub fn path_to_string(&self, id: NodeId) -> String {\n-        self.with_path(id, |path| path_to_string(path))\n-    }\n-\n-    fn path_to_str_with_name(&self, id: NodeId, name: Name) -> String {\n-        self.with_path(id, |path| {\n-            path_to_string(path.chain(Some(PathName(name))))\n-        })\n-    }\n-\n-    fn with_path_next<T, F>(&self, id: NodeId, next: LinkedPath, f: F) -> T where\n-        F: FnOnce(PathElems) -> T,\n-    {\n-        // This function reveals the name of the item and hence is a\n-        // kind of read. This is inefficient, since it walks ancestors\n-        // and we are walking them anyhow, but whatever.\n-        self.read(id);\n-\n-        let parent = self.get_parent(id);\n-        let parent = match self.find_entry(id) {\n-            Some(EntryForeignItem(..)) => {\n-                // Anonymous extern items go in the parent scope.\n-                self.get_parent(parent)\n-            }\n-            // But tuple struct ctors don't have names, so use the path of its\n-            // parent, the struct item. Similarly with closure expressions.\n-            Some(EntryStructCtor(..)) | Some(EntryExpr(..)) => {\n-                return self.with_path_next(parent, next, f);\n-            }\n-            _ => parent\n-        };\n-        if parent == id {\n-            match self.find_entry(id) {\n-                Some(RootInlinedParent(data)) => {\n-                    f(data.path.iter().cloned().chain(next))\n-                }\n-                _ => f([].iter().cloned().chain(next))\n-            }\n-        } else {\n-            self.with_path_next(parent, LinkedPath::from(&LinkedPathNode {\n-                node: self.get_path_elem(id),\n-                next: next\n-            }), f)\n+            NodeStructCtor(_) => self.name(self.get_parent(id)),\n+            _ => bug!(\"no name for {}\", self.node_to_string(id))\n         }\n     }\n \n@@ -959,7 +821,6 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest) -> Map<'ast> {\n /// Used for items loaded from external crate that are being inlined into this\n /// crate.\n pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n-                                          parent_path: Vec<PathElem>,\n                                           parent_def_path: DefPath,\n                                           parent_def_id: DefId,\n                                           ii: InlinedItem,\n@@ -979,27 +840,24 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n         II::Foreign(i) => II::Foreign(i.map(|i| fld.fold_foreign_item(i)))\n     };\n \n-    let ii_parent = map.forest.inlined_items.alloc(InlinedParent {\n-        path: parent_path,\n-        ii: ii\n-    });\n+    let ii = map.forest.inlined_items.alloc(ii);\n \n     let ii_parent_id = fld.new_id(DUMMY_NODE_ID);\n     let mut collector =\n         NodeCollector::extend(\n             map.krate(),\n-            ii_parent,\n+            ii,\n             ii_parent_id,\n             parent_def_path,\n             parent_def_id,\n             mem::replace(&mut *map.map.borrow_mut(), vec![]),\n             mem::replace(&mut *map.definitions.borrow_mut(), Definitions::new()));\n-    ii_parent.ii.visit(&mut collector);\n+    ii.visit(&mut collector);\n \n     *map.map.borrow_mut() = collector.map;\n     *map.definitions.borrow_mut() = collector.definitions;\n \n-    &ii_parent.ii\n+    ii\n }\n \n pub trait NodePrinter {\n@@ -1033,9 +891,24 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n     let id_str = format!(\" (id={})\", id);\n     let id_str = if include_id { &id_str[..] } else { \"\" };\n \n+    let path_str = || {\n+        // This functionality is used for debugging, try to use TyCtxt to get\n+        // the user-friendly path, otherwise fall back to stringifying DefPath.\n+        ::ty::tls::with_opt(|tcx| {\n+            if let Some(tcx) = tcx {\n+                tcx.node_path_str(id)\n+            } else if let Some(path) = map.def_path_from_id(id) {\n+                path.data.into_iter().map(|elem| {\n+                    elem.data.to_string()\n+                }).collect::<Vec<_>>().join(\"::\")\n+            } else {\n+                String::from(\"<missing path>\")\n+            }\n+        })\n+    };\n+\n     match map.find(id) {\n         Some(NodeItem(item)) => {\n-            let path_str = map.path_to_str_with_name(id, item.name);\n             let item_str = match item.node {\n                 ItemExternCrate(..) => \"extern crate\",\n                 ItemUse(..) => \"use\",\n@@ -1051,30 +924,21 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemImpl(..) => \"impl\",\n                 ItemDefaultImpl(..) => \"default impl\",\n             };\n-            format!(\"{} {}{}\", item_str, path_str, id_str)\n+            format!(\"{} {}{}\", item_str, path_str(), id_str)\n         }\n-        Some(NodeForeignItem(item)) => {\n-            let path_str = map.path_to_str_with_name(id, item.name);\n-            format!(\"foreign item {}{}\", path_str, id_str)\n+        Some(NodeForeignItem(_)) => {\n+            format!(\"foreign item {}{}\", path_str(), id_str)\n         }\n         Some(NodeImplItem(ii)) => {\n             match ii.node {\n                 ImplItemKind::Const(..) => {\n-                    format!(\"assoc const {} in {}{}\",\n-                            ii.name,\n-                            map.path_to_string(id),\n-                            id_str)\n+                    format!(\"assoc const {} in {}{}\", ii.name, path_str(), id_str)\n                 }\n                 ImplItemKind::Method(..) => {\n-                    format!(\"method {} in {}{}\",\n-                            ii.name,\n-                            map.path_to_string(id), id_str)\n+                    format!(\"method {} in {}{}\", ii.name, path_str(), id_str)\n                 }\n                 ImplItemKind::Type(_) => {\n-                    format!(\"assoc type {} in {}{}\",\n-                            ii.name,\n-                            map.path_to_string(id),\n-                            id_str)\n+                    format!(\"assoc type {} in {}{}\", ii.name, path_str(), id_str)\n                 }\n             }\n         }\n@@ -1085,16 +949,12 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 TypeTraitItem(..) => \"assoc type\",\n             };\n \n-            format!(\"{} {} in {}{}\",\n-                    kind,\n-                    ti.name,\n-                    map.path_to_string(id),\n-                    id_str)\n+            format!(\"{} {} in {}{}\", kind, ti.name, path_str(), id_str)\n         }\n         Some(NodeVariant(ref variant)) => {\n             format!(\"variant {} in {}{}\",\n                     variant.node.name,\n-                    map.path_to_string(id), id_str)\n+                    path_str(), id_str)\n         }\n         Some(NodeExpr(ref expr)) => {\n             format!(\"expr {}{}\", pprust::expr_to_string(&expr), id_str)\n@@ -1112,7 +972,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n             format!(\"block {}{}\", pprust::block_to_string(&block), id_str)\n         }\n         Some(NodeStructCtor(_)) => {\n-            format!(\"struct_ctor {}{}\", map.path_to_string(id), id_str)\n+            format!(\"struct_ctor {}{}\", path_str(), id_str)\n         }\n         Some(NodeLifetime(ref l)) => {\n             format!(\"lifetime {}{}\",", "previous_filename": "src/librustc/front/map/mod.rs"}, {"sha": "edb9b783527652d3245cb823ff60c4c34d608317", "filename": "src/librustc/hir/mod.rs", "status": "renamed", "additions": 209, "deletions": 15, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -33,8 +33,10 @@ pub use self::ViewPath_::*;\n pub use self::Visibility::*;\n pub use self::PathParameters::*;\n \n-use intravisit::Visitor;\n-use std::collections::BTreeMap;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n+use util::nodemap::{NodeMap, FnvHashSet};\n+\n use syntax::codemap::{self, Span, Spanned, DUMMY_SP, ExpnId};\n use syntax::abi::Abi;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, TokenTree, AsmDialect};\n@@ -43,9 +45,7 @@ use syntax::attr::{ThinAttributes, ThinAttributesExt};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n \n-use print::pprust;\n-use util;\n-\n+use std::collections::BTreeMap;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -63,9 +63,20 @@ macro_rules! hir_vec {\n     ($($x:expr),*) => (\n         $crate::hir::HirVec::from(vec![$($x),*])\n     );\n-    ($($x:expr,)*) => (vec![$($x),*])\n+    ($($x:expr,)*) => (hir_vec![$($x),*])\n }\n \n+pub mod check_attr;\n+pub mod def;\n+pub mod def_id;\n+pub mod fold;\n+pub mod intravisit;\n+pub mod lowering;\n+pub mod map;\n+pub mod pat_util;\n+pub mod print;\n+pub mod svh;\n+\n /// Identifier in HIR\n #[derive(Clone, Copy, Eq)]\n pub struct Ident {\n@@ -135,7 +146,7 @@ impl fmt::Debug for Lifetime {\n         write!(f,\n                \"lifetime({}: {})\",\n                self.id,\n-               pprust::lifetime_to_string(self))\n+               print::lifetime_to_string(self))\n     }\n }\n \n@@ -161,13 +172,28 @@ pub struct Path {\n \n impl fmt::Debug for Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"path({})\", pprust::path_to_string(self))\n+        write!(f, \"path({})\", print::path_to_string(self))\n     }\n }\n \n impl fmt::Display for Path {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", pprust::path_to_string(self))\n+        write!(f, \"{}\", print::path_to_string(self))\n+    }\n+}\n+\n+impl Path {\n+    /// Convert a span and an identifier to the corresponding\n+    /// 1-segment path.\n+    pub fn from_ident(s: Span, ident: Ident) -> Path {\n+        Path {\n+            span: s,\n+            global: false,\n+            segments: hir_vec![PathSegment {\n+                identifier: ident,\n+                parameters: PathParameters::none()\n+            }],\n+        }\n     }\n }\n \n@@ -344,12 +370,25 @@ pub struct Generics {\n }\n \n impl Generics {\n+    pub fn empty() -> Generics {\n+        Generics {\n+            lifetimes: HirVec::new(),\n+            ty_params: HirVec::new(),\n+            where_clause: WhereClause {\n+                id: DUMMY_NODE_ID,\n+                predicates: HirVec::new(),\n+            },\n+        }\n+    }\n+\n     pub fn is_lt_parameterized(&self) -> bool {\n         !self.lifetimes.is_empty()\n     }\n+\n     pub fn is_type_parameterized(&self) -> bool {\n         !self.ty_params.is_empty()\n     }\n+\n     pub fn is_parameterized(&self) -> bool {\n         self.is_lt_parameterized() || self.is_type_parameterized()\n     }\n@@ -434,7 +473,9 @@ impl Crate {\n     /// follows lexical scoping rules -- then you want a different\n     /// approach. You should override `visit_nested_item` in your\n     /// visitor and then call `intravisit::walk_crate` instead.\n-    pub fn visit_all_items<'hir, V:Visitor<'hir>>(&'hir self, visitor: &mut V) {\n+    pub fn visit_all_items<'hir, V>(&'hir self, visitor: &mut V)\n+        where V: intravisit::Visitor<'hir>\n+    {\n         for (_, item) in &self.items {\n             visitor.visit_item(item);\n         }\n@@ -479,7 +520,51 @@ pub struct Pat {\n \n impl fmt::Debug for Pat {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"pat({}: {})\", self.id, pprust::pat_to_string(self))\n+        write!(f, \"pat({}: {})\", self.id, print::pat_to_string(self))\n+    }\n+}\n+\n+impl Pat {\n+    // FIXME(#19596) this is a workaround, but there should be a better way\n+    fn walk_<G>(&self, it: &mut G) -> bool\n+        where G: FnMut(&Pat) -> bool\n+    {\n+        if !it(self) {\n+            return false;\n+        }\n+\n+        match self.node {\n+            PatKind::Ident(_, _, Some(ref p)) => p.walk_(it),\n+            PatKind::Struct(_, ref fields, _) => {\n+                fields.iter().all(|field| field.node.pat.walk_(it))\n+            }\n+            PatKind::TupleStruct(_, Some(ref s)) | PatKind::Tup(ref s) => {\n+                s.iter().all(|p| p.walk_(it))\n+            }\n+            PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n+                s.walk_(it)\n+            }\n+            PatKind::Vec(ref before, ref slice, ref after) => {\n+                before.iter().all(|p| p.walk_(it)) &&\n+                slice.iter().all(|p| p.walk_(it)) &&\n+                after.iter().all(|p| p.walk_(it))\n+            }\n+            PatKind::Wild |\n+            PatKind::Lit(_) |\n+            PatKind::Range(_, _) |\n+            PatKind::Ident(_, _, _) |\n+            PatKind::TupleStruct(..) |\n+            PatKind::Path(..) |\n+            PatKind::QPath(_, _) => {\n+                true\n+            }\n+        }\n+    }\n+\n+    pub fn walk<F>(&self, mut it: F) -> bool\n+        where F: FnMut(&Pat) -> bool\n+    {\n+        self.walk_(&mut it)\n     }\n }\n \n@@ -597,6 +682,68 @@ pub enum BinOp_ {\n     BiGt,\n }\n \n+impl BinOp_ {\n+    pub fn as_str(self) -> &'static str {\n+        match self {\n+            BiAdd => \"+\",\n+            BiSub => \"-\",\n+            BiMul => \"*\",\n+            BiDiv => \"/\",\n+            BiRem => \"%\",\n+            BiAnd => \"&&\",\n+            BiOr => \"||\",\n+            BiBitXor => \"^\",\n+            BiBitAnd => \"&\",\n+            BiBitOr => \"|\",\n+            BiShl => \"<<\",\n+            BiShr => \">>\",\n+            BiEq => \"==\",\n+            BiLt => \"<\",\n+            BiLe => \"<=\",\n+            BiNe => \"!=\",\n+            BiGe => \">=\",\n+            BiGt => \">\",\n+        }\n+    }\n+\n+    pub fn is_lazy(self) -> bool {\n+        match self {\n+            BiAnd | BiOr => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_shift(self) -> bool {\n+        match self {\n+            BiShl | BiShr => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_comparison(self) -> bool {\n+        match self {\n+            BiEq | BiLt | BiLe | BiNe | BiGt | BiGe => true,\n+            BiAnd |\n+            BiOr |\n+            BiAdd |\n+            BiSub |\n+            BiMul |\n+            BiDiv |\n+            BiRem |\n+            BiBitXor |\n+            BiBitAnd |\n+            BiBitOr |\n+            BiShl |\n+            BiShr => false,\n+        }\n+    }\n+\n+    /// Returns `true` if the binary operator takes its arguments by value\n+    pub fn is_by_value(self) -> bool {\n+        !self.is_comparison()\n+    }\n+}\n+\n pub type BinOp = Spanned<BinOp_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -609,6 +756,24 @@ pub enum UnOp {\n     UnNeg,\n }\n \n+impl UnOp {\n+    pub fn as_str(self) -> &'static str {\n+        match self {\n+            UnDeref => \"*\",\n+            UnNot => \"!\",\n+            UnNeg => \"-\",\n+        }\n+    }\n+\n+    /// Returns `true` if the unary operator takes its argument by value\n+    pub fn is_by_value(self) -> bool {\n+        match self {\n+            UnNeg | UnNot => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// A statement\n pub type Stmt = Spanned<Stmt_>;\n \n@@ -618,8 +783,8 @@ impl fmt::Debug for Stmt_ {\n         let spanned = codemap::dummy_spanned(self.clone());\n         write!(f,\n                \"stmt({}: {})\",\n-               util::stmt_id(&spanned),\n-               pprust::stmt_to_string(&spanned))\n+               spanned.node.id(),\n+               print::stmt_to_string(&spanned))\n     }\n }\n \n@@ -643,6 +808,14 @@ impl Stmt_ {\n             StmtSemi(ref e, _) => e.attrs.as_attr_slice(),\n         }\n     }\n+\n+    pub fn id(&self) -> NodeId {\n+        match *self {\n+            StmtDecl(_, id) => id,\n+            StmtExpr(_, id) => id,\n+            StmtSemi(_, id) => id,\n+        }\n+    }\n }\n \n // FIXME (pending discussion of #1697, #2178...): local should really be\n@@ -722,7 +895,7 @@ pub struct Expr {\n \n impl fmt::Debug for Expr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"expr({}: {})\", self.id, pprust::expr_to_string(self))\n+        write!(f, \"expr({}: {})\", self.id, print::expr_to_string(self))\n     }\n }\n \n@@ -940,7 +1113,7 @@ pub struct Ty {\n \n impl fmt::Debug for Ty {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"type({})\", pprust::ty_to_string(self))\n+        write!(f, \"type({})\", print::ty_to_string(self))\n     }\n }\n \n@@ -1456,3 +1629,24 @@ impl ForeignItem_ {\n         }\n     }\n }\n+\n+/// A free variable referred to in a function.\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n+pub struct Freevar {\n+    /// The variable being accessed free.\n+    pub def: Def,\n+\n+    // First span where it is accessed (there can be multiple).\n+    pub span: Span\n+}\n+\n+pub type FreevarMap = NodeMap<Vec<Freevar>>;\n+\n+pub type CaptureModeMap = NodeMap<CaptureClause>;\n+\n+// Trait method resolution\n+pub type TraitMap = NodeMap<Vec<DefId>>;\n+\n+// Map from the NodeId of a glob import to a list of items which are actually\n+// imported.\n+pub type GlobMap = NodeMap<FnvHashSet<Name>>;", "previous_filename": "src/librustc_front/hir.rs"}, {"sha": "6cc5a29062fd000e5730326a1f8ead1c7a88fb45", "filename": "src/librustc/hir/pat_util.rs", "status": "renamed", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def::*;\n-use middle::def_id::DefId;\n+use hir::def::*;\n+use hir::def_id::DefId;\n use ty::TyCtxt;\n use util::nodemap::FnvHashMap;\n \n use syntax::ast;\n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::util::walk_pat;\n+use hir::{self, PatKind};\n use syntax::codemap::{respan, Span, Spanned, DUMMY_SP};\n \n use std::cell::RefCell;\n@@ -115,7 +114,7 @@ pub fn pat_is_binding_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool {\n pub fn pat_bindings<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) where\n     I: FnMut(hir::BindingMode, ast::NodeId, Span, &Spanned<ast::Name>),\n {\n-    walk_pat(pat, |p| {\n+    pat.walk(|p| {\n         match p.node {\n           PatKind::Ident(binding_mode, ref pth, _) if pat_is_binding(&dm.borrow(), p) => {\n             it(binding_mode, p.id, p.span, &respan(pth.span, pth.node.name));\n@@ -128,7 +127,7 @@ pub fn pat_bindings<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) where\n pub fn pat_bindings_ident<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) where\n     I: FnMut(hir::BindingMode, ast::NodeId, Span, &Spanned<hir::Ident>),\n {\n-    walk_pat(pat, |p| {\n+    pat.walk(|p| {\n         match p.node {\n           PatKind::Ident(binding_mode, ref pth, _) if pat_is_binding(&dm.borrow(), p) => {\n             it(binding_mode, p.id, p.span, &respan(pth.span, pth.node));\n@@ -143,7 +142,7 @@ pub fn pat_bindings_ident<I>(dm: &RefCell<DefMap>, pat: &hir::Pat, mut it: I) wh\n /// an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.\n pub fn pat_contains_bindings(dm: &DefMap, pat: &hir::Pat) -> bool {\n     let mut contains_bindings = false;\n-    walk_pat(pat, |p| {\n+    pat.walk(|p| {\n         if pat_is_binding(dm, p) {\n             contains_bindings = true;\n             false // there's at least one binding, can short circuit now.\n@@ -188,7 +187,7 @@ pub fn arm_contains_ref_binding(dm: &RefCell<DefMap>, arm: &hir::Arm) -> Option<\n /// an ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,\n pub fn pat_contains_bindings_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool {\n     let mut contains_bindings = false;\n-    walk_pat(pat, |p| {\n+    pat.walk(|p| {\n         if pat_is_binding_or_wild(dm, p) {\n             contains_bindings = true;\n             false // there's at least one binding/wildcard, can short circuit now.\n@@ -211,20 +210,14 @@ pub fn simple_name<'a>(pat: &'a hir::Pat) -> Option<ast::Name> {\n }\n \n pub fn def_to_path(tcx: &TyCtxt, id: DefId) -> hir::Path {\n-    tcx.with_path(id, |path| hir::Path {\n-        global: false,\n-        segments: path.last().map(|elem| hir::PathSegment {\n-            identifier: hir::Ident::from_name(elem.name()),\n-            parameters: hir::PathParameters::none(),\n-        }).into_iter().collect(),\n-        span: DUMMY_SP,\n-    })\n+    let name = tcx.item_name(id);\n+    hir::Path::from_ident(DUMMY_SP, hir::Ident::from_name(name))\n }\n \n /// Return variants that are necessary to exist for the pattern to match.\n pub fn necessary_variants(dm: &DefMap, pat: &hir::Pat) -> Vec<DefId> {\n     let mut variants = vec![];\n-    walk_pat(pat, |p| {\n+    pat.walk(|p| {\n         match p.node {\n             PatKind::TupleStruct(..) |\n             PatKind::Path(..) |", "previous_filename": "src/librustc/middle/pat_util.rs"}, {"sha": "cd2dfd44639523bf6751d45e4e14d21655c85a84", "filename": "src/librustc/hir/print.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -950,7 +950,7 @@ impl<'a> State<'a> {\n \n     pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> {\n         self.head(\"\")?;\n-        let generics = ::util::empty_generics();\n+        let generics = hir::Generics::empty();\n         self.print_struct(&v.node.data, &generics, v.node.name, v.span, false)?;\n         match v.node.disr_expr {\n             Some(ref d) => {\n@@ -1285,12 +1285,12 @@ impl<'a> State<'a> {\n                          -> io::Result<()> {\n         self.print_expr(lhs)?;\n         space(&mut self.s)?;\n-        self.word_space(::util::binop_to_string(op.node))?;\n+        self.word_space(op.node.as_str())?;\n         self.print_expr(rhs)\n     }\n \n     fn print_expr_unary(&mut self, op: hir::UnOp, expr: &hir::Expr) -> io::Result<()> {\n-        word(&mut self.s, ::util::unop_to_string(op))?;\n+        word(&mut self.s, op.as_str())?;\n         self.print_expr_maybe_paren(expr)\n     }\n \n@@ -1434,7 +1434,7 @@ impl<'a> State<'a> {\n             hir::ExprAssignOp(op, ref lhs, ref rhs) => {\n                 self.print_expr(&lhs)?;\n                 space(&mut self.s)?;\n-                word(&mut self.s, ::util::binop_to_string(op.node))?;\n+                word(&mut self.s, op.node.as_str())?;\n                 self.word_space(\"=\")?;\n                 self.print_expr(&rhs)?;\n             }", "previous_filename": "src/librustc_front/print/pprust.rs"}, {"sha": "7ae20f68ad0c2af3969f765c949c04013893ee7a", "filename": "src/librustc/hir/svh.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fhir%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fsvh.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -48,8 +48,8 @@\n \n use std::fmt;\n use std::hash::{Hash, SipHasher, Hasher};\n-use rustc_front::hir;\n-use rustc_front::intravisit as visit;\n+use hir;\n+use hir::intravisit as visit;\n \n #[derive(Clone, PartialEq, Debug)]\n pub struct Svh {\n@@ -134,10 +134,10 @@ mod svh_visitor {\n     use syntax::ast::{self, Name, NodeId};\n     use syntax::codemap::Span;\n     use syntax::parse::token;\n-    use rustc_front::intravisit as visit;\n-    use rustc_front::intravisit::{Visitor, FnKind};\n-    use rustc_front::hir::*;\n-    use rustc_front::hir;\n+    use hir::intravisit as visit;\n+    use hir::intravisit::{Visitor, FnKind};\n+    use hir::*;\n+    use hir;\n \n     use std::hash::{Hash, SipHasher};\n ", "previous_filename": "src/librustc_back/svh.rs"}, {"sha": "a7553f4eb1f1cbed2a7dec545052f411789eb365", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -73,13 +73,13 @@ use super::region_inference::SameRegions;\n \n use std::collections::HashSet;\n \n-use front::map as ast_map;\n-use rustc_front::hir;\n-use rustc_front::print::pprust;\n+use hir::map as ast_map;\n+use hir;\n+use hir::print as pprust;\n \n use middle::cstore::CrateStore;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n use infer::{self, TypeOrigin};\n use middle::region;\n use ty::subst;\n@@ -587,13 +587,9 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             // Only external crates, if either is from a local\n             // module we could have false positives\n             if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n-                let exp_path = self.tcx.with_path(did1,\n-                                                  |p| p.map(|x| x.to_string())\n-                                                       .collect::<Vec<_>>());\n-                let found_path = self.tcx.with_path(did2,\n-                                                    |p| p.map(|x| x.to_string())\n-                                                         .collect::<Vec<_>>());\n-                // We compare strings because PathMod and PathName can be different\n+                let exp_path = self.tcx.item_path_str(did1);\n+                let found_path = self.tcx.item_path_str(did2);\n+                // We compare strings because DefPath can be different\n                 // for imported and non-imported crates\n                 if exp_path == found_path {\n                     let crate_name = self.tcx.sess.cstore.crate_name(did1.krate);"}, {"sha": "4c1216aa8626ad406c711edf37e4b50befac0b6e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -18,8 +18,8 @@ pub use ty::IntVarValue;\n pub use self::freshen::TypeFreshener;\n pub use self::region_inference::{GenericKind, VerifyBound};\n \n-use middle::def_id::DefId;\n-use rustc_front::hir;\n+use hir::def_id::DefId;\n+use hir;\n use middle::free_region::FreeRegionMap;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::McResult;"}, {"sha": "c2a8d04ac00da6a6ed40c98a515f7029565f2cf7", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,7 +11,7 @@\n pub use self::RelationDir::*;\n use self::TypeVariableValue::*;\n use self::UndoEntry::*;\n-use middle::def_id::{DefId};\n+use hir::def_id::{DefId};\n use ty::{self, Ty};\n use syntax::codemap::Span;\n "}, {"sha": "deb206277722071cfbd8f903aca237d5f9b67a56", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -38,6 +38,7 @@\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n+#![feature(step_by)]\n #![feature(str_char)]\n #![feature(question_mark)]\n #![cfg_attr(test, feature(test))]\n@@ -51,7 +52,6 @@ extern crate graphviz;\n extern crate libc;\n extern crate rbml;\n extern crate rustc_back;\n-extern crate rustc_front;\n extern crate rustc_data_structures;\n extern crate serialize;\n extern crate collections;\n@@ -72,19 +72,9 @@ mod macros;\n // registered before they are used.\n pub mod diagnostics;\n \n-pub mod back {\n-    pub use rustc_back::rpath;\n-    pub use rustc_back::svh;\n-}\n-\n pub mod cfg;\n pub mod dep_graph;\n-\n-pub mod front {\n-    pub mod check_attr;\n-    pub mod map;\n-}\n-\n+pub mod hir;\n pub mod infer;\n pub mod lint;\n \n@@ -96,8 +86,6 @@ pub mod middle {\n     pub mod cstore;\n     pub mod dataflow;\n     pub mod dead;\n-    pub mod def;\n-    pub mod def_id;\n     pub mod dependency_format;\n     pub mod effect;\n     pub mod entry;\n@@ -106,7 +94,6 @@ pub mod middle {\n     pub mod lang_items;\n     pub mod liveness;\n     pub mod mem_categorization;\n-    pub mod pat_util;\n     pub mod privacy;\n     pub mod reachable;\n     pub mod region;"}, {"sha": "1c6dd2658897a60302f4ba124bf0cddc0e77d2aa", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -39,16 +39,15 @@ use std::cell::RefCell;\n use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n-use syntax::ast_util::{self, IdVisitingOperation};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n use syntax::attr::ThinAttributesExt;\n-use rustc_front::hir;\n-use rustc_front::util;\n-use rustc_front::intravisit as hir_visit;\n+use hir;\n+use hir::intravisit as hir_visit;\n+use hir::intravisit::{IdVisitor, IdVisitingOperation};\n use syntax::visit as ast_visit;\n \n /// Information about the registered lints.\n@@ -654,16 +653,6 @@ impl<'a> EarlyContext<'a> {\n             level_stack: vec![],\n         }\n     }\n-\n-    fn visit_ids<F>(&mut self, f: F)\n-        where F: FnOnce(&mut ast_util::IdVisitor<EarlyContext>)\n-    {\n-        let mut v = ast_util::IdVisitor {\n-            operation: self,\n-            visited_outermost: false,\n-        };\n-        f(&mut v);\n-    }\n }\n \n impl<'a, 'tcx> LateContext<'a, 'tcx> {\n@@ -685,9 +674,9 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     }\n \n     fn visit_ids<F>(&mut self, f: F)\n-        where F: FnOnce(&mut util::IdVisitor<LateContext>)\n+        where F: FnOnce(&mut IdVisitor<LateContext>)\n     {\n-        let mut v = util::IdVisitor::new(self);\n+        let mut v = IdVisitor::new(self);\n         f(&mut v);\n     }\n }\n@@ -928,7 +917,6 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     fn visit_item(&mut self, it: &ast::Item) {\n         self.with_lint_attrs(&it.attrs, |cx| {\n             run_lints!(cx, check_item, early_passes, it);\n-            cx.visit_ids(|v| v.visit_item(it));\n             ast_visit::walk_item(cx, it);\n             run_lints!(cx, check_item_post, early_passes, it);\n         })\n@@ -1042,7 +1030,6 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n         self.with_lint_attrs(&trait_item.attrs, |cx| {\n             run_lints!(cx, check_trait_item, early_passes, trait_item);\n-            cx.visit_ids(|v| v.visit_trait_item(trait_item));\n             ast_visit::walk_trait_item(cx, trait_item);\n             run_lints!(cx, check_trait_item_post, early_passes, trait_item);\n         });\n@@ -1051,7 +1038,6 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n         self.with_lint_attrs(&impl_item.attrs, |cx| {\n             run_lints!(cx, check_impl_item, early_passes, impl_item);\n-            cx.visit_ids(|v| v.visit_impl_item(impl_item));\n             ast_visit::walk_impl_item(cx, impl_item);\n             run_lints!(cx, check_impl_item_post, early_passes, impl_item);\n         });\n@@ -1099,18 +1085,6 @@ impl<'a, 'tcx> IdVisitingOperation for LateContext<'a, 'tcx> {\n         }\n     }\n }\n-impl<'a> IdVisitingOperation for EarlyContext<'a> {\n-    fn visit_id(&mut self, id: ast::NodeId) {\n-        match self.sess.lints.borrow_mut().remove(&id) {\n-            None => {}\n-            Some(lints) => {\n-                for (lint_id, span, msg) in lints {\n-                    self.span_lint(lint_id.lint, span, &msg[..])\n-                }\n-            }\n-        }\n-    }\n-}\n \n // This lint pass is defined here because it touches parts of the `LateContext`\n // that we don't want to expose. It records the lint level at certain AST\n@@ -1292,11 +1266,12 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(&krate.attrs, |cx| {\n-        cx.visit_id(ast::CRATE_NODE_ID);\n-        cx.visit_ids(|v| {\n-            v.visited_outermost = true;\n-            ast_visit::walk_crate(v, krate);\n-        });\n+        // Lints may be assigned to the whole crate.\n+        if let Some(lints) = cx.sess.lints.borrow_mut().remove(&ast::CRATE_NODE_ID) {\n+            for (lint_id, span, msg) in lints {\n+                cx.span_lint(lint_id.lint, span, &msg[..])\n+            }\n+        }\n \n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here."}, {"sha": "28994e1a7c48d50d82f6c807784a0b3bee4c5989", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -34,10 +34,10 @@ pub use self::LintSource::*;\n use std::hash;\n use std::ascii::AsciiExt;\n use syntax::codemap::Span;\n-use rustc_front::intravisit::FnKind;\n+use hir::intravisit::FnKind;\n use syntax::visit as ast_visit;\n use syntax::ast;\n-use rustc_front::hir;\n+use hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,"}, {"sha": "2a27732b9532cdb83014ab3d6faac6e44ce859cf", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,11 +14,11 @@\n  * Almost certainly this could (and should) be refactored out of existence.\n  */\n \n-use middle::def::Def;\n+use hir::def::Def;\n use ty::{Ty, TyCtxt};\n \n use syntax::codemap::Span;\n-use rustc_front::hir as ast;\n+use hir as ast;\n \n pub fn prohibit_type_params(tcx: &TyCtxt, segments: &[ast::PathSegment]) {\n     for segment in segments {"}, {"sha": "3621cb267d91f9dfb079fc15d6fbebecf8532c1c", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,7 +11,7 @@\n use syntax::parse::token::InternedString;\n use syntax::ast;\n use std::rc::Rc;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use std::hash;\n use std::mem::transmute;\n use rustc_const_math::*;"}, {"sha": "1f6328187a59bebbbd5ad8848b745398cb034a37", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -22,12 +22,12 @@\n // are *mostly* used as a part of that interface, but these should\n // probably get a better home if someone can find one.\n \n-use back::svh::Svh;\n-use front::map as hir_map;\n-use middle::def::{self, Def};\n+use hir::svh::Svh;\n+use hir::map as hir_map;\n+use hir::def::{self, Def};\n use middle::lang_items;\n use ty::{self, Ty, TyCtxt, VariantKind};\n-use middle::def_id::{DefId, DefIndex};\n+use hir::def_id::{DefId, DefIndex};\n use mir::repr::Mir;\n use mir::mir_map::MirMap;\n use session::Session;\n@@ -38,15 +38,13 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use std::path::PathBuf;\n use syntax::ast;\n-use syntax::ast_util::{IdVisitingOperation};\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use syntax::parse::token::InternedString;\n use rustc_back::target::Target;\n-use rustc_front::hir;\n-use rustc_front::intravisit::Visitor;\n-use rustc_front::util::IdVisitor;\n+use hir;\n+use hir::intravisit::{IdVisitor, IdVisitingOperation, Visitor};\n \n pub use self::DefLike::{DlDef, DlField, DlImpl};\n pub use self::NativeLibraryKind::{NativeStatic, NativeFramework, NativeUnknown};\n@@ -168,9 +166,7 @@ pub trait CrateStore<'tcx> : Any {\n     fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr>;\n     fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx>;\n-    fn relative_item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>>;\n-    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem>;\n     fn item_name(&self, def: DefId) -> ast::Name;\n     fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx>;\n@@ -347,12 +343,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> { bug!(\"repr_attrs\") }\n     fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                  -> ty::TypeScheme<'tcx> { bug!(\"item_type\") }\n-    fn relative_item_path(&self, def: DefId)\n-                          -> Vec<hir_map::PathElem> { bug!(\"relative_item_path\") }\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n         bug!(\"visible_parent_map\")\n     }\n-    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { bug!(\"extern_item_path\") }\n     fn item_name(&self, def: DefId) -> ast::Name { bug!(\"item_name\") }\n     fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n                        -> ty::GenericPredicates<'tcx> { bug!(\"item_predicates\") }\n@@ -506,7 +499,7 @@ pub mod tls {\n     use std::mem;\n     use ty::{self, Ty, TyCtxt};\n     use ty::subst::Substs;\n-    use middle::def_id::DefId;\n+    use hir::def_id::DefId;\n \n     pub trait EncodingContext<'tcx> {\n         fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx>;"}, {"sha": "1aaaa4bcd77f6afc0e4ec114c5cd3e16ba979ea6", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -21,13 +21,12 @@ use std::io;\n use std::mem;\n use std::usize;\n use syntax::ast;\n-use syntax::ast_util::IdRange;\n use syntax::print::pp;\n use syntax::print::pprust::PrintState;\n use util::nodemap::NodeMap;\n-use rustc_front::hir;\n-use rustc_front::intravisit;\n-use rustc_front::print::pprust;\n+use hir;\n+use hir::intravisit::{self, IdRange};\n+use hir::print as pprust;\n \n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "dcdc02c9df6097d62f26c935da6f4552fd7ad586", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,14 +13,14 @@\n // from live codes are live, and everything else is dead.\n \n use dep_graph::DepNode;\n-use front::map as ast_map;\n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::intravisit::{self, Visitor};\n+use hir::map as ast_map;\n+use hir::{self, pat_util, PatKind};\n+use hir::intravisit::{self, Visitor};\n \n-use middle::{pat_util, privacy};\n+use middle::privacy;\n use ty::{self, TyCtxt};\n-use middle::def::Def;\n-use middle::def_id::{DefId};\n+use hir::def::Def;\n+use hir::def_id::{DefId};\n use lint;\n \n use std::collections::HashSet;"}, {"sha": "ac7a1b8aa0de5bae1abdc4ceec40a891161efd99", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,15 +13,15 @@\n use self::RootUnsafeContext::*;\n \n use dep_graph::DepNode;\n-use middle::def::Def;\n+use hir::def::Def;\n use ty::{self, Ty, TyCtxt};\n use ty::MethodCall;\n \n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::hir;\n-use rustc_front::intravisit;\n-use rustc_front::intravisit::{FnKind, Visitor};\n+use hir;\n+use hir::intravisit;\n+use hir::intravisit::{FnKind, Visitor};\n \n #[derive(Copy, Clone)]\n struct UnsafeContext {"}, {"sha": "602889375e970250cb6756d1f751d1769e829416", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,15 +10,15 @@\n \n \n use dep_graph::DepNode;\n-use front::map as ast_map;\n-use middle::def_id::{CRATE_DEF_INDEX};\n+use hir::map as ast_map;\n+use hir::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n use syntax::ast::NodeId;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::entry::EntryPointType;\n-use rustc_front::hir::{Item, ItemFn};\n-use rustc_front::intravisit::Visitor;\n+use hir::{Item, ItemFn};\n+use hir::intravisit::Visitor;\n \n struct EntryContext<'a, 'tcx: 'a> {\n     session: &'a Session,"}, {"sha": "c4d6f100671b003514707e4a7a524b20dab545c6", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -19,14 +19,14 @@ pub use self::MatchMode::*;\n use self::TrackMatchMode::*;\n use self::OverloadedCallType::*;\n \n-use middle::pat_util;\n-use middle::def::Def;\n-use middle::def_id::{DefId};\n+use hir::pat_util;\n+use hir::def::Def;\n+use hir::def_id::{DefId};\n use infer;\n use middle::mem_categorization as mc;\n use ty::{self, TyCtxt, adjustment};\n \n-use rustc_front::hir::{self, PatKind};\n+use hir::{self, PatKind};\n \n use syntax::ast;\n use syntax::ptr::P;\n@@ -479,7 +479,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n             }\n \n             hir::ExprUnary(op, ref lhs) => {\n-                let pass_args = if ::rustc_front::util::is_by_value_unop(op) {\n+                let pass_args = if op.is_by_value() {\n                     PassArgs::ByValue\n                 } else {\n                     PassArgs::ByRef\n@@ -491,7 +491,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n             }\n \n             hir::ExprBinary(op, ref lhs, ref rhs) => {\n-                let pass_args = if ::rustc_front::util::is_by_value_binop(op.node) {\n+                let pass_args = if op.node.is_by_value() {\n                     PassArgs::ByValue\n                 } else {\n                     PassArgs::ByRef\n@@ -524,7 +524,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n \n             hir::ExprAssignOp(op, ref lhs, ref rhs) => {\n                 // NB All our assignment operations take the RHS by value\n-                assert!(::rustc_front::util::is_by_value_binop(op.node));\n+                assert!(op.node.is_by_value());\n \n                 if !self.walk_overloaded_operator(expr, lhs, vec![rhs], PassArgs::ByValue) {\n                     self.mutate_expr(expr, &lhs, MutateMode::WriteAndRead);"}, {"sha": "767c5adc81e25b5ff44d23b3aa5dd613d49bdfd7", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use dep_graph::DepNode;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n use ty::subst::{Subst, Substs, EnumeratedItems};\n use ty::{TransmuteRestriction, TyCtxt};\n use ty::{self, Ty, TypeFoldable};\n@@ -20,8 +20,8 @@ use std::fmt;\n use syntax::abi::Abi::RustIntrinsic;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::intravisit::{self, Visitor, FnKind};\n-use rustc_front::hir;\n+use hir::intravisit::{self, Visitor, FnKind};\n+use hir;\n \n pub fn check_crate(tcx: &TyCtxt) {\n     let mut visitor = IntrinsicCheckingVisitor {"}, {"sha": "86531ced8dfae41e1f174074ef3682c9e97d7bc2", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -22,19 +22,19 @@\n pub use self::LangItem::*;\n \n use dep_graph::DepNode;\n-use front::map as hir_map;\n+use hir::map as hir_map;\n use session::Session;\n use middle::cstore::CrateStore;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty;\n use middle::weak_lang_items;\n use util::nodemap::FnvHashMap;\n \n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n-use rustc_front::intravisit::Visitor;\n-use rustc_front::hir;\n+use hir::intravisit::Visitor;\n+use hir;\n \n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end."}, {"sha": "35991ae56c8a1477097bd30f065c7aa99acf23d9", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -110,8 +110,8 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use dep_graph::DepNode;\n-use middle::def::*;\n-use middle::pat_util;\n+use hir::def::*;\n+use hir::pat_util;\n use ty::{self, TyCtxt, ParameterEnvironment};\n use traits::{self, ProjectionMode};\n use infer;\n@@ -128,10 +128,10 @@ use syntax::codemap::{BytePos, original_sp, Span};\n use syntax::parse::token::special_idents;\n use syntax::ptr::P;\n \n-use rustc_front::hir::Expr;\n-use rustc_front::hir;\n-use rustc_front::print::pprust::{expr_to_string, block_to_string};\n-use rustc_front::intravisit::{self, Visitor, FnKind};\n+use hir::Expr;\n+use hir;\n+use hir::print::{expr_to_string, block_to_string};\n+use hir::intravisit::{self, Visitor, FnKind};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -484,7 +484,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         intravisit::walk_expr(ir, expr);\n       }\n-      hir::ExprBinary(op, _, _) if ::rustc_front::util::lazy_binop(op.node) => {\n+      hir::ExprBinary(op, _, _) if op.node.is_lazy() => {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         intravisit::walk_expr(ir, expr);\n       }\n@@ -1142,7 +1142,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_exprs(&exprs[..], succ)\n           }\n \n-          hir::ExprBinary(op, ref l, ref r) if ::rustc_front::util::lazy_binop(op.node) => {\n+          hir::ExprBinary(op, ref l, ref r) if op.node.is_lazy() => {\n             let r_succ = self.propagate_through_expr(&r, succ);\n \n             let ln = self.live_node(expr.id, expr.span);"}, {"sha": "2f77552c389ad4e710dccd924512bb5532d045f0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -71,16 +71,16 @@ pub use self::deref_kind::*;\n \n use self::Aliasability::*;\n \n-use middle::def_id::DefId;\n-use front::map as ast_map;\n+use hir::def_id::DefId;\n+use hir::map as ast_map;\n use infer;\n use middle::const_qualif::ConstQualif;\n-use middle::def::Def;\n+use hir::def::Def;\n use ty::adjustment;\n use ty::{self, Ty, TyCtxt};\n \n-use rustc_front::hir::{MutImmutable, MutMutable, PatKind};\n-use rustc_front::hir;\n+use hir::{MutImmutable, MutMutable, PatKind};\n+use hir;\n use syntax::ast;\n use syntax::codemap::Span;\n "}, {"sha": "63bccc2d02eb68dbf42ba12cc293a968b785f418", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -16,9 +16,9 @@\n // reachable as well.\n \n use dep_graph::DepNode;\n-use front::map as ast_map;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use hir::map as ast_map;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n use ty::{self, TyCtxt};\n use middle::privacy;\n use session::config;\n@@ -28,9 +28,9 @@ use std::collections::HashSet;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use rustc_front::hir;\n-use rustc_front::intravisit::Visitor;\n-use rustc_front::intravisit;\n+use hir;\n+use hir::intravisit::Visitor;\n+use hir::intravisit;\n \n // Returns true if the given set of generics implies that the item it's\n // associated with must be inlined."}, {"sha": "f8c0b63bf11bd41d36c1acc3d1b45912c603c83f", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,7 @@\n //! `middle/infer/region_inference/README.md`\n \n use dep_graph::DepNode;\n-use front::map as ast_map;\n+use hir::map as ast_map;\n use session::Session;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n use middle::cstore::InlinedItem;\n@@ -30,10 +30,9 @@ use std::mem;\n use syntax::codemap::{self, Span};\n use syntax::ast::{self, NodeId};\n \n-use rustc_front::hir;\n-use rustc_front::intravisit::{self, Visitor, FnKind};\n-use rustc_front::hir::{Block, Item, FnDecl, Arm, Pat, PatKind, Stmt, Expr, Local};\n-use rustc_front::util::stmt_id;\n+use hir;\n+use hir::intravisit::{self, Visitor, FnKind};\n+use hir::{Block, Item, FnDecl, Arm, Pat, PatKind, Stmt, Expr, Local};\n \n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n            RustcDecodable, Copy)]\n@@ -765,7 +764,7 @@ fn resolve_pat(visitor: &mut RegionResolutionVisitor, pat: &hir::Pat) {\n }\n \n fn resolve_stmt(visitor: &mut RegionResolutionVisitor, stmt: &hir::Stmt) {\n-    let stmt_id = stmt_id(stmt);\n+    let stmt_id = stmt.node.id();\n     debug!(\"resolve_stmt(stmt.id={:?})\", stmt_id);\n \n     // Every statement will clean up the temporaries created during"}, {"sha": "585b65b9f5e42e7613a1e5803213d9711bab5b13", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -19,9 +19,9 @@ pub use self::DefRegion::*;\n use self::ScopeChain::*;\n \n use dep_graph::DepNode;\n-use front::map::Map;\n+use hir::map::Map;\n use session::Session;\n-use middle::def::{Def, DefMap};\n+use hir::def::{Def, DefMap};\n use middle::region;\n use ty::subst;\n use ty;\n@@ -32,9 +32,9 @@ use syntax::codemap::Span;\n use syntax::parse::token::special_idents;\n use util::nodemap::NodeMap;\n \n-use rustc_front::hir;\n-use rustc_front::print::pprust::lifetime_to_string;\n-use rustc_front::intravisit::{self, Visitor, FnKind};\n+use hir;\n+use hir::print::lifetime_to_string;\n+use hir::intravisit::{self, Visitor, FnKind};\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum DefRegion {"}, {"sha": "6c7c7f160f4e5b5ea9d254c57dcb3fdcdd0ce7de", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,12 +14,12 @@\n pub use self::StabilityLevel::*;\n \n use dep_graph::DepNode;\n-use front::map as hir_map;\n+use hir::map as hir_map;\n use session::Session;\n use lint;\n use middle::cstore::{CrateStore, LOCAL_CRATE};\n-use middle::def::Def;\n-use middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use hir::def::Def;\n+use hir::def_id::{CRATE_DEF_INDEX, DefId};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::parse::token::InternedString;\n@@ -30,9 +30,9 @@ use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::attr::{self, Stability, Deprecation, AttrMetaMethods};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n-use rustc_front::hir;\n-use rustc_front::hir::{Item, Generics, StructField, Variant, PatKind};\n-use rustc_front::intravisit::{self, Visitor};\n+use hir;\n+use hir::{Item, Generics, StructField, Variant, PatKind};\n+use hir::intravisit::{self, Visitor};\n \n use std::mem::replace;\n use std::cmp::Ordering;"}, {"sha": "74bb41785cbe143446c0975bb0ceaa404c9e9fe5", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -18,9 +18,9 @@ use middle::lang_items;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n-use rustc_front::intravisit::Visitor;\n-use rustc_front::intravisit;\n-use rustc_front::hir;\n+use hir::intravisit::Visitor;\n+use hir::intravisit;\n+use hir;\n \n use std::collections::HashSet;\n "}, {"sha": "28437fa13368aff0b1fd14780839a1fed91822d0", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,12 +11,12 @@\n use graphviz::IntoCow;\n use middle::const_val::ConstVal;\n use rustc_const_math::{ConstUsize, ConstInt};\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst::Substs;\n use ty::{self, AdtDef, ClosureSubsts, FnOutput, Region, Ty};\n use util::ppaux;\n use rustc_back::slice;\n-use rustc_front::hir::InlineAsm;\n+use hir::InlineAsm;\n use std::ascii;\n use std::borrow::{Cow};\n use std::fmt::{self, Debug, Formatter, Write};"}, {"sha": "d710417bf20d8b152f0d91e2e31e7869b4dc5273", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,7 @@ use mir::repr::*;\n use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use rustc_front::hir;\n+use hir;\n \n #[derive(Copy, Clone, Debug)]\n pub enum LvalueTy<'tcx> {"}, {"sha": "ae803f502318e394285d26ee2551d5638d354344", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use middle::const_val::ConstVal;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst::Substs;\n use ty::{ClosureSubsts, FnOutput, Region, Ty};\n use mir::repr::*;"}, {"sha": "6710d2a653c848a8a49585c85119a9b637ab2040", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,7 +13,7 @@\n use super::{SelectionContext, Obligation, ObligationCause};\n \n use middle::cstore::LOCAL_CRATE;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst::TypeSpace;\n use ty::{self, Ty, TyCtxt};\n use infer::{self, InferCtxt, TypeOrigin};"}, {"sha": "9357dda258364ab690ac2874fa2e6444244dc323", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -24,7 +24,7 @@ use super::{\n };\n \n use fmt_macros::{Parser, Piece, Position};\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use infer::InferCtxt;\n use ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, Ty, TyCtxt, TypeFoldable};\n use ty::fast_reject;"}, {"sha": "a160465e2e815694dafdac08095c7fa0c699a7aa", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,7 +15,7 @@ pub use self::FulfillmentErrorCode::*;\n pub use self::Vtable::*;\n pub use self::ObligationCauseCode::*;\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use ty::subst;\n use ty::{self, Ty, TypeFoldable};"}, {"sha": "9af2cfbd04da05ab4970c253202da24120d29e9a", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -20,7 +20,7 @@\n use super::supertraits;\n use super::elaborate_predicates;\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst::{self, SelfSpace, TypeSpace};\n use traits;\n use ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};"}, {"sha": "a0d6f5f912b2c1d8be8cc1302d1dccbaa6216b86", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -23,7 +23,7 @@ use super::VtableClosureData;\n use super::VtableImplData;\n use super::util;\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use infer::{self, InferOk, TypeOrigin};\n use ty::subst::Subst;\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};"}, {"sha": "8d7df6e44aeb7683191b1615b1760415caaaee14", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -36,7 +36,7 @@ use super::{VtableImplData, VtableObjectData, VtableBuiltinData,\n use super::object_safety;\n use super::util;\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use infer;\n use infer::{InferCtxt, InferOk, TypeFreshener, TypeOrigin};\n use ty::subst::{Subst, Substs, TypeSpace};\n@@ -49,7 +49,7 @@ use std::cell::RefCell;\n use std::fmt;\n use std::rc::Rc;\n use syntax::abi::Abi;\n-use rustc_front::hir;\n+use hir;\n use util::common::ErrorReported;\n use util::nodemap::FnvHashMap;\n "}, {"sha": "63647515a9785ad19257039b12c79ca1abb2e6fd", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -21,7 +21,7 @@ use super::{SelectionContext, FulfillmentContext};\n use super::util::{fresh_type_vars_for_impl, impl_trait_ref_and_oblig};\n \n use middle::cstore::CrateStore;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use infer::{self, InferCtxt, TypeOrigin};\n use middle::region;\n use ty::subst::{Subst, Substs};"}, {"sha": "51b0b6b8b3830b2c0a2550cc4d9d8d6d3587285f", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,7 +14,7 @@ use std::rc::Rc;\n use super::{Overlap, specializes};\n \n use middle::cstore::CrateStore;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use infer;\n use traits::{self, ProjectionMode};\n use ty::{self, TyCtxt, ImplOrTraitItem, TraitDef, TypeFoldable};"}, {"sha": "7668b8bf20282dc8422fdb0db9e1645b9765b23f", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use infer::InferCtxt;\n use ty::subst::{Subst, Substs};\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};"}, {"sha": "41008823c851274450e7cd9db23bf11f40d7691d", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,7 @@ use ty::LvaluePreference::{NoPreference};\n use syntax::ast;\n use syntax::codemap::Span;\n \n-use rustc_front::hir;\n+use hir;\n \n #[derive(Copy, Clone)]\n pub enum AutoAdjustment<'tcx> {"}, {"sha": "f5dedb132480173c847ea2beeddb858d96d358cf", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def_id::{DefId};\n+use hir::def_id::{DefId};\n use ty::{self, Ty, TyCtxt};\n use util::common::MemoizationMap;\n use util::nodemap::FnvHashMap;"}, {"sha": "bdba700f49ad52cdafee8b22dd120ae59f61ec93", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,13 +11,13 @@\n //! type context book-keeping\n \n use dep_graph::{DepGraph, DepTrackingMap};\n-use front::map as ast_map;\n+use hir::map as ast_map;\n use session::Session;\n use lint;\n use middle;\n use middle::cstore::{CrateStore, LOCAL_CRATE};\n-use middle::def::DefMap;\n-use middle::def_id::DefId;\n+use hir::def::DefMap;\n+use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use middle::region::RegionMaps;\n use middle::resolve_lifetime;\n@@ -27,7 +27,7 @@ use traits;\n use ty::{self, TraitRef, Ty, TypeAndMut};\n use ty::{TyS, TypeVariants};\n use ty::{AdtDef, ClosureSubsts, ExistentialBounds, Region};\n-use ty::{FreevarMap};\n+use hir::FreevarMap;\n use ty::{BareFnTy, InferTy, ParamTy, ProjectionTy, TraitTy};\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n use ty::TypeVariants::*;\n@@ -45,7 +45,7 @@ use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::parse::token::{self, special_idents};\n \n-use rustc_front::hir;\n+use hir;\n \n /// Internal storage\n pub struct CtxtArenas<'tcx> {"}, {"sha": "73bafc5e850b97a995ddd15409d05907453fec76", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst;\n use infer::type_variable;\n use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n@@ -19,7 +19,7 @@ use syntax::ast::{self, Name};\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n \n-use rustc_front::hir;\n+use hir;\n \n #[derive(Clone, Copy, Debug)]\n pub struct ExpectedFound<T> {"}, {"sha": "29647253ad2ad618f95949687d08bfcf3b04a4be", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n "}, {"sha": "5c1e19aee7b84d0b38fba018e64e6cac6ba365bc", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use front::map::DefPathData;\n+use hir::map::DefPathData;\n use middle::cstore::LOCAL_CRATE;\n-use middle::def_id::{DefId, CRATE_DEF_INDEX};\n+use hir::def_id::{DefId, CRATE_DEF_INDEX};\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n \n@@ -24,6 +24,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         buffer.into_string()\n     }\n \n+    /// Returns a string identifying this local node-id.\n+    pub fn node_path_str(&self, id: ast::NodeId) -> String {\n+        self.item_path_str(self.map.local_def_id(id))\n+    }\n+\n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It always begins with a crate identifier.\n     pub fn absolute_item_path_str(&self, def_id: DefId) -> String {"}, {"sha": "65a96e79ff43c609d3c03349098ba1cc68011165", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use dep_graph::{DepNode, DepTrackingMapConfig};\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty;\n use std::marker::PhantomData;\n use std::rc::Rc;"}, {"sha": "444fea0918f8d2615d4801fb591ce659150d02da", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 63, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -19,12 +19,11 @@ pub use self::LvaluePreference::*;\n pub use self::fold::TypeFoldable;\n \n use dep_graph::{self, DepNode};\n-use front::map as ast_map;\n-use front::map::LinkedPath;\n+use hir::map as ast_map;\n use middle;\n use middle::cstore::{self, CrateStore, LOCAL_CRATE};\n-use middle::def::{self, Def, ExportMap};\n-use middle::def_id::DefId;\n+use hir::def::{self, Def, ExportMap};\n+use hir::def_id::DefId;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::region::{CodeExtent};\n use traits;\n@@ -33,7 +32,7 @@ use ty::fold::TypeFolder;\n use ty::subst::{Subst, Substs, VecPerParamSpace};\n use ty::walk::TypeWalker;\n use util::common::MemoizationMap;\n-use util::nodemap::{NodeMap, NodeSet};\n+use util::nodemap::NodeSet;\n use util::nodemap::FnvHashMap;\n \n use serialize::{Encodable, Encoder, Decodable, Decoder};\n@@ -44,17 +43,16 @@ use std::iter;\n use std::rc::Rc;\n use std::slice;\n use std::vec::IntoIter;\n-use std::collections::{HashMap, HashSet};\n use syntax::ast::{self, CrateNum, Name, NodeId};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::InternedString;\n \n use rustc_const_math::ConstInt;\n \n-use rustc_front::hir;\n-use rustc_front::hir::{ItemImpl, ItemTrait, PatKind};\n-use rustc_front::intravisit::Visitor;\n+use hir;\n+use hir::{ItemImpl, ItemTrait, PatKind};\n+use hir::intravisit::Visitor;\n \n pub use self::sty::{Binder, DebruijnIndex};\n pub use self::sty::{BuiltinBound, BuiltinBounds, ExistentialBounds};\n@@ -115,7 +113,7 @@ pub struct CrateAnalysis<'a> {\n     pub access_levels: middle::privacy::AccessLevels,\n     pub reachable: NodeSet,\n     pub name: &'a str,\n-    pub glob_map: Option<GlobMap>,\n+    pub glob_map: Option<hir::GlobMap>,\n }\n \n #[derive(Copy, Clone)]\n@@ -2232,39 +2230,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn with_path<T, F>(&self, id: DefId, f: F) -> T where\n-        F: FnOnce(ast_map::PathElems) -> T,\n-    {\n-        if let Some(id) = self.map.as_local_node_id(id) {\n-            self.map.with_path(id, f)\n-        } else {\n-            let mut path: Vec<_>;\n-            if let Some(extern_crate) = self.sess.cstore.extern_crate(id.krate) {\n-                if !extern_crate.direct {\n-                    // this comes from some crate that we don't have a direct\n-                    // path to; we'll settle for just prepending the name of\n-                    // the crate.\n-                    path = self.sess.cstore.extern_item_path(id)\n-                } else {\n-                    // start with the path to the extern crate, then\n-                    // add the relative path to the actual item\n-                    fn collector(elems: ast_map::PathElems) -> Vec<ast_map::PathElem> {\n-                        elems.collect()\n-                    }\n-                    path = self.with_path(extern_crate.def_id, collector);\n-                    path.extend(self.sess.cstore.relative_item_path(id));\n-                }\n-            } else {\n-                // if this was injected, just make a path with name of crate\n-                path = self.sess.cstore.extern_item_path(id);\n-            }\n-            f(path.iter().cloned().chain(LinkedPath::empty()))\n-        }\n-    }\n-\n     pub fn item_name(&self, id: DefId) -> ast::Name {\n         if let Some(id) = self.map.as_local_node_id(id) {\n-            self.map.get_path_elem(id).name()\n+            self.map.name(id)\n         } else {\n             self.sess.cstore.item_name(id)\n         }\n@@ -2724,30 +2692,9 @@ pub enum ExplicitSelfCategory {\n     ByBox,\n }\n \n-/// A free variable referred to in a function.\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-pub struct Freevar {\n-    /// The variable being accessed free.\n-    pub def: Def,\n-\n-    // First span where it is accessed (there can be multiple).\n-    pub span: Span\n-}\n-\n-pub type FreevarMap = NodeMap<Vec<Freevar>>;\n-\n-pub type CaptureModeMap = NodeMap<hir::CaptureClause>;\n-\n-// Trait method resolution\n-pub type TraitMap = NodeMap<Vec<DefId>>;\n-\n-// Map from the NodeId of a glob import to a list of items which are actually\n-// imported.\n-pub type GlobMap = HashMap<NodeId, HashSet<Name>>;\n-\n impl<'tcx> TyCtxt<'tcx> {\n     pub fn with_freevars<T, F>(&self, fid: NodeId, f: F) -> T where\n-        F: FnOnce(&[Freevar]) -> T,\n+        F: FnOnce(&[hir::Freevar]) -> T,\n     {\n         match self.freevars.borrow().get(&fid) {\n             None => f(&[]),"}, {"sha": "f14e680e9e06fa38e680e1112450319afa036e22", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,13 +13,13 @@\n //! can be other things. Examples of type relations are subtyping,\n //! type equality, etc.\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst::{ParamSpace, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n use std::rc::Rc;\n use syntax::abi;\n-use rustc_front::hir as ast;\n+use hir as ast;\n \n pub type RelateResult<'tcx, T> = Result<T, TypeError<'tcx>>;\n "}, {"sha": "bbf6d0329b4eee57243e0112699699fca53db4c8", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,7 @@ use std::rc::Rc;\n use syntax::abi;\n use syntax::ptr::P;\n \n-use rustc_front::hir;\n+use hir;\n \n ///////////////////////////////////////////////////////////////////////////\n // Lift implementations"}, {"sha": "c0fb60d4dd3dc59ab5c2694839d8d60b460a2f3d", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,7 +11,7 @@\n //! This module contains TypeVariants and its major components\n \n use middle::cstore;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use middle::region;\n use ty::subst::{self, Substs};\n use traits;\n@@ -28,7 +28,7 @@ use syntax::parse::token::special_idents;\n \n use serialize::{Decodable, Decoder};\n \n-use rustc_front::hir;\n+use hir;\n \n use self::FnOutput::*;\n use self::InferTy::*;"}, {"sha": "dd547da59e9cfada95483ce991c0ab9f5716919c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,7 +13,7 @@\n pub use self::ParamSpace::*;\n \n use middle::cstore;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n "}, {"sha": "94f4e31efc66551590e81631b2229c901b1da683", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n use dep_graph::DepNode;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use traits::{self, specialization_graph};\n use ty;\n use ty::fast_reject;\n use ty::{Ty, TyCtxt, TraitRef};\n use std::borrow::{Borrow};\n use std::cell::{Cell, Ref, RefCell};\n use syntax::ast::Name;\n-use rustc_front::hir;\n+use hir;\n use util::nodemap::FnvHashMap;\n \n /// As `TypeScheme` but for a trait ref."}, {"sha": "354744b27875dbc2eb55380959bc3d216e33a411", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,11 +10,11 @@\n \n //! misc. type-system utilities too small to deserve their own file\n \n-use back::svh::Svh;\n-use middle::def_id::DefId;\n+use hir::svh::Svh;\n+use hir::def_id::DefId;\n use ty::subst;\n use infer;\n-use middle::pat_util;\n+use hir::pat_util;\n use traits::{self, ProjectionMode};\n use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n use ty::{Disr, ParameterEnvironment};\n@@ -28,7 +28,7 @@ use syntax::ast::{self, Name};\n use syntax::attr::{self, AttrMetaMethods, SignedInt, UnsignedInt};\n use syntax::codemap::Span;\n \n-use rustc_front::hir;\n+use hir;\n \n pub trait IntTypeExt {\n     fn to_ty<'tcx>(&self, cx: &TyCtxt<'tcx>) -> Ty<'tcx>;"}, {"sha": "9ea634bb41c1b13d37a91b972b5a7e1d98348f40", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use infer::InferCtxt;\n use ty::outlives::{self, Component};\n use ty::subst::Substs;"}, {"sha": "bdfb97549d5d512647ce80179eb8d38579cd1378", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -19,9 +19,9 @@ use std::iter::repeat;\n use std::path::Path;\n use std::time::Instant;\n \n-use rustc_front::hir;\n-use rustc_front::intravisit;\n-use rustc_front::intravisit::Visitor;\n+use hir;\n+use hir::intravisit;\n+use hir::intravisit::Visitor;\n \n // The name of the associated type for `Fn` return types\n pub const FN_OUTPUT_NAME: &'static str = \"Output\";"}, {"sha": "69bcc9cbfffea807018c7fa2c73b2fab2b8f8164", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,7 +12,7 @@\n \n #![allow(non_snake_case)]\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use syntax::ast;\n \n pub use rustc_data_structures::fnv::FnvHashMap;"}, {"sha": "a84a42fc2b535cf033a119e25d6b0365bb7eb1bb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyStruct, TyEnum};\n@@ -23,7 +23,7 @@ use std::fmt;\n use syntax::abi::Abi;\n use syntax::parse::token;\n use syntax::ast::CRATE_NODE_ID;\n-use rustc_front::hir;\n+use hir;\n \n pub fn verbose() -> bool {\n     ty::tls::with(|tcx| tcx.sess.verbose())"}, {"sha": "85e861b405a9f8620b9480902e0208ce33666abd", "filename": "src/librustc_back/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_back%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_back%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,7 +11,6 @@ crate-type = [\"dylib\"]\n [dependencies]\n syntax = { path = \"../libsyntax\" }\n serialize = { path = \"../libserialize\" }\n-rustc_front = { path = \"../librustc_front\" }\n log = { path = \"../liblog\" }\n \n [features]"}, {"sha": "25edaf4b8e4e9774740a34513f18934797b2b3f4", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -45,13 +45,11 @@\n extern crate syntax;\n extern crate libc;\n extern crate serialize;\n-extern crate rustc_front;\n #[macro_use] extern crate log;\n \n pub mod tempdir;\n pub mod rpath;\n pub mod sha2;\n-pub mod svh;\n pub mod target;\n pub mod slice;\n pub mod dynamic_lib;"}, {"sha": "6da87f97fb79fdcded43f2cd4c79dfd35450ecf3", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,5 +13,4 @@ log = { path = \"../liblog\" }\n syntax = { path = \"../libsyntax\" }\n graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_mir = { path = \"../librustc_mir\" }"}, {"sha": "d79ba213aca14f6763cc23fb79559df5efa928cd", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -30,7 +30,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::traits::ProjectionMode;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use std::rc::Rc;\n "}, {"sha": "0b1c4efa9ac042ada249ff831c75487868bb1ec4", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -20,7 +20,7 @@ use borrowck::LoanPathKind::{LpVar, LpUpvar, LpDowncast, LpExtend};\n use borrowck::LoanPathElem::{LpDeref, LpInterior};\n use borrowck::move_data::InvalidMovePathIndex;\n use borrowck::move_data::{MoveData, MovePathIndex};\n-use rustc::middle::def_id::{DefId};\n+use rustc::hir::def_id::{DefId};\n use rustc::ty::{self, TyCtxt};\n use rustc::middle::mem_categorization as mc;\n "}, {"sha": "c85d69fa8a60d40ac8a1ab42c6c22772a834785d", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -23,7 +23,7 @@ use rustc::ty;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind};\n \n struct GatherMoveInfo<'tcx> {\n     id: ast::NodeId,"}, {"sha": "893c27f0ede32ff903294a4c2abae04513d80ff1", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -29,10 +29,10 @@ use rustc::traits::ProjectionMode;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::ast::NodeId;\n-use rustc_front::hir;\n-use rustc_front::hir::Expr;\n-use rustc_front::intravisit;\n-use rustc_front::intravisit::Visitor;\n+use rustc::hir;\n+use rustc::hir::Expr;\n+use rustc::hir::intravisit;\n+use rustc::hir::intravisit::Visitor;\n \n use self::restrictions::RestrictionResult;\n "}, {"sha": "3d94f5b186f0ff3371b74f15905ebe733290d473", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -16,7 +16,7 @@ use rustc::ty;\n use syntax::ast;\n use syntax::codemap;\n use syntax::errors::DiagnosticBuilder;\n-use rustc_front::hir;\n+use rustc::hir;\n \n pub struct MoveErrorCollector<'tcx> {\n     errors: Vec<MoveError<'tcx>>"}, {"sha": "672faea58f501d6370fab01311a4b41433654b02", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,8 +13,8 @@ use borrowck::BorrowckCtxt;\n use syntax::ast;\n use syntax::codemap::Span;\n \n-use rustc_front::hir;\n-use rustc_front::intravisit::{FnKind};\n+use rustc::hir;\n+use rustc::hir::intravisit::{FnKind};\n \n use rustc::mir::repr::{BasicBlock, BasicBlockData, Mir, Statement, Terminator};\n "}, {"sha": "d7c928b8d6e1fe962525ae1ad595894b995bb8c5", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -21,14 +21,14 @@ pub use self::MovedValueUseKind::*;\n use self::InteriorKind::*;\n \n use rustc::dep_graph::DepNode;\n-use rustc::front::map as hir_map;\n-use rustc::front::map::blocks::FnParts;\n+use rustc::hir::map as hir_map;\n+use rustc::hir::map::blocks::FnParts;\n use rustc::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::mem_categorization as mc;\n@@ -44,11 +44,10 @@ use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n \n-use rustc_front::hir;\n-use rustc_front::hir::{FnDecl, Block};\n-use rustc_front::intravisit;\n-use rustc_front::intravisit::{Visitor, FnKind};\n-use rustc_front::util as hir_util;\n+use rustc::hir;\n+use rustc::hir::{FnDecl, Block};\n+use rustc::hir::intravisit;\n+use rustc::hir::intravisit::{Visitor, FnKind};\n \n use rustc::mir::mir_map::MirMap;\n \n@@ -210,7 +209,7 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n {\n     // Check the body of fn items.\n     let tcx = this.tcx;\n-    let id_range = hir_util::compute_id_range_for_fn_body(fk, decl, body, sp, id);\n+    let id_range = intravisit::compute_id_range_for_fn_body(fk, decl, body, sp, id);\n     let (all_loans, move_data) =\n         gather_loans::gather_loans_in_fn(this, id, decl, body);\n "}, {"sha": "80e408e9a6e797ec73889c611238c691e3b69d07", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -28,9 +28,9 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use std::usize;\n use syntax::ast;\n-use syntax::ast_util;\n use syntax::codemap::Span;\n-use rustc_front::hir;\n+use rustc::hir;\n+use rustc::hir::intravisit::IdRange;\n \n #[path=\"fragments.rs\"]\n pub mod fragments;\n@@ -602,7 +602,7 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n     pub fn new(move_data: MoveData<'tcx>,\n                tcx: &'a TyCtxt<'tcx>,\n                cfg: &cfg::CFG,\n-               id_range: ast_util::IdRange,\n+               id_range: IdRange,\n                decl: &hir::FnDecl,\n                body: &hir::Block)\n                -> FlowedMoveData<'a, 'tcx> {"}, {"sha": "e38677de6625fc46a97eb015d011f76967d8e0d7", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -34,7 +34,6 @@\n extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_front;\n extern crate rustc_mir;\n extern crate core; // for NonZero\n "}, {"sha": "c572284a6bb376c2acd5311d38df8838c18edfb5", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,7 +12,6 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n serialize = { path = \"../libserialize\" }\n rustc = { path = \"../librustc\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "1e662d456d141a5bab79b6ee61bd09e527a90ad7", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,32 +17,30 @@ use rustc::middle::const_val::ConstVal;\n use ::{eval_const_expr, eval_const_expr_partial, compare_const_vals};\n use ::{const_expr_to_pat, lookup_const_by_id};\n use ::EvalHint::ExprTypeChecked;\n-use rustc::middle::def::*;\n-use rustc::middle::def_id::{DefId};\n+use rustc::hir::def::*;\n+use rustc::hir::def_id::{DefId};\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::infer;\n use rustc::middle::mem_categorization::{cmt};\n-use rustc::middle::pat_util::*;\n+use rustc::hir::pat_util::*;\n use rustc::traits::ProjectionMode;\n use rustc::ty::*;\n use rustc::ty;\n use std::cmp::Ordering;\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator, repeat};\n \n-use rustc_front::hir;\n-use rustc_front::hir::{Pat, PatKind};\n-use rustc_front::intravisit::{self, Visitor, FnKind};\n-use rustc_front::util as front_util;\n+use rustc::hir;\n+use rustc::hir::{Pat, PatKind};\n+use rustc::hir::intravisit::{self, IdVisitor, IdVisitingOperation, Visitor, FnKind};\n use rustc_back::slice;\n \n use syntax::ast::{self, DUMMY_NODE_ID, NodeId};\n-use syntax::ast_util;\n use syntax::codemap::{Span, Spanned, DUMMY_SP};\n-use rustc_front::fold::{Folder, noop_fold_pat};\n-use rustc_front::print::pprust::pat_to_string;\n+use rustc::hir::fold::{Folder, noop_fold_pat};\n+use rustc::hir::print::pat_to_string;\n use syntax::ptr::P;\n use rustc::util::nodemap::FnvHashMap;\n \n@@ -241,7 +239,7 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n }\n \n fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat) {\n-    front_util::walk_pat(pat, |p| {\n+    pat.walk(|p| {\n         match p.node {\n             PatKind::Ident(hir::BindByValue(hir::MutImmutable), ident, None) => {\n                 let pat_ty = cx.tcx.pat_ty(p);\n@@ -274,7 +272,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n \n // Check that we do not match against a static NaN (#6804)\n fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) {\n-    front_util::walk_pat(pat, |p| {\n+    pat.walk(|p| {\n         if let PatKind::Lit(ref expr) = p.node {\n             match eval_const_expr_partial(cx.tcx, &expr, ExprTypeChecked, None) {\n                 Ok(ConstVal::Float(f)) if f.is_nan() => {\n@@ -461,7 +459,7 @@ struct RenamingRecorder<'map> {\n     renaming_map: &'map mut FnvHashMap<(NodeId, Span), NodeId>\n }\n \n-impl<'map> ast_util::IdVisitingOperation for RenamingRecorder<'map> {\n+impl<'map> IdVisitingOperation for RenamingRecorder<'map> {\n     fn visit_id(&mut self, node_id: NodeId) {\n         let key = (node_id, self.origin_span);\n         self.renaming_map.insert(key, self.substituted_node_id);\n@@ -518,7 +516,7 @@ impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> {\n                 renaming_map: renaming_map,\n             };\n \n-            let mut id_visitor = front_util::IdVisitor::new(&mut renaming_recorder);\n+            let mut id_visitor = IdVisitor::new(&mut renaming_recorder);\n \n             id_visitor.visit_expr(const_expr);\n         }\n@@ -1100,7 +1098,7 @@ fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n     };\n \n     for pat in pats {\n-        front_util::walk_pat(&pat, |p| {\n+        pat.walk(|p| {\n             if pat_is_binding(&def_map.borrow(), &p) {\n                 match p.node {\n                     PatKind::Ident(hir::BindByValue(_), _, ref sub) => {"}, {"sha": "45a90bf00681c7a9aea2792ef8e010b8c1b1757a", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,13 +15,13 @@ use rustc::middle::const_val::ConstVal;\n use self::ErrKind::*;\n use self::EvalHint::*;\n \n-use rustc::front::map as ast_map;\n-use rustc::front::map::blocks::FnLikeNode;\n+use rustc::hir::map as ast_map;\n+use rustc::hir::map::blocks::FnLikeNode;\n use rustc::middle::cstore::{self, CrateStore, InlinedItem};\n use rustc::{infer, traits};\n-use rustc::middle::def::Def;\n-use rustc::middle::def_id::DefId;\n-use rustc::middle::pat_util::def_to_path;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::pat_util::def_to_path;\n use rustc::ty::{self, Ty, TyCtxt, subst};\n use rustc::ty::util::IntTypeExt;\n use rustc::traits::ProjectionMode;\n@@ -31,9 +31,9 @@ use rustc::lint;\n \n use graphviz::IntoCow;\n use syntax::ast;\n-use rustc_front::hir::{Expr, PatKind};\n-use rustc_front::hir;\n-use rustc_front::intravisit::FnKind;\n+use rustc::hir::{Expr, PatKind};\n+use rustc::hir;\n+use rustc::hir::intravisit::FnKind;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use syntax::codemap;"}, {"sha": "085888dc21f64bb4d38fbcc01f2d93c675f4f5f8", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -33,7 +33,6 @@\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;\n #[macro_use] extern crate rustc;\n-extern crate rustc_front;\n extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate graphviz;"}, {"sha": "bac5900f3edafda51dc18b7aefa6ee140c5e5fec", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,6 @@ rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_borrowck = { path = \"../librustc_borrowck\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_mir = { path = \"../librustc_mir\" }"}, {"sha": "f661b2a38b655d6d3510b8ba2e7a5e91eca22149", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use rustc::dep_graph::DepGraph;\n-use rustc::front;\n-use rustc::front::map as hir_map;\n+use rustc::hir;\n+use rustc::hir::map as hir_map;\n use rustc_mir as mir;\n use rustc::mir::mir_map::MirMap;\n use rustc::session::{Session, CompileResult, compile_result_from_err_count};\n@@ -35,8 +35,7 @@ use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc_front::hir;\n-use rustc_front::lowering::{lower_crate, LoweringContext};\n+use rustc::hir::lowering::{lower_crate, LoweringContext};\n use rustc_passes::{no_asm, loops, consts, const_fn, rvalues, static_recursion};\n use rustc_const_eval::check_match;\n use super::Compilation;\n@@ -155,7 +154,7 @@ pub fn compile_input(sess: &Session,\n         }\n \n         time(sess.time_passes(), \"attribute checking\", || {\n-            front::check_attr::check_crate(sess, &expanded_crate);\n+            hir::check_attr::check_crate(sess, &expanded_crate);\n         });\n \n         time(sess.time_passes(),"}, {"sha": "b4b53d30e3c04b54395eab24b197ddfecdbf062d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -42,7 +42,6 @@ extern crate rustc_back;\n extern crate rustc_borrowck;\n extern crate rustc_const_eval;\n extern crate rustc_passes;\n-extern crate rustc_front;\n extern crate rustc_lint;\n extern crate rustc_plugin;\n extern crate rustc_privacy;"}, {"sha": "cde5ba19859e03fa99d9c66681ddf331302abed2", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -50,11 +50,11 @@ use std::option;\n use std::path::PathBuf;\n use std::str::FromStr;\n \n-use rustc::front::map as hir_map;\n-use rustc::front::map::{blocks, NodePrinter};\n-use rustc_front::hir;\n-use rustc_front::lowering::{lower_crate, LoweringContext};\n-use rustc_front::print::pprust as pprust_hir;\n+use rustc::hir::map as hir_map;\n+use rustc::hir::map::{blocks, NodePrinter};\n+use rustc::hir;\n+use rustc::hir::lowering::{lower_crate, LoweringContext};\n+use rustc::hir::print as pprust_hir;\n \n use rustc::mir::mir_map::MirMap;\n \n@@ -256,6 +256,15 @@ trait HirPrinterSupport<'ast>: pprust_hir::PpAnn {\n     /// (Rust does not yet support upcasting from a trait object to\n     /// an object for one of its super-traits.)\n     fn pp_ann<'a>(&'a self) -> &'a pprust_hir::PpAnn;\n+\n+    /// Computes an user-readable representation of a path, if possible.\n+    fn node_path(&self, id: ast::NodeId) -> Option<String> {\n+        self.ast_map().and_then(|map| map.def_path_from_id(id)).map(|path| {\n+            path.data.into_iter().map(|elem| {\n+                elem.data.to_string()\n+            }).collect::<Vec<_>>().join(\"::\")\n+        })\n+    }\n }\n \n struct NoAnn<'ast> {\n@@ -452,6 +461,10 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n     fn pp_ann<'a>(&'a self) -> &'a pprust_hir::PpAnn {\n         self\n     }\n+\n+    fn node_path(&self, id: ast::NodeId) -> Option<String> {\n+        Some(self.tcx.node_path_str(id))\n+    }\n }\n \n impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n@@ -794,7 +807,7 @@ pub fn pretty_print_input(sess: Session,\n                                        |annotation, (out,uii), _| {\n                 debug!(\"pretty printing source code {:?}\", s);\n                 let sess = annotation.sess();\n-                let ast_map = annotation.ast_map().expect(\"--pretty missing ast_map\");\n+                let ast_map = annotation.ast_map().expect(\"--unpretty missing HIR map\");\n                 let mut pp_state =\n                     pprust_hir::State::new_from_input(sess.codemap(),\n                                                       sess.diagnostic(),\n@@ -808,7 +821,9 @@ pub fn pretty_print_input(sess: Session,\n                     let node = ast_map.get(node_id);\n                     pp_state.print_node(&node)?;\n                     pp::space(&mut pp_state.s)?;\n-                    pp_state.synth_comment(ast_map.path_to_string(node_id))?;\n+                    let path = annotation.node_path(node_id)\n+                                         .expect(\"--unpretty missing node paths\");\n+                    pp_state.synth_comment(path)?;\n                     pp::hardbreak(&mut pp_state.s)?;\n                 }\n                 pp::eof(&mut pp_state.s)"}, {"sha": "fc12d546288b47b0c4a4fe5770723521c955b82d", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -27,7 +27,7 @@ use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::relate::TypeRelation;\n use rustc::infer::{self, InferOk, InferResult, TypeOrigin};\n use rustc_metadata::cstore::CStore;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use std::rc::Rc;\n use syntax::ast;\n@@ -39,8 +39,8 @@ use syntax::errors::{Level, RenderSpan};\n use syntax::parse::token;\n use syntax::feature_gate::UnstableFeatures;\n \n-use rustc_front::lowering::{lower_crate, LoweringContext};\n-use rustc_front::hir;\n+use rustc::hir::lowering::{lower_crate, LoweringContext};\n+use rustc::hir;\n \n struct Env<'a, 'tcx: 'a> {\n     infcx: &'a infer::InferCtxt<'a, 'tcx>,"}, {"sha": "bf40cdbd330e1acfecf1fbc07bde3e86adab9ab1", "filename": "src/librustc_front/Cargo.toml", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibrustc_front%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibrustc_front%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2FCargo.toml?ref=af7b00b68fc7960e98fb914be52d9a6a16fe2224", "patch": "@@ -1,15 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"rustc_front\"\n-version = \"0.0.0\"\n-\n-[lib]\n-name = \"rustc_front\"\n-path = \"lib.rs\"\n-crate-type = [\"dylib\"]\n-\n-[dependencies]\n-log = { path = \"../liblog\" }\n-syntax = { path = \"../libsyntax\" }\n-serialize = { path = \"../libserialize\" }\n-rustc_bitflags = { path = \"../librustc_bitflags\" }"}, {"sha": "b9e3b71cf1ad76eb28617dca3bad7f8a770663e8", "filename": "src/librustc_front/lib.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibrustc_front%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibrustc_front%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flib.rs?ref=af7b00b68fc7960e98fb914be52d9a6a16fe2224", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! The Rust compiler.\n-//!\n-//! # Note\n-//!\n-//! This API is completely unstable and subject to change.\n-\n-#![crate_name = \"rustc_front\"]\n-#![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![crate_type = \"dylib\"]\n-#![crate_type = \"rlib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n-#![cfg_attr(not(stage0), deny(warnings))]\n-\n-#![feature(associated_consts)]\n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n-#![feature(const_fn)]\n-#![feature(quote)]\n-#![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_private)]\n-#![feature(slice_patterns)]\n-#![feature(staged_api)]\n-#![feature(str_char)]\n-#![feature(question_mark)]\n-\n-extern crate serialize;\n-#[macro_use]\n-extern crate log;\n-#[macro_use]\n-extern crate syntax;\n-#[macro_use]\n-#[no_link]\n-extern crate rustc_bitflags;\n-\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n-#[macro_use]\n-pub mod hir;\n-pub mod lowering;\n-pub mod fold;\n-pub mod intravisit;\n-pub mod util;\n-\n-pub mod print {\n-    pub mod pprust;\n-}"}, {"sha": "f4f9cb75eaf36efc361e3c4be218ca58884cb33d", "filename": "src/librustc_front/util.rs", "status": "removed", "additions": 0, "deletions": 362, "changes": 362, "blob_url": "https://github.com/rust-lang/rust/blob/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=af7b00b68fc7960e98fb914be52d9a6a16fe2224", "patch": "@@ -1,362 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use hir;\n-use hir::*;\n-use intravisit::{self, Visitor, FnKind};\n-use syntax::ast_util;\n-use syntax::ast::{Name, NodeId, DUMMY_NODE_ID};\n-use syntax::codemap::Span;\n-use syntax::ptr::P;\n-\n-pub fn walk_pat<F>(pat: &Pat, mut it: F) -> bool\n-    where F: FnMut(&Pat) -> bool\n-{\n-    // FIXME(#19596) this is a workaround, but there should be a better way\n-    fn walk_pat_<G>(pat: &Pat, it: &mut G) -> bool\n-        where G: FnMut(&Pat) -> bool\n-    {\n-        if !it(pat) {\n-            return false;\n-        }\n-\n-        match pat.node {\n-            PatKind::Ident(_, _, Some(ref p)) => walk_pat_(&p, it),\n-            PatKind::Struct(_, ref fields, _) => {\n-                fields.iter().all(|field| walk_pat_(&field.node.pat, it))\n-            }\n-            PatKind::TupleStruct(_, Some(ref s)) | PatKind::Tup(ref s) => {\n-                s.iter().all(|p| walk_pat_(&p, it))\n-            }\n-            PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n-                walk_pat_(&s, it)\n-            }\n-            PatKind::Vec(ref before, ref slice, ref after) => {\n-                before.iter().all(|p| walk_pat_(&p, it)) &&\n-                slice.iter().all(|p| walk_pat_(&p, it)) &&\n-                after.iter().all(|p| walk_pat_(&p, it))\n-            }\n-            PatKind::Wild |\n-            PatKind::Lit(_) |\n-            PatKind::Range(_, _) |\n-            PatKind::Ident(_, _, _) |\n-            PatKind::TupleStruct(..) |\n-            PatKind::Path(..) |\n-            PatKind::QPath(_, _) => {\n-                true\n-            }\n-        }\n-    }\n-\n-    walk_pat_(pat, &mut it)\n-}\n-\n-pub fn binop_to_string(op: BinOp_) -> &'static str {\n-    match op {\n-        BiAdd => \"+\",\n-        BiSub => \"-\",\n-        BiMul => \"*\",\n-        BiDiv => \"/\",\n-        BiRem => \"%\",\n-        BiAnd => \"&&\",\n-        BiOr => \"||\",\n-        BiBitXor => \"^\",\n-        BiBitAnd => \"&\",\n-        BiBitOr => \"|\",\n-        BiShl => \"<<\",\n-        BiShr => \">>\",\n-        BiEq => \"==\",\n-        BiLt => \"<\",\n-        BiLe => \"<=\",\n-        BiNe => \"!=\",\n-        BiGe => \">=\",\n-        BiGt => \">\",\n-    }\n-}\n-\n-pub fn stmt_id(s: &Stmt) -> NodeId {\n-    match s.node {\n-        StmtDecl(_, id) => id,\n-        StmtExpr(_, id) => id,\n-        StmtSemi(_, id) => id,\n-    }\n-}\n-\n-pub fn lazy_binop(b: BinOp_) -> bool {\n-    match b {\n-        BiAnd => true,\n-        BiOr => true,\n-        _ => false,\n-    }\n-}\n-\n-pub fn is_shift_binop(b: BinOp_) -> bool {\n-    match b {\n-        BiShl => true,\n-        BiShr => true,\n-        _ => false,\n-    }\n-}\n-\n-pub fn is_comparison_binop(b: BinOp_) -> bool {\n-    match b {\n-        BiEq | BiLt | BiLe | BiNe | BiGt | BiGe => true,\n-        BiAnd |\n-        BiOr |\n-        BiAdd |\n-        BiSub |\n-        BiMul |\n-        BiDiv |\n-        BiRem |\n-        BiBitXor |\n-        BiBitAnd |\n-        BiBitOr |\n-        BiShl |\n-        BiShr => false,\n-    }\n-}\n-\n-/// Returns `true` if the binary operator takes its arguments by value\n-pub fn is_by_value_binop(b: BinOp_) -> bool {\n-    !is_comparison_binop(b)\n-}\n-\n-/// Returns `true` if the unary operator takes its argument by value\n-pub fn is_by_value_unop(u: UnOp) -> bool {\n-    match u {\n-        UnNeg | UnNot => true,\n-        _ => false,\n-    }\n-}\n-\n-pub fn unop_to_string(op: UnOp) -> &'static str {\n-    match op {\n-        UnDeref => \"*\",\n-        UnNot => \"!\",\n-        UnNeg => \"-\",\n-    }\n-}\n-\n-pub struct IdVisitor<'a, O: 'a> {\n-    operation: &'a mut O,\n-\n-    // In general, the id visitor visits the contents of an item, but\n-    // not including nested trait/impl items, nor other nested items.\n-    // The base visitor itself always skips nested items, but not\n-    // trait/impl items. This means in particular that if you start by\n-    // visiting a trait or an impl, you should not visit the\n-    // trait/impl items respectively.  This is handled by setting\n-    // `skip_members` to true when `visit_item` is on the stack. This\n-    // way, if the user begins by calling `visit_trait_item`, we will\n-    // visit the trait item, but if they begin with `visit_item`, we\n-    // won't visit the (nested) trait items.\n-    skip_members: bool,\n-}\n-\n-impl<'a, O: ast_util::IdVisitingOperation> IdVisitor<'a, O> {\n-    pub fn new(operation: &'a mut O) -> IdVisitor<'a, O> {\n-        IdVisitor { operation: operation, skip_members: false }\n-    }\n-\n-    fn visit_generics_helper(&mut self, generics: &Generics) {\n-        for type_parameter in generics.ty_params.iter() {\n-            self.operation.visit_id(type_parameter.id)\n-        }\n-        for lifetime in &generics.lifetimes {\n-            self.operation.visit_id(lifetime.lifetime.id)\n-        }\n-    }\n-}\n-\n-impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n-    fn visit_mod(&mut self, module: &Mod, _: Span, node_id: NodeId) {\n-        self.operation.visit_id(node_id);\n-        intravisit::walk_mod(self, module)\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        self.operation.visit_id(foreign_item.id);\n-        intravisit::walk_foreign_item(self, foreign_item)\n-    }\n-\n-    fn visit_item(&mut self, item: &Item) {\n-        assert!(!self.skip_members);\n-        self.skip_members = true;\n-\n-        self.operation.visit_id(item.id);\n-        match item.node {\n-            ItemUse(ref view_path) => {\n-                match view_path.node {\n-                    ViewPathSimple(_, _) |\n-                    ViewPathGlob(_) => {}\n-                    ViewPathList(_, ref paths) => {\n-                        for path in paths {\n-                            self.operation.visit_id(path.node.id())\n-                        }\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-        intravisit::walk_item(self, item);\n-\n-        self.skip_members = false;\n-    }\n-\n-    fn visit_local(&mut self, local: &Local) {\n-        self.operation.visit_id(local.id);\n-        intravisit::walk_local(self, local)\n-    }\n-\n-    fn visit_block(&mut self, block: &Block) {\n-        self.operation.visit_id(block.id);\n-        intravisit::walk_block(self, block)\n-    }\n-\n-    fn visit_stmt(&mut self, statement: &Stmt) {\n-        self.operation.visit_id(stmt_id(statement));\n-        intravisit::walk_stmt(self, statement)\n-    }\n-\n-    fn visit_pat(&mut self, pattern: &Pat) {\n-        self.operation.visit_id(pattern.id);\n-        intravisit::walk_pat(self, pattern)\n-    }\n-\n-    fn visit_expr(&mut self, expression: &Expr) {\n-        self.operation.visit_id(expression.id);\n-        intravisit::walk_expr(self, expression)\n-    }\n-\n-    fn visit_ty(&mut self, typ: &Ty) {\n-        self.operation.visit_id(typ.id);\n-        intravisit::walk_ty(self, typ)\n-    }\n-\n-    fn visit_generics(&mut self, generics: &Generics) {\n-        self.visit_generics_helper(generics);\n-        intravisit::walk_generics(self, generics)\n-    }\n-\n-    fn visit_fn(&mut self,\n-                function_kind: FnKind<'v>,\n-                function_declaration: &'v FnDecl,\n-                block: &'v Block,\n-                span: Span,\n-                node_id: NodeId) {\n-        self.operation.visit_id(node_id);\n-\n-        match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n-                self.visit_generics_helper(generics)\n-            }\n-            FnKind::Method(_, sig, _, _) => {\n-                self.visit_generics_helper(&sig.generics)\n-            }\n-            FnKind::Closure(_) => {}\n-        }\n-\n-        for argument in &function_declaration.inputs {\n-            self.operation.visit_id(argument.id)\n-        }\n-\n-        intravisit::walk_fn(self, function_kind, function_declaration, block, span);\n-    }\n-\n-    fn visit_struct_field(&mut self, struct_field: &StructField) {\n-        self.operation.visit_id(struct_field.id);\n-        intravisit::walk_struct_field(self, struct_field)\n-    }\n-\n-    fn visit_variant_data(&mut self,\n-                          struct_def: &VariantData,\n-                          _: Name,\n-                          _: &hir::Generics,\n-                          _: NodeId,\n-                          _: Span) {\n-        self.operation.visit_id(struct_def.id());\n-        intravisit::walk_struct_def(self, struct_def);\n-    }\n-\n-    fn visit_trait_item(&mut self, ti: &hir::TraitItem) {\n-        if !self.skip_members {\n-            self.operation.visit_id(ti.id);\n-            intravisit::walk_trait_item(self, ti);\n-        }\n-    }\n-\n-    fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n-        if !self.skip_members {\n-            self.operation.visit_id(ii.id);\n-            intravisit::walk_impl_item(self, ii);\n-        }\n-    }\n-\n-    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n-        self.operation.visit_id(lifetime.id);\n-    }\n-\n-    fn visit_lifetime_def(&mut self, def: &LifetimeDef) {\n-        self.visit_lifetime(&def.lifetime);\n-    }\n-\n-    fn visit_trait_ref(&mut self, trait_ref: &TraitRef) {\n-        self.operation.visit_id(trait_ref.ref_id);\n-        intravisit::walk_trait_ref(self, trait_ref);\n-    }\n-}\n-\n-/// Computes the id range for a single fn body, ignoring nested items.\n-pub fn compute_id_range_for_fn_body(fk: FnKind,\n-                                    decl: &FnDecl,\n-                                    body: &Block,\n-                                    sp: Span,\n-                                    id: NodeId)\n-                                    -> ast_util::IdRange {\n-    let mut visitor = ast_util::IdRangeComputingVisitor { result: ast_util::IdRange::max() };\n-    let mut id_visitor = IdVisitor::new(&mut visitor);\n-    id_visitor.visit_fn(fk, decl, body, sp, id);\n-    id_visitor.operation.result\n-}\n-\n-pub fn is_path(e: P<Expr>) -> bool {\n-    match e.node {\n-        ExprPath(..) => true,\n-        _ => false,\n-    }\n-}\n-\n-pub fn empty_generics() -> Generics {\n-    Generics {\n-        lifetimes: HirVec::new(),\n-        ty_params: HirVec::new(),\n-        where_clause: WhereClause {\n-            id: DUMMY_NODE_ID,\n-            predicates: HirVec::new(),\n-        },\n-    }\n-}\n-\n-// convert a span and an identifier to the corresponding\n-// 1-segment path\n-pub fn ident_to_path(s: Span, ident: Ident) -> Path {\n-    hir::Path {\n-        span: s,\n-        global: false,\n-        segments: hir_vec![hir::PathSegment {\n-            identifier: ident,\n-            parameters: hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n-                lifetimes: HirVec::new(),\n-                types: HirVec::new(),\n-                bindings: HirVec::new(),\n-            }),\n-        }],\n-    }\n-}"}, {"sha": "3f0cd397e769c5858e91c257949e85edcbcb501c", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,5 +13,4 @@ log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n-rustc_front = { path = \"../librustc_front\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "d10691d12ed970c1d71c61e63e6692a04c0fab84", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def::Def;\n+use rustc::hir::def::Def;\n use rustc::ty;\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass};\n@@ -17,8 +17,8 @@ use syntax::ast;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::Span;\n \n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::intravisit::FnKind;\n+use rustc::hir::{self, PatKind};\n+use rustc::hir::intravisit::FnKind;\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {"}, {"sha": "5e3a47701ebbfb767a61f5960fcd4f86317df1e8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -28,16 +28,16 @@\n //! Use the former for unit-like structs and the latter for structs with\n //! a `pub fn new()`.\n \n-use middle::def::Def;\n+use rustc::hir::def::Def;\n use middle::cstore::CrateStore;\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use middle::stability;\n use rustc::{cfg, infer};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::adjustment;\n use rustc::traits::{self, ProjectionMode};\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use util::nodemap::{NodeSet};\n use lint::{Level, LateContext, LintContext, LintArray, Lint};\n use lint::{LintPass, LateLintPass};\n@@ -48,8 +48,8 @@ use syntax::{ast};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n \n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::intravisit::FnKind;\n+use rustc::hir::{self, PatKind};\n+use rustc::hir::intravisit::FnKind;\n \n use bad_style::{MethodLateContext, method_context};\n \n@@ -1087,10 +1087,7 @@ impl LateLintPass for MutableTransmutes {\n                 ty::TyFnDef(_, _, ref bfty) if bfty.abi == RustIntrinsic => (),\n                 _ => return false\n             }\n-            cx.tcx.with_path(def_id, |path| match path.last() {\n-                Some(ref last) => last.name().as_str() == \"transmute\",\n-                _ => false\n-            })\n+            cx.tcx.item_name(def_id).as_str() == \"transmute\"\n         }\n     }\n }"}, {"sha": "2075bd5edcaeb913c3dfc002b651c4c23d789a47", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -44,7 +44,6 @@ extern crate syntax;\n extern crate rustc;\n #[macro_use]\n extern crate log;\n-extern crate rustc_front;\n extern crate rustc_back;\n extern crate rustc_const_eval;\n "}, {"sha": "891731cb29604ee615801933bafe6d6e49c3fa33", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(non_snake_case)]\n \n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -29,8 +29,7 @@ use syntax::abi::Abi;\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n \n-use rustc_front::hir;\n-use rustc_front::util::is_shift_binop;\n+use rustc::hir;\n \n register_long_diagnostics! {\n E0519: r##\"\n@@ -130,7 +129,7 @@ impl LateLintPass for TypeLimits {\n                                  \"comparison is useless due to type limits\");\n                 }\n \n-                if is_shift_binop(binop.node) {\n+                if binop.node.is_shift() {\n                     let opt_ty_bits = match cx.tcx.node_id_to_type(l.id).sty {\n                         ty::TyInt(t) => Some(int_ty_bits(t, cx.sess().target.int_type)),\n                         ty::TyUint(t) => Some(uint_ty_bits(t, cx.sess().target.uint_type)),"}, {"sha": "d1595f243c9bfba65f14b3170757f463a0bf8f11", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::pat_util;\n+use rustc::hir::pat_util;\n use rustc::ty;\n use rustc::ty::adjustment;\n use util::nodemap::FnvHashMap;\n@@ -24,8 +24,8 @@ use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::ptr::P;\n \n use rustc_back::slice;\n-use rustc_front::hir;\n-use rustc_front::intravisit::FnKind;\n+use rustc::hir;\n+use rustc::hir::intravisit::FnKind;\n \n declare_lint! {\n     pub UNUSED_MUT,"}, {"sha": "697cbe39c67fcb61c69eb02372ec8c866727fe2f", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -16,7 +16,6 @@ rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "6fd9f27f0fb9fb9567911e01f0cb1ee5b07858b9", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,12 +12,13 @@\n // FIXME: remove this after snapshot, and Results are handled\n #![allow(unused_must_use)]\n \n-use rustc::front::map as ast_map;\n+use rustc::hir::map as ast_map;\n use rustc::session::Session;\n \n-use rustc_front::hir;\n-use rustc_front::fold;\n-use rustc_front::fold::Folder;\n+use rustc::hir;\n+use rustc::hir::fold;\n+use rustc::hir::fold::Folder;\n+use rustc::hir::intravisit::{IdRange, IdRangeComputingVisitor, IdVisitingOperation};\n \n use common as c;\n use cstore;\n@@ -30,13 +31,13 @@ use middle::cstore::{InlinedItem, InlinedItemRef};\n use rustc::ty::adjustment;\n use rustc::ty::cast;\n use middle::const_qualif::ConstQualif;\n-use middle::def::{self, Def};\n-use middle::def_id::DefId;\n+use rustc::hir::def::{self, Def};\n+use rustc::hir::def_id::DefId;\n use middle::region;\n use rustc::ty::subst;\n use rustc::ty::{self, Ty, TyCtxt};\n \n-use syntax::{ast, ast_util, codemap};\n+use syntax::{ast, codemap};\n use syntax::ast::NodeIdAssigner;\n use syntax::ptr::P;\n \n@@ -55,14 +56,14 @@ use serialize::EncoderHelpers;\n #[cfg(test)] use std::io::Cursor;\n #[cfg(test)] use syntax::parse;\n #[cfg(test)] use syntax::ast::NodeId;\n-#[cfg(test)] use rustc_front::print::pprust;\n-#[cfg(test)] use rustc_front::lowering::{lower_item, LoweringContext};\n+#[cfg(test)] use rustc::hir::print as pprust;\n+#[cfg(test)] use rustc::hir::lowering::{lower_item, LoweringContext};\n \n struct DecodeContext<'a, 'b, 'tcx: 'a> {\n     tcx: &'a TyCtxt<'tcx>,\n     cdata: &'b cstore::crate_metadata,\n-    from_id_range: ast_util::IdRange,\n-    to_id_range: ast_util::IdRange,\n+    from_id_range: IdRange,\n+    to_id_range: IdRange,\n     // Cache the last used filemap for translating spans as an optimization.\n     last_filemap_index: Cell<usize>,\n }\n@@ -84,7 +85,7 @@ pub fn encode_inlined_item(ecx: &e::EncodeContext,\n         InlinedItemRef::ImplItem(_, ii) => ii.id,\n     };\n     debug!(\"> Encoding inlined item: {} ({:?})\",\n-           ecx.tcx.map.path_to_string(id),\n+           ecx.tcx.node_path_str(id),\n            rbml_w.writer.seek(SeekFrom::Current(0)));\n \n     // Folding could be avoided with a smarter encoder.\n@@ -98,7 +99,7 @@ pub fn encode_inlined_item(ecx: &e::EncodeContext,\n     rbml_w.end_tag();\n \n     debug!(\"< Encoded inlined fn: {} ({:?})\",\n-           ecx.tcx.map.path_to_string(id),\n+           ecx.tcx.node_path_str(id),\n            rbml_w.writer.seek(SeekFrom::Current(0)));\n }\n \n@@ -123,20 +124,12 @@ impl<'a, 'b, 'c, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'c, 'tcx> {\n /// ast-map.\n pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n                                  tcx: &TyCtxt<'tcx>,\n-                                 parent_path: Vec<ast_map::PathElem>,\n                                  parent_def_path: ast_map::DefPath,\n                                  parent_did: DefId,\n                                  ast_doc: rbml::Doc,\n                                  orig_did: DefId)\n                                  -> &'tcx InlinedItem {\n-    let mut path_as_str = None;\n-    debug!(\"> Decoding inlined fn: {:?}::?\",\n-    {\n-        // Do an Option dance to use the path after it is moved below.\n-        let s = ast_map::path_to_string(parent_path.iter().cloned());\n-        path_as_str = Some(s);\n-        path_as_str.as_ref().map(|x| &x[..])\n-    });\n+    debug!(\"> Decoding inlined fn: {:?}\", tcx.item_path_str(orig_did));\n     let mut ast_dsr = reader::Decoder::new(ast_doc);\n     let from_id_range = Decodable::decode(&mut ast_dsr).unwrap();\n     let to_id_range = reserve_id_range(&tcx.sess, from_id_range);\n@@ -148,7 +141,6 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n         last_filemap_index: Cell::new(0)\n     };\n     let ii = ast_map::map_decoded_item(&dcx.tcx.map,\n-                                       parent_path,\n                                        parent_def_path,\n                                        parent_did,\n                                        decode_ast(ast_doc),\n@@ -161,14 +153,14 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n     };\n     debug!(\"Fn named: {}\", name);\n     debug!(\"< Decoded inlined fn: {}::{}\",\n-            path_as_str.unwrap(),\n+            tcx.item_path_str(parent_did),\n             name);\n     region::resolve_inlined_item(&tcx.sess, &tcx.region_maps, ii);\n     decode_side_tables(dcx, ast_doc);\n     copy_item_types(dcx, ii, orig_did);\n     if let InlinedItem::Item(ref i) = *ii {\n         debug!(\">>> DECODED ITEM >>>\\n{}\\n<<< DECODED ITEM <<<\",\n-               ::rustc_front::print::pprust::item_to_string(&i));\n+               ::rustc::hir::print::item_to_string(&i));\n     }\n \n     ii\n@@ -178,13 +170,13 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n // Enumerating the IDs which appear in an AST\n \n fn reserve_id_range(sess: &Session,\n-                    from_id_range: ast_util::IdRange) -> ast_util::IdRange {\n+                    from_id_range: IdRange) -> IdRange {\n     // Handle the case of an empty range:\n     if from_id_range.empty() { return from_id_range; }\n     let cnt = from_id_range.max - from_id_range.min;\n     let to_id_min = sess.reserve_node_ids(cnt);\n     let to_id_max = to_id_min + cnt;\n-    ast_util::IdRange { min: to_id_min, max: to_id_max }\n+    IdRange { min: to_id_min, max: to_id_max }\n }\n \n impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n@@ -409,20 +401,20 @@ impl tr for Def {\n // ______________________________________________________________________\n // Encoding and decoding of freevar information\n \n-fn encode_freevar_entry(rbml_w: &mut Encoder, fv: &ty::Freevar) {\n+fn encode_freevar_entry(rbml_w: &mut Encoder, fv: &hir::Freevar) {\n     (*fv).encode(rbml_w).unwrap();\n }\n \n trait rbml_decoder_helper {\n     fn read_freevar_entry(&mut self, dcx: &DecodeContext)\n-                          -> ty::Freevar;\n+                          -> hir::Freevar;\n     fn read_capture_mode(&mut self) -> hir::CaptureClause;\n }\n \n impl<'a> rbml_decoder_helper for reader::Decoder<'a> {\n     fn read_freevar_entry(&mut self, dcx: &DecodeContext)\n-                          -> ty::Freevar {\n-        let fv: ty::Freevar = Decodable::decode(self).unwrap();\n+                          -> hir::Freevar {\n+        let fv: hir::Freevar = Decodable::decode(self).unwrap();\n         fv.tr(dcx)\n     }\n \n@@ -432,9 +424,9 @@ impl<'a> rbml_decoder_helper for reader::Decoder<'a> {\n     }\n }\n \n-impl tr for ty::Freevar {\n-    fn tr(&self, dcx: &DecodeContext) -> ty::Freevar {\n-        ty::Freevar {\n+impl tr for hir::Freevar {\n+    fn tr(&self, dcx: &DecodeContext) -> hir::Freevar {\n+        hir::Freevar {\n             def: self.def.tr(dcx),\n             span: self.span.tr(dcx),\n         }\n@@ -705,7 +697,7 @@ struct SideTableEncodingIdVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> {\n     rbml_w: &'a mut Encoder<'b>,\n }\n \n-impl<'a, 'b, 'c, 'tcx> ast_util::IdVisitingOperation for\n+impl<'a, 'b, 'c, 'tcx> IdVisitingOperation for\n         SideTableEncodingIdVisitor<'a, 'b, 'c, 'tcx> {\n     fn visit_id(&mut self, id: ast::NodeId) {\n         encode_side_tables_for_id(self.ecx, self.rbml_w, id)\n@@ -1261,8 +1253,8 @@ fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) {\n     }\n }\n \n-fn inlined_item_id_range(v: &InlinedItem) -> ast_util::IdRange {\n-    let mut visitor = ast_util::IdRangeComputingVisitor::new();\n+fn inlined_item_id_range(v: &InlinedItem) -> IdRange {\n+    let mut visitor = IdRangeComputingVisitor::new();\n     v.visit_ids(&mut visitor);\n     visitor.result()\n }"}, {"sha": "ea4e25754202c7ff23466d0a135306355bd70830", "filename": "src/librustc_metadata/common.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -86,13 +86,10 @@ pub const tag_item_trait_ref: usize = 0x3b;\n // discriminator value for variants\n pub const tag_disr_val: usize = 0x3c;\n \n-// used to encode ast_map::PathElem\n-pub const tag_path: usize = 0x3d;\n-pub const tag_path_len: usize = 0x3e;\n-pub const tag_path_elem_mod: usize = 0x3f;\n-pub const tag_path_elem_name: usize = 0x40;\n-pub const tag_item_field: usize = 0x41;\n+// GAP 0x3d, 0x3e, 0x3f, 0x40\n \n+pub const tag_item_field: usize = 0x41;\n+// GAP 0x42\n pub const tag_item_variances: usize = 0x43;\n /*\n   trait items contain tag_item_trait_item elements,"}, {"sha": "df9072835b9e8ee92a6409baa755b8643fdbe140", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,13 +17,13 @@ use cstore::{self, CStore, CrateSource, MetadataBlob};\n use decoder;\n use loader::{self, CratePaths};\n \n-use rustc::back::svh::Svh;\n+use rustc::hir::svh::Svh;\n use rustc::dep_graph::DepNode;\n use rustc::session::{config, Session};\n use rustc::session::search_paths::PathKind;\n use rustc::middle::cstore::{CrateStore, validate_crate_name, ExternCrate};\n use rustc::util::nodemap::FnvHashMap;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n \n use std::cell::{RefCell, Cell};\n use std::path::PathBuf;\n@@ -37,8 +37,8 @@ use syntax::parse;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n-use rustc_front::intravisit::Visitor;\n-use rustc_front::hir;\n+use rustc::hir::intravisit::Visitor;\n+use rustc::hir;\n use log;\n \n pub struct LocalCrateReader<'a, 'b:'a> {"}, {"sha": "0b90ad5b4e27695bef5708994d94cbf6ed218f8f", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,12 +15,12 @@ use loader;\n \n use middle::cstore::{CrateStore, CrateSource, ChildItem, ExternCrate, FoundAst, DefLike};\n use middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n-use middle::def;\n+use rustc::hir::def;\n use middle::lang_items;\n use rustc::ty::{self, Ty, TyCtxt, VariantKind};\n-use middle::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n \n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::mir::repr::Mir;\n use rustc::mir::mir_map::MirMap;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n@@ -31,9 +31,9 @@ use std::path::PathBuf;\n use syntax::ast;\n use syntax::attr;\n use syntax::parse::token;\n-use rustc_back::svh::Svh;\n+use rustc::hir::svh::Svh;\n use rustc_back::target::Target;\n-use rustc_front::hir;\n+use rustc::hir;\n \n impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability>\n@@ -128,22 +128,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_method_arg_names(&cdata, did.index)\n     }\n \n-    fn relative_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> {\n-        let cdata = self.get_crate_data(def.krate);\n-        decoder::get_item_path(&cdata, def.index)\n-    }\n-\n-    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> {\n-        let cdata = self.get_crate_data(def.krate);\n-        let path = decoder::get_item_path(&cdata, def.index);\n-\n-        let mut r = Vec::with_capacity(path.len() + 1);\n-        let crate_name = hir_map::PathMod(token::intern(&cdata.name));\n-        r.push(crate_name);\n-        r.extend_from_slice(&path);\n-        r\n-    }\n-\n     fn item_name(&self, def: DefId) -> ast::Name {\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_item_name(&self.intr, &cdata, def.index)\n@@ -552,7 +536,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n         if !visible_parent_map.is_empty() { return visible_parent_map; }\n \n-        use rustc_front::hir;\n+        use rustc::hir;\n         use rustc::middle::cstore::{CrateStore, ChildItem};\n         use std::collections::vec_deque::VecDeque;\n         use std::collections::hash_map::Entry;"}, {"sha": "d5a9adafe7dcad71406089649d1fa7ce61da5bb6", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -20,10 +20,10 @@ use decoder;\n use index;\n use loader;\n \n-use rustc::back::svh::Svh;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{ExternCrate};\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n-use rustc::middle::def_id::DefId;\n \n use std::cell::{RefCell, Ref, Cell};\n use std::rc::Rc;"}, {"sha": "6b53edbbff1d89c8a30bec7aeb5a1a9251189fe3", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -22,15 +22,15 @@ use index;\n use tls_context;\n use tydecode::TyDecoder;\n \n-use rustc::back::svh::Svh;\n-use rustc::front::map as hir_map;\n+use rustc::hir::svh::Svh;\n+use rustc::hir::map as hir_map;\n use rustc::util::nodemap::FnvHashMap;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use middle::cstore::{LOCAL_CRATE, FoundAst, InlinedItem, LinkagePreference};\n use middle::cstore::{DefLike, DlDef, DlField, DlImpl, tls};\n-use middle::def::Def;\n-use middle::def_id::{DefId, DefIndex};\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::{DefId, DefIndex};\n use middle::lang_items;\n use rustc::ty::subst;\n use rustc::ty::{ImplContainer, TraitContainer};\n@@ -255,22 +255,6 @@ fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &TyCtxt<'tcx>, cdata: Cmd)\n     doc_trait_ref(tp, tcx, cdata)\n }\n \n-fn item_path(item_doc: rbml::Doc) -> Vec<hir_map::PathElem> {\n-    let path_doc = reader::get_doc(item_doc, tag_path);\n-    reader::docs(path_doc).filter_map(|(tag, elt_doc)| {\n-        if tag == tag_path_elem_mod {\n-            let s = elt_doc.as_str_slice();\n-            Some(hir_map::PathMod(token::intern(s)))\n-        } else if tag == tag_path_elem_name {\n-            let s = elt_doc.as_str_slice();\n-            Some(hir_map::PathName(token::intern(s)))\n-        } else {\n-            // ignore tag_path_len element\n-            None\n-        }\n-    }).collect()\n-}\n-\n fn item_name(intr: &IdentInterner, item: rbml::Doc) -> ast::Name {\n     let name = reader::get_doc(item, tag_paths_data_name);\n     let string = name.as_str_slice();\n@@ -786,10 +770,6 @@ pub fn each_top_level_item_of_crate<F, G>(intr: Rc<IdentInterner>,\n                                 callback)\n }\n \n-pub fn get_item_path(cdata: Cmd, id: DefIndex) -> Vec<hir_map::PathElem> {\n-    item_path(cdata.lookup_item(id))\n-}\n-\n pub fn get_item_name(intr: &IdentInterner, cdata: Cmd, id: DefIndex) -> ast::Name {\n     item_name(intr, cdata.lookup_item(id))\n }\n@@ -803,14 +783,11 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &TyCtxt<'tcx>, id: DefIndex)\n         krate: cdata.cnum,\n         index: def_key(cdata, id).parent.unwrap()\n     };\n-    let mut parent_path = item_path(item_doc);\n-    parent_path.pop();\n     let mut parent_def_path = def_path(cdata, id);\n     parent_def_path.data.pop();\n     if let Some(ast_doc) = reader::maybe_get_doc(item_doc, tag_ast as usize) {\n         let ii = decode_inlined_item(cdata,\n                                      tcx,\n-                                     parent_path,\n                                      parent_def_path,\n                                      parent_def_id,\n                                      ast_doc,\n@@ -823,15 +800,12 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &TyCtxt<'tcx>, id: DefIndex)\n             krate: cdata.cnum,\n             index: def_key(cdata, parent_def_id.index).parent.unwrap()\n         };\n-        let mut grandparent_path = parent_path;\n-        grandparent_path.pop();\n         let mut grandparent_def_path = parent_def_path;\n         grandparent_def_path.data.pop();\n         let parent_doc = cdata.lookup_item(parent_did.index);\n         if let Some(ast_doc) = reader::maybe_get_doc(parent_doc, tag_ast as usize) {\n             let ii = decode_inlined_item(cdata,\n                                          tcx,\n-                                         grandparent_path,\n                                          grandparent_def_path,\n                                          grandparent_def_id,\n                                          ast_doc,"}, {"sha": "d45650159e3c82b6d2a77a5394a0c1dddbf95231", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 100, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -21,18 +21,16 @@ use tyencode;\n use index::{self, IndexData};\n \n use middle::cstore::{LOCAL_CRATE, CrateStore, InlinedItemRef, LinkMeta, tls};\n-use middle::def;\n-use middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def;\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::dependency_format::Linkage;\n use middle::stability;\n use rustc::ty::subst;\n use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::util::IntTypeExt;\n \n-use rustc::back::svh::Svh;\n-use rustc::front::map::{LinkedPath, PathElem, PathElems};\n-use rustc::front::map as ast_map;\n+use rustc::hir::svh::Svh;\n use rustc::mir::mir_map::MirMap;\n use rustc::session::config;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n@@ -52,9 +50,9 @@ use syntax::errors::Handler;\n use syntax;\n use rbml::writer::Encoder;\n \n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::intravisit::Visitor;\n-use rustc_front::intravisit;\n+use rustc::hir::{self, PatKind};\n+use rustc::hir::intravisit::Visitor;\n+use rustc::hir::intravisit;\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n@@ -300,26 +298,11 @@ fn encode_enum_variant_info<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         }\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, variant_node_id);\n \n-        ecx.tcx.map.with_path(variant_node_id, |path| encode_path(rbml_w, path));\n         rbml_w.end_tag();\n         disr_val = disr_val.wrap_incr();\n     }\n }\n \n-fn encode_path<PI: Iterator<Item=PathElem>>(rbml_w: &mut Encoder, path: PI) {\n-    let path = path.collect::<Vec<_>>();\n-    rbml_w.start_tag(tag_path);\n-    rbml_w.wr_tagged_u32(tag_path_len, path.len() as u32);\n-    for pe in &path {\n-        let tag = match *pe {\n-            ast_map::PathMod(_) => tag_path_elem_mod,\n-            ast_map::PathName(_) => tag_path_elem_name\n-        };\n-        rbml_w.wr_tagged_str(tag, &pe.name().as_str());\n-    }\n-    rbml_w.end_tag();\n-}\n-\n /// Iterates through \"auxiliary node IDs\", which are node IDs that describe\n /// top-level items that are sub-items of the given item. Specifically:\n ///\n@@ -371,7 +354,6 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n                        md: &hir::Mod,\n                        attrs: &[ast::Attribute],\n                        id: NodeId,\n-                       path: PathElems,\n                        name: Name,\n                        vis: hir::Visibility) {\n     rbml_w.start_tag(tag_items_data_item);\n@@ -393,7 +375,6 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n         });\n     }\n \n-    encode_path(rbml_w, path.clone());\n     encode_visibility(rbml_w, vis);\n \n     let stab = stability::lookup_stability(ecx.tcx, ecx.tcx.map.local_def_id(id));\n@@ -521,7 +502,6 @@ fn encode_info_for_struct_ctor<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     });\n     encode_bounds_and_type_for_item(rbml_w, ecx, index, ctor_id);\n     encode_name(rbml_w, name);\n-    ecx.tcx.map.with_path(ctor_id, |path| encode_path(rbml_w, path));\n     encode_parent_item(rbml_w, ecx.tcx.map.local_def_id(struct_id));\n \n     if ecx.item_symbols.borrow().contains_key(&ctor_id) {\n@@ -637,7 +617,6 @@ fn encode_info_for_associated_const<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                               rbml_w: &mut Encoder,\n                                               index: &mut CrateIndex<'tcx>,\n                                               associated_const: &ty::AssociatedConst,\n-                                              impl_path: PathElems,\n                                               parent_id: NodeId,\n                                               impl_item_opt: Option<&hir::ImplItem>) {\n     debug!(\"encode_info_for_associated_const({:?},{:?})\",\n@@ -663,9 +642,6 @@ fn encode_info_for_associated_const<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     encode_stability(rbml_w, stab);\n     encode_deprecation(rbml_w, depr);\n \n-    let elem = ast_map::PathName(associated_const.name);\n-    encode_path(rbml_w, impl_path.chain(Some(elem)));\n-\n     if let Some(ii) = impl_item_opt {\n         encode_attributes(rbml_w, &ii.attrs);\n         encode_defaultness(rbml_w, ii.defaultness);\n@@ -683,7 +659,6 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                     rbml_w: &mut Encoder,\n                                     index: &mut CrateIndex<'tcx>,\n                                     m: &ty::Method<'tcx>,\n-                                    impl_path: PathElems,\n                                     is_default_impl: bool,\n                                     parent_id: NodeId,\n                                     impl_item_opt: Option<&hir::ImplItem>) {\n@@ -705,8 +680,6 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     let m_node_id = ecx.local_id(m.def_id);\n     encode_bounds_and_type_for_item(rbml_w, ecx, index, m_node_id);\n \n-    let elem = ast_map::PathName(m.name);\n-    encode_path(rbml_w, impl_path.chain(Some(elem)));\n     if let Some(impl_item) = impl_item_opt {\n         if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n             encode_attributes(rbml_w, &impl_item.attrs);\n@@ -738,7 +711,6 @@ fn encode_info_for_associated_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                              rbml_w: &mut Encoder,\n                                              index: &mut CrateIndex<'tcx>,\n                                              associated_type: &ty::AssociatedType<'tcx>,\n-                                             impl_path: PathElems,\n                                              parent_id: NodeId,\n                                              impl_item_opt: Option<&hir::ImplItem>) {\n     debug!(\"encode_info_for_associated_type({:?},{:?})\",\n@@ -760,9 +732,6 @@ fn encode_info_for_associated_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     encode_stability(rbml_w, stab);\n     encode_deprecation(rbml_w, depr);\n \n-    let elem = ast_map::PathName(associated_type.name);\n-    encode_path(rbml_w, impl_path.chain(Some(elem)));\n-\n     if let Some(ii) = impl_item_opt {\n         encode_attributes(rbml_w, &ii.attrs);\n         encode_defaultness(rbml_w, ii.defaultness);\n@@ -886,14 +855,13 @@ fn encode_xrefs<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                   rbml_w: &mut Encoder,\n                                   item: &hir::Item,\n-                                  index: &mut CrateIndex<'tcx>,\n-                                  path: PathElems,\n-                                  vis: hir::Visibility) {\n+                                  index: &mut CrateIndex<'tcx>) {\n     let tcx = ecx.tcx;\n \n     debug!(\"encoding info for item at {}\",\n            tcx.sess.codemap().span_to_string(item.span));\n \n+    let vis = item.vis;\n     let def_id = ecx.tcx.map.local_def_id(item.id);\n     let stab = stability::lookup_stability(tcx, ecx.tcx.map.local_def_id(item.id));\n     let depr = stability::lookup_deprecation(tcx, ecx.tcx.map.local_def_id(item.id));\n@@ -911,7 +879,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, item.id);\n         encode_symbol(ecx, rbml_w, item.id);\n         encode_name(rbml_w, item.name);\n-        encode_path(rbml_w, path);\n         encode_visibility(rbml_w, vis);\n         encode_stability(rbml_w, stab);\n         encode_deprecation(rbml_w, depr);\n@@ -925,7 +892,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_family(rbml_w, 'C');\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, item.id);\n         encode_name(rbml_w, item.name);\n-        encode_path(rbml_w, path);\n         encode_attributes(rbml_w, &item.attrs);\n         encode_inlined_item(ecx, rbml_w, InlinedItemRef::Item(item));\n         encode_mir(ecx, rbml_w, item.id);\n@@ -942,7 +908,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         let tps_len = generics.ty_params.len();\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, item.id);\n         encode_name(rbml_w, item.name);\n-        encode_path(rbml_w, path);\n         encode_attributes(rbml_w, &item.attrs);\n         let needs_inline = tps_len > 0 || attr::requests_inline(&item.attrs);\n         if needs_inline || constness == hir::Constness::Const {\n@@ -966,7 +931,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                             m,\n                             &item.attrs,\n                             item.id,\n-                            path,\n                             item.name,\n                             item.vis);\n       }\n@@ -976,7 +940,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_def_id_and_key(ecx, rbml_w, def_id);\n         encode_family(rbml_w, 'n');\n         encode_name(rbml_w, item.name);\n-        encode_path(rbml_w, path);\n \n         // Encode all the items in this module.\n         for foreign_item in &fm.items {\n@@ -995,7 +958,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_family(rbml_w, 'y');\n         encode_bounds_and_type_for_item(rbml_w, ecx, index, item.id);\n         encode_name(rbml_w, item.name);\n-        encode_path(rbml_w, path);\n         encode_visibility(rbml_w, vis);\n         encode_stability(rbml_w, stab);\n         encode_deprecation(rbml_w, depr);\n@@ -1017,7 +979,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         }\n         encode_inlined_item(ecx, rbml_w, InlinedItemRef::Item(item));\n         encode_mir(ecx, rbml_w, item.id);\n-        encode_path(rbml_w, path);\n \n         // Encode inherent implementations for this enumeration.\n         encode_inherent_implementations(ecx, rbml_w, def_id);\n@@ -1053,7 +1014,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_item_variances(rbml_w, ecx, item.id);\n         encode_name(rbml_w, item.name);\n         encode_attributes(rbml_w, &item.attrs);\n-        encode_path(rbml_w, path.clone());\n         encode_stability(rbml_w, stab);\n         encode_deprecation(rbml_w, depr);\n         encode_visibility(rbml_w, vis);\n@@ -1156,7 +1116,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                 });\n             encode_parent_impl(rbml_w, parent);\n         }\n-        encode_path(rbml_w, path.clone());\n         encode_stability(rbml_w, stab);\n         encode_deprecation(rbml_w, depr);\n         rbml_w.end_tag();\n@@ -1179,7 +1138,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                                      rbml_w,\n                                                      index,\n                                                      &associated_const,\n-                                                     path.clone(),\n                                                      item.id,\n                                                      ast_item)\n                 }\n@@ -1188,7 +1146,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                            rbml_w,\n                                            index,\n                                            &method_type,\n-                                           path.clone(),\n                                            false,\n                                            item.id,\n                                            ast_item)\n@@ -1198,7 +1155,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                                     rbml_w,\n                                                     index,\n                                                     &associated_type,\n-                                                    path.clone(),\n                                                     item.id,\n                                                     ast_item)\n                 }\n@@ -1250,7 +1206,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n             rbml_w.wr_tagged_u64(tag_mod_child,\n                                  def_to_u64(method_def_id.def_id()));\n         }\n-        encode_path(rbml_w, path.clone());\n \n         // Encode inherent implementations for this trait.\n         encode_inherent_implementations(ecx, rbml_w, def_id);\n@@ -1281,10 +1236,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                     encode_def_id_and_key(ecx, rbml_w, associated_const.def_id);\n                     encode_visibility(rbml_w, associated_const.vis);\n \n-                    let elem = ast_map::PathName(associated_const.name);\n-                    encode_path(rbml_w,\n-                                path.clone().chain(Some(elem)));\n-\n                     encode_family(rbml_w, 'C');\n \n                     encode_bounds_and_type_for_item(rbml_w, ecx, index,\n@@ -1297,10 +1248,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n                     encode_method_ty_fields(ecx, rbml_w, index, &method_ty);\n \n-                    let elem = ast_map::PathName(method_ty.name);\n-                    encode_path(rbml_w,\n-                                path.clone().chain(Some(elem)));\n-\n                     match method_ty.explicit_self {\n                         ty::ExplicitSelfCategory::Static => {\n                             encode_family(rbml_w,\n@@ -1320,11 +1267,6 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                 ty::TypeTraitItem(associated_type) => {\n                     encode_name(rbml_w, associated_type.name);\n                     encode_def_id_and_key(ecx, rbml_w, associated_type.def_id);\n-\n-                    let elem = ast_map::PathName(associated_type.name);\n-                    encode_path(rbml_w,\n-                                path.clone().chain(Some(elem)));\n-\n                     encode_item_sort(rbml_w, 't');\n                     encode_family(rbml_w, 'y');\n \n@@ -1386,10 +1328,10 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                           rbml_w: &mut Encoder,\n                                           nitem: &hir::ForeignItem,\n-                                          index: &mut CrateIndex<'tcx>,\n-                                          path: PathElems,\n-                                          abi: Abi) {\n+                                          index: &mut CrateIndex<'tcx>) {\n+    debug!(\"writing foreign item {}\", ecx.tcx.node_path_str(nitem.id));\n     let def_id = ecx.tcx.map.local_def_id(nitem.id);\n+    let abi = ecx.tcx.map.get_foreign_abi(nitem.id);\n \n     index.record(def_id, rbml_w);\n     rbml_w.start_tag(tag_items_data_item);\n@@ -1429,7 +1371,6 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_name(rbml_w, nitem.name);\n       }\n     }\n-    encode_path(rbml_w, path);\n     rbml_w.end_tag();\n }\n \n@@ -1454,8 +1395,6 @@ fn my_visit_expr(expr: &hir::Expr,\n             ecx.tcx.closure_kind(def_id).encode(rbml_w).unwrap();\n             rbml_w.end_tag();\n \n-            ecx.tcx.map.with_path(expr.id, |path| encode_path(rbml_w, path));\n-\n             assert!(ecx.mir_map.map.contains_key(&expr.id));\n             encode_mir(ecx, rbml_w, expr.id);\n \n@@ -1465,31 +1404,6 @@ fn my_visit_expr(expr: &hir::Expr,\n     }\n }\n \n-fn my_visit_item<'a, 'tcx>(i: &hir::Item,\n-                           rbml_w: &mut Encoder,\n-                           ecx: &EncodeContext<'a, 'tcx>,\n-                           index: &mut CrateIndex<'tcx>) {\n-    ecx.tcx.map.with_path(i.id, |path| {\n-        encode_info_for_item(ecx, rbml_w, i, index, path, i.vis);\n-    });\n-}\n-\n-fn my_visit_foreign_item<'a, 'tcx>(ni: &hir::ForeignItem,\n-                                   rbml_w: &mut Encoder,\n-                                   ecx: &EncodeContext<'a, 'tcx>,\n-                                   index: &mut CrateIndex<'tcx>) {\n-    debug!(\"writing foreign item {}::{}\",\n-            ecx.tcx.map.path_to_string(ni.id),\n-            ni.name);\n-\n-    let abi = ecx.tcx.map.get_foreign_abi(ni.id);\n-    ecx.tcx.map.with_path(ni.id, |path| {\n-        encode_info_for_foreign_item(ecx, rbml_w,\n-                                     ni, index,\n-                                     path, abi);\n-    });\n-}\n-\n struct EncodeVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> {\n     rbml_w_for_visit_item: &'a mut Encoder<'b>,\n     ecx: &'a EncodeContext<'c,'tcx>,\n@@ -1503,11 +1417,11 @@ impl<'a, 'b, 'c, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'c, 'tcx> {\n     }\n     fn visit_item(&mut self, i: &'tcx hir::Item) {\n         intravisit::walk_item(self, i);\n-        my_visit_item(i, self.rbml_w_for_visit_item, self.ecx, self.index);\n+        encode_info_for_item(self.ecx, self.rbml_w_for_visit_item, i, self.index);\n     }\n     fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) {\n         intravisit::walk_foreign_item(self, ni);\n-        my_visit_foreign_item(ni, self.rbml_w_for_visit_item, self.ecx, self.index);\n+        encode_info_for_foreign_item(self.ecx, self.rbml_w_for_visit_item, ni, self.index);\n     }\n }\n \n@@ -1528,7 +1442,6 @@ fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                         &krate.module,\n                         &[],\n                         CRATE_NODE_ID,\n-                        [].iter().cloned().chain(LinkedPath::empty()),\n                         syntax::parse::token::intern(&ecx.link_meta.crate_name),\n                         hir::Public);\n "}, {"sha": "9c066f9f5f1f1ad688e7237baee70d5c47d48340", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def_id::{DefId, DefIndex};\n+use rustc::hir::def_id::{DefId, DefIndex};\n use rbml;\n use std::io::{Cursor, Write};\n use std::slice;"}, {"sha": "139462d41bf1fd670183e4153a1617b70a44af31", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -36,7 +36,6 @@ extern crate serialize;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_back;\n-extern crate rustc_front;\n extern crate rustc_llvm;\n extern crate rustc_const_math;\n "}, {"sha": "c7cd8ae2dd7f32372cb73ab374221a88eecf32cf", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -216,7 +216,7 @@ use cstore::{MetadataBlob, MetadataVec, MetadataArchive};\n use decoder;\n use encoder;\n \n-use rustc::back::svh::Svh;\n+use rustc::hir::svh::Svh;\n use rustc::session::Session;\n use rustc::session::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n use rustc::session::search_paths::PathKind;"}, {"sha": "782c7cba26ec59f472a7a4ec9ab88482a55d1c29", "filename": "src/librustc_metadata/tls_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Ftls_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Ftls_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftls_context.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,7 +14,7 @@\n use rbml::opaque::Encoder as OpaqueEncoder;\n use rbml::opaque::Decoder as OpaqueDecoder;\n use rustc::middle::cstore::tls;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, TyCtxt};\n "}, {"sha": "3004246d1d7e7e9bdf279fd7b529e6b7a462c49e", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -16,9 +16,9 @@\n \n #![allow(non_camel_case_types)]\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n-use middle::def_id::{DefId, DefIndex};\n+use rustc::hir::def_id::{DefId, DefIndex};\n use middle::region;\n use rustc::ty::subst;\n use rustc::ty::subst::VecPerParamSpace;"}, {"sha": "f49c2e22c6a804cc97a7bbf9abcac3fc1f9d21bf", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,15 +17,15 @@ use std::cell::RefCell;\n use std::io::Cursor;\n use std::io::prelude::*;\n \n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use middle::region;\n use rustc::ty::subst;\n use rustc::ty::subst::VecPerParamSpace;\n use rustc::ty::ParamTy;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::nodemap::FnvHashMap;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n use syntax::abi::Abi;\n use syntax::ast;"}, {"sha": "1c41ca6f416e19dabda36e2884e68fb137772754", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -16,5 +16,4 @@ rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_front = { path = \"../librustc_front\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "8c98408e2390ae2cfb8998c4720681a765824396", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,7 +11,7 @@\n use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::mir::repr::*;\n-use rustc_front::hir;\n+use rustc::hir;\n \n impl<'a,'tcx> Builder<'a,'tcx> {\n     pub fn ast_block(&mut self,"}, {"sha": "2e5b6a952b72dce6adedf892dcacbfe6f68fafac", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,7 +13,7 @@ use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::ty::{FnOutput, Ty};\n use rustc::mir::repr::*;\n use rustc_data_structures::fnv::FnvHashMap;\n-use rustc_front::hir;\n+use rustc::hir;\n use std::ops::{Index, IndexMut};\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "069bd7826bcdc1fc9dca1453dd72cd9b3b08082f", "filename": "src/librustc_mir/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fgraphviz.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -118,7 +118,7 @@ fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result\n /// all the variables and temporaries.\n fn write_graph_label<W: Write>(tcx: &ty::TyCtxt, nid: NodeId, mir: &Mir, w: &mut W)\n -> io::Result<()> {\n-    write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.map.path_to_string(nid)))?;\n+    write!(w, \"    label=<fn {}(\", dot::escape_html(&tcx.node_path_str(nid)))?;\n \n     // fn argument types.\n     for (i, arg) in mir.arg_decls.iter().enumerate() {"}, {"sha": "f0ed25902f7156aaf9d604bf1a53685f4b53a9b7", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,7 +12,7 @@ use hair::*;\n use hair::cx::Cx;\n use hair::cx::to_ref::ToRef;\n use rustc::middle::region::{BlockRemainder, CodeExtentData};\n-use rustc_front::hir;\n+use rustc::hir;\n use syntax::ast;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {"}, {"sha": "12dcb32da3fcd81fbf9ff3f6892ff66244553a90", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,16 +14,15 @@ use rustc_const_math::ConstInt;\n use hair::cx::Cx;\n use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n-use rustc::front::map;\n-use rustc::middle::def::Def;\n+use rustc::hir::map;\n+use rustc::hir::def::Def;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval as const_eval;\n use rustc::middle::region::CodeExtent;\n-use rustc::middle::pat_util;\n+use rustc::hir::pat_util;\n use rustc::ty::{self, VariantDef, Ty};\n use rustc::mir::repr::*;\n-use rustc_front::hir;\n-use rustc_front::util as hir_util;\n+use rustc::hir;\n use syntax::ptr::P;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n@@ -150,7 +149,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n             hir::ExprAssignOp(op, ref lhs, ref rhs) => {\n                 if cx.tcx.is_method_call(self.id) {\n-                    let pass_args = if hir_util::is_by_value_binop(op.node) {\n+                    let pass_args = if op.node.is_by_value() {\n                         PassArgs::ByValue\n                     } else {\n                         PassArgs::ByRef\n@@ -172,7 +171,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n \n             hir::ExprBinary(op, ref lhs, ref rhs) => {\n                 if cx.tcx.is_method_call(self.id) {\n-                    let pass_args = if hir_util::is_by_value_binop(op.node) {\n+                    let pass_args = if op.node.is_by_value() {\n                         PassArgs::ByValue\n                     } else {\n                         PassArgs::ByRef\n@@ -959,7 +958,7 @@ fn overloaded_lvalue<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n \n fn capture_freevar<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n                                  closure_expr: &'tcx hir::Expr,\n-                                 freevar: &ty::Freevar,\n+                                 freevar: &hir::Freevar,\n                                  freevar_ty: Ty<'tcx>)\n                                  -> ExprRef<'tcx> {\n     let id_var = freevar.def.var_id();"}, {"sha": "c3a5fbd967c84b4279ee846bcee42a1cf994b49c", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -20,12 +20,12 @@ use rustc::mir::repr::*;\n \n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval as const_eval;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n use syntax::parse::token;\n-use rustc_front::hir;\n+use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n \n #[derive(Copy, Clone)]"}, {"sha": "990ba9e786c3019435a02d715532e4cd4a98a0c8", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,11 +12,11 @@ use hair::*;\n use hair::cx::Cx;\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_const_eval as const_eval;\n-use rustc::middle::def::Def;\n-use rustc::middle::pat_util::{pat_is_resolved_const, pat_is_binding};\n+use rustc::hir::def::Def;\n+use rustc::hir::pat_util::{pat_is_resolved_const, pat_is_binding};\n use rustc::ty::{self, Ty};\n use rustc::mir::repr::*;\n-use rustc_front::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::ptr::P;"}, {"sha": "63dbde474380a11900436da0ca7a69c11d796719", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,7 +10,7 @@\n \n use hair::*;\n \n-use rustc_front::hir;\n+use rustc::hir;\n use syntax::ptr::P;\n \n pub trait ToRef {"}, {"sha": "51f2cc2687a9926d2170270b22faa34b7dbb625c", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,11 +17,11 @@\n use rustc::mir::repr::{BinOp, BorrowKind, Field, Literal, Mutability, UnOp,\n     TypedConstVal};\n use rustc::middle::const_val::ConstVal;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtDef, ClosureSubsts, Region, Ty};\n-use rustc_front::hir;\n+use rustc::hir;\n use syntax::ast;\n use syntax::codemap::Span;\n use self::cx::Cx;"}, {"sha": "ced73f34e0d92f9631c9eedea56ea8e912e26f6a", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -30,7 +30,6 @@ extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;\n-extern crate rustc_front;\n extern crate rustc_back;\n extern crate syntax;\n extern crate rustc_const_math;"}, {"sha": "40334f652eed35d4fe42498b7f6608a7def6a233", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,6 @@\n //! - `#[rustc_mir(pretty=\"file.mir\")]`\n \n extern crate syntax;\n-extern crate rustc_front;\n \n use build;\n use rustc::dep_graph::DepNode;\n@@ -31,8 +30,8 @@ use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n-use rustc_front::hir;\n-use rustc_front::intravisit::{self, Visitor};\n+use rustc::hir;\n+use rustc::hir::intravisit::{self, Visitor};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;"}, {"sha": "d0c66b340d96e28c1a804b8d870a6c3719284a91", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -216,7 +216,7 @@ fn write_scope_tree(tcx: &TyCtxt,\n /// local variables (both user-defined bindings and compiler temporaries).\n fn write_mir_intro(tcx: &TyCtxt, nid: NodeId, mir: &Mir, w: &mut Write)\n                    -> io::Result<()> {\n-    write!(w, \"fn {}(\", tcx.map.path_to_string(nid))?;\n+    write!(w, \"fn {}(\", tcx.node_path_str(nid))?;\n \n     // fn argument types.\n     for (i, arg) in mir.arg_decls.iter().enumerate() {"}, {"sha": "fa6bd3dfb67ddf7cc9684380a73572d89727c671", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,5 +12,4 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n-rustc_front = { path = \"../librustc_front\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "4659bb389dc6b4f7e70c15d121f6b3e6e8fbadd3", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -30,8 +30,8 @@ use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, compare_lit_exprs};\n use rustc_const_eval::{eval_const_expr_partial, lookup_const_by_id};\n use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal};\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n-use rustc::middle::def::Def;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::infer;\n use rustc::middle::mem_categorization as mc;\n@@ -42,11 +42,11 @@ use rustc::util::nodemap::NodeMap;\n use rustc::middle::const_qualif::ConstQualif;\n use rustc::lint::builtin::CONST_ERR;\n \n-use rustc_front::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::feature_gate::UnstableFeatures;\n-use rustc_front::intravisit::{self, FnKind, Visitor};\n+use rustc::hir::intravisit::{self, FnKind, Visitor};\n \n use std::collections::hash_map::Entry;\n use std::cmp::Ordering;"}, {"sha": "53ae1b30f7c1796dd48c3d2d776015f50d6e22c3", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -29,7 +29,6 @@\n \n extern crate core;\n #[macro_use] extern crate rustc;\n-extern crate rustc_front;\n extern crate rustc_const_eval;\n \n #[macro_use] extern crate log;"}, {"sha": "9a58a704c52ccb8f84d831617ebd6c82b8329550", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,9 +12,9 @@ use self::Context::*;\n use rustc::session::Session;\n \n use rustc::dep_graph::DepNode;\n-use rustc::front::map::Map;\n-use rustc_front::intravisit::{self, Visitor};\n-use rustc_front::hir;\n+use rustc::hir::map::Map;\n+use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir;\n use syntax::codemap::Span;\n \n #[derive(Clone, Copy, PartialEq)]"}, {"sha": "754d5ef8f528dac080b1a49934e0cc1327adef38", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -18,8 +18,8 @@ use rustc::middle::mem_categorization as mc;\n use rustc::ty::{self, TyCtxt, ParameterEnvironment};\n use rustc::traits::ProjectionMode;\n \n-use rustc_front::hir;\n-use rustc_front::intravisit;\n+use rustc::hir;\n+use rustc::hir::intravisit;\n use syntax::ast;\n use syntax::codemap::Span;\n "}, {"sha": "245960a04f030972917105cdded1ea60fe619df3", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,16 +12,16 @@\n // recursively.\n \n use rustc::dep_graph::DepNode;\n-use rustc::front::map as ast_map;\n+use rustc::hir::map as ast_map;\n use rustc::session::{Session, CompileResult};\n-use rustc::middle::def::{Def, DefMap};\n+use rustc::hir::def::{Def, DefMap};\n use rustc::util::nodemap::NodeMap;\n \n use syntax::{ast};\n use syntax::codemap::Span;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n-use rustc_front::intravisit::{self, Visitor};\n-use rustc_front::hir;\n+use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir;\n \n use std::cell::RefCell;\n "}, {"sha": "e9a32e53a9fe6372ad31fad1fbcabe8b0616cf4a", "filename": "src/librustc_plugin/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_plugin%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_plugin%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,7 +13,6 @@ log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "4c7755b1b0937bf8e62795104a6e9ba0a7021282", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,9 +15,9 @@ use syntax::attr;\n use syntax::codemap::Span;\n use syntax::errors;\n use rustc::dep_graph::DepNode;\n-use rustc::front::map::Map;\n-use rustc_front::intravisit::Visitor;\n-use rustc_front::hir;\n+use rustc::hir::map::Map;\n+use rustc::hir::intravisit::Visitor;\n+use rustc::hir;\n \n struct RegistrarFinder {\n     registrars: Vec<(ast::NodeId, Span)> ,"}, {"sha": "5fa29771c57fbd1b423a197f81216833e6582c3d", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -69,7 +69,6 @@\n \n extern crate rustc;\n extern crate rustc_back;\n-extern crate rustc_front;\n extern crate rustc_metadata;\n extern crate rustc_mir;\n "}, {"sha": "0553e54e3aa9b145626ec09d6bcf6df224691257", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,5 +11,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n-rustc_front = { path = \"../librustc_front\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "8840bd427178121c4d3c7f801fb53f3e23e25fb5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -25,23 +25,22 @@\n #[macro_use] extern crate syntax;\n \n #[macro_use] extern crate rustc;\n-extern crate rustc_front;\n \n use std::cmp;\n use std::mem::replace;\n \n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::intravisit::{self, Visitor};\n+use rustc::hir::{self, PatKind};\n+use rustc::hir::intravisit::{self, Visitor};\n \n use rustc::dep_graph::DepNode;\n use rustc::lint;\n use rustc::middle::cstore::CrateStore;\n-use rustc::middle::def::{self, Def};\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def::{self, Def};\n+use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::NodeSet;\n-use rustc::front::map as ast_map;\n+use rustc::hir::map as ast_map;\n \n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "cf477c2a956aab6d661cb1a41fb0c4a2fd6463db", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,5 +13,4 @@ log = { path = \"../liblog\" }\n syntax = { path = \"../libsyntax\" }\n rustc = { path = \"../librustc\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n-rustc_front = { path = \"../librustc_front\" }\n arena = { path = \"../libarena\" }"}, {"sha": "a422b09f96bf22d285087c6e5d4731982e01eb1d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -24,24 +24,24 @@ use {resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::middle::cstore::{CrateStore, ChildItem, DlDef};\n use rustc::lint;\n-use rustc::middle::def::*;\n-use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def::*;\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::ty::VariantKind;\n \n use syntax::ast::Name;\n use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::{special_idents, SELF_KEYWORD_NAME, SUPER_KEYWORD_NAME};\n use syntax::codemap::{Span, DUMMY_SP};\n \n-use rustc_front::hir;\n-use rustc_front::hir::{Block, DeclItem};\n-use rustc_front::hir::{ForeignItem, ForeignItemFn, ForeignItemStatic};\n-use rustc_front::hir::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n-use rustc_front::hir::{ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n-use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n-use rustc_front::hir::{PathListIdent, PathListMod, StmtDecl};\n-use rustc_front::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n-use rustc_front::intravisit::{self, Visitor};\n+use rustc::hir;\n+use rustc::hir::{Block, DeclItem};\n+use rustc::hir::{ForeignItem, ForeignItemFn, ForeignItemStatic};\n+use rustc::hir::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n+use rustc::hir::{ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n+use rustc::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n+use rustc::hir::{PathListIdent, PathListMod, StmtDecl};\n+use rustc::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n+use rustc::hir::intravisit::{self, Visitor};\n \n trait ToNameBinding<'a> {\n     fn to_name_binding(self) -> NameBinding<'a>;"}, {"sha": "4046c8c7783b852b220063f850b8272e73f59e2e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -26,9 +26,9 @@ use rustc::lint;\n use syntax::ast;\n use syntax::codemap::{Span, DUMMY_SP};\n \n-use rustc_front::hir;\n-use rustc_front::hir::{ViewPathGlob, ViewPathList, ViewPathSimple};\n-use rustc_front::intravisit::Visitor;\n+use rustc::hir;\n+use rustc::hir::{ViewPathGlob, ViewPathList, ViewPathSimple};\n+use rustc::hir::intravisit::Visitor;\n \n struct UnusedImportCheckVisitor<'a, 'b: 'a, 'tcx: 'b> {\n     resolver: &'a mut Resolver<'b, 'tcx>,"}, {"sha": "299a8c0299d0edfce01a9aeaf7191156a859fd8e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -31,7 +31,6 @@ extern crate arena;\n #[macro_use]\n #[no_link]\n extern crate rustc_bitflags;\n-extern crate rustc_front;\n #[macro_use]\n extern crate rustc;\n \n@@ -49,16 +48,16 @@ use self::ParentLink::*;\n use self::FallbackChecks::*;\n \n use rustc::dep_graph::DepNode;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::session::Session;\n use rustc::lint;\n use rustc::middle::cstore::CrateStore;\n-use rustc::middle::def::*;\n-use rustc::middle::def_id::DefId;\n-use rustc::middle::pat_util::pat_bindings;\n+use rustc::hir::def::*;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::pat_util::pat_bindings;\n use rustc::ty::subst::{ParamSpace, FnSpace, TypeSpace};\n-use rustc::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, FnvHashMap};\n+use rustc::hir::{Freevar, FreevarMap, TraitMap, GlobMap};\n+use rustc::util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n \n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, IntTy, UintTy};\n@@ -68,24 +67,23 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::{self, special_names, special_idents};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n-use rustc_front::intravisit::{self, FnKind, Visitor};\n-use rustc_front::hir;\n-use rustc_front::hir::{Arm, BindByRef, BindByValue, BindingMode, Block};\n-use rustc_front::hir::Crate;\n-use rustc_front::hir::{Expr, ExprAgain, ExprBreak, ExprCall, ExprField};\n-use rustc_front::hir::{ExprLoop, ExprWhile, ExprMethodCall};\n-use rustc_front::hir::{ExprPath, ExprStruct, FnDecl};\n-use rustc_front::hir::{ForeignItemFn, ForeignItemStatic, Generics};\n-use rustc_front::hir::{ImplItem, Item, ItemConst, ItemEnum, ItemExternCrate};\n-use rustc_front::hir::{ItemFn, ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n-use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n-use rustc_front::hir::Local;\n-use rustc_front::hir::{Pat, PatKind, Path, PrimTy};\n-use rustc_front::hir::{PathSegment, PathParameters};\n-use rustc_front::hir::HirVec;\n-use rustc_front::hir::{TraitRef, Ty, TyBool, TyChar, TyFloat, TyInt};\n-use rustc_front::hir::{TyRptr, TyStr, TyUint, TyPath, TyPtr};\n-use rustc_front::util::walk_pat;\n+use rustc::hir::intravisit::{self, FnKind, Visitor};\n+use rustc::hir;\n+use rustc::hir::{Arm, BindByRef, BindByValue, BindingMode, Block};\n+use rustc::hir::Crate;\n+use rustc::hir::{Expr, ExprAgain, ExprBreak, ExprCall, ExprField};\n+use rustc::hir::{ExprLoop, ExprWhile, ExprMethodCall};\n+use rustc::hir::{ExprPath, ExprStruct, FnDecl};\n+use rustc::hir::{ForeignItemFn, ForeignItemStatic, Generics};\n+use rustc::hir::{ImplItem, Item, ItemConst, ItemEnum, ItemExternCrate};\n+use rustc::hir::{ItemFn, ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n+use rustc::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n+use rustc::hir::Local;\n+use rustc::hir::{Pat, PatKind, Path, PrimTy};\n+use rustc::hir::{PathSegment, PathParameters};\n+use rustc::hir::HirVec;\n+use rustc::hir::{TraitRef, Ty, TyBool, TyChar, TyFloat, TyInt};\n+use rustc::hir::{TyRptr, TyStr, TyUint, TyPath, TyPtr};\n \n use std::collections::{HashMap, HashSet};\n use std::cell::{Cell, RefCell};\n@@ -1188,7 +1186,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             emit_errors: true,\n             make_glob_map: make_glob_map == MakeGlobMap::Yes,\n-            glob_map: HashMap::new(),\n+            glob_map: NodeMap(),\n \n             callback: None,\n             resolved: false,\n@@ -1255,7 +1253,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             return;\n         }\n \n-        let mut new_set = HashSet::new();\n+        let mut new_set = FnvHashSet();\n         new_set.insert(name);\n         self.glob_map.insert(import_id, new_set);\n     }\n@@ -2245,7 +2243,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                        // pattern that binds them\n                        bindings_list: &mut HashMap<Name, NodeId>) {\n         let pat_id = pattern.id;\n-        walk_pat(pattern, |pattern| {\n+        pattern.walk(|pattern| {\n             match pattern.node {\n                 PatKind::Ident(binding_mode, ref path1, ref at_rhs) => {\n                     // The meaning of PatKind::Ident with no type parameters\n@@ -2572,7 +2570,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     /// Skips `path_depth` trailing segments, which is also reflected in the\n-    /// returned value. See `middle::def::PathResolution` for more info.\n+    /// returned value. See `hir::def::PathResolution` for more info.\n     fn resolve_path(&mut self, id: NodeId, path: &Path, path_depth: usize, namespace: Namespace)\n                     -> Option<PathResolution> {\n         let span = path.span;"}, {"sha": "738a99fbe9200d5d3b7f935153b032c3089ef158", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -22,7 +22,7 @@ use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n use rustc::lint;\n-use rustc::middle::def::*;\n+use rustc::hir::def::*;\n \n use syntax::ast::{NodeId, Name};\n use syntax::attr::AttrMetaMethods;"}, {"sha": "52fa91934723dd25fe1bb682fab3fb7993d5ffb5", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,5 +11,4 @@ crate-type = [\"dylib\"]\n [dependencies]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n-rustc_front = { path = \"../librustc_front\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "0e02830db7ad75498bb4b2e254faf081da93ab4c", "filename": "src/librustc_save_analysis/csv_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,7 +10,7 @@\n \n use std::io::Write;\n \n-use rustc::middle::def_id::{DefId, DefIndex};\n+use rustc::hir::def_id::{DefId, DefIndex};\n use syntax::codemap::Span;\n \n use super::data::*;"}, {"sha": "7f2f2618c3c96aa19f85966eba741cbb47112c19", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,7 +15,7 @@\n \n use std::hash::Hasher;\n \n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty;\n use syntax::ast::{CrateNum, NodeId};\n use syntax::codemap::Span;"}, {"sha": "3784c95fe2bcbb403d3298e692cfc1bb890a6ad0", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -27,8 +27,8 @@\n //! is used for recording the output in a format-agnostic way (see CsvDumper\n //! for an example).\n \n-use rustc::middle::def::Def;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n \n@@ -42,7 +42,7 @@ use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{path_to_string, ty_to_string};\n use syntax::ptr::P;\n \n-use rustc_front::lowering::{lower_expr, LoweringContext};\n+use rustc::hir::lowering::{lower_expr, LoweringContext};\n \n use super::{escape, generated_code, SaveContext, PathCollector};\n use super::data::*;\n@@ -519,7 +519,7 @@ where D: Dump\n                      span: Span,\n                      typ: &ast::Ty,\n                      expr: &ast::Expr) {\n-        let qualname = format!(\"::{}\", self.tcx.map.path_to_string(id));\n+        let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n \n         let sub_span = self.span.sub_span_after_keyword(span, keywords::Const);\n \n@@ -544,7 +544,7 @@ where D: Dump\n                       item: &ast::Item,\n                       def: &ast::VariantData,\n                       ty_params: &ast::Generics) {\n-        let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n+        let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n \n         let val = self.span.snippet(item.span);\n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Struct);\n@@ -677,7 +677,7 @@ where D: Dump\n                      generics: &ast::Generics,\n                      trait_refs: &ast::TyParamBounds,\n                      methods: &[ast::TraitItem]) {\n-        let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n+        let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n         let val = self.span.snippet(item.span);\n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Trait);\n         if !self.span.filter_generated(sub_span, item.span) {\n@@ -1108,7 +1108,7 @@ impl<'l, 'tcx, 'v, D: Dump + 'l> Visitor<'v> for DumpVisitor<'l, 'tcx, D> {\n                 self.nest(item.id, |v| visit::walk_mod(v, m));\n             }\n             Ty(ref ty, ref ty_params) => {\n-                let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n+                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n                 let value = ty_to_string(&ty);\n                 let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Type);\n                 if !self.span.filter_generated(sub_span, item.span) {"}, {"sha": "4596398c3152ee24b091b1a4595331f6e4ead173", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -23,15 +23,14 @@\n #![feature(staged_api)]\n \n #[macro_use] extern crate rustc;\n-extern crate rustc_front;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n \n-use rustc_front::{hir, lowering};\n-use rustc::front::map::NodeItem;\n-use rustc::middle::def::Def;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::{self, lowering};\n+use rustc::hir::map::NodeItem;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::session::config::CrateType::CrateTypeExecutable;\n use rustc::ty::{self, TyCtxt};\n \n@@ -40,7 +39,6 @@ use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n \n use syntax::ast::{self, NodeId, PatKind};\n-use syntax::ast_util;\n use syntax::codemap::*;\n use syntax::parse::token::{self, keywords};\n use syntax::visit::{self, Visitor};\n@@ -118,7 +116,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.node {\n             ast::ItemKind::Fn(..) => {\n-                let name = self.tcx.map.path_to_string(item.id);\n+                let name = self.tcx.node_path_str(item.id);\n                 let qualname = format!(\"::{}\", name);\n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Fn);\n                 filter!(self.span_utils, sub_span, item.span, None);\n@@ -132,7 +130,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n-                let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n+                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n \n                 // If the variable is immutable, save the initialising expression.\n                 let (value, keyword) = match mt {\n@@ -155,7 +153,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n-                let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n+                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Const);\n                 filter!(self.span_utils, sub_span, item.span, None);\n                 Some(Data::VariableData(VariableData {\n@@ -169,7 +167,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n-                let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n+                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n \n                 let cm = self.tcx.sess.codemap();\n                 let filename = cm.span_to_filename(m.inner);\n@@ -186,7 +184,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             ast::ItemKind::Enum(..) => {\n-                let enum_name = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n+                let enum_name = format!(\"::{}\", self.tcx.node_path_str(item.id));\n                 let val = self.span_utils.snippet(item.span);\n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Enum);\n                 filter!(self.span_utils, sub_span, item.span, None);\n@@ -247,7 +245,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_field_data(&self, field: &ast::StructField,\n                           scope: NodeId) -> Option<VariableData> {\n         if let Some(ident) = field.ident {\n-            let qualname = format!(\"::{}::{}\", self.tcx.map.path_to_string(scope), ident);\n+            let qualname = format!(\"::{}::{}\", self.tcx.node_path_str(scope), ident);\n             let typ = self.tcx.node_types().get(&field.id).unwrap().to_string();\n             let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n             filter!(self.span_utils, sub_span, field.span, None);\n@@ -277,7 +275,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     match item.node {\n                         hir::ItemImpl(_, _, _, _, ref ty, _) => {\n                             let mut result = String::from(\"<\");\n-                            result.push_str(&rustc_front::print::pprust::ty_to_string(&ty));\n+                            result.push_str(&rustc::hir::print::ty_to_string(&ty));\n \n                             match self.tcx.trait_of_item(self.tcx.map.local_def_id(id)) {\n                                 Some(def_id) => {\n@@ -670,7 +668,7 @@ impl<'v> Visitor<'v> for PathCollector {\n                     ast::BindingMode::ByValue(mt) => mt,\n                 };\n                 // collect path for either visit_local or visit_arm\n-                let path = ast_util::ident_to_path(path1.span, path1.node);\n+                let path = ast::Path::from_ident(path1.span, path1.node);\n                 self.collected_paths.push((p.id, path, immut, recorder::VarRef));\n             }\n             _ => {}"}, {"sha": "ea4cef03b707a688b0e528d93f1e9c8ace5d746d", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -18,7 +18,6 @@ rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }"}, {"sha": "d8b8f9f08067c0ac3261f9c2eac1af9920cabdff", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -191,14 +191,14 @@ use self::FailureHandler::*;\n use llvm::{ValueRef, BasicBlockRef};\n use rustc_const_eval::check_match::{self, StaticInliner};\n use rustc_const_eval::{compare_lit_exprs, eval_const_expr};\n-use middle::def::{Def, DefMap};\n-use middle::def_id::DefId;\n+use rustc::hir::def::{Def, DefMap};\n+use rustc::hir::def_id::DefId;\n use middle::expr_use_visitor as euv;\n use rustc::infer;\n use middle::lang_items::StrEqFnLangItem;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n-use middle::pat_util::*;\n+use rustc::hir::pat_util::*;\n use rustc::ty::subst::Substs;\n use adt;\n use base::*;\n@@ -229,10 +229,10 @@ use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::fmt;\n use std::rc::Rc;\n-use rustc_front::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind};\n use syntax::ast::{self, DUMMY_NODE_ID, NodeId};\n use syntax::codemap::Span;\n-use rustc_front::fold::Folder;\n+use rustc::hir::fold::Folder;\n use syntax::ptr::P;\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "961a32170d0df80895171622dbdd62a3f9c29c43", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -26,7 +26,7 @@ use machine::{llalign_of_min, llsize_of, llsize_of_real};\n use type_::Type;\n use type_of;\n \n-use rustc_front::hir;\n+use rustc::hir;\n use rustc::ty::{self, Ty};\n \n use libc::c_uint;"}, {"sha": "e27bec683757a9b19f95c33354aac160f7829802", "filename": "src/librustc_trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fasm.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -18,7 +18,7 @@ use datum::{Datum, Lvalue};\n use type_of;\n use type_::Type;\n \n-use rustc_front::hir as ast;\n+use rustc::hir as ast;\n use std::ffi::CString;\n use syntax::ast::AsmDialect;\n use libc::{c_uint, c_char};"}, {"sha": "932f66f17cc7b97b6dad876159c3e8fe8f173899", "filename": "src/librustc_trans/assert_dep_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fassert_dep_graph.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -39,12 +39,12 @@\n \n use graphviz as dot;\n use rustc::dep_graph::{DepGraphQuery, DepNode};\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fnv::{FnvHashMap, FnvHashSet};\n use rustc_data_structures::graph::{Direction, INCOMING, OUTGOING, NodeIndex};\n-use rustc_front::hir;\n-use rustc_front::intravisit::Visitor;\n+use rustc::hir;\n+use rustc::hir::intravisit::Visitor;\n use graphviz::IntoCow;\n use std::env;\n use std::fs::File;"}, {"sha": "130499603e7a710839c86c5f5a9fd16a88532c06", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -43,7 +43,7 @@ use syntax::ast;\n use syntax::codemap::Span;\n use syntax::attr::AttrMetaMethods;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n // RLIB LLVM-BYTECODE OBJECT LAYOUT\n // Version 1"}, {"sha": "8127d1c0e29ab844e1f4baa41c3dff501394ca31", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -102,10 +102,10 @@ use monomorphize::Instance;\n use util::sha2::{Digest, Sha256};\n \n use rustc::middle::cstore;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TypeFoldable};\n use rustc::ty::item_path::{ItemPathBuffer, RootMode};\n-use rustc::front::map::definitions::{DefPath, DefPathData};\n+use rustc::hir::map::definitions::{DefPath, DefPathData};\n \n use std::fmt::Write;\n use syntax::parse::token::{self, InternedString};"}, {"sha": "c8ed4e629e4c1e39f7cdb2098d5e3f9349b51238", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -36,17 +36,17 @@ use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n use rustc::cfg;\n use middle::cstore::CrateStore;\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n-use middle::pat_util::simple_name;\n+use rustc::hir::pat_util::simple_name;\n use rustc::ty::subst::{self, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::dep_graph::DepNode;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n use rustc::mir::mir_map::MirMap;\n use session::config::{self, NoDebugInfo, FullDebugInfo};\n@@ -106,9 +106,8 @@ use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token::InternedString;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n-use rustc_front;\n-use rustc_front::intravisit::{self, Visitor};\n-use rustc_front::hir;\n+use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir;\n use syntax::ast;\n \n thread_local! {\n@@ -713,7 +712,7 @@ fn cast_shift_rhs<F, G>(op: hir::BinOp_,\n           G: FnOnce(ValueRef, Type) -> ValueRef\n {\n     // Shifts may have any size int on the rhs\n-    if rustc_front::util::is_shift_binop(op) {\n+    if op.is_shift() {\n         let mut rhs_llty = val_ty(rhs);\n         let mut lhs_llty = val_ty(lhs);\n         if rhs_llty.kind() == Vector {\n@@ -1352,7 +1351,7 @@ fn build_cfg(tcx: &TyCtxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>) {\n         None if id == ast::DUMMY_NODE_ID => return (ast::DUMMY_NODE_ID, None),\n \n         _ => bug!(\"unexpected variant in has_nested_returns: {}\",\n-                  tcx.map.path_to_string(id)),\n+                  tcx.node_path_str(id)),\n     };\n \n     (blk.id, Some(cfg::CFG::new(tcx, blk)))\n@@ -1413,9 +1412,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         let local_id = def_id.and_then(|id| ccx.tcx().map.as_local_node_id(id));\n \n         debug!(\"FunctionContext::new(path={}, def_id={:?}, param_substs={:?})\",\n-            inlined_id.map_or(String::new(), |id| {\n-                ccx.tcx().map.path_to_string(id).to_string()\n-            }),\n+            inlined_id.map_or(String::new(), |id| ccx.tcx().node_path_str(id)),\n             def_id,\n             param_substs);\n \n@@ -1907,7 +1904,7 @@ pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                           llfndecl: ValueRef,\n                           param_substs: &'tcx Substs<'tcx>,\n                           id: ast::NodeId) {\n-    let _s = StatRecorder::new(ccx, ccx.tcx().map.path_to_string(id).to_string());\n+    let _s = StatRecorder::new(ccx, ccx.tcx().node_path_str(id));\n     debug!(\"trans_fn(param_substs={:?})\", param_substs);\n     let _icx = push_ctxt(\"trans_fn\");\n     let fn_ty = ccx.tcx().node_id_to_type(id);\n@@ -2447,8 +2444,7 @@ pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         _ => {\n             if attr::contains_name(attrs, \"no_mangle\") {\n                 // Don't mangle\n-                let path = ccx.tcx().map.def_path_from_id(id);\n-                path.data.last().unwrap().data.to_string()\n+                ccx.tcx().map.name(id).as_str().to_string()\n             } else {\n                 match weak_lang_items::link_name(attrs) {\n                     Some(name) => name.to_string(),"}, {"sha": "392c40a60155c5715fe22d69a4df6986f435247e", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -21,12 +21,12 @@ use arena::TypedArena;\n use back::symbol_names;\n use llvm::{self, ValueRef, get_params};\n use middle::cstore::LOCAL_CRATE;\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst;\n use rustc::ty::subst::{Substs};\n use rustc::traits;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use abi::{Abi, FnType};\n use adt;\n use attributes;\n@@ -54,7 +54,7 @@ use type_of;\n use value::Value;\n use Disr;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc_front::hir;\n+use rustc::hir;\n \n use syntax::codemap::DUMMY_SP;\n use syntax::errors;"}, {"sha": "6bd5fd355a731b53384c8dfca7bf78e468d841e8", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,7 +11,7 @@\n use arena::TypedArena;\n use back::symbol_names;\n use llvm::{ValueRef, get_param, get_params};\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::traits::ProjectionMode;\n use abi::{Abi, FnType};\n@@ -35,7 +35,7 @@ use session::config::FullDebugInfo;\n \n use syntax::ast;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n use libc::c_uint;\n "}, {"sha": "c72a1a6bef32f7d6187d33cf094b6f2c6b6fcdaf", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -188,11 +188,11 @@\n //! this is not implemented however: a translation item will be produced\n //! regardless of whether it is actually needed or not.\n \n-use rustc_front::hir;\n-use rustc_front::intravisit as hir_visit;\n+use rustc::hir;\n+use rustc::hir::intravisit as hir_visit;\n \n-use rustc::front::map as hir_map;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::map as hir_map;\n+use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::{ExchangeFreeFnLangItem, ExchangeMallocFnLangItem};\n use rustc::traits;\n use rustc::ty::subst::{self, Substs, Subst};"}, {"sha": "5ce7caf5deb06291e14f741694232855d649ef12", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,8 +17,8 @@ use llvm;\n use llvm::{ValueRef, BasicBlockRef, BuilderRef, ContextRef, TypeKind};\n use llvm::{True, False, Bool, OperandBundleDef};\n use rustc::cfg;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use middle::lang_items::LangItem;\n use rustc::ty::subst::Substs;\n@@ -40,7 +40,7 @@ use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::traits::{self, SelectionContext, ProjectionMode};\n use rustc::ty::fold::{TypeFolder, TypeFoldable};\n-use rustc_front::hir;\n+use rustc::hir;\n use util::nodemap::NodeMap;\n \n use arena::TypedArena;"}, {"sha": "89f3b295c8d22e0473eb1a7b670f45af62969c2e", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,9 +15,9 @@ use llvm::{InternalLinkage, ValueRef, Bool, True};\n use middle::const_qualif::ConstQualif;\n use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, lookup_const_by_id, ErrKind};\n use rustc_const_eval::eval_repeat_count;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n-use rustc::front::map as hir_map;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::map as hir_map;\n use {abi, adt, closure, debuginfo, expr, machine};\n use base::{self, exported_name, imported_name, push_ctxt};\n use callee::Callee;\n@@ -41,7 +41,7 @@ use rustc::ty::cast::{CastTy,IntTy};\n use util::nodemap::NodeMap;\n use rustc_const_math::{ConstInt, ConstMathErr, ConstUsize, ConstIsize};\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n use std::ffi::{CStr, CString};\n use std::borrow::Cow;"}, {"sha": "9bbc72eba36ef2ac0bfac561573b4d5c5bc8c582", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,8 +12,8 @@ use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n use rustc::dep_graph::{DepNode, DepTrackingMap, DepTrackingMapConfig};\n use middle::cstore::LinkMeta;\n-use middle::def::ExportMap;\n-use middle::def_id::DefId;\n+use rustc::hir::def::ExportMap;\n+use rustc::hir::def_id::DefId;\n use rustc::traits;\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;"}, {"sha": "58971dec8a9d7cf68c62d47eccb1d6f239e85874", "filename": "src/librustc_trans/controlflow.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontrolflow.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::ValueRef;\n-use middle::def::Def;\n+use rustc::hir::def::Def;\n use middle::lang_items::{PanicFnLangItem, PanicBoundsCheckFnLangItem};\n use rustc::ty::subst::Substs;\n use base::*;\n@@ -25,8 +25,7 @@ use debuginfo::{DebugLoc, ToDebugLoc};\n use expr;\n use machine;\n \n-use rustc_front::hir;\n-use rustc_front::util as ast_util;\n+use rustc::hir;\n \n use syntax::ast;\n use syntax::parse::token::InternedString;\n@@ -49,7 +48,7 @@ pub fn trans_stmt<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n \n     let mut bcx = cx;\n \n-    let id = ast_util::stmt_id(s);\n+    let id = s.node.id();\n     let cleanup_debug_loc =\n         debuginfo::get_cleanup_debug_loc_for_ast_node(bcx.ccx(), id, s.span, false);\n     fcx.push_ast_cleanup_scope(cleanup_debug_loc);\n@@ -70,7 +69,7 @@ pub fn trans_stmt<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n         }\n     }\n \n-    bcx = fcx.pop_and_trans_ast_cleanup_scope(bcx, ast_util::stmt_id(s));\n+    bcx = fcx.pop_and_trans_ast_cleanup_scope(bcx, s.node.id());\n \n     return bcx;\n }"}, {"sha": "b1cfeb8125bd384b74939bef27e1add7c8b62331", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,15 +14,14 @@ use super::utils::DIB;\n use llvm;\n use llvm::debuginfo::{DIScope, DISubprogram};\n use common::CrateContext;\n-use middle::pat_util;\n+use rustc::hir::pat_util;\n use rustc::util::nodemap::NodeMap;\n \n use libc::c_uint;\n use syntax::codemap::{Span, Pos};\n use syntax::{ast, codemap};\n \n-use rustc_front;\n-use rustc_front::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind};\n \n // This procedure builds the *scope map* for a given function, which maps any\n // given ast::NodeId in the function's AST to the correct DIScope metadata instance.\n@@ -117,7 +116,7 @@ fn walk_block(cx: &CrateContext,\n \n     // The interesting things here are statements and the concluding expression.\n     for statement in &block.stmts {\n-        scope_map.insert(rustc_front::util::stmt_id(statement),\n+        scope_map.insert(statement.node.id(),\n                          scope_stack.last().unwrap().scope_metadata);\n \n         match statement.node {"}, {"sha": "822155f8c36a940028dd67c2a3ec1a6989053597", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -23,12 +23,12 @@ use super::{declare_local, VariableKind, VariableAccess};\n use llvm::{self, ValueRef};\n use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor, DICompositeType};\n \n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n-use middle::pat_util;\n+use rustc::hir::pat_util;\n use rustc::ty::subst;\n-use rustc::front::map as hir_map;\n-use rustc_front::hir::{self, PatKind};\n+use rustc::hir::map as hir_map;\n+use rustc::hir::{self, PatKind};\n use {type_of, adt, machine, monomorphize};\n use common::{self, CrateContext, FunctionContext, Block};\n use _match::{BindingInfo, TransBindingMode};"}, {"sha": "bb999c31ffb5e674bd98ab9a9ad0b90fad2510d2", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -26,11 +26,10 @@ use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray,\n                       DIDescriptor, FlagPrototyped};\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer::normalize_associated_type;\n use rustc::ty::subst::{self, Substs};\n-use rustc_front;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use abi::Abi;\n use common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n@@ -39,7 +38,7 @@ use rustc::infer;\n use rustc::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n \n use libc::c_uint;\n use std::cell::{Cell, RefCell};\n@@ -239,7 +238,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         return FunctionDebugContext::FunctionWithoutDebugInfo;\n     }\n \n-    let empty_generics = rustc_front::util::empty_generics();\n+    let empty_generics = hir::Generics::empty();\n \n     let fnitem = cx.tcx().map.get(fn_ast_id);\n "}, {"sha": "5272a4fbbb76b7ad3019ff0e478d170236e21830", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "modified", "additions": 68, "deletions": 76, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,11 +14,12 @@ use super::utils::{DIB, debug_context};\n \n use llvm;\n use llvm::debuginfo::DIScope;\n-use rustc::middle::def_id::DefId;\n-use rustc::front::map as hir_map;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::map as hir_map;\n use common::CrateContext;\n \n use std::ffi::CString;\n+use std::iter::once;\n use std::ptr;\n use std::rc::{Rc, Weak};\n use syntax::ast;\n@@ -51,85 +52,76 @@ impl NamespaceTreeNode {\n     }\n }\n \n-pub fn crate_root_namespace<'a>(cx: &'a CrateContext) -> &'a str {\n-    &cx.link_meta().crate_name\n-}\n-\n pub fn namespace_for_item(cx: &CrateContext, def_id: DefId) -> Rc<NamespaceTreeNode> {\n-    cx.tcx().with_path(def_id, |path| {\n-        // prepend crate name if not already present\n-        let krate = if def_id.is_local() {\n-            let crate_namespace_name = token::intern(crate_root_namespace(cx));\n-            Some(hir_map::PathMod(crate_namespace_name))\n-        } else {\n-            None\n+    // prepend crate name.\n+    // This shouldn't need a roundtrip through InternedString.\n+    let krate = token::intern(&cx.tcx().crate_name(def_id.krate));\n+    let krate = hir_map::DefPathData::TypeNs(krate);\n+    let path = cx.tcx().def_path(def_id).data;\n+    let mut path = once(krate).chain(path.into_iter().map(|e| e.data)).peekable();\n+\n+    let mut current_key = Vec::new();\n+    let mut parent_node: Option<Rc<NamespaceTreeNode>> = None;\n+\n+    // Create/Lookup namespace for each element of the path.\n+    loop {\n+        // Emulate a for loop so we can use peek below.\n+        let path_element = match path.next() {\n+            Some(e) => e,\n+            None => break\n         };\n-        let mut path = krate.into_iter().chain(path).peekable();\n-\n-        let mut current_key = Vec::new();\n-        let mut parent_node: Option<Rc<NamespaceTreeNode>> = None;\n-\n-        // Create/Lookup namespace for each element of the path.\n-        loop {\n-            // Emulate a for loop so we can use peek below.\n-            let path_element = match path.next() {\n-                Some(e) => e,\n-                None => break\n-            };\n-            // Ignore the name of the item (the last path element).\n-            if path.peek().is_none() {\n-                break;\n-            }\n-\n-            let name = path_element.name();\n-            current_key.push(name);\n-\n-            let existing_node = debug_context(cx).namespace_map.borrow()\n-                                                 .get(&current_key).cloned();\n-            let current_node = match existing_node {\n-                Some(existing_node) => existing_node,\n-                None => {\n-                    // create and insert\n-                    let parent_scope = match parent_node {\n-                        Some(ref node) => node.scope,\n-                        None => ptr::null_mut()\n-                    };\n-                    let namespace_name = name.as_str();\n-                    let namespace_name = CString::new(namespace_name.as_bytes()).unwrap();\n-                    let scope = unsafe {\n-                        llvm::LLVMDIBuilderCreateNameSpace(\n-                            DIB(cx),\n-                            parent_scope,\n-                            namespace_name.as_ptr(),\n-                            // cannot reconstruct file ...\n-                            ptr::null_mut(),\n-                            // ... or line information, but that's not so important.\n-                            0)\n-                    };\n-\n-                    let node = Rc::new(NamespaceTreeNode {\n-                        name: name,\n-                        scope: scope,\n-                        parent: parent_node.map(|parent| Rc::downgrade(&parent)),\n-                    });\n-\n-                    debug_context(cx).namespace_map.borrow_mut()\n-                                     .insert(current_key.clone(), node.clone());\n-\n-                    node\n-                }\n-            };\n-\n-            parent_node = Some(current_node);\n+        // Ignore the name of the item (the last path element).\n+        if path.peek().is_none() {\n+            break;\n         }\n \n-        match parent_node {\n-            Some(node) => node,\n+        // This shouldn't need a roundtrip through InternedString.\n+        let namespace_name = path_element.as_interned_str();\n+        let name = token::intern(&namespace_name);\n+        current_key.push(name);\n+\n+        let existing_node = debug_context(cx).namespace_map.borrow()\n+                                             .get(&current_key).cloned();\n+        let current_node = match existing_node {\n+            Some(existing_node) => existing_node,\n             None => {\n-                bug!(\"debuginfo::namespace_for_item(): \\\n-                      path too short for {:?}\",\n-                     def_id);\n+                // create and insert\n+                let parent_scope = match parent_node {\n+                    Some(ref node) => node.scope,\n+                    None => ptr::null_mut()\n+                };\n+                let namespace_name = CString::new(namespace_name.as_bytes()).unwrap();\n+                let scope = unsafe {\n+                    llvm::LLVMDIBuilderCreateNameSpace(\n+                        DIB(cx),\n+                        parent_scope,\n+                        namespace_name.as_ptr(),\n+                        // cannot reconstruct file ...\n+                        ptr::null_mut(),\n+                        // ... or line information, but that's not so important.\n+                        0)\n+                };\n+\n+                let node = Rc::new(NamespaceTreeNode {\n+                    name: name,\n+                    scope: scope,\n+                    parent: parent_node.map(|parent| Rc::downgrade(&parent)),\n+                });\n+\n+                debug_context(cx).namespace_map.borrow_mut()\n+                                 .insert(current_key.clone(), node.clone());\n+\n+                node\n             }\n+        };\n+\n+        parent_node = Some(current_node);\n+    }\n+\n+    match parent_node {\n+        Some(node) => node,\n+        None => {\n+            bug!(\"debuginfo::namespace_for_item: path too short for {:?}\", def_id);\n         }\n-    })\n+    }\n }"}, {"sha": "6fdd6a2c1d111b3ceca4fc48ca9ee15d6ee292a7", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,15 +10,13 @@\n \n // Type Names for Debug Info.\n \n-use super::namespace::crate_root_namespace;\n-\n use common::CrateContext;\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst;\n use rustc::ty::{self, Ty};\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n // Compute the name of the type as it should be stored in debuginfo. Does not do\n // any caching, i.e. calling the function twice with the same type will also do\n@@ -163,31 +161,15 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                       def_id: DefId,\n                       qualified: bool,\n                       output: &mut String) {\n-        cx.tcx().with_path(def_id, |path| {\n-            if qualified {\n-                if def_id.is_local() {\n-                    output.push_str(crate_root_namespace(cx));\n-                    output.push_str(\"::\");\n-                }\n-\n-                let mut path_element_count = 0;\n-                for path_element in path {\n-                    output.push_str(&path_element.name().as_str());\n-                    output.push_str(\"::\");\n-                    path_element_count += 1;\n-                }\n-\n-                if path_element_count == 0 {\n-                    bug!(\"debuginfo: Encountered empty item path!\");\n-                }\n-\n-                output.pop();\n-                output.pop();\n-            } else {\n-                let name = path.last().expect(\"debuginfo: Empty item path?\").name();\n-                output.push_str(&name.as_str());\n+        if qualified {\n+            output.push_str(&cx.tcx().crate_name(def_id.krate));\n+            for path_element in cx.tcx().def_path(def_id).data {\n+                output.push_str(\"::\");\n+                output.push_str(&path_element.data.as_interned_str());\n             }\n-        });\n+        } else {\n+            output.push_str(&cx.tcx().item_name(def_id).as_str());\n+        }\n     }\n \n     // Pushes the type parameters in the given `Substs` to the output string."}, {"sha": "bef7af3aec6c8ebf0ea359c184c5140ee58d5f74", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,7 +13,7 @@\n use super::{FunctionDebugContext, CrateDebugContext};\n use super::namespace::namespace_for_item;\n \n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n \n use llvm;\n use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor, DIArray};"}, {"sha": "beca81da05f4c5f38796c8ceaddc608e33fc6a0b", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -53,7 +53,7 @@ use self::lazy_binop_ty::*;\n \n use llvm::{self, ValueRef, TypeKind};\n use middle::const_qualif::ConstQualif;\n-use middle::def::Def;\n+use rustc::hir::def::Def;\n use rustc::ty::subst::Substs;\n use {_match, abi, adt, asm, base, closure, consts, controlflow};\n use base::*;\n@@ -80,8 +80,7 @@ use util::common::indenter;\n use machine::{llsize_of, llsize_of_alloc};\n use type_::Type;\n \n-use rustc_front;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use syntax::{ast, codemap};\n use syntax::parse::token::InternedString;\n@@ -1181,7 +1180,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // if not overloaded, would be RvalueDatumExpr\n             let lhs = unpack_datum!(bcx, trans(bcx, &lhs));\n             let mut rhs = unpack_datum!(bcx, trans(bcx, &rhs_expr));\n-            if !rustc_front::util::is_by_value_binop(op.node) {\n+            if !op.node.is_by_value() {\n                 rhs = unpack_datum!(bcx, auto_ref(bcx, rhs, rhs_expr));\n             }\n \n@@ -1205,7 +1204,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             span_bug!(\n                 expr.span,\n                 \"augmented assignment `{}=` should always be a rvalue_stmt\",\n-                rustc_front::util::binop_to_string(op.node))\n+                op.node.as_str())\n         }\n         _ => {\n             span_bug!("}, {"sha": "1eff09d67f96bb4f3f6a5e8c526fbf5d29141c9d", "filename": "src/librustc_trans/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Finline.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,14 +10,14 @@\n \n use llvm::{AvailableExternallyLinkage, InternalLinkage, SetLinkage};\n use middle::cstore::{CrateStore, FoundAst, InlinedItem};\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use base::{push_ctxt, trans_item, trans_fn};\n use callee::Callee;\n use common::*;\n \n use rustc::dep_graph::DepNode;\n-use rustc_front::hir;\n+use rustc::hir;\n \n fn instantiate_inline(ccx: &CrateContext, fn_id: DefId) -> Option<DefId> {\n     debug!(\"instantiate_inline({:?})\", fn_id);"}, {"sha": "355de31bf590d16bf5f5045901e40ad6fe3cc833", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -40,7 +40,7 @@ use rustc::ty::{self, Ty, TypeFoldable};\n use Disr;\n use rustc::ty::subst::Substs;\n use rustc::dep_graph::DepNode;\n-use rustc_front::hir;\n+use rustc::hir;\n use syntax::ast;\n use syntax::ptr::P;\n use syntax::parse::token;"}, {"sha": "19a172e7f102b136c19fd5acf283399ba7230a7b", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -46,7 +46,6 @@ extern crate libc;\n #[macro_use] extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_data_structures;\n-extern crate rustc_front;\n pub extern crate rustc_llvm as llvm;\n extern crate rustc_mir;\n extern crate rustc_platform_intrinsics as intrinsics;\n@@ -67,7 +66,7 @@ pub use disr::Disr;\n \n pub mod back {\n     pub use rustc_back::rpath;\n-    pub use rustc_back::svh;\n+    pub use rustc::hir::svh;\n \n     pub mod archive;\n     pub mod linker;"}, {"sha": "478094c2b87b02b4f3b3ff19779d9cb18d8f2c93", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,7 +13,7 @@ use std::rc::Rc;\n use arena::TypedArena;\n use back::symbol_names;\n use llvm::{ValueRef, get_params};\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst::{FnSpace, Subst, Substs};\n use rustc::ty::subst;"}, {"sha": "8e5d220b4f4e8549fa7856649f4f295eb5f2320e", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -134,7 +134,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     _ => {\n                         // FIXME Shouldn't need to manually trigger closure instantiations.\n                         if let mir::AggregateKind::Closure(def_id, substs) = *kind {\n-                            use rustc_front::hir;\n+                            use rustc::hir;\n                             use syntax::ast::DUMMY_NODE_ID;\n                             use syntax::codemap::DUMMY_SP;\n                             use syntax::ptr::P;"}, {"sha": "ef0da37f0b261ed61c1812d503c546a745554303", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,7 +11,7 @@\n use back::symbol_names;\n use llvm::ValueRef;\n use llvm;\n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer::normalize_associated_type;\n use rustc::ty::subst;\n use rustc::ty::subst::{Subst, Substs};\n@@ -23,10 +23,10 @@ use base;\n use common::*;\n use declare;\n use Disr;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::util::ppaux;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n use syntax::attr;\n use syntax::errors;"}, {"sha": "2e3355968dffa4afe630c80e0917acb045471484", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,8 +15,8 @@\n //! paths etc in all kinds of annoying scenarios.\n \n use back::symbol_names;\n-use rustc_front::hir;\n-use rustc_front::intravisit::{self, Visitor};\n+use rustc::hir;\n+use rustc::hir::intravisit::{self, Visitor};\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n "}, {"sha": "f5b9bef5313f23a34039747e79d6f0c634ffd88e", "filename": "src/librustc_trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftvec.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -29,7 +29,7 @@ use type_of;\n use value::Value;\n use rustc::ty::{self, Ty};\n \n-use rustc_front::hir;\n+use rustc::hir;\n use rustc_const_eval::eval_repeat_count;\n \n use syntax::ast;"}, {"sha": "500eda2624ce7cb712b66e50d5d63cbf5897a9c9", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(non_camel_case_types)]\n \n-use middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst;\n use abi::FnType;"}, {"sha": "e9dabf16eaece7455128e1efbe6d60627ab38ac5", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,5 +17,4 @@ rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }"}, {"sha": "21122e7095dd1cb5280d9cf04828db61f908ca3a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -52,8 +52,8 @@ use middle::astconv_util::{prim_ty_to_ty, prohibit_type_params, prohibit_project\n use middle::const_val::ConstVal;\n use rustc_const_eval::eval_const_expr_partial;\n use rustc_const_eval::EvalHint::UncheckedExprHint;\n-use middle::def::{self, Def};\n-use middle::def_id::DefId;\n+use hir::def::{self, Def};\n+use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use rustc::ty::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs, ParamSpace};\n use rustc::traits;\n@@ -74,8 +74,8 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token;\n \n-use rustc_front::print::pprust;\n-use rustc_front::hir;\n+use rustc::hir::print as pprust;\n+use rustc::hir;\n use rustc_back::slice;\n \n pub trait AstConv<'tcx> {"}, {"sha": "8dbd6496b6fb06bd3ec953b4e2cea520755d9e84", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::def::{self, Def};\n+use hir::def::{self, Def};\n use rustc::infer::{self, InferOk, TypeOrigin};\n-use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding};\n-use middle::pat_util::pat_is_resolved_const;\n+use hir::pat_util::{PatIdMap, pat_id_map, pat_is_binding};\n+use hir::pat_util::pat_is_resolved_const;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TypeFoldable, LvaluePreference};\n use check::{check_expr, check_expr_has_type, check_expr_with_expectation};\n@@ -30,9 +30,8 @@ use syntax::ast;\n use syntax::codemap::{Span, Spanned};\n use syntax::ptr::P;\n \n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::print::pprust;\n-use rustc_front::util as hir_util;\n+use rustc::hir::{self, PatKind};\n+use rustc::hir::print as pprust;\n \n pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                            pat: &'tcx hir::Pat,\n@@ -197,7 +196,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             }\n         }\n         PatKind::Ident(_, ref path, _) => {\n-            let path = hir_util::ident_to_path(path.span, path.node);\n+            let path = hir::Path::from_ident(path.span, path.node);\n             check_pat_enum(pcx, pat, &path, Some(&[]), expected, false);\n         }\n         PatKind::TupleStruct(ref path, ref subpats) => {"}, {"sha": "21800d91d9458b3810450293c7375eac278b39d7", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -26,15 +26,15 @@ use super::write_call;\n \n use CrateCtxt;\n use middle::cstore::LOCAL_CRATE;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::{self, LvaluePreference, Ty};\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n /// Check that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific"}, {"sha": "91cdb8d966d419be942e604bc82970fd279a175f", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -44,11 +44,11 @@ use super::FnCtxt;\n use super::structurally_resolved_type;\n \n use lint;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::cast::{CastKind, CastTy};\n use syntax::codemap::Span;\n-use rustc_front::hir;\n+use rustc::hir;\n use syntax::ast;\n \n "}, {"sha": "7bca570411cebeb2d7c631bf5cb92948fe1e7f68", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -17,7 +17,7 @@ use rustc::ty::subst;\n use rustc::ty::{self, ToPolyTraitRef, Ty};\n use std::cmp;\n use syntax::abi::Abi;\n-use rustc_front::hir;\n+use rustc::hir;\n \n pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                    expr: &hir::Expr,"}, {"sha": "f1c6868efd2101f19c469e01092079a2383bb3b7", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -76,7 +76,7 @@ use util::common::indent;\n \n use std::cell::RefCell;\n use std::collections::VecDeque;\n-use rustc_front::hir;\n+use rustc::hir;\n \n struct Coerce<'a, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'tcx>,"}, {"sha": "5b163eb7de452ebc05ad1577cd371e73df0dae74", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::Ty;\n use rustc::infer::{InferOk, TypeOrigin};\n \n use syntax::codemap::Span;\n-use rustc_front::hir;\n+use rustc::hir;\n \n // Requires that the two types unify, and prints an error message if\n // they don't."}, {"sha": "368b826b1bb39f24c6c8f9a15962a089f096c2bf", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -10,7 +10,7 @@\n \n use check::regionck::{self, Rcx};\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use rustc::infer;\n use middle::region;"}, {"sha": "eae0cfb0f22672293a48558b8c6a73effdb260e9", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -26,7 +26,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::parse::token;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n fn equate_intrinsic_type<'a, 'tcx>(tcx: &TyCtxt<'tcx>, it: &hir::ForeignItem,\n                                    n_tps: usize,"}, {"sha": "b98f1884f01cee471ebb5540a6d32c496c8d8e3b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,7 +12,7 @@ use super::probe;\n \n use check::{self, FnCtxt, callee, demand};\n use check::UnresolvedTypeAction;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use rustc::ty::subst::{self};\n use rustc::traits;\n use rustc::ty::{self, NoPreference, PreferMutLvalue, Ty, TyCtxt};\n@@ -21,7 +21,7 @@ use rustc::ty::fold::TypeFoldable;\n use rustc::infer;\n use rustc::infer::{InferCtxt, TypeOrigin};\n use syntax::codemap::Span;\n-use rustc_front::hir;\n+use rustc::hir;\n \n struct ConfirmContext<'a, 'tcx:'a> {\n     fcx: &'a FnCtxt<'a, 'tcx>,"}, {"sha": "3f069a68316de77cfc1ad57743557d9ab744c7b2", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,8 +12,8 @@\n \n use astconv::AstConv;\n use check::FnCtxt;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n use rustc::ty::subst;\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, ToPredicate, ToPolyTraitRef, TraitRef, TypeFoldable};\n@@ -23,7 +23,7 @@ use rustc::infer;\n use syntax::ast;\n use syntax::codemap::Span;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n pub use self::MethodError::*;\n pub use self::CandidateSource::*;"}, {"sha": "7d98eac30c5d05c77a4dff150d132271b48c6fcc", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,16 +15,16 @@ use super::suggest;\n \n use check;\n use check::{FnCtxt, UnresolvedTypeAction};\n-use middle::def_id::DefId;\n-use middle::def::Def;\n+use hir::def_id::DefId;\n+use hir::def::Def;\n use rustc::ty::subst;\n use rustc::ty::subst::Subst;\n use rustc::traits;\n use rustc::ty::{self, NoPreference, Ty, TyCtxt, ToPolyTraitRef, TraitRef, TypeFoldable};\n use rustc::infer::{self, InferCtxt, InferOk, TypeOrigin};\n use syntax::ast;\n use syntax::codemap::{Span, DUMMY_SP};\n-use rustc_front::hir;\n+use rustc::hir;\n use std::collections::HashSet;\n use std::mem;\n use std::rc::Rc;"}, {"sha": "c5195cf8787dab57a333b62e5a6ace6c49c24820", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,11 +15,11 @@ use CrateCtxt;\n \n use astconv::AstConv;\n use check::{self, FnCtxt, UnresolvedTypeAction, autoderef};\n-use front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use middle::cstore::{self, CrateStore};\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n use middle::lang_items::FnOnceTraitLangItem;\n use rustc::ty::subst::Substs;\n use rustc::ty::LvaluePreference;\n@@ -30,9 +30,9 @@ use util::nodemap::{FnvHashSet};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n-use rustc_front::print::pprust;\n-use rustc_front::hir;\n-use rustc_front::hir::Expr_;\n+use rustc::hir::print as pprust;\n+use rustc::hir;\n+use rustc::hir::Expr_;\n \n use std::cell;\n use std::cmp::Ordering;\n@@ -436,7 +436,7 @@ impl Ord for TraitInfo {\n /// Retrieve all traits in this crate and any dependent crates.\n pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n     if ccx.all_traits.borrow().is_none() {\n-        use rustc_front::intravisit;\n+        use rustc::hir::intravisit;\n \n         let mut traits = vec![];\n "}, {"sha": "e7159e65eeb7c195fb0cbafa83d82e4c6dffaf1d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -86,10 +86,10 @@ use dep_graph::DepNode;\n use fmt_macros::{Parser, Piece, Position};\n use middle::astconv_util::prohibit_type_params;\n use middle::cstore::LOCAL_CRATE;\n-use middle::def::{self, Def};\n-use middle::def_id::DefId;\n+use hir::def::{self, Def};\n+use hir::def_id::DefId;\n use rustc::infer::{self, InferOk, TypeOrigin, TypeTrace, type_variable};\n-use middle::pat_util::{self, pat_id_map};\n+use hir::pat_util::{self, pat_id_map};\n use rustc::ty::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace};\n use rustc::traits::{self, report_fulfillment_errors, ProjectionMode};\n use rustc::ty::{GenericPredicates, TypeScheme};\n@@ -124,10 +124,10 @@ use syntax::parse::token::{self, InternedString, special_idents};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n-use rustc_front::intravisit::{self, Visitor};\n-use rustc_front::hir;\n-use rustc_front::hir::{Visibility, PatKind};\n-use rustc_front::print::pprust;\n+use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir;\n+use rustc::hir::{Visibility, PatKind};\n+use rustc::hir::print as pprust;\n use rustc_back::slice;\n use rustc_const_eval::eval_repeat_count;\n \n@@ -3987,7 +3987,7 @@ fn check_block_with_expected<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let mut any_err = false;\n     for s in &blk.stmts {\n         check_stmt(fcx, s);\n-        let s_id = ::rustc_front::util::stmt_id(s);\n+        let s_id = s.node.id();\n         let s_ty = fcx.node_ty(s_id);\n         if any_diverges && !warned && match s.node {\n             hir::StmtDecl(ref decl, _) => {"}, {"sha": "debf925875723409c393a4f6a7d05d2517f322e0", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -18,12 +18,11 @@ use super::{\n     method,\n     FnCtxt,\n };\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use rustc::ty::{Ty, TypeFoldable, PreferMutLvalue};\n use syntax::ast;\n use syntax::parse::token;\n-use rustc_front::hir;\n-use rustc_front::util as hir_util;\n+use rustc::hir;\n \n /// Check a `a <op>= b`\n pub fn check_binop_assign<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n@@ -184,12 +183,12 @@ fn check_overloaded_binop<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 if let IsAssign::Yes = is_assign {\n                     span_err!(fcx.tcx().sess, lhs_expr.span, E0368,\n                               \"binary assignment operation `{}=` cannot be applied to type `{}`\",\n-                              hir_util::binop_to_string(op.node),\n+                              op.node.as_str(),\n                               lhs_ty);\n                 } else {\n                     let mut err = struct_span_err!(fcx.tcx().sess, lhs_expr.span, E0369,\n                         \"binary operation `{}` cannot be applied to type `{}`\",\n-                        hir_util::binop_to_string(op.node),\n+                        op.node.as_str(),\n                         lhs_ty);\n                     let missing_trait = match op.node {\n                         hir::BiAdd    => Some(\"std::ops::Add\"),\n@@ -235,7 +234,7 @@ pub fn check_user_unop<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                  op: hir::UnOp)\n                                  -> Ty<'tcx>\n {\n-    assert!(hir_util::is_by_value_unop(op));\n+    assert!(op.is_by_value());\n     match lookup_op_method(fcx, ex, operand_ty, vec![],\n                            token::intern(mname), trait_did,\n                            operand_expr) {\n@@ -272,7 +271,7 @@ fn name_and_trait_def_id(fcx: &FnCtxt,\n             hir::BiOr => {\n                 span_bug!(op.span,\n                           \"impossible assignment operation: {}=\",\n-                          hir_util::binop_to_string(op.node))\n+                          op.node.as_str())\n             }\n         }\n     } else {"}, {"sha": "2a4de6e091b3d37f9c3fe4236e4b8d8e34a41e30", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -93,16 +93,15 @@ use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, MethodCall, TypeFoldable};\n use rustc::infer::{self, GenericKind, InferCtxt, InferOk, SubregionOrigin, TypeOrigin, VerifyBound};\n-use middle::pat_util;\n+use hir::pat_util;\n use rustc::ty::adjustment;\n use rustc::ty::wf::ImpliedBound;\n \n use std::mem;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::intravisit::{self, Visitor};\n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::util as hir_util;\n+use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::{self, PatKind};\n \n use self::SubjectNode::Subject;\n \n@@ -689,7 +688,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n         },\n \n         hir::ExprBinary(op, ref lhs, ref rhs) if has_method_map => {\n-            let implicitly_ref_args = !hir_util::is_by_value_binop(op.node);\n+            let implicitly_ref_args = !op.node.is_by_value();\n \n             // As `expr_method_call`, but the call is via an\n             // overloaded op.  Note that we (sadly) currently use an\n@@ -716,7 +715,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n         }\n \n         hir::ExprUnary(op, ref lhs) if has_method_map => {\n-            let implicitly_ref_args = !hir_util::is_by_value_unop(op);\n+            let implicitly_ref_args = !op.is_by_value();\n \n             // As above.\n             constrain_call(rcx, expr, Some(&lhs),"}, {"sha": "40481cda76290b4d999d9bc9e24a7d98071f2865", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -51,8 +51,8 @@ use rustc::infer::{InferCtxt, UpvarRegion};\n use std::collections::HashSet;\n use syntax::ast;\n use syntax::codemap::Span;\n-use rustc_front::hir;\n-use rustc_front::intravisit::{self, Visitor};\n+use rustc::hir;\n+use rustc::hir::intravisit::{self, Visitor};\n \n ///////////////////////////////////////////////////////////////////////////\n // PUBLIC ENTRY POINTS"}, {"sha": "1b21e6ce9ebe3d1c548e2bc9df4d777395a7467a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,7 +12,7 @@ use astconv::AstConv;\n use check::{FnCtxt, Inherited, blank_fn_ctxt, regionck};\n use constrained_type_params::{identify_constrained_type_params, Parameter};\n use CrateCtxt;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use middle::region::{CodeExtent};\n use rustc::ty::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use rustc::traits;\n@@ -25,8 +25,8 @@ use syntax::ast;\n use syntax::codemap::{Span};\n use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::{special_idents};\n-use rustc_front::intravisit::{self, Visitor};\n-use rustc_front::hir;\n+use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir;\n \n pub struct CheckTypeWellFormedVisitor<'ccx, 'tcx:'ccx> {\n     ccx: &'ccx CrateCtxt<'ccx, 'tcx>,"}, {"sha": "68327ccd39ab69f9f05b94d8f1578a22aabd6f5e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,8 +15,8 @@ use self::ResolveReason::*;\n \n use astconv::AstConv;\n use check::FnCtxt;\n-use middle::def_id::DefId;\n-use middle::pat_util;\n+use hir::def_id::DefId;\n+use hir::pat_util;\n use rustc::ty::{self, Ty, TyCtxt, MethodCall, MethodCallee};\n use rustc::ty::adjustment;\n use rustc::ty::fold::{TypeFolder,TypeFoldable};\n@@ -28,10 +28,9 @@ use std::cell::Cell;\n \n use syntax::ast;\n use syntax::codemap::{DUMMY_SP, Span};\n-use rustc_front::print::pprust::pat_to_string;\n-use rustc_front::intravisit::{self, Visitor};\n-use rustc_front::util as hir_util;\n-use rustc_front::hir;\n+use rustc::hir::print::pat_to_string;\n+use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir;\n \n ///////////////////////////////////////////////////////////////////////////\n // Entry point functions\n@@ -112,7 +111,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     // system.\n                     match e.node {\n                         hir::ExprBinary(..) => {\n-                            if !hir_util::is_by_value_binop(op.node) {\n+                            if !op.node.is_by_value() {\n                                 self.fcx.inh.tables.borrow_mut().adjustments.remove(&lhs.id);\n                             }\n                         },\n@@ -142,7 +141,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n             return;\n         }\n \n-        self.visit_node_id(ResolvingExpr(s.span), hir_util::stmt_id(s));\n+        self.visit_node_id(ResolvingExpr(s.span), s.node.id());\n         intravisit::walk_stmt(self, s);\n     }\n "}, {"sha": "9c8c9ba50561296655e09d959c2b3aee9cfc40ca", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,7 +15,7 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use middle::lang_items::UnsizeTraitLangItem;\n use rustc::ty::subst::{self, Subst};\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n@@ -39,10 +39,10 @@ use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::dep_graph::DepNode;\n-use rustc::front::map as hir_map;\n-use rustc_front::intravisit;\n-use rustc_front::hir::{Item, ItemImpl};\n-use rustc_front::hir;\n+use rustc::hir::map as hir_map;\n+use rustc::hir::intravisit;\n+use rustc::hir::{Item, ItemImpl};\n+use rustc::hir;\n \n mod orphan;\n mod overlap;"}, {"sha": "f3d63957018d672547d26005d390c01117111ca8", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,14 +12,14 @@\n //! crate or pertains to a type defined in this crate.\n \n use middle::cstore::LOCAL_CRATE;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc::dep_graph::DepNode;\n-use rustc_front::intravisit;\n-use rustc_front::hir;\n+use rustc::hir::intravisit;\n+use rustc::hir;\n \n pub fn check(tcx: &TyCtxt) {\n     let mut orphan = OrphanChecker { tcx: tcx };"}, {"sha": "a05167dbe433333c819515b62aaf9dbd5fb852bb", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,14 +13,14 @@\n //! constructor provide a method with the same name.\n \n use middle::cstore::CrateStore;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use rustc::traits::{self, ProjectionMode};\n use rustc::infer;\n use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use rustc::dep_graph::DepNode;\n-use rustc_front::hir;\n-use rustc_front::intravisit;\n+use rustc::hir;\n+use rustc::hir::intravisit;\n use util::nodemap::DefIdMap;\n use lint;\n "}, {"sha": "b042e23e0ac0494104958c0b376b6c327a604845", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -12,8 +12,8 @@\n //! crate or pertains to a type defined in this crate.\n \n use rustc::ty::TyCtxt;\n-use rustc_front::intravisit;\n-use rustc_front::hir;\n+use rustc::hir::intravisit;\n+use rustc::hir;\n \n pub fn check(tcx: &TyCtxt) {\n     let mut orphan = UnsafetyChecker { tcx: tcx };"}, {"sha": "9d76b4c5284b161f9561f0ce49f2f6e2bbf2d10d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -60,8 +60,8 @@ There are some shortcomings in this design:\n \n use astconv::{self, AstConv, ty_of_arg, ast_ty_to_ty, ast_region_to_region};\n use lint;\n-use middle::def::Def;\n-use middle::def_id::DefId;\n+use hir::def::Def;\n+use hir::def_id::DefId;\n use constrained_type_params as ctp;\n use coherence;\n use middle::lang_items::SizedTraitLangItem;\n@@ -77,7 +77,7 @@ use rustc::ty::fold::{TypeFolder};\n use rustc::ty::util::IntTypeExt;\n use rscope::*;\n use rustc::dep_graph::DepNode;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use util::common::{ErrorReported, MemoizationMap};\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use write_ty_to_tcx;\n@@ -94,9 +94,9 @@ use syntax::attr;\n use syntax::codemap::Span;\n use syntax::parse::token::special_idents;\n use syntax::ptr::P;\n-use rustc_front::hir::{self, PatKind};\n-use rustc_front::intravisit;\n-use rustc_front::print::pprust;\n+use rustc::hir::{self, PatKind};\n+use rustc::hir::intravisit;\n+use rustc::hir::print as pprust;\n \n ///////////////////////////////////////////////////////////////////////////\n // Main entry point"}, {"sha": "7f27d10ce1ec3c097f3ee25fd25a7ee8798e49b0", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -90,28 +90,26 @@ extern crate arena;\n extern crate fmt_macros;\n #[macro_use] extern crate rustc;\n extern crate rustc_platform_intrinsics as intrinsics;\n-extern crate rustc_front;\n extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n \n pub use rustc::dep_graph;\n-pub use rustc::front;\n+pub use rustc::hir;\n pub use rustc::lint;\n pub use rustc::middle;\n pub use rustc::session;\n pub use rustc::util;\n \n use dep_graph::DepNode;\n-use front::map as hir_map;\n-use middle::def::Def;\n+use hir::map as hir_map;\n+use hir::def::Def;\n use rustc::infer::{self, TypeOrigin};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::traits::ProjectionMode;\n use session::{config, CompileResult};\n use util::common::time;\n-use rustc_front::hir;\n \n use syntax::codemap::Span;\n use syntax::ast;\n@@ -138,7 +136,7 @@ pub struct TypeAndSubsts<'tcx> {\n \n pub struct CrateCtxt<'a, 'tcx: 'a> {\n     // A mapping from method call sites to traits that have that method.\n-    pub trait_map: ty::TraitMap,\n+    pub trait_map: hir::TraitMap,\n     /// A vector of every trait accessible in the whole crate\n     /// (i.e. including those from subcrates). This is used only for\n     /// error reporting, and so is lazily initialised and generally\n@@ -331,7 +329,7 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n     }\n }\n \n-pub fn check_crate(tcx: &TyCtxt, trait_map: ty::TraitMap) -> CompileResult {\n+pub fn check_crate(tcx: &TyCtxt, trait_map: hir::TraitMap) -> CompileResult {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = CrateCtxt {\n         trait_map: trait_map,"}, {"sha": "3b03a713a5b93f8acf8d79f159e9dfe1221e7ae1", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,16 +14,16 @@\n //! We walk the set of items and, for each member, generate new constraints.\n \n use dep_graph::DepTrackingMapConfig;\n-use middle::def_id::DefId;\n+use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use rustc::ty::subst;\n use rustc::ty::subst::ParamSpace;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::ItemVariances;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use syntax::ast;\n-use rustc_front::hir;\n-use rustc_front::intravisit::Visitor;\n+use rustc::hir;\n+use rustc::hir::intravisit::Visitor;\n \n use super::terms::*;\n use super::terms::VarianceTerm::*;"}, {"sha": "413dc83e638f2c583d84878fcd9e408617bd8585", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -27,8 +27,8 @@ use rustc::ty::maps::ItemVariances;\n use std::fmt;\n use std::rc::Rc;\n use syntax::ast;\n-use rustc_front::hir;\n-use rustc_front::intravisit::Visitor;\n+use rustc::hir;\n+use rustc::hir::intravisit::Visitor;\n use util::nodemap::NodeMap;\n \n use self::VarianceTerm::*;"}, {"sha": "9d76dd81e5f76041ff3404539ad98f8aad599a27", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -15,7 +15,6 @@ rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_driver = { path = \"../librustc_driver\" }\n-rustc_front = { path = \"../librustc_front\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_resolve = { path = \"../librustc_resolve\" }"}, {"sha": "8c65eb8dbd367f5bfe5f58c811e82552ddcf4e0b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -11,14 +11,15 @@\n //! Support for inlining external documentation into the current AST.\n \n use std::collections::HashSet;\n+use std::iter::once;\n \n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use rustc::middle::cstore::{self, CrateStore};\n-use rustc::middle::def::Def;\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::subst;\n use rustc::middle::stability;\n@@ -140,8 +141,11 @@ pub fn load_attrs(cx: &DocContext, tcx: &TyCtxt,\n /// source links back to the original item.\n pub fn record_extern_fqn(cx: &DocContext, did: DefId, kind: clean::TypeKind) {\n     if let Some(tcx) = cx.tcx_opt() {\n-        let fqn = tcx.sess.cstore.extern_item_path(did);\n-        let fqn = fqn.into_iter().map(|i| i.to_string()).collect();\n+        let crate_name = tcx.sess.cstore.crate_name(did.krate).to_string();\n+        let relative = tcx.def_path(did).data.into_iter().map(|elem| {\n+            elem.data.to_string()\n+        });\n+        let fqn = once(crate_name).chain(relative).collect();\n         cx.external_paths.borrow_mut().as_mut().unwrap().insert(did, (fqn, kind));\n     }\n }\n@@ -484,7 +488,7 @@ fn build_module(cx: &DocContext, tcx: &TyCtxt,\n \n fn build_const(cx: &DocContext, tcx: &TyCtxt,\n                did: DefId) -> clean::Constant {\n-    use rustc_front::print::pprust;\n+    use rustc::hir::print as pprust;\n \n     let (expr, ty) = lookup_const_by_id(tcx, did, None).unwrap_or_else(|| {\n         panic!(\"expected lookup_const_by_id to succeed for {:?}\", did);"}, {"sha": "4895022cfac2955010c9133ccda930f3f30dbaad", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -35,13 +35,13 @@ use syntax::ptr::P;\n \n use rustc_trans::back::link;\n use rustc::middle::cstore::{self, CrateStore};\n-use rustc::middle::def::Def;\n-use rustc::middle::def_id::{DefId, DefIndex};\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::ty::subst::{self, ParamSpace, VecPerParamSpace};\n use rustc::ty;\n use rustc::middle::stability;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n use std::collections::{HashMap, HashSet};\n use std::path::PathBuf;\n@@ -563,7 +563,7 @@ pub enum TyParamBound {\n \n impl TyParamBound {\n     fn maybe_sized(cx: &DocContext) -> TyParamBound {\n-        use rustc_front::hir::TraitBoundModifier as TBM;\n+        use rustc::hir::TraitBoundModifier as TBM;\n         let mut sized_bound = ty::BoundSized.clean(cx);\n         if let TyParamBound::TraitBound(_, ref mut tbm) = sized_bound {\n             *tbm = TBM::Maybe\n@@ -572,7 +572,7 @@ impl TyParamBound {\n     }\n \n     fn is_sized_bound(&self, cx: &DocContext) -> bool {\n-        use rustc_front::hir::TraitBoundModifier as TBM;\n+        use rustc::hir::TraitBoundModifier as TBM;\n         if let Some(tcx) = cx.tcx_opt() {\n             if let TyParamBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n                 if trait_.def_id() == tcx.lang_items.sized_trait() {\n@@ -1609,7 +1609,7 @@ impl PrimitiveType {\n \n impl Clean<Type> for hir::Ty {\n     fn clean(&self, cx: &DocContext) -> Type {\n-        use rustc_front::hir::*;\n+        use rustc::hir::*;\n         match self.node {\n             TyPtr(ref m) => RawPointer(m.mutbl.clean(cx), box m.ty.clean(cx)),\n             TyRptr(ref l, ref m) =>\n@@ -1826,7 +1826,7 @@ pub struct VariantStruct {\n     pub fields_stripped: bool,\n }\n \n-impl Clean<VariantStruct> for ::rustc_front::hir::VariantData {\n+impl Clean<VariantStruct> for ::rustc::hir::VariantData {\n     fn clean(&self, cx: &DocContext) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n@@ -2554,7 +2554,7 @@ fn lit_to_string(lit: &ast::Lit) -> String {\n }\n \n fn name_from_pat(p: &hir::Pat) -> String {\n-    use rustc_front::hir::*;\n+    use rustc::hir::*;\n     debug!(\"Trying to get a name from pattern: {:?}\", p);\n \n     match p.node {"}, {"sha": "4ba412cdc851bb4a843710b94bae8f518ad3b36e", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -29,7 +29,7 @@\n use std::mem;\n use std::collections::HashMap;\n \n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::subst;\n \n use clean::PathParameters as PP;"}, {"sha": "6b7aa103e1d0afb7c71ae2f62d48349bf695d0a1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,14 +13,14 @@ use rustc_lint;\n use rustc_driver::{driver, target_features, abort_on_err};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt};\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::lint;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n-use rustc_front::lowering::{lower_crate, LoweringContext};\n+use rustc::hir::lowering::{lower_crate, LoweringContext};\n use rustc_metadata::cstore::CStore;\n \n use syntax::{ast, codemap, errors};"}, {"sha": "2db4b779eed9844d5d5e0a092b4bfd7cc6aff082", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -20,7 +20,7 @@ use syntax::ast;\n use syntax::ast::{Name, NodeId};\n use syntax::attr;\n use syntax::ptr::P;\n-use rustc_front::hir;\n+use rustc::hir;\n \n pub struct Module {\n     pub name: Option<Name>,"}, {"sha": "a43711a32733bd0060256b18b7ba4568076dee07", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -19,9 +19,9 @@ use std::fmt;\n use std::iter::repeat;\n \n use rustc::middle::cstore::LOCAL_CRATE;\n-use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use syntax::abi::Abi;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use clean;\n use html::item_type::ItemType;"}, {"sha": "d63e704e06bfbf030bb7a501e7f20e8a4b63342f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -56,11 +56,11 @@ use serialize::json::{ToJson, Json, as_json};\n use syntax::{abi, ast};\n use syntax::feature_gate::UnstableFeatures;\n use rustc::middle::cstore::LOCAL_CRATE;\n-use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n use rustc::session::config::get_unstable_features_setting;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use clean::{self, SelfTy, Attributes, GetDefId};\n use doctree;"}, {"sha": "9439c258318aedee40e124350a3fac4269c8fec5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -41,7 +41,6 @@ extern crate rustc_driver;\n extern crate rustc_resolve;\n extern crate rustc_lint;\n extern crate rustc_back;\n-extern crate rustc_front;\n extern crate rustc_metadata;\n extern crate serialize;\n #[macro_use] extern crate syntax;"}, {"sha": "ff2a9f13e8a1287d39425c78d169d9700aebf89f", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::middle::def_id::DefId;\n+use rustc::hir::def_id::DefId;\n use rustc::middle::privacy::AccessLevels;\n use rustc::util::nodemap::DefIdSet;\n use std::cmp;\n use std::string::String;\n use std::usize;\n-use rustc_front::hir;\n+use rustc::hir;\n \n use clean::{self, Attributes, GetDefId};\n use clean::Item;"}, {"sha": "3810fb87acf6a9dac20599551f9fb7a1f4e401c9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -24,11 +24,11 @@ use std::sync::{Arc, Mutex};\n use testing;\n use rustc_lint;\n use rustc::dep_graph::DepGraph;\n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n-use rustc_front::lowering::{lower_crate, LoweringContext};\n+use rustc::hir::lowering::{lower_crate, LoweringContext};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n@@ -141,7 +141,7 @@ pub fn run(input: &str,\n }\n \n // Look for #![doc(test(no_crate_inject))], used by crates in the std facade\n-fn scrape_test_config(krate: &::rustc_front::hir::Crate) -> TestOptions {\n+fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n     use syntax::attr::AttrMetaMethods;\n     use syntax::print::pprust;\n "}, {"sha": "45c7969ef7c39a6f89c318c200dc72bc29b0848f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -20,10 +20,10 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n \n-use rustc::front::map as hir_map;\n+use rustc::hir::map as hir_map;\n use rustc::middle::stability;\n \n-use rustc_front::hir;\n+use rustc::hir;\n \n use core;\n use clean::{Clean, Attributes};"}, {"sha": "16d4ed53b5b1905b3c5c41fad149bd4527771f00", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -204,6 +204,23 @@ impl fmt::Display for Path {\n     }\n }\n \n+impl Path {\n+    // convert a span and an identifier to the corresponding\n+    // 1-segment path\n+    pub fn from_ident(s: Span, identifier: Ident) -> Path {\n+        Path {\n+            span: s,\n+            global: false,\n+            segments: vec!(\n+                PathSegment {\n+                    identifier: identifier,\n+                    parameters: PathParameters::none()\n+                }\n+            ),\n+        }\n+    }\n+}\n+\n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "ffba9e824d4ad2779ffad7b46dc77f2271015a6d", "filename": "src/libsyntax/ast_util.rs", "status": "removed", "additions": 0, "deletions": 392, "changes": 392, "blob_url": "https://github.com/rust-lang/rust/blob/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7b00b68fc7960e98fb914be52d9a6a16fe2224/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=af7b00b68fc7960e98fb914be52d9a6a16fe2224", "patch": "@@ -1,392 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use ast::*;\n-use ast;\n-use codemap;\n-use codemap::Span;\n-use parse::token;\n-use print::pprust;\n-use ptr::P;\n-use visit::{FnKind, Visitor};\n-use visit;\n-\n-use std::cmp;\n-use std::u32;\n-\n-pub fn path_name_i(idents: &[Ident]) -> String {\n-    // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n-    idents.iter().map(|i| i.to_string()).collect::<Vec<String>>().join(\"::\")\n-}\n-\n-pub fn is_path(e: P<Expr>) -> bool {\n-    match e.node { ExprKind::Path(..) => true, _ => false }\n-}\n-\n-\n-// convert a span and an identifier to the corresponding\n-// 1-segment path\n-pub fn ident_to_path(s: Span, identifier: Ident) -> Path {\n-    ast::Path {\n-        span: s,\n-        global: false,\n-        segments: vec!(\n-            ast::PathSegment {\n-                identifier: identifier,\n-                parameters: ast::PathParameters::AngleBracketed(ast::AngleBracketedParameterData {\n-                    lifetimes: Vec::new(),\n-                    types: P::empty(),\n-                    bindings: P::empty(),\n-                })\n-            }\n-        ),\n-    }\n-}\n-\n-// If path is a single segment ident path, return that ident. Otherwise, return\n-// None.\n-pub fn path_to_ident(path: &Path) -> Option<Ident> {\n-    if path.segments.len() != 1 {\n-        return None;\n-    }\n-\n-    let segment = &path.segments[0];\n-    if !segment.parameters.is_empty() {\n-        return None;\n-    }\n-\n-    Some(segment.identifier)\n-}\n-\n-pub fn ident_to_pat(id: NodeId, s: Span, i: Ident) -> P<Pat> {\n-    let spanned = codemap::Spanned{ span: s, node: i };\n-    P(Pat {\n-        id: id,\n-        node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), spanned, None),\n-        span: s\n-    })\n-}\n-\n-/// Generate a \"pretty\" name for an `impl` from its type and trait.\n-/// This is designed so that symbols of `impl`'d methods give some\n-/// hint of where they came from, (previously they would all just be\n-/// listed as `__extensions__::method_name::hash`, with no indication\n-/// of the type).\n-pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: Option<&Ty>) -> Ident {\n-    let mut pretty = match ty {\n-        Some(t) => pprust::ty_to_string(t),\n-        None => String::from(\"..\")\n-    };\n-\n-    match *trait_ref {\n-        Some(ref trait_ref) => {\n-            pretty.push('.');\n-            pretty.push_str(&pprust::path_to_string(&trait_ref.path));\n-        }\n-        None => {}\n-    }\n-    token::gensym_ident(&pretty[..])\n-}\n-\n-// ______________________________________________________________________\n-// Enumerating the IDs which appear in an AST\n-\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct IdRange {\n-    pub min: NodeId,\n-    pub max: NodeId,\n-}\n-\n-impl IdRange {\n-    pub fn max() -> IdRange {\n-        IdRange {\n-            min: u32::MAX,\n-            max: u32::MIN,\n-        }\n-    }\n-\n-    pub fn empty(&self) -> bool {\n-        self.min >= self.max\n-    }\n-\n-    pub fn add(&mut self, id: NodeId) {\n-        self.min = cmp::min(self.min, id);\n-        self.max = cmp::max(self.max, id + 1);\n-    }\n-}\n-\n-pub trait IdVisitingOperation {\n-    fn visit_id(&mut self, node_id: NodeId);\n-}\n-\n-/// A visitor that applies its operation to all of the node IDs\n-/// in a visitable thing.\n-\n-pub struct IdVisitor<'a, O:'a> {\n-    pub operation: &'a mut O,\n-    pub visited_outermost: bool,\n-}\n-\n-impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {\n-    fn visit_generics_helper(&mut self, generics: &Generics) {\n-        for type_parameter in generics.ty_params.iter() {\n-            self.operation.visit_id(type_parameter.id)\n-        }\n-        for lifetime in &generics.lifetimes {\n-            self.operation.visit_id(lifetime.lifetime.id)\n-        }\n-    }\n-}\n-\n-impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n-    fn visit_mod(&mut self,\n-                 module: &Mod,\n-                 _: Span,\n-                 node_id: NodeId) {\n-        self.operation.visit_id(node_id);\n-        visit::walk_mod(self, module)\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        self.operation.visit_id(foreign_item.id);\n-        visit::walk_foreign_item(self, foreign_item)\n-    }\n-\n-    fn visit_item(&mut self, item: &Item) {\n-        if self.visited_outermost {\n-            return\n-        } else {\n-            self.visited_outermost = true\n-        }\n-\n-        self.operation.visit_id(item.id);\n-        match item.node {\n-            ItemKind::Use(ref view_path) => {\n-                match view_path.node {\n-                    ViewPathSimple(_, _) |\n-                    ViewPathGlob(_) => {}\n-                    ViewPathList(_, ref paths) => {\n-                        for path in paths {\n-                            self.operation.visit_id(path.node.id())\n-                        }\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-\n-        visit::walk_item(self, item);\n-\n-        self.visited_outermost = false\n-    }\n-\n-    fn visit_local(&mut self, local: &Local) {\n-        self.operation.visit_id(local.id);\n-        visit::walk_local(self, local)\n-    }\n-\n-    fn visit_block(&mut self, block: &Block) {\n-        self.operation.visit_id(block.id);\n-        visit::walk_block(self, block)\n-    }\n-\n-    fn visit_stmt(&mut self, statement: &Stmt) {\n-        self.operation\n-            .visit_id(statement.node.id().expect(\"attempted to visit unexpanded stmt\"));\n-        visit::walk_stmt(self, statement)\n-    }\n-\n-    fn visit_pat(&mut self, pattern: &Pat) {\n-        self.operation.visit_id(pattern.id);\n-        visit::walk_pat(self, pattern)\n-    }\n-\n-    fn visit_expr(&mut self, expression: &Expr) {\n-        self.operation.visit_id(expression.id);\n-        visit::walk_expr(self, expression)\n-    }\n-\n-    fn visit_ty(&mut self, typ: &Ty) {\n-        self.operation.visit_id(typ.id);\n-        visit::walk_ty(self, typ)\n-    }\n-\n-    fn visit_generics(&mut self, generics: &Generics) {\n-        self.visit_generics_helper(generics);\n-        visit::walk_generics(self, generics)\n-    }\n-\n-    fn visit_fn(&mut self,\n-                function_kind: visit::FnKind<'v>,\n-                function_declaration: &'v FnDecl,\n-                block: &'v Block,\n-                span: Span,\n-                node_id: NodeId) {\n-        match function_kind {\n-            FnKind::Method(..) if self.visited_outermost => return,\n-            FnKind::Method(..) => self.visited_outermost = true,\n-            _ => {}\n-        }\n-\n-        self.operation.visit_id(node_id);\n-\n-        match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _) => {\n-                self.visit_generics_helper(generics)\n-            }\n-            FnKind::Method(_, ref sig, _) => {\n-                self.visit_generics_helper(&sig.generics)\n-            }\n-            FnKind::Closure => {}\n-        }\n-\n-        for argument in &function_declaration.inputs {\n-            self.operation.visit_id(argument.id)\n-        }\n-\n-        visit::walk_fn(self,\n-                       function_kind,\n-                       function_declaration,\n-                       block,\n-                       span);\n-\n-        if let FnKind::Method(..) = function_kind {\n-            self.visited_outermost = false;\n-        }\n-    }\n-\n-    fn visit_struct_field(&mut self, struct_field: &StructField) {\n-        self.operation.visit_id(struct_field.id);\n-        visit::walk_struct_field(self, struct_field)\n-    }\n-\n-    fn visit_variant_data(&mut self,\n-                        struct_def: &VariantData,\n-                        _: ast::Ident,\n-                        _: &ast::Generics,\n-                        _: NodeId,\n-                        _: Span) {\n-        self.operation.visit_id(struct_def.id());\n-        visit::walk_struct_def(self, struct_def);\n-    }\n-\n-    fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n-        self.operation.visit_id(ti.id);\n-        visit::walk_trait_item(self, ti);\n-    }\n-\n-    fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n-        self.operation.visit_id(ii.id);\n-        visit::walk_impl_item(self, ii);\n-    }\n-\n-    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n-        self.operation.visit_id(lifetime.id);\n-    }\n-\n-    fn visit_lifetime_def(&mut self, def: &LifetimeDef) {\n-        self.visit_lifetime(&def.lifetime);\n-    }\n-\n-    fn visit_trait_ref(&mut self, trait_ref: &TraitRef) {\n-        self.operation.visit_id(trait_ref.ref_id);\n-        visit::walk_trait_ref(self, trait_ref);\n-    }\n-}\n-\n-pub struct IdRangeComputingVisitor {\n-    pub result: IdRange,\n-}\n-\n-impl IdRangeComputingVisitor {\n-    pub fn new() -> IdRangeComputingVisitor {\n-        IdRangeComputingVisitor { result: IdRange::max() }\n-    }\n-\n-    pub fn result(&self) -> IdRange {\n-        self.result\n-    }\n-}\n-\n-impl IdVisitingOperation for IdRangeComputingVisitor {\n-    fn visit_id(&mut self, id: NodeId) {\n-        self.result.add(id);\n-    }\n-}\n-\n-/// Computes the id range for a single fn body, ignoring nested items.\n-pub fn compute_id_range_for_fn_body(fk: FnKind,\n-                                    decl: &FnDecl,\n-                                    body: &Block,\n-                                    sp: Span,\n-                                    id: NodeId)\n-                                    -> IdRange\n-{\n-    let mut visitor = IdRangeComputingVisitor::new();\n-    let mut id_visitor = IdVisitor {\n-        operation: &mut visitor,\n-        visited_outermost: false,\n-    };\n-    id_visitor.visit_fn(fk, decl, body, sp, id);\n-    id_visitor.operation.result\n-}\n-\n-/// Returns true if the given pattern consists solely of an identifier\n-/// and false otherwise.\n-pub fn pat_is_ident(pat: P<ast::Pat>) -> bool {\n-    match pat.node {\n-        PatKind::Ident(..) => true,\n-        _ => false,\n-    }\n-}\n-\n-// are two paths equal when compared unhygienically?\n-// since I'm using this to replace ==, it seems appropriate\n-// to compare the span, global, etc. fields as well.\n-pub fn path_name_eq(a : &ast::Path, b : &ast::Path) -> bool {\n-    (a.span.source_equal(&b.span))\n-    && (a.global == b.global)\n-    && (segments_name_eq(&a.segments[..], &b.segments[..]))\n-}\n-\n-// are two arrays of segments equal when compared unhygienically?\n-pub fn segments_name_eq(a : &[ast::PathSegment], b : &[ast::PathSegment]) -> bool {\n-    a.len() == b.len() &&\n-    a.iter().zip(b).all(|(s, t)| {\n-        s.identifier.name == t.identifier.name &&\n-        // FIXME #7743: ident -> name problems in lifetime comparison?\n-        // can types contain idents?\n-        s.parameters == t.parameters\n-    })\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use ast::*;\n-    use super::*;\n-\n-    fn ident_to_segment(id: Ident) -> PathSegment {\n-        PathSegment {identifier: id,\n-                     parameters: PathParameters::none()}\n-    }\n-\n-    #[test] fn idents_name_eq_test() {\n-        assert!(segments_name_eq(\n-            &[Ident::new(Name(3),SyntaxContext(4)), Ident::new(Name(78),SyntaxContext(82))]\n-                .iter().cloned().map(ident_to_segment).collect::<Vec<PathSegment>>(),\n-            &[Ident::new(Name(3),SyntaxContext(104)), Ident::new(Name(78),SyntaxContext(182))]\n-                .iter().cloned().map(ident_to_segment).collect::<Vec<PathSegment>>()));\n-        assert!(!segments_name_eq(\n-            &[Ident::new(Name(3),SyntaxContext(4)), Ident::new(Name(78),SyntaxContext(82))]\n-                .iter().cloned().map(ident_to_segment).collect::<Vec<PathSegment>>(),\n-            &[Ident::new(Name(3),SyntaxContext(104)), Ident::new(Name(77),SyntaxContext(182))]\n-                .iter().cloned().map(ident_to_segment).collect::<Vec<PathSegment>>()));\n-    }\n-}"}, {"sha": "5d378763bef632a8fa656eb0899db5f2efc4ea86", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -21,7 +21,6 @@\n use ast::*;\n use ast;\n use attr::{ThinAttributes, ThinAttributesExt};\n-use ast_util;\n use codemap::{respan, Span, Spanned};\n use parse::token;\n use ptr::P;\n@@ -1071,13 +1070,6 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n                                         folder: &mut T) -> Item {\n     let id = folder.new_id(id);\n     let node = folder.fold_item_kind(node);\n-    let ident = match node {\n-        // The node may have changed, recompute the \"pretty\" impl name.\n-        ItemKind::Impl(_, _, _, ref maybe_trait, ref ty, _) => {\n-            ast_util::impl_pretty_name(maybe_trait, Some(&ty))\n-        }\n-        _ => ident\n-    };\n \n     Item {\n         id: id,"}, {"sha": "ab14e21e251cb00cfb30172e4e7cdaffb7ed32ea", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -91,7 +91,6 @@ pub mod syntax {\n \n pub mod abi;\n pub mod ast;\n-pub mod ast_util;\n pub mod attr;\n pub mod codemap;\n pub mod config;"}, {"sha": "9dc661ed2ea28be9ba4b92841f290b202de6ba83", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -42,7 +42,6 @@ use ast::{Visibility, WhereClause};\n use attr::{ThinAttributes, ThinAttributesExt, AttributesExt};\n use ast::{BinOpKind, UnOp};\n use ast;\n-use ast_util::{self, ident_to_path};\n use codemap::{self, Span, BytePos, Spanned, spanned, mk_sp, CodeMap};\n use errors::{self, DiagnosticBuilder};\n use ext::tt::macro_parser;\n@@ -1575,9 +1574,14 @@ impl<'a> Parser<'a> {\n             pat\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n-            ast_util::ident_to_pat(ast::DUMMY_NODE_ID,\n-                                   self.last_span,\n-                                   special_idents::invalid)\n+            let sp = self.last_span;\n+            let spanned = Spanned { span: sp, node: special_idents::invalid };\n+            P(Pat {\n+                id: ast::DUMMY_NODE_ID,\n+                node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable),\n+                                     spanned, None),\n+                span: sp\n+            })\n         };\n \n         let t = self.parse_ty_sum()?;\n@@ -2221,7 +2225,7 @@ impl<'a> Parser<'a> {\n                             ctxt: _\n                          }, token::Plain) => {\n                 self.bump();\n-                let path = ast_util::ident_to_path(mk_sp(lo, hi), id);\n+                let path = ast::Path::from_ident(mk_sp(lo, hi), id);\n                 ex = ExprKind::Path(None, path);\n                 hi = self.last_span.hi;\n             }\n@@ -3677,7 +3681,7 @@ impl<'a> Parser<'a> {\n                         // Parse macro invocation\n                         let ident = self.parse_ident()?;\n                         let ident_span = self.last_span;\n-                        let path = ident_to_path(ident_span, ident);\n+                        let path = ast::Path::from_ident(ident_span, ident);\n                         self.bump();\n                         let delim = self.expect_open_delim()?;\n                         let tts = self.parse_seq_to_end(\n@@ -5116,7 +5120,7 @@ impl<'a> Parser<'a> {\n \n             self.expect(&token::OpenDelim(token::Brace))?;\n             self.expect(&token::CloseDelim(token::Brace))?;\n-            Ok((ast_util::impl_pretty_name(&opt_trait, None),\n+            Ok((special_idents::invalid,\n              ItemKind::DefaultImpl(unsafety, opt_trait.unwrap()), None))\n         } else {\n             if opt_trait.is_some() {\n@@ -5132,7 +5136,7 @@ impl<'a> Parser<'a> {\n                 impl_items.push(self.parse_impl_item()?);\n             }\n \n-            Ok((ast_util::impl_pretty_name(&opt_trait, Some(&ty)),\n+            Ok((special_idents::invalid,\n              ItemKind::Impl(unsafety, polarity, generics, opt_trait, ty, impl_items),\n              Some(attrs)))\n         }"}, {"sha": "703b1611540c89272bc9c8b82d4aee63f1ef69f3", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -18,7 +18,6 @@ use std::iter;\n use std::slice;\n use std::mem;\n use std::vec;\n-use ast_util::*;\n use attr::AttrMetaMethods;\n use attr;\n use codemap::{DUMMY_SP, Span, ExpnInfo, NameAndSpan, MacroAttribute};\n@@ -35,7 +34,7 @@ use fold;\n use parse::token::{intern, InternedString};\n use parse::{token, ParseSess};\n use print::pprust;\n-use {ast, ast_util};\n+use ast;\n use ptr::P;\n use util::small_vector::SmallVector;\n \n@@ -120,8 +119,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         if ident.name != token::special_idents::invalid.name {\n             self.cx.path.push(ident);\n         }\n-        debug!(\"current path: {}\",\n-               ast_util::path_name_i(&self.cx.path));\n+        debug!(\"current path: {}\", path_name_i(&self.cx.path));\n \n         let i = if is_test_fn(&self.cx, &i) || is_bench_fn(&self.cx, &i) {\n             match i.node {\n@@ -349,7 +347,6 @@ enum HasTestSignature {\n     NotEvenAFunction,\n }\n \n-\n fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_test_attr = attr::contains_name(&i.attrs, \"test\");\n \n@@ -576,6 +573,11 @@ fn path_node(ids: Vec<ast::Ident> ) -> ast::Path {\n     }\n }\n \n+fn path_name_i(idents: &[ast::Ident]) -> String {\n+    // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n+    idents.iter().map(|i| i.to_string()).collect::<Vec<String>>().join(\"::\")\n+}\n+\n fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     // The vector of test_descs for this crate\n     let test_descs = mk_test_descs(cx);\n@@ -645,10 +647,10 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     // creates $name: $expr\n     let field = |name, expr| ecx.field_imm(span, ecx.ident_of(name), expr);\n \n-    debug!(\"encoding {}\", ast_util::path_name_i(&path[..]));\n+    debug!(\"encoding {}\", path_name_i(&path[..]));\n \n     // path to the #[test] function: \"foo::bar::baz\"\n-    let path_string = ast_util::path_name_i(&path[..]);\n+    let path_string = path_name_i(&path[..]);\n     let name_expr = ecx.expr_str(span, token::intern_and_get_ident(&path_string[..]));\n \n     // self::test::StaticTestName($name_expr)"}, {"sha": "b8ba1a58f2163924fc95b5265abde5bb18f71a4f", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -193,7 +193,6 @@ use std::vec;\n \n use syntax::abi::Abi;\n use syntax::ast::{self, EnumDef, Expr, Ident, Generics, VariantData, BinOpKind, PatKind};\n-use syntax::ast_util;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{ExtCtxt, Annotatable};\n@@ -619,7 +618,6 @@ impl<'a> TraitDef<'a> {\n         // Just mark it now since we know that it'll end up used downstream\n         attr::mark_used(&attr);\n         let opt_trait_ref = Some(trait_ref);\n-        let ident = ast_util::impl_pretty_name(&opt_trait_ref, Some(&self_type));\n         let unused_qual = cx.attribute(\n             self.span,\n             cx.meta_list(self.span,\n@@ -637,7 +635,7 @@ impl<'a> TraitDef<'a> {\n \n         cx.item(\n             self.span,\n-            ident,\n+            special_idents::invalid,\n             a,\n             ast::ItemKind::Impl(unsafety,\n                                 ast::ImplPolarity::Positive,"}, {"sha": "4b5c2850dab080f72e38d052bee5759c5411bad7", "filename": "src/rustc/Cargo.lock", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Frustc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Frustc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.lock?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -75,7 +75,6 @@ dependencies = [\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -85,7 +84,6 @@ name = \"rustc_back\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -101,7 +99,6 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -134,7 +131,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_borrowck 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"rustc_lint 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n@@ -151,24 +147,13 @@ dependencies = [\n  \"syntax_ext 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_front\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"log 0.0.0\",\n- \"rustc_bitflags 0.0.0\",\n- \"serialize 0.0.0\",\n- \"syntax 0.0.0\",\n-]\n-\n [[package]]\n name = \"rustc_lint\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n \n@@ -192,7 +177,6 @@ dependencies = [\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -208,7 +192,6 @@ dependencies = [\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n \n@@ -218,7 +201,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n \n@@ -234,7 +216,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -246,7 +227,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n \n@@ -258,7 +238,6 @@ dependencies = [\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n \n@@ -284,7 +263,6 @@ dependencies = [\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n@@ -302,7 +280,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -318,7 +295,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_driver 0.0.0\",\n- \"rustc_front 0.0.0\",\n  \"rustc_lint 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n  \"rustc_resolve 0.0.0\","}, {"sha": "b5234af937b0c08b65385d94606ab902503a9b50", "filename": "src/test/auxiliary/dummy_mir_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdummy_mir_pass.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,7 +14,6 @@\n #![feature(box_syntax)]\n \n #[macro_use] extern crate rustc;\n-extern crate rustc_front;\n extern crate rustc_plugin;\n extern crate rustc_const_math;\n extern crate syntax;"}, {"sha": "a424517da12f0c2dbda6a5b4e45eb48400faf65f", "filename": "src/test/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,13 +14,12 @@\n #![feature(box_syntax)]\n \n #[macro_use] extern crate rustc;\n-extern crate rustc_front;\n extern crate rustc_plugin;\n extern crate syntax;\n \n use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n use rustc_plugin::Registry;\n-use rustc_front::hir;\n+use rustc::hir;\n use syntax::attr;\n \n declare_lint!(CRATE_NOT_OKAY, Warn, \"crate not marked with #![crate_okay]\");"}, {"sha": "1e9a77724a8ebdfd46a5eabcc407b98f34ee46ac", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,14 +13,12 @@\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n-extern crate rustc_front;\n-\n // Load rustc as a plugin to get macros\n #[macro_use]\n extern crate rustc;\n extern crate rustc_plugin;\n \n-use rustc_front::hir;\n+use rustc::hir;\n use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n use rustc_plugin::Registry;\n "}, {"sha": "91b4f5f30ad0d1f0d4313b5e3b843135fe66ef9b", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -14,7 +14,6 @@\n extern crate libc;\n extern crate rustc;\n extern crate rustc_driver;\n-extern crate rustc_front;\n extern crate rustc_lint;\n extern crate rustc_llvm as llvm;\n extern crate rustc_metadata;\n@@ -28,13 +27,13 @@ use std::rc::Rc;\n use std::thread::Builder;\n \n use rustc::dep_graph::DepGraph;\n-use rustc::front::map as ast_map;\n+use rustc::hir::map as ast_map;\n use rustc::middle::cstore::{CrateStore, LinkagePreference};\n use rustc::ty;\n use rustc::session::config::{self, basic_options, build_configuration, Input, Options};\n use rustc::session::build_session;\n use rustc_driver::{driver, abort_on_err};\n-use rustc_front::lowering::{lower_crate, LoweringContext};\n+use rustc::hir::lowering::{lower_crate, LoweringContext};\n use rustc_resolve::MakeGlobMap;\n use rustc_metadata::cstore::CStore;\n use libc::c_void;"}, {"sha": "696e0544fdc5793003c11493f059864c632f9040", "filename": "src/test/run-make/pretty-print-path-suffix/foo_method.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Ffoo_method.pp", "raw_url": "https://github.com/rust-lang/rust/raw/552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Ffoo_method.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2Ffoo_method.pp?ref=552af51ffb9f4ae08a7ee3bf27b0e8309006ca6f", "patch": "@@ -13,4 +13,4 @@\n \n \n fn foo_method(&self) -> &'static str { return \"i am very similar to foo.\"; }\n-/* nest::S::foo_method */\n+/* nest::{{impl}}::foo_method */"}]}