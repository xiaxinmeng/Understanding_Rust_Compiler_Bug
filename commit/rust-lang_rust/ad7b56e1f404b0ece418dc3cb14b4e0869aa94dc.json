{"sha": "ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkN2I1NmUxZjQwNGIwZWNlNDE4ZGMzY2IxNGI0ZTA4NjlhYTk0ZGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-03T05:35:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-03T05:35:38Z"}, "message": "Rollup merge of #85900 - LingMan:pat_mat, r=petrochenkov\n\nUse pattern matching instead of checking lengths explicitly\n\nThis piece of code checks that there are exaclty two variants, one having\nexactly one field, the other having exactly zero fields. If any of these\nconditions is violated, it returns `None`. Otherwise it assigns that one\nfield's ty to `field_ty`.\n\nInstead of fiddling with indices and length checks explicitly, use pattern\nmatching to simplify this.\n\n`@rustbot` modify labels +C-cleanup +T-compiler", "tree": {"sha": "eae4f7d79059dc2868bc603591658233ac30f7a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae4f7d79059dc2868bc603591658233ac30f7a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJguGoqCRBK7hj4Ov3rIwAAe0MIAJqphQp+4G6HDG+nZL3l8TJB\n6znCd3vtkOMDReytjaA9GcdV5VNuBrlzzXQ2VXADbrDAar6AuXfl14ES4pQFvmKT\nydvX6VcvY+0K4Ft42cHJvTiepTVDmHPuLmpCQ7N4hteYYx8msPhlfvvYjSmNpUaI\n0F4icdITgKUKbPvqVkueXRnyEEPRlMqq5cZccrKV8aSzks4X1LbDcyobIPyHhCSv\nqgryCaf3G7fJK9omuDPiSXG02QItwMU1+XNx10zR0WVE63M9Y+b5/vqxg2nDLIKT\n9YSGufI5TYds0YMxp0EGpKoQhK9S/8rJdsUXoQ7Hw0VxN7rjyL8T+Xz/MKnQSFY=\n=4biA\n-----END PGP SIGNATURE-----\n", "payload": "tree eae4f7d79059dc2868bc603591658233ac30f7a4\nparent 052a3feeeac8d8f8f0ab0288a5e2931757ce764c\nparent e2b22b56b843d3262dce8813b8450083c27ee659\nauthor Yuki Okushi <jtitor@2k36.org> 1622698538 +0900\ncommitter GitHub <noreply@github.com> 1622698538 +0900\n\nRollup merge of #85900 - LingMan:pat_mat, r=petrochenkov\n\nUse pattern matching instead of checking lengths explicitly\n\nThis piece of code checks that there are exaclty two variants, one having\nexactly one field, the other having exactly zero fields. If any of these\nconditions is violated, it returns `None`. Otherwise it assigns that one\nfield's ty to `field_ty`.\n\nInstead of fiddling with indices and length checks explicitly, use pattern\nmatching to simplify this.\n\n`@rustbot` modify labels +C-cleanup +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc", "html_url": "https://github.com/rust-lang/rust/commit/ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052a3feeeac8d8f8f0ab0288a5e2931757ce764c", "url": "https://api.github.com/repos/rust-lang/rust/commits/052a3feeeac8d8f8f0ab0288a5e2931757ce764c", "html_url": "https://github.com/rust-lang/rust/commit/052a3feeeac8d8f8f0ab0288a5e2931757ce764c"}, {"sha": "e2b22b56b843d3262dce8813b8450083c27ee659", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b22b56b843d3262dce8813b8450083c27ee659", "html_url": "https://github.com/rust-lang/rust/commit/e2b22b56b843d3262dce8813b8450083c27ee659"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "319adf42cf1ed2aee243a3d8f2ef2a1803a3344a", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=ad7b56e1f404b0ece418dc3cb14b4e0869aa94dc", "patch": "@@ -5,15 +5,14 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n-use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::Abi;\n-use rustc_target::abi::{Integer, LayoutOf, TagEncoding, VariantIdx, Variants};\n+use rustc_target::abi::{Integer, LayoutOf, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n use std::cmp;\n@@ -783,25 +782,14 @@ crate fn repr_nullable_ptr<'tcx>(\n ) -> Option<Ty<'tcx>> {\n     debug!(\"is_repr_nullable_ptr(cx, ty = {:?})\", ty);\n     if let ty::Adt(ty_def, substs) = ty.kind() {\n-        if ty_def.variants.len() != 2 {\n-            return None;\n-        }\n-\n-        let get_variant_fields = |index| &ty_def.variants[VariantIdx::new(index)].fields;\n-        let variant_fields = [get_variant_fields(0), get_variant_fields(1)];\n-        let fields = if variant_fields[0].is_empty() {\n-            &variant_fields[1]\n-        } else if variant_fields[1].is_empty() {\n-            &variant_fields[0]\n-        } else {\n-            return None;\n+        let field_ty = match &ty_def.variants.raw[..] {\n+            [var_one, var_two] => match (&var_one.fields[..], &var_two.fields[..]) {\n+                ([], [field]) | ([field], []) => field.ty(cx.tcx, substs),\n+                _ => return None,\n+            },\n+            _ => return None,\n         };\n \n-        if fields.len() != 1 {\n-            return None;\n-        }\n-\n-        let field_ty = fields[0].ty(cx.tcx, substs);\n         if !ty_is_known_nonnull(cx, field_ty, ckind) {\n             return None;\n         }"}]}