{"sha": "1b4b5e066b2f11b993118cadf3994d07534eb294", "node_id": "C_kwDOAAsO6NoAKDFiNGI1ZTA2NmIyZjExYjk5MzExOGNhZGYzOTk0ZDA3NTM0ZWIyOTQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-16T15:30:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-03T17:14:34Z"}, "message": "Remove useless map.", "tree": {"sha": "7a01c1d8b6a4b4826bde3efebaa3b649fc142e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a01c1d8b6a4b4826bde3efebaa3b649fc142e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b4b5e066b2f11b993118cadf3994d07534eb294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4b5e066b2f11b993118cadf3994d07534eb294", "html_url": "https://github.com/rust-lang/rust/commit/1b4b5e066b2f11b993118cadf3994d07534eb294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b4b5e066b2f11b993118cadf3994d07534eb294/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbcf7d415b806e494a582c108f609abd43b3ef6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcf7d415b806e494a582c108f609abd43b3ef6b", "html_url": "https://github.com/rust-lang/rust/commit/fbcf7d415b806e494a582c108f609abd43b3ef6b"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "167a097d9f8523b90d720e70b4eb1a803eb52598", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b4b5e066b2f11b993118cadf3994d07534eb294/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4b5e066b2f11b993118cadf3994d07534eb294/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=1b4b5e066b2f11b993118cadf3994d07534eb294", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n@@ -63,9 +63,6 @@ pub struct Index {\n     pub stab_map: FxHashMap<LocalDefId, Stability>,\n     pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n-\n-    /// Maps for each crate whether it is part of the staged API.\n-    pub staged_api: FxHashMap<CrateNum, bool>,\n }\n \n impl Index {"}, {"sha": "3e29dc4274f391a762a6c8bf166c10f5ceda778d", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b4b5e066b2f11b993118cadf3994d07534eb294/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4b5e066b2f11b993118cadf3994d07534eb294/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=1b4b5e066b2f11b993118cadf3994d07534eb294", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n@@ -654,12 +654,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n }\n \n fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n-    let is_staged_api =\n-        tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n-    let mut staged_api = FxHashMap::default();\n-    staged_api.insert(LOCAL_CRATE, is_staged_api);\n     let mut index = Index {\n-        staged_api,\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n         depr_map: Default::default(),\n@@ -873,9 +868,10 @@ impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n-    let access_levels = &tcx.privacy_access_levels(());\n-\n-    if tcx.stability().staged_api[&LOCAL_CRATE] {\n+    let is_staged_api =\n+        tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n+    if is_staged_api {\n+        let access_levels = &tcx.privacy_access_levels(());\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n         tcx.hir().walk_toplevel_module(&mut missing);"}]}