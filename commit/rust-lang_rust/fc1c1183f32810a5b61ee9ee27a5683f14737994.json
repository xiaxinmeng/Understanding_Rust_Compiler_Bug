{"sha": "fc1c1183f32810a5b61ee9ee27a5683f14737994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMWMxMTgzZjMyODEwYTViNjFlZTllZTI3YTU2ODNmMTQ3Mzc5OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-09T15:14:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-09T15:14:25Z"}, "message": "Auto merge of #31510 - dikaiosune:master, r=bluss\n\nSince a lexicographic ordering of a struct could vary based on which struct members are compared first, I ended up doing some testing to ensure that the behavior when deriving these traits was what I expected (ordered based on the top to bottom order of declaration of the members). I wanted to add this little bit of documentation to potentially save someone else the same effort. That is, assuming that my testing correctly reflects the intended behavior of the compiler.\n\nr? @steveklabnik", "tree": {"sha": "a3e3b4c64b1a9ef09f7121851406fd1c7ce6cfb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e3b4c64b1a9ef09f7121851406fd1c7ce6cfb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc1c1183f32810a5b61ee9ee27a5683f14737994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1c1183f32810a5b61ee9ee27a5683f14737994", "html_url": "https://github.com/rust-lang/rust/commit/fc1c1183f32810a5b61ee9ee27a5683f14737994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc1c1183f32810a5b61ee9ee27a5683f14737994/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6630a0819553898c3fc0d060cc72a94d62ae1330", "url": "https://api.github.com/repos/rust-lang/rust/commits/6630a0819553898c3fc0d060cc72a94d62ae1330", "html_url": "https://github.com/rust-lang/rust/commit/6630a0819553898c3fc0d060cc72a94d62ae1330"}, {"sha": "e22770beeb30f8ca04ab74ecd56ee56dcc2a234e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e22770beeb30f8ca04ab74ecd56ee56dcc2a234e", "html_url": "https://github.com/rust-lang/rust/commit/e22770beeb30f8ca04ab74ecd56ee56dcc2a234e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "042cbea64bd2662e86a73b52781ef5cce2a28851", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc1c1183f32810a5b61ee9ee27a5683f14737994/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1c1183f32810a5b61ee9ee27a5683f14737994/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=fc1c1183f32810a5b61ee9ee27a5683f14737994", "patch": "@@ -165,9 +165,8 @@ impl Ordering {\n /// - total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true; and\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n-/// When this trait is `derive`d, it produces a lexicographic ordering.\n-///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n+/// ordering based on the top-to-bottom declaration order of the struct's members.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`.\n@@ -225,7 +224,8 @@ impl PartialOrd for Ordering {\n /// total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 ==\n /// false` (cf. IEEE 754-2008 section 5.11).\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]`. When `derive`d, it will produce an ordering\n+/// based on the top-to-bottom declaration order of the struct's members.\n #[lang = \"ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {"}]}